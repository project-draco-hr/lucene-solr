{
  while (maxFreq < minShouldMatch && maxFreq + tail.size() >= minShouldMatch) {
    final BulkScorerAndDoc candidate=tail.pop();
    candidate.advance(windowMin);
    if (candidate.next < windowMax) {
      leads[maxFreq++]=candidate;
    }
 else {
      head.add(candidate);
    }
  }
  if (maxFreq >= minShouldMatch) {
    for (int i=0; i < tail.size(); ++i) {
      leads[maxFreq++]=tail.get(i);
    }
    tail.clear();
    scoreWindowIntoBitSetAndReplay(collector,acceptDocs,windowBase,windowMin,windowMax,leads,maxFreq);
  }
  for (int i=0; i < maxFreq; ++i) {
    final BulkScorerAndDoc evicted=head.insertWithOverflow(leads[i]);
    if (evicted != null) {
      tail.add(evicted);
    }
  }
}
