{
  Fields fields=readerContext.reader.fields();
  final Terms terms=fields.terms(field);
  final Similarity sim=((IndexSearcher)context.get("searcher")).getSimilarityProvider().get(field);
  if (!(sim instanceof TFIDFSimilarity)) {
    throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as DefaultSimilarity)");
  }
  final TFIDFSimilarity similarity=(TFIDFSimilarity)sim;
  return new FloatDocValues(this){
    DocsEnum docs;
    int atDoc;
    int lastDocRequested=-1;
{
      reset();
    }
    public void reset() throws IOException {
      if (terms != null) {
        final TermsEnum termsEnum=terms.iterator(null);
        if (termsEnum.seekExact(indexedBytes,false)) {
          docs=termsEnum.docs(null,null);
        }
 else {
          docs=null;
        }
      }
 else {
        docs=null;
      }
      if (docs == null) {
        docs=new DocsEnum(){
          @Override public int freq(){
            return 0;
          }
          @Override public int docID(){
            return DocIdSetIterator.NO_MORE_DOCS;
          }
          @Override public int nextDoc() throws IOException {
            return DocIdSetIterator.NO_MORE_DOCS;
          }
          @Override public int advance(          int target) throws IOException {
            return DocIdSetIterator.NO_MORE_DOCS;
          }
        }
;
      }
      atDoc=-1;
    }
    @Override public float floatVal(    int doc){
      try {
        if (doc < lastDocRequested) {
          reset();
        }
        lastDocRequested=doc;
        if (atDoc < doc) {
          atDoc=docs.advance(doc);
        }
        if (atDoc > doc) {
          return similarity.tf(0);
        }
        return similarity.tf(docs.freq());
      }
 catch (      IOException e) {
        throw new RuntimeException("caught exception in function " + description() + " : doc="+ doc,e);
      }
    }
  }
;
}
