{
  double A=this.x;
  double B=this.y;
  double C=this.z;
  if (!boundsInfo.checkNoTopLatitudeBound() || !boundsInfo.checkNoBottomLatitudeBound()) {
    if ((Math.abs(A) >= MINIMUM_RESOLUTION || Math.abs(B) >= MINIMUM_RESOLUTION)) {
      if (Math.abs(C) < 1.0e-10) {
        double z;
        double x;
        double y;
        double denom=1.0 / (A * A + B * B);
        z=Math.sqrt(1.0 - D * D);
        y=-B * D * denom;
        x=-A * D * denom;
        addPoint(boundsInfo,bounds,x,y,z);
        z=-z;
        addPoint(boundsInfo,bounds,x,y,z);
      }
 else {
        double z;
        double x;
        double y;
        double sqrtValue=D * D * C* C + 1.0 - C * C - D * D;
        if (sqrtValue >= 0.0) {
          double denom=1.0 / (A * A + B * B);
          if (sqrtValue == 0.0) {
            z=D * C;
            if (Math.abs(D - C * z - Math.sqrt(1.0 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
            z=-D * C;
            if (Math.abs(D + C * z + Math.sqrt(1.0 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
          }
 else {
            double sqrtResult=Math.sqrt(sqrtValue);
            z=D * C + sqrtResult;
            if (Math.abs(D - C * z - Math.sqrt(1.0 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
            z=D * C - sqrtResult;
            if (Math.abs(D - C * z - Math.sqrt(1.0 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
            z=-(D * C + sqrtResult);
            if (Math.abs(D + C * z + Math.sqrt(1.0 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
            z=-(D * C - sqrtResult);
            if (Math.abs(D + C * z + Math.sqrt(1 - z * z - C * C + z * z * C* C)) < 1.0e-10) {
              y=-B * (D + C * z) * denom;
              x=-A * (D + C * z) * denom;
              addPoint(boundsInfo,bounds,x,y,z);
            }
          }
        }
      }
    }
 else {
      boundsInfo.addHorizontalCircle(-D * C);
    }
  }
  if (!boundsInfo.checkNoLongitudeBound()) {
    double a;
    double b;
    double c;
    if (Math.abs(C) < MINIMUM_RESOLUTION) {
      if (Math.abs(D) >= MINIMUM_RESOLUTION) {
        if (Math.abs(A) > Math.abs(B)) {
          a=B * B + A * A;
          b=2.0 * B * D;
          c=D * D - A * A;
          double sqrtClause=b * b - 4.0 * a * c;
          if (sqrtClause >= 0.0) {
            if (sqrtClause == 0.0) {
              double y0=-b / (2.0 * a);
              double x0=(-D - B * y0) / A;
              double z0=0.0;
              addPoint(boundsInfo,bounds,x0,y0,z0);
            }
 else {
              double sqrtResult=Math.sqrt(sqrtClause);
              double denom=1.0 / (2.0 * a);
              double Hdenom=1.0 / A;
              double y0a=(-b + sqrtResult) * denom;
              double y0b=(-b - sqrtResult) * denom;
              double x0a=(-D - B * y0a) * Hdenom;
              double x0b=(-D - B * y0b) * Hdenom;
              double z0a=0.0;
              double z0b=0.0;
              addPoint(boundsInfo,bounds,x0a,y0a,z0a);
              addPoint(boundsInfo,bounds,x0b,y0b,z0b);
            }
          }
        }
 else {
          a=B * B + A * A;
          b=2.0 * A * D;
          c=D * D - B * B;
          double sqrtClause=b * b - 4.0 * a * c;
          if (sqrtClause >= 0.0) {
            if (sqrtClause == 0.0) {
              double x0=-b / (2.0 * a);
              double y0=(-D - A * x0) / B;
              double z0=0.0;
              addPoint(boundsInfo,bounds,x0,y0,z0);
            }
 else {
              double sqrtResult=Math.sqrt(sqrtClause);
              double denom=1.0 / (2.0 * a);
              double Idenom=1.0 / B;
              double x0a=(-b + sqrtResult) * denom;
              double x0b=(-b - sqrtResult) * denom;
              double y0a=(-D - A * x0a) * Idenom;
              double y0b=(-D - A * x0b) * Idenom;
              double z0a=0.0;
              double z0b=0.0;
              addPoint(boundsInfo,bounds,x0a,y0a,z0a);
              addPoint(boundsInfo,bounds,x0b,y0b,z0b);
            }
          }
        }
      }
    }
 else {
      double E=A * A + C * C;
      double F=B * B + C * C;
      double G=2.0 * A * B;
      double H=2.0 * A * D;
      double I=2.0 * B * D;
      double J=D * D - C * C;
      if (J > 0.0) {
        if (Math.abs(H) > Math.abs(I)) {
          a=E * I * I - G * H * I + F * H * H;
          b=4.0 * E * I* J - 2.0 * G * H* J;
          c=4.0 * E * J* J - J * H * H;
          double sqrtClause=b * b - 4.0 * a * c;
          if (sqrtClause >= 0.0) {
            if (sqrtClause == 0.0) {
              double y0=-b / (2.0 * a);
              double x0=(-2.0 * J - I * y0) / H;
              double z0=(-A * x0 - B * y0 - D) / C;
              addPoint(boundsInfo,bounds,x0,y0,z0);
            }
 else {
              double sqrtResult=Math.sqrt(sqrtClause);
              double denom=1.0 / (2.0 * a);
              double Hdenom=1.0 / H;
              double Cdenom=1.0 / C;
              double y0a=(-b + sqrtResult) * denom;
              double y0b=(-b - sqrtResult) * denom;
              double x0a=(-2.0 * J - I * y0a) * Hdenom;
              double x0b=(-2.0 * J - I * y0b) * Hdenom;
              double z0a=(-A * x0a - B * y0a - D) * Cdenom;
              double z0b=(-A * x0b - B * y0b - D) * Cdenom;
              addPoint(boundsInfo,bounds,x0a,y0a,z0a);
              addPoint(boundsInfo,bounds,x0b,y0b,z0b);
            }
          }
        }
 else {
          a=E * I * I - G * H * I + F * H * H;
          b=4.0 * F * H* J - 2.0 * G * I* J;
          c=4.0 * F * J* J - J * I * I;
          double sqrtClause=b * b - 4.0 * a * c;
          if (sqrtClause >= 0.0) {
            if (sqrtClause == 0.0) {
              double x0=-b / (2.0 * a);
              double y0=(-2.0 * J - H * x0) / I;
              double z0=(-A * x0 - B * y0 - D) / C;
              addPoint(boundsInfo,bounds,x0,y0,z0);
            }
 else {
              double sqrtResult=Math.sqrt(sqrtClause);
              double denom=1.0 / (2.0 * a);
              double Idenom=1.0 / I;
              double Cdenom=1.0 / C;
              double x0a=(-b + sqrtResult) * denom;
              double x0b=(-b - sqrtResult) * denom;
              double y0a=(-2.0 * J - H * x0a) * Idenom;
              double y0b=(-2.0 * J - H * x0b) * Idenom;
              double z0a=(-A * x0a - B * y0a - D) * Cdenom;
              double z0b=(-A * x0b - B * y0b - D) * Cdenom;
              addPoint(boundsInfo,bounds,x0a,y0a,z0a);
              addPoint(boundsInfo,bounds,x0b,y0b,z0b);
            }
          }
        }
      }
    }
  }
}
