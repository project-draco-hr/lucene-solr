{
  if (collection == null) {
    throw new IOException("docIdSet is null");
  }
  if (sampleSize < 1) {
    throw new IOException("sampleSize < 1 (" + sampleSize + ")");
  }
  if (collectionSize < sampleSize) {
    throw new IOException("collectionSize (" + collectionSize + ") less than sampleSize ("+ sampleSize+ ")");
  }
  int[] sample=new int[sampleSize];
  long[] times=new long[4];
  if (algorithm == Algorithm.TRAVERSAL) {
    RandomSample.sample1(collection,collectionSize,sample,times);
  }
 else   if (algorithm == Algorithm.HASHING) {
    RandomSample.sample2(collection,collectionSize,sample,times);
  }
 else {
    throw new IllegalArgumentException("Invalid algorithm selection");
  }
  if (sorted == Sorted.YES) {
    Arrays.sort(sample);
  }
  if (RandomSample.returnTimings) {
    times[3]=System.currentTimeMillis();
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest("Times: " + (times[1] - times[0]) + "ms, "+ (times[2] - times[1])+ "ms, "+ (times[3] - times[2])+ "ms");
    }
  }
  return sample;
}
