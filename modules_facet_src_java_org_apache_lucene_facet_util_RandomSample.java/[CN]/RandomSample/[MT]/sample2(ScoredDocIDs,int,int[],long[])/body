{
  if (RandomSample.returnTimings) {
    times[0]=System.currentTimeMillis();
  }
  int sampleSize=sample.length;
  IntPriorityQueue pq=new IntPriorityQueue(sampleSize);
  ScoredDocIDsIterator it=collection.iterator();
  while (it.next()) {
    pq.insertWithReuse((int)(it.getDocID() * PHI_32) & 0x7FFFFFFF);
  }
  if (RandomSample.returnTimings) {
    times[1]=System.currentTimeMillis();
  }
  Object[] heap=pq.getHeap();
  for (int si=0; si < sampleSize; si++) {
    sample[si]=(int)(((IntPriorityQueue.MI)(heap[si + 1])).value * PHI_32I) & 0x7FFFFFFF;
  }
  if (RandomSample.returnTimings) {
    times[2]=System.currentTimeMillis();
  }
}
