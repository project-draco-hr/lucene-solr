{
  MockSecurityHandler handler=new MockSecurityHandler();
  String command="{\n" + "'set-user': {'tom':'TomIsCool'},\n" + "'set-user':{ 'tom':'TomIsUberCool'}\n"+ "}";
  LocalSolrQueryRequest req=new LocalSolrQueryRequest(null,new ModifiableSolrParams());
  req.getContext().put("httpMethod","POST");
  req.getContext().put("path","/admin/authentication");
  ContentStreamBase.ByteArrayStream o=new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),"");
  req.setContentStreams(Collections.singletonList(o));
  handler.handleRequestBody(req,new SolrQueryResponse());
  BasicAuthPlugin basicAuth=new BasicAuthPlugin();
  ConfigData securityCfg=(ConfigData)handler.m.get("/security.json");
  basicAuth.init((Map<String,Object>)securityCfg.data.get("authentication"));
  assertTrue(basicAuth.authenticate("tom","TomIsUberCool"));
  command="{\n" + "'set-user': {'harry':'HarryIsCool'},\n" + "'delete-user': ['tom','harry']\n"+ "}";
  o=new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),"");
  req.setContentStreams(Collections.singletonList(o));
  handler.handleRequestBody(req,new SolrQueryResponse());
  securityCfg=(ConfigData)handler.m.get("/security.json");
  assertEquals(3,securityCfg.version);
  Map result=(Map)securityCfg.data.get("authentication");
  result=(Map)result.get("credentials");
  assertTrue(result.isEmpty());
  command="{'set-user-role': { 'tom': ['admin','dev']},\n" + "'set-permission':{'name': 'security-edit',\n" + "                  'role': 'admin'\n"+ "                  },\n"+ "'set-permission':{'name':'some-permission',\n"+ "                      'collection':'acoll',\n"+ "                      'path':'/nonexistentpath',\n"+ "                      'role':'guest',\n"+ "                      'before':'security-edit'\n"+ "                      }\n"+ "}";
  req=new LocalSolrQueryRequest(null,new ModifiableSolrParams());
  req.getContext().put("httpMethod","POST");
  req.getContext().put("path","/admin/authorization");
  o=new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),"");
  req.setContentStreams(Collections.singletonList(o));
  SolrQueryResponse rsp=new SolrQueryResponse();
  handler.handleRequestBody(req,rsp);
  assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));
  Map authzconf=(Map)((ConfigData)handler.m.get("/security.json")).data.get("authorization");
  Map userRoles=(Map)authzconf.get("user-role");
  List tomRoles=(List)userRoles.get("tom");
  assertTrue(tomRoles.contains("admin"));
  assertTrue(tomRoles.contains("dev"));
  Map permissions=(Map)authzconf.get("permissions");
  assertEquals(2,permissions.size());
  for (  Object p : permissions.entrySet()) {
    Map.Entry e=(Map.Entry)p;
    assertEquals("some-permission",e.getKey());
    break;
  }
  command="{\n" + "'delete-permission': 'some-permission',\n" + "'set-user-role':{'tom':null}\n"+ "}";
  req=new LocalSolrQueryRequest(null,new ModifiableSolrParams());
  req.getContext().put("httpMethod","POST");
  req.getContext().put("path","/admin/authorization");
  o=new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),"");
  req.setContentStreams(Collections.singletonList(o));
  rsp=new SolrQueryResponse();
  handler.handleRequestBody(req,rsp);
  assertNull(rsp.getValues().get(CommandOperation.ERR_MSGS));
  authzconf=(Map)((ConfigData)handler.m.get("/security.json")).data.get("authorization");
  userRoles=(Map)authzconf.get("user-role");
  assertEquals(0,userRoles.size());
  permissions=(Map)authzconf.get("permissions");
  assertEquals(1,permissions.size());
  assertNull(permissions.get("some-permission"));
  command="{\n" + "'set-permission':{'name': 'security-edit',\n" + "                  'method':'POST',"+ "                  'role': 'admin'\n"+ "                  }}";
  req=new LocalSolrQueryRequest(null,new ModifiableSolrParams());
  req.getContext().put("httpMethod","POST");
  req.getContext().put("path","/admin/authorization");
  o=new ContentStreamBase.ByteArrayStream(command.getBytes(StandardCharsets.UTF_8),"");
  req.setContentStreams(Collections.singletonList(o));
  rsp=new SolrQueryResponse();
  handler.handleRequestBody(req,rsp);
  List l=(List)((Map)((List)rsp.getValues().get("errorMessages")).get(0)).get("errorMessages");
  assertEquals(1,l.size());
}
