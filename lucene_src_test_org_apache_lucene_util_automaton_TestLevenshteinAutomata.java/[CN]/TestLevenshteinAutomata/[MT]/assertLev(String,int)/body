{
  LevenshteinAutomata builder=new LevenshteinAutomata(s);
  Automaton automata[]=new Automaton[maxDistance + 1];
  for (int n=0; n < automata.length; n++) {
    automata[n]=builder.toAutomaton(n);
    assertNotNull(automata[n]);
    assertTrue(automata[n].isDeterministic());
    assertTrue(SpecialOperations.isFinite(automata[n]));
    if (n > 0) {
      assertTrue(automata[n - 1].subsetOf(automata[n]));
      assertNotSame(automata[n - 1],automata[n]);
    }
switch (n) {
case 0:
      assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s),automata[0]));
    break;
case 1:
  assertTrue(BasicOperations.sameLanguage(naiveLev1(s),automata[1]));
break;
default :
assertBruteForce(s,automata[n],n);
break;
}
}
}
