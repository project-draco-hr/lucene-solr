{
  if (clauses.size() == 1)   return ((SpanQuery)clauses.get(0)).getSpans(reader);
  return new Spans(){
    private List all=new ArrayList(clauses.size());
    private SpanQueue queue=new SpanQueue(clauses.size());
{
      Iterator i=clauses.iterator();
      while (i.hasNext()) {
        all.add(((SpanQuery)i.next()).getSpans(reader));
      }
    }
    private boolean firstTime=true;
    public boolean next() throws IOException {
      if (firstTime) {
        for (int i=0; i < all.size(); i++) {
          Spans spans=(Spans)all.get(i);
          if (spans.next()) {
            queue.put(spans);
          }
 else {
            all.remove(i--);
          }
        }
        firstTime=false;
        return queue.size() != 0;
      }
      if (queue.size() == 0) {
        return false;
      }
      if (top().next()) {
        queue.adjustTop();
        return true;
      }
      all.remove(queue.pop());
      return queue.size() != 0;
    }
    private Spans top(){
      return (Spans)queue.top();
    }
    public boolean skipTo(    int target) throws IOException {
      if (firstTime) {
        for (int i=0; i < all.size(); i++) {
          Spans spans=(Spans)all.get(i);
          if (spans.skipTo(target)) {
            queue.put(spans);
          }
 else {
            all.remove(i--);
          }
        }
        firstTime=false;
      }
 else {
        while (queue.size() != 0 && top().doc() < target) {
          if (top().skipTo(target)) {
            queue.adjustTop();
          }
 else {
            all.remove(queue.pop());
          }
        }
      }
      return queue.size() != 0;
    }
    public int doc(){
      return top().doc();
    }
    public int start(){
      return top().start();
    }
    public int end(){
      return top().end();
    }
    public String toString(){
      return "spans(" + SpanOrQuery.this + ")@"+ (firstTime ? "START" : (queue.size() > 0 ? (doc() + ":" + start()+ "-"+ end()) : "END"));
    }
  }
;
}
