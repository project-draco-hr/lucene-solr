{
  FacetsConfig.DimConfig dimConfig=verifyDim(dim);
  FacetLabel cp=FacetLabel.create(dim,path);
  int dimOrd=taxoReader.getOrdinal(cp);
  if (dimOrd == -1) {
    return null;
  }
  TopOrdAndIntQueue q=new TopOrdAndIntQueue(Math.min(taxoReader.getSize(),topN));
  int bottomCount=0;
  int ord=children[dimOrd];
  int totCount=0;
  TopOrdAndIntQueue.OrdAndValue reuse=null;
  while (ord != TaxonomyReader.INVALID_ORDINAL) {
    if (counts[ord] > 0) {
      totCount+=counts[ord];
      if (counts[ord] > bottomCount) {
        if (reuse == null) {
          reuse=new TopOrdAndIntQueue.OrdAndValue();
        }
        reuse.ord=ord;
        reuse.value=counts[ord];
        reuse=q.insertWithOverflow(reuse);
        if (q.size() == topN) {
          bottomCount=q.top().value;
        }
      }
    }
    ord=siblings[ord];
  }
  if (totCount == 0) {
    return null;
  }
  if (dimConfig.multiValued) {
    if (dimConfig.requireDimCount) {
      totCount=counts[dimOrd];
    }
 else {
      totCount=-1;
    }
  }
 else {
  }
  LabelAndValue[] labelValues=new LabelAndValue[q.size()];
  for (int i=labelValues.length - 1; i >= 0; i--) {
    TopOrdAndIntQueue.OrdAndValue ordAndValue=q.pop();
    FacetLabel child=taxoReader.getPath(ordAndValue.ord);
    labelValues[i]=new LabelAndValue(child.components[cp.length],ordAndValue.value);
  }
  return new SimpleFacetResult(cp,totCount,labelValues);
}
