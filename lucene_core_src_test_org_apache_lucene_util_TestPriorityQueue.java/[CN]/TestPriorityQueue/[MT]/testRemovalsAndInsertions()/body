{
  Random random=random();
  int numDocsInPQ=TestUtil.nextInt(random,1,100);
  IntegerQueue pq=new IntegerQueue(numDocsInPQ);
  Integer lastLeast=null;
  ArrayList<Integer> sds=new ArrayList<Integer>(numDocsInPQ);
  for (int i=0; i < numDocsInPQ * 10; i++) {
    Integer newEntry=new Integer(Math.abs(random.nextInt()));
    sds.add(newEntry);
    Integer evicted=pq.insertWithOverflow(newEntry);
    pq.checkValidity();
    if (evicted != null) {
      assertTrue(sds.remove(evicted));
      if (evicted != newEntry) {
        assertTrue(evicted == lastLeast);
      }
    }
    Integer newLeast=pq.top();
    if ((lastLeast != null) && (newLeast != newEntry) && (newLeast != lastLeast)) {
      assertTrue(newLeast <= newEntry);
      assertTrue(newLeast >= lastLeast);
    }
    lastLeast=newLeast;
  }
  for (int p=0; p < 500000; p++) {
    int element=(int)(random.nextFloat() * (sds.size() - 1));
    Integer objectToRemove=sds.get(element);
    assertTrue(sds.remove(element) == objectToRemove);
    assertTrue(pq.remove(objectToRemove));
    pq.checkValidity();
    Integer newEntry=new Integer(Math.abs(random.nextInt()));
    sds.add(newEntry);
    assertNull(pq.insertWithOverflow(newEntry));
    pq.checkValidity();
    Integer newLeast=pq.top();
    if ((objectToRemove != lastLeast) && (lastLeast != null) && (newLeast != newEntry)) {
      assertTrue(newLeast <= newEntry);
      assertTrue(newLeast >= lastLeast);
    }
    lastLeast=newLeast;
  }
}
