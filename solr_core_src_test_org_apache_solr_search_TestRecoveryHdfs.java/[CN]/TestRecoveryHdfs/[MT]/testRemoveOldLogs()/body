{
  try {
    DirectUpdateHandler2.commitOnClose=false;
    final Semaphore logReplay=new Semaphore(0);
    final Semaphore logReplayFinish=new Semaphore(0);
    UpdateLog.testing_logReplayHook=new Runnable(){
      @Override public void run(){
        try {
          assertTrue(logReplay.tryAcquire(timeout,TimeUnit.SECONDS));
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    UpdateLog.testing_logReplayFinishHook=new Runnable(){
      @Override public void run(){
        logReplayFinish.release();
      }
    }
;
    clearIndex();
    assertU(commit());
    String logDir=h.getCore().getUpdateHandler().getUpdateLog().getLogDir();
    Configuration conf=new Configuration();
    conf.setBoolean("fs.hdfs.impl.disable.cache",true);
    FileSystem fs;
    try {
      URI uri=new URI(hdfsUri);
      fs=FileSystem.newInstance(uri,conf);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
    h.close();
    String[] files=HdfsUpdateLog.getLogList(fs,new Path(logDir));
    for (    String file : files) {
      fs.delete(new Path(logDir,file),false);
    }
    assertEquals(0,HdfsUpdateLog.getLogList(fs,new Path(logDir)).length);
    createCore();
    int start=0;
    int maxReq=50;
    LinkedList<Long> versions=new LinkedList<Long>();
    addDocs(10,start,versions);
    start+=10;
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertU(commit());
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    addDocs(10,start,versions);
    start+=10;
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertU(commit());
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertEquals(2,HdfsUpdateLog.getLogList(fs,new Path(logDir)).length);
    addDocs(105,start,versions);
    start+=105;
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertU(commit());
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertEquals(1,HdfsUpdateLog.getLogList(fs,new Path(logDir)).length);
    addDocs(1,start,versions);
    start+=1;
    h.close();
    createCore();
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    logReplay.release(1000);
    assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS));
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    addDocs(105,start,versions);
    start+=105;
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertU(commit());
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    assertEquals(1,HdfsUpdateLog.getLogList(fs,new Path(logDir)).length);
    addDocs(1,start,new LinkedList<Long>());
    h.close();
    files=HdfsUpdateLog.getLogList(fs,new Path(logDir));
    ;
    Arrays.sort(files);
    FSDataOutputStream dos=fs.create(new Path(new Path(logDir),files[files.length - 1]),(short)1);
    dos.writeUTF("This is a trashed log file that really shouldn't work at all, but we'll see..");
    dos.close();
    ignoreException("Failure to open existing");
    createCore();
    assertJQ(req("qt","/get","getVersions","" + maxReq),"/versions==" + versions.subList(0,Math.min(maxReq,start)));
    resetExceptionIgnores();
  }
  finally {
    DirectUpdateHandler2.commitOnClose=true;
    UpdateLog.testing_logReplayHook=null;
    UpdateLog.testing_logReplayFinishHook=null;
  }
}
