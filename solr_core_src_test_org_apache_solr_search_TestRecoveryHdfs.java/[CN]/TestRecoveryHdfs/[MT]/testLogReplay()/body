{
  try {
    DirectUpdateHandler2.commitOnClose=false;
    final Semaphore logReplay=new Semaphore(0);
    final Semaphore logReplayFinish=new Semaphore(0);
    UpdateLog.testing_logReplayHook=new Runnable(){
      @Override public void run(){
        try {
          assertTrue(logReplay.tryAcquire(timeout,TimeUnit.SECONDS));
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    UpdateLog.testing_logReplayFinishHook=new Runnable(){
      @Override public void run(){
        logReplayFinish.release();
      }
    }
;
    clearIndex();
    assertU(commit());
    Deque<Long> versions=new ArrayDeque<Long>();
    versions.addFirst(addAndGetVersion(sdoc("id","A1"),null));
    versions.addFirst(addAndGetVersion(sdoc("id","A11"),null));
    versions.addFirst(addAndGetVersion(sdoc("id","A12"),null));
    versions.addFirst(deleteByQueryAndGetVersion("id:A11",null));
    versions.addFirst(addAndGetVersion(sdoc("id","A13"),null));
    assertJQ(req("q","*:*"),"/response/numFound==0");
    assertJQ(req("qt","/get","getVersions","" + versions.size()),"/versions==" + versions);
    h.close();
    createCore();
    assertJQ(req("q","*:*"),"/response/numFound==0");
    assertJQ(req("qt","/get","getVersions","" + versions.size()),"/versions==" + versions);
    logReplay.release(1000);
    assertJQ(req("qt","/get","getVersions","" + versions.size()),"/versions==" + versions);
    assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS));
    assertJQ(req("q","*:*"),"/response/numFound==3");
    assertJQ(req("qt","/get","getVersions","" + versions.size()),"/versions==" + versions);
    assertU(adoc("id","A2"));
    assertU(adoc("id","A3"));
    assertU(delI("A2"));
    assertU(adoc("id","A4"));
    assertJQ(req("q","*:*"),"/response/numFound==3");
    h.close();
    createCore();
    assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS));
    assertJQ(req("q","*:*"),"/response/numFound==5");
    assertJQ(req("q","id:A2"),"/response/numFound==0");
    h.close();
    int permits=logReplay.availablePermits();
    createCore();
    assertJQ(req("q","*:*"),"/response/numFound==5");
    Thread.sleep(100);
    assertEquals(permits,logReplay.availablePermits());
    assertEquals(UpdateLog.State.ACTIVE,h.getCore().getUpdateHandler().getUpdateLog().getState());
  }
  finally {
    DirectUpdateHandler2.commitOnClose=true;
    UpdateLog.testing_logReplayHook=null;
    UpdateLog.testing_logReplayFinishHook=null;
  }
}
