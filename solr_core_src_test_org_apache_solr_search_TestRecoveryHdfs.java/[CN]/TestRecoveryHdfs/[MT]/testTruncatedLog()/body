{
  try {
    DirectUpdateHandler2.commitOnClose=false;
    final Semaphore logReplay=new Semaphore(0);
    final Semaphore logReplayFinish=new Semaphore(0);
    UpdateLog.testing_logReplayHook=new Runnable(){
      @Override public void run(){
        try {
          assertTrue(logReplay.tryAcquire(timeout,TimeUnit.SECONDS));
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    UpdateLog.testing_logReplayFinishHook=new Runnable(){
      @Override public void run(){
        logReplayFinish.release();
      }
    }
;
    String logDir=h.getCore().getUpdateHandler().getUpdateLog().getLogDir();
    clearIndex();
    assertU(commit());
    assertU(adoc("id","F1"));
    assertU(adoc("id","F2"));
    assertU(adoc("id","F3"));
    h.close();
    String[] files=HdfsUpdateLog.getLogList(fs,new Path(logDir));
    Arrays.sort(files);
    FSDataOutputStream dos=fs.append(new Path(logDir,files[files.length - 1]));
    dos.writeLong(0xffffffffffffffffL);
    dos.writeChars("This should be appended to a good log file, representing a bad partially written record.");
    dos.close();
    logReplay.release(1000);
    logReplayFinish.drainPermits();
    ignoreException("OutOfBoundsException");
    createCore();
    assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS));
    resetExceptionIgnores();
    assertJQ(req("q","*:*"),"/response/numFound==3");
    updateJ(jsonAdd(sdoc("id","F4","_version_","104")),params(DISTRIB_UPDATE_PARAM,FROM_LEADER));
    updateJ(jsonAdd(sdoc("id","F5","_version_","105")),params(DISTRIB_UPDATE_PARAM,FROM_LEADER));
    updateJ(jsonAdd(sdoc("id","F6","_version_","106")),params(DISTRIB_UPDATE_PARAM,FROM_LEADER));
    assertJQ(req("qt","/get","getVersions","3"),"/versions==[106,105,104]");
  }
  finally {
    DirectUpdateHandler2.commitOnClose=true;
    UpdateLog.testing_logReplayHook=null;
    UpdateLog.testing_logReplayFinishHook=null;
  }
}
