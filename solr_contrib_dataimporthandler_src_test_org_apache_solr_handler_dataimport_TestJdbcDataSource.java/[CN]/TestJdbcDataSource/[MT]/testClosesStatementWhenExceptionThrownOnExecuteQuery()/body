{
  MockInitialContextFactory.bind("java:comp/env/jdbc/JndiDB",dataSource);
  props.put(JdbcDataSource.JNDI_NAME,"java:comp/env/jdbc/JndiDB");
  EasyMock.expect(dataSource.getConnection()).andReturn(connection);
  jdbcDataSource.init(context,props);
  connection.setAutoCommit(false);
  SQLException sqlException=new SQLException("fake");
  Statement statement=mockControl.createMock(Statement.class);
  EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY)).andReturn(statement);
  statement.setFetchSize(500);
  statement.setMaxRows(0);
  EasyMock.expect(statement.execute("query")).andThrow(sqlException);
  statement.close();
  mockControl.replay();
  try {
    jdbcDataSource.getData("query");
    fail("exception expected");
  }
 catch (  DataImportHandlerException ex) {
    assertSame(sqlException,ex.getCause());
  }
  mockControl.verify();
}
