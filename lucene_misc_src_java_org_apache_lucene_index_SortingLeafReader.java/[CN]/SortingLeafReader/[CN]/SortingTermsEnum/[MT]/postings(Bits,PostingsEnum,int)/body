{
  if (PostingsEnum.featureRequested(flags,PostingsEnum.POSITIONS)) {
    final PostingsEnum inReuse;
    final SortingPostingsEnum wrapReuse;
    if (reuse != null && reuse instanceof SortingPostingsEnum) {
      wrapReuse=(SortingPostingsEnum)reuse;
      inReuse=wrapReuse.getWrapped();
    }
 else {
      wrapReuse=null;
      inReuse=reuse;
    }
    final PostingsEnum inDocsAndPositions=in.postings(newToOld(liveDocs),inReuse,flags);
    if (inDocsAndPositions == null) {
      return null;
    }
    final boolean storeOffsets=indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
    return new SortingPostingsEnum(docMap.size(),wrapReuse,inDocsAndPositions,docMap,storeOffsets);
  }
  final PostingsEnum inReuse;
  final SortingDocsEnum wrapReuse;
  if (reuse != null && reuse instanceof SortingDocsEnum) {
    wrapReuse=(SortingDocsEnum)reuse;
    inReuse=wrapReuse.getWrapped();
  }
 else {
    wrapReuse=null;
    inReuse=reuse;
  }
  final PostingsEnum inDocs=in.postings(newToOld(liveDocs),inReuse,flags);
  final boolean withFreqs=indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0 && PostingsEnum.featureRequested(flags,PostingsEnum.FREQS);
  return new SortingDocsEnum(docMap.size(),wrapReuse,inDocs,withFreqs,docMap);
}
