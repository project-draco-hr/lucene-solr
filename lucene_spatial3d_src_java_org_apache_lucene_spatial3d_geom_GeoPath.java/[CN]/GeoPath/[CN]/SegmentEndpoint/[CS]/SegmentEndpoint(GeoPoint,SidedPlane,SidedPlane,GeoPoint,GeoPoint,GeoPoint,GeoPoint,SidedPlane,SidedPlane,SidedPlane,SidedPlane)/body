{
  this.point=point;
  final boolean cand1IsOtherWithin=candidate1 != null ? candidate1.isWithin(notCand1Point) : false;
  final boolean cand2IsOtherWithin=candidate2 != null ? candidate2.isWithin(notCand2Point) : false;
  final boolean cand3IsOtherWithin=candidate3 != null ? candidate3.isWithin(notCand3Point) : false;
  final boolean cand4IsOtherWithin=candidate4 != null ? candidate4.isWithin(notCand4Point) : false;
  if (cand1IsOtherWithin && cand2IsOtherWithin && cand3IsOtherWithin&& cand4IsOtherWithin) {
    this.circlePlane=candidate1;
    this.notablePoints=new GeoPoint[]{notCand2Point,notCand3Point,notCand1Point,notCand4Point};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane),new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand1IsOtherWithin) {
    this.circlePlane=candidate1;
    this.notablePoints=new GeoPoint[]{notCand2Point,notCand3Point,notCand4Point};
    this.cutoffPlanes=new Membership[]{new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand2IsOtherWithin) {
    this.circlePlane=candidate2;
    this.notablePoints=new GeoPoint[]{notCand3Point,notCand4Point,notCand1Point};
    this.cutoffPlanes=new Membership[]{new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand3IsOtherWithin) {
    this.circlePlane=candidate3;
    this.notablePoints=new GeoPoint[]{notCand4Point,notCand1Point,notCand2Point};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane)};
  }
 else   if (cand4IsOtherWithin) {
    this.circlePlane=candidate4;
    this.notablePoints=new GeoPoint[]{notCand1Point,notCand2Point,notCand3Point};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane)};
  }
 else {
    throw new RuntimeException("Couldn't come up with a plane through three points that included the fourth");
  }
}
