{
  if (stateName == null) {
    coreStates.remove(coreName);
    ElectionContext ec=electionContext.remove(coreName);
    if (ec != null) {
      ec.cancelElection();
    }
  }
 else {
    HashMap<String,String> coreProps=new HashMap<String,String>();
    coreProps.put(ZkStateReader.STATE_PROP,stateName);
    coreProps.put(ZkStateReader.NODE_NAME_PROP,nodeName);
    coreProps.put(ZkStateReader.CORE_NAME_PROP,coreName);
    coreProps.put(ZkStateReader.COLLECTION_PROP,collection);
    coreProps.put(ZkStateReader.BASE_URL_PROP,"http://" + nodeName + "/solr/");
    CoreState state=new CoreState(coreName,collection,coreProps,numShards);
    coreStates.remove(coreName);
    coreStates.put(coreName,state);
  }
  final String statePath=Overseer.STATES_NODE + "/" + nodeName;
  zkClient.setData(statePath,ZkStateReader.toJSON(coreStates.values().toArray(new CoreState[coreStates.size()])),true);
  for (int i=0; i < 30; i++) {
    String shardId=getShardId(coreName);
    if (shardId != null) {
      try {
        zkClient.makePath("/collections/" + collection + "/leader_elect/"+ shardId+ "/election",true);
      }
 catch (      NodeExistsException nee) {
      }
      ZkNodeProps props=new ZkNodeProps(ZkStateReader.BASE_URL_PROP,"http://" + nodeName + "/solr/",ZkStateReader.NODE_NAME_PROP,nodeName,ZkStateReader.CORE_NAME_PROP,coreName,ZkStateReader.SHARD_ID_PROP,shardId,ZkStateReader.COLLECTION_PROP,collection);
      ShardLeaderElectionContextBase ctx=new ShardLeaderElectionContextBase(elector,shardId,collection,nodeName + "_" + coreName,props,zkStateReader);
      elector.joinElection(ctx);
      break;
    }
    Thread.sleep(200);
  }
}
