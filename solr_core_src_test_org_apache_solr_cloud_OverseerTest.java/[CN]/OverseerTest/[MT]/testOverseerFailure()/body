{
  String zkDir=createTempDir("zkData").toFile().getAbsolutePath();
  ZkTestServer server=new ZkTestServer(zkDir);
  SolrZkClient overseerClient=null;
  ZkStateReader reader=null;
  MockZKController mockController=null;
  SolrZkClient zkClient=null;
  try {
    final String core="core1";
    final String core_node="core_node1";
    final String shard="shard1";
    final int numShards=1;
    server.run();
    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());
    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
    zkClient=new SolrZkClient(server.getZkAddress(),TIMEOUT);
    ZkController.createClusterZkNodes(zkClient);
    reader=new ZkStateReader(zkClient);
    reader.createClusterStateWatchersAndUpdate();
    mockController=new MockZKController(server.getZkAddress(),"node1");
    overseerClient=electNewOverseer(server.getZkAddress());
    Thread.sleep(1000);
    mockController.publishState(collection,core,core_node,Replica.State.RECOVERING,numShards);
    waitForCollections(reader,collection);
    verifyReplicaStatus(reader,collection,"shard1","core_node1",Replica.State.RECOVERING);
    int version=getClusterStateVersion(zkClient);
    mockController.publishState(collection,core,core_node,Replica.State.ACTIVE,numShards);
    while (version == getClusterStateVersion(zkClient))     ;
    verifyReplicaStatus(reader,collection,"shard1","core_node1",Replica.State.ACTIVE);
    version=getClusterStateVersion(zkClient);
    overseerClient.close();
    Thread.sleep(1000);
    mockController.publishState(collection,core,core_node,Replica.State.RECOVERING,numShards);
    version=getClusterStateVersion(zkClient);
    overseerClient=electNewOverseer(server.getZkAddress());
    while (version == getClusterStateVersion(zkClient))     ;
    verifyReplicaStatus(reader,collection,"shard1","core_node1",Replica.State.RECOVERING);
    assertEquals("Live nodes count does not match",1,reader.getClusterState().getLiveNodes().size());
    assertEquals(shard + " replica count does not match",1,reader.getClusterState().getSlice(collection,shard).getReplicasMap().size());
    version=getClusterStateVersion(zkClient);
    mockController.publishState(collection,core,core_node,null,numShards);
    while (version == getClusterStateVersion(zkClient))     ;
    Thread.sleep(500);
    assertTrue(collection + " should remain after removal of the last core",reader.getClusterState().getCollections().contains(collection));
    assertTrue(core_node + " should be gone after publishing the null state",null == reader.getClusterState().getCollection(collection).getReplica(core_node));
  }
  finally {
    close(mockController);
    close(overseerClient);
    close(zkClient);
    close(reader);
    server.shutdown();
  }
}
