{
  assertEquals(0,orig_floatToByte_v13(5.8123817E-10f));
  assertEquals(1,orig_floatToByte(5.8123817E-10f));
  assertEquals(1,SmallFloat.floatToByte315(5.8123817E-10f));
  assertEquals(0,SmallFloat.floatToByte315(0));
  assertEquals(1,SmallFloat.floatToByte315(Float.MIN_VALUE));
  assertEquals(255,SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);
  assertEquals(255,SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);
  assertEquals(0,SmallFloat.floatToByte315(-Float.MIN_VALUE));
  assertEquals(0,SmallFloat.floatToByte315(-Float.MAX_VALUE));
  assertEquals(0,SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));
  int num=atLeast(100000);
  for (int i=0; i < num; i++) {
    float f=Float.intBitsToFloat(random().nextInt());
    if (Float.isNaN(f))     continue;
    byte b1=orig_floatToByte(f);
    byte b2=SmallFloat.floatToByte(f,3,15);
    byte b3=SmallFloat.floatToByte315(f);
    assertEquals(b1,b2);
    assertEquals(b2,b3);
    byte b4=SmallFloat.floatToByte(f,5,2);
    byte b5=SmallFloat.floatToByte52(f);
    assertEquals(b4,b5);
  }
}
