{
  super(label);
  this.min=min;
  this.max=max;
  this.minInclusive=minInclusive;
  this.maxInclusive=maxInclusive;
  if (Float.isNaN(min)) {
    throw new IllegalArgumentException("min cannot be NaN");
  }
  if (!minInclusive) {
    min=Math.nextUp(min);
  }
  if (Float.isNaN(max)) {
    throw new IllegalArgumentException("max cannot be NaN");
  }
  if (!maxInclusive) {
    max=Math.nextAfter(max,Float.NEGATIVE_INFINITY);
  }
  this.minIncl=min;
  this.maxIncl=max;
}
