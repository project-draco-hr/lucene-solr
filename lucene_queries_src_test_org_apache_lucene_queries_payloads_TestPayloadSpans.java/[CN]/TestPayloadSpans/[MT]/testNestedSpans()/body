{
  SpanTermQuery stq;
  Spans spans;
  IndexSearcher searcher=getSearcher();
  stq=new SpanTermQuery(new Term(PayloadHelper.FIELD,"mark"));
  spans=stq.createWeight(searcher,false).getSpans(searcher.getIndexReader().leaves().get(0),SpanWeight.Postings.PAYLOADS);
  assertNull(spans);
  SpanQuery[] clauses=new SpanQuery[3];
  clauses[0]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"rr"));
  clauses[1]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"yy"));
  clauses[2]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"xx"));
  SpanNearQuery spanNearQuery=new SpanNearQuery(clauses,12,false);
  spans=spanNearQuery.createWeight(searcher,false).getSpans(searcher.getIndexReader().leaves().get(0),SpanWeight.Postings.PAYLOADS);
  assertTrue("spans is null and it shouldn't be",spans != null);
  checkSpans(spans,2,new int[]{3,3});
  clauses[0]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"xx"));
  clauses[1]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"rr"));
  clauses[2]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"yy"));
  spanNearQuery=new SpanNearQuery(clauses,6,true);
  spans=spanNearQuery.createWeight(searcher,false).getSpans(searcher.getIndexReader().leaves().get(0),SpanWeight.Postings.PAYLOADS);
  assertTrue("spans is null and it shouldn't be",spans != null);
  checkSpans(spans,1,new int[]{3});
  clauses=new SpanQuery[2];
  clauses[0]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"xx"));
  clauses[1]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"rr"));
  spanNearQuery=new SpanNearQuery(clauses,6,true);
  SpanQuery[] clauses2=new SpanQuery[2];
  clauses2[0]=new SpanTermQuery(new Term(PayloadHelper.FIELD,"yy"));
  clauses2[1]=spanNearQuery;
  SpanNearQuery nestedSpanNearQuery=new SpanNearQuery(clauses2,6,false);
  spans=nestedSpanNearQuery.createWeight(searcher,false).getSpans(searcher.getIndexReader().leaves().get(0),SpanWeight.Postings.PAYLOADS);
  assertTrue("spans is null and it shouldn't be",spans != null);
  checkSpans(spans,2,new int[]{3,3});
  closeIndexReader.close();
  directory.close();
}
