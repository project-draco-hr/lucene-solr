{
  if (lo >= hi)   return;
 else   if (hi == 1 + lo) {
    if (comparePostings(termIDs[lo],termIDs[hi]) > 0) {
      final int tmp=termIDs[lo];
      termIDs[lo]=termIDs[hi];
      termIDs[hi]=tmp;
    }
    return;
  }
  int mid=(lo + hi) >>> 1;
  if (comparePostings(termIDs[lo],termIDs[mid]) > 0) {
    int tmp=termIDs[lo];
    termIDs[lo]=termIDs[mid];
    termIDs[mid]=tmp;
  }
  if (comparePostings(termIDs[mid],termIDs[hi]) > 0) {
    int tmp=termIDs[mid];
    termIDs[mid]=termIDs[hi];
    termIDs[hi]=tmp;
    if (comparePostings(termIDs[lo],termIDs[mid]) > 0) {
      int tmp2=termIDs[lo];
      termIDs[lo]=termIDs[mid];
      termIDs[mid]=tmp2;
    }
  }
  int left=lo + 1;
  int right=hi - 1;
  if (left >= right)   return;
  int partition=termIDs[mid];
  for (; ; ) {
    while (comparePostings(termIDs[right],partition) > 0)     --right;
    while (left < right && comparePostings(termIDs[left],partition) <= 0)     ++left;
    if (left < right) {
      int tmp=termIDs[left];
      termIDs[left]=termIDs[right];
      termIDs[right]=tmp;
      --right;
    }
 else {
      break;
    }
  }
  quickSort(termIDs,lo,left);
  quickSort(termIDs,left + 1,hi);
}
