{
  if ((topN == 0) || (firstPassTopDocs.totalHits == 0)) {
    return firstPassTopDocs;
  }
  final ScoreDoc[] hits=firstPassTopDocs.scoreDocs;
  Arrays.sort(hits,new Comparator<ScoreDoc>(){
    @Override public int compare(    ScoreDoc a,    ScoreDoc b){
      return a.doc - b.doc;
    }
  }
);
  topN=Math.min(topN,firstPassTopDocs.totalHits);
  final ScoreDoc[] reranked=new ScoreDoc[topN];
  final List<LeafReaderContext> leaves=searcher.getIndexReader().leaves();
  final LTRScoringQuery.ModelWeight modelWeight=(LTRScoringQuery.ModelWeight)searcher.createNormalizedWeight(scoringQuery,true);
  final SolrIndexSearcher solrIndexSearch=(SolrIndexSearcher)searcher;
  scoreFeatures(solrIndexSearch,firstPassTopDocs,topN,modelWeight,hits,leaves,reranked);
  Arrays.sort(reranked,new Comparator<ScoreDoc>(){
    @Override public int compare(    ScoreDoc a,    ScoreDoc b){
      if (a.score > b.score) {
        return -1;
      }
 else       if (a.score < b.score) {
        return 1;
      }
 else {
        return a.doc - b.doc;
      }
    }
  }
);
  return new TopDocs(firstPassTopDocs.totalHits,reranked,reranked[0].score);
}
