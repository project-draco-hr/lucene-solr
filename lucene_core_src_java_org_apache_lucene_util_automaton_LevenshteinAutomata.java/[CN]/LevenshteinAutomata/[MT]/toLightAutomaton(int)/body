{
  if (n == 0) {
    return BasicAutomata.makeString(word,0,word.length).toLightAutomaton();
  }
  if (n >= descriptions.length)   return null;
  final int range=2 * n + 1;
  ParametricDescription description=descriptions[n];
  int numStates=description.size();
  LightAutomaton a=new LightAutomaton();
  for (int i=0; i < numStates; i++) {
    a.createState();
    a.setAccept(i,description.isAccept(i));
  }
  for (int k=0; k < numStates; k++) {
    final int xpos=description.getPosition(k);
    if (xpos < 0)     continue;
    final int end=xpos + Math.min(word.length - xpos,range);
    for (int x=0; x < alphabet.length; x++) {
      final int ch=alphabet[x];
      final int cvec=getVector(ch,xpos,end);
      int dest=description.transition(k,xpos,cvec);
      if (dest >= 0) {
        a.addTransition(k,dest,ch);
      }
    }
    int dest=description.transition(k,xpos,0);
    if (dest >= 0) {
      for (int r=0; r < numRanges; r++) {
        a.addTransition(k,dest,rangeLower[r],rangeUpper[r]);
      }
    }
  }
  a.finish();
  return a;
}
