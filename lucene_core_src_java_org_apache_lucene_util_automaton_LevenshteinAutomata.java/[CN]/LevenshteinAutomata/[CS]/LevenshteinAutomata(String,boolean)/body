{
  this.input=input;
  int length=Character.codePointCount(input,0,input.length());
  word=new int[length];
  for (int i=0, j=0, cp=0; i < input.length(); i+=Character.charCount(cp)) {
    word[j++]=cp=input.codePointAt(i);
  }
  SortedSet<Integer> set=new TreeSet<Integer>();
  for (int i=0; i < word.length; i++)   set.add(word[i]);
  alphabet=new int[set.size()];
  Iterator<Integer> iterator=set.iterator();
  for (int i=0; i < alphabet.length; i++)   alphabet[i]=iterator.next();
  rangeLower=new int[alphabet.length + 2];
  rangeUpper=new int[alphabet.length + 2];
  int lower=0;
  for (int i=0; i < alphabet.length; i++) {
    int higher=alphabet[i];
    if (higher > lower) {
      rangeLower[numRanges]=lower;
      rangeUpper[numRanges]=higher - 1;
      numRanges++;
    }
    lower=higher + 1;
  }
  if (lower <= Character.MAX_CODE_POINT) {
    rangeLower[numRanges]=lower;
    rangeUpper[numRanges]=Character.MAX_CODE_POINT;
    numRanges++;
  }
  descriptions=new ParametricDescription[]{null,withTranspositions ? new Lev1TParametricDescription(word.length) : new Lev1ParametricDescription(word.length),withTranspositions ? new Lev2TParametricDescription(word.length) : new Lev2ParametricDescription(word.length)};
}
