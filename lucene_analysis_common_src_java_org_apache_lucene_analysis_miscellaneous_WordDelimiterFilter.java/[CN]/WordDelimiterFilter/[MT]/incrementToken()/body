{
  while (true) {
    if (!hasSavedState) {
      if (!input.incrementToken()) {
        return false;
      }
      int termLength=termAttribute.length();
      char[] termBuffer=termAttribute.buffer();
      accumPosInc+=posIncAttribute.getPositionIncrement();
      iterator.setText(termBuffer,termLength);
      iterator.next();
      if ((iterator.current == 0 && iterator.end == termLength) || (protWords != null && protWords.contains(termBuffer,0,termLength))) {
        posIncAttribute.setPositionIncrement(accumPosInc);
        accumPosInc=0;
        first=false;
        return true;
      }
      if (iterator.end == WordDelimiterIterator.DONE && !has(PRESERVE_ORIGINAL)) {
        if (posIncAttribute.getPositionIncrement() == 1 && !first) {
          accumPosInc--;
        }
        continue;
      }
      saveState();
      hasOutputToken=false;
      hasOutputFollowingOriginal=!has(PRESERVE_ORIGINAL);
      lastConcatCount=0;
      if (has(PRESERVE_ORIGINAL)) {
        posIncAttribute.setPositionIncrement(accumPosInc);
        accumPosInc=0;
        first=false;
        return true;
      }
    }
    if (iterator.end == WordDelimiterIterator.DONE) {
      if (!concat.isEmpty()) {
        if (flushConcatenation(concat)) {
          buffer();
          continue;
        }
      }
      if (!concatAll.isEmpty()) {
        if (concatAll.subwordCount > lastConcatCount) {
          concatAll.writeAndClear();
          buffer();
          continue;
        }
        concatAll.clear();
      }
      if (bufferedPos < bufferedLen) {
        if (bufferedPos == 0) {
          sorter.sort(0,bufferedLen);
        }
        clearAttributes();
        restoreState(buffered[bufferedPos++]);
        if (first && posIncAttribute.getPositionIncrement() == 0) {
          posIncAttribute.setPositionIncrement(1);
        }
        first=false;
        return true;
      }
      bufferedPos=bufferedLen=0;
      hasSavedState=false;
      continue;
    }
    if (iterator.isSingleWord()) {
      generatePart(true);
      iterator.next();
      first=false;
      return true;
    }
    int wordType=iterator.type();
    if (!concat.isEmpty() && (concat.type & wordType) == 0) {
      if (flushConcatenation(concat)) {
        hasOutputToken=false;
        buffer();
        continue;
      }
      hasOutputToken=false;
    }
    if (shouldConcatenate(wordType)) {
      if (concat.isEmpty()) {
        concat.type=wordType;
      }
      concatenate(concat);
    }
    if (has(CATENATE_ALL)) {
      concatenate(concatAll);
    }
    if (shouldGenerateParts(wordType)) {
      generatePart(false);
      buffer();
    }
    iterator.next();
  }
}
