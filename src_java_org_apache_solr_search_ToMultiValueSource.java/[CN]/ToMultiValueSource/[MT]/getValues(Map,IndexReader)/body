{
  int size=sources.size();
  final DocValues[] valsArr=new DocValues[size];
  for (int i=0; i < size; i++) {
    valsArr[i]=sources.get(i).getValues(context,reader);
  }
  return new DocValues(){
    @Override public void byteVal(    int doc,    byte[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].byteVal(doc);
      }
    }
    @Override public void shortVal(    int doc,    short[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].shortVal(doc);
      }
    }
    @Override public void floatVal(    int doc,    float[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].floatVal(doc);
      }
    }
    @Override public void intVal(    int doc,    int[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].intVal(doc);
      }
    }
    @Override public void longVal(    int doc,    long[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].longVal(doc);
      }
    }
    @Override public void doubleVal(    int doc,    double[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].doubleVal(doc);
      }
    }
    @Override public void strVal(    int doc,    String[] vals){
      for (int i=0; i < valsArr.length; i++) {
        vals[i]=valsArr[i].strVal(doc);
      }
    }
    @Override public String toString(    int doc){
      StringBuilder sb=new StringBuilder();
      sb.append("toMultiVS(");
      boolean firstTime=true;
      for (      DocValues vals : valsArr) {
        if (firstTime) {
          firstTime=false;
        }
 else {
          sb.append(',');
        }
        sb.append(vals.toString(doc));
      }
      sb.append(')');
      return sb.toString();
    }
  }
;
}
