{
  String collectionName=factory.getValueOperand(expression,0);
  List<StreamExpressionNamedParameter> namedParams=factory.getNamedOperands(expression);
  List<StreamExpression> metricExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Metric.class);
  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");
  if (expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - unknown operands found",expression));
  }
  if (null == collectionName) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));
  }
  if (0 == namedParams.size()) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'",expression));
  }
  Map<String,String> params=new HashMap<String,String>();
  for (  StreamExpressionNamedParameter namedParam : namedParams) {
    if (!namedParam.getName().equals("zkHost")) {
      params.put(namedParam.getName(),namedParam.getParameter().toString().trim());
    }
  }
  String zkHost=null;
  if (null == zkHostExpression) {
    zkHost=factory.getCollectionZkHost(collectionName);
  }
 else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {
    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
  }
  if (null == zkHost) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
  }
  Metric[] metrics=new Metric[metricExpressions.size()];
  for (int idx=0; idx < metricExpressions.size(); ++idx) {
    metrics[idx]=factory.constructMetric(metricExpressions.get(idx));
  }
  init(zkHost,collectionName,params,metrics);
}
