{
  final int[] count=new int[1];
  searcher.search(q,new Collector(){
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
      assertEquals("Scorer is implemented by wrong class",scorerClassName,scorer.getClass().getName());
      if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {
        final ConstantScoreQuery.ConstantScorer innerScorer=(ConstantScoreQuery.ConstantScorer)scorer;
        assertEquals("inner Scorer is implemented by wrong class",innerScorerClassName,innerScorer.docIdSetIterator.getClass().getName());
      }
    }
    @Override public void collect(    int doc) throws IOException {
      assertEquals("Score differs from expected",expectedScore,this.scorer.score(),0);
      count[0]++;
    }
    @Override public void setNextReader(    AtomicReaderContext context){
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  assertEquals("invalid number of results",1,count[0]);
}
