{
  Directory directory=null;
  IndexReader reader=null;
  IndexSearcher searcher=null;
  try {
    directory=newDirectory();
    RandomIndexWriter writer=new RandomIndexWriter(random(),directory);
    Document doc=new Document();
    doc.add(newStringField("field","term",Field.Store.NO));
    writer.addDocument(doc);
    reader=writer.getReader();
    writer.close();
    searcher=newSearcher(reader,true,false);
    searcher.setQueryCache(null);
    searcher.setSimilarity(new DefaultSimilarity(){
      @Override public float queryNorm(      float sumOfSquaredWeights){
        return 1.0f;
      }
    }
);
    final BoostQuery csq1=new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term("field","term"))),2f);
    final BoostQuery csq2=new BoostQuery(new ConstantScoreQuery(csq1),5f);
    final BooleanQuery.Builder bq=new BooleanQuery.Builder();
    bq.add(csq1,BooleanClause.Occur.SHOULD);
    bq.add(csq2,BooleanClause.Occur.SHOULD);
    final BoostQuery csqbq=new BoostQuery(new ConstantScoreQuery(bq.build()),17f);
    checkHits(searcher,csq1,csq1.getBoost(),TermScorer.class);
    checkHits(searcher,csq2,csq2.getBoost(),TermScorer.class);
    final Class<FakeScorer> bucketScorerClass=FakeScorer.class;
    checkHits(searcher,csqbq,csqbq.getBoost(),bucketScorerClass);
  }
  finally {
    IOUtils.close(reader,directory);
  }
}
