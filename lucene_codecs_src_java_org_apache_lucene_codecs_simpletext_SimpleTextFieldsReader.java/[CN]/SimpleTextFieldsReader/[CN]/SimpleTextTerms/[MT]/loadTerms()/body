{
  PositiveIntOutputs posIntOutputs=PositiveIntOutputs.getSingleton();
  final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;
  final PairOutputs<Long,Long> outputsInner=new PairOutputs<>(posIntOutputs,posIntOutputs);
  final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs=new PairOutputs<>(posIntOutputs,outputsInner);
  b=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  IndexInput in=SimpleTextFieldsReader.this.in.clone();
  in.seek(termsStart);
  final BytesRef lastTerm=new BytesRef(10);
  long lastDocsStart=-1;
  int docFreq=0;
  long totalTermFreq=0;
  FixedBitSet visitedDocs=new FixedBitSet(maxDoc);
  final IntsRef scratchIntsRef=new IntsRef();
  while (true) {
    SimpleTextUtil.readLine(in,scratch);
    if (scratch.equals(END) || StringHelper.startsWith(scratch,FIELD)) {
      if (lastDocsStart != -1) {
        b.add(Util.toIntsRef(lastTerm,scratchIntsRef),outputs.newPair(lastDocsStart,outputsInner.newPair((long)docFreq,totalTermFreq)));
        sumTotalTermFreq+=totalTermFreq;
      }
      break;
    }
 else     if (StringHelper.startsWith(scratch,DOC)) {
      docFreq++;
      sumDocFreq++;
      UnicodeUtil.UTF8toUTF16(scratch.bytes,scratch.offset + DOC.length,scratch.length - DOC.length,scratchUTF16);
      int docID=ArrayUtil.parseInt(scratchUTF16.chars,0,scratchUTF16.length);
      visitedDocs.set(docID);
    }
 else     if (StringHelper.startsWith(scratch,FREQ)) {
      UnicodeUtil.UTF8toUTF16(scratch.bytes,scratch.offset + FREQ.length,scratch.length - FREQ.length,scratchUTF16);
      totalTermFreq+=ArrayUtil.parseInt(scratchUTF16.chars,0,scratchUTF16.length);
    }
 else     if (StringHelper.startsWith(scratch,TERM)) {
      if (lastDocsStart != -1) {
        b.add(Util.toIntsRef(lastTerm,scratchIntsRef),outputs.newPair(lastDocsStart,outputsInner.newPair((long)docFreq,totalTermFreq)));
      }
      lastDocsStart=in.getFilePointer();
      final int len=scratch.length - TERM.length;
      if (len > lastTerm.length) {
        lastTerm.grow(len);
      }
      System.arraycopy(scratch.bytes,TERM.length,lastTerm.bytes,0,len);
      lastTerm.length=len;
      docFreq=0;
      sumTotalTermFreq+=totalTermFreq;
      totalTermFreq=0;
      termCount++;
    }
  }
  docCount=visitedDocs.cardinality();
  fst=b.finish();
}
