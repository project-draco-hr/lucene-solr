{
  if (numericType != SortField.Type.INT && numericType != SortField.Type.LONG && numericType != SortField.Type.FLOAT && numericType != SortField.Type.DOUBLE) {
    throw new IllegalArgumentException("numericType must be a numeric type");
  }
  final NumericDocValues view;
  NumericDocValues singleton=DocValues.unwrapSingleton(sortedNumeric);
  if (singleton != null) {
    view=singleton;
  }
 else {
switch (selector) {
case MIN:
      view=new MinValue(sortedNumeric);
    break;
case MAX:
  view=new MaxValue(sortedNumeric);
break;
default :
throw new AssertionError();
}
}
switch (numericType) {
case FLOAT:
return new NumericDocValues(){
@Override public long get(int docID){
return LegacyNumericUtils.sortableFloatBits((int)view.get(docID));
}
}
;
case DOUBLE:
return new NumericDocValues(){
@Override public long get(int docID){
return LegacyNumericUtils.sortableDoubleBits(view.get(docID));
}
}
;
default :
return view;
}
}
