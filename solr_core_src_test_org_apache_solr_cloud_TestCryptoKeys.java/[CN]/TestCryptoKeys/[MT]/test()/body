{
  String pk1sig="G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==";
  String pk2sig="pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1";
  String wrongKeySig="xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==";
  String result=null;
  CryptoKeys cryptoKeys=null;
  SolrZkClient zk=getCommonCloudSolrClient().getZkStateReader().getZkClient();
  cryptoKeys=new CryptoKeys(CloudUtil.getTrustedKeys(zk));
  byte[] samplefile=readFile("samplefile.bin");
  result=cryptoKeys.verify(pk1sig,samplefile);
  assertNull(result);
  zk.makePath("/keys",true);
  createNode(zk,"pubk1.der");
  createNode(zk,"pubk2.der");
  Map<String,byte[]> trustedKeys=CloudUtil.getTrustedKeys(zk);
  cryptoKeys=new CryptoKeys(trustedKeys);
  result=cryptoKeys.verify(pk2sig,samplefile);
  assertEquals("pubk2.der",result);
  result=cryptoKeys.verify(pk1sig,samplefile);
  assertEquals("pubk1.der",result);
  try {
    result=cryptoKeys.verify(wrongKeySig,samplefile);
    assertNull(result);
  }
 catch (  Exception e) {
  }
  try {
    result=cryptoKeys.verify("SGVsbG8gV29ybGQhCg==",samplefile);
    assertNull(result);
  }
 catch (  Exception e) {
  }
}
