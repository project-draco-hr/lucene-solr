{
  final String fileName=IndexFileNames.segmentFileName(segment,"",Lucene50SegmentInfoFormat.SI_EXTENSION);
  try (ChecksumIndexInput input=dir.openChecksumInput(fileName,context)){
    Throwable priorE=null;
    SegmentInfo si=null;
    try {
      CodecUtil.checkHeader(input,Lucene50SegmentInfoFormat.CODEC_NAME,Lucene50SegmentInfoFormat.VERSION_START,Lucene50SegmentInfoFormat.VERSION_CURRENT);
      final Version version;
      try {
        version=Version.read(input);
      }
 catch (      IllegalArgumentException iae) {
        throw new CorruptIndexException("invalid version: " + iae.getMessage(),input,iae);
      }
      final int docCount=input.readInt();
      if (docCount < 0) {
        throw new CorruptIndexException("invalid docCount: " + docCount,input);
      }
      final boolean isCompoundFile=input.readByte() == SegmentInfo.YES;
      final Map<String,String> diagnostics=input.readStringStringMap();
      final Set<String> files=input.readStringSet();
      byte[] id=new byte[StringHelper.ID_LENGTH];
      input.readBytes(id,0,id.length);
      si=new SegmentInfo(dir,version,segment,docCount,isCompoundFile,null,diagnostics,id);
      si.setFiles(files);
    }
 catch (    Throwable exception) {
      priorE=exception;
    }
 finally {
      CodecUtil.checkFooter(input,priorE);
    }
    return si;
  }
 }
