{
  AntClassLoader loader=null;
  try {
    if (classpath != null) {
      classpath.setProject(getProject());
      loader=getProject().createClassLoader(classpath);
    }
    classFiles.setProject(getProject());
    apiSignatures.setProject(getProject());
    try {
      @SuppressWarnings("unchecked") Iterator<Resource> iter=(Iterator<Resource>)apiSignatures.iterator();
      if (!iter.hasNext()) {
        throw new BuildException("You need to supply at least one API signature definition through apiFile=, <apiFileSet/>, or inner text.");
      }
      while (iter.hasNext()) {
        final Resource r=iter.next();
        if (!r.isExists()) {
          throw new BuildException("Resource does not exist: " + r);
        }
        if (r instanceof StringResource) {
          parseApiFile(loader,new StringReader(((StringResource)r).getValue()));
        }
 else {
          parseApiFile(loader,new InputStreamReader(r.getInputStream(),"UTF-8"));
        }
      }
    }
 catch (    IOException ioe) {
      throw new BuildException("IO problem while reading files with API signatures.",ioe);
    }
    if (forbiddenMethods.isEmpty() && forbiddenClasses.isEmpty()) {
      throw new BuildException("No API signatures found; use apiFile=, <apiFileSet/>, or inner text to define those!");
    }
    long start=System.currentTimeMillis();
    int checked=0;
    int errors=0;
    @SuppressWarnings("unchecked") Iterator<Resource> iter=(Iterator<Resource>)classFiles.iterator();
    if (!iter.hasNext()) {
      throw new BuildException("There is no <fileset/> given or the fileset does not contain any class files to check.");
    }
    while (iter.hasNext()) {
      final Resource r=iter.next();
      if (!r.isExists()) {
        throw new BuildException("Class file does not exist: " + r);
      }
      try {
        errors+=checkClass(r);
      }
 catch (      IOException ioe) {
        throw new BuildException("IO problem while reading class file " + r,ioe);
      }
      checked++;
    }
    log(String.format(Locale.ROOT,"Scanned %d class file(s) for forbidden API invocations (in %.2fs), %d error(s).",checked,(System.currentTimeMillis() - start) / 1000.0,errors),errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);
    if (errors > 0) {
      throw new BuildException("Check for forbidden API calls failed, see log.");
    }
  }
  finally {
    if (loader != null)     loader.cleanup();
  }
}
