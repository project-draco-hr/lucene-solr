{
  final InputStream stream=res.getInputStream();
  try {
    final int[] violations=new int[1];
    new ClassReader(stream).accept(new ClassVisitor(Opcodes.ASM4){
      String className=null, source=null;
      @Override public void visit(      int version,      int access,      String name,      String signature,      String superName,      String[] interfaces){
        this.className=Type.getObjectType(name).getClassName();
      }
      @Override public void visitSource(      String source,      String debug){
        this.source=source;
      }
      @Override public MethodVisitor visitMethod(      int access,      String name,      String desc,      String signature,      String[] exceptions){
        return new MethodVisitor(Opcodes.ASM4){
          private int lineNo=-1;
          private boolean checkClassUse(          String owner){
            final String printout=forbiddenClasses.get(owner);
            if (printout != null) {
              log("Forbidden class use: " + printout,Project.MSG_ERR);
              return true;
            }
            return false;
          }
          private void reportSourceAndLine(){
            final StringBuilder sb=new StringBuilder("  in ").append(className);
            if (source != null && lineNo >= 0) {
              new Formatter(sb,Locale.ROOT).format(" (%s:%d)",source,lineNo).flush();
            }
            log(sb.toString(),Project.MSG_ERR);
          }
          @Override public void visitMethodInsn(          int opcode,          String owner,          String name,          String desc){
            boolean found=checkClassUse(owner);
            if (!found) {
              final String printout=forbiddenMethods.get(owner + '\000' + new Method(name,desc));
              if (printout != null) {
                found=true;
                log("Forbidden method invocation: " + printout,Project.MSG_ERR);
              }
            }
            if (found) {
              violations[0]++;
              reportSourceAndLine();
            }
          }
          @Override public void visitFieldInsn(          int opcode,          String owner,          String name,          String desc){
            boolean found=checkClassUse(owner);
            if (!found) {
              final String printout=forbiddenFields.get(owner + '\000' + name);
              if (printout != null) {
                found=true;
                log("Forbidden field access: " + printout,Project.MSG_ERR);
              }
            }
            if (found) {
              violations[0]++;
              reportSourceAndLine();
            }
          }
          @Override public void visitLineNumber(          int lineNo,          Label start){
            this.lineNo=lineNo;
          }
        }
;
      }
    }
,ClassReader.SKIP_FRAMES);
    return violations[0];
  }
  finally {
    stream.close();
  }
}
