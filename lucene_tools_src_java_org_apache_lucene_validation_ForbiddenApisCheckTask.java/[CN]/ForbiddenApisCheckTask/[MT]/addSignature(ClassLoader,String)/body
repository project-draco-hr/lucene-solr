{
  final int p=signature.indexOf('#');
  final String clazz;
  final Method dummy;
  if (p >= 0) {
    clazz=signature.substring(0,p);
    dummy=Method.getMethod("void " + signature.substring(p + 1),true);
  }
 else {
    clazz=signature;
    dummy=null;
  }
  try {
    ClassNode c=classCache.get(clazz);
    if (c == null) {
      final ClassReader reader;
      if (loader != null) {
        final InputStream in=loader.getResourceAsStream(clazz.replace('.','/') + ".class");
        if (in == null) {
          throw new BuildException("Loading of class " + clazz + " failed: Not found");
        }
        try {
          reader=new ClassReader(in);
        }
  finally {
          in.close();
        }
      }
 else {
        reader=new ClassReader(clazz);
      }
      reader.accept(c=new ClassNode(Opcodes.ASM4),ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
      classCache.put(clazz,c);
    }
    if (dummy != null) {
      boolean found=false;
      for (      final MethodNode mn : c.methods) {
        if (mn.name.equals(dummy.getName()) && Arrays.equals(Type.getArgumentTypes(mn.desc),dummy.getArgumentTypes())) {
          found=true;
          forbiddenMethods.put(c.name + '\000' + new Method(mn.name,mn.desc),signature);
        }
      }
      if (!found)       throw new BuildException("No method found with following signature: " + signature);
    }
 else {
      forbiddenClasses.put(c.name,signature);
    }
  }
 catch (  IOException e) {
    throw new BuildException("Loading of class " + clazz + " failed.",e);
  }
}
