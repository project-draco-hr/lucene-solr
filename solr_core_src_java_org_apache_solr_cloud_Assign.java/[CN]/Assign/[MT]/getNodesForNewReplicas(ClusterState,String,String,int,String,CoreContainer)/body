{
  DocCollection coll=clusterState.getCollection(collectionName);
  Integer maxShardsPerNode=coll.getInt(MAX_SHARDS_PER_NODE,1);
  List<String> createNodeList=createNodeSetStr == null ? null : StrUtils.splitSmart(createNodeSetStr,",",true);
  HashMap<String,ReplicaCount> nodeNameVsShardCount=getNodeNameVsShardCount(collectionName,clusterState,createNodeList);
  if (createNodeList == null) {
    int availableSlots=0;
    for (    Map.Entry<String,ReplicaCount> ent : nodeNameVsShardCount.entrySet()) {
      if (maxShardsPerNode > ent.getValue().thisCollectionNodes) {
        availableSlots+=(maxShardsPerNode - ent.getValue().thisCollectionNodes);
      }
    }
    if (availableSlots < numberOfNodes) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format(Locale.ROOT,"Cannot create %d new replicas for collection %s given the current number of live nodes and a maxShardsPerNode of %d",numberOfNodes,collectionName,maxShardsPerNode));
    }
  }
  List l=(List)coll.get(DocCollection.RULE);
  if (l != null) {
    return getNodesViaRules(clusterState,shard,numberOfNodes,cc,coll,createNodeList,l);
  }
  ArrayList<ReplicaCount> sortedNodeList=new ArrayList<>(nodeNameVsShardCount.values());
  Collections.sort(sortedNodeList,new Comparator<ReplicaCount>(){
    @Override public int compare(    ReplicaCount x,    ReplicaCount y){
      return (x.weight() < y.weight()) ? -1 : ((x.weight() == y.weight()) ? 0 : 1);
    }
  }
);
  return sortedNodeList;
}
