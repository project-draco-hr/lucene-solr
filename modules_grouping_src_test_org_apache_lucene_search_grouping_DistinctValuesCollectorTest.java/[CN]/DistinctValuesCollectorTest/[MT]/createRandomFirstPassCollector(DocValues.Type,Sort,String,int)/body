{
  Random random=random();
  if (dvType != null) {
    if (random.nextBoolean()) {
      boolean diskResident=random.nextBoolean();
      return DVFirstPassGroupingCollector.create(groupSort,topNGroups,groupField,dvType,diskResident);
    }
 else     if (random.nextBoolean()) {
      return (AbstractFirstPassGroupingCollector<T>)new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField),new HashMap<Object,Object>(),groupSort,topNGroups);
    }
 else {
      return (AbstractFirstPassGroupingCollector<T>)new TermFirstPassGroupingCollector(groupField,groupSort,topNGroups);
    }
  }
 else {
    if (random.nextBoolean()) {
      return (AbstractFirstPassGroupingCollector<T>)new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField),new HashMap<Object,Object>(),groupSort,topNGroups);
    }
 else {
      return (AbstractFirstPassGroupingCollector<T>)new TermFirstPassGroupingCollector(groupField,groupSort,topNGroups);
    }
  }
}
