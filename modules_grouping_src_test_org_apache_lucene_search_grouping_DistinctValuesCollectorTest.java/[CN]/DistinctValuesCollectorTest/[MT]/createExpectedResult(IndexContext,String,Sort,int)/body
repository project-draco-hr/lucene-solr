{
class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {
    GroupCount(    BytesRef groupValue,    Collection<BytesRef> uniqueValues){
      super(groupValue);
      this.uniqueValues.addAll(uniqueValues);
    }
  }
  List result=new ArrayList();
  Map<String,Set<String>> groupCounts=context.searchTermToGroupCounts.get(term);
  int i=0;
  for (  String group : groupCounts.keySet()) {
    if (topN <= i++) {
      break;
    }
    Set<BytesRef> uniqueValues=new HashSet<BytesRef>();
    for (    String val : groupCounts.get(group)) {
      uniqueValues.add(val != null ? new BytesRef(val) : null);
    }
    result.add(new GroupCount(group != null ? new BytesRef(group) : null,uniqueValues));
  }
  return result;
}
