{
  int numTestPoints=100;
  int numThreads=_TestUtil.nextInt(random,3,5);
  final HashMap<String,BytesRef> map=new HashMap<String,BytesRef>();
  for (int i=0; i < numTestPoints; i++) {
    String term=randomString();
    TokenStream ts=analyzer.reusableTokenStream("fake",new StringReader(term));
    TermToBytesRefAttribute termAtt=ts.addAttribute(TermToBytesRefAttribute.class);
    BytesRef bytes=termAtt.getBytesRef();
    ts.reset();
    assertTrue(ts.incrementToken());
    termAtt.fillBytesRef();
    map.put(term,new BytesRef(bytes));
  }
  Thread threads[]=new Thread[numThreads];
  for (int i=0; i < numThreads; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          for (          Map.Entry<String,BytesRef> mapping : map.entrySet()) {
            String term=mapping.getKey();
            BytesRef expected=mapping.getValue();
            TokenStream ts=analyzer.reusableTokenStream("fake",new StringReader(term));
            TermToBytesRefAttribute termAtt=ts.addAttribute(TermToBytesRefAttribute.class);
            BytesRef bytes=termAtt.getBytesRef();
            ts.reset();
            assertTrue(ts.incrementToken());
            termAtt.fillBytesRef();
            assertEquals(expected,bytes);
          }
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
  for (int i=0; i < numThreads; i++) {
    threads[i].start();
  }
  for (int i=0; i < numThreads; i++) {
    threads[i].join();
  }
}
