{
  NodeList nodes=(NodeList)SolrConfig.config.evaluate("updateHandler/listener[@event=\"postCommit\"]",XPathConstants.NODESET);
  if (nodes != null) {
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      try {
        String className=DOMUtil.getAttr(node,"class");
        SolrEventListener listener=(SolrEventListener)Config.newInstance(className);
        listener.init(DOMUtil.childNodesToNamedList(node));
        commitCallbacks.add(listener);
        log.info("added SolrEventListener for postCommit: " + listener);
      }
 catch (      Exception e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"error parsing event listevers",e,false);
      }
    }
  }
  nodes=(NodeList)SolrConfig.config.evaluate("updateHandler/listener[@event=\"postOptimize\"]",XPathConstants.NODESET);
  if (nodes != null) {
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      try {
        String className=DOMUtil.getAttr(node,"class");
        SolrEventListener listener=(SolrEventListener)Config.newInstance(className);
        listener.init(DOMUtil.childNodesToNamedList(node));
        optimizeCallbacks.add(listener);
        log.info("added SolarEventListener for postOptimize: " + listener);
      }
 catch (      Exception e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"error parsing event listeners",e,false);
      }
    }
  }
}
