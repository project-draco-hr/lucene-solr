{
  Directory dir=newFSDirectory(indexDir);
  IndexReader reader=IndexReader.open(dir);
  IndexSearcher searcher=new IndexSearcher(reader);
  _TestUtil.checkIndex(dir);
  final Bits liveDocs=MultiFields.getLiveDocs(reader);
  for (int i=0; i < 35; i++) {
    if (liveDocs.get(i)) {
      Document d=reader.document(i);
      List<IndexableField> fields=d.getFields();
      if (d.getField("content3") == null) {
        final int numFields=5;
        assertEquals(numFields,fields.size());
        IndexableField f=d.getField("id");
        assertEquals("" + i,f.stringValue());
        f=d.getField("utf8");
        assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd",f.stringValue());
        f=d.getField("autf8");
        assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd",f.stringValue());
        f=d.getField("content2");
        assertEquals("here is more content with aaa aaa aaa",f.stringValue());
        f=d.getField("fie\u2C77ld");
        assertEquals("field with non-ascii name",f.stringValue());
      }
      TermFreqVector tfv=reader.getTermFreqVector(i,"utf8");
      assertNotNull("docID=" + i + " index="+ indexDir.getName(),tfv);
      assertTrue(tfv instanceof TermPositionVector);
    }
 else     assertEquals(7,i);
  }
  ScoreDoc[] hits=searcher.search(new TermQuery(new Term("content","aaa")),null,1000).scoreDocs;
  Document d=searcher.getIndexReader().document(hits[0].doc);
  assertEquals("didn't get the right document first","21",d.get("id"));
  doTestHits(hits,34,searcher.getIndexReader());
  hits=searcher.search(new TermQuery(new Term("utf8","\u0000")),null,1000).scoreDocs;
  assertEquals(34,hits.length);
  hits=searcher.search(new TermQuery(new Term("utf8","Lu\uD834\uDD1Ece\uD834\uDD60ne")),null,1000).scoreDocs;
  assertEquals(34,hits.length);
  hits=searcher.search(new TermQuery(new Term("utf8","ab\ud917\udc17cd")),null,1000).scoreDocs;
  assertEquals(34,hits.length);
  searcher.close();
  reader.close();
  dir.close();
}
