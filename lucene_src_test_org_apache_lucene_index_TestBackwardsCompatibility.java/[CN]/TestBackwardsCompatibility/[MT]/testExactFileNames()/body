{
  String outputDir="lucene.backwardscompat0.index";
  rmDir(outputDir);
  try {
    Directory dir=newFSDirectory(new File(fullDir(outputDir)));
    LogMergePolicy mergePolicy=newLogMergePolicy(true,10);
    mergePolicy.setNoCFSRatio(1);
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMaxBufferedDocs(-1).setRAMBufferSizeMB(16.0).setMergePolicy(mergePolicy));
    for (int i=0; i < 35; i++) {
      addDoc(writer,i);
    }
    assertEquals("wrong doc count",35,writer.maxDoc());
    writer.close();
    IndexReader reader=IndexReader.open(dir,false);
    Term searchTerm=new Term("id","7");
    int delCount=reader.deleteDocuments(searchTerm);
    assertEquals("didn't delete the right number of documents",1,delCount);
    SimilarityProvider sim=new DefaultSimilarity();
    reader.setNorm(21,"content",sim.get("content").encodeNormValue(1.5f));
    reader.close();
    CompoundFileReader cfsReader=new CompoundFileReader(dir,"_0.cfs");
    FieldInfos fieldInfos=new FieldInfos(cfsReader,"_0.fnm");
    int contentFieldIndex=-1;
    for (int i=0; i < fieldInfos.size(); i++) {
      FieldInfo fi=fieldInfos.fieldInfo(i);
      if (fi.name.equals("content")) {
        contentFieldIndex=i;
        break;
      }
    }
    cfsReader.close();
    assertTrue("could not locate the 'content' field number in the _2.cfs segment",contentFieldIndex != -1);
    String[] expected=new String[]{"_0.cfs","_0_1.del","_0_1.s" + contentFieldIndex,"segments_2","segments.gen"};
    String[] actual=dir.listAll();
    Arrays.sort(expected);
    Arrays.sort(actual);
    if (!Arrays.equals(expected,actual)) {
      fail("incorrect filenames in index: expected:\n    " + asString(expected) + "\n  actual:\n    "+ asString(actual));
    }
    dir.close();
  }
  finally {
    rmDir(outputDir);
  }
}
