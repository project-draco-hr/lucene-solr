{
  final int numDims=TestUtil.nextInt(random(),1,8);
  final int bytesPerDim=TestUtil.nextInt(random(),1,16);
  final int maxDoc=TestUtil.nextInt(random(),1,1 << random().nextInt(30));
  Point[] points=createRandomPoints(numDims,bytesPerDim,maxDoc);
  int commonPrefixLength=TestUtil.nextInt(random(),0,bytesPerDim);
  final int splitDim=random().nextInt(numDims);
  for (int i=1; i < points.length; ++i) {
    int offset=splitDim * bytesPerDim;
    System.arraycopy(points[0].packedValue,offset,points[i].packedValue,offset,commonPrefixLength);
  }
  DummyPointsReader reader=new DummyPointsReader(points);
  final int pivot=TestUtil.nextInt(random(),0,points.length - 1);
  MutablePointsReaderUtils.partition(maxDoc,splitDim,bytesPerDim,commonPrefixLength,reader,0,points.length,pivot,new byte[numDims * bytesPerDim],new byte[numDims * bytesPerDim]);
  int offset=splitDim * bytesPerDim;
  for (int i=0; i < points.length; ++i) {
    int cmp=StringHelper.compare(bytesPerDim,reader.points[i].packedValue,offset,reader.points[pivot].packedValue,offset);
    if (cmp == 0) {
      cmp=reader.points[i].doc - reader.points[pivot].doc;
    }
    if (i < pivot) {
      assertTrue(cmp <= 0);
    }
 else     if (i > pivot) {
      assertTrue(cmp >= 0);
    }
 else {
      assertEquals(0,cmp);
    }
  }
}
