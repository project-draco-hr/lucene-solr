{
  Directory dir=newDirectory(random);
  Index[] indexValue=new Index[]{Index.ANALYZED,Index.ANALYZED_NO_NORMS,Index.NOT_ANALYZED,Index.NOT_ANALYZED_NO_NORMS};
  final int docsPerRound=97;
  int numRounds=atLeast(1);
  for (int i=0; i < numRounds; i++) {
    CodecProvider provider=new CodecProvider();
    Codec[] codecs=new Codec[]{new StandardCodec(),new SimpleTextCodec(),new MockSepCodec(),new PulsingCodec(1 + random.nextInt(10)),new MockVariableIntBlockCodec(1 + random.nextInt(10)),new MockFixedIntBlockCodec(1 + random.nextInt(10))};
    for (    Codec codec : codecs) {
      provider.register(codec);
    }
    int num=atLeast(30);
    for (int j=0; j < num; j++) {
      provider.setFieldCodec("" + j,codecs[random.nextInt(codecs.length)].name);
    }
    IndexWriterConfig config=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer(random));
    config.setOpenMode(OpenMode.CREATE_OR_APPEND);
    config.setCodecProvider(provider);
    IndexWriter writer=newWriter(dir,config);
    for (int j=0; j < docsPerRound; j++) {
      final Document doc=new Document();
      num=atLeast(30);
      for (int k=0; k < num; k++) {
        Field field=newField("" + k,_TestUtil.randomRealisticUnicodeString(random,128),indexValue[random.nextInt(indexValue.length)]);
        doc.add(field);
      }
      writer.addDocument(doc);
    }
    if (random.nextBoolean()) {
      writer.optimize();
    }
    writer.commit();
    assertEquals((i + 1) * docsPerRound,writer.maxDoc());
    writer.close();
  }
  dir.close();
}
