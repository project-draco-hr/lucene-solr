{
  String sliceName=message.getStr(ZkStateReader.SHARD_ID_PROP);
  String coreNodeName=message.getStr(ZkStateReader.CORE_NODE_NAME_PROP);
  DocCollection collection=prevState.getCollectionOrNull(collectionName);
  if (coreNodeName == null) {
    coreNodeName=ClusterStateMutator.getAssignedCoreNodeName(collection,message.getStr(ZkStateReader.NODE_NAME_PROP),message.getStr(ZkStateReader.CORE_NAME_PROP));
    if (coreNodeName != null) {
      log.debug("node=" + coreNodeName + " is already registered");
    }
 else {
      coreNodeName=Assign.assignNode(collection);
    }
    message.getProperties().put(ZkStateReader.CORE_NODE_NAME_PROP,coreNodeName);
  }
  if (sliceName == null) {
    sliceName=ClusterStateMutator.getAssignedId(collection,coreNodeName);
    if (sliceName != null) {
      log.debug("shard=" + sliceName + " is already registered");
    }
  }
  if (sliceName == null) {
    if (collectionExists) {
      numShards=collection.getSlices().size();
      log.debug("Collection already exists with " + ZkStateReader.NUM_SHARDS_PROP + "="+ numShards);
    }
    sliceName=Assign.assignShard(collection,numShards);
    log.info("Assigning new node to shard shard=" + sliceName);
  }
  Slice slice=collection != null ? collection.getSlice(sliceName) : null;
  Map<String,Object> replicaProps=new LinkedHashMap<>();
  replicaProps.putAll(message.getProperties());
  if (slice != null) {
    Replica oldReplica=slice.getReplicasMap().get(coreNodeName);
    if (oldReplica != null) {
      if (oldReplica.containsKey(ZkStateReader.LEADER_PROP)) {
        replicaProps.put(ZkStateReader.LEADER_PROP,oldReplica.get(ZkStateReader.LEADER_PROP));
      }
      for (      Map.Entry<String,Object> ent : oldReplica.getProperties().entrySet()) {
        if (ent.getKey().startsWith(COLL_PROP_PREFIX)) {
          replicaProps.put(ent.getKey(),ent.getValue());
        }
      }
    }
  }
  replicaProps.remove(ZkStateReader.NUM_SHARDS_PROP);
  replicaProps.remove(ZkStateReader.CORE_NODE_NAME_PROP);
  replicaProps.remove(ZkStateReader.SHARD_ID_PROP);
  replicaProps.remove(ZkStateReader.COLLECTION_PROP);
  replicaProps.remove(Overseer.QUEUE_OPERATION);
  Set<Map.Entry<String,Object>> entrySet=replicaProps.entrySet();
  List<String> removeKeys=new ArrayList<>();
  for (  Map.Entry<String,Object> entry : entrySet) {
    if (entry.getValue() == null) {
      removeKeys.add(entry.getKey());
    }
  }
  for (  String removeKey : removeKeys) {
    replicaProps.remove(removeKey);
  }
  replicaProps.remove(ZkStateReader.CORE_NODE_NAME_PROP);
  String shardRange=(String)replicaProps.remove(ZkStateReader.SHARD_RANGE_PROP);
  String shardState=(String)replicaProps.remove(ZkStateReader.SHARD_STATE_PROP);
  String shardParent=(String)replicaProps.remove(ZkStateReader.SHARD_PARENT_PROP);
  Replica replica=new Replica(coreNodeName,replicaProps);
  Map<String,Object> sliceProps=null;
  Map<String,Replica> replicas;
  if (slice != null) {
    collection=checkAndCompleteShardSplit(prevState,collection,coreNodeName,sliceName,replica);
    slice=collection.getSlice(sliceName);
    sliceProps=slice.getProperties();
    replicas=slice.getReplicasCopy();
  }
 else {
    replicas=new HashMap<>(1);
    sliceProps=new HashMap<>();
    sliceProps.put(Slice.RANGE,shardRange);
    sliceProps.put(ZkStateReader.STATE_PROP,shardState);
    sliceProps.put(Slice.PARENT,shardParent);
  }
  replicas.put(replica.getName(),replica);
  slice=new Slice(sliceName,replicas,sliceProps);
  DocCollection newCollection=CollectionMutator.updateSlice(collectionName,collection,slice);
  return new ZkWriteCommand(collectionName,newCollection);
}
