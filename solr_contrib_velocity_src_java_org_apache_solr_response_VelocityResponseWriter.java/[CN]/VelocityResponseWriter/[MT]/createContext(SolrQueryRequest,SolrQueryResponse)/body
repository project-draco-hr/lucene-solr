{
  VelocityContext context=new VelocityContext();
  String locale=request.getParams().get(LOCALE);
  Map toolConfig=new HashMap();
  toolConfig.put("locale",locale);
  context.put("log",log);
  context.put("esc",new EscapeTool());
  context.put("date",new ComparisonDateTool());
  context.put("list",new ListTool());
  context.put("sort",new SortTool());
  MathTool mathTool=new MathTool();
  mathTool.configure(toolConfig);
  context.put("math",mathTool);
  NumberTool numberTool=new NumberTool();
  numberTool.configure(toolConfig);
  context.put("number",numberTool);
  DisplayTool displayTool=new DisplayTool();
  displayTool.configure(toolConfig);
  context.put("display",displayTool);
  ResourceTool resourceTool=new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());
  resourceTool.configure(toolConfig);
  context.put("resource",resourceTool);
  for (  String name : customTools.keySet()) {
    Object customTool=SolrCore.createInstance(customTools.get(name),Object.class,"VrW custom tool: " + name,request.getCore(),request.getCore().getResourceLoader());
    if (customTool instanceof LocaleConfig) {
      ((LocaleConfig)customTool).configure(toolConfig);
    }
    context.put(name,customTool);
  }
  SolrResponse rsp=new QueryResponse();
  NamedList<Object> parsedResponse=BinaryResponseWriter.getParsedResponse(request,response);
  try {
    rsp.setResponse(parsedResponse);
    context.put("page",new PageTool(request,response));
    context.put("debug",((QueryResponse)rsp).getDebugMap());
  }
 catch (  ClassCastException e) {
    rsp=new SolrResponseBase();
    rsp.setResponse(parsedResponse);
  }
  context.put("request",request);
  context.put("response",rsp);
  return context;
}
