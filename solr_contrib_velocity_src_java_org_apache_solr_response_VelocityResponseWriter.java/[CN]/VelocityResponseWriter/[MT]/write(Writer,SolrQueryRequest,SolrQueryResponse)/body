{
  VelocityEngine engine=getEngine(request);
  Template template=getTemplate(engine,request);
  VelocityContext context=new VelocityContext();
  context.put("request",request);
  SolrResponse rsp=new QueryResponse();
  NamedList<Object> parsedResponse=BinaryResponseWriter.getParsedResponse(request,response);
  try {
    rsp.setResponse(parsedResponse);
    context.put("page",new PageTool(request,response));
  }
 catch (  ClassCastException e) {
    e.printStackTrace();
    rsp=new SolrResponseBase();
    rsp.setResponse(parsedResponse);
  }
  context.put("response",rsp);
  context.put("esc",new EscapeTool());
  context.put("date",new ComparisonDateTool());
  context.put("list",new ListTool());
  context.put("math",new MathTool());
  context.put("number",new NumberTool());
  context.put("sort",new SortTool());
  context.put("engine",engine);
  Map<String,String> mimeToExt=new HashMap<String,String>(){
{
      put("application/x-7z-compressed","7z");
      put("application/postscript","ai");
      put("application/pgp-signature","asc");
      put("application/octet-stream","bin");
      put("application/x-bzip2","bz2");
      put("text/x-c","c");
      put("application/vnd.ms-htmlhelp","chm");
      put("application/java-vm","class");
      put("text/css","css");
      put("text/csv","csv");
      put("application/x-debian-package","deb");
      put("application/msword","doc");
      put("message/rfc822","eml");
      put("image/gif","gif");
      put("application/winhlp","hlp");
      put("text/html","html");
      put("application/java-archive","jar");
      put("text/x-java-source","java");
      put("image/jpeg","jpeg");
      put("application/javascript","js");
      put("application/vnd.oasis.opendocument.chart","odc");
      put("application/vnd.oasis.opendocument.formula","odf");
      put("application/vnd.oasis.opendocument.graphics","odg");
      put("application/vnd.oasis.opendocument.image","odi");
      put("application/vnd.oasis.opendocument.presentation","odp");
      put("application/vnd.oasis.opendocument.spreadsheet","ods");
      put("application/vnd.oasis.opendocument.text","odt");
      put("application/pdf","pdf");
      put("application/pgp-encrypted","pgp");
      put("image/png","png");
      put("application/vnd.ms-powerpoint","ppt");
      put("audio/x-pn-realaudio","ram");
      put("application/x-rar-compressed","rar");
      put("application/vnd.rn-realmedia","rm");
      put("application/rtf","rtf");
      put("application/x-shockwave-flash","swf");
      put("application/vnd.sun.xml.calc","sxc");
      put("application/vnd.sun.xml.draw","sxd");
      put("application/vnd.sun.xml.impress","sxi");
      put("application/vnd.sun.xml.writer","sxw");
      put("application/x-tar","tar");
      put("application/x-tex","tex");
      put("text/plain","txt");
      put("text/x-vcard","vcf");
      put("application/vnd.visio","vsd");
      put("audio/x-wav","wav");
      put("audio/x-ms-wma","wma");
      put("video/x-ms-wmv","wmv");
      put("application/vnd.ms-excel","xls");
      put("application/xml","xml");
      put("application/x-xpinstall","xpi");
      put("application/zip","zip");
    }
  }
;
  context.put("mimeToExt",mimeToExt);
  String layout_template=request.getParams().get("v.layout");
  String json_wrapper=request.getParams().get("v.json");
  boolean wrap_response=(layout_template != null) || (json_wrapper != null);
  if (wrap_response) {
    StringWriter stringWriter=new StringWriter();
    template.merge(context,stringWriter);
    if (layout_template != null) {
      context.put("content",stringWriter.toString());
      stringWriter=new StringWriter();
      try {
        engine.getTemplate(layout_template + ".vm").merge(context,stringWriter);
      }
 catch (      Exception e) {
        throw new IOException(e.getMessage());
      }
    }
    if (json_wrapper != null) {
      writer.write(request.getParams().get("v.json") + "(");
      writer.write(getJSONWrap(stringWriter.toString()));
      writer.write(')');
    }
 else {
      writer.write(stringWriter.toString());
    }
  }
 else {
    template.merge(context,writer);
  }
}
