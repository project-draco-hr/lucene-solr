{
  if (readers.length == 0) {
    if (storedFieldsReaders.length > 0)     throw new IllegalArgumentException("There must be at least one main reader if storedFieldsReaders are used.");
    return new LeafReader[0];
  }
 else {
    final List<? extends LeafReaderContext> firstLeaves=readers[0].leaves();
    final int maxDoc=readers[0].maxDoc(), noLeaves=firstLeaves.size();
    final int[] leafMaxDoc=new int[noLeaves];
    for (int i=0; i < noLeaves; i++) {
      final LeafReader r=firstLeaves.get(i).reader();
      leafMaxDoc[i]=r.maxDoc();
    }
    validate(readers,maxDoc,leafMaxDoc);
    validate(storedFieldsReaders,maxDoc,leafMaxDoc);
    final LeafReader[] wrappedLeaves=new LeafReader[noLeaves];
    for (int i=0; i < wrappedLeaves.length; i++) {
      final LeafReader[] subs=new LeafReader[readers.length];
      for (int j=0; j < readers.length; j++) {
        subs[j]=readers[j].leaves().get(i).reader();
      }
      final LeafReader[] storedSubs=new LeafReader[storedFieldsReaders.length];
      for (int j=0; j < storedFieldsReaders.length; j++) {
        storedSubs[j]=storedFieldsReaders[j].leaves().get(i).reader();
      }
      wrappedLeaves[i]=new ParallelLeafReader(true,subs,storedSubs){
        @Override protected void doClose(){
        }
      }
;
    }
    return wrappedLeaves;
  }
}
