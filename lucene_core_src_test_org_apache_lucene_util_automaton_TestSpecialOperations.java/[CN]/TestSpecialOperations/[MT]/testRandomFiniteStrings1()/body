{
  int numStrings=atLeast(100);
  if (VERBOSE) {
    System.out.println("TEST: numStrings=" + numStrings);
  }
  Set<IntsRef> strings=new HashSet<IntsRef>();
  List<LightAutomaton> automata=new ArrayList<>();
  for (int i=0; i < numStrings; i++) {
    String s=TestUtil.randomSimpleString(random(),1,200);
    automata.add(BasicAutomata.makeStringLight(s));
    IntsRef scratch=new IntsRef();
    Util.toUTF32(s.toCharArray(),0,s.length(),scratch);
    strings.add(scratch);
    if (VERBOSE) {
      System.out.println("  add string=" + s);
    }
  }
  LightAutomaton a=BasicOperations.unionLight(automata);
  if (random().nextBoolean()) {
    a=MinimizationOperationsLight.minimize(a);
    if (VERBOSE) {
      System.out.println("TEST: a.minimize numStates=" + a.getNumStates());
    }
  }
 else   if (random().nextBoolean()) {
    if (VERBOSE) {
      System.out.println("TEST: a.determinize");
    }
    a=BasicOperations.determinize(a);
  }
 else   if (random().nextBoolean()) {
    if (VERBOSE) {
      System.out.println("TEST: a.removeDeadTransitions");
    }
    a=BasicOperations.removeDeadTransitions(a);
  }
  Set<IntsRef> actual=getFiniteStrings(a,-1,true);
  if (strings.equals(actual) == false) {
    System.out.println("strings.size()=" + strings.size() + " actual.size="+ actual.size());
    List<IntsRef> x=new ArrayList<>(strings);
    Collections.sort(x);
    List<IntsRef> y=new ArrayList<>(actual);
    Collections.sort(y);
    int end=Math.min(x.size(),y.size());
    for (int i=0; i < end; i++) {
      System.out.println("  i=" + i + " string="+ toString(x.get(i))+ " actual="+ toString(y.get(i)));
    }
    fail("wrong strings found");
  }
}
