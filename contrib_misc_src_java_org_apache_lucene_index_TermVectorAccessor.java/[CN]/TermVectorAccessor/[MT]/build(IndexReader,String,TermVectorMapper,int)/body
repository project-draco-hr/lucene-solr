{
  if (tokens == null) {
    tokens=new ArrayList<String>(500);
    positions=new ArrayList<int[]>(500);
    frequencies=new ArrayList<Integer>(500);
  }
 else {
    tokens.clear();
    frequencies.clear();
    positions.clear();
  }
  TermEnum termEnum=indexReader.terms(new Term(field,""));
  if (termEnum.term() != null) {
    while (termEnum.term().field() == field) {
      TermPositions termPositions=indexReader.termPositions(termEnum.term());
      if (termPositions.skipTo(documentNumber)) {
        frequencies.add(Integer.valueOf(termPositions.freq()));
        tokens.add(termEnum.term().text());
        if (!mapper.isIgnoringPositions()) {
          int[] positions=new int[termPositions.freq()];
          for (int i=0; i < positions.length; i++) {
            positions[i]=termPositions.nextPosition();
          }
          this.positions.add(positions);
        }
 else {
          positions.add(null);
        }
      }
      termPositions.close();
      if (!termEnum.next()) {
        break;
      }
    }
    mapper.setDocumentNumber(documentNumber);
    mapper.setExpectations(field,tokens.size(),false,!mapper.isIgnoringPositions());
    for (int i=0; i < tokens.size(); i++) {
      mapper.map(tokens.get(i),frequencies.get(i).intValue(),(TermVectorOffsetInfo[])null,positions.get(i));
    }
  }
  termEnum.close();
}
