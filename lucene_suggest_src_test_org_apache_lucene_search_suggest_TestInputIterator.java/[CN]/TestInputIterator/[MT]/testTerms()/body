{
  Random random=random();
  int num=atLeast(10000);
  Comparator<BytesRef> comparator=random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();
  TreeMap<BytesRef,SimpleEntry<Long,BytesRef>> sorted=new TreeMap<>(comparator);
  TreeMap<BytesRef,Long> sortedWithoutPayload=new TreeMap<>(comparator);
  TreeMap<BytesRef,SimpleEntry<Long,Set<BytesRef>>> sortedWithContext=new TreeMap<>(comparator);
  TreeMap<BytesRef,SimpleEntry<Long,SimpleEntry<BytesRef,Set<BytesRef>>>> sortedWithPayloadAndContext=new TreeMap<>(comparator);
  Input[] unsorted=new Input[num];
  Input[] unsortedWithoutPayload=new Input[num];
  Input[] unsortedWithContexts=new Input[num];
  Input[] unsortedWithPayloadAndContext=new Input[num];
  Set<BytesRef> ctxs;
  for (int i=0; i < num; i++) {
    BytesRef key;
    BytesRef payload;
    ctxs=new HashSet<>();
    do {
      key=new BytesRef(TestUtil.randomUnicodeString(random));
      payload=new BytesRef(TestUtil.randomUnicodeString(random));
      for (int j=0; j < atLeast(2); j++) {
        ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));
      }
    }
 while (sorted.containsKey(key));
    long value=random.nextLong();
    sortedWithoutPayload.put(key,value);
    sorted.put(key,new SimpleEntry<>(value,payload));
    sortedWithContext.put(key,new SimpleEntry<>(value,ctxs));
    sortedWithPayloadAndContext.put(key,new SimpleEntry<>(value,new SimpleEntry<>(payload,ctxs)));
    unsorted[i]=new Input(key,value,payload);
    unsortedWithoutPayload[i]=new Input(key,value);
    unsortedWithContexts[i]=new Input(key,value,ctxs);
    unsortedWithPayloadAndContext[i]=new Input(key,value,payload,ctxs);
  }
  try (Directory tempDir=getDirectory()){
    InputIterator wrapper=new SortedInputIterator(tempDir,"sorted",new InputArrayIterator(unsorted),comparator);
    Iterator<Map.Entry<BytesRef,SimpleEntry<Long,BytesRef>>> expected=sorted.entrySet().iterator();
    while (expected.hasNext()) {
      Map.Entry<BytesRef,SimpleEntry<Long,BytesRef>> entry=expected.next();
      assertEquals(entry.getKey(),wrapper.next());
      assertEquals(entry.getValue().getKey().longValue(),wrapper.weight());
      assertEquals(entry.getValue().getValue(),wrapper.payload());
    }
    assertNull(wrapper.next());
  }
   try (Directory tempDir=getDirectory()){
    InputIterator wrapper=new SortedInputIterator(tempDir,"sorted",new InputArrayIterator(unsortedWithContexts),comparator);
    Iterator<Map.Entry<BytesRef,SimpleEntry<Long,Set<BytesRef>>>> actualEntries=sortedWithContext.entrySet().iterator();
    while (actualEntries.hasNext()) {
      Map.Entry<BytesRef,SimpleEntry<Long,Set<BytesRef>>> entry=actualEntries.next();
      assertEquals(entry.getKey(),wrapper.next());
      assertEquals(entry.getValue().getKey().longValue(),wrapper.weight());
      Set<BytesRef> actualCtxs=entry.getValue().getValue();
      assertEquals(actualCtxs,wrapper.contexts());
    }
    assertNull(wrapper.next());
  }
   try (Directory tempDir=getDirectory()){
    InputIterator wrapper=new SortedInputIterator(tempDir,"sorter",new InputArrayIterator(unsortedWithPayloadAndContext),comparator);
    Iterator<Map.Entry<BytesRef,SimpleEntry<Long,SimpleEntry<BytesRef,Set<BytesRef>>>>> expectedPayloadContextEntries=sortedWithPayloadAndContext.entrySet().iterator();
    while (expectedPayloadContextEntries.hasNext()) {
      Map.Entry<BytesRef,SimpleEntry<Long,SimpleEntry<BytesRef,Set<BytesRef>>>> entry=expectedPayloadContextEntries.next();
      assertEquals(entry.getKey(),wrapper.next());
      assertEquals(entry.getValue().getKey().longValue(),wrapper.weight());
      Set<BytesRef> actualCtxs=entry.getValue().getValue().getValue();
      assertEquals(actualCtxs,wrapper.contexts());
      BytesRef actualPayload=entry.getValue().getValue().getKey();
      assertEquals(actualPayload,wrapper.payload());
    }
    assertNull(wrapper.next());
  }
   InputIterator wrapper=new UnsortedInputIterator(new InputArrayIterator(unsorted));
  TreeMap<BytesRef,SimpleEntry<Long,BytesRef>> actual=new TreeMap<>();
  BytesRef key;
  while ((key=wrapper.next()) != null) {
    long value=wrapper.weight();
    BytesRef payload=wrapper.payload();
    actual.put(BytesRef.deepCopyOf(key),new SimpleEntry<>(value,BytesRef.deepCopyOf(payload)));
  }
  assertEquals(sorted,actual);
  try (Directory tempDir=getDirectory()){
    InputIterator wrapperWithoutPayload=new SortedInputIterator(tempDir,"sorted",new InputArrayIterator(unsortedWithoutPayload),comparator);
    Iterator<Map.Entry<BytesRef,Long>> expectedWithoutPayload=sortedWithoutPayload.entrySet().iterator();
    while (expectedWithoutPayload.hasNext()) {
      Map.Entry<BytesRef,Long> entry=expectedWithoutPayload.next();
      assertEquals(entry.getKey(),wrapperWithoutPayload.next());
      assertEquals(entry.getValue().longValue(),wrapperWithoutPayload.weight());
      assertNull(wrapperWithoutPayload.payload());
    }
    assertNull(wrapperWithoutPayload.next());
  }
   InputIterator wrapperWithoutPayload=new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));
  TreeMap<BytesRef,Long> actualWithoutPayload=new TreeMap<>();
  while ((key=wrapperWithoutPayload.next()) != null) {
    long value=wrapperWithoutPayload.weight();
    assertNull(wrapperWithoutPayload.payload());
    actualWithoutPayload.put(BytesRef.deepCopyOf(key),value);
  }
  assertEquals(sortedWithoutPayload,actualWithoutPayload);
}
