{
  CommandLineParser parser=new PosixParser();
  Options options=new Options();
  options.addOption(OptionBuilder.hasArg(true).withDescription("cmd to run: " + BOOTSTRAP + ", "+ UPCONFIG+ ", "+ DOWNCONFIG+ ", "+ LINKCONFIG+ ", "+ MAKEPATH+ ", "+ PUT+ ", "+ PUT_FILE+ ","+ GET+ ","+ GET_FILE+ ", "+ LIST+ ", "+ CLEAR).create(CMD));
  Option zkHostOption=new Option("z",ZKHOST,true,"ZooKeeper host address");
  options.addOption(zkHostOption);
  Option solrHomeOption=new Option("s",SOLRHOME,true,"for " + BOOTSTRAP + ", "+ RUNZK+ ": solrhome location");
  options.addOption(zkHostOption);
  options.addOption(solrHomeOption);
  options.addOption("d",CONFDIR,true,"for " + UPCONFIG + ": a directory of configuration files");
  options.addOption("n",CONFNAME,true,"for " + UPCONFIG + ", "+ LINKCONFIG+ ": name of the config set");
  options.addOption("c",COLLECTION,true,"for " + LINKCONFIG + ": name of the collection");
  options.addOption("r",RUNZK,true,"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)");
  options.addOption("h",HELP,false,"bring up this help page");
  try {
    CommandLine line=parser.parse(options,args);
    if (line.hasOption(HELP) || !line.hasOption(ZKHOST) || !line.hasOption(CMD)) {
      HelpFormatter formatter=new HelpFormatter();
      formatter.printHelp(ZK_CLI_NAME,options);
      System.out.println("Examples:");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + BOOTSTRAP + " -"+ SOLRHOME+ " /opt/solr");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + UPCONFIG + " -"+ CONFDIR+ " /opt/solr/collection1/conf"+ " -"+ CONFNAME+ " myconf");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + DOWNCONFIG + " -"+ CONFDIR+ " /opt/solr/collection1/conf"+ " -"+ CONFNAME+ " myconf");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + LINKCONFIG + " -"+ COLLECTION+ " collection1"+ " -"+ CONFNAME+ " myconf");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + MAKEPATH + " /apache/solr");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + PUT + " /solr.conf 'conf data'");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + PUT_FILE + " /solr.xml /User/myuser/solr/solr.xml");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + GET + " /solr.xml");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + GET_FILE + " /solr.xml solr.xml.file");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + CLEAR + " /solr");
      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + LIST);
      return;
    }
    String zkServerAddress=line.getOptionValue(ZKHOST);
    String solrHome=line.getOptionValue(SOLRHOME);
    String solrPort=null;
    if (line.hasOption(RUNZK)) {
      if (!line.hasOption(SOLRHOME)) {
        System.out.println("-" + SOLRHOME + " is required for "+ RUNZK);
        System.exit(1);
      }
      solrPort=line.getOptionValue(RUNZK);
    }
    SolrZkServer zkServer=null;
    if (solrPort != null) {
      zkServer=new SolrZkServer("true",null,solrHome + "/zoo_data",solrHome,solrPort);
      zkServer.parseConfig();
      zkServer.start();
    }
    SolrZkClient zkClient=null;
    try {
      zkClient=new SolrZkClient(zkServerAddress,30000,30000,new OnReconnect(){
        @Override public void command(){
        }
      }
);
      if (line.getOptionValue(CMD).equals(BOOTSTRAP)) {
        if (!line.hasOption(SOLRHOME)) {
          System.out.println("-" + SOLRHOME + " is required for "+ BOOTSTRAP);
          System.exit(1);
        }
        CoreContainer cc=new CoreContainer(solrHome);
        if (!ZkController.checkChrootPath(zkServerAddress,true)) {
          System.out.println("A chroot was specified in zkHost but the znode doesn't exist. ");
          System.exit(1);
        }
        ZkController.bootstrapConf(zkClient,cc,solrHome);
      }
 else       if (line.getOptionValue(CMD).equals(UPCONFIG)) {
        if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {
          System.out.println("-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ UPCONFIG);
          System.exit(1);
        }
        String confDir=line.getOptionValue(CONFDIR);
        String confName=line.getOptionValue(CONFNAME);
        if (!ZkController.checkChrootPath(zkServerAddress,true)) {
          System.out.println("A chroot was specified in zkHost but the znode doesn't exist. ");
          System.exit(1);
        }
        ZkController.uploadConfigDir(zkClient,new File(confDir),confName);
      }
 else       if (line.getOptionValue(CMD).equals(DOWNCONFIG)) {
        if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {
          System.out.println("-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ DOWNCONFIG);
          System.exit(1);
        }
        String confDir=line.getOptionValue(CONFDIR);
        String confName=line.getOptionValue(CONFNAME);
        ZkController.downloadConfigDir(zkClient,confName,new File(confDir));
      }
 else       if (line.getOptionValue(CMD).equals(LINKCONFIG)) {
        if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {
          System.out.println("-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ LINKCONFIG);
          System.exit(1);
        }
        String collection=line.getOptionValue(COLLECTION);
        String confName=line.getOptionValue(CONFNAME);
        ZkController.linkConfSet(zkClient,collection,confName);
      }
 else       if (line.getOptionValue(CMD).equals(LIST)) {
        zkClient.printLayoutToStdOut();
      }
 else       if (line.getOptionValue(CMD).equals(CLEAR)) {
        List arglist=line.getArgList();
        if (arglist.size() != 1) {
          System.out.println("-" + CLEAR + " requires one arg - the path to clear");
          System.exit(1);
        }
        zkClient.clean(arglist.get(0).toString());
      }
 else       if (line.getOptionValue(CMD).equals(MAKEPATH)) {
        List arglist=line.getArgList();
        if (arglist.size() != 1) {
          System.out.println("-" + MAKEPATH + " requires one arg - the path to make");
          System.exit(1);
        }
        zkClient.makePath(arglist.get(0).toString(),true);
      }
 else       if (line.getOptionValue(CMD).equals(PUT)) {
        List<ACL> acl=ZooDefs.Ids.OPEN_ACL_UNSAFE;
        List arglist=line.getArgList();
        if (arglist.size() != 2) {
          System.out.println("-" + PUT + " requires two args - the path to create and the data string");
          System.exit(1);
        }
        zkClient.create(arglist.get(0).toString(),arglist.get(1).toString().getBytes("UTF-8"),acl,CreateMode.PERSISTENT,true);
      }
 else       if (line.getOptionValue(CMD).equals(PUT_FILE)) {
        List arglist=line.getArgList();
        if (arglist.size() != 2) {
          System.out.println("-" + PUT_FILE + " requires two args - the path to create in ZK and the path to the local file");
          System.exit(1);
        }
        InputStream is=new FileInputStream(arglist.get(1).toString());
        try {
          zkClient.create(arglist.get(0).toString(),IOUtils.toByteArray(is),ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT,true);
        }
  finally {
          IOUtils.closeQuietly(is);
        }
      }
 else       if (line.getOptionValue(CMD).equals(GET)) {
        List arglist=line.getArgList();
        if (arglist.size() != 1) {
          System.out.println("-" + GET + " requires one arg - the path to get");
          System.exit(1);
        }
        byte[] data=zkClient.getData(arglist.get(0).toString(),null,null,true);
        System.out.println(new String(data,"UTF-8"));
      }
 else       if (line.getOptionValue(CMD).equals(GET_FILE)) {
        List arglist=line.getArgList();
        if (arglist.size() != 2) {
          System.out.println("-" + GET_FILE + "requires two args - the path to get and the file to save it to");
          System.exit(1);
        }
        byte[] data=zkClient.getData(arglist.get(0).toString(),null,null,true);
        FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()),data);
      }
    }
  finally {
      if (solrPort != null) {
        zkServer.stop();
      }
      if (zkClient != null) {
        zkClient.close();
      }
    }
  }
 catch (  ParseException exp) {
    System.out.println("Unexpected exception:" + exp.getMessage());
  }
}
