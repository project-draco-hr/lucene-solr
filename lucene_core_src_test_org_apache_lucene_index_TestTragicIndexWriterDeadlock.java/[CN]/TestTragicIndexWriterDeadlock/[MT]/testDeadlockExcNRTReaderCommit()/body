{
  MockDirectoryWrapper dir=newMockDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig();
  if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {
    iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler(){
      @Override protected boolean isOK(      Throwable th){
        return true;
      }
    }
);
  }
  final IndexWriter w=new IndexWriter(dir,iwc);
  final CountDownLatch startingGun=new CountDownLatch(1);
  final AtomicBoolean done=new AtomicBoolean();
  Thread commitThread=new Thread(){
    @Override public void run(){
      try {
        startingGun.await();
        while (done.get() == false) {
          w.addDocument(new Document());
          w.commit();
        }
      }
 catch (      Throwable t) {
        done.set(true);
      }
    }
  }
;
  commitThread.start();
  final DirectoryReader r0=DirectoryReader.open(w);
  Thread nrtThread=new Thread(){
    @Override public void run(){
      DirectoryReader r=r0;
      try {
        try {
          startingGun.await();
          while (done.get() == false) {
            DirectoryReader oldReader=r;
            DirectoryReader r2=DirectoryReader.openIfChanged(oldReader);
            if (r2 != null) {
              r=r2;
              oldReader.decRef();
            }
          }
        }
  finally {
          r.close();
        }
      }
 catch (      Throwable t) {
        done.set(true);
      }
    }
  }
;
  nrtThread.start();
  dir.setRandomIOExceptionRate(.1);
  startingGun.countDown();
  commitThread.join();
  nrtThread.join();
  dir.setRandomIOExceptionRate(0.0);
  w.close();
  dir.close();
}
