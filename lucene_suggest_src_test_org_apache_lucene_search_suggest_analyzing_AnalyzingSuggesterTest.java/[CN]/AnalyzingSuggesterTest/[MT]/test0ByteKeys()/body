{
  final Analyzer a=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,true);
      return new TokenStreamComponents(tokenizer){
        int tokenStreamCounter=0;
        final TokenStream[] tokenStreams=new TokenStream[]{new CannedBinaryTokenStream(new BinaryToken[]{token(new BytesRef(new byte[]{0x0,0x0,0x0}))}),new CannedBinaryTokenStream(new BinaryToken[]{token(new BytesRef(new byte[]{0x0,0x0}))}),new CannedBinaryTokenStream(new BinaryToken[]{token(new BytesRef(new byte[]{0x0,0x0,0x0}))}),new CannedBinaryTokenStream(new BinaryToken[]{token(new BytesRef(new byte[]{0x0,0x0}))})};
        @Override public TokenStream getTokenStream(){
          TokenStream result=tokenStreams[tokenStreamCounter];
          tokenStreamCounter++;
          return result;
        }
        @Override protected void setReader(        final Reader reader){
        }
      }
;
    }
  }
;
  Directory tempDir=getDirectory();
  AnalyzingSuggester suggester=new AnalyzingSuggester(tempDir,"suggest",a,a,0,256,-1,true);
  suggester.build(new InputArrayIterator(new Input[]{new Input("a a",50),new Input("a b",50)}));
  IOUtils.close(a,tempDir);
}
