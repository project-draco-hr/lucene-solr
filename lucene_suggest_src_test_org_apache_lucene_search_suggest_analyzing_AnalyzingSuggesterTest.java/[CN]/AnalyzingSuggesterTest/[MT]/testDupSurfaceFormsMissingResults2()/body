{
  Analyzer a=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.SIMPLE,true);
      return new TokenStreamComponents(tokenizer){
        int count;
        @Override public TokenStream getTokenStream(){
          if (count == 0) {
            count++;
            return new CannedTokenStream(new Token[]{token("p",1,1),token("q",1,1),token("r",0,1),token("s",0,1)});
          }
 else {
            return new CannedTokenStream(new Token[]{token("p",1,1)});
          }
        }
        @Override protected void setReader(        final Reader reader) throws IOException {
        }
      }
;
    }
  }
;
  AnalyzingSuggester suggester=new AnalyzingSuggester(a,a,0,256,-1);
  suggester.build(new TermFreqArrayIterator(new TermFreq[]{new TermFreq("a",6),new TermFreq("b",5)}));
  List<LookupResult> results=suggester.lookup("a",false,2);
  assertEquals(2,results.size());
  assertEquals("a",results.get(0).key);
  assertEquals(6,results.get(0).value);
  assertEquals("b",results.get(1).key);
  assertEquals(5,results.get(1).value);
}
