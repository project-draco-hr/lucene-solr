{
  TermFreq keys[]=new TermFreq[]{new TermFreq("the ghost of christmas past",50)};
  Analyzer standard=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,MockTokenFilter.ENGLISH_STOPSET,false);
  AnalyzingSuggester suggester=new AnalyzingSuggester(standard);
  suggester.build(new TermFreqArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(_TestUtil.stringToCharSequence("the ghost of chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("ghost of chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("ghost chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
}
