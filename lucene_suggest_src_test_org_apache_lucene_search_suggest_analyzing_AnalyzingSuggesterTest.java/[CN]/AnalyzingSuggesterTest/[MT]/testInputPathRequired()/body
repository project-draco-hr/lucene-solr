{
  final Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.SIMPLE,true);
      return new TokenStreamComponents(tokenizer){
        int tokenStreamCounter=0;
        final TokenStream[] tokenStreams=new TokenStream[]{new CannedTokenStream(new Token[]{token("ab",1,1),token("ba",0,1),token("xc",1,1)}),new CannedTokenStream(new Token[]{token("ba",1,1),token("xd",1,1)}),new CannedTokenStream(new Token[]{token("ab",1,1),token("ba",0,1),token("x",1,1)})};
        @Override public TokenStream getTokenStream(){
          TokenStream result=tokenStreams[tokenStreamCounter];
          tokenStreamCounter++;
          return result;
        }
        @Override protected void setReader(        final Reader reader) throws IOException {
        }
      }
;
    }
  }
;
  TermFreqPayload keys[]=new TermFreqPayload[]{new TermFreqPayload("ab xc",50),new TermFreqPayload("ba xd",50)};
  AnalyzingSuggester suggester=new AnalyzingSuggester(analyzer);
  suggester.build(new TermFreqPayloadArrayIterator(keys));
  List<LookupResult> results=suggester.lookup("ab x",false,1);
  assertTrue(results.size() == 1);
}
