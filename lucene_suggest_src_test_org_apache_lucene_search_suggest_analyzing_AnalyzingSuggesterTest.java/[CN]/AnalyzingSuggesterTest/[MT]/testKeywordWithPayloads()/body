{
  Iterable<Input> keys=shuffle(new Input("foo",50,new BytesRef("hello")),new Input("bar",10,new BytesRef("goodbye")),new Input("barbar",12,new BytesRef("thank you")),new Input("bar",9,new BytesRef("should be deduplicated")),new Input("bar",8,new BytesRef("should also be deduplicated")),new Input("barbara",6,new BytesRef("for all the fish")));
  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);
  AnalyzingSuggester suggester=new AnalyzingSuggester(analyzer);
  suggester.build(new InputArrayIterator(keys));
  for (int i=0; i < 2; i++) {
    List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("f",random()),false,2);
    assertEquals(1,results.size());
    assertEquals("foo",results.get(0).key.toString());
    assertEquals(50,results.get(0).value,0.01F);
    assertEquals(new BytesRef("hello"),results.get(0).payload);
    results=suggester.lookup(TestUtil.stringToCharSequence("bar",random()),false,1);
    assertEquals(1,results.size());
    assertEquals("bar",results.get(0).key.toString());
    assertEquals(10,results.get(0).value,0.01F);
    assertEquals(new BytesRef("goodbye"),results.get(0).payload);
    results=suggester.lookup(TestUtil.stringToCharSequence("b",random()),false,2);
    assertEquals(2,results.size());
    assertEquals("barbar",results.get(0).key.toString());
    assertEquals(12,results.get(0).value,0.01F);
    assertEquals(new BytesRef("thank you"),results.get(0).payload);
    assertEquals("bar",results.get(1).key.toString());
    assertEquals(10,results.get(1).value,0.01F);
    assertEquals(new BytesRef("goodbye"),results.get(1).payload);
    results=suggester.lookup(TestUtil.stringToCharSequence("ba",random()),false,3);
    assertEquals(3,results.size());
    assertEquals("barbar",results.get(0).key.toString());
    assertEquals(12,results.get(0).value,0.01F);
    assertEquals(new BytesRef("thank you"),results.get(0).payload);
    assertEquals("bar",results.get(1).key.toString());
    assertEquals(10,results.get(1).value,0.01F);
    assertEquals(new BytesRef("goodbye"),results.get(1).payload);
    assertEquals("barbara",results.get(2).key.toString());
    assertEquals(6,results.get(2).value,0.01F);
    assertEquals(new BytesRef("for all the fish"),results.get(2).payload);
  }
  analyzer.close();
}
