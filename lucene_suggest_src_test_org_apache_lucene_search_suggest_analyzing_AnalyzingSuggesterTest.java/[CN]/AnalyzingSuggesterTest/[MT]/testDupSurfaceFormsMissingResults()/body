{
  Analyzer a=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,true);
      return new TokenStreamComponents(tokenizer){
        @Override public TokenStream getTokenStream(){
          return new CannedTokenStream(new Token[]{token("hairy",1,1),token("smelly",0,1),token("dog",1,1)});
        }
        @Override protected void setReader(        final Reader reader){
        }
      }
;
    }
  }
;
  Directory tempDir=getDirectory();
  AnalyzingSuggester suggester=new AnalyzingSuggester(tempDir,"suggest",a,a,0,256,-1,true);
  suggester.build(new InputArrayIterator(shuffle(new Input("hambone",6),new Input("nellie",5))));
  List<LookupResult> results=suggester.lookup("nellie",false,2);
  assertEquals(2,results.size());
  assertEquals("hambone",results.get(0).key);
  assertEquals(6,results.get(0).value);
  assertEquals("nellie",results.get(1).key);
  assertEquals(5,results.get(1).value);
  Path tmpDir=createTempDir("AnalyzingSuggesterTest");
  Path path=tmpDir.resolve("suggester");
  OutputStream os=Files.newOutputStream(path);
  suggester.store(os);
  os.close();
  InputStream is=Files.newInputStream(path);
  suggester.load(is);
  is.close();
  results=suggester.lookup("nellie",false,2);
  assertEquals(2,results.size());
  assertEquals("hambone",results.get(0).key);
  assertEquals(6,results.get(0).value);
  assertEquals("nellie",results.get(1).key);
  assertEquals(5,results.get(1).value);
  IOUtils.close(a,tempDir);
}
