{
  final Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,true);
      return new TokenStreamComponents(tokenizer){
        int tokenStreamCounter=0;
        final TokenStream[] tokenStreams=new TokenStream[]{new CannedTokenStream(new Token[]{token("wifi",1,1),token("hotspot",0,2),token("network",1,1),token("is",1,1),token("slow",1,1)}),new CannedTokenStream(new Token[]{token("wi",1,1),token("hotspot",0,3),token("fi",1,1),token("network",1,1),token("is",1,1),token("fast",1,1)}),new CannedTokenStream(new Token[]{token("wifi",1,1),token("hotspot",0,2),token("network",1,1)})};
        @Override public TokenStream getTokenStream(){
          TokenStream result=tokenStreams[tokenStreamCounter];
          tokenStreamCounter++;
          return result;
        }
        @Override protected void setReader(        final Reader reader) throws IOException {
        }
      }
;
    }
  }
;
  Input keys[]=new Input[]{new Input("wifi network is slow",50),new Input("wi fi network is fast",10)};
  Directory tempDir=getDirectory();
  AnalyzingSuggester suggester=new AnalyzingSuggester(tempDir,"suggest",analyzer);
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup("wifi network",false,10);
  if (VERBOSE) {
    System.out.println("Results: " + results);
  }
  assertEquals(2,results.size());
  assertEquals("wifi network is slow",results.get(0).key);
  assertEquals(50,results.get(0).value);
  assertEquals("wi fi network is fast",results.get(1).key);
  assertEquals(10,results.get(1).value);
  IOUtils.close(analyzer,tempDir);
}
