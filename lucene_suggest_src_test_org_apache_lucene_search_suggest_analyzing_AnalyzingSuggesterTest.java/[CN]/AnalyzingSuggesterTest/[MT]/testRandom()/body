{
  int numQueries=atLeast(1000);
  final List<TermFreq2> slowCompletor=new ArrayList<TermFreq2>();
  final TreeSet<String> allPrefixes=new TreeSet<String>();
  final Set<String> seen=new HashSet<String>();
  boolean doPayloads=random().nextBoolean();
  Input[] keys=null;
  Input[] payloadKeys=null;
  if (doPayloads) {
    payloadKeys=new Input[numQueries];
  }
 else {
    keys=new Input[numQueries];
  }
  boolean preserveSep=random().nextBoolean();
  final int numStopChars=random().nextInt(10);
  final boolean preserveHoles=random().nextBoolean();
  if (VERBOSE) {
    System.out.println("TEST: " + numQueries + " words; preserveSep="+ preserveSep+ " numStopChars="+ numStopChars+ " preserveHoles="+ preserveHoles);
  }
  for (int i=0; i < numQueries; i++) {
    int numTokens=TestUtil.nextInt(random(),1,4);
    String key;
    String analyzedKey;
    while (true) {
      key="";
      analyzedKey="";
      boolean lastRemoved=false;
      for (int token=0; token < numTokens; token++) {
        String s;
        while (true) {
          s=TestUtil.randomSimpleString(random());
          if (s.length() > 0) {
            if (token > 0) {
              key+=" ";
            }
            if (preserveSep && analyzedKey.length() > 0 && analyzedKey.charAt(analyzedKey.length() - 1) != SEP) {
              analyzedKey+=SEP;
            }
            key+=s;
            if (s.length() == 1 && isStopChar(s.charAt(0),numStopChars)) {
              lastRemoved=true;
              if (preserveSep && preserveHoles) {
                analyzedKey+=SEP;
              }
            }
 else {
              lastRemoved=false;
              analyzedKey+=s;
            }
            break;
          }
        }
      }
      analyzedKey=analyzedKey.replaceAll("(^|" + SEP + ")"+ SEP+ "$","");
      if (preserveSep && lastRemoved) {
        analyzedKey+=SEP;
      }
      if (!seen.contains(key)) {
        seen.add(key);
        break;
      }
    }
    for (int j=1; j < key.length(); j++) {
      allPrefixes.add(key.substring(0,j));
    }
    int weight=random().nextInt(1 << 24);
    BytesRef payload;
    if (doPayloads) {
      byte[] bytes=new byte[random().nextInt(10)];
      random().nextBytes(bytes);
      payload=new BytesRef(bytes);
      payloadKeys[i]=new Input(key,weight,payload);
    }
 else {
      keys[i]=new Input(key,weight);
      payload=null;
    }
    slowCompletor.add(new TermFreq2(key,analyzedKey,weight,payload));
  }
  if (VERBOSE) {
    List<TermFreq2> sorted=new ArrayList<TermFreq2>(slowCompletor);
    Collections.sort(sorted);
    for (    TermFreq2 ent : sorted) {
      System.out.println("  surface='" + ent.surfaceForm + "' analyzed='"+ ent.analyzedForm+ "' weight="+ ent.weight);
    }
  }
  Analyzer a=new MockTokenEatingAnalyzer(numStopChars,preserveHoles);
  AnalyzingSuggester suggester=new AnalyzingSuggester(a,a,preserveSep ? AnalyzingSuggester.PRESERVE_SEP : 0,256,-1,true);
  if (doPayloads) {
    suggester.build(new InputArrayIterator(shuffle(payloadKeys)));
  }
 else {
    suggester.build(new InputArrayIterator(shuffle(keys)));
  }
  for (  String prefix : allPrefixes) {
    if (VERBOSE) {
      System.out.println("\nTEST: prefix=" + prefix);
    }
    final int topN=TestUtil.nextInt(random(),1,10);
    List<LookupResult> r=suggester.lookup(TestUtil.stringToCharSequence(prefix,random()),false,topN);
    List<TermFreq2> matches=new ArrayList<TermFreq2>();
    String[] tokens=prefix.split(" ");
    StringBuilder builder=new StringBuilder();
    boolean lastRemoved=false;
    for (int i=0; i < tokens.length; i++) {
      String token=tokens[i];
      if (preserveSep && builder.length() > 0 && !builder.toString().endsWith("" + SEP)) {
        builder.append(SEP);
      }
      if (token.length() == 1 && isStopChar(token.charAt(0),numStopChars)) {
        if (preserveSep && preserveHoles) {
          builder.append(SEP);
        }
        lastRemoved=true;
      }
 else {
        builder.append(token);
        lastRemoved=false;
      }
    }
    String analyzedKey=builder.toString();
    while (true) {
      String s=analyzedKey.replaceAll(SEP + "$","");
      if (s.equals(analyzedKey)) {
        break;
      }
      analyzedKey=s;
    }
    if (analyzedKey.length() == 0) {
      continue;
    }
    if (preserveSep && (prefix.endsWith(" ") || lastRemoved)) {
      analyzedKey+=SEP;
    }
    if (VERBOSE) {
      System.out.println("  analyzed: " + analyzedKey);
    }
    for (    TermFreq2 e : slowCompletor) {
      if (e.analyzedForm.startsWith(analyzedKey)) {
        matches.add(e);
      }
    }
    assertTrue(numStopChars > 0 || matches.size() > 0);
    if (matches.size() > 1) {
      Collections.sort(matches,new Comparator<TermFreq2>(){
        @Override public int compare(        TermFreq2 left,        TermFreq2 right){
          int cmp=Float.compare(right.weight,left.weight);
          if (cmp == 0) {
            return left.analyzedForm.compareTo(right.analyzedForm);
          }
 else {
            return cmp;
          }
        }
      }
);
    }
    if (matches.size() > topN) {
      matches=matches.subList(0,topN);
    }
    if (VERBOSE) {
      System.out.println("  expected:");
      for (      TermFreq2 lr : matches) {
        System.out.println("    key=" + lr.surfaceForm + " weight="+ lr.weight);
      }
      System.out.println("  actual:");
      for (      LookupResult lr : r) {
        System.out.println("    key=" + lr.key + " weight="+ lr.value);
      }
    }
    assertEquals(matches.size(),r.size());
    for (int hit=0; hit < r.size(); hit++) {
      assertEquals(matches.get(hit).surfaceForm.toString(),r.get(hit).key.toString());
      assertEquals(matches.get(hit).weight,r.get(hit).value,0f);
      if (doPayloads) {
        assertEquals(matches.get(hit).payload,r.get(hit).payload);
      }
    }
  }
}
