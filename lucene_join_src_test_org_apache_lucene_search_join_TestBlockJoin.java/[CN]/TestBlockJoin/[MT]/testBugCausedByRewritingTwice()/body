{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final List<Document> docs=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    docs.clear();
    docs.add(makeJob("ruby",i));
    docs.add(makeJob("java",2007));
    docs.add(makeResume("Frank","United States"));
    w.addDocuments(docs);
  }
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r);
  MultiTermQuery qc=NumericRangeQuery.newIntRange("year",2007,2007,true,true);
  qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);
  BitSetProducer parentsFilter=new QueryBitSetProducer(new TermQuery(new Term("docType","resume")));
  int h1=qc.hashCode();
  Query qw1=qc.rewrite(r);
  int h2=qw1.hashCode();
  Query qw2=qw1.rewrite(r);
  int h3=qw2.hashCode();
  assertTrue(h1 != h2);
  assertTrue(h2 != h3);
  assertTrue(h3 != h1);
  ToParentBlockJoinQuery qp=new ToParentBlockJoinQuery(qc,parentsFilter,ScoreMode.Max);
  ToParentBlockJoinCollector c=new ToParentBlockJoinCollector(Sort.RELEVANCE,10,true,true);
  s.search(qp,c);
  TopGroups<Integer> groups=c.getTopGroups(qp,Sort.INDEXORDER,0,10,0,true);
  for (  GroupDocs<Integer> group : groups.groups) {
    assertEquals(1,group.totalHits);
  }
  r.close();
  dir.close();
}
