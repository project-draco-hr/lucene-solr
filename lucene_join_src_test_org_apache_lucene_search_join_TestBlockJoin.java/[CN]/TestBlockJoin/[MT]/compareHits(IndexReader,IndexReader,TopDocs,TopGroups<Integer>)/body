{
  int resultUpto=0;
  int joinGroupUpto=0;
  final ScoreDoc[] hits=results.scoreDocs;
  final GroupDocs<Integer>[] groupDocs=joinResults.groups;
  while (joinGroupUpto < groupDocs.length) {
    final GroupDocs<Integer> group=groupDocs[joinGroupUpto++];
    final ScoreDoc[] groupHits=group.scoreDocs;
    assertNotNull(group.groupValue);
    final StoredDocument parentDoc=joinR.document(group.groupValue);
    final String parentID=parentDoc.get("parentID");
    assertNotNull(parentID);
    assertTrue(groupHits.length > 0);
    for (int hitIDX=0; hitIDX < groupHits.length; hitIDX++) {
      final StoredDocument nonJoinHit=r.document(hits[resultUpto++].doc);
      final StoredDocument joinHit=joinR.document(groupHits[hitIDX].doc);
      assertEquals(parentID,nonJoinHit.get("parentID"));
      assertEquals(joinHit.get("childID"),nonJoinHit.get("childID"));
    }
    if (joinGroupUpto < groupDocs.length) {
      while (true) {
        assertTrue(resultUpto < hits.length);
        if (!parentID.equals(r.document(hits[resultUpto].doc).get("parentID"))) {
          break;
        }
        resultUpto++;
      }
    }
  }
}
