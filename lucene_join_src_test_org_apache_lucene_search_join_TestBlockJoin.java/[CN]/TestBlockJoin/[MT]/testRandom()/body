{
  final Directory dir=newDirectory();
  final Directory joinDir=newDirectory();
  final int numParentDocs=TestUtil.nextInt(random(),100 * RANDOM_MULTIPLIER,300 * RANDOM_MULTIPLIER);
  final String[][] parentFields=getRandomFields(numParentDocs / 2);
  final String[][] childFields=getRandomFields(numParentDocs);
  final boolean doDeletes=random().nextBoolean();
  final List<Integer> toDelete=new ArrayList<>();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final RandomIndexWriter joinW=new RandomIndexWriter(random(),joinDir);
  for (int parentDocID=0; parentDocID < numParentDocs; parentDocID++) {
    Document parentDoc=new Document();
    Document parentJoinDoc=new Document();
    Field id=new IntField("parentID",parentDocID,Field.Store.YES);
    parentDoc.add(id);
    parentJoinDoc.add(id);
    parentJoinDoc.add(newStringField("isParent","x",Field.Store.NO));
    id=new NumericDocValuesField("parentID",parentDocID);
    parentDoc.add(id);
    parentJoinDoc.add(id);
    parentJoinDoc.add(newStringField("isParent","x",Field.Store.NO));
    for (int field=0; field < parentFields.length; field++) {
      if (random().nextDouble() < 0.9) {
        String s=parentFields[field][random().nextInt(parentFields[field].length)];
        Field f=newStringField("parent" + field,s,Field.Store.NO);
        parentDoc.add(f);
        parentJoinDoc.add(f);
        f=new SortedDocValuesField("parent" + field,new BytesRef(s));
        parentDoc.add(f);
        parentJoinDoc.add(f);
      }
    }
    if (doDeletes) {
      parentDoc.add(new IntField("blockID",parentDocID,Field.Store.NO));
      parentJoinDoc.add(new IntField("blockID",parentDocID,Field.Store.NO));
    }
    final List<Document> joinDocs=new ArrayList<>();
    if (VERBOSE) {
      StringBuilder sb=new StringBuilder();
      sb.append("parentID=").append(parentDoc.get("parentID"));
      for (int fieldID=0; fieldID < parentFields.length; fieldID++) {
        String s=parentDoc.get("parent" + fieldID);
        if (s != null) {
          sb.append(" parent" + fieldID + "="+ s);
        }
      }
      System.out.println("  " + sb.toString());
    }
    final int numChildDocs=TestUtil.nextInt(random(),1,20);
    for (int childDocID=0; childDocID < numChildDocs; childDocID++) {
      Document childDoc=TestUtil.cloneDocument(parentDoc);
      Document joinChildDoc=new Document();
      joinDocs.add(joinChildDoc);
      Field childID=new IntField("childID",childDocID,Field.Store.YES);
      childDoc.add(childID);
      joinChildDoc.add(childID);
      childID=new NumericDocValuesField("childID",childDocID);
      childDoc.add(childID);
      joinChildDoc.add(childID);
      for (int childFieldID=0; childFieldID < childFields.length; childFieldID++) {
        if (random().nextDouble() < 0.9) {
          String s=childFields[childFieldID][random().nextInt(childFields[childFieldID].length)];
          Field f=newStringField("child" + childFieldID,s,Field.Store.NO);
          childDoc.add(f);
          joinChildDoc.add(f);
          f=new SortedDocValuesField("child" + childFieldID,new BytesRef(s));
          childDoc.add(f);
          joinChildDoc.add(f);
        }
      }
      if (VERBOSE) {
        StringBuilder sb=new StringBuilder();
        sb.append("childID=").append(joinChildDoc.get("childID"));
        for (int fieldID=0; fieldID < childFields.length; fieldID++) {
          String s=joinChildDoc.get("child" + fieldID);
          if (s != null) {
            sb.append(" child" + fieldID + "="+ s);
          }
        }
        System.out.println("    " + sb.toString());
      }
      if (doDeletes) {
        joinChildDoc.add(new IntField("blockID",parentDocID,Field.Store.NO));
      }
      w.addDocument(childDoc);
    }
    joinDocs.add(parentJoinDoc);
    joinW.addDocuments(joinDocs);
    if (doDeletes && random().nextInt(30) == 7) {
      toDelete.add(parentDocID);
    }
  }
  BytesRefBuilder term=new BytesRefBuilder();
  for (  int deleteID : toDelete) {
    if (VERBOSE) {
      System.out.println("DELETE parentID=" + deleteID);
    }
    NumericUtils.intToPrefixCodedBytes(deleteID,0,term);
    w.deleteDocuments(new Term("blockID",term.toBytesRef()));
    joinW.deleteDocuments(new Term("blockID",term.toBytesRef()));
  }
  final IndexReader r=w.getReader();
  w.close();
  final IndexReader joinR=joinW.getReader();
  joinW.close();
  if (VERBOSE) {
    System.out.println("TEST: reader=" + r);
    System.out.println("TEST: joinReader=" + joinR);
    Bits liveDocs=MultiFields.getLiveDocs(joinR);
    for (int docIDX=0; docIDX < joinR.maxDoc(); docIDX++) {
      System.out.println("  docID=" + docIDX + " doc="+ joinR.document(docIDX)+ " deleted?="+ (liveDocs != null && liveDocs.get(docIDX) == false));
    }
    PostingsEnum parents=MultiFields.getTermDocsEnum(joinR,"isParent",new BytesRef("x"));
    System.out.println("parent docIDs:");
    while (parents.nextDoc() != PostingsEnum.NO_MORE_DOCS) {
      System.out.println("  " + parents.docID());
    }
  }
  final IndexSearcher s=newSearcher(r);
  final IndexSearcher joinS=new IndexSearcher(joinR);
  final BitSetProducer parentsFilter=new QueryBitSetProducer(new TermQuery(new Term("isParent","x")));
  CheckJoinIndex.check(joinS.getIndexReader(),parentsFilter);
  final int iters=200 * RANDOM_MULTIPLIER;
  for (int iter=0; iter < iters; iter++) {
    if (VERBOSE) {
      System.out.println("TEST: iter=" + (1 + iter) + " of "+ iters);
    }
    final Query childQuery;
    if (random().nextInt(3) == 2) {
      final int childFieldID=random().nextInt(childFields.length);
      childQuery=new TermQuery(new Term("child" + childFieldID,childFields[childFieldID][random().nextInt(childFields[childFieldID].length)]));
    }
 else     if (random().nextInt(3) == 2) {
      BooleanQuery.Builder bq=new BooleanQuery.Builder();
      final int numClauses=TestUtil.nextInt(random(),2,4);
      boolean didMust=false;
      for (int clauseIDX=0; clauseIDX < numClauses; clauseIDX++) {
        Query clause;
        BooleanClause.Occur occur;
        if (!didMust && random().nextBoolean()) {
          occur=random().nextBoolean() ? BooleanClause.Occur.MUST : BooleanClause.Occur.MUST_NOT;
          clause=new TermQuery(randomChildTerm(childFields[0]));
          didMust=true;
        }
 else {
          occur=BooleanClause.Occur.SHOULD;
          final int childFieldID=TestUtil.nextInt(random(),1,childFields.length - 1);
          clause=new TermQuery(new Term("child" + childFieldID,childFields[childFieldID][random().nextInt(childFields[childFieldID].length)]));
        }
        bq.add(clause,occur);
      }
      childQuery=bq.build();
    }
 else {
      BooleanQuery.Builder bq=new BooleanQuery.Builder();
      bq.add(new TermQuery(randomChildTerm(childFields[0])),BooleanClause.Occur.MUST);
      final int childFieldID=TestUtil.nextInt(random(),1,childFields.length - 1);
      bq.add(new TermQuery(new Term("child" + childFieldID,childFields[childFieldID][random().nextInt(childFields[childFieldID].length)])),random().nextBoolean() ? BooleanClause.Occur.MUST : BooleanClause.Occur.MUST_NOT);
      childQuery=bq.build();
    }
    final ScoreMode agg=ScoreMode.values()[random().nextInt(ScoreMode.values().length)];
    final ToParentBlockJoinQuery childJoinQuery=new ToParentBlockJoinQuery(childQuery,parentsFilter,agg);
    final Query parentJoinQuery;
    final Query parentQuery;
    if (random().nextBoolean()) {
      parentQuery=childQuery;
      parentJoinQuery=childJoinQuery;
    }
 else {
      final BooleanQuery.Builder bq=new BooleanQuery.Builder();
      final Term parentTerm=randomParentTerm(parentFields[0]);
      if (random().nextBoolean()) {
        bq.add(childJoinQuery,BooleanClause.Occur.MUST);
        bq.add(new TermQuery(parentTerm),BooleanClause.Occur.MUST);
      }
 else {
        bq.add(new TermQuery(parentTerm),BooleanClause.Occur.MUST);
        bq.add(childJoinQuery,BooleanClause.Occur.MUST);
      }
      final BooleanQuery.Builder bq2=new BooleanQuery.Builder();
      if (random().nextBoolean()) {
        bq2.add(childQuery,BooleanClause.Occur.MUST);
        bq2.add(new TermQuery(parentTerm),BooleanClause.Occur.MUST);
      }
 else {
        bq2.add(new TermQuery(parentTerm),BooleanClause.Occur.MUST);
        bq2.add(childQuery,BooleanClause.Occur.MUST);
      }
      parentJoinQuery=bq.build();
      parentQuery=bq2.build();
    }
    final Sort parentSort=getRandomSort("parent",parentFields.length);
    final Sort childSort=getRandomSort("child",childFields.length);
    if (VERBOSE) {
      System.out.println("\nTEST: query=" + parentQuery + " joinQuery="+ parentJoinQuery+ " parentSort="+ parentSort+ " childSort="+ childSort);
    }
    final List<SortField> sortFields=new ArrayList<>(Arrays.asList(parentSort.getSort()));
    sortFields.addAll(Arrays.asList(childSort.getSort()));
    final Sort parentAndChildSort=new Sort(sortFields.toArray(new SortField[sortFields.size()]));
    final TopDocs results=s.search(parentQuery,r.numDocs(),parentAndChildSort);
    if (VERBOSE) {
      System.out.println("\nTEST: normal index gets " + results.totalHits + " hits; sort="+ parentAndChildSort);
      final ScoreDoc[] hits=results.scoreDocs;
      for (int hitIDX=0; hitIDX < hits.length; hitIDX++) {
        final StoredDocument doc=s.doc(hits[hitIDX].doc);
        System.out.println("  parentID=" + doc.get("parentID") + " childID="+ doc.get("childID")+ " (docID="+ hits[hitIDX].doc+ ")");
        FieldDoc fd=(FieldDoc)hits[hitIDX];
        if (fd.fields != null) {
          System.out.print("    " + fd.fields.length + " sort values: ");
          for (          Object o : fd.fields) {
            if (o instanceof BytesRef) {
              System.out.print(((BytesRef)o).utf8ToString() + " ");
            }
 else {
              System.out.print(o + " ");
            }
          }
          System.out.println();
        }
      }
    }
    final boolean trackScores;
    final boolean trackMaxScore;
    if (agg == ScoreMode.None) {
      trackScores=false;
      trackMaxScore=false;
    }
 else {
      trackScores=random().nextBoolean();
      trackMaxScore=random().nextBoolean();
    }
    final ToParentBlockJoinCollector c=new ToParentBlockJoinCollector(parentSort,10,trackScores,trackMaxScore);
    joinS.search(parentJoinQuery,c);
    final int hitsPerGroup=TestUtil.nextInt(random(),1,20);
    final TopGroups<Integer> joinResults=c.getTopGroups(childJoinQuery,childSort,0,hitsPerGroup,0,true);
    if (VERBOSE) {
      System.out.println("\nTEST: block join index gets " + (joinResults == null ? 0 : joinResults.groups.length) + " groups; hitsPerGroup="+ hitsPerGroup);
      if (joinResults != null) {
        final GroupDocs<Integer>[] groups=joinResults.groups;
        for (int groupIDX=0; groupIDX < groups.length; groupIDX++) {
          final GroupDocs<Integer> group=groups[groupIDX];
          if (group.groupSortValues != null) {
            System.out.print("  ");
            for (            Object o : group.groupSortValues) {
              if (o instanceof BytesRef) {
                System.out.print(((BytesRef)o).utf8ToString() + " ");
              }
 else {
                System.out.print(o + " ");
              }
            }
            System.out.println();
          }
          assertNotNull(group.groupValue);
          final StoredDocument parentDoc=joinS.doc(group.groupValue);
          System.out.println("  group parentID=" + parentDoc.get("parentID") + " (docID="+ group.groupValue+ ")");
          for (int hitIDX=0; hitIDX < group.scoreDocs.length; hitIDX++) {
            final StoredDocument doc=joinS.doc(group.scoreDocs[hitIDX].doc);
            System.out.println("    childID=" + doc.get("childID") + " child0="+ doc.get("child0")+ " (docID="+ group.scoreDocs[hitIDX].doc+ ")");
          }
        }
      }
    }
    if (results.totalHits == 0) {
      assertNull(joinResults);
    }
 else {
      compareHits(r,joinR,results,joinResults);
      TopDocs b=joinS.search(childJoinQuery,10);
      for (      ScoreDoc hit : b.scoreDocs) {
        Explanation explanation=joinS.explain(childJoinQuery,hit.doc);
        StoredDocument document=joinS.doc(hit.doc - 1);
        int childId=Integer.parseInt(document.get("childID"));
        assertTrue(explanation.isMatch());
        assertEquals(hit.score,explanation.getValue(),0.0f);
        assertEquals(String.format(Locale.ROOT,"Score based on child doc range from %d to %d",hit.doc - 1 - childId,hit.doc - 1),explanation.getDescription());
      }
    }
    final Query parentQuery2;
    if (random().nextInt(3) == 2) {
      final int fieldID=random().nextInt(parentFields.length);
      parentQuery2=new TermQuery(new Term("parent" + fieldID,parentFields[fieldID][random().nextInt(parentFields[fieldID].length)]));
    }
 else     if (random().nextInt(3) == 2) {
      BooleanQuery.Builder bq=new BooleanQuery.Builder();
      final int numClauses=TestUtil.nextInt(random(),2,4);
      boolean didMust=false;
      for (int clauseIDX=0; clauseIDX < numClauses; clauseIDX++) {
        Query clause;
        BooleanClause.Occur occur;
        if (!didMust && random().nextBoolean()) {
          occur=random().nextBoolean() ? BooleanClause.Occur.MUST : BooleanClause.Occur.MUST_NOT;
          clause=new TermQuery(randomParentTerm(parentFields[0]));
          didMust=true;
        }
 else {
          occur=BooleanClause.Occur.SHOULD;
          final int fieldID=TestUtil.nextInt(random(),1,parentFields.length - 1);
          clause=new TermQuery(new Term("parent" + fieldID,parentFields[fieldID][random().nextInt(parentFields[fieldID].length)]));
        }
        bq.add(clause,occur);
      }
      parentQuery2=bq.build();
    }
 else {
      BooleanQuery.Builder bq=new BooleanQuery.Builder();
      bq.add(new TermQuery(randomParentTerm(parentFields[0])),BooleanClause.Occur.MUST);
      final int fieldID=TestUtil.nextInt(random(),1,parentFields.length - 1);
      bq.add(new TermQuery(new Term("parent" + fieldID,parentFields[fieldID][random().nextInt(parentFields[fieldID].length)])),random().nextBoolean() ? BooleanClause.Occur.MUST : BooleanClause.Occur.MUST_NOT);
      parentQuery2=bq.build();
    }
    if (VERBOSE) {
      System.out.println("\nTEST: top down: parentQuery2=" + parentQuery2);
    }
    final ToChildBlockJoinQuery parentJoinQuery2=new ToChildBlockJoinQuery(parentQuery2,parentsFilter);
    Query childJoinQuery2;
    Query childQuery2;
    if (random().nextBoolean()) {
      childQuery2=parentQuery2;
      childJoinQuery2=parentJoinQuery2;
    }
 else {
      final Term childTerm=randomChildTerm(childFields[0]);
      if (random().nextBoolean()) {
        childJoinQuery2=parentJoinQuery2;
        childJoinQuery2=new BooleanQuery.Builder().add(childJoinQuery2,Occur.MUST).add(new TermQuery(childTerm),Occur.FILTER).build();
      }
 else {
        final BooleanQuery.Builder bq=new BooleanQuery.Builder();
        if (random().nextBoolean()) {
          bq.add(parentJoinQuery2,BooleanClause.Occur.MUST);
          bq.add(new TermQuery(childTerm),BooleanClause.Occur.MUST);
        }
 else {
          bq.add(new TermQuery(childTerm),BooleanClause.Occur.MUST);
          bq.add(parentJoinQuery2,BooleanClause.Occur.MUST);
        }
        childJoinQuery2=bq.build();
      }
      if (random().nextBoolean()) {
        childQuery2=parentQuery2;
        childQuery2=new BooleanQuery.Builder().add(childQuery2,Occur.MUST).add(new TermQuery(childTerm),Occur.FILTER).build();
      }
 else {
        final BooleanQuery.Builder bq2=new BooleanQuery.Builder();
        if (random().nextBoolean()) {
          bq2.add(parentQuery2,BooleanClause.Occur.MUST);
          bq2.add(new TermQuery(childTerm),BooleanClause.Occur.MUST);
        }
 else {
          bq2.add(new TermQuery(childTerm),BooleanClause.Occur.MUST);
          bq2.add(parentQuery2,BooleanClause.Occur.MUST);
        }
        childQuery2=bq2.build();
      }
    }
    final Sort childSort2=getRandomSort("child",childFields.length);
    if (VERBOSE) {
      System.out.println("TEST: run top down query=" + childQuery2 + " sort="+ childSort2);
    }
    final TopDocs results2=s.search(childQuery2,r.numDocs(),childSort2);
    if (VERBOSE) {
      System.out.println("  " + results2.totalHits + " totalHits:");
      for (      ScoreDoc sd : results2.scoreDocs) {
        final StoredDocument doc=s.doc(sd.doc);
        System.out.println("  childID=" + doc.get("childID") + " parentID="+ doc.get("parentID")+ " docID="+ sd.doc);
      }
    }
    if (VERBOSE) {
      System.out.println("TEST: run top down join query=" + childJoinQuery2 + " sort="+ childSort2);
    }
    TopDocs joinResults2=joinS.search(childJoinQuery2,joinR.numDocs(),childSort2);
    if (VERBOSE) {
      System.out.println("  " + joinResults2.totalHits + " totalHits:");
      for (      ScoreDoc sd : joinResults2.scoreDocs) {
        final StoredDocument doc=joinS.doc(sd.doc);
        final StoredDocument parentDoc=getParentDoc(joinR,parentsFilter,sd.doc);
        System.out.println("  childID=" + doc.get("childID") + " parentID="+ parentDoc.get("parentID")+ " docID="+ sd.doc);
      }
    }
    compareChildHits(r,joinR,results2,joinResults2);
  }
  r.close();
  joinR.close();
  dir.close();
  joinDir.close();
}
