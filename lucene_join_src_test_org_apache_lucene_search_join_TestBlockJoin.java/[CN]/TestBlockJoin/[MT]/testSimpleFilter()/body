{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final List<Document> docs=new ArrayList<>();
  docs.add(makeJob("java",2007));
  docs.add(makeJob("python",2010));
  Collections.shuffle(docs,random());
  docs.add(makeResume("Lisa","United Kingdom"));
  final List<Document> docs2=new ArrayList<>();
  docs2.add(makeJob("ruby",2005));
  docs2.add(makeJob("java",2006));
  Collections.shuffle(docs2,random());
  docs2.add(makeResume("Frank","United States"));
  addSkillless(w);
  boolean turn=random().nextBoolean();
  w.addDocuments(turn ? docs : docs2);
  addSkillless(w);
  w.addDocuments(!turn ? docs : docs2);
  addSkillless(w);
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r);
  BitDocIdSetFilter parentsFilter=new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType","resume"))));
  BooleanQuery.Builder childQuery=new BooleanQuery.Builder();
  childQuery.add(new BooleanClause(new TermQuery(new Term("skill","java")),Occur.MUST));
  childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange("year",2006,2011,true,true),Occur.MUST));
  Query parentQuery=new TermQuery(new Term("country","United Kingdom"));
  ToParentBlockJoinQuery childJoinQuery=new ToParentBlockJoinQuery(childQuery.build(),parentsFilter,ScoreMode.Avg);
  assertEquals("no filter - both passed",2,s.search(childJoinQuery,10).totalHits);
  assertEquals("dummy filter passes everyone ",2,s.search(new FilteredQuery(childJoinQuery,parentsFilter),10).totalHits);
  assertEquals("dummy filter passes everyone ",2,s.search(new FilteredQuery(childJoinQuery,new QueryWrapperFilter(new TermQuery(new Term("docType","resume")))),10).totalHits);
  assertEquals("noone live there",0,s.search(new FilteredQuery(childJoinQuery,new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("country","Oz"))))),1).totalHits);
  assertEquals("noone live there",0,s.search(new FilteredQuery(childJoinQuery,new QueryWrapperFilter(new TermQuery(new Term("country","Oz")))),1).totalHits);
  TopDocs ukOnly=s.search(new FilteredQuery(childJoinQuery,new QueryWrapperFilter(parentQuery)),1);
  assertEquals("has filter - single passed",1,ukOnly.totalHits);
  assertEquals("Lisa",r.document(ukOnly.scoreDocs[0].doc).get("name"));
  TopDocs usThen=s.search(new FilteredQuery(childJoinQuery,new QueryWrapperFilter(new TermQuery(new Term("country","United States")))),1);
  assertEquals("has filter - single passed",1,usThen.totalHits);
  assertEquals("Frank",r.document(usThen.scoreDocs[0].doc).get("name"));
  TermQuery us=new TermQuery(new Term("country","United States"));
  assertEquals("@ US we have java and ruby",2,s.search(new ToChildBlockJoinQuery(us,parentsFilter),10).totalHits);
  assertEquals("java skills in US",1,s.search(new FilteredQuery(new ToChildBlockJoinQuery(us,parentsFilter),skill("java")),10).totalHits);
  BooleanQuery.Builder rubyPython=new BooleanQuery.Builder();
  rubyPython.add(new TermQuery(new Term("skill","ruby")),Occur.SHOULD);
  rubyPython.add(new TermQuery(new Term("skill","python")),Occur.SHOULD);
  assertEquals("ruby skills in US",1,s.search(new FilteredQuery(new ToChildBlockJoinQuery(us,parentsFilter),new QueryWrapperFilter(rubyPython.build())),10).totalHits);
  r.close();
  dir.close();
}
