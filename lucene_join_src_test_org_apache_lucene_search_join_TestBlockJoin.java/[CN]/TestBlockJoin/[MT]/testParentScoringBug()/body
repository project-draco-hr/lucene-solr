{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final List<Document> docs=new ArrayList<>();
  docs.add(makeJob("java",2007));
  docs.add(makeJob("python",2010));
  docs.add(makeResume("Lisa","United Kingdom"));
  w.addDocuments(docs);
  docs.clear();
  docs.add(makeJob("java",2006));
  docs.add(makeJob("ruby",2005));
  docs.add(makeResume("Frank","United States"));
  w.addDocuments(docs);
  w.deleteDocuments(new Term("skill","java"));
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r,false);
  BitSetProducer parentsFilter=new QueryBitSetProducer(new TermQuery(new Term("docType","resume")));
  Query parentQuery=new PrefixQuery(new Term("country","United"));
  ToChildBlockJoinQuery toChildQuery=new ToChildBlockJoinQuery(parentQuery,parentsFilter);
  TopDocs hits=s.search(toChildQuery,10);
  assertEquals(hits.scoreDocs.length,2);
  for (int i=0; i < hits.scoreDocs.length; i++) {
    if (hits.scoreDocs[i].score == 0.0)     fail("Failed to calculate score for hit #" + i);
  }
  r.close();
  dir.close();
}
