{
  final Directory dir=newDirectory();
  final IndexWriterConfig config=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  final IndexWriter w=new IndexWriter(dir,config);
  final List<Document> docs=new ArrayList<Document>();
  docs.add(makeJob("java",2007));
  docs.add(makeJob("python",2010));
  docs.add(makeResume("Lisa","United Kingdom"));
  w.addDocuments(docs);
  docs.clear();
  docs.add(makeJob("ruby",2005));
  docs.add(makeJob("java",2006));
  docs.add(makeResume("Frank","United States"));
  w.addDocuments(docs);
  w.commit();
  int num=atLeast(10);
  for (int i=0; i < num; i++) {
    docs.clear();
    docs.add(makeJob("java",2007));
    w.addDocuments(docs);
  }
  IndexReader r=DirectoryReader.open(w,random().nextBoolean());
  w.close();
  assertTrue(r.leaves().size() > 1);
  IndexSearcher s=new IndexSearcher(r);
  Filter parentsFilter=new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType","resume"))));
  BooleanQuery childQuery=new BooleanQuery();
  childQuery.add(new BooleanClause(new TermQuery(new Term("skill","java")),Occur.MUST));
  childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange("year",2006,2011,true,true),Occur.MUST));
  ToParentBlockJoinQuery childJoinQuery=new ToParentBlockJoinQuery(childQuery,parentsFilter,ScoreMode.Avg);
  BooleanQuery fullQuery=new BooleanQuery();
  fullQuery.add(new BooleanClause(childJoinQuery,Occur.MUST));
  fullQuery.add(new BooleanClause(new MatchAllDocsQuery(),Occur.MUST));
  ToParentBlockJoinCollector c=new ToParentBlockJoinCollector(Sort.RELEVANCE,1,true,true);
  s.search(fullQuery,c);
  TopGroups<Integer> results=c.getTopGroups(childJoinQuery,null,0,10,0,true);
  assertFalse(Float.isNaN(results.maxScore));
  assertEquals(1,results.totalGroupedHitCount);
  assertEquals(1,results.groups.length);
  final GroupDocs<Integer> group=results.groups[0];
  StoredDocument childDoc=s.doc(group.scoreDocs[0].doc);
  assertEquals("java",childDoc.get("skill"));
  assertNotNull(group.groupValue);
  StoredDocument parentDoc=s.doc(group.groupValue);
  assertEquals("Lisa",parentDoc.get("name"));
  r.close();
  dir.close();
}
