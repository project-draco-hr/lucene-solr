{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final List<Document> docs=new ArrayList<>();
  docs.add(makeJob("ruby",2005));
  docs.add(makeJob("java",2006));
  docs.add(makeJob("java",2010));
  docs.add(makeJob("java",2012));
  Collections.shuffle(docs,random());
  docs.add(makeResume("Frank","United States"));
  addSkillless(w);
  w.addDocuments(docs);
  addSkillless(w);
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=new IndexSearcher(r);
  BitDocIdSetFilter parentsFilter=new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType","resume"))));
  BooleanQuery.Builder childQuery=new BooleanQuery.Builder();
  childQuery.add(new BooleanClause(new TermQuery(new Term("skill","java")),Occur.MUST));
  childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange("year",2006,2011,true,true),Occur.MUST));
  ToParentBlockJoinQuery childJoinQuery=new ToParentBlockJoinQuery(childQuery.build(),parentsFilter,ScoreMode.Avg);
  ToParentBlockJoinCollector c=new ToParentBlockJoinCollector(Sort.RELEVANCE,2,true,true);
  s.search(childJoinQuery,c);
  @SuppressWarnings({"unchecked"}) TopGroups<Integer>[] getTopGroupsResults=new TopGroups[2];
  getTopGroupsResults[0]=c.getTopGroups(childJoinQuery,null,0,10,0,true);
  getTopGroupsResults[1]=c.getTopGroupsWithAllChildDocs(childJoinQuery,null,0,0,true);
  for (  TopGroups<Integer> results : getTopGroupsResults) {
    assertFalse(Float.isNaN(results.maxScore));
    assertEquals(2,results.totalGroupedHitCount);
    assertEquals(1,results.groups.length);
    final GroupDocs<Integer> group=results.groups[0];
    assertEquals(2,group.totalHits);
    assertFalse(Float.isNaN(group.score));
    assertNotNull(group.groupValue);
    StoredDocument parentDoc=s.doc(group.groupValue);
    assertEquals("Frank",parentDoc.get("name"));
    assertEquals(2,group.scoreDocs.length);
    for (    ScoreDoc scoreDoc : group.scoreDocs) {
      StoredDocument childDoc=s.doc(scoreDoc.doc);
      assertEquals("java",childDoc.get("skill"));
      int year=Integer.parseInt(childDoc.get("year"));
      assertTrue(year >= 2006 && year <= 2011);
    }
  }
  TopGroups<Integer> boundedResults=c.getTopGroups(childJoinQuery,null,0,1,0,true);
  assertFalse(Float.isNaN(boundedResults.maxScore));
  assertEquals(2,boundedResults.totalGroupedHitCount);
  assertEquals(1,boundedResults.groups.length);
  final GroupDocs<Integer> group=boundedResults.groups[0];
  assertEquals(2,group.totalHits);
  assertFalse(Float.isNaN(group.score));
  assertNotNull(group.groupValue);
  StoredDocument parentDoc=s.doc(group.groupValue);
  assertEquals("Frank",parentDoc.get("name"));
  assertEquals(1,group.scoreDocs.length);
  for (  ScoreDoc scoreDoc : group.scoreDocs) {
    StoredDocument childDoc=s.doc(scoreDoc.doc);
    assertEquals("java",childDoc.get("skill"));
    int year=Integer.parseInt(childDoc.get("year"));
    assertTrue(year >= 2006 && year <= 2011);
  }
  r.close();
  dir.close();
}
