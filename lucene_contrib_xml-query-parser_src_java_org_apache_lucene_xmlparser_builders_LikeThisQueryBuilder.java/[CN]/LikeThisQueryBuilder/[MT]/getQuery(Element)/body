{
  String fieldsList=e.getAttribute("fieldNames");
  String fields[]=defaultFieldNames;
  if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {
    fields=fieldsList.trim().split(",");
    for (int i=0; i < fields.length; i++) {
      fields[i]=fields[i].trim();
    }
  }
  String stopWords=e.getAttribute("stopWords");
  Set<String> stopWordsSet=null;
  if ((stopWords != null) && (fields != null)) {
    stopWordsSet=new HashSet<String>();
    for (    String field : fields) {
      try {
        TokenStream ts=analyzer.reusableTokenStream(field,new StringReader(stopWords));
        CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        while (ts.incrementToken()) {
          stopWordsSet.add(termAtt.toString());
        }
        ts.end();
        ts.close();
      }
 catch (      IOException ioe) {
        throw new ParserException("IoException parsing stop words list in " + getClass().getName() + ":"+ ioe.getLocalizedMessage());
      }
    }
  }
  MoreLikeThisQuery mlt=new MoreLikeThisQuery(DOMUtils.getText(e),fields,analyzer,fields[0]);
  mlt.setMaxQueryTerms(DOMUtils.getAttribute(e,"maxQueryTerms",DEFAULT_MAX_QUERY_TERMS));
  mlt.setMinTermFrequency(DOMUtils.getAttribute(e,"minTermFrequency",DEFAULT_MIN_TERM_FREQUENCY));
  mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e,"percentTermsToMatch",DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);
  mlt.setStopWords(stopWordsSet);
  int minDocFreq=DOMUtils.getAttribute(e,"minDocFreq",-1);
  if (minDocFreq >= 0) {
    mlt.setMinDocFreq(minDocFreq);
  }
  mlt.setBoost(DOMUtils.getAttribute(e,"boost",1.0f));
  return mlt;
}
