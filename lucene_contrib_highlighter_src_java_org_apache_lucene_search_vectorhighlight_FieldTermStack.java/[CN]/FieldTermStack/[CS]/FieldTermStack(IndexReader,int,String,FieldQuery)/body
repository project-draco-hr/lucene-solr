{
  this.fieldName=fieldName;
  Set<String> termSet=fieldQuery.getTermSet(fieldName);
  if (termSet == null)   return;
  final Fields vectors=reader.getTermVectors(docId);
  if (vectors == null) {
    return;
  }
  final Terms vector=vectors.terms(fieldName);
  if (vector == null) {
    return;
  }
  final CharsRef spare=new CharsRef();
  final TermsEnum termsEnum=vector.iterator(null);
  DocsAndPositionsEnum dpEnum=null;
  BytesRef text;
  while ((text=termsEnum.next()) != null) {
    final String term=text.utf8ToChars(spare).toString();
    if (!termSet.contains(term)) {
      continue;
    }
    dpEnum=termsEnum.docsAndPositions(null,dpEnum);
    if (dpEnum == null) {
      return;
    }
    if (!dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {
      return;
    }
    dpEnum.nextDoc();
    final OffsetAttribute offsetAtt=dpEnum.attributes().getAttribute(OffsetAttribute.class);
    final int freq=dpEnum.freq();
    for (int i=0; i < freq; i++) {
      final int pos=dpEnum.nextPosition();
      if (pos == -1) {
        return;
      }
      termList.add(new TermInfo(term,offsetAtt.startOffset(),offsetAtt.endOffset(),pos));
    }
  }
  Collections.sort(termList);
}
