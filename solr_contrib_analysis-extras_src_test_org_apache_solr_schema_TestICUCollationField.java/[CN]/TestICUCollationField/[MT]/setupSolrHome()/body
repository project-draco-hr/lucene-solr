{
  String tmpFile=createTempDir().toFile().getAbsolutePath();
  new File(tmpFile + "/collection1","data").mkdirs();
  File confDir=new File(tmpFile + "/collection1","conf");
  confDir.mkdirs();
  FileUtils.copyFile(getFile("analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml"),new File(confDir,"solrconfig.xml"));
  FileUtils.copyFile(getFile("analysis-extras/solr/collection1/conf/schema-icucollate.xml"),new File(confDir,"schema.xml"));
  RuleBasedCollator baseCollator=(RuleBasedCollator)Collator.getInstance(new ULocale("de","DE"));
  String DIN5007_2_tailorings="& ae , a\u0308 & AE , A\u0308" + "& oe , o\u0308 & OE , O\u0308" + "& ue , u\u0308 & UE , u\u0308";
  RuleBasedCollator tailoredCollator=new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);
  String tailoredRules=tailoredCollator.getRules();
  final String osFileName="customrules.dat";
  final FileOutputStream os=new FileOutputStream(new File(confDir,osFileName));
  IOUtils.write(tailoredRules,os,"UTF-8");
  os.close();
  final ResourceLoader loader;
  if (random().nextBoolean()) {
    loader=new StringMockResourceLoader(tailoredRules);
  }
 else {
    loader=new FilesystemResourceLoader(confDir.toPath());
  }
  final Collator readCollator=ICUCollationField.createFromRules(osFileName,loader);
  assertEquals(tailoredCollator,readCollator);
  return tmpFile;
}
