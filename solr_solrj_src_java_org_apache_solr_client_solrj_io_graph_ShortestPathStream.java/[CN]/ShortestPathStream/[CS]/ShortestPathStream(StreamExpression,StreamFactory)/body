{
  String collectionName=factory.getValueOperand(expression,0);
  List<StreamExpressionNamedParameter> namedParams=factory.getNamedOperands(expression);
  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");
  if (null == collectionName) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));
  }
  String fromNode=null;
  StreamExpressionNamedParameter fromExpression=factory.getNamedOperand(expression,"from");
  if (fromExpression == null) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - from param is required",expression));
  }
 else {
    fromNode=((StreamExpressionValue)fromExpression.getParameter()).getValue();
  }
  String toNode=null;
  StreamExpressionNamedParameter toExpression=factory.getNamedOperand(expression,"to");
  if (toExpression == null) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - to param is required",expression));
  }
 else {
    toNode=((StreamExpressionValue)toExpression.getParameter()).getValue();
  }
  String fromField=null;
  String toField=null;
  StreamExpressionNamedParameter edgeExpression=factory.getNamedOperand(expression,"edge");
  if (edgeExpression == null) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - edge param is required",expression));
  }
 else {
    String edge=((StreamExpressionValue)edgeExpression.getParameter()).getValue();
    String[] fields=edge.split("=");
    if (fields.length != 2) {
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - edge param separated by and = and must contain two fields",expression));
    }
    fromField=fields[0].trim();
    toField=fields[1].trim();
  }
  int threads=6;
  StreamExpressionNamedParameter threadsExpression=factory.getNamedOperand(expression,"threads");
  if (threadsExpression != null) {
    threads=Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());
  }
  int partitionSize=250;
  StreamExpressionNamedParameter partitionExpression=factory.getNamedOperand(expression,"partitionSize");
  if (partitionExpression != null) {
    partitionSize=Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());
  }
  int maxDepth=0;
  StreamExpressionNamedParameter depthExpression=factory.getNamedOperand(expression,"maxDepth");
  if (depthExpression == null) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - maxDepth param is required",expression));
  }
 else {
    maxDepth=Integer.parseInt(((StreamExpressionValue)depthExpression.getParameter()).getValue());
  }
  Map<String,String> params=new HashMap<String,String>();
  for (  StreamExpressionNamedParameter namedParam : namedParams) {
    if (!namedParam.getName().equals("zkHost") && !namedParam.getName().equals("to") && !namedParam.getName().equals("from")&& !namedParam.getName().equals("edge")&& !namedParam.getName().equals("maxDepth")&& !namedParam.getName().equals("threads")&& !namedParam.getName().equals("partitionSize")) {
      params.put(namedParam.getName(),namedParam.getParameter().toString().trim());
    }
  }
  String zkHost=null;
  if (null == zkHostExpression) {
    zkHost=factory.getCollectionZkHost(collectionName);
    if (zkHost == null) {
      zkHost=factory.getDefaultZkHost();
    }
  }
 else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {
    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
  }
  if (null == zkHost) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
  }
  init(zkHost,collectionName,fromNode,toNode,fromField,toField,params,partitionSize,threads,maxDepth);
}
