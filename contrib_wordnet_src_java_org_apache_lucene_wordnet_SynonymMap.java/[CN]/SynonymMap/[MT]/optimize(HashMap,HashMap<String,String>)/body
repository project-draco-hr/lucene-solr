{
  if (DEBUG) {
    System.err.println("before gc");
    for (int i=0; i < 10; i++)     System.gc();
    System.err.println("after gc");
  }
  int len=0;
  int size=word2Syns.size();
  String[][] allSynonyms=new String[size][];
  String[] words=new String[size];
  Iterator<Map.Entry<String,String[]>> iter=word2Syns.entrySet().iterator();
  for (int j=0; j < size; j++) {
    Map.Entry<String,String[]> entry=iter.next();
    allSynonyms[j]=entry.getValue();
    words[j]=entry.getKey();
    len+=words[j].length();
  }
  StringBuilder buf=new StringBuilder(len);
  for (int j=0; j < size; j++)   buf.append(words[j]);
  String allWords=new String(buf.toString());
  buf=null;
  for (int p=0, j=0; j < size; j++) {
    String word=words[j];
    internedWords.put(word,allWords.substring(p,p + word.length()));
    p+=word.length();
  }
  for (int j=0; j < size; j++) {
    String[] syns=allSynonyms[j];
    for (int k=syns.length; --k >= 0; ) {
      syns[k]=internedWords.get(syns[k]);
    }
    Object replacement=syns;
    if (syns.length == 1)     replacement=syns[0];
    word2Syns.remove(words[j]);
    word2Syns.put(internedWords.get(words[j]),replacement);
  }
  if (DEBUG) {
    words=null;
    allSynonyms=null;
    internedWords=null;
    allWords=null;
    System.err.println("before gc");
    for (int i=0; i < 10; i++)     System.gc();
    System.err.println("after gc");
  }
  return word2Syns;
}
