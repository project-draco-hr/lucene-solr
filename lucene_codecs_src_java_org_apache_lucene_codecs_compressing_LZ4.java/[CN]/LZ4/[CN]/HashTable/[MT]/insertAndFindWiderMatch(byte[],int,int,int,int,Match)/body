{
  match.len=minLen;
  insert(off,buf);
  final int delta=off - startLimit;
  int ref=hashPointer(buf,off);
  for (int i=0; i < MAX_ATTEMPTS; ++i) {
    if (ref < Math.max(base,off - MAX_DISTANCE + 1)) {
      break;
    }
    if (buf[ref - delta + match.len] == buf[startLimit + match.len] && readIntEquals(buf,ref,off)) {
      final int matchLenForward=MIN_MATCH + commonBytes(buf,ref + MIN_MATCH,off + MIN_MATCH,matchLimit);
      final int matchLenBackward=commonBytesBackward(buf,ref,off,base,startLimit);
      final int matchLen=matchLenBackward + matchLenForward;
      if (matchLen > match.len) {
        match.len=matchLen;
        match.ref=ref - matchLenBackward;
        match.start=off - matchLenBackward;
      }
    }
    ref=next(ref);
  }
  return match.len > minLen;
}
