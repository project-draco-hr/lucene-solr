{
  String outputDirName="lucene.backwardscompat0.index";
  File outputDir=TestUtil.createTempDir(outputDirName);
  TestUtil.rm(outputDir);
  try {
    Directory dir=newFSDirectory(outputDir);
    MergePolicy mergePolicy=newLogMergePolicy(true,10);
    mergePolicy.setNoCFSRatio(1.0);
    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMaxBufferedDocs(-1).setRAMBufferSizeMB(16.0).setMergePolicy(mergePolicy).setUseCompoundFile(true));
    for (int i=0; i < 35; i++) {
      addDoc(writer,i);
    }
    assertEquals("wrong doc count",35,writer.maxDoc());
    writer.close();
    writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setUseCompoundFile(true));
    Term searchTerm=new Term("id","7");
    writer.deleteDocuments(searchTerm);
    writer.close();
    String[] expected=new String[]{"_0.cfs","_0.cfe","_0_1.del","_0.si","segments_2","segments.gen"};
    String[] expectedSimpleText=new String[]{"_0.cfs","_0.cfe","_0_1.liv","_0.si","segments_2","segments.gen"};
    String[] actual=dir.listAll();
    Arrays.sort(expected);
    Arrays.sort(expectedSimpleText);
    Arrays.sort(actual);
    if (!Arrays.equals(expected,actual) && !Arrays.equals(expectedSimpleText,actual)) {
      fail("incorrect filenames in index: expected:\n    " + asString(expected) + "\n or "+ asString(expectedSimpleText)+ "\n actual:\n    "+ asString(actual));
    }
    dir.close();
  }
  finally {
    TestUtil.rm(outputDir);
  }
}
