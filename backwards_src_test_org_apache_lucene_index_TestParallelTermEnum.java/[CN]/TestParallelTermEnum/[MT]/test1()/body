{
  ParallelReader pr=new ParallelReader();
  pr.add(ir1);
  pr.add(ir2);
  TermDocs td=pr.termDocs();
  TermEnum te=pr.terms();
  assertTrue(te.next());
  assertEquals("field1:brown",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field1:fox",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field1:jumps",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field1:quick",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field1:the",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field2:brown",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field2:fox",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field2:jumps",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field2:quick",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field2:the",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:dog",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:fox",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:jumps",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:lazy",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:over",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertTrue(te.next());
  assertEquals("field3:the",te.term().toString());
  td.seek(te.term());
  assertTrue(td.next());
  assertEquals(0,td.doc());
  assertFalse(td.next());
  assertFalse(te.next());
}
