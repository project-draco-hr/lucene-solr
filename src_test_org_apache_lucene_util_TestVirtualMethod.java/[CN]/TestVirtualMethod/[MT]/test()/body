{
  assertEquals(0,publicTestMethod.getImplementationDistance(this.getClass()));
  assertEquals(1,publicTestMethod.getImplementationDistance(TestClass1.class));
  assertEquals(1,publicTestMethod.getImplementationDistance(TestClass2.class));
  assertEquals(3,publicTestMethod.getImplementationDistance(TestClass3.class));
  assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));
  assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));
  assertEquals(0,protectedTestMethod.getImplementationDistance(this.getClass()));
  assertEquals(1,protectedTestMethod.getImplementationDistance(TestClass1.class));
  assertEquals(2,protectedTestMethod.getImplementationDistance(TestClass2.class));
  assertEquals(2,protectedTestMethod.getImplementationDistance(TestClass3.class));
  assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));
  assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));
  assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class,publicTestMethod,protectedTestMethod) > 0);
  assertEquals(0,VirtualMethod.compareImplementationDistance(TestClass5.class,publicTestMethod,protectedTestMethod));
  try {
    @SuppressWarnings("unchecked") int dist=publicTestMethod.getImplementationDistance((Class)LuceneTestCase.class);
    fail("LuceneTestCase is not a subclass and can never override publicTest(String)");
  }
 catch (  IllegalArgumentException arg) {
  }
  try {
    new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class,"bogus");
    fail("Method bogus() does not exist, so IAE should be thrown");
  }
 catch (  IllegalArgumentException arg) {
  }
  try {
    new VirtualMethod<TestClass2>(TestClass2.class,"publicTest",String.class);
    fail("Method publicTest(String) is not declared in TestClass2, so IAE should be thrown");
  }
 catch (  IllegalArgumentException arg) {
  }
  try {
    new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class,"publicTest",String.class);
    fail("Violating singleton status succeeded");
  }
 catch (  UnsupportedOperationException arg) {
  }
}
