{
  int[] numThreads=new int[]{4 + random().nextInt(8),1};
  final int numDocumentsToIndex=50 + random().nextInt(50);
  for (int i=0; i < numThreads.length; i++) {
    AtomicInteger numDocs=new AtomicInteger(numDocumentsToIndex);
    MockDirectoryWrapper dir=newMockDirectory();
    dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);
    IndexWriterConfig iwc=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);
    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);
    FlushPolicy flushPolicy=new FlushByRamOrCountsPolicy();
    iwc.setFlushPolicy(flushPolicy);
    DocumentsWriterPerThreadPool threadPool=new DocumentsWriterPerThreadPool(numThreads[i] == 1 ? 1 : 2);
    iwc.setIndexerThreadPool(threadPool);
    iwc.setRAMBufferSizeMB(0.25);
    IndexWriter writer=new IndexWriter(dir,iwc);
    IndexThread[] threads=new IndexThread[numThreads[i]];
    for (int x=0; x < threads.length; x++) {
      threads[x]=new IndexThread(numDocs,numThreads[i],writer,lineDocFile,false);
      threads[x].start();
    }
    for (int x=0; x < threads.length; x++) {
      threads[x].join();
    }
    DocumentsWriter docsWriter=writer.getDocsWriter();
    assertNotNull(docsWriter);
    DocumentsWriterFlushControl flushControl=docsWriter.flushControl;
    assertEquals(" all flushes must be due",0,flushControl.flushBytes());
    assertEquals(numDocumentsToIndex,writer.numDocs());
    assertEquals(numDocumentsToIndex,writer.maxDoc());
    if (numThreads[i] == 1) {
      assertFalse("single thread must not block numThreads: " + numThreads[i],docsWriter.flushControl.stallControl.hasBlocked());
    }
    if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d* 1024.d)) {
      assertTrue(docsWriter.flushControl.stallControl.wasStalled());
    }
    assertActiveBytesAfter(flushControl);
    writer.shutdown();
    dir.close();
  }
}
