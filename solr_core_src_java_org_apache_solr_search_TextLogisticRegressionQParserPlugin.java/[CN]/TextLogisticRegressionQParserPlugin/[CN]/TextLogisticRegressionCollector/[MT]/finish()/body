{
  Map<Integer,double[]> docVectors=new HashMap<>();
  Terms terms=MultiFields.getFields(searcher.getIndexReader()).terms(trainingParams.feature);
  TermsEnum termsEnum=terms.iterator();
  PostingsEnum postingsEnum=null;
  int termIndex=0;
  for (  String termStr : trainingParams.terms) {
    BytesRef term=new BytesRef(termStr);
    if (termsEnum.seekExact(term)) {
      postingsEnum=termsEnum.postings(postingsEnum);
      while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
        int docId=postingsEnum.docID();
        if (docsSet.get(docId)) {
          double[] vector=docVectors.get(docId);
          if (vector == null) {
            vector=new double[trainingParams.terms.length + 1];
            vector[0]=1.0;
            docVectors.put(docId,vector);
          }
          vector[termIndex + 1]=trainingParams.idfs[termIndex] * (1.0 + Math.log(postingsEnum.freq()));
        }
      }
    }
    termIndex++;
  }
  for (  Map.Entry<Integer,double[]> entry : docVectors.entrySet()) {
    double[] vector=entry.getValue();
    int outcome=0;
    if (positiveDocsSet.get(entry.getKey())) {
      outcome=1;
    }
    double sig=sigmoid(sum(multiply(vector,weights)));
    double error=sig - outcome;
    double lastSig=sigmoid(sum(multiply(vector,trainingParams.weights)));
    totalError+=Math.abs(lastSig - outcome);
    classificationEvaluation.count(outcome,lastSig >= trainingParams.threshold ? 1 : 0);
    workingDeltas=multiply(error * trainingParams.alpha,vector);
    for (int i=0; i < workingDeltas.length; i++) {
      weights[i]-=workingDeltas[i];
    }
  }
  NamedList analytics=new NamedList();
  rbsp.rsp.add("logit",analytics);
  List<Double> outWeights=new ArrayList<>();
  for (  Double d : weights) {
    outWeights.add(d);
  }
  analytics.add("weights",outWeights);
  analytics.add("error",totalError);
  analytics.add("evaluation",classificationEvaluation.toMap());
  analytics.add("feature",trainingParams.feature);
  analytics.add("positiveLabel",trainingParams.positiveLabel);
  if (this.delegate instanceof DelegatingCollector) {
    ((DelegatingCollector)this.delegate).finish();
  }
}
