{
  boolean success=false;
  try {
    MergeContext ctx=SortedBytesMergeUtils.init(Type.BYTES_VAR_SORTED,docValues,comp,mergeState.segmentInfo.getDocCount());
    final List<SortedSourceSlice> slices=SortedBytesMergeUtils.buildSlices(mergeState.docBase,mergeState.docMaps,docValues,ctx);
    IndexOutput datOut=getOrCreateDataOut();
    ctx.offsets=new long[1];
    final int maxOrd=SortedBytesMergeUtils.mergeRecords(ctx,new IndexOutputBytesRefConsumer(datOut),slices);
    final long[] offsets=ctx.offsets;
    maxBytes=offsets[maxOrd - 1];
    final IndexOutput idxOut=getOrCreateIndexOut();
    idxOut.writeLong(maxBytes);
    final PackedInts.Writer offsetWriter=PackedInts.getWriter(idxOut,maxOrd + 1,PackedInts.bitsRequired(maxBytes),PackedInts.DEFAULT);
    offsetWriter.add(0);
    for (int i=0; i < maxOrd; i++) {
      offsetWriter.add(offsets[i]);
    }
    offsetWriter.finish();
    final PackedInts.Writer ordsWriter=PackedInts.getWriter(idxOut,ctx.docToEntry.length,PackedInts.bitsRequired(maxOrd - 1),PackedInts.DEFAULT);
    for (    SortedSourceSlice slice : slices) {
      slice.writeOrds(ordsWriter);
    }
    ordsWriter.finish();
    success=true;
  }
  finally {
    releaseResources();
    if (success) {
      IOUtils.close(getIndexOut(),getDataOut());
    }
 else {
      IOUtils.closeWhileHandlingException(getIndexOut(),getDataOut());
    }
  }
}
