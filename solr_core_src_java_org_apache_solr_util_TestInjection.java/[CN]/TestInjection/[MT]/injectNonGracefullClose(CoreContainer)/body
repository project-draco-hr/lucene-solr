{
  if (cc.isShutDown() && nonGracefullClose != null) {
    Pair<Boolean,Integer> pair=parseValue(nonGracefullClose);
    boolean enabled=pair.first();
    int chanceIn100=pair.second();
    if (enabled && RANDOM.nextInt(100) >= (100 - chanceIn100)) {
      if (RANDOM.nextBoolean()) {
        throw new TestShutdownFailError("Test exception for non graceful close");
      }
 else {
        final Thread cthread=Thread.currentThread();
        TimerTask task=new TimerTask(){
          @Override public void run(){
            try {
              Thread.sleep(RANDOM.nextInt(1000));
            }
 catch (            InterruptedException e) {
            }
            cthread.interrupt();
            timers.remove(this);
            cancel();
          }
        }
;
        Timer timer=new Timer();
        timers.add(timer);
        timer.schedule(task,RANDOM.nextInt(500));
      }
    }
  }
  return true;
}
