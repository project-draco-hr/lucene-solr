{
  waitForThingsToLevelOut(15);
  int numCollectionCreates=0, numOverseerCreates=0;
  NamedList<Object> resp=invokeCollectionApi("action",CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());
  if (resp != null) {
    NamedList<Object> collection_operations=(NamedList<Object>)resp.get("collection_operations");
    if (collection_operations != null) {
      SimpleOrderedMap<Object> createcollection=(SimpleOrderedMap<Object>)collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());
      if (createcollection != null && createcollection.get("requests") != null) {
        numCollectionCreates=(Integer)createcollection.get("requests");
      }
      NamedList<Object> overseer_operations=(NamedList<Object>)resp.get("overseer_operations");
      if (overseer_operations != null) {
        createcollection=(SimpleOrderedMap<Object>)overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());
        if (createcollection != null && createcollection.get("requests") != null) {
          numOverseerCreates=(Integer)createcollection.get("requests");
        }
      }
    }
  }
  String collectionName="overseer_status_test";
  CollectionAdminResponse response=createCollection(collectionName,1,1,1);
  resp=invokeCollectionApi("action",CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());
  NamedList<Object> collection_operations=(NamedList<Object>)resp.get("collection_operations");
  NamedList<Object> overseer_operations=(NamedList<Object>)resp.get("overseer_operations");
  SimpleOrderedMap<Object> createcollection=(SimpleOrderedMap<Object>)collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());
  assertEquals("No stats for create in OverseerCollectionProcessor",numCollectionCreates + 1,createcollection.get("requests"));
  createcollection=(SimpleOrderedMap<Object>)overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());
  assertEquals("No stats for create in Overseer",numOverseerCreates + 1,createcollection.get("requests"));
  invokeCollectionApi("action",CollectionParams.CollectionAction.RELOAD.toLower(),"name",collectionName);
  resp=invokeCollectionApi("action",CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());
  collection_operations=(NamedList<Object>)resp.get("collection_operations");
  SimpleOrderedMap<Object> reload=(SimpleOrderedMap<Object>)collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());
  assertEquals("No stats for reload in OverseerCollectionProcessor",1,reload.get("requests"));
  try {
    invokeCollectionApi("action",CollectionParams.CollectionAction.SPLITSHARD.toLower(),"collection","non_existent_collection","shard","non_existent_shard");
  }
 catch (  Exception e) {
  }
  resp=invokeCollectionApi("action",CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());
  collection_operations=(NamedList<Object>)resp.get("collection_operations");
  SimpleOrderedMap<Object> split=(SimpleOrderedMap<Object>)collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());
  assertEquals("No stats for split in OverseerCollectionProcessor",1,split.get("errors"));
  assertNotNull(split.get("recent_failures"));
  SimpleOrderedMap<Object> amIleader=(SimpleOrderedMap<Object>)collection_operations.get("am_i_leader");
  assertNotNull("OverseerCollectionProcessor amILeader stats should not be null",amIleader);
  assertNotNull(amIleader.get("requests"));
  assertTrue(Integer.parseInt(amIleader.get("requests").toString()) > 0);
  assertNotNull(amIleader.get("errors"));
  assertNotNull(amIleader.get("avgTimePerRequest"));
  amIleader=(SimpleOrderedMap<Object>)overseer_operations.get("am_i_leader");
  assertNotNull("Overseer amILeader stats should not be null",amIleader);
  assertNotNull(amIleader.get("requests"));
  assertTrue(Integer.parseInt(amIleader.get("requests").toString()) > 0);
  assertNotNull(amIleader.get("errors"));
  assertNotNull(amIleader.get("avgTimePerRequest"));
  SimpleOrderedMap<Object> updateState=(SimpleOrderedMap<Object>)overseer_operations.get("update_state");
  assertNotNull("Overseer update_state stats should not be null",updateState);
  assertNotNull(updateState.get("requests"));
  assertTrue(Integer.parseInt(updateState.get("requests").toString()) > 0);
  assertNotNull(updateState.get("errors"));
  assertNotNull(updateState.get("avgTimePerRequest"));
  waitForThingsToLevelOut(15);
}
