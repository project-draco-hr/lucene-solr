{
  super(similarity);
  this.minNrShouldMatch=minNrShouldMatch;
  if (optionalScorers != null && optionalScorers.size() > 0) {
    for (Iterator si=optionalScorers.iterator(); si.hasNext(); ) {
      Scorer scorer=(Scorer)si.next();
      maxCoord++;
      if (scorer.nextDoc() != NO_MORE_DOCS) {
        scorers=new SubScorer(scorer,false,false,bucketTable.newCollector(0),scorers);
      }
    }
  }
  if (prohibitedScorers != null && prohibitedScorers.size() > 0) {
    for (Iterator si=prohibitedScorers.iterator(); si.hasNext(); ) {
      Scorer scorer=(Scorer)si.next();
      int mask=nextMask;
      nextMask=nextMask << 1;
      prohibitedMask|=mask;
      if (scorer.nextDoc() != NO_MORE_DOCS) {
        scorers=new SubScorer(scorer,false,true,bucketTable.newCollector(mask),scorers);
      }
    }
  }
  coordFactors=new float[maxCoord];
  Similarity sim=getSimilarity();
  for (int i=0; i < maxCoord; i++) {
    coordFactors[i]=sim.coord(i,maxCoord - 1);
  }
}
