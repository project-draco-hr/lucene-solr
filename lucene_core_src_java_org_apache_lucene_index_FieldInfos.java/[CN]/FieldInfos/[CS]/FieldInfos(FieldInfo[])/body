{
  boolean hasVectors=false;
  boolean hasProx=false;
  boolean hasPayloads=false;
  boolean hasOffsets=false;
  boolean hasFreq=false;
  boolean hasNorms=false;
  boolean hasDocValues=false;
  boolean hasDimensionalValues=false;
  TreeMap<Integer,FieldInfo> byNumber=new TreeMap<>();
  for (  FieldInfo info : infos) {
    if (info.number < 0) {
      throw new IllegalArgumentException("illegal field number: " + info.number + " for field "+ info.name);
    }
    FieldInfo previous=byNumber.put(info.number,info);
    if (previous != null) {
      throw new IllegalArgumentException("duplicate field numbers: " + previous.name + " and "+ info.name+ " have: "+ info.number);
    }
    previous=byName.put(info.name,info);
    if (previous != null) {
      throw new IllegalArgumentException("duplicate field names: " + previous.number + " and "+ info.number+ " have: "+ info.name);
    }
    hasVectors|=info.hasVectors();
    hasProx|=info.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
    hasFreq|=info.getIndexOptions() != IndexOptions.DOCS;
    hasOffsets|=info.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
    hasNorms|=info.hasNorms();
    hasDocValues|=info.getDocValuesType() != DocValuesType.NONE;
    hasPayloads|=info.hasPayloads();
    hasDimensionalValues|=info.getDimensionCount() != 0;
  }
  this.hasVectors=hasVectors;
  this.hasProx=hasProx;
  this.hasPayloads=hasPayloads;
  this.hasOffsets=hasOffsets;
  this.hasFreq=hasFreq;
  this.hasNorms=hasNorms;
  this.hasDocValues=hasDocValues;
  this.hasDimensionalValues=hasDimensionalValues;
  this.values=Collections.unmodifiableCollection(byNumber.values());
  Integer max=byNumber.isEmpty() ? null : Collections.max(byNumber.keySet());
  if (max != null && max < ArrayUtil.MAX_ARRAY_LENGTH && max < 16L * byNumber.size()) {
    byNumberMap=null;
    byNumberTable=new FieldInfo[max + 1];
    for (    Map.Entry<Integer,FieldInfo> entry : byNumber.entrySet()) {
      byNumberTable[entry.getKey()]=entry.getValue();
    }
  }
 else {
    byNumberMap=byNumber;
    byNumberTable=null;
  }
}
