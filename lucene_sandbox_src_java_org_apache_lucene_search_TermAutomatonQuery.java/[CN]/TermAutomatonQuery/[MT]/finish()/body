{
  Automaton automaton=builder.finish();
  Transition t=new Transition();
  if (anyTermID != -1) {
    int count=automaton.initTransition(0,t);
    for (int i=0; i < count; i++) {
      automaton.getNextTransition(t);
      if (anyTermID >= t.min && anyTermID <= t.max) {
        throw new IllegalStateException("automaton cannot lead with an ANY transition");
      }
    }
    int numStates=automaton.getNumStates();
    for (int i=0; i < numStates; i++) {
      count=automaton.initTransition(i,t);
      for (int j=0; j < count; j++) {
        automaton.getNextTransition(t);
        if (automaton.isAccept(t.dest) && anyTermID >= t.min && anyTermID <= t.max) {
          throw new IllegalStateException("automaton cannot end with an ANY transition");
        }
      }
    }
    int termCount=termToID.size();
    Automaton newAutomaton=new Automaton();
    for (int i=0; i < numStates; i++) {
      newAutomaton.createState();
      newAutomaton.setAccept(i,automaton.isAccept(i));
    }
    for (int i=0; i < numStates; i++) {
      count=automaton.initTransition(i,t);
      for (int j=0; j < count; j++) {
        automaton.getNextTransition(t);
        int min, max;
        if (t.min <= anyTermID && anyTermID <= t.max) {
          min=0;
          max=termCount - 1;
        }
 else {
          min=t.min;
          max=t.max;
        }
        newAutomaton.addTransition(t.source,t.dest,min,max);
      }
    }
    newAutomaton.finishState();
    automaton=newAutomaton;
  }
  det=Operations.removeDeadStates(Operations.determinize(automaton));
}
