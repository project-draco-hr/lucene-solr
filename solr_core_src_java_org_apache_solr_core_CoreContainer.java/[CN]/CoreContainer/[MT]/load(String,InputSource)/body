{
  ThreadPoolExecutor coreLoadExecutor=null;
  if (null == dir) {
    dir=SolrResourceLoader.locateSolrHome();
  }
  log.info("Loading CoreContainer using Solr Home: '{}'",dir);
  this.loader=new SolrResourceLoader(dir);
  solrHome=loader.getInstanceDir();
  Config cfg;
  try {
    cfg=new Config(loader,null,cfgis,null,false);
    this.cfg=new Config(loader,null,copyDoc(cfg.getDocument()));
  }
 catch (  Exception e) {
    throw new SolrException(ErrorCode.SERVER_ERROR,"",e);
  }
  cfg.substituteProperties();
  initShardHandler(cfg);
  allocateLazyCores(cfg);
  if (cfg.getBool("solr/logging/@enabled",true)) {
    String slf4jImpl=null;
    String fname=cfg.get("solr/logging/watcher/@class",null);
    try {
      slf4jImpl=StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();
      if (fname == null) {
        if (slf4jImpl.indexOf("Log4j") > 0) {
          log.warn("Log watching is not yet implemented for log4j");
        }
 else         if (slf4jImpl.indexOf("JDK") > 0) {
          fname="JUL";
        }
      }
    }
 catch (    Throwable ex) {
      log.warn("Unable to read SLF4J version.  LogWatcher will be disabled: " + ex);
    }
    if (fname != null) {
      if ("JUL".equalsIgnoreCase(fname)) {
        logging=new JulWatcher(slf4jImpl);
      }
 else {
        try {
          logging=loader.newInstance(fname,LogWatcher.class);
        }
 catch (        Throwable e) {
          log.warn("Unable to load LogWatcher",e);
        }
      }
      if (logging != null) {
        ListenerConfig v=new ListenerConfig();
        v.size=cfg.getInt("solr/logging/watcher/@size",50);
        v.threshold=cfg.get("solr/logging/watcher/@threshold",null);
        if (v.size > 0) {
          log.info("Registering Log Listener");
          logging.registerListener(v,this);
        }
      }
    }
  }
  String dcoreName=cfg.get("solr/cores/@defaultCoreName",null);
  if (dcoreName != null && !dcoreName.isEmpty()) {
    defaultCoreName=dcoreName;
  }
  persistent=cfg.getBool("solr/@persistent",false);
  libDir=cfg.get("solr/@sharedLib",null);
  zkHost=cfg.get("solr/@zkHost",null);
  coreLoadThreads=cfg.getInt("solr/@coreLoadThreads",CORE_LOAD_THREADS);
  adminPath=cfg.get("solr/cores/@adminPath",null);
  shareSchema=cfg.getBool("solr/cores/@shareSchema",DEFAULT_SHARE_SCHEMA);
  zkClientTimeout=cfg.getInt("solr/cores/@zkClientTimeout",DEFAULT_ZK_CLIENT_TIMEOUT);
  distribUpdateConnTimeout=cfg.getInt("solr/cores/@distribUpdateConnTimeout",0);
  distribUpdateSoTimeout=cfg.getInt("solr/cores/@distribUpdateSoTimeout",0);
  hostPort=cfg.get("solr/cores/@hostPort",DEFAULT_HOST_PORT);
  hostContext=cfg.get("solr/cores/@hostContext",DEFAULT_HOST_CONTEXT);
  host=cfg.get("solr/cores/@host",null);
  leaderVoteWait=cfg.get("solr/cores/@leaderVoteWait",LEADER_VOTE_WAIT);
  if (shareSchema) {
    indexSchemaCache=new ConcurrentHashMap<String,IndexSchema>();
  }
  adminHandler=cfg.get("solr/cores/@adminHandler",null);
  managementPath=cfg.get("solr/cores/@managementPath",null);
  zkClientTimeout=Integer.parseInt(System.getProperty("zkClientTimeout",Integer.toString(zkClientTimeout)));
  initZooKeeper(zkHost,zkClientTimeout);
  if (isZooKeeperAware() && coreLoadThreads <= 1) {
    throw new SolrException(ErrorCode.SERVER_ERROR,"SolrCloud requires a value of at least 2 in solr.xml for coreLoadThreads");
  }
  if (libDir != null) {
    File f=FileUtils.resolvePath(new File(dir),libDir);
    log.info("loading shared library: " + f.getAbsolutePath());
    libLoader=SolrResourceLoader.createClassLoader(f,null);
  }
  if (adminPath != null) {
    if (adminHandler == null) {
      coreAdminHandler=new CoreAdminHandler(this);
    }
 else {
      coreAdminHandler=this.createMultiCoreHandler(adminHandler);
    }
  }
  collectionsHandler=new CollectionsHandler(this);
  try {
    containerProperties=readProperties(cfg,((NodeList)cfg.evaluate(DEFAULT_HOST_CONTEXT,XPathConstants.NODESET)).item(0));
  }
 catch (  Throwable e) {
    SolrException.log(log,null,e);
  }
  NodeList nodes=(NodeList)cfg.evaluate("solr/cores/core",XPathConstants.NODESET);
  coreLoadExecutor=new ThreadPoolExecutor(coreLoadThreads,coreLoadThreads,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new DefaultSolrThreadFactory("coreLoadExecutor"));
  try {
    CompletionService<SolrCore> completionService=new ExecutorCompletionService<SolrCore>(coreLoadExecutor);
    Set<Future<SolrCore>> pending=new HashSet<Future<SolrCore>>();
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      try {
        String rawName=DOMUtil.getAttr(node,CORE_NAME,null);
        if (null == rawName) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Each core in solr.xml must have a 'name'");
        }
        final String name=rawName;
        final CoreDescriptor p=new CoreDescriptor(this,name,DOMUtil.getAttr(node,CORE_INSTDIR,null));
        String opt=DOMUtil.getAttr(node,CORE_CONFIG,null);
        if (opt != null) {
          p.setConfigName(opt);
        }
        opt=DOMUtil.getAttr(node,CORE_SCHEMA,null);
        if (opt != null) {
          p.setSchemaName(opt);
        }
        if (zkController != null) {
          opt=DOMUtil.getAttr(node,CORE_SHARD,null);
          if (opt != null && opt.length() > 0) {
            p.getCloudDescriptor().setShardId(opt);
          }
          opt=DOMUtil.getAttr(node,CORE_COLLECTION,null);
          if (opt != null) {
            p.getCloudDescriptor().setCollectionName(opt);
          }
          opt=DOMUtil.getAttr(node,CORE_ROLES,null);
          if (opt != null) {
            p.getCloudDescriptor().setRoles(opt);
          }
        }
        opt=DOMUtil.getAttr(node,CORE_PROPERTIES,null);
        if (opt != null) {
          p.setPropertiesName(opt);
        }
        opt=DOMUtil.getAttr(node,CORE_DATADIR,null);
        if (opt != null) {
          p.setDataDir(opt);
        }
        p.setCoreProperties(readProperties(cfg,node));
        opt=DOMUtil.getAttr(node,CORE_LOADONSTARTUP,null);
        if (opt != null) {
          p.setLoadOnStartup(("true".equalsIgnoreCase(opt) || "on".equalsIgnoreCase(opt)) ? true : false);
        }
        opt=DOMUtil.getAttr(node,CORE_SWAPPABLE,null);
        if (opt != null) {
          p.setSwappable(("true".equalsIgnoreCase(opt) || "on".equalsIgnoreCase(opt)) ? true : false);
        }
        if (p.isLoadOnStartup()) {
          Callable<SolrCore> task=new Callable<SolrCore>(){
            @Override public SolrCore call(){
              SolrCore c=null;
              try {
                c=create(p);
                if (p.isSwappable()) {
                  registerLazyCore(name,c,false);
                }
 else {
                  register(name,c,false);
                }
              }
 catch (              Throwable t) {
                SolrException.log(log,null,t);
                if (c != null) {
                  c.close();
                }
              }
              return c;
            }
          }
;
          pending.add(completionService.submit(task));
        }
 else {
          dynamicDescriptors.put(rawName,p);
        }
      }
 catch (      Throwable ex) {
        SolrException.log(log,null,ex);
      }
    }
    while (pending != null && pending.size() > 0) {
      try {
        Future<SolrCore> future=completionService.take();
        if (future == null)         return;
        pending.remove(future);
        try {
          SolrCore c=future.get();
          if (c != null) {
            coreToOrigName.put(c,c.getName());
          }
        }
 catch (        ExecutionException e) {
          SolrException.log(SolrCore.log,"error loading core",e);
        }
      }
 catch (      InterruptedException e) {
        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,"interrupted while loading core",e);
      }
    }
  }
  finally {
    if (coreLoadExecutor != null) {
      ExecutorUtil.shutdownAndAwaitTermination(coreLoadExecutor);
    }
  }
}
