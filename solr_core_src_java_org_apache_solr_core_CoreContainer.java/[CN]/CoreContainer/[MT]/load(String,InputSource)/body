{
  if (null == dir) {
    dir=SolrResourceLoader.locateSolrHome();
  }
  log.info("Loading CoreContainer using Solr Home: '{}'",dir);
  this.loader=new SolrResourceLoader(dir);
  solrHome=loader.getInstanceDir();
  Config cfg=new Config(loader,null,cfgis,null,false);
  try {
    this.cfg=new Config(loader,null,copyDoc(cfg.getDocument()));
  }
 catch (  TransformerException e) {
    throw new SolrException(ErrorCode.SERVER_ERROR,"",e);
  }
  cfg.substituteProperties();
  if (cfg.getBool("solr/logging/@enabled",true)) {
    String slf4jImpl=null;
    String fname=cfg.get("solr/logging/watcher/@class",null);
    try {
      slf4jImpl=StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();
      if (fname == null) {
        if (slf4jImpl.indexOf("Log4j") > 0) {
          log.warn("Log watching is not yet implemented for log4j");
        }
 else         if (slf4jImpl.indexOf("JDK") > 0) {
          fname="JUL";
        }
      }
    }
 catch (    Throwable ex) {
      log.warn("Unable to read SLF4J version.  LogWatcher will be disabled: " + ex);
    }
    if (fname != null) {
      if ("JUL".equalsIgnoreCase(fname)) {
        logging=new JulWatcher(slf4jImpl);
      }
 else {
        try {
          logging=loader.newInstance(fname,LogWatcher.class);
        }
 catch (        Throwable e) {
          log.warn("Unable to load LogWatcher",e);
        }
      }
      if (logging != null) {
        ListenerConfig v=new ListenerConfig();
        v.size=cfg.getInt("solr/logging/watcher/@size",50);
        v.threshold=cfg.get("solr/logging/watcher/@threshold",null);
        if (v.size > 0) {
          log.info("Registering Log Listener");
          logging.registerListener(v,this);
        }
      }
    }
  }
  String dcoreName=cfg.get("solr/cores/@defaultCoreName",null);
  if (dcoreName != null && !dcoreName.isEmpty()) {
    defaultCoreName=dcoreName;
  }
  persistent=cfg.getBool("solr/@persistent",false);
  libDir=cfg.get("solr/@sharedLib",null);
  zkHost=cfg.get("solr/@zkHost",null);
  adminPath=cfg.get("solr/cores/@adminPath",null);
  shareSchema=cfg.getBool("solr/cores/@shareSchema",DEFAULT_SHARE_SCHEMA);
  zkClientTimeout=cfg.getInt("solr/cores/@zkClientTimeout",DEFAULT_ZK_CLIENT_TIMEOUT);
  hostPort=cfg.get("solr/cores/@hostPort",DEFAULT_HOST_PORT);
  hostContext=cfg.get("solr/cores/@hostContext",DEFAULT_HOST_CONTEXT);
  host=cfg.get("solr/cores/@host",null);
  leaderVoteWait=cfg.get("solr/cores/@leaderVoteWait",null);
  if (shareSchema) {
    indexSchemaCache=new ConcurrentHashMap<String,IndexSchema>();
  }
  adminHandler=cfg.get("solr/cores/@adminHandler",null);
  managementPath=cfg.get("solr/cores/@managementPath",null);
  zkClientTimeout=Integer.parseInt(System.getProperty("zkClientTimeout",Integer.toString(zkClientTimeout)));
  initZooKeeper(zkHost,zkClientTimeout);
  if (libDir != null) {
    File f=FileUtils.resolvePath(new File(dir),libDir);
    log.info("loading shared library: " + f.getAbsolutePath());
    libLoader=SolrResourceLoader.createClassLoader(f,null);
  }
  if (adminPath != null) {
    if (adminHandler == null) {
      coreAdminHandler=new CoreAdminHandler(this);
    }
 else {
      coreAdminHandler=this.createMultiCoreHandler(adminHandler);
    }
  }
  collectionsHandler=new CollectionsHandler(this);
  try {
    containerProperties=readProperties(cfg,((NodeList)cfg.evaluate(DEFAULT_HOST_CONTEXT,XPathConstants.NODESET)).item(0));
  }
 catch (  Throwable e) {
    SolrException.log(log,null,e);
  }
  NodeList nodes=(NodeList)cfg.evaluate("solr/cores/core",XPathConstants.NODESET);
  for (int i=0; i < nodes.getLength(); i++) {
    Node node=nodes.item(i);
    try {
      String rawName=DOMUtil.getAttr(node,CORE_NAME,null);
      if (null == rawName) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Each core in solr.xml must have a 'name'");
      }
      String name=rawName;
      CoreDescriptor p=new CoreDescriptor(this,name,DOMUtil.getAttr(node,CORE_INSTDIR,null));
      String opt=DOMUtil.getAttr(node,CORE_CONFIG,null);
      if (opt != null) {
        p.setConfigName(opt);
      }
      opt=DOMUtil.getAttr(node,CORE_SCHEMA,null);
      if (opt != null) {
        p.setSchemaName(opt);
      }
      if (zkController != null) {
        opt=DOMUtil.getAttr(node,CORE_SHARD,null);
        if (opt != null && opt.length() > 0) {
          p.getCloudDescriptor().setShardId(opt);
        }
        opt=DOMUtil.getAttr(node,CORE_COLLECTION,null);
        if (opt != null) {
          p.getCloudDescriptor().setCollectionName(opt);
        }
        opt=DOMUtil.getAttr(node,CORE_ROLES,null);
        if (opt != null) {
          p.getCloudDescriptor().setRoles(opt);
        }
      }
      opt=DOMUtil.getAttr(node,CORE_PROPERTIES,null);
      if (opt != null) {
        p.setPropertiesName(opt);
      }
      opt=DOMUtil.getAttr(node,CORE_DATADIR,null);
      if (opt != null) {
        p.setDataDir(opt);
      }
      p.setCoreProperties(readProperties(cfg,node));
      SolrCore core=create(p);
      register(name,core,false);
      coreToOrigName.put(core,rawName);
    }
 catch (    Throwable ex) {
      SolrException.log(log,null,ex);
    }
  }
}
