{
  final String name=dcore.getName();
  Exception failure=null;
  try {
    File idir=new File(dcore.getInstanceDir());
    if (!idir.isAbsolute()) {
      idir=new File(solrHome,dcore.getInstanceDir());
    }
    String instanceDir=idir.getPath();
    log.info("Creating SolrCore '{}' using instanceDir: {}",dcore.getName(),instanceDir);
    SolrResourceLoader solrLoader=null;
    SolrConfig config=null;
    String zkConfigName=null;
    if (zkController == null) {
      solrLoader=new SolrResourceLoader(instanceDir,libLoader,getCoreProps(instanceDir,dcore.getPropertiesName(),dcore.getCoreProperties()));
      config=new SolrConfig(solrLoader,dcore.getConfigName(),null);
    }
 else {
      try {
        String collection=dcore.getCloudDescriptor().getCollectionName();
        zkController.createCollectionZkNode(dcore.getCloudDescriptor());
        zkConfigName=zkController.readConfigName(collection);
        if (zkConfigName == null) {
          log.error("Could not find config name for collection:" + collection);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"Could not find config name for collection:" + collection);
        }
        solrLoader=new ZkSolrResourceLoader(instanceDir,zkConfigName,libLoader,getCoreProps(instanceDir,dcore.getPropertiesName(),dcore.getCoreProperties()),zkController);
        config=getSolrConfigFromZk(zkConfigName,dcore.getConfigName(),solrLoader);
      }
 catch (      KeeperException e) {
        log.error("",e);
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        log.error("",e);
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
    }
    IndexSchema schema=null;
    if (indexSchemaCache != null) {
      if (zkController != null) {
        File schemaFile=new File(dcore.getSchemaName());
        if (!schemaFile.isAbsolute()) {
          schemaFile=new File(solrLoader.getInstanceDir() + "conf" + File.separator+ dcore.getSchemaName());
        }
        if (schemaFile.exists()) {
          String key=schemaFile.getAbsolutePath() + ":" + new SimpleDateFormat("yyyyMMddHHmmss",Locale.ROOT).format(new Date(schemaFile.lastModified()));
          schema=indexSchemaCache.get(key);
          if (schema == null) {
            log.info("creating new schema object for core: " + dcore.name);
            schema=new IndexSchema(config,dcore.getSchemaName(),null);
            indexSchemaCache.put(key,schema);
          }
 else {
            log.info("re-using schema object for core: " + dcore.name);
          }
        }
      }
 else {
      }
    }
    if (schema == null) {
      if (zkController != null) {
        try {
          schema=getSchemaFromZk(zkConfigName,dcore.getSchemaName(),config,solrLoader);
        }
 catch (        KeeperException e) {
          log.error("",e);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
        }
catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          log.error("",e);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
        }
      }
 else {
        schema=new IndexSchema(config,dcore.getSchemaName(),null);
      }
    }
    SolrCore core=new SolrCore(dcore.getName(),null,config,schema,dcore);
    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {
      core.getUpdateHandler().getUpdateLog().recoverFromLog();
    }
    return core;
  }
 catch (  ParserConfigurationException e1) {
    failure=e1;
    throw e1;
  }
catch (  IOException e2) {
    failure=e2;
    throw e2;
  }
catch (  SAXException e3) {
    failure=e3;
    throw e3;
  }
catch (  RuntimeException e4) {
    failure=e4;
    throw e4;
  }
 finally {
    if (null != failure) {
      log.error("Unable to create core: " + name,failure);
    }
synchronized (coreInitFailures) {
      coreInitFailures.remove(name);
      if (null != failure) {
        coreInitFailures.put(name,failure);
      }
    }
  }
}
