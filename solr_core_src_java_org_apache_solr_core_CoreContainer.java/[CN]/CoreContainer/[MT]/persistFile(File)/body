{
  log.info("Persisting cores config to " + (file == null ? configFile : file));
  Map<String,String> rootSolrAttribs=new HashMap<String,String>();
  if (libDir != null)   rootSolrAttribs.put("sharedLib",libDir);
  rootSolrAttribs.put("persistent",Boolean.toString(isPersistent()));
  Map<String,String> coresAttribs=new HashMap<String,String>();
  addCoresAttrib(coresAttribs,"adminPath",this.adminPath,null);
  addCoresAttrib(coresAttribs,"adminHandler",this.adminHandler,null);
  addCoresAttrib(coresAttribs,"shareSchema",Boolean.toString(this.shareSchema),Boolean.toString(DEFAULT_SHARE_SCHEMA));
  addCoresAttrib(coresAttribs,"host",this.host,null);
  if (!(null == defaultCoreName || defaultCoreName.equals(""))) {
    coresAttribs.put("defaultCoreName",defaultCoreName);
  }
  if (swappableCacheSize != Integer.MAX_VALUE) {
    coresAttribs.put("swappableCacheSize",Integer.toString(swappableCacheSize));
  }
  addCoresAttrib(coresAttribs,"hostPort",this.hostPort,DEFAULT_HOST_PORT);
  addCoresAttrib(coresAttribs,"zkClientTimeout",intToString(this.zkClientTimeout),Integer.toString(DEFAULT_ZK_CLIENT_TIMEOUT));
  addCoresAttrib(coresAttribs,"hostContext",this.hostContext,DEFAULT_HOST_CONTEXT);
  addCoresAttrib(coresAttribs,"leaderVoteWait",this.leaderVoteWait,LEADER_VOTE_WAIT);
  addCoresAttrib(coresAttribs,"coreLoadThreads",Integer.toString(this.coreLoadThreads),Integer.toString(CORE_LOAD_THREADS));
  List<SolrCoreXMLDef> solrCoreXMLDefs=new ArrayList<SolrCoreXMLDef>();
synchronized (cores) {
    for (    SolrCore solrCore : cores.values()) {
      Map<String,String> coreAttribs=new HashMap<String,String>();
      CoreDescriptor dcore=solrCore.getCoreDescriptor();
      String coreName=dcore.name;
      Node coreNode=null;
      if (cfg != null) {
        NodeList nodes=(NodeList)cfg.evaluate("solr/cores/core",XPathConstants.NODESET);
        String origCoreName=coreToOrigName.get(solrCore);
        if (origCoreName == null) {
          origCoreName=coreName;
        }
        for (int i=0; i < nodes.getLength(); i++) {
          Node node=nodes.item(i);
          String name=DOMUtil.getAttr(node,CORE_NAME,null);
          if (origCoreName.equals(name)) {
            coreNode=node;
            if (coreName.equals(origCoreName)) {
              coreName=name;
            }
            break;
          }
        }
        if (coreNode == null) {
          for (int i=0; i < nodes.getLength(); i++) {
            Node node=nodes.item(i);
            String name=DOMUtil.getAttr(node,CORE_NAME,null);
            if (origCoreName.equals(DOMUtil.substituteProperty(name,loader.getCoreProperties()))) {
              coreNode=node;
              if (coreName.equals(origCoreName)) {
                coreName=name;
              }
              break;
            }
          }
        }
      }
      coreAttribs.put(CORE_NAME,coreName);
      String instanceDir=dcore.getRawInstanceDir();
      addCoreProperty(coreAttribs,coreNode,CORE_INSTDIR,instanceDir,null);
      String configName=dcore.getConfigName();
      addCoreProperty(coreAttribs,coreNode,CORE_CONFIG,configName,dcore.getDefaultConfigName());
      String schema=dcore.getSchemaName();
      addCoreProperty(coreAttribs,coreNode,CORE_SCHEMA,schema,dcore.getDefaultSchemaName());
      String dataDir=dcore.dataDir;
      addCoreProperty(coreAttribs,coreNode,CORE_DATADIR,dataDir,null);
      addCoreProperty(coreAttribs,coreNode,CORE_SWAPPABLE,Boolean.toString(dcore.isSwappable()),null);
      addCoreProperty(coreAttribs,coreNode,CORE_LOADONSTARTUP,Boolean.toString(dcore.isLoadOnStartup()),null);
      CloudDescriptor cd=dcore.getCloudDescriptor();
      String shard=null;
      String roles=null;
      if (cd != null) {
        shard=cd.getShardId();
        roles=cd.getRoles();
      }
      addCoreProperty(coreAttribs,coreNode,CORE_SHARD,shard,null);
      addCoreProperty(coreAttribs,coreNode,CORE_ROLES,roles,null);
      String collection=null;
      if (cd != null) {
        collection=cd.getCollectionName();
      }
      addCoreProperty(coreAttribs,coreNode,CORE_COLLECTION,collection,dcore.name);
      String opt=dcore.getPropertiesName();
      if (opt != null) {
        coreAttribs.put(CORE_PROPERTIES,opt);
      }
      SolrCoreXMLDef solrCoreXMLDef=new SolrCoreXMLDef();
      solrCoreXMLDef.coreAttribs=coreAttribs;
      solrCoreXMLDef.coreProperties=dcore.getCoreProperties();
      solrCoreXMLDefs.add(solrCoreXMLDef);
    }
    SolrXMLDef solrXMLDef=new SolrXMLDef();
    solrXMLDef.coresDefs=solrCoreXMLDefs;
    solrXMLDef.containerProperties=containerProperties;
    solrXMLDef.solrAttribs=rootSolrAttribs;
    solrXMLDef.coresAttribs=coresAttribs;
    solrXMLSerializer.persistFile(file == null ? configFile : file,solrXMLDef);
  }
}
