{
  log.info("Persisting cores config to " + (file == null ? configFile : file));
  Map<String,String> rootSolrAttribs=new HashMap<String,String>();
  if (libDir != null)   rootSolrAttribs.put("sharedLib",libDir);
  rootSolrAttribs.put("persistent",Boolean.toString(isPersistent()));
  Map<String,String> coresAttribs=new HashMap<String,String>();
  addCoresAttrib(coresAttribs,"adminPath",this.adminPath,null);
  addCoresAttrib(coresAttribs,"adminHandler",this.adminHandler,null);
  addCoresAttrib(coresAttribs,"shareSchema",Boolean.toString(this.shareSchema),Boolean.toString(DEFAULT_SHARE_SCHEMA));
  addCoresAttrib(coresAttribs,"host",this.host,null);
  if (!(null == defaultCoreName || defaultCoreName.equals(""))) {
    coresAttribs.put("defaultCoreName",defaultCoreName);
  }
  addCoresAttrib(coresAttribs,"hostPort",this.hostPort,DEFAULT_HOST_PORT);
  addCoresAttrib(coresAttribs,"zkClientTimeout",intToString(this.zkClientTimeout),Integer.toString(DEFAULT_ZK_CLIENT_TIMEOUT));
  addCoresAttrib(coresAttribs,"hostContext",this.hostContext,DEFAULT_HOST_CONTEXT);
  addCoresAttrib(coresAttribs,"leaderVoteWait",this.leaderVoteWait,LEADER_VOTE_WAIT);
  addCoresAttrib(coresAttribs,"coreLoadThreads",Integer.toString(this.coreLoadThreads),Integer.toString(CORE_LOAD_THREADS));
  if (transientCacheSize != Integer.MAX_VALUE) {
    addCoresAttrib(coresAttribs,"transientCacheSize",Integer.toString(this.transientCacheSize),Integer.toString(Integer.MAX_VALUE));
  }
  coreMaps.persistCores(cfg,containerProperties,rootSolrAttribs,coresAttribs,file,configFile,loader);
}
