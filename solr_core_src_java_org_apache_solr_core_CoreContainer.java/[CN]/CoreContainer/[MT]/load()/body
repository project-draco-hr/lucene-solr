{
  log.info("Loading cores into CoreContainer [instanceDir={}]",loader.getInstanceDir());
  String libDir=cfg.getSharedLibDirectory();
  if (libDir != null) {
    File f=FileUtils.resolvePath(new File(solrHome),libDir);
    log.info("loading shared library: " + f.getAbsolutePath());
    loader.addToClassLoader(libDir,null,false);
    loader.reloadLuceneSPI();
  }
  shardHandlerFactory=ShardHandlerFactory.newInstance(cfg.getShardHandlerFactoryPluginInfo(),loader);
  updateShardHandler=new UpdateShardHandler(cfg.getUpdateShardHandlerConfig());
  solrCores.allocateLazyCores(cfg.getTransientCacheSize(),loader);
  logging=LogWatcher.newRegisteredLogWatcher(cfg.getLogWatcherConfig(),loader);
  hostName=cfg.getNodeName();
  log.info("Node Name: " + hostName);
  zkSys.initZooKeeper(this,solrHome,cfg.getCloudConfig());
  if (isZooKeeperAware()) {
    MDC.put(NODE_NAME_PROP,getZkController().getNodeName());
  }
  collectionsHandler=createHandler(cfg.getCollectionsHandlerClass(),CollectionsHandler.class);
  containerHandlers.put(COLLECTIONS_HANDLER_PATH,collectionsHandler);
  infoHandler=createHandler(cfg.getInfoHandlerClass(),InfoHandler.class);
  containerHandlers.put(INFO_HANDLER_PATH,infoHandler);
  coreAdminHandler=createHandler(cfg.getCoreAdminHandlerClass(),CoreAdminHandler.class);
  containerHandlers.put(CORES_HANDLER_PATH,coreAdminHandler);
  coreConfigService=ConfigSetService.createConfigSetService(cfg,loader,zkSys.zkController);
  containerProperties.putAll(cfg.getSolrProperties());
  ExecutorService coreLoadExecutor=ExecutorUtil.newMDCAwareFixedThreadPool((zkSys.getZkController() == null ? cfg.getCoreLoadThreadCount() : Integer.MAX_VALUE),new DefaultSolrThreadFactory("coreLoadExecutor"));
  try {
    List<CoreDescriptor> cds=coresLocator.discover(this);
    checkForDuplicateCoreNames(cds);
    List<Callable<SolrCore>> creators=new ArrayList<>();
    for (    final CoreDescriptor cd : cds) {
      if (cd.isTransient() || !cd.isLoadOnStartup()) {
        solrCores.putDynamicDescriptor(cd.getName(),cd);
      }
      if (cd.isLoadOnStartup()) {
        creators.add(new Callable<SolrCore>(){
          @Override public SolrCore call() throws Exception {
            if (zkSys.getZkController() != null) {
              zkSys.getZkController().throwErrorIfReplicaReplaced(cd);
            }
            return create(cd,false);
          }
        }
);
      }
    }
    try {
      coreLoadExecutor.invokeAll(creators);
    }
 catch (    InterruptedException e) {
      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,"Interrupted while loading cores");
    }
    backgroundCloser=new CloserThread(this,solrCores,cfg);
    backgroundCloser.start();
  }
  finally {
    ExecutorUtil.shutdownNowAndAwaitTermination(coreLoadExecutor);
  }
  if (isZooKeeperAware()) {
    Collection<SolrCore> cores=getCores();
    if (cores != null) {
      for (      SolrCore core : cores) {
        try {
          zkSys.registerInZk(core,true);
        }
 catch (        Throwable t) {
          SolrException.log(log,"Error registering SolrCore",t);
        }
      }
    }
    zkSys.getZkController().checkOverseerDesignate();
  }
}
