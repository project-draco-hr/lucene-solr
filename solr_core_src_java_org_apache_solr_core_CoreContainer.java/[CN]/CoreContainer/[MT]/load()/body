{
  log.info("Loading cores into CoreContainer [instanceDir={}]",loader.getInstanceDir());
  String libDir=cfg.getSharedLibDirectory();
  if (libDir != null) {
    File f=FileUtils.resolvePath(new File(solrHome),libDir);
    log.info("loading shared library: " + f.getAbsolutePath());
    loader.addToClassLoader(libDir,null,false);
    loader.reloadLuceneSPI();
  }
  shardHandlerFactory=ShardHandlerFactory.newInstance(cfg.getShardHandlerFactoryPluginInfo(),loader);
  updateShardHandler=new UpdateShardHandler(cfg.getUpdateShardHandlerConfig());
  solrCores.allocateLazyCores(cfg.getTransientCacheSize(),loader);
  logging=LogWatcher.newRegisteredLogWatcher(cfg.getLogWatcherConfig(),loader);
  hostName=cfg.getNodeName();
  zkSys.initZooKeeper(this,solrHome,cfg.getCloudConfig());
  initializeAuthenticationPlugin();
  if (isZooKeeperAware()) {
    intializeAuthorizationPlugin();
  }
  collectionsHandler=createHandler(cfg.getCollectionsHandlerClass(),CollectionsHandler.class);
  containerHandlers.put(COLLECTIONS_HANDLER_PATH,collectionsHandler);
  infoHandler=createHandler(cfg.getInfoHandlerClass(),InfoHandler.class);
  containerHandlers.put(INFO_HANDLER_PATH,infoHandler);
  coreAdminHandler=createHandler(cfg.getCoreAdminHandlerClass(),CoreAdminHandler.class);
  containerHandlers.put(CORES_HANDLER_PATH,coreAdminHandler);
  coreConfigService=ConfigSetService.createConfigSetService(cfg,loader,zkSys.zkController);
  containerProperties.putAll(cfg.getSolrProperties());
  ExecutorService coreLoadExecutor=ExecutorUtil.newMDCAwareFixedThreadPool((zkSys.getZkController() == null ? cfg.getCoreLoadThreadCount() : Integer.MAX_VALUE),new DefaultSolrThreadFactory("coreLoadExecutor"));
  final List<Future<SolrCore>> futures=new ArrayList<Future<SolrCore>>();
  try {
    List<CoreDescriptor> cds=coresLocator.discover(this);
    checkForDuplicateCoreNames(cds);
    for (    final CoreDescriptor cd : cds) {
      if (cd.isTransient() || !cd.isLoadOnStartup()) {
        solrCores.putDynamicDescriptor(cd.getName(),cd);
      }
 else       if (asyncSolrCoreLoad) {
        solrCores.markCoreAsLoading(cd);
      }
      if (cd.isLoadOnStartup()) {
        futures.add(coreLoadExecutor.submit(new Callable<SolrCore>(){
          @Override public SolrCore call() throws Exception {
            SolrCore core;
            try {
              if (zkSys.getZkController() != null) {
                zkSys.getZkController().throwErrorIfReplicaReplaced(cd);
              }
              core=create(cd,false);
            }
  finally {
              if (asyncSolrCoreLoad) {
                solrCores.markCoreAsNotLoading(cd);
              }
            }
            try {
              zkSys.registerInZk(core,true);
            }
 catch (            Throwable t) {
              SolrException.log(log,"Error registering SolrCore",t);
            }
            return core;
          }
        }
));
      }
    }
    backgroundCloser=new CloserThread(this,solrCores,cfg);
    backgroundCloser.start();
  }
  finally {
    if (asyncSolrCoreLoad && futures != null) {
      Thread shutdownThread=new Thread(){
        public void run(){
          try {
            for (            Future<SolrCore> future : futures) {
              try {
                future.get();
              }
 catch (              InterruptedException e) {
                Thread.currentThread().interrupt();
              }
catch (              ExecutionException e) {
                log.error("Error waiting for SolrCore to be created",e);
              }
            }
          }
  finally {
            ExecutorUtil.shutdownNowAndAwaitTermination(coreLoadExecutor);
          }
        }
      }
;
      coreContainerWorkExecutor.submit(shutdownThread);
    }
 else {
      ExecutorUtil.shutdownAndAwaitTermination(coreLoadExecutor);
    }
  }
  if (isZooKeeperAware()) {
    zkSys.getZkController().checkOverseerDesignate();
  }
}
