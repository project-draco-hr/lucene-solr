{
  log.info("Loading cores into CoreContainer [instanceDir={}]",loader.getInstanceDir());
  String libDir=cfg.getSharedLibDirectory();
  if (libDir != null) {
    File f=FileUtils.resolvePath(new File(solrHome),libDir);
    log.info("loading shared library: " + f.getAbsolutePath());
    loader.addToClassLoader(libDir,null,false);
    loader.reloadLuceneSPI();
  }
  shardHandlerFactory=ShardHandlerFactory.newInstance(cfg.getShardHandlerFactoryPluginInfo(),loader);
  solrCores.allocateLazyCores(cfg.getTransientCacheSize(),loader);
  logging=LogWatcher.newRegisteredLogWatcher(cfg.getLogWatcherConfig(),loader);
  shareSchema=cfg.hasSchemaCache();
  if (shareSchema) {
    indexSchemaCache=new ConcurrentHashMap<String,IndexSchema>();
  }
  zkSys.initZooKeeper(this,solrHome,cfg);
  collectionsHandler=new CollectionsHandler(this);
  infoHandler=new InfoHandler(this);
  coreAdminHandler=createMultiCoreHandler(cfg.getCoreAdminHandlerClass());
  containerProperties=cfg.getSolrProperties("solr");
  ExecutorService coreLoadExecutor=Executors.newFixedThreadPool((zkSys.getZkController() == null ? cfg.getCoreLoadThreadCount() : Integer.MAX_VALUE),new DefaultSolrThreadFactory("coreLoadExecutor"));
  try {
    CompletionService<SolrCore> completionService=new ExecutorCompletionService<SolrCore>(coreLoadExecutor);
    Set<Future<SolrCore>> pending=new HashSet<Future<SolrCore>>();
    List<CoreDescriptor> cds=coresLocator.discover(this);
    checkForDuplicateCoreNames(cds);
    for (    final CoreDescriptor cd : cds) {
      final String name=cd.getName();
      try {
        if (cd.isTransient() || !cd.isLoadOnStartup()) {
          solrCores.putDynamicDescriptor(name,cd);
        }
        if (cd.isLoadOnStartup()) {
          Callable<SolrCore> task=new Callable<SolrCore>(){
            @Override public SolrCore call(){
              SolrCore c=null;
              try {
                if (zkSys.getZkController() != null) {
                  preRegisterInZk(cd);
                }
                c=create(cd);
                registerCore(cd.isTransient(),name,c,false);
              }
 catch (              Throwable t) {
                if (isZooKeeperAware()) {
                  try {
                    zkSys.zkController.unregister(name,cd);
                  }
 catch (                  InterruptedException e) {
                    Thread.currentThread().interrupt();
                    SolrException.log(log,null,e);
                  }
catch (                  KeeperException e) {
                    SolrException.log(log,null,e);
                  }
                }
                SolrException.log(log,null,t);
                if (c != null) {
                  c.close();
                }
              }
              return c;
            }
          }
;
          pending.add(completionService.submit(task));
        }
      }
 catch (      Throwable ex) {
        SolrException.log(log,null,ex);
      }
    }
    while (pending != null && pending.size() > 0) {
      try {
        Future<SolrCore> future=completionService.take();
        if (future == null)         return;
        pending.remove(future);
        try {
          SolrCore c=future.get();
          if (c != null) {
            solrCores.putCoreToOrigName(c,c.getName());
          }
        }
 catch (        ExecutionException e) {
          SolrException.log(SolrCore.log,"Error loading core",e);
        }
      }
 catch (      InterruptedException e) {
        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,"interrupted while loading core",e);
      }
    }
    backgroundCloser=new CloserThread(this,solrCores,cfg);
    backgroundCloser.start();
  }
  finally {
    if (coreLoadExecutor != null) {
      ExecutorUtil.shutdownNowAndAwaitTermination(coreLoadExecutor);
    }
  }
}
