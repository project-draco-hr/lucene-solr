{
  try {
    name=checkDefault(name);
    SolrCore core=coreMaps.getCore(name);
    if (core == null)     throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No such core: " + name);
    try {
      coreMaps.waitAddPendingCoreOps(name);
      CoreDescriptor cd=core.getCoreDescriptor();
      File instanceDir=new File(cd.getInstanceDir());
      log.info("Reloading SolrCore '{}' using instanceDir: {}",cd.getName(),instanceDir.getAbsolutePath());
      SolrResourceLoader solrLoader;
      if (zkController == null) {
        solrLoader=new SolrResourceLoader(instanceDir.getAbsolutePath(),libLoader,ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(),cd));
      }
 else {
        try {
          String collection=cd.getCloudDescriptor().getCollectionName();
          zkController.createCollectionZkNode(cd.getCloudDescriptor());
          String zkConfigName=zkController.readConfigName(collection);
          if (zkConfigName == null) {
            log.error("Could not find config name for collection:" + collection);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"Could not find config name for collection:" + collection);
          }
          solrLoader=new ZkSolrResourceLoader(instanceDir.getAbsolutePath(),zkConfigName,libLoader,ConfigSolrXml.getCoreProperties(instanceDir.getAbsolutePath(),cd),zkController);
        }
 catch (        KeeperException e) {
          log.error("",e);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
        }
catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          log.error("",e);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
        }
      }
      SolrCore newCore=core.reload(solrLoader,core);
      coreMaps.removeCoreToOrigName(newCore,core);
      registerCore(false,name,newCore,false);
    }
  finally {
      coreMaps.removeFromPendingOps(name);
    }
  }
 catch (  Exception ex) {
    throw recordAndThrow(name,"Unable to reload core: " + name,ex);
  }
}
