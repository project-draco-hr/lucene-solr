{
  if (VERBOSE) {
    System.out.println("TEST: codePointTable=" + codePointTable);
  }
  InputStream stream=getClass().getResourceAsStream("fuzzyTestData.txt");
  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,"UTF-8"));
  int bits=Integer.parseInt(reader.readLine());
  int terms=(int)Math.pow(2,bits);
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random(),MockTokenizer.KEYWORD,false)).setMergePolicy(newLogMergePolicy()));
  Document doc=new Document();
  Field field=newField("field","",TextField.TYPE_UNSTORED);
  doc.add(field);
  for (int i=0; i < terms; i++) {
    field.setStringValue(mapInt(codePointTable,i));
    writer.addDocument(doc);
  }
  IndexReader r=writer.getReader();
  IndexSearcher searcher=newSearcher(r);
  if (VERBOSE) {
    System.out.println("TEST: searcher=" + searcher);
  }
  searcher.setSimilarity(new DefaultSimilarity());
  writer.close();
  String line;
  while ((line=reader.readLine()) != null) {
    String params[]=line.split(",");
    String query=mapInt(codePointTable,Integer.parseInt(params[0]));
    int prefix=Integer.parseInt(params[1]);
    int pqSize=Integer.parseInt(params[2]);
    float minScore=Float.parseFloat(params[3]);
    FuzzyQuery q=new FuzzyQuery(new Term("field",query),minScore,prefix);
    q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));
    int expectedResults=Integer.parseInt(reader.readLine());
    TopDocs docs=searcher.search(q,expectedResults);
    assertEquals(expectedResults,docs.totalHits);
    for (int i=0; i < expectedResults; i++) {
      String scoreDoc[]=reader.readLine().split(",");
      assertEquals(Integer.parseInt(scoreDoc[0]),docs.scoreDocs[i].doc);
      assertEquals(Float.parseFloat(scoreDoc[1]),docs.scoreDocs[i].score,epsilon);
    }
  }
  r.close();
  dir.close();
}
