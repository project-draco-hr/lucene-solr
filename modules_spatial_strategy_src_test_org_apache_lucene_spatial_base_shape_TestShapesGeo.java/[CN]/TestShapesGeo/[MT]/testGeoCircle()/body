{
  ctx.makeCircle(110,-12,ctx.getDistCalc().degreesToDistance(90 + 12));
  ctx.makeCircle(-44,16,degToDist(106));
  ctx.makeCircle(-36,-76,degToDist(14));
  ctx.makeCircle(107,82,degToDist(172));
  assertEquals("wrong estimate",DISJOINT,ctx.makeCircle(-166,59,5226.2).relate(ctx.makeRect(36,66,23,23),ctx));
  assertEquals("bad CONTAINS (dateline)",INTERSECTS,ctx.makeCircle(56,-50,12231.5).relate(ctx.makeRect(108,26,39,48),ctx));
  assertEquals("bad CONTAINS (backwrap2)",INTERSECTS,ctx.makeCircle(112,-3,degToDist(91)).relate(ctx.makeRect(-163,29,-38,10),ctx));
  assertEquals("bad CONTAINS (r x-wrap)",INTERSECTS,ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180,180,-3,12),ctx));
  assertEquals("bad CONTAINS (pwrap)",INTERSECTS,ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180,179,-3,12),ctx));
  assertEquals("no-dist 1",WITHIN,ctx.makeCircle(135,21,0).relate(ctx.makeRect(-103,-154,-47,52),ctx));
  assertEquals("bbox <= >= -90 bug",CONTAINS,ctx.makeCircle(-64,-84,degToDist(124)).relate(ctx.makeRect(-96,96,-10,-10),ctx));
  assertEquals("c's horiz axis doesn't pass through ctr",INTERSECTS,ctx.makeCircle(71,-44,degToDist(40)).relate(ctx.makeRect(15,27,-62,-34),ctx));
  assertEquals("pole boundary",INTERSECTS,ctx.makeCircle(-100,-12,degToDist(102)).relate(ctx.makeRect(143,175,4,32),ctx));
  assertEquals("full circle assert",CONTAINS,ctx.makeCircle(-64,32,degToDist(180)).relate(ctx.makeRect(47,47,-14,90),ctx));
  double distToOpposeSide=ctx.getUnits().earthRadius() * Math.PI;
  assertEquals(ctx.getWorldBounds(),ctx.makeCircle(0,0,distToOpposeSide).getBoundingBox());
  double[] theXs=new double[]{-180,-45,90};
  for (  double x : theXs) {
    double[] theYs=new double[]{-90,-45,0,45,90};
    for (    double y : theYs) {
      testCircle(x,y,0);
      testCircle(x,y,500);
      testCircle(x,y,degToDist(90));
      testCircle(x,y,ctx.getUnits().earthRadius() * 6);
    }
  }
  testCircleIntersect();
}
