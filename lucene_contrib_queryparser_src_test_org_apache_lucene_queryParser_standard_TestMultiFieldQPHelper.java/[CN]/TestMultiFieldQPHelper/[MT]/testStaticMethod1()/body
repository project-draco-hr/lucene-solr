{
  String[] fields={"b","t"};
  String[] queries={"one","two"};
  Query q=QueryParserUtil.parse(queries,fields,new MockAnalyzer());
  assertEquals("b:one t:two",q.toString());
  String[] queries2={"+one","+two"};
  q=QueryParserUtil.parse(queries2,fields,new MockAnalyzer());
  assertEquals("(+b:one) (+t:two)",q.toString());
  String[] queries3={"one","+two"};
  q=QueryParserUtil.parse(queries3,fields,new MockAnalyzer());
  assertEquals("b:one (+t:two)",q.toString());
  String[] queries4={"one +more","+two"};
  q=QueryParserUtil.parse(queries4,fields,new MockAnalyzer());
  assertEquals("(b:one +b:more) (+t:two)",q.toString());
  String[] queries5={"blah"};
  try {
    q=QueryParserUtil.parse(queries5,fields,new MockAnalyzer());
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  TestQPHelper.QPTestAnalyzer stopA=new TestQPHelper.QPTestAnalyzer();
  String[] queries6={"((+stop))","+((stop))"};
  q=QueryParserUtil.parse(queries6,fields,stopA);
  assertEquals("",q.toString());
  String[] queries7={"one ((+stop)) +more","+((stop)) +two"};
  q=QueryParserUtil.parse(queries7,fields,stopA);
  assertEquals("(b:one +b:more) (+t:two)",q.toString());
}
