{
  if (lo >= hi)   return;
  if (hi == 1 + lo) {
    if (compare(comp,entries[lo],entries[hi]) > 0) {
      final int tmp=entries[lo];
      entries[lo]=entries[hi];
      entries[hi]=tmp;
    }
    return;
  }
  final int mid=(lo + hi) >>> 1;
  if (compare(comp,entries[lo],entries[mid]) > 0) {
    int tmp=entries[lo];
    entries[lo]=entries[mid];
    entries[mid]=tmp;
  }
  if (compare(comp,entries[mid],entries[hi]) > 0) {
    int tmp=entries[mid];
    entries[mid]=entries[hi];
    entries[hi]=tmp;
    if (compare(comp,entries[lo],entries[mid]) > 0) {
      int tmp2=entries[lo];
      entries[lo]=entries[mid];
      entries[mid]=tmp2;
    }
  }
  int left=lo + 1;
  int right=hi - 1;
  if (left >= right)   return;
  final int partition=entries[mid];
  for (; ; ) {
    while (compare(comp,entries[right],partition) > 0)     --right;
    while (left < right && compare(comp,entries[left],partition) <= 0)     ++left;
    if (left < right) {
      final int tmp=entries[left];
      entries[left]=entries[right];
      entries[right]=tmp;
      --right;
    }
 else {
      break;
    }
  }
  quickSort(comp,entries,lo,left);
  quickSort(comp,entries,left + 1,hi);
}
