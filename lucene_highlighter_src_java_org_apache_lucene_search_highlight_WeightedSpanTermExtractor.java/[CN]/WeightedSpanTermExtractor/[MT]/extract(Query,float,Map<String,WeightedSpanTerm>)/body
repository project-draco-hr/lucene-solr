{
  if (query instanceof BoostQuery) {
    BoostQuery boostQuery=(BoostQuery)query;
    extract(boostQuery.getQuery(),boost * boostQuery.getBoost(),terms);
  }
 else   if (query instanceof BooleanQuery) {
    for (    BooleanClause clause : (BooleanQuery)query) {
      if (!clause.isProhibited()) {
        extract(clause.getQuery(),boost,terms);
      }
    }
  }
 else   if (query instanceof PhraseQuery) {
    PhraseQuery phraseQuery=((PhraseQuery)query);
    Term[] phraseQueryTerms=phraseQuery.getTerms();
    if (phraseQueryTerms.length == 1) {
      extractWeightedSpanTerms(terms,new SpanTermQuery(phraseQueryTerms[0]),boost);
    }
 else {
      SpanQuery[] clauses=new SpanQuery[phraseQueryTerms.length];
      for (int i=0; i < phraseQueryTerms.length; i++) {
        clauses[i]=new SpanTermQuery(phraseQueryTerms[i]);
      }
      int positionGaps=0;
      int[] positions=phraseQuery.getPositions();
      if (positions.length >= 2) {
        positionGaps=Math.max(0,positions[positions.length - 1] - positions[0] - positions.length + 1);
      }
      boolean inorder=(phraseQuery.getSlop() == 0);
      SpanNearQuery sp=new SpanNearQuery(clauses,phraseQuery.getSlop() + positionGaps,inorder);
      extractWeightedSpanTerms(terms,sp,boost);
    }
  }
 else   if (query instanceof TermQuery) {
    extractWeightedTerms(terms,query,boost);
  }
 else   if (query instanceof SpanQuery) {
    extractWeightedSpanTerms(terms,(SpanQuery)query,boost);
  }
 else   if (query instanceof ConstantScoreQuery) {
    final Query q=((ConstantScoreQuery)query).getQuery();
    if (q != null) {
      extract(q,boost,terms);
    }
  }
 else   if (query instanceof CommonTermsQuery) {
    extractWeightedTerms(terms,query,boost);
  }
 else   if (query instanceof DisjunctionMaxQuery) {
    for (Iterator<Query> iterator=((DisjunctionMaxQuery)query).iterator(); iterator.hasNext(); ) {
      extract(iterator.next(),boost,terms);
    }
  }
 else   if (query instanceof ToParentBlockJoinQuery) {
    extract(((ToParentBlockJoinQuery)query).getChildQuery(),boost,terms);
  }
 else   if (query instanceof ToChildBlockJoinQuery) {
    extract(((ToChildBlockJoinQuery)query).getParentQuery(),boost,terms);
  }
 else   if (query instanceof MultiPhraseQuery) {
    final MultiPhraseQuery mpq=(MultiPhraseQuery)query;
    final Term[][] termArrays=mpq.getTermArrays();
    final int[] positions=mpq.getPositions();
    if (positions.length > 0) {
      int maxPosition=positions[positions.length - 1];
      for (int i=0; i < positions.length - 1; ++i) {
        if (positions[i] > maxPosition) {
          maxPosition=positions[i];
        }
      }
      @SuppressWarnings({"unchecked","rawtypes"}) final List<SpanQuery>[] disjunctLists=new List[maxPosition + 1];
      int distinctPositions=0;
      for (int i=0; i < termArrays.length; ++i) {
        final Term[] termArray=termArrays[i];
        List<SpanQuery> disjuncts=disjunctLists[positions[i]];
        if (disjuncts == null) {
          disjuncts=(disjunctLists[positions[i]]=new ArrayList<>(termArray.length));
          ++distinctPositions;
        }
        for (int j=0; j < termArray.length; ++j) {
          disjuncts.add(new SpanTermQuery(termArray[j]));
        }
      }
      int positionGaps=0;
      int position=0;
      final SpanQuery[] clauses=new SpanQuery[distinctPositions];
      for (int i=0; i < disjunctLists.length; ++i) {
        List<SpanQuery> disjuncts=disjunctLists[i];
        if (disjuncts != null) {
          clauses[position++]=new SpanOrQuery(disjuncts.toArray(new SpanQuery[disjuncts.size()]));
        }
 else {
          ++positionGaps;
        }
      }
      final int slop=mpq.getSlop();
      final boolean inorder=(slop == 0);
      SpanNearQuery sp=new SpanNearQuery(clauses,slop + positionGaps,inorder);
      extractWeightedSpanTerms(terms,sp,boost);
    }
  }
 else   if (query instanceof MatchAllDocsQuery) {
  }
 else   if (query instanceof CustomScoreQuery) {
    extract(((CustomScoreQuery)query).getSubQuery(),boost,terms);
  }
 else   if (isQueryUnsupported(query.getClass())) {
  }
 else {
    Query origQuery=query;
    final IndexReader reader=getLeafContext().reader();
    Query rewritten;
    if (query instanceof MultiTermQuery) {
      if (!expandMultiTermQuery) {
        return;
      }
      rewritten=MultiTermQuery.SCORING_BOOLEAN_REWRITE.rewrite(reader,(MultiTermQuery)query);
    }
 else {
      rewritten=origQuery.rewrite(reader);
    }
    if (rewritten != origQuery) {
      extract(rewritten,boost,terms);
    }
 else {
      extractUnknownQuery(query,terms);
    }
  }
}
