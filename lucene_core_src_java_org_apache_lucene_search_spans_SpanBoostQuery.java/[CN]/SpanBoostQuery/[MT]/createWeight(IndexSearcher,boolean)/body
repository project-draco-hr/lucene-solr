{
  final SpanWeight weight=query.createWeight(searcher,needsScores);
  if (needsScores == false) {
    return weight;
  }
  Map<Term,TermContext> terms=new TreeMap<>();
  weight.extractTermContexts(terms);
  weight.normalize(1f,boost);
  return new SpanWeight(this,searcher,terms){
    @Override public void extractTerms(    Set<Term> terms){
      weight.extractTerms(terms);
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      return weight.explain(context,doc);
    }
    @Override public float getValueForNormalization() throws IOException {
      return weight.getValueForNormalization();
    }
    @Override public void normalize(    float norm,    float boost){
      weight.normalize(norm,SpanBoostQuery.this.boost * boost);
    }
    @Override public Spans getSpans(    LeafReaderContext ctx,    Postings requiredPostings) throws IOException {
      return weight.getSpans(ctx,requiredPostings);
    }
    @Override public SpanScorer scorer(    LeafReaderContext context) throws IOException {
      return weight.scorer(context);
    }
    @Override public void extractTermContexts(    Map<Term,TermContext> contexts){
      weight.extractTermContexts(contexts);
    }
  }
;
}
