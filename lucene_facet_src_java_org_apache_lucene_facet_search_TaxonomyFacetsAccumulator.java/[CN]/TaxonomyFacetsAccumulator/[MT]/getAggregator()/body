{
  Map<CategoryListParams,List<FacetRequest>> requestsPerCLP=groupRequests();
  if (requestsPerCLP.size() == 1) {
    boolean allCount=true;
    for (    FacetRequest fr : searchParams.facetRequests) {
      if (!(fr instanceof CountFacetRequest)) {
        allCount=false;
        break;
      }
    }
    if (allCount) {
      return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);
    }
  }
  Map<CategoryListParams,FacetsAggregator> perCLPAggregator=new HashMap<CategoryListParams,FacetsAggregator>();
  for (  Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {
    CategoryListParams clp=e.getKey();
    List<FacetRequest> requests=e.getValue();
    Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses=new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();
    Map<FacetLabel,FacetsAggregator> perCategoryAggregator=new HashMap<FacetLabel,FacetsAggregator>();
    for (    FacetRequest fr : requests) {
      FacetsAggregator fa=fr.createFacetsAggregator(searchParams.indexingParams);
      if (fa == null) {
        throw new IllegalArgumentException("this accumulator only supports requests that create a FacetsAggregator: " + fr);
      }
      Class<? extends FacetsAggregator> faClass=fa.getClass();
      if (!aggClasses.containsKey(faClass)) {
        aggClasses.put(faClass,fa);
      }
 else {
        fa=aggClasses.get(faClass);
      }
      perCategoryAggregator.put(fr.categoryPath,fa);
    }
    if (aggClasses.size() == 1) {
      perCLPAggregator.put(clp,aggClasses.values().iterator().next());
    }
 else {
      perCLPAggregator.put(clp,new MultiFacetsAggregator(perCategoryAggregator));
    }
  }
  return new PerCategoryListAggregator(perCLPAggregator,searchParams.indexingParams);
}
