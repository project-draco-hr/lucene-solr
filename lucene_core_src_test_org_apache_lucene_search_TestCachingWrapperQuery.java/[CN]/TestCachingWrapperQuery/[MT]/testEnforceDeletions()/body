{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy(10)));
  DirectoryReader reader=DirectoryReader.open(writer.w,true);
  IndexSearcher searcher=newSearcher(reader,false);
  Document doc=new Document();
  doc.add(newStringField("id","1",Field.Store.YES));
  writer.addDocument(doc);
  reader=refreshReader(reader);
  searcher=newSearcher(reader,false);
  TopDocs docs=searcher.search(new MatchAllDocsQuery(),1);
  assertEquals("Should find a hit...",1,docs.totalHits);
  final Query startQuery=new TermQuery(new Term("id","1"));
  CachingWrapperQuery query=new CachingWrapperQuery(startQuery,QueryCachingPolicy.ALWAYS_CACHE);
  docs=searcher.search(new ConstantScoreQuery(query),1);
  assertTrue(query.ramBytesUsed() > 0);
  assertEquals("[query + filter] Should find a hit...",1,docs.totalHits);
  Query constantScore=new ConstantScoreQuery(query);
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should find a hit...",1,docs.totalHits);
  writer.deleteDocuments(new Term("foo","bar"));
  IndexReader oldReader=reader;
  reader=refreshReader(reader);
  assertTrue(reader == oldReader);
  int missCount=query.missCount;
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should find a hit...",1,docs.totalHits);
  assertEquals(missCount,query.missCount);
  writer.deleteDocuments(new Term("id","1"));
  oldReader=reader;
  reader=refreshReader(reader);
  searcher=newSearcher(reader,false);
  missCount=query.missCount;
  docs=searcher.search(new ConstantScoreQuery(query),1);
  assertEquals("[query + filter] Should *not* find a hit...",0,docs.totalHits);
  assertEquals(missCount,query.missCount);
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should *not* find a hit...",0,docs.totalHits);
  query=new CachingWrapperQuery(startQuery,QueryCachingPolicy.ALWAYS_CACHE);
  writer.addDocument(doc);
  reader=refreshReader(reader);
  searcher=newSearcher(reader,false);
  docs=searcher.search(new ConstantScoreQuery(query),1);
  assertEquals("[query + filter] Should find a hit...",1,docs.totalHits);
  missCount=query.missCount;
  assertTrue(missCount > 0);
  constantScore=new ConstantScoreQuery(query);
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should find a hit...",1,docs.totalHits);
  assertEquals(missCount,query.missCount);
  writer.addDocument(doc);
  oldReader=reader;
  reader=refreshReader(reader);
  searcher=newSearcher(reader,false);
  docs=searcher.search(new ConstantScoreQuery(query),1);
  assertEquals("[query + filter] Should find 2 hits...",2,docs.totalHits);
  assertTrue(query.missCount > missCount);
  missCount=query.missCount;
  constantScore=new ConstantScoreQuery(query);
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should find a hit...",2,docs.totalHits);
  assertEquals(missCount,query.missCount);
  writer.deleteDocuments(new Term("id","1"));
  reader=refreshReader(reader);
  searcher=newSearcher(reader,false);
  docs=searcher.search(new ConstantScoreQuery(query),1);
  assertEquals("[query + filter] Should *not* find a hit...",0,docs.totalHits);
  assertEquals(missCount,query.missCount);
  docs=searcher.search(constantScore,1);
  assertEquals("[just filter] Should *not* find a hit...",0,docs.totalHits);
  assertEquals(missCount,query.missCount);
  assertTrue(oldReader != null);
  reader.close();
  writer.close();
  dir.close();
}
