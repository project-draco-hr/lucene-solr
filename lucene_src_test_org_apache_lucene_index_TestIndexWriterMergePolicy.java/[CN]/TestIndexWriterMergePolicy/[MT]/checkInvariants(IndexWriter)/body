{
  writer.waitForMerges();
  int maxBufferedDocs=writer.getConfig().getMaxBufferedDocs();
  int mergeFactor=((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor();
  int maxMergeDocs=((LogMergePolicy)writer.getConfig().getMergePolicy()).getMaxMergeDocs();
  int ramSegmentCount=writer.getNumBufferedDocuments();
  assertTrue(ramSegmentCount < maxBufferedDocs);
  int lowerBound=-1;
  int upperBound=maxBufferedDocs;
  int numSegments=0;
  int segmentCount=writer.getSegmentCount();
  for (int i=segmentCount - 1; i >= 0; i--) {
    int docCount=writer.getDocCount(i);
    assertTrue(docCount > lowerBound);
    if (docCount <= upperBound) {
      numSegments++;
    }
 else {
      if (upperBound * mergeFactor <= maxMergeDocs) {
        assertTrue("maxMergeDocs=" + maxMergeDocs + "; numSegments="+ numSegments+ "; upperBound="+ upperBound+ "; mergeFactor="+ mergeFactor+ "; segs="+ writer.segString(),numSegments < mergeFactor);
      }
      do {
        lowerBound=upperBound;
        upperBound*=mergeFactor;
      }
 while (docCount > upperBound);
      numSegments=1;
    }
  }
  if (upperBound * mergeFactor <= maxMergeDocs) {
    assertTrue(numSegments < mergeFactor);
  }
}
