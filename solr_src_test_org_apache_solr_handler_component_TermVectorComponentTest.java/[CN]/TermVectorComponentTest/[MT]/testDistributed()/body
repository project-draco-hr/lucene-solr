{
  SolrCore core=h.getCore();
  TermVectorComponent tvComp=(TermVectorComponent)core.getSearchComponent("tvComponent");
  assertTrue("tvComp is null and it shouldn't be",tvComp != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  ResponseBuilder rb=new ResponseBuilder();
  rb.stage=ResponseBuilder.STAGE_GET_FIELDS;
  rb.shards=new String[]{"localhost:0","localhost:1","localhost:2","localhost:3"};
  rb.resultIds=new HashMap<Object,ShardDoc>();
  rb.components=new ArrayList<SearchComponent>();
  rb.components.add(tvComp);
  params.add(CommonParams.Q,"id:0");
  params.add(CommonParams.QT,"tvrh");
  params.add(TermVectorParams.TF,"true");
  params.add(TermVectorParams.DF,"true");
  params.add(TermVectorParams.OFFSETS,"true");
  params.add(TermVectorParams.POSITIONS,"true");
  params.add(TermVectorComponent.COMPONENT_NAME,"true");
  rb.req=new LocalSolrQueryRequest(core,params);
  rb.outgoing=new ArrayList<ShardRequest>();
  for (int i=0; i < rb.shards.length; i++) {
    ShardDoc doc=new ShardDoc();
    doc.id=i;
    doc.score=1 - (i / (float)rb.shards.length);
    doc.positionInResponse=i;
    doc.shard=rb.shards[i];
    doc.orderInShard=0;
    rb.resultIds.put(doc.id,doc);
  }
  int result=tvComp.distributedProcess(rb);
  assertTrue(result + " does not equal: " + ResponseBuilder.STAGE_DONE,result == ResponseBuilder.STAGE_DONE);
  assertTrue("rb.outgoing Size: " + rb.outgoing.size() + " is not: "+ rb.shards.length,rb.outgoing.size() == rb.shards.length);
  for (  ShardRequest request : rb.outgoing) {
    ModifiableSolrParams solrParams=request.params;
    System.out.println("Shard: " + Arrays.asList(request.shards) + " Params: "+ solrParams);
  }
}
