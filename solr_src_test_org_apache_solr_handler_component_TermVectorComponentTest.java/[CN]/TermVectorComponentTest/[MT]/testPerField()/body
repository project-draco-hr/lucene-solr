{
  SolrCore core=h.getCore();
  SearchComponent tvComp=core.getSearchComponent("tvComponent");
  assertTrue("tvComp is null and it shouldn't be",tvComp != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.Q,"id:0");
  params.add(CommonParams.QT,"tvrh");
  params.add(TermVectorParams.FIELDS,"test_basictv,test_notv,test_postv,test_offtv,test_posofftv");
  params.add(TermVectorParams.TF,"true");
  params.add(TermVectorParams.DF,"true");
  params.add(TermVectorParams.OFFSETS,"true");
  params.add(TermVectorParams.POSITIONS,"true");
  params.add(TermVectorParams.TF_IDF,"true");
  params.add(TermVectorComponent.COMPONENT_NAME,"true");
  params.add("f.test_posofftv." + TermVectorParams.POSITIONS,"false");
  params.add("f.test_offtv." + TermVectorParams.OFFSETS,"false");
  params.add("f.test_basictv." + TermVectorParams.DF,"false");
  params.add("f.test_basictv." + TermVectorParams.TF,"false");
  params.add("f.test_basictv." + TermVectorParams.TF_IDF,"false");
  SolrRequestHandler handler=core.getRequestHandler("tvrh");
  SolrQueryResponse rsp;
  rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  NamedList values=rsp.getValues();
  NamedList termVectors=(NamedList)values.get(TermVectorComponent.TERM_VECTORS);
  assertTrue("termVectors is null and it shouldn't be",termVectors != null);
  System.out.println("TVs: " + termVectors);
  NamedList doc=(NamedList)termVectors.get("doc-0");
  assertTrue("doc is null and it shouldn't be",doc != null);
  assertEquals(doc.size(),5);
  NamedList vec;
  NamedList another;
  NamedList offsets;
  NamedList pos;
  Integer df;
  Double val;
  vec=(NamedList)doc.get("test_posofftv");
  assertNotNull(vec);
  assertEquals(vec.size(),2);
  another=(NamedList)vec.get("anoth");
  offsets=(NamedList)another.get("offsets");
  assertNotNull(offsets);
  assertTrue(offsets.size() > 0);
  pos=(NamedList)another.get("positions");
  assertNull(pos);
  df=(Integer)another.get("df");
  assertNotNull(df);
  assertTrue(df == 2);
  val=(Double)another.get("tf-idf");
  assertTrue("tfIdf is null and it shouldn't be",val != null);
  assertTrue(val + " does not equal: " + 0.5,val == 0.5);
  vec=(NamedList)doc.get("test_offtv");
  assertNotNull(vec);
  assertEquals(vec.size(),2);
  another=(NamedList)vec.get("anoth");
  offsets=(NamedList)another.get("offsets");
  assertNull(offsets);
  pos=(NamedList)another.get("positions");
  assertNull(vec.toString(),pos);
  df=(Integer)another.get("df");
  assertNotNull(df);
  assertTrue(df == 2);
  val=(Double)another.get("tf-idf");
  assertTrue("tfIdf is null and it shouldn't be",val != null);
  assertTrue(val + " does not equal: " + 0.5,val == 0.5);
  vec=(NamedList)doc.get("test_basictv");
  assertNotNull(vec);
  assertEquals(vec.size(),2);
  another=(NamedList)vec.get("anoth");
  offsets=(NamedList)another.get("offsets");
  assertNull(offsets);
  pos=(NamedList)another.get("positions");
  assertNull(pos);
  df=(Integer)another.get("df");
  assertNull(df);
  val=(Double)another.get("tf-idf");
  assertNull(val);
  val=(Double)another.get("tf");
  assertNull(val);
  NamedList warnings=(NamedList)termVectors.get("warnings");
  assertNotNull(warnings);
  List<String> theList;
  theList=(List<String>)warnings.get("noTermVectors");
  assertNotNull(theList);
  assertEquals(theList.size(),1);
  theList=(List<String>)warnings.get("noPositions");
  assertNotNull(theList);
  assertEquals(theList.size(),2);
  theList=(List<String>)warnings.get("noOffsets");
  assertNotNull(theList);
  assertEquals(theList.size(),2);
}
