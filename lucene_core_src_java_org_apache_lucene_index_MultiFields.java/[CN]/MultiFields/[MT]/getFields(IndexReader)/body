{
  final List<AtomicReaderContext> leaves=reader.getTopReaderContext().leaves();
switch (leaves.size()) {
case 0:
    return null;
case 1:
  return leaves.get(0).reader().fields();
default :
final List<Fields> fields=new ArrayList<Fields>();
final List<ReaderSlice> slices=new ArrayList<ReaderSlice>();
for (final AtomicReaderContext ctx : leaves) {
final AtomicReader r=ctx.reader();
final Fields f=r.fields();
if (f != null) {
fields.add(f);
slices.add(new ReaderSlice(ctx.docBase,r.maxDoc(),fields.size() - 1));
}
}
if (fields.isEmpty()) {
return null;
}
 else if (fields.size() == 1) {
return fields.get(0);
}
 else {
return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),slices.toArray(ReaderSlice.EMPTY_ARRAY));
}
}
}
