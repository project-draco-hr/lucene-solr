{
  if (type == null) {
    return null;
  }
switch (type) {
case BYTES_FIXED_DEREF:
    return promoter.set(type,IS_BYTE | IS_FIXED | IS_DEREF,valueSize);
case BYTES_FIXED_SORTED:
  return promoter.set(type,IS_BYTE | IS_FIXED | IS_SORTED,valueSize);
case BYTES_FIXED_STRAIGHT:
return promoter.set(type,IS_BYTE | IS_FIXED | IS_STRAIGHT,valueSize);
case BYTES_VAR_DEREF:
return promoter.set(type,IS_BYTE | IS_VAR | IS_DEREF,VAR_TYPE_VALUE_SIZE);
case BYTES_VAR_SORTED:
return promoter.set(type,IS_BYTE | IS_VAR | IS_SORTED,VAR_TYPE_VALUE_SIZE);
case BYTES_VAR_STRAIGHT:
return promoter.set(type,IS_BYTE | IS_VAR | IS_STRAIGHT,VAR_TYPE_VALUE_SIZE);
case FIXED_INTS_16:
return promoter.set(type,IS_INT | IS_FIXED | IS_STRAIGHT| IS_16_BIT,valueSize);
case FIXED_INTS_32:
return promoter.set(type,IS_INT | IS_FIXED | IS_STRAIGHT| IS_32_BIT,valueSize);
case FIXED_INTS_64:
return promoter.set(type,IS_INT | IS_FIXED | IS_STRAIGHT| IS_64_BIT,valueSize);
case FIXED_INTS_8:
return promoter.set(type,IS_INT | IS_FIXED | IS_STRAIGHT| IS_8_BIT,valueSize);
case FLOAT_32:
return promoter.set(type,IS_FLOAT | IS_FIXED | IS_STRAIGHT| IS_32_BIT_FLOAT,valueSize);
case FLOAT_64:
return promoter.set(type,IS_FLOAT | IS_FIXED | IS_STRAIGHT| IS_64_BIT_FLOAT,valueSize);
case VAR_INTS:
return promoter.set(type,IS_INT | IS_VAR | IS_STRAIGHT,VAR_TYPE_VALUE_SIZE);
default :
throw new IllegalStateException();
}
}
