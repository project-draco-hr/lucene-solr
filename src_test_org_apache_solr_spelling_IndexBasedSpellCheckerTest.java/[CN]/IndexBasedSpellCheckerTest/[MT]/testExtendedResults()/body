{
  IndexBasedSpellChecker checker=new IndexBasedSpellChecker();
  NamedList spellchecker=new NamedList();
  spellchecker.add("classname",IndexBasedSpellChecker.class.getName());
  File tmpDir=new File(System.getProperty("java.io.tmpdir"));
  File indexDir=new File(tmpDir,"spellingIdx" + new Date().getTime());
  indexDir.mkdirs();
  spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR,indexDir.getAbsolutePath());
  spellchecker.add(IndexBasedSpellChecker.FIELD,"title");
  spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME,spellchecker);
  SolrCore core=h.getCore();
  String dictName=checker.init(spellchecker,core);
  assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
  RefCounted<SolrIndexSearcher> holder=core.getSearcher();
  SolrIndexSearcher searcher=holder.get();
  try {
    checker.build(core,searcher);
    IndexReader reader=searcher.getReader();
    Collection<Token> tokens=queryConverter.convert("documemt");
    SpellingResult result=checker.getSuggestions(tokens,reader,1,false,true);
    assertTrue("result is null and it shouldn't be",result != null);
    Map<String,Integer> suggestions=result.get(tokens.iterator().next());
    assertTrue("documemt is null and it shouldn't be",suggestions != null);
    assertTrue("documemt Size: " + suggestions.size() + " is not: "+ 1,suggestions.size() == 1);
    Map.Entry<String,Integer> entry=suggestions.entrySet().iterator().next();
    assertTrue(entry.getKey() + " is not equal to " + "document",entry.getKey().equals("document") == true);
    assertTrue(entry.getValue() + " does not equal: " + 2,entry.getValue() == 2);
    tokens=queryConverter.convert("super");
    result=checker.getSuggestions(tokens,reader,1,false,true);
    assertTrue("result is null and it shouldn't be",result != null);
    suggestions=result.get(tokens.iterator().next());
    assertTrue("suggestions is not null and it should be",suggestions == null);
    tokens=queryConverter.convert("document");
    result=checker.getSuggestions(tokens,reader,1,false,true);
    assertTrue("result is null and it shouldn't be",result != null);
    suggestions=result.get(tokens.iterator().next());
    assertTrue("suggestions is not null and it should be",suggestions == null);
  }
  finally {
    holder.decref();
  }
}
