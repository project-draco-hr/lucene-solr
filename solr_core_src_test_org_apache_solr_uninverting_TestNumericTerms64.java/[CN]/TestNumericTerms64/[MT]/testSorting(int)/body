{
  String field="field" + precisionStep;
  int num=TestUtil.nextInt(random(),10,20);
  for (int i=0; i < num; i++) {
    long lower=(long)(random().nextDouble() * noDocs * distance) + startOffset;
    long upper=(long)(random().nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      long a=lower;
      lower=upper;
      upper=a;
    }
    Query tq=LegacyNumericRangeQuery.newLongRange(field,precisionStep,lower,upper,true,true);
    TopDocs topDocs=searcher.search(tq,noDocs,new Sort(new SortField(field,SortField.Type.LONG,true)));
    if (topDocs.totalHits == 0)     continue;
    ScoreDoc[] sd=topDocs.scoreDocs;
    assertNotNull(sd);
    long last=searcher.doc(sd[0].doc).getField(field).numericValue().longValue();
    for (int j=1; j < sd.length; j++) {
      long act=searcher.doc(sd[j].doc).getField(field).numericValue().longValue();
      assertTrue("Docs should be sorted backwards",last > act);
      last=act;
    }
  }
}
