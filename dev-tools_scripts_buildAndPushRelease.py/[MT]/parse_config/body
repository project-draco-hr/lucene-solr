def parse_config():
    epilogue = textwrap.dedent('\n    Example usage for a Release Manager:\n    python3.2 -u buildAndPushRelease.py --push-remote mikemccand --sign 6E68DA61 --rc-num 1 /path/to/lucene_solr_4_7\n  ')
    description = 'Utility to build, push, and test a release.'
    parser = argparse.ArgumentParser(description=description, epilog=epilogue, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--no-prepare', dest='prepare', default=True, action='store_false', help='Use the already built release in the provided checkout')
    parser.add_argument('--push-remote', metavar='USERNAME', help='Push the release to people.apache.org for the given user')
    parser.add_argument('--push-local', metavar='PATH', help='Push the release to the local path')
    parser.add_argument('--sign', metavar='KEYID', help='Sign the release with the given gpg key')
    parser.add_argument('--rc-num', metavar='NUM', type=int, default=1, help='Release Candidate number, required')
    parser.add_argument('--smoke-test', metavar='PATH', help='Run the smoker tester on the release in the given directory')
    parser.add_argument('root', metavar='checkout_path', help='Root of SVN checkout for lucene-solr')
    config = parser.parse_args()
    if ((config.push_remote is not None) and (config.push_local is not None)):
        parser.error('Cannot specify --push-remote and --push-local together')
    if ((not config.prepare) and config.sign):
        parser.error('Cannot sign already built release')
    if ((config.push_local is not None) and os.path.exists(config.push_local)):
        parser.error('Cannot push to local path that already exists')
    if (config.rc_num <= 0):
        parser.error('Release Candidate number must be a positive integer')
    if (not os.path.isdir(config.root)):
        parser.error('Root path is not a valid lucene-solr checkout')
    config.version = read_version(config.root)
    print ('Building version: %s' % config.version)
    if config.sign:
        sys.stdout.flush()
        import getpass
        config.key_id = config.sign
        config.key_password = getpass.getpass('Enter GPG keystore password: ')
    else:
        config.gpg_password = None
    return config
