{
  final MockDirectoryWrapper dir=newMockDirectory();
  dir.setEnableVirusScanner(false);
  Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE,true));
    }
  }
;
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(analyzer).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));
  if (VERBOSE) {
    System.out.println("TEST: config1=" + writer.getConfig());
  }
  for (int j=0; j < 500; j++) {
    TestIndexWriter.addDocWithIndex(writer,j);
  }
  writer.commit();
  TestIndexWriter.addDocWithIndex(writer,500);
  writer.close();
  long startDiskUsage=0;
  for (  String f : dir.listAll()) {
    startDiskUsage+=dir.fileLength(f);
    if (VERBOSE) {
      System.out.println(f + ": " + dir.fileLength(f));
    }
  }
  if (VERBOSE) {
    System.out.println("TEST: start disk usage = " + startDiskUsage);
  }
  String startListing=listFiles(dir);
  dir.resetMaxUsedSizeInBytes();
  dir.setTrackDiskUsage(true);
  writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));
  if (VERBOSE) {
    System.out.println("TEST: config2=" + writer.getConfig());
  }
  writer.forceMerge(1);
  writer.close();
  long finalDiskUsage=0;
  for (  String f : dir.listAll()) {
    finalDiskUsage+=dir.fileLength(f);
    if (VERBOSE) {
      System.out.println(f + ": " + dir.fileLength(f));
    }
  }
  if (VERBOSE) {
    System.out.println("TEST: final disk usage = " + finalDiskUsage);
  }
  long maxStartFinalDiskUsage=Math.max(startDiskUsage,finalDiskUsage);
  long maxDiskUsage=dir.getMaxUsedSizeInBytes();
  assertTrue("forceMerge used too much temporary space: starting usage was " + startDiskUsage + " bytes; final usage was "+ finalDiskUsage+ " bytes; max temp usage was "+ maxDiskUsage+ " but should have been at most "+ (4 * maxStartFinalDiskUsage)+ " (= 4X starting usage), BEFORE="+ startListing+ "AFTER="+ listFiles(dir),maxDiskUsage <= 4 * maxStartFinalDiskUsage);
  dir.close();
}
