{
  final String configName="solrCloudCollectionConfig";
  final File configDir=new File(TEST_HOME() + File.separator + "collection1"+ File.separator+ "conf");
  configureCluster(NUM_SERVERS).addConfig(configName,configDir.toPath()).configure();
  assertSpinLoopAllJettyAreRunning(cluster);
  CLOUD_CLIENT=cluster.getSolrClient();
  CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);
  CollectionAdminRequest.createCollection(COLLECTION_NAME,configName,NUM_SHARDS,REPLICATION_FACTOR).withProperty("config","solrconfig-distrib-update-processor-chains.xml").withProperty("schema","schema15.xml").process(CLOUD_CLIENT);
  ZkStateReader zkStateReader=CLOUD_CLIENT.getZkStateReader();
  AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION_NAME,zkStateReader,true,true,330);
  HashMap<String,String> urlMap=new HashMap<>();
  for (  JettySolrRunner jetty : cluster.getJettySolrRunners()) {
    URL jettyURL=jetty.getBaseUrl();
    String nodeKey=jettyURL.getHost() + ":" + jettyURL.getPort()+ jettyURL.getPath().replace("/","_");
    urlMap.put(nodeKey,jettyURL.toString());
  }
  zkStateReader.updateClusterState();
  ClusterState clusterState=zkStateReader.getClusterState();
  for (  Slice slice : clusterState.getSlices(COLLECTION_NAME)) {
    String shardName=slice.getName();
    Replica leader=slice.getLeader();
    assertNotNull("slice has null leader: " + slice.toString(),leader);
    assertNotNull("slice leader has null node name: " + slice.toString(),leader.getNodeName());
    String leaderUrl=urlMap.remove(leader.getNodeName());
    assertNotNull("could not find URL for " + shardName + " leader: "+ leader.getNodeName(),leaderUrl);
    assertEquals("expected two total replicas for: " + slice.getName(),2,slice.getReplicas().size());
    String passiveUrl=null;
    for (    Replica replica : slice.getReplicas()) {
      if (!replica.equals(leader)) {
        passiveUrl=urlMap.remove(replica.getNodeName());
        assertNotNull("could not find URL for " + shardName + " replica: "+ replica.getNodeName(),passiveUrl);
      }
    }
    assertNotNull("could not find URL for " + shardName + " replica",passiveUrl);
    if (shardName.equals("shard1")) {
      S_ONE_LEADER_CLIENT=getHttpSolrClient(leaderUrl + "/" + COLLECTION_NAME+ "/");
      S_ONE_NON_LEADER_CLIENT=getHttpSolrClient(passiveUrl + "/" + COLLECTION_NAME+ "/");
    }
 else     if (shardName.equals("shard2")) {
      S_TWO_LEADER_CLIENT=getHttpSolrClient(leaderUrl + "/" + COLLECTION_NAME+ "/");
      S_TWO_NON_LEADER_CLIENT=getHttpSolrClient(passiveUrl + "/" + COLLECTION_NAME+ "/");
    }
 else {
      fail("unexpected shard: " + shardName);
    }
  }
  assertEquals("Should be exactly one server left (nost hosting either shard)",1,urlMap.size());
  NO_COLLECTION_CLIENT=getHttpSolrClient(urlMap.values().iterator().next() + "/" + COLLECTION_NAME+ "/");
  assertNotNull(S_ONE_LEADER_CLIENT);
  assertNotNull(S_TWO_LEADER_CLIENT);
  assertNotNull(S_ONE_NON_LEADER_CLIENT);
  assertNotNull(S_TWO_NON_LEADER_CLIENT);
  assertNotNull(NO_COLLECTION_CLIENT);
  assertEquals(0,CLOUD_CLIENT.add(doc(f("id",S_ONE_PRE + random().nextInt()),f("expected_shard_s","shard1"))).getStatus());
  assertEquals(0,CLOUD_CLIENT.add(doc(f("id",S_TWO_PRE + random().nextInt()),f("expected_shard_s","shard2"))).getStatus());
  assertEquals(0,CLOUD_CLIENT.commit().getStatus());
  SolrDocumentList docs=CLOUD_CLIENT.query(params("q","*:*","fl","id,expected_shard_s,[shard]")).getResults();
  assertEquals(2,docs.getNumFound());
  assertEquals(2,docs.size());
  for (  SolrDocument doc : docs) {
    String expected=COLLECTION_NAME + "_" + doc.getFirstValue("expected_shard_s")+ "_replica";
    String docShard=doc.getFirstValue("[shard]").toString();
    assertTrue("shard routing prefixes don't seem to be aligned anymore, " + "did someone change the default routing rules? " + "and/or the the default core name rules? "+ "and/or the numShards used by this test? ... "+ "couldn't find " + expected + " as substring of [shard] == '"+ docShard+ "' ... for docId == "+ doc.getFirstValue("id"),docShard.contains(expected));
  }
}
