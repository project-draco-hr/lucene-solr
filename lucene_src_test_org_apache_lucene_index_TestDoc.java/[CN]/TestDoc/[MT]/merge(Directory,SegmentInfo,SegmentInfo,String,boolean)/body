{
  IOContext context=newIOContext(random);
  SegmentReader r1=SegmentReader.get(true,si1,IndexReader.DEFAULT_TERMS_INDEX_DIVISOR,context);
  SegmentReader r2=SegmentReader.get(true,si2,IndexReader.DEFAULT_TERMS_INDEX_DIVISOR,context);
  final Codec codec=Codec.getDefault();
  SegmentMerger merger=new SegmentMerger(InfoStream.getDefault(),si1.dir,IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,merged,MergeState.CheckAbort.NONE,null,new FieldInfos(new FieldInfos.FieldNumberBiMap()),codec,context);
  merger.add(r1);
  merger.add(r2);
  MergeState mergeState=merger.merge();
  r1.close();
  r2.close();
  final FieldInfos fieldInfos=mergeState.fieldInfos;
  final SegmentInfo info=new SegmentInfo(merged,si1.docCount + si2.docCount,si1.dir,false,codec,fieldInfos);
  if (useCompoundFile) {
    Collection<String> filesToDelete=IndexWriter.createCompoundFile(dir,merged + ".cfs",MergeState.CheckAbort.NONE,info,newIOContext(random));
    info.setUseCompoundFile(true);
    for (    final String fileToDelete : filesToDelete)     si1.dir.deleteFile(fileToDelete);
  }
  return info;
}
