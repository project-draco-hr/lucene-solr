{
  TopOrdAndIntQueue q=null;
  int bottomCount=0;
  int dimCount=0;
  int childCount=0;
  TopOrdAndIntQueue.OrdAndValue reuse=null;
  for (int ord=ordRange.start; ord <= ordRange.end; ord++) {
    if (counts[ord] > 0) {
      dimCount+=counts[ord];
      childCount++;
      if (counts[ord] > bottomCount) {
        if (reuse == null) {
          reuse=new TopOrdAndIntQueue.OrdAndValue();
        }
        reuse.ord=ord;
        reuse.value=counts[ord];
        if (q == null) {
          q=new TopOrdAndIntQueue(topN);
        }
        reuse=q.insertWithOverflow(reuse);
        if (q.size() == topN) {
          bottomCount=q.top().value;
        }
      }
    }
  }
  if (q == null) {
    return null;
  }
  BytesRef scratch=new BytesRef();
  LabelAndValue[] labelValues=new LabelAndValue[q.size()];
  for (int i=labelValues.length - 1; i >= 0; i--) {
    TopOrdAndIntQueue.OrdAndValue ordAndValue=q.pop();
    dv.lookupOrd(ordAndValue.ord,scratch);
    String[] parts=FacetsConfig.stringToPath(scratch.utf8ToString());
    labelValues[i]=new LabelAndValue(parts[1],ordAndValue.value);
  }
  return new SimpleFacetResult(dimCount,labelValues,childCount);
}
