{
  Map<CharSequence,Float> boosts=new HashMap<CharSequence,Float>();
  boosts.put("b",Float.valueOf(5));
  boosts.put("t",Float.valueOf(10));
  String[] fields={"b","t"};
  MultiFieldQueryParserWrapper mfqp=new MultiFieldQueryParserWrapper(fields,new StandardAnalyzer(TEST_VERSION_CURRENT),boosts);
  Query q=mfqp.parse("one");
  assertEquals("b:one^5.0 t:one^10.0",q.toString());
  q=mfqp.parse("one AND two");
  assertEquals("+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)",q.toString());
  q=mfqp.parse("one OR two");
  assertEquals("(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)",q.toString());
  q=mfqp.parse("one AND two AND foo:test");
  assertEquals("+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test",q.toString());
  q=mfqp.parse("one^3 AND two^4");
  assertEquals("+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)",q.toString());
}
