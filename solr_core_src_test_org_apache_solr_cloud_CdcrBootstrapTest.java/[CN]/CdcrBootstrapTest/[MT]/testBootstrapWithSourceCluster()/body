{
  MiniSolrCloudCluster target=new MiniSolrCloudCluster(1,createTempDir("cdcr-target"),buildJettyConfig("/solr"));
  try {
    target.waitForAllNodes(30);
    System.out.println("Target zkHost = " + target.getZkServer().getZkAddress());
    System.setProperty("cdcr.target.zkHost",target.getZkServer().getZkAddress());
    MiniSolrCloudCluster source=new MiniSolrCloudCluster(1,createTempDir("cdcr-source"),buildJettyConfig("/solr"));
    try {
      source.waitForAllNodes(30);
      final File configDir=getFile("solr").toPath().resolve("configsets/cdcr-source").toFile();
      System.out.println("config dir absolute path = " + configDir.getAbsolutePath());
      source.uploadConfigDir(configDir,"cdcr-source");
      Map<String,String> collectionProperties=new HashMap<>();
      collectionProperties.putIfAbsent("solr.directoryFactory","solr.StandardDirectoryFactory");
      source.createCollection("cdcr-source",1,1,"cdcr-source",collectionProperties);
      source.getSolrClient().getZkStateReader().forceUpdateCollection("cdcr-source");
      AbstractDistribZkTestBase.waitForRecoveriesToFinish("cdcr-source",source.getSolrClient().getZkStateReader(),true,true,330);
      CloudSolrClient sourceSolrClient=source.getSolrClient();
      sourceSolrClient.setDefaultCollection("cdcr-source");
      int numDocs=0;
      for (int k=0; k < 100; k++) {
        UpdateRequest req=new UpdateRequest();
        for (; numDocs < (k + 1) * 100; numDocs++) {
          SolrInputDocument doc=new SolrInputDocument();
          doc.addField("id","source_" + numDocs);
          doc.addField("xyz",numDocs);
          req.add(doc);
        }
        req.setAction(AbstractUpdateRequest.ACTION.COMMIT,true,true);
        System.out.println("Adding 100 docs with commit=true, numDocs=" + numDocs);
        req.process(sourceSolrClient);
      }
      QueryResponse response=sourceSolrClient.query(new SolrQuery("*:*"));
      assertEquals("",numDocs,response.getResults().getNumFound());
      final File targetConfigDir=getFile("solr").toPath().resolve("configsets/cdcr-target").toFile();
      target.uploadConfigDir(targetConfigDir,"cdcr-target");
      target.createCollection("cdcr-target",1,1,"cdcr-target",Collections.emptyMap());
      target.getSolrClient().getZkStateReader().forceUpdateCollection("cdcr-target");
      AbstractDistribZkTestBase.waitForRecoveriesToFinish("cdcr-target",target.getSolrClient().getZkStateReader(),true,true,330);
      CloudSolrClient targetSolrClient=target.getSolrClient();
      targetSolrClient.setDefaultCollection("cdcr-target");
      cdcrStart(targetSolrClient);
      cdcrStart(sourceSolrClient);
      response=getCdcrQueue(sourceSolrClient);
      System.out.println("Cdcr queue response: " + response.getResponse());
      long foundDocs=waitForTargetToSync(numDocs,targetSolrClient);
      assertEquals("Document mismatch on target after sync",numDocs,foundDocs);
      cdcrStop(sourceSolrClient);
      cdcrDisableBuffer(sourceSolrClient);
      int c=0;
      for (int k=0; k < 100; k++) {
        UpdateRequest req=new UpdateRequest();
        for (; c < (k + 1) * 100; c++, numDocs++) {
          SolrInputDocument doc=new SolrInputDocument();
          doc.addField("id","source_" + numDocs);
          doc.addField("xyz",numDocs);
          req.add(doc);
        }
        req.setAction(AbstractUpdateRequest.ACTION.COMMIT,true,true);
        System.out.println("Adding 100 docs with commit=true, numDocs=" + numDocs);
        req.process(sourceSolrClient);
      }
      response=sourceSolrClient.query(new SolrQuery("*:*"));
      assertEquals("",numDocs,response.getResults().getNumFound());
      cdcrStart(sourceSolrClient);
      cdcrEnableBuffer(sourceSolrClient);
      foundDocs=waitForTargetToSync(numDocs,targetSolrClient);
      assertEquals("Document mismatch on target after sync",numDocs,foundDocs);
    }
  finally {
      source.shutdown();
    }
  }
  finally {
    target.shutdown();
  }
}
