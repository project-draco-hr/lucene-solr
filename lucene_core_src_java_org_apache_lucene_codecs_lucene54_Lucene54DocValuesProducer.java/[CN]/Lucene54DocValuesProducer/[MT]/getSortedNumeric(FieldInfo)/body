{
  SortedSetEntry ss=sortedNumerics.get(field.name);
  if (ss.format == SORTED_SINGLE_VALUED) {
    NumericEntry numericEntry=numerics.get(field.name);
    final LongValues values=getNumeric(numericEntry);
    final Bits docsWithField;
    if (numericEntry.format == SPARSE_COMPRESSED) {
      docsWithField=((SparseLongValues)values).docsWithField;
    }
 else {
      docsWithField=getLiveBits(numericEntry.missingOffset,maxDoc);
    }
    return DocValues.singleton(values,docsWithField);
  }
 else   if (ss.format == SORTED_WITH_ADDRESSES) {
    NumericEntry numericEntry=numerics.get(field.name);
    final LongValues values=getNumeric(numericEntry);
    final LongValues ordIndex=getOrdIndexInstance(field,ordIndexes.get(field.name));
    return new SortedNumericDocValues(){
      long startOffset;
      long endOffset;
      @Override public void setDocument(      int doc){
        startOffset=ordIndex.get(doc);
        endOffset=ordIndex.get(doc + 1L);
      }
      @Override public long valueAt(      int index){
        return values.get(startOffset + index);
      }
      @Override public int count(){
        return (int)(endOffset - startOffset);
      }
    }
;
  }
 else   if (ss.format == SORTED_SET_TABLE) {
    NumericEntry entry=ords.get(field.name);
    final LongValues ordinals=getNumeric(entry);
    final long[] table=ss.table;
    final int[] offsets=ss.tableOffsets;
    return new SortedNumericDocValues(){
      int startOffset;
      int endOffset;
      @Override public void setDocument(      int doc){
        final int ord=(int)ordinals.get(doc);
        startOffset=offsets[ord];
        endOffset=offsets[ord + 1];
      }
      @Override public long valueAt(      int index){
        return table[startOffset + index];
      }
      @Override public int count(){
        return endOffset - startOffset;
      }
    }
;
  }
 else {
    throw new AssertionError();
  }
}
