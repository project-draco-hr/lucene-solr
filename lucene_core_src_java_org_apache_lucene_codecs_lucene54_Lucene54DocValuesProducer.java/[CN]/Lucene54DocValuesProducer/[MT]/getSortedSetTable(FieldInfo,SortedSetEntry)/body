{
  final long valueCount=binaries.get(field.name).count;
  final LongBinaryDocValues binary=(LongBinaryDocValues)getLegacyBinary(field);
  final NumericEntry ordinalsEntry=ords.get(field.name);
  final LongValues ordinals=getNumeric(ordinalsEntry);
  final long[] table=ss.table;
  final int[] offsets=ss.tableOffsets;
  return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues(){
    int offset, startOffset, endOffset;
    @Override public void setDocument(    int docID){
      final int ord=(int)ordinals.get(docID);
      offset=startOffset=offsets[ord];
      endOffset=offsets[ord + 1];
    }
    @Override public long nextOrd(){
      if (offset == endOffset) {
        return NO_MORE_ORDS;
      }
 else {
        return table[offset++];
      }
    }
    @Override public BytesRef lookupOrd(    long ord){
      return binary.get(ord);
    }
    @Override public long getValueCount(){
      return valueCount;
    }
    @Override public long lookupTerm(    BytesRef key){
      if (binary instanceof CompressedBinaryDocValues) {
        return ((CompressedBinaryDocValues)binary).lookupTerm(key);
      }
 else {
        return super.lookupTerm(key);
      }
    }
    @Override public TermsEnum termsEnum(){
      if (binary instanceof CompressedBinaryDocValues) {
        return ((CompressedBinaryDocValues)binary).getTermsEnum();
      }
 else {
        return super.termsEnum();
      }
    }
  }
,maxDoc);
}
