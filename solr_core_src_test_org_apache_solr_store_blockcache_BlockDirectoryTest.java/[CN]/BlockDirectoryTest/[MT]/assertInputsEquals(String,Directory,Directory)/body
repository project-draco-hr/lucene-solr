{
  int reads=random.nextInt(MAX_NUMBER_OF_READS);
  IndexInput fsInput=fsDir.openInput(name,new IOContext());
  IndexInput hdfsInput=hdfs.openInput(name,new IOContext());
  assertEquals(fsInput.length(),hdfsInput.length());
  int fileLength=(int)fsInput.length();
  for (int i=0; i < reads; i++) {
    int rnd;
    if (fileLength == 0) {
      rnd=0;
    }
 else {
      rnd=random.nextInt(Math.min(MAX_BUFFER_SIZE - MIN_BUFFER_SIZE,fileLength));
    }
    byte[] fsBuf=new byte[rnd + MIN_BUFFER_SIZE];
    byte[] hdfsBuf=new byte[fsBuf.length];
    int offset=random.nextInt(fsBuf.length);
    int length=random.nextInt(fsBuf.length - offset);
    int pos;
    if (fileLength == 0) {
      pos=0;
    }
 else {
      pos=random.nextInt(fileLength - length);
    }
    fsInput.seek(pos);
    fsInput.readBytes(fsBuf,offset,length);
    hdfsInput.seek(pos);
    hdfsInput.readBytes(hdfsBuf,offset,length);
    for (int f=offset; f < length; f++) {
      if (fsBuf[f] != hdfsBuf[f]) {
        fail("read [" + i + "]");
      }
    }
  }
  fsInput.close();
  hdfsInput.close();
}
