{
  TokenStream stream=new WhitespaceTokenizer(new StringReader("Des mot cl??s ?? LA CHA??NE ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??? ???"));
  ISOLatin1AccentFilter filter=new ISOLatin1AccentFilter(stream);
  final Token reusableToken=new Token();
  assertEquals("Des",filter.next(reusableToken).term());
  assertEquals("mot",filter.next(reusableToken).term());
  assertEquals("cles",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("LA",filter.next(reusableToken).term());
  assertEquals("CHAINE",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("A",filter.next(reusableToken).term());
  assertEquals("AE",filter.next(reusableToken).term());
  assertEquals("C",filter.next(reusableToken).term());
  assertEquals("E",filter.next(reusableToken).term());
  assertEquals("E",filter.next(reusableToken).term());
  assertEquals("E",filter.next(reusableToken).term());
  assertEquals("E",filter.next(reusableToken).term());
  assertEquals("I",filter.next(reusableToken).term());
  assertEquals("I",filter.next(reusableToken).term());
  assertEquals("I",filter.next(reusableToken).term());
  assertEquals("I",filter.next(reusableToken).term());
  assertEquals("IJ",filter.next(reusableToken).term());
  assertEquals("D",filter.next(reusableToken).term());
  assertEquals("N",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("O",filter.next(reusableToken).term());
  assertEquals("OE",filter.next(reusableToken).term());
  assertEquals("TH",filter.next(reusableToken).term());
  assertEquals("U",filter.next(reusableToken).term());
  assertEquals("U",filter.next(reusableToken).term());
  assertEquals("U",filter.next(reusableToken).term());
  assertEquals("U",filter.next(reusableToken).term());
  assertEquals("Y",filter.next(reusableToken).term());
  assertEquals("Y",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("a",filter.next(reusableToken).term());
  assertEquals("ae",filter.next(reusableToken).term());
  assertEquals("c",filter.next(reusableToken).term());
  assertEquals("e",filter.next(reusableToken).term());
  assertEquals("e",filter.next(reusableToken).term());
  assertEquals("e",filter.next(reusableToken).term());
  assertEquals("e",filter.next(reusableToken).term());
  assertEquals("i",filter.next(reusableToken).term());
  assertEquals("i",filter.next(reusableToken).term());
  assertEquals("i",filter.next(reusableToken).term());
  assertEquals("i",filter.next(reusableToken).term());
  assertEquals("ij",filter.next(reusableToken).term());
  assertEquals("d",filter.next(reusableToken).term());
  assertEquals("n",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("o",filter.next(reusableToken).term());
  assertEquals("oe",filter.next(reusableToken).term());
  assertEquals("ss",filter.next(reusableToken).term());
  assertEquals("th",filter.next(reusableToken).term());
  assertEquals("u",filter.next(reusableToken).term());
  assertEquals("u",filter.next(reusableToken).term());
  assertEquals("u",filter.next(reusableToken).term());
  assertEquals("u",filter.next(reusableToken).term());
  assertEquals("y",filter.next(reusableToken).term());
  assertEquals("y",filter.next(reusableToken).term());
  assertEquals("fi",filter.next(reusableToken).term());
  assertEquals("fl",filter.next(reusableToken).term());
  assertNull(filter.next(reusableToken));
}
