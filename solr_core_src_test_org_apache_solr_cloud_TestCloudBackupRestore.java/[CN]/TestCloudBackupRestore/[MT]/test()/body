{
  String collectionName="backuprestore";
  boolean isImplicit=random().nextBoolean();
  int replFactor=TestUtil.nextInt(random(),1,2);
  CollectionAdminRequest.Create create=CollectionAdminRequest.createCollection(collectionName,"conf1",NUM_SHARDS,replFactor);
  if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {
    create.setMaxShardsPerNode(NUM_SHARDS);
  }
  if (random().nextBoolean()) {
    create.setAutoAddReplicas(true);
  }
  Properties coreProps=new Properties();
  coreProps.put("customKey","customValue");
  create.setProperties(coreProps);
  if (isImplicit) {
    create.setRouterName(ImplicitDocRouter.NAME);
    create.setNumShards(null);
    create.setShards("shard1,shard2");
    create.setRouterField("shard_s");
  }
 else {
    if (random().nextBoolean()) {
      create.setRouterField("shard_s");
    }
  }
  CloudSolrClient solrClient=cluster.getSolrClient();
  create.process(solrClient);
  indexDocs(collectionName);
  if (!isImplicit && random().nextBoolean()) {
    int prevActiveSliceCount=getActiveSliceCount(collectionName);
    CollectionAdminRequest.SplitShard splitShard=CollectionAdminRequest.splitShard(collectionName);
    splitShard.setShardName("shard1");
    splitShard.process(solrClient);
    for (int i=0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {
      assertTrue(i < 30);
      Thread.sleep(500);
    }
    solrClient.commit(collectionName);
  }
  testBackupAndRestore(collectionName);
}
