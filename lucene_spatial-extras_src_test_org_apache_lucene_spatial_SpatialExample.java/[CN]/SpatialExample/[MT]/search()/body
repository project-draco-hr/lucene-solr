{
  IndexReader indexReader=DirectoryReader.open(directory);
  IndexSearcher indexSearcher=new IndexSearcher(indexReader);
  Sort idSort=new Sort(new SortField("id",SortField.Type.INT));
{
    SpatialArgs args=new SpatialArgs(SpatialOperation.Intersects,ctx.makeCircle(-80.0,33.0,DistanceUtils.dist2Degrees(200,DistanceUtils.EARTH_MEAN_RADIUS_KM)));
    Query query=strategy.makeQuery(args);
    TopDocs docs=indexSearcher.search(query,10,idSort);
    assertDocMatchedIds(indexSearcher,docs,2);
    Document doc1=indexSearcher.doc(docs.scoreDocs[0].doc);
    String doc1Str=doc1.getField(strategy.getFieldName()).stringValue();
    int spaceIdx=doc1Str.indexOf(' ');
    double x=Double.parseDouble(doc1Str.substring(0,spaceIdx));
    double y=Double.parseDouble(doc1Str.substring(spaceIdx + 1));
    double doc1DistDEG=ctx.calcDistance(args.getShape().getCenter(),x,y);
    assertEquals(121.6d,DistanceUtils.degrees2Dist(doc1DistDEG,DistanceUtils.EARTH_MEAN_RADIUS_KM),0.1);
    assertEquals(121.6d,doc1DistDEG * DistanceUtils.DEG_TO_KM,0.1);
  }
{
    Point pt=ctx.makePoint(60,-50);
    ValueSource valueSource=strategy.makeDistanceValueSource(pt,DistanceUtils.DEG_TO_KM);
    Sort distSort=new Sort(valueSource.getSortField(false)).rewrite(indexSearcher);
    TopDocs docs=indexSearcher.search(new MatchAllDocsQuery(),10,distSort);
    assertDocMatchedIds(indexSearcher,docs,4,20,2);
  }
{
    SpatialArgs args=new SpatialArgs(SpatialOperation.Intersects,ctx.makeCircle(-80.0,33.0,1));
    SpatialArgs args2=new SpatialArgsParser().parse("Intersects(BUFFER(POINT(-80 33),1))",ctx);
    assertEquals(args.toString(),args2.toString());
  }
  indexReader.close();
}
