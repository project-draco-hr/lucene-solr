{
  this.key=key;
  List<String> partsList=new ArrayList<>(3);
  int firstSeparatorPos=key.indexOf(SEPARATOR);
  if (-1 == firstSeparatorPos) {
    partsList.add(key);
  }
 else {
    partsList.add(key.substring(0,firstSeparatorPos));
    int lastPos=key.length() - 1;
    if (firstSeparatorPos < lastPos) {
      int secondSeparatorPos=key.indexOf(SEPARATOR,firstSeparatorPos + 1);
      if (-1 == secondSeparatorPos) {
        partsList.add(key.substring(firstSeparatorPos + 1));
      }
 else       if (secondSeparatorPos == lastPos) {
        if (firstSeparatorPos < secondSeparatorPos - 1) {
          partsList.add(key.substring(firstSeparatorPos + 1,secondSeparatorPos));
        }
      }
 else {
        partsList.add(key.substring(firstSeparatorPos + 1,secondSeparatorPos));
        partsList.add(key.substring(secondSeparatorPos + 1));
      }
    }
  }
  pieces=partsList.size();
  String[] parts=partsList.toArray(new String[pieces]);
  numBits=new int[2];
  if (key.endsWith("!") && pieces < 3)   pieces++;
  hashes=new int[pieces];
  if (pieces == 3) {
    numBits[0]=8;
    numBits[1]=8;
    triLevel=true;
  }
 else {
    numBits[0]=16;
    triLevel=false;
  }
  for (int i=0; i < pieces; i++) {
    if (i < pieces - 1) {
      int commaIdx=parts[i].indexOf(bitsSeparator);
      if (commaIdx > 0) {
        numBits[i]=getNumBits(parts[i],commaIdx);
        parts[i]=parts[i].substring(0,commaIdx);
      }
    }
    if (i >= parts.length)     hashes[i]=Hash.murmurhash3_x86_32("",0,"".length(),0);
 else     hashes[i]=Hash.murmurhash3_x86_32(parts[i],0,parts[i].length(),0);
  }
  masks=getMasks();
}
