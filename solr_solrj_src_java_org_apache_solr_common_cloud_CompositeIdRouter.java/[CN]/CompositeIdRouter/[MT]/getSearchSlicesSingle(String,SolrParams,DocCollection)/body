{
  if (shardKey == null) {
    return collection.getSlices();
  }
  String id=shardKey;
  int idx=shardKey.indexOf(separator);
  if (idx < 0) {
    return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id,0,id.length(),0),collection));
  }
  int m1=mask1;
  int m2=mask2;
  String part1=id.substring(0,idx);
  int bitsSepIdx=part1.indexOf(bitsSepartor);
  if (bitsSepIdx > 0) {
    int firstBits=getBits(part1,bitsSepIdx);
    if (firstBits >= 0) {
      m1=firstBits == 0 ? 0 : (-1 << (32 - firstBits));
      m2=firstBits == 32 ? 0 : (-1 >>> firstBits);
      part1=part1.substring(0,bitsSepIdx);
    }
  }
  int hash1=Hash.murmurhash3_x86_32(part1,0,part1.length(),0);
  int upperBits=hash1 & m1;
  int lowerBound=upperBits;
  int upperBound=upperBits | m2;
  if (m1 == 0) {
    lowerBound=Integer.MIN_VALUE;
    upperBound=Integer.MAX_VALUE;
  }
  Range completeRange=new Range(lowerBound,upperBound);
  List<Slice> targetSlices=new ArrayList<Slice>(1);
  for (  Slice slice : collection.getSlices()) {
    Range range=slice.getRange();
    if (range != null && range.overlaps(completeRange)) {
      targetSlices.add(slice);
    }
  }
  return targetSlices;
}
