{
  ParallelReader pr=new ParallelReader();
  pr.add(ir1);
  pr.add(ir2);
  Bits liveDocs=pr.getLiveDocs();
  FieldsEnum fe=pr.fields().iterator();
  String f=fe.next();
  assertEquals("field0",f);
  f=fe.next();
  assertEquals("field1",f);
  TermsEnum te=fe.terms();
  assertEquals("brown",te.next().utf8ToString());
  DocsEnum td=te.docs(liveDocs,null);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("fox",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("jumps",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("quick",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("the",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertNull(te.next());
  f=fe.next();
  assertEquals("field2",f);
  te=fe.terms();
  assertEquals("brown",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("fox",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("jumps",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("quick",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("the",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertNull(te.next());
  f=fe.next();
  assertEquals("field3",f);
  te=fe.terms();
  assertEquals("dog",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("fox",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("jumps",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("lazy",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("over",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertEquals("the",te.next().utf8ToString());
  td=te.docs(liveDocs,td);
  assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(0,td.docID());
  assertEquals(td.nextDoc(),DocsEnum.NO_MORE_DOCS);
  assertNull(te.next());
}
