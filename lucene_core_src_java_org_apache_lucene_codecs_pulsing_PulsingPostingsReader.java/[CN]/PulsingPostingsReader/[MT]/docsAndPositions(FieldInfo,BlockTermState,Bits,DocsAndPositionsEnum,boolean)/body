{
  if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
    return null;
  }
 else   if (needsOffsets && field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {
    return null;
  }
  final PulsingTermState termState=(PulsingTermState)_termState;
  if (termState.postingsSize != -1) {
    PulsingDocsAndPositionsEnum postings;
    if (reuse instanceof PulsingDocsAndPositionsEnum) {
      postings=(PulsingDocsAndPositionsEnum)reuse;
      if (!postings.canReuse(field)) {
        postings=new PulsingDocsAndPositionsEnum(field);
      }
    }
 else {
      PulsingDocsAndPositionsEnum previous=(PulsingDocsAndPositionsEnum)getOther(reuse);
      if (previous != null && previous.canReuse(field)) {
        postings=previous;
      }
 else {
        postings=new PulsingDocsAndPositionsEnum(field);
      }
    }
    if (reuse != postings) {
      setOther(postings,reuse);
    }
    return postings.reset(liveDocs,termState);
  }
 else {
    if (reuse instanceof PulsingDocsAndPositionsEnum) {
      DocsAndPositionsEnum wrapped=wrappedPostingsReader.docsAndPositions(field,termState.wrappedTermState,liveDocs,(DocsAndPositionsEnum)getOther(reuse),needsOffsets);
      setOther(wrapped,reuse);
      return wrapped;
    }
 else {
      return wrappedPostingsReader.docsAndPositions(field,termState.wrappedTermState,liveDocs,reuse,needsOffsets);
    }
  }
}
