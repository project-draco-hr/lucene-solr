{
  if ((globalQueue.size() >= numHits) && (globalQueue.lessThan(addition,globalQueue.top()))) {
    return addition;
  }
  int leafDocID=addition.doc - docBase;
  long value;
  if (keys.docID() < leafDocID) {
    keys.advance(leafDocID);
  }
  if (keys.docID() == leafDocID) {
    value=keys.longValue();
  }
 else {
    value=0;
  }
  addition.key=value;
  ScoreDocKeyQueue thisKeyQ=perKeyQueues.get(addition.key);
  if (thisKeyQ == null) {
    if (sparePerKeyQueues.size() == 0) {
      thisKeyQ=new ScoreDocKeyQueue(maxNumPerKey);
    }
 else {
      thisKeyQ=sparePerKeyQueues.pop();
    }
    perKeyQueues.put(addition.key,thisKeyQ);
  }
  ScoreDocKey perKeyOverflow=thisKeyQ.insertWithOverflow(addition);
  if (perKeyOverflow == addition) {
    return addition;
  }
  if (perKeyOverflow == null) {
    ScoreDocKey globalOverflow=globalQueue.insertWithOverflow(addition);
    perKeyGroupRemove(globalOverflow);
    return globalOverflow;
  }
  globalQueue.remove(perKeyOverflow);
  globalQueue.add(addition);
  return perKeyOverflow;
}
