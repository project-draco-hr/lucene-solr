{
  return new ScoredDocIDs(){
    private int size=-1;
    @Override public DocIdSet getDocIDs(){
      return docIdSet;
    }
    @Override public ScoredDocIDsIterator iterator() throws IOException {
      final DocIdSetIterator docIterator=docIdSet.iterator();
      return new ScoredDocIDsIterator(){
        @Override public boolean next(){
          try {
            return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
        @Override public float getScore(){
          return DEFAULT_SCORE;
        }
        @Override public int getDocID(){
          return docIterator.docID();
        }
      }
;
    }
    @Override public int size(){
      if (size < 0) {
        OpenBitSetDISI openBitSetDISI;
        try {
          openBitSetDISI=new OpenBitSetDISI(docIdSet.iterator(),maxDoc);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        size=(int)openBitSetDISI.cardinality();
      }
      return size;
    }
  }
;
}
