{
  File dir=new File(TEMP_DIR,"testfilesplitter");
  _TestUtil.rmDir(dir);
  dir.mkdirs();
  File destDir=new File(TEMP_DIR,"testfilesplitterdest");
  _TestUtil.rmDir(destDir);
  destDir.mkdirs();
  Directory fsDir=newFSDirectory(dir);
  LogMergePolicy mergePolicy=new LogByteSizeMergePolicy();
  mergePolicy.setNoCFSRatio(1);
  IndexWriter iw=new IndexWriter(fsDir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(mergePolicy));
  for (int x=0; x < 100; x++) {
    Document doc=TestIndexWriterReader.createDocument(x,"index",5);
    iw.addDocument(doc);
  }
  iw.commit();
  for (int x=100; x < 150; x++) {
    Document doc=TestIndexWriterReader.createDocument(x,"index2",5);
    iw.addDocument(doc);
  }
  iw.commit();
  for (int x=150; x < 200; x++) {
    Document doc=TestIndexWriterReader.createDocument(x,"index3",5);
    iw.addDocument(doc);
  }
  iw.commit();
  IndexReader iwReader=iw.getReader();
  assertEquals(3,iwReader.getSequentialSubReaders().length);
  iwReader.close();
  iw.close();
  IndexSplitter is=new IndexSplitter(dir);
  String splitSegName=is.infos.info(1).name;
  is.split(destDir,new String[]{splitSegName});
  Directory fsDirDest=newFSDirectory(destDir);
  IndexReader r=IndexReader.open(fsDirDest,true);
  assertEquals(50,r.maxDoc());
  r.close();
  fsDirDest.close();
  File destDir2=new File(TEMP_DIR,"testfilesplitterdest2");
  _TestUtil.rmDir(destDir2);
  destDir2.mkdirs();
  IndexSplitter.main(new String[]{dir.getAbsolutePath(),destDir2.getAbsolutePath(),splitSegName});
  assertEquals(4,destDir2.listFiles().length);
  Directory fsDirDest2=newFSDirectory(destDir2);
  r=IndexReader.open(fsDirDest2,true);
  assertEquals(50,r.maxDoc());
  r.close();
  fsDirDest2.close();
  IndexSplitter.main(new String[]{dir.getAbsolutePath(),"-d",splitSegName});
  r=IndexReader.open(fsDir,true);
  assertEquals(2,r.getSequentialSubReaders().length);
  r.close();
  fsDir.close();
}
