{
  FieldCache cache=FieldCache.DEFAULT;
  NumericDocValues doubles=cache.getNumerics(reader,"theDouble",FieldCache.LEGACY_DOUBLE_PARSER);
  for (int i=0; i < NUM_DOCS; i++) {
    assertEquals(i,doubles.nextDoc());
    assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i),doubles.longValue());
  }
  NumericDocValues longs=cache.getNumerics(reader,"theLong",FieldCache.LEGACY_LONG_PARSER);
  for (int i=0; i < NUM_DOCS; i++) {
    assertEquals(i,longs.nextDoc());
    assertEquals(Long.MAX_VALUE - i,longs.longValue());
  }
  NumericDocValues ints=cache.getNumerics(reader,"theInt",FieldCache.LEGACY_INT_PARSER);
  for (int i=0; i < NUM_DOCS; i++) {
    assertEquals(i,ints.nextDoc());
    assertEquals(Integer.MAX_VALUE - i,ints.longValue());
  }
  NumericDocValues floats=cache.getNumerics(reader,"theFloat",FieldCache.LEGACY_FLOAT_PARSER);
  for (int i=0; i < NUM_DOCS; i++) {
    assertEquals(i,floats.nextDoc());
    assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i),floats.longValue());
  }
  Bits docsWithField=cache.getDocsWithField(reader,"theLong",null);
  assertSame("Second request to cache return same array",docsWithField,cache.getDocsWithField(reader,"theLong",null));
  assertTrue("docsWithField(theLong) must be class Bits.MatchAllBits",docsWithField instanceof Bits.MatchAllBits);
  assertTrue("docsWithField(theLong) Size: " + docsWithField.length() + " is not: "+ NUM_DOCS,docsWithField.length() == NUM_DOCS);
  for (int i=0; i < docsWithField.length(); i++) {
    assertTrue(docsWithField.get(i));
  }
  docsWithField=cache.getDocsWithField(reader,"sparse",null);
  assertSame("Second request to cache return same array",docsWithField,cache.getDocsWithField(reader,"sparse",null));
  assertFalse("docsWithField(sparse) must not be class Bits.MatchAllBits",docsWithField instanceof Bits.MatchAllBits);
  assertTrue("docsWithField(sparse) Size: " + docsWithField.length() + " is not: "+ NUM_DOCS,docsWithField.length() == NUM_DOCS);
  for (int i=0; i < docsWithField.length(); i++) {
    assertEquals(i % 2 == 0,docsWithField.get(i));
  }
  FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());
}
