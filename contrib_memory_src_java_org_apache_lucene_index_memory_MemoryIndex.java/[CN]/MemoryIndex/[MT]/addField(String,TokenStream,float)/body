{
  try {
    if (fieldName == null)     throw new IllegalArgumentException("fieldName must not be null");
    if (stream == null)     throw new IllegalArgumentException("token stream must not be null");
    if (boost <= 0.0f)     throw new IllegalArgumentException("boost factor must be greater than 0.0");
    if (fields.get(fieldName) != null)     throw new IllegalArgumentException("field must not be added more than once");
    HashMap terms=new HashMap();
    int numTokens=0;
    int pos=-1;
    Token token;
    while ((token=stream.next()) != null) {
      String term=token.termText();
      if (term.length() == 0)       continue;
      numTokens++;
      pos+=token.getPositionIncrement();
      ArrayIntList positions=(ArrayIntList)terms.get(term);
      if (positions == null) {
        positions=new ArrayIntList(stride);
        terms.put(term,positions);
      }
      if (stride == 1) {
        positions.add(pos);
      }
 else {
        positions.add(pos,token.startOffset(),token.endOffset());
      }
    }
    if (numTokens > 0) {
      boost=boost * docBoost;
      fields.put(fieldName,new Info(terms,numTokens,boost));
      sortedFields=null;
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (stream != null)       stream.close();
    }
 catch (    IOException e2) {
      throw new RuntimeException(e2);
    }
  }
}
