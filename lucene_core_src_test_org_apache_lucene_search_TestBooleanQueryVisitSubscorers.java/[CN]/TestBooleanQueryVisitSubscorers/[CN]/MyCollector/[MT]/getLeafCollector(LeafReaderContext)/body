{
  final int docBase=context.docBase;
  return new FilterLeafCollector(super.getLeafCollector(context)){
    @Override public boolean acceptsDocsOutOfOrder(){
      return false;
    }
    @Override public void setScorer(    Scorer scorer) throws IOException {
      super.setScorer(scorer);
      tqsSet.clear();
      fillLeaves(scorer,tqsSet);
    }
    @Override public void collect(    int doc) throws IOException {
      int freq=0;
      for (      Scorer scorer : tqsSet) {
        if (doc == scorer.docID()) {
          freq+=scorer.freq();
        }
      }
      docCounts.put(doc + docBase,freq);
      super.collect(doc);
    }
  }
;
}
