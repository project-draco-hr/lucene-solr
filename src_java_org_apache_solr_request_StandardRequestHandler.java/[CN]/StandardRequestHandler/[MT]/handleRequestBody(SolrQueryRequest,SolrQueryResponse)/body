{
  SolrParams p=req.getParams();
  String qstr=p.required().get(Q);
  String defaultField=p.get(DF);
  String fl=p.get(SolrParams.FL);
  int flags=0;
  if (fl != null) {
    flags|=U.setReturnFields(fl,rsp);
  }
  String sortStr=p.get(SORT);
  if (sortStr == null) {
    List<String> commands=StrUtils.splitSmart(qstr,';');
    if (commands.size() == 2) {
      qstr=commands.get(0);
      sortStr=commands.get(1);
    }
 else     if (commands.size() == 1) {
      qstr=commands.get(0);
    }
 else     if (commands.size() > 2) {
      throw new SolrException(400,"If you want to use multiple ';' in the query, use the 'sort' param.");
    }
  }
  Sort sort=null;
  if (sortStr != null) {
    QueryParsing.SortSpec sortSpec=QueryParsing.parseSort(sortStr,req.getSchema());
    if (sortSpec != null) {
      sort=sortSpec.getSort();
    }
  }
  Query query=QueryParsing.parseQuery(qstr,defaultField,p,req.getSchema());
  DocListAndSet results=new DocListAndSet();
  NamedList facetInfo=null;
  List<Query> filters=U.parseFilterQueries(req);
  SolrIndexSearcher s=req.getSearcher();
  if (p.getBool(FACET,false)) {
    results=s.getDocListAndSet(query,filters,sort,p.getInt(START,0),p.getInt(ROWS,10),flags);
    facetInfo=getFacetInfo(req,rsp,results.docSet);
  }
 else {
    results.docList=s.getDocList(query,filters,sort,p.getInt(START,0),p.getInt(ROWS,10),flags);
  }
  U.optimizePreFetchDocs(results.docList,query,req,rsp);
  rsp.add("response",results.docList);
  if (null != facetInfo)   rsp.add("facet_counts",facetInfo);
  try {
    NamedList dbg=U.doStandardDebug(req,qstr,query,results.docList);
    if (null != dbg) {
      if (null != filters) {
        dbg.add("filter_queries",req.getParams().getParams(FQ));
        List<String> fqs=new ArrayList<String>(filters.size());
        for (        Query fq : filters) {
          fqs.add(QueryParsing.toString(fq,req.getSchema()));
        }
        dbg.add("parsed_filter_queries",fqs);
      }
      rsp.add("debug",dbg);
    }
  }
 catch (  Exception e) {
    SolrException.logOnce(SolrCore.log,"Exception during debug",e);
    rsp.add("exception_during_debug",SolrException.toStr(e));
  }
  NamedList sumData=HighlightingUtils.doHighlighting(results.docList,query.rewrite(req.getSearcher().getReader()),req,new String[]{defaultField});
  if (sumData != null)   rsp.add("highlighting",sumData);
}
