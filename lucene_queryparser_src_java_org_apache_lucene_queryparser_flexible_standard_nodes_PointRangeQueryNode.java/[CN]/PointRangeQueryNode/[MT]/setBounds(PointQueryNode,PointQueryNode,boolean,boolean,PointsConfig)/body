{
  if (pointsConfig == null) {
    throw new IllegalArgumentException("pointsConfig must not be null!");
  }
  Class<? extends Number> lowerNumberType, upperNumberType;
  if (lower != null && lower.getValue() != null) {
    lowerNumberType=lower.getValue().getClass();
  }
 else {
    lowerNumberType=null;
  }
  if (upper != null && upper.getValue() != null) {
    upperNumberType=upper.getValue().getClass();
  }
 else {
    upperNumberType=null;
  }
  if (lowerNumberType != null && !lowerNumberType.equals(pointsConfig.getType())) {
    throw new IllegalArgumentException("lower value's type should be the same as numericConfig type: " + lowerNumberType + " != "+ pointsConfig.getType());
  }
  if (upperNumberType != null && !upperNumberType.equals(pointsConfig.getType())) {
    throw new IllegalArgumentException("upper value's type should be the same as numericConfig type: " + upperNumberType + " != "+ pointsConfig.getType());
  }
  super.setBounds(lower,upper,lowerInclusive,upperInclusive);
  this.numericConfig=pointsConfig;
}
