{
  RecyclingByteBlockAllocator allocator=newAllocator();
  HashSet<byte[]> allocated=new HashSet<>();
  int freeButAllocated=0;
  byte[] block=allocator.getByteBlock();
  allocated.add(block);
  assertNotNull(block);
  final int size=block.length;
  int numIters=atLeast(97);
  for (int i=0; i < numIters; i++) {
    int num=1 + random().nextInt(39);
    for (int j=0; j < num; j++) {
      block=allocator.getByteBlock();
      freeButAllocated=Math.max(0,freeButAllocated - 1);
      assertNotNull(block);
      assertEquals(size,block.length);
      assertTrue("block is returned twice",allocated.add(block));
      assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),allocator.bytesUsed());
    }
    byte[][] array=allocated.toArray(new byte[0][]);
    int begin=random().nextInt(array.length);
    int end=begin + random().nextInt(array.length - begin);
    for (int j=begin; j < end; j++) {
      byte[] b=array[j];
      assertTrue(allocated.remove(b));
    }
    allocator.recycleByteBlocks(array,begin,end);
    for (int j=begin; j < end; j++) {
      assertNull(array[j]);
    }
    int numFreeBlocks=allocator.numBufferedBlocks();
    int freeBlocks=allocator.freeBlocks(random().nextInt(7 + allocator.maxBufferedBlocks()));
    assertEquals(allocator.numBufferedBlocks(),numFreeBlocks - freeBlocks);
  }
}
