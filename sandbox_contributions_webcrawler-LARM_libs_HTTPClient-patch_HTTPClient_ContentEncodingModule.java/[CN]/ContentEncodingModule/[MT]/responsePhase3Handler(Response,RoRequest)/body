{
  String ce=resp.getHeader("Content-Encoding");
  if (ce == null || req.getMethod().equals("HEAD") || resp.getStatusCode() == 206) {
    return;
  }
  Vector pce;
  try {
    pce=Util.parseHeader(ce);
  }
 catch (  ParseException pe) {
    throw new ModuleException(pe.toString());
  }
  if (pce.size() == 0) {
    return;
  }
  String encoding=((HttpHeaderElement)pce.firstElement()).getName();
  if (encoding.equalsIgnoreCase("gzip") || encoding.equalsIgnoreCase("x-gzip")) {
    Log.write(Log.MODS,"CEM:   pushing gzip-input-stream");
    resp.inp_stream=new GZIPInputStream(resp.inp_stream);
    pce.removeElementAt(pce.size() - 1);
    resp.deleteHeader("Content-length");
  }
 else   if (encoding.equalsIgnoreCase("deflate")) {
    Log.write(Log.MODS,"CEM:   pushing inflater-input-stream");
    resp.inp_stream=new InflaterInputStream(resp.inp_stream);
    pce.removeElementAt(pce.size() - 1);
    resp.deleteHeader("Content-length");
  }
 else   if (encoding.equalsIgnoreCase("compress") || encoding.equalsIgnoreCase("x-compress")) {
    Log.write(Log.MODS,"CEM:   pushing uncompress-input-stream");
    resp.inp_stream=new UncompressInputStream(resp.inp_stream);
    pce.removeElementAt(pce.size() - 1);
    resp.deleteHeader("Content-length");
  }
 else   if (encoding.equalsIgnoreCase("identity")) {
    Log.write(Log.MODS,"CEM:   ignoring 'identity' token");
    pce.removeElementAt(pce.size() - 1);
  }
 else {
    Log.write(Log.MODS,"CEM:   Unknown content encoding '" + encoding + "'");
  }
  if (pce.size() > 0) {
    resp.setHeader("Content-Encoding",Util.assembleHeader(pce));
  }
 else {
    resp.deleteHeader("Content-Encoding");
  }
}
