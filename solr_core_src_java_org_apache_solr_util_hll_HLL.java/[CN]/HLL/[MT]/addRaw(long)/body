{
switch (type) {
case EMPTY:
{
      if (explicitThreshold > 0) {
        initializeStorage(HLLType.EXPLICIT);
        explicitStorage.add(rawValue);
      }
 else       if (!sparseOff) {
        initializeStorage(HLLType.SPARSE);
        addRawSparseProbabilistic(rawValue);
      }
 else {
        initializeStorage(HLLType.FULL);
        addRawProbabilistic(rawValue);
      }
      return;
    }
case EXPLICIT:
{
    explicitStorage.add(rawValue);
    if (explicitStorage.size() > explicitThreshold) {
      if (!sparseOff) {
        initializeStorage(HLLType.SPARSE);
        for (        LongCursor c : explicitStorage) {
          addRawSparseProbabilistic(c.value);
        }
      }
 else {
        initializeStorage(HLLType.FULL);
        for (        LongCursor c : explicitStorage) {
          addRawProbabilistic(c.value);
        }
      }
      explicitStorage=null;
    }
    return;
  }
case SPARSE:
{
  addRawSparseProbabilistic(rawValue);
  if (sparseProbabilisticStorage.size() > sparseThreshold) {
    initializeStorage(HLLType.FULL);
    for (    IntByteCursor c : sparseProbabilisticStorage) {
      final int registerIndex=c.key;
      final byte registerValue=c.value;
      probabilisticStorage.setMaxRegister(registerIndex,registerValue);
    }
    sparseProbabilisticStorage=null;
  }
  return;
}
case FULL:
addRawProbabilistic(rawValue);
return;
default :
throw new RuntimeException("Unsupported HLL type " + type);
}
}
