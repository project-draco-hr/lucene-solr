{
  final int m=this.m;
  double sum=0;
  int numberOfZeroes=0;
  for (int j=0; j < m; j++) {
    final long register;
    if (sparseProbabilisticStorage.containsKey(j)) {
      register=sparseProbabilisticStorage.lget();
    }
 else {
      register=0;
    }
    sum+=1.0 / (1L << register);
    if (register == 0L)     numberOfZeroes++;
  }
  final double estimator=alphaMSquared / sum;
  if ((numberOfZeroes != 0) && (estimator < smallEstimatorCutoff)) {
    return HLLUtil.smallEstimator(m,numberOfZeroes);
  }
 else   if (estimator <= largeEstimatorCutoff) {
    return estimator;
  }
 else {
    return HLLUtil.largeEstimator(log2m,regwidth,estimator);
  }
}
