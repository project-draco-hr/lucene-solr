{
switch (type) {
case EMPTY:
    return;
case EXPLICIT:
  for (  LongCursor c : other.explicitStorage) {
    addRaw(c.value);
  }
return;
case SPARSE:
for (IntByteCursor c : other.sparseProbabilisticStorage) {
final int registerIndex=c.key;
final byte registerValue=c.value;
final byte currentRegisterValue=sparseProbabilisticStorage.get(registerIndex);
if (registerValue > currentRegisterValue) {
  sparseProbabilisticStorage.put(registerIndex,registerValue);
}
}
if (sparseProbabilisticStorage.size() > sparseThreshold) {
initializeStorage(HLLType.FULL);
for (IntByteCursor c : sparseProbabilisticStorage) {
final int registerIndex=c.key;
final byte registerValue=c.value;
probabilisticStorage.setMaxRegister(registerIndex,registerValue);
}
sparseProbabilisticStorage=null;
}
return;
case FULL:
for (int i=0; i < m; i++) {
final long registerValue=other.probabilisticStorage.getRegister(i);
probabilisticStorage.setMaxRegister(i,registerValue);
}
return;
default :
throw new RuntimeException("Unsupported HLL type " + type);
}
}
