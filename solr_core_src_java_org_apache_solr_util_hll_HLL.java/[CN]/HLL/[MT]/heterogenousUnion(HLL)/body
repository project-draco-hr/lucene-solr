{
  if (HLLType.EMPTY.equals(type)) {
switch (other.getType()) {
case EXPLICIT:
{
        if (other.explicitStorage.size() <= explicitThreshold) {
          type=HLLType.EXPLICIT;
          explicitStorage=other.explicitStorage.clone();
        }
 else {
          if (!sparseOff) {
            initializeStorage(HLLType.SPARSE);
          }
 else {
            initializeStorage(HLLType.FULL);
          }
          for (          LongCursor c : other.explicitStorage) {
            addRaw(c.value);
          }
        }
        return;
      }
case SPARSE:
{
      if (!sparseOff) {
        type=HLLType.SPARSE;
        sparseProbabilisticStorage=other.sparseProbabilisticStorage.clone();
      }
 else {
        initializeStorage(HLLType.FULL);
        for (        IntByteCursor c : other.sparseProbabilisticStorage) {
          final int registerIndex=c.key;
          final byte registerValue=c.value;
          probabilisticStorage.setMaxRegister(registerIndex,registerValue);
        }
      }
      return;
    }
default :
{
    type=HLLType.FULL;
    probabilisticStorage=other.probabilisticStorage.clone();
    return;
  }
}
}
 else if (HLLType.EMPTY.equals(other.getType())) {
return;
}
switch (type) {
case EXPLICIT:
{
if (HLLType.SPARSE.equals(other.getType())) {
  if (!sparseOff) {
    type=HLLType.SPARSE;
    sparseProbabilisticStorage=other.sparseProbabilisticStorage.clone();
  }
 else {
    initializeStorage(HLLType.FULL);
    for (    IntByteCursor c : other.sparseProbabilisticStorage) {
      final int registerIndex=c.key;
      final byte registerValue=c.value;
      probabilisticStorage.setMaxRegister(registerIndex,registerValue);
    }
  }
}
 else {
  type=HLLType.FULL;
  probabilisticStorage=other.probabilisticStorage.clone();
}
for (LongCursor c : explicitStorage) {
  addRaw(c.value);
}
explicitStorage=null;
return;
}
case SPARSE:
{
if (HLLType.EXPLICIT.equals(other.getType())) {
for (LongCursor c : other.explicitStorage) {
  addRaw(c.value);
}
}
 else {
type=HLLType.FULL;
probabilisticStorage=other.probabilisticStorage.clone();
for (IntByteCursor c : sparseProbabilisticStorage) {
  final int registerIndex=c.key;
  final byte registerValue=c.value;
  probabilisticStorage.setMaxRegister(registerIndex,registerValue);
}
sparseProbabilisticStorage=null;
}
return;
}
default :
{
if (HLLType.EXPLICIT.equals(other.getType())) {
for (LongCursor c : other.explicitStorage) {
addRaw(c.value);
}
}
 else {
for (IntByteCursor c : other.sparseProbabilisticStorage) {
final int registerIndex=c.key;
final byte registerValue=c.value;
probabilisticStorage.setMaxRegister(registerIndex,registerValue);
}
}
}
}
}
