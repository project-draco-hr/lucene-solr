{
  this.log2m=log2m;
  if ((log2m < MINIMUM_LOG2M_PARAM) || (log2m > MAXIMUM_LOG2M_PARAM)) {
    throw new IllegalArgumentException("'log2m' must be at least " + MINIMUM_LOG2M_PARAM + " and at most "+ MAXIMUM_LOG2M_PARAM+ " (was: "+ log2m+ ")");
  }
  this.regwidth=regwidth;
  if ((regwidth < MINIMUM_REGWIDTH_PARAM) || (regwidth > MAXIMUM_REGWIDTH_PARAM)) {
    throw new IllegalArgumentException("'regwidth' must be at least " + MINIMUM_REGWIDTH_PARAM + " and at most "+ MAXIMUM_REGWIDTH_PARAM+ " (was: "+ regwidth+ ")");
  }
  this.m=(1 << log2m);
  this.mBitsMask=m - 1;
  this.valueMask=(1 << regwidth) - 1;
  this.pwMaxMask=HLLUtil.pwMaxMask(regwidth);
  this.alphaMSquared=HLLUtil.alphaMSquared(m);
  this.smallEstimatorCutoff=HLLUtil.smallEstimatorCutoff(m);
  this.largeEstimatorCutoff=HLLUtil.largeEstimatorCutoff(log2m,regwidth);
  this.explicitAuto=false;
  this.explicitOff=false;
  this.explicitThreshold=explicitThreshold;
  if ((explicitThreshold < 1) || (explicitThreshold > MAXIMUM_EXPLICIT_THRESHOLD)) {
    throw new IllegalArgumentException("'explicitThreshold' must be at least 1 and at most " + MAXIMUM_EXPLICIT_THRESHOLD + " (was: "+ explicitThreshold+ ")");
  }
  this.shortWordLength=(regwidth + log2m);
  this.sparseOff=false;
  this.sparseThreshold=sparseThreshold;
  initializeStorage(type);
}
