{
  this.log2m=log2m;
  if ((log2m < MINIMUM_LOG2M_PARAM) || (log2m > MAXIMUM_LOG2M_PARAM)) {
    throw new IllegalArgumentException("'log2m' must be at least " + MINIMUM_LOG2M_PARAM + " and at most "+ MAXIMUM_LOG2M_PARAM+ " (was: "+ log2m+ ")");
  }
  this.regwidth=regwidth;
  if ((regwidth < MINIMUM_REGWIDTH_PARAM) || (regwidth > MAXIMUM_REGWIDTH_PARAM)) {
    throw new IllegalArgumentException("'regwidth' must be at least " + MINIMUM_REGWIDTH_PARAM + " and at most "+ MAXIMUM_REGWIDTH_PARAM+ " (was: "+ regwidth+ ")");
  }
  this.m=(1 << log2m);
  this.mBitsMask=m - 1;
  this.valueMask=(1 << regwidth) - 1;
  this.pwMaxMask=HLLUtil.pwMaxMask(regwidth);
  this.alphaMSquared=HLLUtil.alphaMSquared(m);
  this.smallEstimatorCutoff=HLLUtil.smallEstimatorCutoff(m);
  this.largeEstimatorCutoff=HLLUtil.largeEstimatorCutoff(log2m,regwidth);
  if (expthresh == -1) {
    this.explicitAuto=true;
    this.explicitOff=false;
    final long fullRepresentationSize=(this.regwidth * (long)this.m + 7) / Byte.SIZE;
    final int numLongs=(int)(fullRepresentationSize / 8);
    if (numLongs > MAXIMUM_EXPLICIT_THRESHOLD) {
      this.explicitThreshold=MAXIMUM_EXPLICIT_THRESHOLD;
    }
 else {
      this.explicitThreshold=numLongs;
    }
  }
 else   if (expthresh == 0) {
    this.explicitAuto=false;
    this.explicitOff=true;
    this.explicitThreshold=0;
  }
 else   if ((expthresh > 0) && (expthresh <= MAXIMUM_EXPTHRESH_PARAM)) {
    this.explicitAuto=false;
    this.explicitOff=false;
    this.explicitThreshold=(1 << (expthresh - 1));
  }
 else {
    throw new IllegalArgumentException("'expthresh' must be at least " + MINIMUM_EXPTHRESH_PARAM + " and at most "+ MAXIMUM_EXPTHRESH_PARAM+ " (was: "+ expthresh+ ")");
  }
  this.shortWordLength=(regwidth + log2m);
  this.sparseOff=!sparseon;
  if (this.sparseOff) {
    this.sparseThreshold=0;
  }
 else {
    final int largestPow2LessThanCutoff=(int)NumberUtil.log2((this.m * this.regwidth) / this.shortWordLength);
    this.sparseThreshold=(1 << largestPow2LessThanCutoff);
  }
  initializeStorage(type);
}
