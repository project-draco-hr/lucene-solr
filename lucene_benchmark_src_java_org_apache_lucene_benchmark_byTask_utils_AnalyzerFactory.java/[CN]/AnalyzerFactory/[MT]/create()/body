{
  return new Analyzer(){
    private final Integer positionIncrementGap=AnalyzerFactory.this.positionIncrementGap;
    private final Integer offsetGap=AnalyzerFactory.this.offsetGap;
    @Override public Reader initReader(    String fieldName,    Reader reader){
      if (charFilterFactories != null && charFilterFactories.size() > 0) {
        Reader wrappedReader=reader;
        for (        CharFilterFactory charFilterFactory : charFilterFactories) {
          wrappedReader=charFilterFactory.create(wrappedReader);
        }
        reader=wrappedReader;
      }
      return reader;
    }
    @Override protected Analyzer.TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      final Tokenizer tokenizer=tokenizerFactory.create(reader);
      TokenStream tokenStream=tokenizer;
      for (      TokenFilterFactory filterFactory : tokenFilterFactories) {
        tokenStream=filterFactory.create(tokenStream);
      }
      return new TokenStreamComponents(tokenizer,tokenStream);
    }
    @Override public int getPositionIncrementGap(    String fieldName){
      return null == positionIncrementGap ? super.getPositionIncrementGap(fieldName) : positionIncrementGap;
    }
    @Override public int getOffsetGap(    String fieldName){
      return null == offsetGap ? super.getOffsetGap(fieldName) : offsetGap;
    }
  }
;
}
