{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  for (int i=0; i < 10; i++) {
    int lower=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    int upper=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      int a=lower;
      lower=upper;
      upper=a;
    }
    Query tq=new IntTrieRangeQuery(field,precisionStep,new Integer(lower),new Integer(upper),true,true);
    TopDocs topDocs=searcher.search(tq,null,noDocs,new Sort(TrieUtils.getIntSortField(field,true)));
    if (topDocs.totalHits == 0)     continue;
    ScoreDoc[] sd=topDocs.scoreDocs;
    assertNotNull(sd);
    int last=TrieUtils.prefixCodedToInt(searcher.doc(sd[0].doc).get("value"));
    for (int j=1; j < sd.length; j++) {
      int act=TrieUtils.prefixCodedToInt(searcher.doc(sd[j].doc).get("value"));
      assertTrue("Docs should be sorted backwards",last > act);
      last=act;
    }
  }
}
