{
  boolean doFix=false;
  for (int i=0; i < args.length; i++)   if (args[i].equals("-fix")) {
    doFix=true;
    break;
  }
  if (args.length != (doFix ? 2 : 1)) {
    out.println("\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix]\n" + "\n" + "  -fix: actually write a new segments_N file, removing any problematic segments\n"+ "\n"+ "**WARNING**: -fix should only be used on an emergency basis as it will cause\n"+ "documents (perhaps many) to be permanently removed from the index.  Always make\n"+ "a backup copy of your index before running this!  Do not run this tool on an index\n"+ "that is actively being written to.  You have been warned!\n"+ "\n"+ "Run without -fix, this tool will open the index, report version information\n"+ "and report any exceptions it hits and what action it would take if -fix were\n"+ "specified.  With -fix, this tool will remove any segments that have issues and\n"+ "write a new segments_N file.  This means all documents contained in the affected\n"+ "segments will be removed.\n"+ "\n"+ "This tool exits with exit code 1 if the index cannot be opened or has has any\n"+ "corruption, else 0.\n");
    System.exit(1);
  }
  final String dirName=args[0];
  out.println("\nOpening index @ " + dirName + "\n");
  Directory dir=null;
  try {
    dir=FSDirectory.getDirectory(dirName);
  }
 catch (  Throwable t) {
    out.println("ERROR: could not open directory \"" + dirName + "\"; exiting");
    t.printStackTrace(out);
    System.exit(1);
  }
  boolean isClean=check(dir,doFix);
  final int exitCode;
  if (isClean)   exitCode=0;
 else   exitCode=1;
  System.exit(exitCode);
}
