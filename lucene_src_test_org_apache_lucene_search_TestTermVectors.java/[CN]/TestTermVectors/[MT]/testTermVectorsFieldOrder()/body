{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,dir,new MockAnalyzer(random,MockTokenizer.SIMPLE,true));
  Document doc=new Document();
  FieldType ft=new FieldType(TextField.TYPE_STORED);
  ft.setStoreTermVectors(true);
  ft.setStoreTermVectorOffsets(true);
  ft.setStoreTermVectorPositions(true);
  doc.add(newField("c","some content here",ft));
  doc.add(newField("a","some content here",ft));
  doc.add(newField("b","some content here",ft));
  doc.add(newField("x","some content here",ft));
  writer.addDocument(doc);
  IndexReader reader=writer.getReader();
  writer.close();
  TermFreqVector[] v=reader.getTermFreqVectors(0);
  assertEquals(4,v.length);
  String[] expectedFields=new String[]{"a","b","c","x"};
  int[] expectedPositions=new int[]{1,2,0};
  for (int i=0; i < v.length; i++) {
    TermPositionVector posVec=(TermPositionVector)v[i];
    assertEquals(expectedFields[i],posVec.getField());
    BytesRef[] terms=posVec.getTerms();
    assertEquals(3,terms.length);
    assertEquals("content",terms[0].utf8ToString());
    assertEquals("here",terms[1].utf8ToString());
    assertEquals("some",terms[2].utf8ToString());
    for (int j=0; j < 3; j++) {
      int[] positions=posVec.getTermPositions(j);
      assertEquals(1,positions.length);
      assertEquals(expectedPositions[j],positions[0]);
    }
  }
  reader.close();
  dir.close();
}
