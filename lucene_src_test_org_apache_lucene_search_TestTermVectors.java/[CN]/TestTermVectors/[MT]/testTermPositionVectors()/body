{
  Query query=new TermQuery(new Term("field","zero"));
  try {
    ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
    assertEquals(1,hits.length);
    for (int i=0; i < hits.length; i++) {
      TermFreqVector[] vector=searcher.reader.getTermFreqVectors(hits[i].doc);
      assertTrue(vector != null);
      assertTrue(vector.length == 1);
      boolean shouldBePosVector=(hits[i].doc % 2 == 0) ? true : false;
      assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));
      boolean shouldBeOffVector=(hits[i].doc % 3 == 0) ? true : false;
      assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));
      if (shouldBePosVector || shouldBeOffVector) {
        TermPositionVector posVec=(TermPositionVector)vector[0];
        BytesRef[] terms=posVec.getTerms();
        assertTrue(terms != null && terms.length > 0);
        for (int j=0; j < terms.length; j++) {
          int[] positions=posVec.getTermPositions(j);
          TermVectorOffsetInfo[] offsets=posVec.getOffsets(j);
          if (shouldBePosVector) {
            assertTrue(positions != null);
            assertTrue(positions.length > 0);
          }
 else           assertTrue(positions == null);
          if (shouldBeOffVector) {
            assertTrue(offsets != null);
            assertTrue(offsets.length > 0);
          }
 else           assertTrue(offsets == null);
        }
      }
 else {
        try {
          assertTrue(false);
        }
 catch (        ClassCastException ignore) {
          TermFreqVector freqVec=vector[0];
          BytesRef[] terms=freqVec.getTerms();
          assertTrue(terms != null && terms.length > 0);
        }
      }
    }
  }
 catch (  IOException e) {
    assertTrue(false);
  }
}
