{
  if (LOG.isTraceEnabled()) {
    LOG.trace("CWD is {}",new File(".").getCanonicalPath());
    TreeMap map=new TreeMap();
    for (    Map.Entry<String,String> entry : configuration) {
      map.put(entry.getKey(),entry.getValue());
    }
    LOG.trace("Configuration:\n{}",Joiner.on("\n").join(map.entrySet()));
  }
  FaultTolerance faultTolerance=new FaultTolerance(configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE,false),configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS,false),configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES,SolrServerException.class.getName()));
  morphlineContext=new SolrMorphlineContext.Builder().setDocumentLoader(loader).setExceptionHandler(faultTolerance).setMetricRegistry(new MetricRegistry()).build();
class MySolrLocator extends SolrLocator {
    public MySolrLocator(    MorphlineContext ctx){
      super(ctx);
    }
  }
  SolrLocator locator=new MySolrLocator(morphlineContext);
  locator.setSolrHomeDir(solrHomeDir);
  schema=locator.getIndexSchema();
  morphlineContext=new SolrMorphlineContext.Builder().setIndexSchema(schema).setDocumentLoader(loader).setExceptionHandler(faultTolerance).setMetricRegistry(morphlineContext.getMetricRegistry()).build();
  String morphlineFile=configuration.get(MORPHLINE_FILE_PARAM);
  String morphlineId=configuration.get(MORPHLINE_ID_PARAM);
  if (morphlineFile == null || morphlineFile.trim().length() == 0) {
    throw new MorphlineCompilationException("Missing parameter: " + MORPHLINE_FILE_PARAM,null);
  }
  Map morphlineVariables=new HashMap();
  for (  Map.Entry<String,String> entry : configuration) {
    String variablePrefix=MORPHLINE_VARIABLE_PARAM + ".";
    if (entry.getKey().startsWith(variablePrefix)) {
      morphlineVariables.put(entry.getKey().substring(variablePrefix.length()),entry.getValue());
    }
  }
  Config override=ConfigFactory.parseMap(morphlineVariables);
  morphline=new Compiler().compile(new File(morphlineFile),morphlineId,morphlineContext,null,override);
  morphlineFileAndId=morphlineFile + "@" + morphlineId;
  disableFileOpen=configuration.getBoolean(DISABLE_FILE_OPEN,false);
  LOG.debug("disableFileOpen: {}",disableFileOpen);
  commandLineMorphlineHeaders=new HashMap();
  for (  Map.Entry<String,String> entry : configuration) {
    if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {
      commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()),entry.getValue());
    }
  }
  LOG.debug("Headers, including MIME types, passed by force from the CLI to morphline: {}",commandLineMorphlineHeaders);
  String metricName=MetricRegistry.name(Utils.getShortClassName(getClass()),Metrics.ELAPSED_TIME);
  this.elapsedTime=morphlineContext.getMetricRegistry().timer(metricName);
  Notifications.notifyBeginTransaction(morphline);
}
