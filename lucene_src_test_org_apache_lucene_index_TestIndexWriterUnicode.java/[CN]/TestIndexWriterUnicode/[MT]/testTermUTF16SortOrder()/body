{
  Random rnd=random;
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(rnd,dir);
  Document d=new Document();
  Field f=newField("f","",StringField.TYPE_UNSTORED);
  d.add(f);
  char[] chars=new char[2];
  final Set<String> allTerms=new HashSet<String>();
  int num=atLeast(200);
  for (int i=0; i < num; i++) {
    final String s;
    if (rnd.nextBoolean()) {
      if (rnd.nextBoolean()) {
        chars[0]=(char)getInt(rnd,1 + UnicodeUtil.UNI_SUR_LOW_END,0xffff);
      }
 else {
        chars[0]=(char)getInt(rnd,0,UnicodeUtil.UNI_SUR_HIGH_START - 1);
      }
      s=new String(chars,0,1);
    }
 else {
      chars[0]=(char)getInt(rnd,UnicodeUtil.UNI_SUR_HIGH_START,UnicodeUtil.UNI_SUR_HIGH_END);
      assertTrue(((int)chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int)chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);
      chars[1]=(char)getInt(rnd,UnicodeUtil.UNI_SUR_LOW_START,UnicodeUtil.UNI_SUR_LOW_END);
      s=new String(chars,0,2);
    }
    allTerms.add(s);
    f.setValue(s);
    writer.addDocument(d);
    if ((1 + i) % 42 == 0) {
      writer.commit();
    }
  }
  IndexReader r=writer.getReader();
  new ReaderUtil.Gather(r){
    @Override protected void add(    int base,    AtomicIndexReader r) throws IOException {
      checkTermsOrder(r,allTerms,false);
    }
  }
.run();
  checkTermsOrder(r,allTerms,true);
  r.close();
  writer.forceMerge(1);
  r=writer.getReader();
  checkTermsOrder(r,allTerms,true);
  r.close();
  writer.close();
  dir.close();
}
