{
  new UpdateRequest().add(id,"0","a_ss","hello0","a_ss","hello1","a_i","0","a_f","0").add(id,"2","a_ss","hello2","a_i","2","a_f","0").add(id,"3","a_ss","hello3","a_i","3","a_f","3").add(id,"4","a_ss","hello4","a_i","4","a_f","4").add(id,"1","a_ss","hello1","a_i","1","a_f","1").add(id,"5","a_ss","hello1","a_i","10","a_f","1").add(id,"6","a_ss","hello1","a_i","11","a_f","5").add(id,"7","a_ss","hello1","a_i","12","a_f","5").add(id,"8","a_ss","hello1","a_i","13","a_f","4").commit(cluster.getSolrClient(),COLLECTION);
  streamFactory.withCollectionZkHost(COLLECTION,zkHost);
  ModifiableSolrParams params=new ModifiableSolrParams(mapParams("q","*:*","fl","id,a_i","sort","a_i asc","fq","a_ss:hello0","fq","a_ss:hello1"));
  CloudSolrStream stream=new CloudSolrStream(zkHost,COLLECTION,params);
  List<Tuple> tuples=getTuples(stream);
  assertEquals("Multiple fq clauses should have been honored",tuples.size(),1);
  assertEquals("should only have gotten back document 0",tuples.get(0).getString("id"),"0");
}
