{
  indexr(id,"0","a_s","hello0","a_i","0","a_f","0");
  indexr(id,"2","a_s","hello2","a_i","2","a_f","0");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello1","a_i","1","a_f","1");
  indexr(id,"5","a_s","hello1","a_i","10","a_f","1");
  indexr(id,"6","a_s","hello1","a_i","11","a_f","5");
  indexr(id,"7","a_s","hello1","a_i","12","a_f","5");
  indexr(id,"8","a_s","hello1","a_i","13","a_f","4");
  commit();
  String zkHost=zkServer.getZkAddress();
  streamFactory.withCollectionZkHost("collection1",zkHost);
  Map params=mapParams("q","*:*","fl","id,a_s,a_i,a_f","sort","a_f asc,a_i asc","partitionKeys","a_f");
  CloudSolrStream stream=new CloudSolrStream(zkHost,"collection1",params);
  UniqueStream ustream=new UniqueStream(stream,new FieldEqualitor("a_f"));
  ParallelStream pstream=new ParallelStream(zkHost,"collection1",ustream,2,new FieldComparator("a_f",ComparatorOrder.ASCENDING));
  attachStreamFactory(pstream);
  List<Tuple> tuples=getTuples(pstream);
  assert(tuples.size() == 5);
  assertOrder(tuples,0,1,3,4,6);
  Map<String,Tuple> eofTuples=pstream.getEofTuples();
  assert(eofTuples.size() == 2);
  del("*:*");
  commit();
}
