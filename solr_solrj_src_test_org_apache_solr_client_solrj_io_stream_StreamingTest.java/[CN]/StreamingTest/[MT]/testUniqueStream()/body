{
  indexr(id,"0","a_s","hello0","a_i","0","a_f","0");
  indexr(id,"2","a_s","hello2","a_i","2","a_f","0");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello1","a_i","1","a_f","1");
  commit();
  String zkHost=zkServer.getZkAddress();
  streamFactory.withCollectionZkHost("collection1",zkHost);
  Map params=mapParams("q","*:*","fl","id,a_s,a_i,a_f","sort","a_f asc,a_i asc");
  CloudSolrStream stream=new CloudSolrStream(zkHost,"collection1",params);
  UniqueStream ustream=new UniqueStream(stream,new FieldEqualitor("a_f"));
  List<Tuple> tuples=getTuples(ustream);
  assert(tuples.size() == 4);
  assertOrder(tuples,0,1,3,4);
  try {
    params=mapParams("q","*:*","fl","id,a_s,a_i,a_f","sort","a_f asc,a_i asc");
    stream=new CloudSolrStream(zkHost,"collection1",params);
    ustream=new UniqueStream(stream,new FieldEqualitor("a_i"));
    throw new Exception("Equalitors did not match but no excepion was thrown");
  }
 catch (  Exception e) {
    if (!e.getMessage().equals("Invalid UniqueStream - substream comparator (sort) must be a superset of this stream's equalitor.")) {
      throw e;
    }
  }
  del("*:*");
  commit();
}
