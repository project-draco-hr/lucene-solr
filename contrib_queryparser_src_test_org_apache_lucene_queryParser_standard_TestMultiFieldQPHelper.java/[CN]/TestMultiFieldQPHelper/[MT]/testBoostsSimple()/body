{
  Map boosts=new HashMap();
  boosts.put("b",new Float(5));
  boosts.put("t",new Float(10));
  String[] fields={"b","t"};
  StandardQueryParser mfqp=new StandardQueryParser();
  mfqp.setMultiFields(fields);
  mfqp.setFieldsBoost(boosts);
  mfqp.setAnalyzer(new StandardAnalyzer());
  Query q=mfqp.parse("one",null);
  assertEquals("b:one^5.0 t:one^10.0",q.toString());
  q=mfqp.parse("one AND two",null);
  assertEquals("+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)",q.toString());
  q=mfqp.parse("one OR two",null);
  assertEquals("(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)",q.toString());
  q=mfqp.parse("one AND two AND foo:test",null);
  assertEquals("+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test",q.toString());
  q=mfqp.parse("one^3 AND two^4",null);
  assertEquals("+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)",q.toString());
}
