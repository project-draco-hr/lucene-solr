{
  Object fieldTypeName=params.get(QUERY_ANALYZER);
  if (fieldTypeName == null) {
    throw new IllegalArgumentException("Error in configuration: " + QUERY_ANALYZER + " parameter is mandatory");
  }
  FieldType ft=core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());
  if (ft == null) {
    throw new IllegalArgumentException("Error in configuration: " + fieldTypeName.toString() + " is not defined in the schema");
  }
  Analyzer indexAnalyzer=ft.getIndexAnalyzer();
  Analyzer queryAnalyzer=ft.getQueryAnalyzer();
  String indexPath=params.get(INDEX_PATH) != null ? params.get(INDEX_PATH).toString() : DEFAULT_INDEX_PATH;
  if (new File(indexPath).isAbsolute() == false) {
    indexPath=core.getDataDir() + File.separator + indexPath;
  }
  int minPrefixChars=params.get(MIN_PREFIX_CHARS) != null ? Integer.parseInt(params.get(MIN_PREFIX_CHARS).toString()) : AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS;
  boolean allTermsRequired=params.get(ALL_TERMS_REQUIRED) != null ? Boolean.getBoolean(params.get(ALL_TERMS_REQUIRED).toString()) : AnalyzingInfixSuggester.DEFAULT_ALL_TERMS_REQUIRED;
  boolean highlight=params.get(HIGHLIGHT) != null ? Boolean.getBoolean(params.get(HIGHLIGHT).toString()) : AnalyzingInfixSuggester.DEFAULT_HIGHLIGHT;
  BlenderType blenderType=getBlenderType(params.get(BLENDER_TYPE));
  int numFactor=params.get(NUM_FACTOR) != null ? Integer.parseInt(params.get(NUM_FACTOR).toString()) : BlendedInfixSuggester.DEFAULT_NUM_FACTOR;
  try {
    return new BlendedInfixSuggester(FSDirectory.open(new File(indexPath).toPath()),indexAnalyzer,queryAnalyzer,minPrefixChars,blenderType,numFactor,true,allTermsRequired,highlight){
      @Override public List<LookupResult> lookup(      CharSequence key,      Set<BytesRef> contexts,      int num,      boolean allTermsRequired,      boolean doHighlight) throws IOException {
        List<LookupResult> res=super.lookup(key,contexts,num,allTermsRequired,doHighlight);
        if (doHighlight) {
          List<LookupResult> res2=new ArrayList<>();
          for (          LookupResult hit : res) {
            res2.add(new LookupResult(hit.highlightKey.toString(),hit.highlightKey,hit.value,hit.payload,hit.contexts));
          }
          res=res2;
        }
        return res;
      }
    }
;
  }
 catch (  IOException e) {
    throw new RuntimeException();
  }
}
