{
  long startNS=System.nanoTime();
  double secondsToPause=(bytes / 1024. / 1024.) / mbPerSec;
  long targetNS;
synchronized (this) {
    targetNS=lastNS + (long)(1000000000 * secondsToPause);
    if (startNS >= targetNS) {
      lastNS=startNS;
      return 0;
    }
    lastNS=targetNS;
  }
  long curNS=startNS;
  while (true) {
    final long pauseNS=targetNS - curNS;
    if (pauseNS > 0) {
      try {
        int sleepNS;
        int sleepMS;
        if (pauseNS > 100000L * Integer.MAX_VALUE) {
          sleepMS=Integer.MAX_VALUE;
          sleepNS=0;
        }
 else {
          sleepMS=(int)(pauseNS / 1000000);
          sleepNS=(int)(pauseNS % 1000000);
        }
        Thread.sleep(sleepMS,sleepNS);
      }
 catch (      InterruptedException ie) {
        throw new ThreadInterruptedException(ie);
      }
      curNS=System.nanoTime();
      continue;
    }
    break;
  }
  return curNS - startNS;
}
