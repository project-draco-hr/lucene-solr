{
  Similarity fieldSim=sim.get(field);
  IndexReader reader=null;
  try {
    reader=IndexReader.open(dir,false);
    final List<IndexReader> subReaders=new ArrayList<IndexReader>();
    ReaderUtil.gatherSubReaders(subReaders,reader);
    final FieldInvertState invertState=new FieldInvertState();
    for (    IndexReader subReader : subReaders) {
      final Bits liveDocs=subReader.getLiveDocs();
      int[] termCounts=new int[subReader.maxDoc()];
      Fields fields=subReader.fields();
      if (fields != null) {
        Terms terms=fields.terms(field);
        if (terms != null) {
          TermsEnum termsEnum=terms.iterator(null);
          DocsEnum docs=null;
          DocsEnum docsAndFreqs=null;
          while (termsEnum.next() != null) {
            docsAndFreqs=termsEnum.docs(liveDocs,docsAndFreqs,true);
            final DocsEnum docs2;
            if (docsAndFreqs != null) {
              docs2=docsAndFreqs;
            }
 else {
              docs2=docs=termsEnum.docs(liveDocs,docs,false);
            }
            while (true) {
              int docID=docs2.nextDoc();
              if (docID != docs.NO_MORE_DOCS) {
                termCounts[docID]+=docsAndFreqs == null ? 1 : docsAndFreqs.freq();
              }
 else {
                break;
              }
            }
          }
        }
      }
      invertState.setBoost(1.0f);
      for (int d=0; d < termCounts.length; d++) {
        if (liveDocs == null || liveDocs.get(d)) {
          invertState.setLength(termCounts[d]);
          subReader.setNorm(d,field,fieldSim.computeNorm(invertState));
        }
      }
    }
  }
  finally {
    if (null != reader)     reader.close();
  }
}
