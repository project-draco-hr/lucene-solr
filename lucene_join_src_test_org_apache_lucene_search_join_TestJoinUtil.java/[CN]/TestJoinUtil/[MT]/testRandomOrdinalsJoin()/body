{
  IndexIterationContext context=createContext(512,false,true);
  int searchIters=10;
  IndexSearcher indexSearcher=context.searcher;
  for (int i=0; i < searchIters; i++) {
    if (VERBOSE) {
      System.out.println("search iter=" + i);
    }
    int r=random().nextInt(context.randomUniqueValues.length);
    boolean from=context.randomFrom[r];
    String randomValue=context.randomUniqueValues[r];
    BitSet expectedResult=createExpectedResult(randomValue,from,indexSearcher.getIndexReader(),context);
    final Query actualQuery=new TermQuery(new Term("value",randomValue));
    if (VERBOSE) {
      System.out.println("actualQuery=" + actualQuery);
    }
    final ScoreMode scoreMode=ScoreMode.values()[random().nextInt(ScoreMode.values().length)];
    if (VERBOSE) {
      System.out.println("scoreMode=" + scoreMode);
    }
    final Query joinQuery;
    if (from) {
      BooleanQuery.Builder fromQuery=new BooleanQuery.Builder();
      fromQuery.add(new TermQuery(new Term("type","from")),BooleanClause.Occur.FILTER);
      fromQuery.add(actualQuery,BooleanClause.Occur.MUST);
      Query toQuery=new TermQuery(new Term("type","to"));
      joinQuery=JoinUtil.createJoinQuery("join_field",fromQuery.build(),toQuery,indexSearcher,scoreMode,context.ordinalMap);
    }
 else {
      BooleanQuery.Builder fromQuery=new BooleanQuery.Builder();
      fromQuery.add(new TermQuery(new Term("type","to")),BooleanClause.Occur.FILTER);
      fromQuery.add(actualQuery,BooleanClause.Occur.MUST);
      Query toQuery=new TermQuery(new Term("type","from"));
      joinQuery=JoinUtil.createJoinQuery("join_field",fromQuery.build(),toQuery,indexSearcher,scoreMode,context.ordinalMap);
    }
    if (VERBOSE) {
      System.out.println("joinQuery=" + joinQuery);
    }
    final BitSet actualResult=new FixedBitSet(indexSearcher.getIndexReader().maxDoc());
    final TopScoreDocCollector topScoreDocCollector=TopScoreDocCollector.create(10);
    indexSearcher.search(joinQuery,MultiCollector.wrap(new BitSetCollector(actualResult),topScoreDocCollector));
    assertBitSet(expectedResult,actualResult,indexSearcher);
    TopDocs expectedTopDocs=createExpectedTopDocs(randomValue,from,scoreMode,context);
    TopDocs actualTopDocs=topScoreDocCollector.topDocs();
    assertTopDocs(expectedTopDocs,actualTopDocs,scoreMode,indexSearcher,joinQuery);
  }
  context.close();
}
