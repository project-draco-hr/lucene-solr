{
  String priceField="price";
  Query priceQuery=new Query(){
    private final Query fieldQuery=new FieldValueQuery(priceField);
    @Override public Weight createWeight(    IndexSearcher searcher,    boolean needsScores) throws IOException {
      Weight fieldWeight=fieldQuery.createWeight(searcher,false);
      return new Weight(this){
        @Override public void extractTerms(        Set<Term> terms){
        }
        @Override public Explanation explain(        LeafReaderContext context,        int doc) throws IOException {
          return null;
        }
        @Override public float getValueForNormalization() throws IOException {
          return 0;
        }
        @Override public void normalize(        float norm,        float topLevelBoost){
        }
        @Override public Scorer scorer(        LeafReaderContext context,        Bits acceptDocs) throws IOException {
          Scorer fieldScorer=fieldWeight.scorer(context,acceptDocs);
          NumericDocValues price=context.reader().getNumericDocValues(priceField);
          return new FilterScorer(fieldScorer,this){
            @Override public float score() throws IOException {
              return (float)price.get(in.docID());
            }
          }
;
        }
      }
;
    }
    @Override public String toString(    String field){
      return fieldQuery.toString(field);
    }
  }
;
  Directory dir=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random(),MockTokenizer.KEYWORD,false)));
  Map<String,Float> lowestScoresPerParent=new HashMap<>();
  Map<String,Float> highestScoresPerParent=new HashMap<>();
  int numParents=RandomInts.randomIntBetween(random(),16,64);
  for (int p=0; p < numParents; p++) {
    String parentId=Integer.toString(p);
    Document parentDoc=new Document();
    parentDoc.add(new StringField("id",parentId,Field.Store.YES));
    parentDoc.add(new StringField("type","to",Field.Store.NO));
    parentDoc.add(new SortedDocValuesField("join_field",new BytesRef(parentId)));
    iw.addDocument(parentDoc);
    int numChildren=RandomInts.randomIntBetween(random(),2,16);
    int lowest=Integer.MAX_VALUE;
    int highest=Integer.MIN_VALUE;
    for (int c=0; c < numChildren; c++) {
      String childId=Integer.toString(p + c);
      Document childDoc=new Document();
      childDoc.add(new StringField("id",childId,Field.Store.YES));
      childDoc.add(new StringField("type","from",Field.Store.NO));
      childDoc.add(new SortedDocValuesField("join_field",new BytesRef(parentId)));
      int price=random().nextInt(1000);
      childDoc.add(new NumericDocValuesField(priceField,price));
      iw.addDocument(childDoc);
      lowest=Math.min(lowest,price);
      highest=Math.max(highest,price);
    }
    lowestScoresPerParent.put(parentId,(float)lowest);
    highestScoresPerParent.put(parentId,(float)highest);
  }
  iw.close();
  IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(dir));
  SortedDocValues[] values=new SortedDocValues[searcher.getIndexReader().leaves().size()];
  for (  LeafReaderContext leadContext : searcher.getIndexReader().leaves()) {
    values[leadContext.ord]=DocValues.getSorted(leadContext.reader(),"join_field");
  }
  MultiDocValues.OrdinalMap ordinalMap=MultiDocValues.OrdinalMap.build(searcher.getIndexReader().getCoreCacheKey(),values,PackedInts.DEFAULT);
  BooleanQuery.Builder fromQuery=new BooleanQuery.Builder();
  fromQuery.add(priceQuery,BooleanClause.Occur.MUST);
  Query toQuery=new TermQuery(new Term("type","to"));
  Query joinQuery=JoinUtil.createJoinQuery("join_field",fromQuery.build(),toQuery,searcher,ScoreMode.Min,ordinalMap);
  TopDocs topDocs=searcher.search(joinQuery,numParents);
  assertEquals(numParents,topDocs.totalHits);
  for (int i=0; i < topDocs.scoreDocs.length; i++) {
    ScoreDoc scoreDoc=topDocs.scoreDocs[i];
    String id=SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).document(scoreDoc.doc).get("id");
    assertEquals(lowestScoresPerParent.get(id),scoreDoc.score,0f);
  }
  joinQuery=JoinUtil.createJoinQuery("join_field",fromQuery.build(),toQuery,searcher,ScoreMode.Max,ordinalMap);
  topDocs=searcher.search(joinQuery,numParents);
  assertEquals(numParents,topDocs.totalHits);
  for (int i=0; i < topDocs.scoreDocs.length; i++) {
    ScoreDoc scoreDoc=topDocs.scoreDocs[i];
    String id=SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).document(scoreDoc.doc).get("id");
    assertEquals(highestScoresPerParent.get(id),scoreDoc.score,0f);
  }
  searcher.getIndexReader().close();
  dir.close();
}
