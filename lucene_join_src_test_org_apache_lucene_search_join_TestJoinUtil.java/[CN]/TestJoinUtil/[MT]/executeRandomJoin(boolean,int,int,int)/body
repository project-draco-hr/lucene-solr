{
  for (int indexIter=1; indexIter <= maxIndexIter; indexIter++) {
    if (VERBOSE) {
      System.out.println("indexIter=" + indexIter);
    }
    IndexIterationContext context=createContext(numberOfDocumentsToIndex,multipleValuesPerDocument,false);
    IndexSearcher indexSearcher=context.searcher;
    for (int searchIter=1; searchIter <= maxSearchIter; searchIter++) {
      if (VERBOSE) {
        System.out.println("searchIter=" + searchIter);
      }
      int r=random().nextInt(context.randomUniqueValues.length);
      boolean from=context.randomFrom[r];
      String randomValue=context.randomUniqueValues[r];
      BitSet expectedResult=createExpectedResult(randomValue,from,indexSearcher.getIndexReader(),context);
      final Query actualQuery=new TermQuery(new Term("value",randomValue));
      if (VERBOSE) {
        System.out.println("actualQuery=" + actualQuery);
      }
      final ScoreMode scoreMode=ScoreMode.values()[random().nextInt(ScoreMode.values().length)];
      if (VERBOSE) {
        System.out.println("scoreMode=" + scoreMode);
      }
      final Query joinQuery;
{
        final boolean muliValsQuery=multipleValuesPerDocument || random().nextBoolean();
        final String fromField=from ? "from" : "to";
        final String toField=from ? "to" : "from";
        if (random().nextBoolean()) {
          final NumericType numType=random().nextBoolean() ? NumericType.INT : NumericType.LONG;
          joinQuery=JoinUtil.createJoinQuery(fromField + numType,muliValsQuery,toField + numType,numType,actualQuery,indexSearcher,scoreMode);
        }
 else {
          joinQuery=JoinUtil.createJoinQuery(fromField,muliValsQuery,toField,actualQuery,indexSearcher,scoreMode);
        }
      }
      if (VERBOSE) {
        System.out.println("joinQuery=" + joinQuery);
      }
      final BitSet actualResult=new FixedBitSet(indexSearcher.getIndexReader().maxDoc());
      final TopScoreDocCollector topScoreDocCollector=TopScoreDocCollector.create(10);
      indexSearcher.search(joinQuery,MultiCollector.wrap(new BitSetCollector(actualResult),topScoreDocCollector));
      assertBitSet(expectedResult,actualResult,indexSearcher);
      TopDocs expectedTopDocs=createExpectedTopDocs(randomValue,from,scoreMode,context);
      TopDocs actualTopDocs=topScoreDocCollector.topDocs();
      assertTopDocs(expectedTopDocs,actualTopDocs,scoreMode,indexSearcher,joinQuery);
    }
    context.close();
  }
}
