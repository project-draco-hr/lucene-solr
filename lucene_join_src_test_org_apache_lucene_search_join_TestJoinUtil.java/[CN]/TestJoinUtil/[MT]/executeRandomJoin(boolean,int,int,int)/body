{
  for (int indexIter=1; indexIter <= maxIndexIter; indexIter++) {
    if (VERBOSE) {
      System.out.println("indexIter=" + indexIter);
    }
    IndexIterationContext context=createContext(numberOfDocumentsToIndex,multipleValuesPerDocument,false);
    IndexSearcher indexSearcher=context.searcher;
    for (int searchIter=1; searchIter <= maxSearchIter; searchIter++) {
      if (VERBOSE) {
        System.out.println("searchIter=" + searchIter);
      }
      int r=random().nextInt(context.randomUniqueValues.length);
      boolean from=context.randomFrom[r];
      String randomValue=context.randomUniqueValues[r];
      BitSet expectedResult=createExpectedResult(randomValue,from,indexSearcher.getIndexReader(),context);
      final Query actualQuery=new TermQuery(new Term("value",randomValue));
      if (VERBOSE) {
        System.out.println("actualQuery=" + actualQuery);
      }
      final ScoreMode scoreMode=ScoreMode.values()[random().nextInt(ScoreMode.values().length)];
      if (VERBOSE) {
        System.out.println("scoreMode=" + scoreMode);
      }
      final Query joinQuery;
{
        final boolean muliValsQuery=multipleValuesPerDocument || random().nextBoolean();
        final String fromField=from ? "from" : "to";
        final String toField=from ? "to" : "from";
        int surpriseMe=random().nextInt(3);
switch (surpriseMe) {
case 0:
          Class<? extends Number> numType;
        String suffix;
      if (random().nextBoolean()) {
        numType=Integer.class;
        suffix="INT";
      }
 else       if (random().nextBoolean()) {
        numType=Float.class;
        suffix="FLOAT";
      }
 else       if (random().nextBoolean()) {
        numType=Long.class;
        suffix="LONG";
      }
 else {
        numType=Double.class;
        suffix="DOUBLE";
      }
    joinQuery=JoinUtil.createJoinQuery(fromField + suffix,muliValsQuery,toField + suffix,numType,actualQuery,indexSearcher,scoreMode);
  break;
case 1:
final LegacyNumericType legacyNumType=random().nextBoolean() ? LegacyNumericType.INT : LegacyNumericType.LONG;
joinQuery=JoinUtil.createJoinQuery(fromField + legacyNumType,muliValsQuery,toField + legacyNumType,legacyNumType,actualQuery,indexSearcher,scoreMode);
break;
case 2:
joinQuery=JoinUtil.createJoinQuery(fromField,muliValsQuery,toField,actualQuery,indexSearcher,scoreMode);
break;
default :
throw new RuntimeException("unexpected value " + surpriseMe);
}
}
if (VERBOSE) {
System.out.println("joinQuery=" + joinQuery);
}
final BitSet actualResult=new FixedBitSet(indexSearcher.getIndexReader().maxDoc());
final TopScoreDocCollector topScoreDocCollector=TopScoreDocCollector.create(10);
indexSearcher.search(joinQuery,MultiCollector.wrap(new BitSetCollector(actualResult),topScoreDocCollector));
assertBitSet(expectedResult,actualResult,indexSearcher);
TopDocs expectedTopDocs=createExpectedTopDocs(randomValue,from,scoreMode,context);
TopDocs actualTopDocs=topScoreDocCollector.topDocs();
assertTopDocs(expectedTopDocs,actualTopDocs,scoreMode,indexSearcher,joinQuery);
}
context.close();
}
}
