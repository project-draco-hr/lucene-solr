{
  for (int indexIter=1; indexIter <= maxIndexIter; indexIter++) {
    if (VERBOSE) {
      System.out.println("indexIter=" + indexIter);
    }
    Directory dir=newDirectory();
    RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random(),MockTokenizer.KEYWORD,false)).setMergePolicy(newLogMergePolicy()));
    final boolean scoreDocsInOrder=TestJoinUtil.random().nextBoolean();
    IndexIterationContext context=createContext(numberOfDocumentsToIndex,w,multipleValuesPerDocument,scoreDocsInOrder);
    IndexReader topLevelReader=w.getReader();
    w.close();
    for (int searchIter=1; searchIter <= maxSearchIter; searchIter++) {
      if (VERBOSE) {
        System.out.println("searchIter=" + searchIter);
      }
      IndexSearcher indexSearcher=newSearcher(topLevelReader);
      int r=random().nextInt(context.randomUniqueValues.length);
      boolean from=context.randomFrom[r];
      String randomValue=context.randomUniqueValues[r];
      FixedBitSet expectedResult=createExpectedResult(randomValue,from,indexSearcher.getIndexReader(),context);
      final Query actualQuery=new TermQuery(new Term("value",randomValue));
      if (VERBOSE) {
        System.out.println("actualQuery=" + actualQuery);
      }
      final ScoreMode scoreMode=ScoreMode.values()[random().nextInt(ScoreMode.values().length)];
      if (VERBOSE) {
        System.out.println("scoreMode=" + scoreMode);
      }
      final Query joinQuery;
      if (from) {
        joinQuery=JoinUtil.createJoinQuery("from",multipleValuesPerDocument,"to",actualQuery,indexSearcher,scoreMode);
      }
 else {
        joinQuery=JoinUtil.createJoinQuery("to",multipleValuesPerDocument,"from",actualQuery,indexSearcher,scoreMode);
      }
      if (VERBOSE) {
        System.out.println("joinQuery=" + joinQuery);
      }
      final FixedBitSet actualResult=new FixedBitSet(indexSearcher.getIndexReader().maxDoc());
      final TopScoreDocCollector topScoreDocCollector=TopScoreDocCollector.create(10,false);
      indexSearcher.search(joinQuery,new SimpleCollector(){
        int docBase;
        @Override public void collect(        int doc) throws IOException {
          actualResult.set(doc + docBase);
          topScoreDocCollector.collect(doc);
        }
        @Override protected void doSetNextReader(        AtomicReaderContext context) throws IOException {
          docBase=context.docBase;
          topScoreDocCollector.getLeafCollector(context);
        }
        @Override public void setScorer(        Scorer scorer) throws IOException {
          topScoreDocCollector.setScorer(scorer);
        }
        @Override public boolean acceptsDocsOutOfOrder(){
          return scoreDocsInOrder;
        }
      }
);
      if (VERBOSE) {
        System.out.println("expected cardinality:" + expectedResult.cardinality());
        DocIdSetIterator iterator=expectedResult.iterator();
        for (int doc=iterator.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=iterator.nextDoc()) {
          System.out.println(String.format(Locale.ROOT,"Expected doc[%d] with id value %s",doc,indexSearcher.doc(doc).get("id")));
        }
        System.out.println("actual cardinality:" + actualResult.cardinality());
        iterator=actualResult.iterator();
        for (int doc=iterator.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=iterator.nextDoc()) {
          System.out.println(String.format(Locale.ROOT,"Actual doc[%d] with id value %s",doc,indexSearcher.doc(doc).get("id")));
        }
      }
      assertEquals(expectedResult,actualResult);
      TopDocs expectedTopDocs=createExpectedTopDocs(randomValue,from,scoreMode,context);
      TopDocs actualTopDocs=topScoreDocCollector.topDocs();
      assertEquals(expectedTopDocs.totalHits,actualTopDocs.totalHits);
      assertEquals(expectedTopDocs.scoreDocs.length,actualTopDocs.scoreDocs.length);
      if (scoreMode == ScoreMode.None) {
        continue;
      }
      assertEquals(expectedTopDocs.getMaxScore(),actualTopDocs.getMaxScore(),0.0f);
      for (int i=0; i < expectedTopDocs.scoreDocs.length; i++) {
        if (VERBOSE) {
          System.out.printf(Locale.ENGLISH,"Expected doc: %d | Actual doc: %d\n",expectedTopDocs.scoreDocs[i].doc,actualTopDocs.scoreDocs[i].doc);
          System.out.printf(Locale.ENGLISH,"Expected score: %f | Actual score: %f\n",expectedTopDocs.scoreDocs[i].score,actualTopDocs.scoreDocs[i].score);
        }
        assertEquals(expectedTopDocs.scoreDocs[i].doc,actualTopDocs.scoreDocs[i].doc);
        assertEquals(expectedTopDocs.scoreDocs[i].score,actualTopDocs.scoreDocs[i].score,0.0f);
        Explanation explanation=indexSearcher.explain(joinQuery,expectedTopDocs.scoreDocs[i].doc);
        assertEquals(expectedTopDocs.scoreDocs[i].score,explanation.getValue(),0.0f);
      }
    }
    topLevelReader.close();
    dir.close();
  }
}
