{
  Map<Integer,JoinScore> hitsToJoinScores;
  if (from) {
    hitsToJoinScores=context.fromHitsToJoinScore.get(queryValue);
  }
 else {
    hitsToJoinScores=context.toHitsToJoinScore.get(queryValue);
  }
  List<Map.Entry<Integer,JoinScore>> hits=new ArrayList<Map.Entry<Integer,JoinScore>>(hitsToJoinScores.entrySet());
  Collections.sort(hits,new Comparator<Map.Entry<Integer,JoinScore>>(){
    @Override public int compare(    Map.Entry<Integer,JoinScore> hit1,    Map.Entry<Integer,JoinScore> hit2){
      float score1=hit1.getValue().score(scoreMode);
      float score2=hit2.getValue().score(scoreMode);
      int cmp=Float.compare(score2,score1);
      if (cmp != 0) {
        return cmp;
      }
      return hit1.getKey() - hit2.getKey();
    }
  }
);
  ScoreDoc[] scoreDocs=new ScoreDoc[Math.min(10,hits.size())];
  for (int i=0; i < scoreDocs.length; i++) {
    Map.Entry<Integer,JoinScore> hit=hits.get(i);
    scoreDocs[i]=new ScoreDoc(hit.getKey(),hit.getValue().score(scoreMode));
  }
  return new TopDocs(hits.size(),scoreDocs,hits.isEmpty() ? Float.NaN : hits.get(0).getValue().score(scoreMode));
}
