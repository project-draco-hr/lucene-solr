{
  final String idField="id";
  final String productIdField="productId";
  final String typeField="type";
  final String joinField=idField + productIdField;
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));
  Document doc=new Document();
  doc.add(new TextField(idField,"1",Field.Store.NO));
  doc.add(new TextField(typeField,"product",Field.Store.NO));
  doc.add(new TextField("description","random text",Field.Store.NO));
  doc.add(new TextField("name","name1",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("1")));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField(productIdField,"1",Field.Store.NO));
  doc.add(new TextField(typeField,"price",Field.Store.NO));
  doc.add(new TextField("price","10.0",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("1")));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField(productIdField,"1",Field.Store.NO));
  doc.add(new TextField(typeField,"price",Field.Store.NO));
  doc.add(new TextField("price","20.0",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("1")));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField(idField,"2",Field.Store.NO));
  doc.add(new TextField(typeField,"product",Field.Store.NO));
  doc.add(new TextField("description","more random text",Field.Store.NO));
  doc.add(new TextField("name","name2",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("2")));
  w.addDocument(doc);
  w.commit();
  doc=new Document();
  doc.add(new TextField(productIdField,"2",Field.Store.NO));
  doc.add(new TextField(typeField,"price",Field.Store.NO));
  doc.add(new TextField("price","10.0",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("2")));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField(productIdField,"2",Field.Store.NO));
  doc.add(new TextField(typeField,"price",Field.Store.NO));
  doc.add(new TextField("price","20.0",Field.Store.NO));
  doc.add(new SortedDocValuesField(joinField,new BytesRef("2")));
  w.addDocument(doc);
  IndexSearcher indexSearcher=new IndexSearcher(w.getReader());
  w.close();
  IndexReader r=indexSearcher.getIndexReader();
  SortedDocValues[] values=new SortedDocValues[r.leaves().size()];
  for (int i=0; i < values.length; i++) {
    LeafReader leafReader=r.leaves().get(i).reader();
    values[i]=DocValues.getSorted(leafReader,joinField);
  }
  MultiDocValues.OrdinalMap ordinalMap=MultiDocValues.OrdinalMap.build(r.getCoreCacheKey(),values,PackedInts.DEFAULT);
  Query toQuery=new TermQuery(new Term(typeField,"price"));
  Query fromQuery=new TermQuery(new Term("name","name2"));
  Query joinQuery=JoinUtil.createJoinQuery(joinField,fromQuery,toQuery,indexSearcher,ScoreMode.None,ordinalMap);
  TopDocs result=indexSearcher.search(joinQuery,10);
  assertEquals(2,result.totalHits);
  assertEquals(4,result.scoreDocs[0].doc);
  assertEquals(5,result.scoreDocs[1].doc);
  fromQuery=new TermQuery(new Term("name","name1"));
  joinQuery=JoinUtil.createJoinQuery(joinField,fromQuery,toQuery,indexSearcher,ScoreMode.None,ordinalMap);
  result=indexSearcher.search(joinQuery,10);
  assertEquals(2,result.totalHits);
  assertEquals(1,result.scoreDocs[0].doc);
  assertEquals(2,result.scoreDocs[1].doc);
  fromQuery=new TermQuery(new Term("price","20.0"));
  toQuery=new TermQuery(new Term(typeField,"product"));
  joinQuery=JoinUtil.createJoinQuery(joinField,fromQuery,toQuery,indexSearcher,ScoreMode.None,ordinalMap);
  result=indexSearcher.search(joinQuery,10);
  assertEquals(2,result.totalHits);
  assertEquals(0,result.scoreDocs[0].doc);
  assertEquals(3,result.scoreDocs[1].doc);
  indexSearcher.getIndexReader().close();
  dir.close();
}
