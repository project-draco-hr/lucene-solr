{
  final String idField="id";
  final String toField="productId";
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  Document doc=new Document();
  doc.add(new TextField("description","random text",Field.Store.NO));
  doc.add(new TextField("name","name1",Field.Store.NO));
  doc.add(new TextField(idField,"7",Field.Store.NO));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("price","10.0",Field.Store.NO));
  doc.add(new TextField(idField,"2",Field.Store.NO));
  doc.add(new TextField(toField,"7",Field.Store.NO));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("price","20.0",Field.Store.NO));
  doc.add(new TextField(idField,"3",Field.Store.NO));
  doc.add(new TextField(toField,"7",Field.Store.NO));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("description","more random text",Field.Store.NO));
  doc.add(new TextField("name","name2",Field.Store.NO));
  doc.add(new TextField(idField,"0",Field.Store.NO));
  w.addDocument(doc);
  w.commit();
  doc=new Document();
  doc.add(new TextField("price","10.0",Field.Store.NO));
  doc.add(new TextField(idField,"5",Field.Store.NO));
  doc.add(new TextField(toField,"0",Field.Store.NO));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("price","20.0",Field.Store.NO));
  doc.add(new TextField(idField,"6",Field.Store.NO));
  doc.add(new TextField(toField,"0",Field.Store.NO));
  w.addDocument(doc);
  w.forceMerge(1);
  IndexSearcher indexSearcher=new IndexSearcher(w.getReader());
  w.close();
  Query joinQuery=JoinUtil.createJoinQuery(idField,false,toField,new TermQuery(new Term("description","random")),indexSearcher,ScoreMode.Avg);
  BooleanQuery bq=new BooleanQuery();
  bq.add(joinQuery,BooleanClause.Occur.SHOULD);
  bq.add(new TermQuery(new Term("id","3")),BooleanClause.Occur.SHOULD);
  indexSearcher.search(bq,new Collector(){
    boolean sawFive;
    @Override public void setNextReader(    AtomicReaderContext context){
    }
    @Override public void collect(    int docID){
      if (docID == 5) {
        sawFive=true;
      }
 else       if (docID == 1) {
        assertFalse("optimized topScorer was not used for join query embedded in boolean query!",sawFive);
      }
    }
    @Override public void setScorer(    Scorer scorer){
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  indexSearcher.getIndexReader().close();
  dir.close();
}
