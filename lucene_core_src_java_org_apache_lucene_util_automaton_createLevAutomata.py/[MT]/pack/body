def pack(l):
    maxV = max(l)
    bitsPerValue = max(1, int(math.ceil((math.log((maxV + 1)) / math.log(2.0)))))
    bitsLeft = WORD
    pendingValue = 0
    packed = []
    for i in xrange(len(l)):
        v = l[i]
        if (pendingValue > 0):
            bitsUsed = math.ceil((math.log(pendingValue) / math.log(2.0)))
            assert (bitsUsed <= (WORD - bitsLeft)), ('bitsLeft=%s (%s-%s=%s) bitsUsed=%s' % (bitsLeft, WORD, bitsLeft, (WORD - bitsLeft), bitsUsed))
        if (bitsLeft >= bitsPerValue):
            pendingValue += (v << (WORD - bitsLeft))
            bitsLeft -= bitsPerValue
            if (bitsLeft == 0):
                packed.append(pendingValue)
                bitsLeft = WORD
                pendingValue = 0
        else:
            pendingValue += ((v & MASKS[(bitsLeft - 1)]) << (WORD - bitsLeft))
            packed.append(pendingValue)
            pendingValue = (v >> bitsLeft)
            bitsLeft = (WORD - (bitsPerValue - bitsLeft))
    if (bitsLeft < WORD):
        packed.append(pendingValue)
    return (packed, bitsPerValue)
