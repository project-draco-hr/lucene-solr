{
  Automaton.Builder builder=new Automaton.Builder();
  Transition t=new Transition();
  int numStates=a.getNumStates();
  for (int s=0; s < numStates; s++) {
    builder.createState();
  }
  for (int s=0; s < numStates; s++) {
    int count=a.initTransition(s,t);
    for (int i=0; i < count; i++) {
      a.getNextTransition(t);
      builder.addTransition(t.dest,s,t.min,t.max);
    }
  }
  Automaton a2=builder.finish();
  LinkedList<Integer> workList=new LinkedList<>();
  BitSet live=new BitSet(numStates);
  BitSet acceptBits=a.getAcceptStates();
  int s=0;
  while (s < numStates && (s=acceptBits.nextSetBit(s)) != -1) {
    live.set(s);
    workList.add(s);
    s++;
  }
  while (workList.isEmpty() == false) {
    s=workList.removeFirst();
    int count=a2.initTransition(s,t);
    for (int i=0; i < count; i++) {
      a2.getNextTransition(t);
      if (live.get(t.dest) == false) {
        live.set(t.dest);
        workList.add(t.dest);
      }
    }
  }
  return live;
}
