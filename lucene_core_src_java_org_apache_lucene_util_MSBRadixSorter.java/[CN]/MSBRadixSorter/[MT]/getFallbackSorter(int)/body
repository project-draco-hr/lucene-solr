{
  return new IntroSorter(){
    @Override protected void swap(    int i,    int j){
      MSBRadixSorter.this.swap(i,j);
    }
    @Override protected int compare(    int i,    int j){
      for (int o=k; o < maxLength; ++o) {
        final int b1=byteAt(i,o);
        final int b2=byteAt(j,o);
        if (b1 != b2) {
          return b1 - b2;
        }
 else         if (b1 == -1) {
          break;
        }
      }
      return 0;
    }
    @Override protected void setPivot(    int i){
      pivot.setLength(0);
      for (int o=k; o < maxLength; ++o) {
        final int b=byteAt(i,o);
        if (b == -1) {
          break;
        }
        pivot.append((byte)b);
      }
    }
    @Override protected int comparePivot(    int j){
      for (int o=0; o < pivot.length(); ++o) {
        final int b1=pivot.byteAt(o) & 0xff;
        final int b2=byteAt(j,k + o);
        if (b1 != b2) {
          return b1 - b2;
        }
      }
      if (k + pivot.length() == maxLength) {
        return 0;
      }
      return -1 - byteAt(j,k + pivot.length());
    }
    private final BytesRefBuilder pivot=new BytesRefBuilder();
  }
;
}
