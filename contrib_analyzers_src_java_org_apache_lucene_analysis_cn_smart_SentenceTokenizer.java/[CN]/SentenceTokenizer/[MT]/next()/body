{
  buffer.setLength(0);
  int ci;
  char ch, pch;
  boolean atBegin=true;
  tokenStart=tokenEnd;
  ci=bufferInput.read();
  ch=(char)ci;
  while (true) {
    if (ci == -1) {
      break;
    }
 else     if (PUNCTION.indexOf(ch) != -1) {
      buffer.append(ch);
      tokenEnd++;
      break;
    }
 else     if (atBegin && Utility.SPACES.indexOf(ch) != -1) {
      tokenStart++;
      tokenEnd++;
      ci=bufferInput.read();
      ch=(char)ci;
    }
 else {
      buffer.append(ch);
      atBegin=false;
      tokenEnd++;
      pch=ch;
      ci=bufferInput.read();
      ch=(char)ci;
      if (Utility.SPACES.indexOf(ch) != -1 && Utility.SPACES.indexOf(pch) != -1) {
        tokenEnd++;
        break;
      }
    }
  }
  if (buffer.length() == 0)   return null;
 else {
    t.clear();
    t.reinit(buffer.toString(),input.correctOffset(tokenStart),input.correctOffset(tokenEnd),"sentence");
    return t;
  }
}
