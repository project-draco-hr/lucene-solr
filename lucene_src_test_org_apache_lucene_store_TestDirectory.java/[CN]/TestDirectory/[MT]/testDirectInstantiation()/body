{
  File path=_TestUtil.getTempDir("testDirectInstantiation");
  int sz=3;
  Directory[] dirs=new Directory[sz];
  dirs[0]=new SimpleFSDirectory(path,null);
  dirs[1]=new NIOFSDirectory(path,null);
  dirs[2]=new MMapDirectory(path,null);
  for (int i=0; i < sz; i++) {
    Directory dir=dirs[i];
    dir.ensureOpen();
    String fname="foo." + i;
    String lockname="foo" + i + ".lck";
    IndexOutput out=dir.createOutput(fname);
    out.writeByte((byte)i);
    out.close();
    for (int j=0; j < sz; j++) {
      Directory d2=dirs[j];
      d2.ensureOpen();
      assertTrue(d2.fileExists(fname));
      assertEquals(1,d2.fileLength(fname));
      if (d2 instanceof MMapDirectory)       continue;
      IndexInput input=d2.openInput(fname);
      assertEquals((byte)i,input.readByte());
      input.close();
    }
    dirs[(i + 1) % sz].deleteFile(fname);
    for (int j=0; j < sz; j++) {
      Directory d2=dirs[j];
      assertFalse(d2.fileExists(fname));
    }
    Lock lock=dir.makeLock(lockname);
    assertTrue(lock.obtain());
    for (int j=0; j < sz; j++) {
      Directory d2=dirs[j];
      Lock lock2=d2.makeLock(lockname);
      try {
        assertFalse(lock2.obtain(1));
      }
 catch (      LockObtainFailedException e) {
      }
    }
    lock.release();
    lock=dirs[(i + 1) % sz].makeLock(lockname);
    assertTrue(lock.obtain());
    lock.release();
  }
  for (int i=0; i < sz; i++) {
    Directory dir=dirs[i];
    dir.ensureOpen();
    dir.close();
    assertFalse(dir.isOpen);
  }
  _TestUtil.rmDir(path);
}
