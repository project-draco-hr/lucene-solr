{
  affixReader.setPosition(8 * affix);
  char flag=(char)(affixReader.readShort() & 0xffff);
  affixReader.skipBytes(2);
  int condition=(char)(affixReader.readShort() & 0xffff);
  boolean crossProduct=(condition & 1) == 1;
  condition>>>=1;
  char append=(char)(affixReader.readShort() & 0xffff);
  List<CharsRef> stems=new ArrayList<>();
  IntsRef forms=dictionary.lookupWord(strippedWord,0,length);
  if (forms != null) {
    for (int i=0; i < forms.length; i+=formStep) {
      dictionary.flagLookup.get(forms.ints[forms.offset + i],scratch);
      char wordFlags[]=Dictionary.decodeFlags(scratch);
      if (Dictionary.hasFlag(wordFlags,flag)) {
        boolean chainedPrefix=dictionary.complexPrefixes && recursionDepth == 1 && prefix;
        if (chainedPrefix == false && prefixFlag >= 0 && !Dictionary.hasFlag(wordFlags,(char)prefixFlag)) {
          dictionary.flagLookup.get(append,scratch);
          char appendFlags[]=Dictionary.decodeFlags(scratch);
          if (!hasCrossCheckedFlag((char)prefixFlag,appendFlags,false)) {
            continue;
          }
        }
        if (dictionary.circumfix != -1) {
          dictionary.flagLookup.get(append,scratch);
          char appendFlags[]=Dictionary.decodeFlags(scratch);
          boolean suffixCircumfix=Dictionary.hasFlag(appendFlags,(char)dictionary.circumfix);
          if (circumfix != suffixCircumfix) {
            continue;
          }
        }
        if (caseVariant && dictionary.keepcase != -1 && Dictionary.hasFlag(wordFlags,(char)dictionary.keepcase)) {
          continue;
        }
        if (dictionary.onlyincompound != -1 && Dictionary.hasFlag(wordFlags,(char)dictionary.onlyincompound)) {
          continue;
        }
        stems.add(newStem(strippedWord,length,forms,i));
      }
    }
  }
  if (dictionary.circumfix != -1 && !circumfix && prefix) {
    dictionary.flagLookup.get(append,scratch);
    char appendFlags[]=Dictionary.decodeFlags(scratch);
    circumfix=Dictionary.hasFlag(appendFlags,(char)dictionary.circumfix);
  }
  if (crossProduct) {
    if (recursionDepth == 0) {
      if (prefix) {
        stems.addAll(stem(strippedWord,length,affix,flag,flag,++recursionDepth,dictionary.complexPrefixes && dictionary.twoStageAffix,true,true,circumfix,caseVariant));
      }
 else       if (dictionary.complexPrefixes == false && dictionary.twoStageAffix) {
        stems.addAll(stem(strippedWord,length,affix,flag,prefixFlag,++recursionDepth,false,true,false,circumfix,caseVariant));
      }
    }
 else     if (recursionDepth == 1) {
      if (prefix && dictionary.complexPrefixes) {
        stems.addAll(stem(strippedWord,length,affix,flag,flag,++recursionDepth,false,true,true,circumfix,caseVariant));
      }
 else       if (prefix == false && dictionary.complexPrefixes == false && dictionary.twoStageAffix) {
        stems.addAll(stem(strippedWord,length,affix,flag,prefixFlag,++recursionDepth,false,true,false,circumfix,caseVariant));
      }
    }
  }
  return stems;
}
