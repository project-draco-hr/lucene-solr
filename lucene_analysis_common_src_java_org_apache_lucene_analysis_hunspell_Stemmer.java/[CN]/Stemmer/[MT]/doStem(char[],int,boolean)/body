{
  List<CharsRef> stems=new ArrayList<>();
  IntsRef forms=dictionary.lookupWord(word,0,length);
  if (forms != null) {
    for (int i=0; i < forms.length; i+=formStep) {
      boolean checkKeepCase=caseVariant && dictionary.keepcase != -1;
      boolean checkNeedAffix=dictionary.needaffix != -1;
      boolean checkOnlyInCompound=dictionary.onlyincompound != -1;
      if (checkKeepCase || checkNeedAffix || checkOnlyInCompound) {
        dictionary.flagLookup.get(forms.ints[forms.offset + i],scratch);
        char wordFlags[]=Dictionary.decodeFlags(scratch);
        if (checkKeepCase && Dictionary.hasFlag(wordFlags,(char)dictionary.keepcase)) {
          continue;
        }
        if (checkNeedAffix && Dictionary.hasFlag(wordFlags,(char)dictionary.needaffix)) {
          continue;
        }
        if (checkOnlyInCompound && Dictionary.hasFlag(wordFlags,(char)dictionary.onlyincompound)) {
          continue;
        }
      }
      stems.add(newStem(word,length,forms,i));
    }
  }
  try {
    boolean v=stems.addAll(stem(word,length,-1,-1,-1,0,true,true,false,false,caseVariant));
  }
 catch (  IOException bogus) {
    throw new RuntimeException(bogus);
  }
  return stems;
}
