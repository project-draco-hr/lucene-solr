{
  if (lowerVal == null && upperVal == null) {
    throw new IllegalStateException("Both min and max values cannot be null, call rewrite first");
  }
  return new RandomAccessWeight(DocValuesRangeQuery.this){
    @Override protected Bits getMatchingDocs(    LeafReaderContext context) throws IOException {
      if (lowerVal instanceof Long || upperVal instanceof Long) {
        final SortedNumericDocValues values=DocValues.getSortedNumeric(context.reader(),field);
        final long min;
        if (lowerVal == null) {
          min=Long.MIN_VALUE;
        }
 else         if (includeLower) {
          min=(long)lowerVal;
        }
 else {
          if ((long)lowerVal == Long.MAX_VALUE) {
            return null;
          }
          min=1 + (long)lowerVal;
        }
        final long max;
        if (upperVal == null) {
          max=Long.MAX_VALUE;
        }
 else         if (includeUpper) {
          max=(long)upperVal;
        }
 else {
          if ((long)upperVal == Long.MIN_VALUE) {
            return null;
          }
          max=-1 + (long)upperVal;
        }
        if (min > max) {
          return null;
        }
        return new Bits(){
          @Override public boolean get(          int doc){
            values.setDocument(doc);
            final int count=values.count();
            for (int i=0; i < count; ++i) {
              final long value=values.valueAt(i);
              if (value >= min && value <= max) {
                return true;
              }
            }
            return false;
          }
          @Override public int length(){
            return context.reader().maxDoc();
          }
        }
;
      }
 else       if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {
        final SortedSetDocValues values=DocValues.getSortedSet(context.reader(),field);
        final long minOrd;
        if (lowerVal == null) {
          minOrd=0;
        }
 else {
          final long ord=values.lookupTerm((BytesRef)lowerVal);
          if (ord < 0) {
            minOrd=-1 - ord;
          }
 else           if (includeLower) {
            minOrd=ord;
          }
 else {
            minOrd=ord + 1;
          }
        }
        final long maxOrd;
        if (upperVal == null) {
          maxOrd=values.getValueCount() - 1;
        }
 else {
          final long ord=values.lookupTerm((BytesRef)upperVal);
          if (ord < 0) {
            maxOrd=-2 - ord;
          }
 else           if (includeUpper) {
            maxOrd=ord;
          }
 else {
            maxOrd=ord - 1;
          }
        }
        if (minOrd > maxOrd) {
          return null;
        }
        return new Bits(){
          @Override public boolean get(          int doc){
            values.setDocument(doc);
            for (long ord=values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord=values.nextOrd()) {
              if (ord >= minOrd && ord <= maxOrd) {
                return true;
              }
            }
            return false;
          }
          @Override public int length(){
            return context.reader().maxDoc();
          }
        }
;
      }
 else {
        throw new AssertionError();
      }
    }
  }
;
}
