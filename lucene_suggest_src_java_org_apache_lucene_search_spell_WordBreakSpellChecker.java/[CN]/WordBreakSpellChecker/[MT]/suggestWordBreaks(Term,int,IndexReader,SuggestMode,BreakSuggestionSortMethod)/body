{
  if (maxSuggestions < 1) {
    return new SuggestWord[0][0];
  }
  if (suggestMode == null) {
    suggestMode=SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;
  }
  if (sortMethod == null) {
    sortMethod=BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;
  }
  int queueInitialCapacity=maxSuggestions > 10 ? 10 : maxSuggestions;
  Comparator<SuggestWordArrayWrapper> queueComparator=sortMethod == BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY ? new LengthThenMaxFreqComparator() : new LengthThenSumFreqComparator();
  Queue<SuggestWordArrayWrapper> suggestions=new PriorityQueue<>(queueInitialCapacity,queueComparator);
  int origFreq=ir.docFreq(term);
  if (origFreq > 0 && suggestMode == SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX) {
    return new SuggestWord[0][];
  }
  int useMinSuggestionFrequency=minSuggestionFrequency;
  if (suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) {
    useMinSuggestionFrequency=(origFreq == 0 ? 1 : origFreq);
  }
  generateBreakUpSuggestions(term,ir,1,maxSuggestions,useMinSuggestionFrequency,new SuggestWord[0],suggestions,0,sortMethod);
  SuggestWord[][] suggestionArray=new SuggestWord[suggestions.size()][];
  for (int i=suggestions.size() - 1; i >= 0; i--) {
    suggestionArray[i]=suggestions.remove().suggestWords;
  }
  return suggestionArray;
}
