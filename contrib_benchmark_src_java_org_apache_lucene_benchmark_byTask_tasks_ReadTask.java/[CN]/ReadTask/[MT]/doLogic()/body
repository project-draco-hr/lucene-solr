{
  int res=0;
  boolean closeReader=false;
  IndexReader ir=getRunData().getIndexReader();
  if (ir == null) {
    Directory dir=getRunData().getDirectory();
    ir=IndexReader.open(dir);
    closeReader=true;
  }
  if (withWarm()) {
    Document doc=null;
    for (int m=0; m < ir.maxDoc(); m++) {
      if (!ir.isDeleted(m)) {
        doc=ir.document(m);
        res+=(doc == null ? 0 : 1);
      }
    }
  }
  if (withSearch()) {
    res++;
    IndexSearcher searcher=new IndexSearcher(ir);
    QueryMaker queryMaker=getQueryMaker();
    Query q=queryMaker.makeQuery();
    Sort sort=getSort();
    Hits hits;
    if (sort != null) {
      hits=searcher.search(q,sort);
    }
 else {
      hits=searcher.search(q);
    }
    if (withTraverse() && hits != null) {
      int traversalSize=Math.min(hits.length(),traversalSize());
      if (traversalSize > 0) {
        boolean retrieve=withRetrieve();
        int numHighlight=Math.min(numToHighlight(),hits.length());
        Analyzer analyzer=getRunData().getAnalyzer();
        Highlighter highlighter=null;
        int maxFrags=1;
        if (numHighlight > 0) {
          highlighter=getHighlighter(q);
          maxFrags=maxNumFragments();
        }
        boolean merge=isMergeContiguousFragments();
        for (int m=0; m < traversalSize; m++) {
          int id=hits.id(m);
          res++;
          if (retrieve) {
            Document document=retrieveDoc(ir,id);
            res+=document != null ? 1 : 0;
            if (numHighlight > 0 && m < numHighlight) {
              Collection fieldsToHighlight=getFieldsToHighlight(document);
              for (Iterator iterator=fieldsToHighlight.iterator(); iterator.hasNext(); ) {
                String field=(String)iterator.next();
                String text=document.get(field);
                TokenStream ts=TokenSources.getAnyTokenStream(ir,id,field,document,analyzer);
                res+=doHighlight(ts,text,highlighter,merge,maxFrags);
              }
            }
          }
        }
      }
    }
    searcher.close();
  }
  if (closeReader) {
    ir.close();
  }
  return res;
}
