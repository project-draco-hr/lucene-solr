{
  int res=0;
  boolean closeReader=false;
  IndexReader ir=getRunData().getIndexReader();
  if (ir == null) {
    Directory dir=getRunData().getDirectory();
    ir=IndexReader.open(dir);
    closeReader=true;
  }
  if (withWarm()) {
    Document doc=null;
    for (int m=0; m < ir.maxDoc(); m++) {
      if (!ir.isDeleted(m)) {
        doc=ir.document(m);
        res+=(doc == null ? 0 : 1);
      }
    }
  }
  if (withSearch()) {
    res++;
    final IndexSearcher searcher;
    if (closeReader) {
      searcher=new IndexSearcher(ir);
    }
 else {
      searcher=getRunData().getIndexSearcher();
    }
    QueryMaker queryMaker=getQueryMaker();
    Query q=queryMaker.makeQuery();
    Sort sort=getSort();
    TopDocs hits;
    final int numHits=numHits();
    if (numHits > 0) {
      if (sort != null) {
        TopFieldCollector collector=TopFieldCollector.create(sort,numHits,true,withScore(),withMaxScore());
        searcher.search(q,collector);
        hits=collector.topDocs();
      }
 else {
        hits=searcher.search(q,numHits);
      }
      if (withTraverse()) {
        final ScoreDoc[] scoreDocs=hits.scoreDocs;
        int traversalSize=Math.min(scoreDocs.length,traversalSize());
        if (traversalSize > 0) {
          boolean retrieve=withRetrieve();
          int numHighlight=Math.min(numToHighlight(),scoreDocs.length);
          Analyzer analyzer=getRunData().getAnalyzer();
          Highlighter highlighter=null;
          int maxFrags=1;
          if (numHighlight > 0) {
            highlighter=getHighlighter(q);
            maxFrags=maxNumFragments();
          }
          boolean merge=isMergeContiguousFragments();
          for (int m=0; m < traversalSize; m++) {
            int id=scoreDocs[m].doc;
            res++;
            if (retrieve) {
              Document document=retrieveDoc(ir,id);
              res+=document != null ? 1 : 0;
              if (numHighlight > 0 && m < numHighlight) {
                Collection fieldsToHighlight=getFieldsToHighlight(document);
                for (Iterator iterator=fieldsToHighlight.iterator(); iterator.hasNext(); ) {
                  String field=(String)iterator.next();
                  String text=document.get(field);
                  TokenStream ts=TokenSources.getAnyTokenStream(ir,id,field,document,analyzer);
                  res+=doHighlight(ts,text,highlighter,merge,maxFrags);
                }
              }
            }
          }
        }
      }
    }
    searcher.close();
  }
  if (closeReader) {
    ir.close();
  }
  return res;
}
