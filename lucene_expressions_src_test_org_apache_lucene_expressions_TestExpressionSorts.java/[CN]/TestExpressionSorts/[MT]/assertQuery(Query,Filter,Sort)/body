{
  int size=TestUtil.nextInt(random(),1,searcher.getIndexReader().maxDoc() / 5);
  TopDocs expected=searcher.search(query,filter,size,sort,random().nextBoolean(),random().nextBoolean());
  SortField original[]=sort.getSort();
  SortField mutated[]=new SortField[original.length];
  for (int i=0; i < mutated.length; i++) {
    if (random().nextInt(3) > 0) {
      SortField s=original[i];
      Expression expr=JavascriptCompiler.compile(s.getField());
      SimpleBindings simpleBindings=new SimpleBindings();
      simpleBindings.add(s);
      boolean reverse=s.getType() == SortField.Type.SCORE || s.getReverse();
      mutated[i]=expr.getSortField(simpleBindings,reverse);
    }
 else {
      mutated[i]=original[i];
    }
  }
  Sort mutatedSort=new Sort(mutated);
  TopDocs actual=searcher.search(query,filter,size,mutatedSort,random().nextBoolean(),random().nextBoolean());
  CheckHits.checkEqual(query,expected.scoreDocs,actual.scoreDocs);
  if (size < actual.totalHits) {
    expected=searcher.searchAfter(expected.scoreDocs[size - 1],query,filter,size,sort);
    actual=searcher.searchAfter(actual.scoreDocs[size - 1],query,filter,size,mutatedSort);
    CheckHits.checkEqual(query,expected.scoreDocs,actual.scoreDocs);
  }
}
