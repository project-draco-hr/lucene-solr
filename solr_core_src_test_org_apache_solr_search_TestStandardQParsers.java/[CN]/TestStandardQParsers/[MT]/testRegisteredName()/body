{
  Map<String,Class<QParserPlugin>> standardPlugins=getStandardQParsers();
  List<String> notStatic=new ArrayList<String>(standardPlugins.size());
  List<String> notFinal=new ArrayList<String>(standardPlugins.size());
  List<String> mismatch=new ArrayList<String>(standardPlugins.size());
  for (  Map.Entry<String,Class<QParserPlugin>> pair : standardPlugins.entrySet()) {
    String regName=pair.getKey();
    Class<QParserPlugin> clazz=pair.getValue();
    Field nameField=clazz.getField(FIELD_NAME);
    int modifiers=nameField.getModifiers();
    if (!Modifier.isFinal(modifiers)) {
      notFinal.add(clazz.getName());
    }
    if (!Modifier.isStatic(modifiers)) {
      notStatic.add(clazz.getName());
    }
 else     if (!regName.equals(nameField.get(null))) {
      mismatch.add(regName + " != " + nameField.get(null)+ "("+ clazz.getName()+ ")");
    }
  }
  assertTrue("All standard QParsers must have final NAME, broken: " + notFinal,notFinal.isEmpty());
  assertTrue("All standard QParsers must have static NAME, broken: " + notStatic,notStatic.isEmpty());
  assertTrue("All standard QParsers must be registered using NAME, broken: " + mismatch,mismatch.isEmpty());
  assertTrue("DEFAULT_QTYPE is not in the standard set of registered names: " + QParserPlugin.DEFAULT_QTYPE,standardPlugins.keySet().contains(QParserPlugin.DEFAULT_QTYPE));
}
