{
  int numBitsSet=filter.cardinality();
  FixedBitSet rightSizedBitSet=filter;
  int rightSizedBitSetSize=bloomSize;
  for (int i=0; i < usableBitSetSizes.length; i++) {
    int candidateBitsetSize=usableBitSetSizes[i];
    float candidateSaturation=(float)numBitsSet / (float)candidateBitsetSize;
    if (candidateSaturation <= targetMaxSaturation) {
      rightSizedBitSetSize=candidateBitsetSize;
      break;
    }
  }
  if (rightSizedBitSetSize < bloomSize) {
    rightSizedBitSet=new FixedBitSet(rightSizedBitSetSize + 1);
    int bitIndex=0;
    do {
      bitIndex=filter.nextSetBit(bitIndex);
      if (bitIndex >= 0) {
        int downSizedBitIndex=bitIndex & rightSizedBitSetSize;
        rightSizedBitSet.set(downSizedBitIndex);
        bitIndex++;
      }
    }
 while ((bitIndex >= 0) && (bitIndex <= bloomSize));
  }
 else {
    return null;
  }
  return new FuzzySet(rightSizedBitSet,rightSizedBitSetSize,hashFunction);
}
