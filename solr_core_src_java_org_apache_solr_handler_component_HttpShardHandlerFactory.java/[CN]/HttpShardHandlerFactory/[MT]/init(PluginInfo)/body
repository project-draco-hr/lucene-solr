{
  NamedList args=info.initArgs;
  this.soTimeout=getParameter(args,HttpClientUtil.PROP_SO_TIMEOUT,soTimeout);
  this.scheme=getParameter(args,INIT_URL_SCHEME,null);
  if (StringUtils.endsWith(this.scheme,"://")) {
    this.scheme=StringUtils.removeEnd(this.scheme,"://");
  }
  this.connectionTimeout=getParameter(args,HttpClientUtil.PROP_CONNECTION_TIMEOUT,connectionTimeout);
  this.maxConnectionsPerHost=getParameter(args,HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST,maxConnectionsPerHost);
  this.maxConnections=getParameter(args,HttpClientUtil.PROP_MAX_CONNECTIONS,maxConnections);
  this.corePoolSize=getParameter(args,INIT_CORE_POOL_SIZE,corePoolSize);
  this.maximumPoolSize=getParameter(args,INIT_MAX_POOL_SIZE,maximumPoolSize);
  this.keepAliveTime=getParameter(args,MAX_THREAD_IDLE_TIME,keepAliveTime);
  this.queueSize=getParameter(args,INIT_SIZE_OF_QUEUE,queueSize);
  this.accessPolicy=getParameter(args,INIT_FAIRNESS_POLICY,accessPolicy);
  this.useRetries=getParameter(args,USE_RETRIES,useRetries);
  String v=System.getProperty("tests.shardhandler.randomSeed");
  if (v != null) {
    r.setSeed(Long.parseLong(v));
  }
  BlockingQueue<Runnable> blockingQueue=(this.queueSize == -1) ? new SynchronousQueue<Runnable>(this.accessPolicy) : new ArrayBlockingQueue<Runnable>(this.queueSize,this.accessPolicy);
  this.commExecutor=new ThreadPoolExecutor(this.corePoolSize,this.maximumPoolSize,this.keepAliveTime,TimeUnit.SECONDS,blockingQueue,new DefaultSolrThreadFactory("httpShardExecutor"));
  ModifiableSolrParams clientParams=new ModifiableSolrParams();
  clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST,maxConnectionsPerHost);
  clientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS,maxConnections);
  clientParams.set(HttpClientUtil.PROP_SO_TIMEOUT,soTimeout);
  clientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT,connectionTimeout);
  if (!useRetries) {
    clientParams.set(HttpClientUtil.PROP_USE_RETRY,false);
  }
  this.defaultClient=HttpClientUtil.createClient(clientParams);
  if (useRetries) {
    ((DefaultHttpClient)this.defaultClient).setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler());
  }
  this.loadbalancer=createLoadbalancer(defaultClient);
}
