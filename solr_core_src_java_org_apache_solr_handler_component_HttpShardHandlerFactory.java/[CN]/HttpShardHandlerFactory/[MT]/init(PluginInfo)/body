{
  StringBuilder sb=new StringBuilder();
  NamedList args=info.initArgs;
  this.soTimeout=getParameter(args,HttpClientUtil.PROP_SO_TIMEOUT,soTimeout,sb);
  this.scheme=getParameter(args,INIT_URL_SCHEME,null,sb);
  if (StringUtils.endsWith(this.scheme,"://")) {
    this.scheme=StringUtils.removeEnd(this.scheme,"://");
  }
  this.connectionTimeout=getParameter(args,HttpClientUtil.PROP_CONNECTION_TIMEOUT,connectionTimeout,sb);
  this.maxConnectionsPerHost=getParameter(args,HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST,maxConnectionsPerHost,sb);
  this.maxConnections=getParameter(args,HttpClientUtil.PROP_MAX_CONNECTIONS,maxConnections,sb);
  this.corePoolSize=getParameter(args,INIT_CORE_POOL_SIZE,corePoolSize,sb);
  this.maximumPoolSize=getParameter(args,INIT_MAX_POOL_SIZE,maximumPoolSize,sb);
  this.keepAliveTime=getParameter(args,MAX_THREAD_IDLE_TIME,keepAliveTime,sb);
  this.queueSize=getParameter(args,INIT_SIZE_OF_QUEUE,queueSize,sb);
  this.accessPolicy=getParameter(args,INIT_FAIRNESS_POLICY,accessPolicy,sb);
  log.debug("created with {}",sb);
  String v=System.getProperty("tests.shardhandler.randomSeed");
  if (v != null) {
    r.setSeed(Long.parseLong(v));
  }
  BlockingQueue<Runnable> blockingQueue=(this.queueSize == -1) ? new SynchronousQueue<Runnable>(this.accessPolicy) : new ArrayBlockingQueue<Runnable>(this.queueSize,this.accessPolicy);
  this.commExecutor=new ExecutorUtil.MDCAwareThreadPoolExecutor(this.corePoolSize,this.maximumPoolSize,this.keepAliveTime,TimeUnit.SECONDS,blockingQueue,new DefaultSolrThreadFactory("httpShardExecutor"));
  ModifiableSolrParams clientParams=getClientParams();
  this.defaultClient=HttpClientUtil.createClient(clientParams);
  this.loadbalancer=createLoadbalancer(defaultClient);
}
