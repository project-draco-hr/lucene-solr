{
  final String baseUrl=getBaseUrl((HttpSolrClient)clients.get(0));
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action","BADACTION");
  String collectionName="badactioncollection";
  params.set("name",collectionName);
  params.set("numShards",2);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  boolean gotExp=false;
  try {
    makeRequest(baseUrl,request);
  }
 catch (  SolrException e) {
    gotExp=true;
  }
  assertTrue(gotExp);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  params.set("numShards",2);
  collectionName="collection";
  if (secondConfigSet) {
    params.set("collection.configName","conf1");
  }
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  gotExp=false;
  try {
    makeRequest(baseUrl,request);
  }
 catch (  SolrException e) {
    gotExp=true;
  }
  assertTrue(gotExp);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  collectionName="collection";
  params.set("name",collectionName);
  params.set("numShards",2);
  if (secondConfigSet) {
    params.set("collection.configName","conf1");
  }
  params.set(REPLICATION_FACTOR,10);
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  gotExp=false;
  try {
    makeRequest(baseUrl,request);
  }
 catch (  SolrException e) {
    gotExp=true;
  }
  assertTrue(gotExp);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  collectionName="acollection";
  params.set("name",collectionName);
  params.set(REPLICATION_FACTOR,10);
  if (secondConfigSet) {
    params.set("collection.configName","conf1");
  }
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  gotExp=false;
  try {
    makeRequest(baseUrl,request);
  }
 catch (  SolrException e) {
    gotExp=true;
  }
  assertTrue(gotExp);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  collectionName="acollection";
  params.set("name",collectionName);
  params.set(REPLICATION_FACTOR,10);
  params.set("numShards",0);
  if (secondConfigSet) {
    params.set("collection.configName","conf1");
  }
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  gotExp=false;
  try {
    makeRequest(baseUrl,request);
  }
 catch (  SolrException e) {
    gotExp=true;
  }
  assertTrue(gotExp);
  Create createCmd=new Create();
  createCmd.setCoreName("halfcollection_shard1_replica1");
  createCmd.setCollection("halfcollectionblocker");
  String dataDir=createTempDir().toFile().getAbsolutePath();
  createCmd.setDataDir(dataDir);
  createCmd.setNumShards(1);
  if (secondConfigSet) {
    createCmd.setCollectionConfigName("conf1");
  }
  makeRequest(baseUrl,createCmd);
  createCmd=new Create();
  createCmd.setCoreName("halfcollection_shard1_replica1");
  createCmd.setCollection("halfcollectionblocker2");
  dataDir=createTempDir().toFile().getAbsolutePath();
  createCmd.setDataDir(dataDir);
  createCmd.setNumShards(1);
  if (secondConfigSet) {
    createCmd.setCollectionConfigName("conf1");
  }
  makeRequest(getBaseUrl((HttpSolrClient)clients.get(1)),createCmd);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  collectionName="halfcollection";
  params.set("name",collectionName);
  params.set("numShards",2);
  params.set("wt","xml");
  if (secondConfigSet) {
    params.set("collection.configName","conf1");
  }
  String nn1=jettys.get(0).getCoreContainer().getZkController().getNodeName();
  String nn2=jettys.get(1).getCoreContainer().getZkController().getNodeName();
  params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET,nn1 + "," + nn2);
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  NamedList<Object> resp=makeRequest(baseUrl,request,60000);
  SimpleOrderedMap success=(SimpleOrderedMap)resp.get("success");
  SimpleOrderedMap failure=(SimpleOrderedMap)resp.get("failure");
  assertNotNull(resp.toString(),success);
  assertNotNull(resp.toString(),failure);
  String val1=success.getVal(0).toString();
  String val2=failure.getVal(0).toString();
  assertTrue(val1.contains("SolrException") || val2.contains("SolrException"));
}
