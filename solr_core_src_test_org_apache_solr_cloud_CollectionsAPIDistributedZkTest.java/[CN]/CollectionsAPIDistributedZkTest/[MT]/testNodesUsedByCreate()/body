{
  final String baseUrl=getBaseUrl((HttpSolrServer)clients.get(0));
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  params.set(NUM_SLICES,2);
  params.set(REPLICATION_FACTOR,2);
  params.set(MAX_SHARDS_PER_NODE,1000);
  String collectionName=NODES_USED_COLLECTION;
  params.set("name",collectionName);
  if (secondConfigSet) {
    params.set(COLLECTION_CONFIG_NAME,"conf1");
  }
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  createNewSolrServer("",baseUrl).request(request);
  List<Integer> numShardsNumReplicaList=new ArrayList<>();
  numShardsNumReplicaList.add(2);
  numShardsNumReplicaList.add(2);
  checkForCollection(NODES_USED_COLLECTION,numShardsNumReplicaList,null);
  List<String> createNodeList=new ArrayList<>();
  Set<String> liveNodes=cloudClient.getZkStateReader().getClusterState().getLiveNodes();
  for (  String node : liveNodes) {
    createNodeList.add(node);
  }
  DocCollection col=cloudClient.getZkStateReader().getClusterState().getCollection(NODES_USED_COLLECTION);
  Collection<Slice> slices=col.getSlices();
  for (  Slice slice : slices) {
    Collection<Replica> replicas=slice.getReplicas();
    for (    Replica replica : replicas) {
      createNodeList.remove(replica.getNodeName());
    }
  }
  printLayout();
  assertEquals(createNodeList.toString(),Math.max(0,shardCount + 1 - 4),createNodeList.size());
}
