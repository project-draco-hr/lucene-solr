{
class CollectionThread extends Thread {
    public CollectionThread(    String name){
      super(name);
    }
    public void run(){
      Map<String,List<Integer>> collectionInfos=new HashMap<>();
      int cnt=random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;
      for (int i=0; i < cnt; i++) {
        String collectionName="awholynewstresscollection_" + getName() + "_"+ i;
        int numShards=TestUtil.nextInt(random(),0,getShardCount() * 2) + 1;
        int replicationFactor=TestUtil.nextInt(random(),0,3) + 1;
        int maxShardsPerNode=(((numShards * 2 * replicationFactor) / getCommonCloudSolrClient().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
        try (CloudSolrClient client=createCloudClient(i == 1 ? collectionName : null)){
          createCollection(collectionInfos,collectionName,numShards,replicationFactor,maxShardsPerNode,client,null,"conf1");
          CollectionAdminRequest.Delete delete=new CollectionAdminRequest.Delete();
          delete.setCollectionName(collectionName);
          client.request(delete);
        }
 catch (        SolrServerException|IOException e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
      }
    }
  }
  List<Thread> threads=new ArrayList<>();
  int numThreads=TEST_NIGHTLY ? 6 : 2;
  for (int i=0; i < numThreads; i++) {
    CollectionThread thread=new CollectionThread("collection" + i);
    threads.add(thread);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
}
