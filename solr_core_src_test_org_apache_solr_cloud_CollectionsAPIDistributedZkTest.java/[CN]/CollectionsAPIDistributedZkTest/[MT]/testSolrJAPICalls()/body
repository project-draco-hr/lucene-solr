{
  SolrServer server=createNewSolrServer("",getBaseUrl((HttpSolrServer)clients.get(0)));
  CollectionAdminResponse response;
  Map<String,NamedList<Integer>> coresStatus;
  Map<String,NamedList<Integer>> nodesStatus;
  CollectionAdminRequest.Create createCollectionRequest=new CollectionAdminRequest.Create();
  createCollectionRequest.setCollectionName("solrj_collection");
  createCollectionRequest.setNumShards(2);
  createCollectionRequest.setReplicationFactor(2);
  createCollectionRequest.setConfigName("conf1");
  createCollectionRequest.setRouterField("myOwnField");
  response=createCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  coresStatus=response.getCollectionCoresStatus();
  assertEquals(4,coresStatus.size());
  for (int i=0; i < 4; i++) {
    NamedList<Integer> status=coresStatus.get("solrj_collection_shard" + (i / 2 + 1) + "_replica"+ (i % 2 + 1));
    assertEquals(0,(int)status.get("status"));
    assertTrue(status.get("QTime") > 0);
  }
  createCollectionRequest=new CollectionAdminRequest.Create();
  createCollectionRequest.setCollectionName("solrj_implicit");
  createCollectionRequest.setShards("shardA,shardB");
  createCollectionRequest.setConfigName("conf1");
  createCollectionRequest.setRouterName("implicit");
  response=createCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  coresStatus=response.getCollectionCoresStatus();
  assertEquals(2,coresStatus.size());
  CollectionAdminRequest.CreateShard createShardRequest=new CollectionAdminRequest.CreateShard();
  createShardRequest.setCollectionName("solrj_implicit");
  createShardRequest.setShardName("shardC");
  response=createShardRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  coresStatus=response.getCollectionCoresStatus();
  assertEquals(1,coresStatus.size());
  assertEquals(0,(int)coresStatus.get("solrj_implicit_shardC_replica1").get("status"));
  CollectionAdminRequest.DeleteShard deleteShardRequest=new CollectionAdminRequest.DeleteShard();
  deleteShardRequest.setCollectionName("solrj_implicit");
  deleteShardRequest.setShardName("shardC");
  response=deleteShardRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  nodesStatus=response.getCollectionNodesStatus();
  assertEquals(1,nodesStatus.size());
  CollectionAdminRequest.Delete deleteCollectionRequest=new CollectionAdminRequest.Delete();
  deleteCollectionRequest.setCollectionName("solrj_implicit");
  response=deleteCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  nodesStatus=response.getCollectionNodesStatus();
  assertEquals(2,nodesStatus.size());
  createCollectionRequest=new CollectionAdminRequest.Create();
  createCollectionRequest.setCollectionName("conf1");
  createCollectionRequest.setNumShards(4);
  createCollectionRequest.setConfigName("conf1");
  response=createCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  CollectionAdminRequest.Reload reloadCollectionRequest=new CollectionAdminRequest.Reload();
  reloadCollectionRequest.setCollectionName("conf1");
  response=reloadCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  CollectionAdminRequest.CreateAlias createAliasRequest=new CollectionAdminRequest.CreateAlias();
  createAliasRequest.setCollectionName("solrj_alias");
  createAliasRequest.setAliasedCollections("conf1,solrj_collection");
  response=createAliasRequest.process(server);
  assertEquals(0,response.getStatus());
  CollectionAdminRequest.DeleteAlias deleteAliasRequest=new CollectionAdminRequest.DeleteAlias();
  deleteAliasRequest.setCollectionName("solrj_alias");
  deleteAliasRequest.process(server);
  assertEquals(0,response.getStatus());
  CollectionAdminRequest.SplitShard splitShardRequest=new CollectionAdminRequest.SplitShard();
  splitShardRequest.setCollectionName("conf1");
  splitShardRequest.setShardName("shard1");
  response=splitShardRequest.process(server);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  coresStatus=response.getCollectionCoresStatus();
  assertEquals(0,(int)coresStatus.get("conf1_shard1_0_replica1").get("status"));
  assertEquals(0,(int)coresStatus.get("conf1_shard1_1_replica1").get("status"));
  deleteCollectionRequest=new CollectionAdminRequest.Delete();
  deleteCollectionRequest.setCollectionName("conf1");
  response=deleteCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  nodesStatus=response.getCollectionNodesStatus();
  assertTrue(response.isSuccess());
  assertEquals(4,nodesStatus.size());
  deleteCollectionRequest=new CollectionAdminRequest.Delete();
  deleteCollectionRequest.setCollectionName("solrj_collection");
  deleteCollectionRequest.process(server);
  assertEquals(0,response.getStatus());
  nodesStatus=response.getCollectionNodesStatus();
  assertTrue(response.isSuccess());
  assertEquals(4,nodesStatus.size());
}
