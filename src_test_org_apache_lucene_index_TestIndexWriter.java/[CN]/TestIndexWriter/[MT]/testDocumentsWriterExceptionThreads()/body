{
  Analyzer analyzer=new Analyzer(){
    @Override public TokenStream tokenStream(    String fieldName,    Reader reader){
      return new CrashingFilter(fieldName,new WhitespaceTokenizer(TEST_VERSION_CURRENT,reader));
    }
  }
;
  final int NUM_THREAD=3;
  final int NUM_ITER=100;
  for (int i=0; i < 2; i++) {
    MockRAMDirectory dir=new MockRAMDirectory();
{
      final IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));
      final int finalI=i;
      Thread[] threads=new Thread[NUM_THREAD];
      for (int t=0; t < NUM_THREAD; t++) {
        threads[t]=new Thread(){
          @Override public void run(){
            try {
              for (int iter=0; iter < NUM_ITER; iter++) {
                Document doc=new Document();
                doc.add(new Field("contents","here are some contents",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
                writer.addDocument(doc);
                writer.addDocument(doc);
                doc.add(new Field("crash","this should crash after 4 terms",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
                doc.add(new Field("other","this will not get indexed",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
                try {
                  writer.addDocument(doc);
                  fail("did not hit expected exception");
                }
 catch (                IOException ioe) {
                }
                if (0 == finalI) {
                  doc=new Document();
                  doc.add(new Field("contents","here are some contents",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
                  writer.addDocument(doc);
                  writer.addDocument(doc);
                }
              }
            }
 catch (            Throwable t) {
synchronized (this) {
                System.out.println(Thread.currentThread().getName() + ": ERROR: hit unexpected exception");
                t.printStackTrace(System.out);
              }
              fail();
            }
          }
        }
;
        threads[t].start();
      }
      for (int t=0; t < NUM_THREAD; t++)       threads[t].join();
      writer.close();
    }
    IndexReader reader=IndexReader.open(dir,true);
    int expected=(3 + (1 - i) * 2) * NUM_THREAD * NUM_ITER;
    assertEquals(expected,reader.docFreq(new Term("contents","here")));
    assertEquals(expected,reader.maxDoc());
    int numDel=0;
    for (int j=0; j < reader.maxDoc(); j++) {
      if (reader.isDeleted(j))       numDel++;
 else {
        reader.document(j);
        reader.getTermFreqVectors(j);
      }
    }
    reader.close();
    assertEquals(NUM_THREAD * NUM_ITER,numDel);
    IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(10));
    Document doc=new Document();
    doc.add(new Field("contents","here are some contents",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
    for (int j=0; j < 17; j++)     writer.addDocument(doc);
    writer.optimize();
    writer.close();
    reader=IndexReader.open(dir,true);
    expected+=17 - NUM_THREAD * NUM_ITER;
    assertEquals(expected,reader.docFreq(new Term("contents","here")));
    assertEquals(expected,reader.maxDoc());
    numDel=0;
    for (int j=0; j < reader.maxDoc(); j++) {
      if (reader.isDeleted(j))       numDel++;
 else {
        reader.document(j);
        reader.getTermFreqVectors(j);
      }
    }
    reader.close();
    assertEquals(0,numDel);
    dir.close();
  }
}
