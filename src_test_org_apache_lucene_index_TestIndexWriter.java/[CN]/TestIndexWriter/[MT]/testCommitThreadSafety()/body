{
  final int NUM_THREADS=5;
  final double RUN_SEC=0.5;
  final Directory dir=new MockRAMDirectory();
  final IndexWriter w=new IndexWriter(dir,new SimpleAnalyzer(Version.LUCENE_CURRENT),IndexWriter.MaxFieldLength.UNLIMITED);
  w.commit();
  final AtomicBoolean failed=new AtomicBoolean();
  Thread[] threads=new Thread[NUM_THREADS];
  final long endTime=System.currentTimeMillis() + ((long)(RUN_SEC * 1000));
  for (int i=0; i < NUM_THREADS; i++) {
    final int finalI=i;
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          final Document doc=new Document();
          IndexReader r=IndexReader.open(dir);
          Field f=new Field("f","",Field.Store.NO,Field.Index.NOT_ANALYZED);
          doc.add(f);
          int count=0;
          do {
            if (failed.get())             break;
            for (int j=0; j < 10; j++) {
              final String s=finalI + "_" + String.valueOf(count++);
              f.setValue(s);
              w.addDocument(doc);
              w.commit();
              IndexReader r2=r.reopen();
              assertTrue(r2 != r);
              r.close();
              r=r2;
              assertEquals("term=f:" + s,1,r.docFreq(new Term("f",s)));
            }
          }
 while (System.currentTimeMillis() < endTime);
          r.close();
        }
 catch (        Throwable t) {
          failed.set(true);
          throw new RuntimeException(t);
        }
      }
    }
;
    threads[i].start();
  }
  for (int i=0; i < NUM_THREADS; i++) {
    threads[i].join();
  }
  w.close();
  dir.close();
  assertFalse(failed.get());
}
