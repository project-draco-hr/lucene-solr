{
  SinkTokenizer tokens=new SinkTokenizer();
  tokens.addAttribute(TermAttribute.class);
  tokens.addAttribute(PositionIncrementAttribute.class);
  AttributeSource state=new AttributeSource();
  TermAttribute termAtt=(TermAttribute)state.addAttribute(TermAttribute.class);
  PositionIncrementAttribute posIncrAtt=(PositionIncrementAttribute)state.addAttribute(PositionIncrementAttribute.class);
  termAtt.setTermBuffer("a");
  posIncrAtt.setPositionIncrement(0);
  tokens.add(state);
  state=new AttributeSource();
  termAtt=(TermAttribute)state.addAttribute(TermAttribute.class);
  posIncrAtt=(PositionIncrementAttribute)state.addAttribute(PositionIncrementAttribute.class);
  termAtt.setTermBuffer("b");
  posIncrAtt.setPositionIncrement(1);
  tokens.add(state);
  state=new AttributeSource();
  termAtt=(TermAttribute)state.addAttribute(TermAttribute.class);
  posIncrAtt=(PositionIncrementAttribute)state.addAttribute(PositionIncrementAttribute.class);
  termAtt.setTermBuffer("c");
  posIncrAtt.setPositionIncrement(1);
  tokens.add(state);
  MockRAMDirectory dir=new MockRAMDirectory();
  IndexWriter w=new IndexWriter(dir,new MyAnalyzer(),true,IndexWriter.MaxFieldLength.UNLIMITED);
  Document doc=new Document();
  doc.add(new Field("field",tokens));
  w.addDocument(doc);
  w.commit();
  IndexSearcher s=new IndexSearcher(dir);
  PhraseQuery pq=new PhraseQuery();
  pq.add(new Term("field","a"));
  pq.add(new Term("field","b"));
  pq.add(new Term("field","c"));
  ScoreDoc[] hits=s.search(pq,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  Query q=new SpanTermQuery(new Term("field","a"));
  hits=s.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  TermPositions tps=s.getIndexReader().termPositions(new Term("field","a"));
  assertTrue(tps.next());
  assertEquals(1,tps.freq());
  assertEquals(0,tps.nextPosition());
  w.close();
  assertTrue(_TestUtil.checkIndex(dir));
  s.close();
  dir.close();
}
