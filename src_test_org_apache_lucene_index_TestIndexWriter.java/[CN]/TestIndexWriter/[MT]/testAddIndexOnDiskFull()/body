{
  int START_COUNT=57;
  int NUM_DIR=50;
  int END_COUNT=START_COUNT + NUM_DIR * 25;
  boolean debug=false;
  Directory[] dirs=new Directory[NUM_DIR];
  long inputDiskUsage=0;
  for (int i=0; i < NUM_DIR; i++) {
    dirs[i]=new RAMDirectory();
    IndexWriter writer=new IndexWriter(dirs[i],new WhitespaceAnalyzer(),true);
    for (int j=0; j < 25; j++) {
      addDocWithIndex(writer,25 * i + j);
    }
    writer.close();
    String[] files=dirs[i].list();
    for (int j=0; j < files.length; j++) {
      inputDiskUsage+=dirs[i].fileLength(files[j]);
    }
  }
  RAMDirectory startDir=new RAMDirectory();
  IndexWriter writer=new IndexWriter(startDir,new WhitespaceAnalyzer(),true);
  for (int j=0; j < START_COUNT; j++) {
    addDocWithIndex(writer,j);
  }
  writer.close();
  Term searchTerm=new Term("content","aaa");
  IndexReader reader=IndexReader.open(startDir);
  assertEquals("first docFreq",57,reader.docFreq(searchTerm));
  IndexSearcher searcher=new IndexSearcher(reader);
  Hits hits=searcher.search(new TermQuery(searchTerm));
  assertEquals("first number of hits",57,hits.length());
  searcher.close();
  reader.close();
  long diskUsage=startDir.sizeInBytes();
  long startDiskUsage=0;
  String[] files=startDir.list();
  for (int i=0; i < files.length; i++) {
    startDiskUsage+=startDir.fileLength(files[i]);
  }
  for (int iter=0; iter < 6; iter++) {
    long diskFree=diskUsage + 100;
    boolean autoCommit=iter % 2 == 0;
    int method=iter / 2;
    boolean success=false;
    boolean done=false;
    String methodName;
    if (0 == method) {
      methodName="addIndexes(Directory[])";
    }
 else     if (1 == method) {
      methodName="addIndexes(IndexReader[])";
    }
 else {
      methodName="addIndexesNoOptimize(Directory[])";
    }
    int cycleCount=0;
    while (!done) {
      cycleCount++;
      MockRAMDirectory dir=new MockRAMDirectory(startDir);
      writer=new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false);
      IOException err=null;
      for (int x=0; x < 2; x++) {
        double rate=0.05;
        double diskRatio=((double)diskFree) / diskUsage;
        long thisDiskFree;
        String testName=null;
        if (0 == x) {
          thisDiskFree=diskFree;
          if (diskRatio >= 2.0) {
            rate/=2;
          }
          if (diskRatio >= 4.0) {
            rate/=2;
          }
          if (diskRatio >= 6.0) {
            rate=0.0;
          }
          if (debug)           testName="disk full test " + methodName + " with disk full at "+ diskFree+ " bytes autoCommit="+ autoCommit;
        }
 else {
          thisDiskFree=0;
          rate=0.0;
          if (debug)           testName="disk full test " + methodName + " with unlimited disk space autoCommit="+ autoCommit;
        }
        if (debug)         System.out.println("\ncycle: " + testName);
        dir.setMaxSizeInBytes(thisDiskFree);
        dir.setRandomIOExceptionRate(rate,diskFree);
        try {
          if (0 == method) {
            writer.addIndexes(dirs);
          }
 else           if (1 == method) {
            IndexReader readers[]=new IndexReader[dirs.length];
            for (int i=0; i < dirs.length; i++) {
              readers[i]=IndexReader.open(dirs[i]);
            }
            try {
              writer.addIndexes(readers);
            }
  finally {
              for (int i=0; i < dirs.length; i++) {
                readers[i].close();
              }
            }
          }
 else {
            writer.addIndexesNoOptimize(dirs);
          }
          success=true;
          if (debug) {
            System.out.println("  success!");
          }
          if (0 == x) {
            done=true;
          }
        }
 catch (        IOException e) {
          success=false;
          err=e;
          if (debug) {
            System.out.println("  hit IOException: " + e);
          }
          if (1 == x) {
            e.printStackTrace(System.out);
            fail(methodName + " hit IOException after disk space was freed up");
          }
        }
        if (autoCommit) {
          String successStr;
          if (success) {
            successStr="success";
          }
 else {
            successStr="IOException";
          }
          String message=methodName + " failed to delete unreferenced files after " + successStr+ " ("+ diskFree+ " bytes)";
          assertNoUnreferencedFiles(dir,message);
        }
        if (debug) {
          System.out.println("  now test readers");
        }
        try {
          reader=IndexReader.open(dir);
        }
 catch (        IOException e) {
          e.printStackTrace(System.out);
          fail(testName + ": exception when creating IndexReader: " + e);
        }
        int result=reader.docFreq(searchTerm);
        if (success) {
          if (autoCommit && result != END_COUNT) {
            fail(testName + ": method did not throw exception but docFreq('aaa') is " + result+ " instead of expected "+ END_COUNT);
          }
 else           if (!autoCommit && result != START_COUNT) {
            fail(testName + ": method did not throw exception but docFreq('aaa') is " + result+ " instead of expected "+ START_COUNT+ " [autoCommit = false]");
          }
        }
 else {
          if (result != START_COUNT && result != END_COUNT) {
            err.printStackTrace(System.out);
            fail(testName + ": method did throw exception but docFreq('aaa') is " + result+ " instead of expected "+ START_COUNT+ " or "+ END_COUNT);
          }
        }
        searcher=new IndexSearcher(reader);
        try {
          hits=searcher.search(new TermQuery(searchTerm));
        }
 catch (        IOException e) {
          e.printStackTrace(System.out);
          fail(testName + ": exception when searching: " + e);
        }
        int result2=hits.length();
        if (success) {
          if (result2 != result) {
            fail(testName + ": method did not throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ result);
          }
        }
 else {
          if (result2 != result) {
            err.printStackTrace(System.out);
            fail(testName + ": method did throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ result);
          }
        }
        searcher.close();
        reader.close();
        if (debug) {
          System.out.println("  count is " + result);
        }
        if (done || result == END_COUNT) {
          break;
        }
      }
      if (debug) {
        System.out.println("  start disk = " + startDiskUsage + "; input disk = "+ inputDiskUsage+ "; max used = "+ dir.getMaxUsedSizeInBytes());
      }
      if (done) {
        assertTrue("max free Directory space required exceeded 1X the total input index sizes during " + methodName + ": max temp usage = "+ (dir.getMaxUsedSizeInBytes() - startDiskUsage)+ " bytes; "+ "starting disk usage = "+ startDiskUsage+ " bytes; "+ "input index disk usage = "+ inputDiskUsage+ " bytes",(dir.getMaxUsedSizeInBytes() - startDiskUsage) < 2 * (startDiskUsage + inputDiskUsage));
      }
      writer.close();
      dir.close();
      diskFree+=2000;
    }
  }
  startDir.close();
}
