{
  RAMDirectory directory=new MockRAMDirectory();
  final Document doc=new Document();
  Field idField=new Field("id","",Field.Store.YES,Field.Index.NOT_ANALYZED);
  doc.add(idField);
  for (int pass=0; pass < 2; pass++) {
    IndexWriter writer=new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.UNLIMITED);
    for (int iter=0; iter < 10; iter++) {
      MergeScheduler ms;
      if (pass == 1)       ms=new ConcurrentMergeScheduler();
 else       ms=new SerialMergeScheduler();
      writer.setMergeScheduler(ms);
      writer.setMaxBufferedDocs(2);
      writer.setMergeFactor(100);
      for (int j=0; j < 199; j++) {
        idField.setValue(Integer.toString(iter * 201 + j));
        writer.addDocument(doc);
      }
      int delID=iter * 199;
      for (int j=0; j < 20; j++) {
        writer.deleteDocuments(new Term("id",Integer.toString(delID)));
        delID+=5;
      }
      writer.setMergeFactor(2);
      final IndexWriter finalWriter=writer;
      final ArrayList<Throwable> failure=new ArrayList<Throwable>();
      Thread t1=new Thread(){
        @Override public void run(){
          boolean done=false;
          while (!done) {
            for (int i=0; i < 100; i++) {
              try {
                finalWriter.addDocument(doc);
              }
 catch (              AlreadyClosedException e) {
                done=true;
                break;
              }
catch (              NullPointerException e) {
                done=true;
                break;
              }
catch (              Throwable e) {
                e.printStackTrace(System.out);
                failure.add(e);
                done=true;
                break;
              }
            }
            Thread.yield();
          }
        }
      }
;
      if (failure.size() > 0)       throw failure.get(0);
      t1.start();
      writer.close(false);
      t1.join();
      IndexReader reader=IndexReader.open(directory,true);
      reader.close();
      writer=new IndexWriter(directory,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.UNLIMITED);
    }
    writer.close();
  }
  directory.close();
}
