{
  indexr(id,"0","from_s","jim","to_s","mike","predicate_s","knows");
  indexr(id,"1","from_s","jim","to_s","dave","predicate_s","knows");
  indexr(id,"2","from_s","jim","to_s","stan","predicate_s","knows");
  indexr(id,"3","from_s","dave","to_s","stan","predicate_s","knows");
  indexr(id,"4","from_s","dave","to_s","bill","predicate_s","knows");
  indexr(id,"5","from_s","dave","to_s","mike","predicate_s","knows");
  indexr(id,"20","from_s","dave","to_s","alex","predicate_s","knows");
  indexr(id,"21","from_s","alex","to_s","steve","predicate_s","knows");
  indexr(id,"6","from_s","stan","to_s","alice","predicate_s","knows");
  indexr(id,"7","from_s","stan","to_s","mary","predicate_s","knows");
  indexr(id,"8","from_s","stan","to_s","dave","predicate_s","knows");
  indexr(id,"10","from_s","mary","to_s","mike","predicate_s","knows");
  indexr(id,"11","from_s","mary","to_s","max","predicate_s","knows");
  indexr(id,"12","from_s","mary","to_s","jim","predicate_s","knows");
  indexr(id,"13","from_s","mary","to_s","steve","predicate_s","knows");
  commit();
  List<Tuple> tuples=null;
  Set<String> paths=null;
  ShortestPathStream stream=null;
  StreamContext context=new StreamContext();
  SolrClientCache cache=new SolrClientCache();
  context.setSolrClientCache(cache);
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withFunctionName("shortestPath",ShortestPathStream.class);
  Map params=new HashMap();
  params.put("fq","predicate_s:knows");
  stream=(ShortestPathStream)factory.constructStream("shortestPath(collection1, " + "from=\"jim\", " + "to=\"steve\","+ "edge=\"from_s=to_s\","+ "fq=\"predicate_s:knows\","+ "threads=\"3\","+ "partitionSize=\"3\","+ "maxDepth=\"6\")");
  stream.setStreamContext(context);
  paths=new HashSet();
  tuples=getTuples(stream);
  assertTrue(tuples.size() == 2);
  for (  Tuple tuple : tuples) {
    paths.add(tuple.getStrings("path").toString());
  }
  assertTrue(paths.contains("[jim, dave, alex, steve]"));
  assertTrue(paths.contains("[jim, stan, mary, steve]"));
  params.put("fq","predicate_s:knows");
  stream=(ShortestPathStream)factory.constructStream("shortestPath(collection1, " + "from=\"jim\", " + "to=\"steve\","+ "edge=\"from_s=to_s\","+ "fq=\"predicate_s:knows\","+ "threads=\"3\","+ "partitionSize=\"1\","+ "maxDepth=\"6\")");
  stream.setStreamContext(context);
  paths=new HashSet();
  tuples=getTuples(stream);
  assertTrue(tuples.size() == 2);
  for (  Tuple tuple : tuples) {
    paths.add(tuple.getStrings("path").toString());
  }
  assertTrue(paths.contains("[jim, dave, alex, steve]"));
  assertTrue(paths.contains("[jim, stan, mary, steve]"));
  stream=(ShortestPathStream)factory.constructStream("shortestPath(collection1, " + "from=\"jim\", " + "to=\"steve\","+ "edge=\"from_s=to_s\","+ "fq=\"predicate_s:crap\","+ "threads=\"3\","+ "partitionSize=\"3\","+ "maxDepth=\"6\")");
  stream.setStreamContext(context);
  paths=new HashSet();
  tuples=getTuples(stream);
  assertTrue(tuples.size() == 0);
  stream=(ShortestPathStream)factory.constructStream("shortestPath(collection1, " + "from=\"jim\", " + "to=\"steve\","+ "edge=\"from_s=to_s\","+ "fq=\"predicate_s:knows\","+ "threads=\"3\","+ "partitionSize=\"3\","+ "maxDepth=\"2\")");
  stream.setStreamContext(context);
  tuples=getTuples(stream);
  assertTrue(tuples.size() == 0);
  params.put("fq","predicate_s:knows NOT to_s:alex");
  stream=(ShortestPathStream)factory.constructStream("shortestPath(collection1, " + "from=\"jim\", " + "to=\"steve\","+ "edge=\"from_s=to_s\","+ "fq=\" predicate_s:knows NOT to_s:alex\","+ "threads=\"3\","+ "partitionSize=\"3\","+ "maxDepth=\"6\")");
  stream.setStreamContext(context);
  paths=new HashSet();
  tuples=getTuples(stream);
  assertTrue(tuples.size() == 1);
  for (  Tuple tuple : tuples) {
    paths.add(tuple.getStrings("path").toString());
  }
  assertTrue(paths.contains("[jim, stan, mary, steve]"));
  cache.close();
  del("*:*");
  commit();
}
