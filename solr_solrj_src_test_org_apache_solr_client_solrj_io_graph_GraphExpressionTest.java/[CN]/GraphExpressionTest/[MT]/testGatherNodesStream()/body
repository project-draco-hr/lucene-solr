{
  indexr(id,"0","basket_s","basket1","product_s","product1","price_f","20");
  indexr(id,"1","basket_s","basket1","product_s","product3","price_f","30");
  indexr(id,"2","basket_s","basket1","product_s","product5","price_f","1");
  indexr(id,"3","basket_s","basket2","product_s","product1","price_f","2");
  indexr(id,"4","basket_s","basket2","product_s","product6","price_f","5");
  indexr(id,"5","basket_s","basket2","product_s","product7","price_f","10");
  indexr(id,"6","basket_s","basket3","product_s","product4","price_f","20");
  indexr(id,"7","basket_s","basket3","product_s","product3","price_f","10");
  indexr(id,"8","basket_s","basket3","product_s","product1","price_f","10");
  indexr(id,"9","basket_s","basket4","product_s","product4","price_f","40");
  indexr(id,"10","basket_s","basket4","product_s","product3","price_f","10");
  indexr(id,"11","basket_s","basket4","product_s","product1","price_f","10");
  commit();
  List<Tuple> tuples=null;
  Set<String> paths=null;
  GatherNodesStream stream=null;
  StreamContext context=new StreamContext();
  SolrClientCache cache=new SolrClientCache();
  context.setSolrClientCache(cache);
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withFunctionName("gatherNodes",GatherNodesStream.class).withFunctionName("search",CloudSolrStream.class).withFunctionName("count",CountMetric.class).withFunctionName("avg",MeanMetric.class).withFunctionName("sum",SumMetric.class).withFunctionName("min",MinMetric.class).withFunctionName("max",MaxMetric.class);
  String expr="gatherNodes(collection1, " + "walk=\"product1->product_s\"," + "gather=\"basket_s\")";
  stream=(GatherNodesStream)factory.constructStream(expr);
  stream.setStreamContext(context);
  tuples=getTuples(stream);
  Collections.sort(tuples,new FieldComparator("node",ComparatorOrder.ASCENDING));
  assertTrue(tuples.size() == 4);
  assertTrue(tuples.get(0).getString("node").equals("basket1"));
  assertTrue(tuples.get(1).getString("node").equals("basket2"));
  assertTrue(tuples.get(2).getString("node").equals("basket3"));
  assertTrue(tuples.get(3).getString("node").equals("basket4"));
  String expr2="gatherNodes(collection1, " + expr + ","+ "walk=\"node->basket_s\","+ "gather=\"product_s\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))";
  stream=(GatherNodesStream)factory.constructStream(expr2);
  context=new StreamContext();
  context.setSolrClientCache(cache);
  stream.setStreamContext(context);
  tuples=getTuples(stream);
  Collections.sort(tuples,new FieldComparator("node",ComparatorOrder.ASCENDING));
  assertTrue(tuples.size() == 5);
  assertTrue(tuples.get(0).getString("node").equals("product3"));
  assertTrue(tuples.get(0).getDouble("count(*)").equals(3.0D));
  assertTrue(tuples.get(1).getString("node").equals("product4"));
  assertTrue(tuples.get(1).getDouble("count(*)").equals(2.0D));
  assertTrue(tuples.get(1).getDouble("avg(price_f)").equals(30.0D));
  assertTrue(tuples.get(1).getDouble("sum(price_f)").equals(60.0D));
  assertTrue(tuples.get(1).getDouble("min(price_f)").equals(20.0D));
  assertTrue(tuples.get(1).getDouble("max(price_f)").equals(40.0D));
  assertTrue(tuples.get(2).getString("node").equals("product5"));
  assertTrue(tuples.get(2).getDouble("count(*)").equals(1.0D));
  assertTrue(tuples.get(3).getString("node").equals("product6"));
  assertTrue(tuples.get(3).getDouble("count(*)").equals(1.0D));
  assertTrue(tuples.get(4).getString("node").equals("product7"));
  assertTrue(tuples.get(4).getDouble("count(*)").equals(1.0D));
  expr="gatherNodes(collection1, " + "walk=\"product4, product7->product_s\"," + "gather=\"basket_s\")";
  stream=(GatherNodesStream)factory.constructStream(expr);
  context=new StreamContext();
  context.setSolrClientCache(cache);
  stream.setStreamContext(context);
  tuples=getTuples(stream);
  Collections.sort(tuples,new FieldComparator("node",ComparatorOrder.ASCENDING));
  assertTrue(tuples.size() == 3);
  assertTrue(tuples.get(0).getString("node").equals("basket2"));
  assertTrue(tuples.get(1).getString("node").equals("basket3"));
  assertTrue(tuples.get(2).getString("node").equals("basket4"));
  expr="gatherNodes(collection1, " + "walk=\"product4, product7->product_s\"," + "gather=\"basket_s\", fq=\"-basket_s:basket4\")";
  stream=(GatherNodesStream)factory.constructStream(expr);
  context=new StreamContext();
  context.setSolrClientCache(cache);
  stream.setStreamContext(context);
  tuples=getTuples(stream);
  Collections.sort(tuples,new FieldComparator("node",ComparatorOrder.ASCENDING));
  assertTrue(tuples.size() == 2);
  assertTrue(tuples.get(0).getString("node").equals("basket2"));
  assertTrue(tuples.get(1).getString("node").equals("basket3"));
  cache.close();
  del("*:*");
  commit();
}
