{
  this.configFile=configFile;
  this.loader=new SolrResourceLoader(dir);
  FileInputStream cfgis=new FileInputStream(configFile);
  try {
    Config cfg=new Config(loader,null,cfgis,null);
    persistent=cfg.getBool("solr/@persistent",false);
    libDir=cfg.get("solr/@sharedLib",null);
    adminPath=cfg.get("solr/cores/@adminPath",null);
    if (libDir != null) {
      File f=new File(dir,libDir);
      libDir=f.getPath();
      log.info("loading shared library: " + f.getAbsolutePath());
      libLoader=SolrResourceLoader.createClassLoader(f,null);
    }
    if (adminPath != null) {
      coreAdminHandler=this.createMultiCoreHandler();
    }
    NodeList nodes=(NodeList)cfg.evaluate("solr/cores/core",XPathConstants.NODESET);
synchronized (cores) {
      for (int i=0; i < nodes.getLength(); i++) {
        Node node=nodes.item(i);
        try {
          CoreDescriptor p=new CoreDescriptor(this);
          p.init(DOMUtil.getAttr(node,"name",null),DOMUtil.getAttr(node,"instanceDir",null));
          String opt=DOMUtil.getAttr(node,"config",null);
          if (opt != null) {
            p.setConfigName(opt);
          }
          opt=DOMUtil.getAttr(node,"schema",null);
          if (opt != null) {
            p.setSchemaName(opt);
          }
          CoreDescriptor old=cores.get(p.getName());
          if (old != null && old.getName() != null && old.getName().equals(p.getName())) {
            throw new RuntimeException(cfg.getName() + " registers multiple cores to the same name: " + p.name);
          }
          p.setCore(create(p));
        }
 catch (        Throwable ex) {
          SolrConfig.severeErrors.add(ex);
          SolrException.logOnce(log,null,ex);
        }
      }
    }
  }
  finally {
    if (cfgis != null) {
      try {
        cfgis.close();
      }
 catch (      Exception xany) {
      }
    }
  }
  setEnabled(true);
}
