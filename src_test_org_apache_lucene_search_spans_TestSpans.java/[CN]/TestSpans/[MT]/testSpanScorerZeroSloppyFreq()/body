{
  boolean ordered=true;
  int slop=1;
  final Similarity sim=new DefaultSimilarity(){
    public float sloppyFreq(    int distance){
      return 0.0f;
    }
  }
;
  SpanNearQuery snq=new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery("t1"),makeSpanTermQuery("t2")},slop,ordered){
    public Similarity getSimilarity(    Searcher s){
      return sim;
    }
  }
;
  Scorer spanScorer=snq.weight(searcher).scorer(searcher.getIndexReader());
  assertTrue("first doc",spanScorer.next());
  assertEquals("first doc number",spanScorer.doc(),11);
  float score=spanScorer.score();
  assertTrue("first doc score should be zero, " + score,score == 0.0f);
  assertTrue("no second doc",!spanScorer.next());
}
