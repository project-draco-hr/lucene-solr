{
  Analyzer a=new WhitespaceAnalyzer();
  assertQueryEquals("\\[brackets",a,"\\[brackets");
  assertQueryEquals("\\[brackets",null,"brackets");
  assertQueryEquals("\\\\",a,"\\\\");
  assertQueryEquals("\\+blah",a,"\\+blah");
  assertQueryEquals("\\(blah",a,"\\(blah");
  assertQueryEquals("\\-blah",a,"\\-blah");
  assertQueryEquals("\\!blah",a,"\\!blah");
  assertQueryEquals("\\{blah",a,"\\{blah");
  assertQueryEquals("\\}blah",a,"\\}blah");
  assertQueryEquals("\\:blah",a,"\\:blah");
  assertQueryEquals("\\^blah",a,"\\^blah");
  assertQueryEquals("\\[blah",a,"\\[blah");
  assertQueryEquals("\\]blah",a,"\\]blah");
  assertQueryEquals("\\\"blah",a,"\\\"blah");
  assertQueryEquals("\\(blah",a,"\\(blah");
  assertQueryEquals("\\)blah",a,"\\)blah");
  assertQueryEquals("\\~blah",a,"\\~blah");
  assertQueryEquals("\\*blah",a,"\\*blah");
  assertQueryEquals("\\?blah",a,"\\?blah");
  assertQueryEquals("a\\-b:c",a,"a\\-b:c");
  assertQueryEquals("a\\+b:c",a,"a\\+b:c");
  assertQueryEquals("a\\:b:c",a,"a\\:b:c");
  assertQueryEquals("a\\\\b:c",a,"a\\\\b:c");
  assertQueryEquals("a:b\\-c",a,"a:b\\-c");
  assertQueryEquals("a:b\\+c",a,"a:b\\+c");
  assertQueryEquals("a:b\\:c",a,"a:b\\:c");
  assertQueryEquals("a:b\\\\c",a,"a:b\\\\c");
  assertQueryEquals("a:b\\-c*",a,"a:b-c*");
  assertQueryEquals("a:b\\+c*",a,"a:b+c*");
  assertQueryEquals("a:b\\:c*",a,"a:b:c*");
  assertQueryEquals("a:b\\\\c*",a,"a:b\\c*");
  assertQueryEquals("a:b\\-?c",a,"a:b-?c");
  assertQueryEquals("a:b\\+?c",a,"a:b+?c");
  assertQueryEquals("a:b\\:?c",a,"a:b:?c");
  assertQueryEquals("a:b\\\\?c",a,"a:b\\\\\\?c");
  assertQueryEquals("a:b\\-c~",a,"a:b-c~");
  assertQueryEquals("a:b\\+c~",a,"a:b+c~");
  assertQueryEquals("a:b\\:c~",a,"a:b:c~");
  assertQueryEquals("a:b\\\\c~",a,"a:b\\c~");
  assertQueryEquals("[ a\\- TO a\\+ ]",null,"[a- TO a+]");
  assertQueryEquals("[ a\\: TO a\\~ ]",null,"[a: TO a~]");
  assertQueryEquals("[ a\\\\ TO a\\* ]",null,"[a\\ TO a*]");
}
