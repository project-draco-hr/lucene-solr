{
  searcher=new IndexSearcher(directory);
  final double[] milesToTest=new double[]{6.0,0.5,0.001,0.0};
  final int[] expected=new int[]{7,1,0,0};
  for (int x=0; x < expected.length; x++) {
    final double miles=milesToTest[x];
    final DistanceQueryBuilder dq=new DistanceQueryBuilder(lat,lng,miles,geoHashPrefix,CartesianTierPlotter.DEFALT_FIELD_PREFIX,true);
    System.out.println(dq);
    Query tq=new TermQuery(new Term("metafile","doc"));
    FieldScoreQuery fsQuery=new FieldScoreQuery("geo_distance",Type.FLOAT);
    CustomScoreQuery customScore=new CustomScoreQuery(tq,fsQuery){
      @Override public float customScore(      int doc,      float subQueryScore,      float valSrcScore){
        if (dq.distanceFilter.getDistance(doc) == null)         return 0;
        double distance=dq.distanceFilter.getDistance(doc);
        if (distance < 1.0d)         distance=1.0d;
        float score=new Float((miles - distance) / miles).floatValue();
        return score * subQueryScore;
      }
    }
;
    DistanceFieldComparatorSource dsort=new DistanceFieldComparatorSource(dq.distanceFilter);
    Sort sort=new Sort(new SortField("foo",dsort));
    Hits hits=searcher.search(customScore,dq.getFilter());
    int results=hits.length();
    Map<Integer,Double> distances=dq.distanceFilter.getDistances();
    System.out.println("Distance Filter filtered: " + distances.size());
    System.out.println("Results: " + results);
    System.out.println("=============================");
    System.out.println("Distances should be 14 " + distances.size());
    System.out.println("Results should be 7 " + results);
    assertEquals(expected[x],distances.size());
    assertEquals(expected[x],results);
    for (int i=0; i < results; i++) {
      Document d=hits.doc(i);
      String name=d.get("name");
      double rsLat=NumericUtils.prefixCodedToDouble(d.get(latField));
      double rsLng=NumericUtils.prefixCodedToDouble(d.get(lngField));
      Double geo_distance=distances.get(hits.id(i));
      double distance=DistanceUtils.getInstance().getDistanceMi(lat,lng,rsLat,rsLng);
      double llm=DistanceUtils.getInstance().getLLMDistance(lat,lng,rsLat,rsLng);
      System.out.println("Name: " + name + ", Distance (res, ortho, harvesine):"+ distance+ " |"+ geo_distance+ "|"+ llm+ " | score "+ hits.score(i));
      assertTrue(Math.abs((distance - llm)) < 1);
      assertTrue((distance < miles));
    }
  }
}
