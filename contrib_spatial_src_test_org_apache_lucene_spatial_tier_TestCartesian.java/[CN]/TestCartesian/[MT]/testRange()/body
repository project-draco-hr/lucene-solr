{
  searcher=new IndexSearcher(directory);
  final double miles=6.0;
  final DistanceQueryBuilder dq=new DistanceQueryBuilder(lat,lng,miles,latField,lngField,CartesianTierPlotter.DEFALT_FIELD_PREFIX,true);
  System.out.println(dq);
  Query tq=new TermQuery(new Term("metafile","doc"));
  FieldScoreQuery fsQuery=new FieldScoreQuery("geo_distance",Type.FLOAT);
  CustomScoreQuery customScore=new CustomScoreQuery(tq,fsQuery){
    @Override public float customScore(    int doc,    float subQueryScore,    float valSrcScore){
      if (dq.distanceFilter.getDistance(doc) == null)       return 0;
      double distance=dq.distanceFilter.getDistance(doc);
      if (distance < 1.0d)       distance=1.0d;
      float score=new Float((miles - distance) / miles).floatValue();
      return score * subQueryScore;
    }
  }
;
  DistanceFieldComparatorSource dsort=new DistanceFieldComparatorSource(dq.distanceFilter);
  Sort sort=new Sort(new SortField("foo",dsort,false));
  Hits hits=searcher.search(customScore,dq.getFilter(),sort);
  int results=hits.length();
  Map<Integer,Double> distances=dq.distanceFilter.getDistances();
  System.out.println("Distance Filter filtered: " + distances.size());
  System.out.println("Results: " + results);
  System.out.println("=============================");
  System.out.println("Distances should be 14 " + distances.size());
  System.out.println("Results should be 7 " + results);
  assertEquals(14,distances.size());
  assertEquals(7,results);
  double lastDistance=0;
  for (int i=0; i < results; i++) {
    Document d=hits.doc(i);
    String name=d.get("name");
    double rsLat=NumberUtils.SortableStr2double(d.get(latField));
    double rsLng=NumberUtils.SortableStr2double(d.get(lngField));
    Double geo_distance=distances.get(hits.id(i));
    double distance=DistanceUtils.getInstance().getDistanceMi(lat,lng,rsLat,rsLng);
    double llm=DistanceUtils.getInstance().getLLMDistance(lat,lng,rsLat,rsLng);
    System.out.println("Name: " + name + ", Distance "+ distance);
    assertTrue(Math.abs((distance - llm)) < 1);
    assertTrue((distance < miles));
    assertTrue(geo_distance > lastDistance);
    lastDistance=geo_distance;
  }
}
