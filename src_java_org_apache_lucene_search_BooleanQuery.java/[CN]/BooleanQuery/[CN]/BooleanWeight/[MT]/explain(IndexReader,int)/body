{
  final int minShouldMatch=BooleanQuery.this.getMinimumNumberShouldMatch();
  ComplexExplanation sumExpl=new ComplexExplanation();
  sumExpl.setDescription("sum of:");
  int coord=0;
  int maxCoord=0;
  float sum=0.0f;
  boolean fail=false;
  int shouldMatchCount=0;
  for (int i=0; i < weights.size(); i++) {
    BooleanClause c=(BooleanClause)clauses.elementAt(i);
    Weight w=(Weight)weights.elementAt(i);
    Explanation e=w.explain(reader,doc);
    if (!c.isProhibited())     maxCoord++;
    if (e.isMatch()) {
      if (!c.isProhibited()) {
        sumExpl.addDetail(e);
        sum+=e.getValue();
        coord++;
      }
 else {
        Explanation r=new Explanation(0.0f,"match on prohibited clause (" + c.getQuery().toString() + ")");
        r.addDetail(e);
        sumExpl.addDetail(r);
        fail=true;
      }
      if (c.getOccur().equals(Occur.SHOULD))       shouldMatchCount++;
    }
 else     if (c.isRequired()) {
      Explanation r=new Explanation(0.0f,"no match on required clause (" + c.getQuery().toString() + ")");
      r.addDetail(e);
      sumExpl.addDetail(r);
      fail=true;
    }
  }
  if (fail) {
    sumExpl.setMatch(Boolean.FALSE);
    sumExpl.setValue(0.0f);
    sumExpl.setDescription("Failure to meet condition(s) of required/prohibited clause(s)");
    return sumExpl;
  }
 else   if (shouldMatchCount < minShouldMatch) {
    sumExpl.setMatch(Boolean.FALSE);
    sumExpl.setValue(0.0f);
    sumExpl.setDescription("Failure to match minimum number " + "of optional clauses: " + minShouldMatch);
    return sumExpl;
  }
  sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);
  sumExpl.setValue(sum);
  float coordFactor=similarity.coord(coord,maxCoord);
  if (coordFactor == 1.0f)   return sumExpl;
 else {
    ComplexExplanation result=new ComplexExplanation(sumExpl.isMatch(),sum * coordFactor,"product of:");
    result.addDetail(sumExpl);
    result.addDetail(new Explanation(coordFactor,"coord(" + coord + "/"+ maxCoord+ ")"));
    return result;
  }
}
