{
  Explanation sumExpl=new Explanation();
  sumExpl.setDescription("sum of:");
  int coord=0;
  int maxCoord=0;
  float sum=0.0f;
  for (int i=0; i < weights.size(); i++) {
    BooleanClause c=(BooleanClause)clauses.elementAt(i);
    Weight w=(Weight)weights.elementAt(i);
    Explanation e=w.explain(reader,doc);
    if (!c.isProhibited())     maxCoord++;
    if (e.getValue() > 0) {
      if (!c.isProhibited()) {
        sumExpl.addDetail(e);
        sum+=e.getValue();
        coord++;
      }
 else {
        return new Explanation(0.0f,"match prohibited");
      }
    }
 else     if (c.isRequired()) {
      return new Explanation(0.0f,"match required");
    }
  }
  sumExpl.setValue(sum);
  if (coord == 1)   sumExpl=sumExpl.getDetails()[0];
  float coordFactor=getSimilarity(searcher).coord(coord,maxCoord);
  if (coordFactor == 1.0f)   return sumExpl;
 else {
    Explanation result=new Explanation();
    result.setDescription("product of:");
    result.addDetail(sumExpl);
    result.addDetail(new Explanation(coordFactor,"coord(" + coord + "/"+ maxCoord+ ")"));
    result.setValue(sum * coordFactor);
    return result;
  }
}
