{
  List required=new ArrayList();
  List prohibited=new ArrayList();
  List optional=new ArrayList();
  for (Iterator wIter=weights.iterator(), cIter=clauses.iterator(); wIter.hasNext(); ) {
    QueryWeight w=(QueryWeight)wIter.next();
    BooleanClause c=(BooleanClause)cIter.next();
    Scorer subScorer=w.scorer(reader,true,false);
    if (subScorer == null) {
      if (c.isRequired()) {
        return null;
      }
    }
 else     if (c.isRequired()) {
      required.add(subScorer);
    }
 else     if (c.isProhibited()) {
      prohibited.add(subScorer);
    }
 else {
      optional.add(subScorer);
    }
  }
  scoreDocsInOrder|=!allowDocsOutOfOrder;
  if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {
    return new BooleanScorer(similarity,minNrShouldMatch,optional,prohibited);
  }
  if (required.size() == 0 && optional.size() == 0) {
    return null;
  }
 else   if (optional.size() < minNrShouldMatch) {
    return null;
  }
  return new BooleanScorer2(similarity,minNrShouldMatch,required,prohibited,optional);
}
