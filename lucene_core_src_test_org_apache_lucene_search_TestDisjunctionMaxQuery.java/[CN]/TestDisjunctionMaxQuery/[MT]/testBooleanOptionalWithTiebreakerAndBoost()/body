{
  BooleanQuery.Builder q=new BooleanQuery.Builder();
{
    DisjunctionMaxQuery q1=new DisjunctionMaxQuery(0.01f);
    q1.add(tq("hed","albino",1.5f));
    q1.add(tq("dek","albino"));
    q.add(q1,BooleanClause.Occur.SHOULD);
  }
{
    DisjunctionMaxQuery q2=new DisjunctionMaxQuery(0.01f);
    q2.add(tq("hed","elephant",1.5f));
    q2.add(tq("dek","elephant"));
    q.add(q2,BooleanClause.Occur.SHOULD);
  }
  QueryUtils.check(random(),q.build(),s);
  ScoreDoc[] h=s.search(q.build(),1000).scoreDocs;
  try {
    assertEquals("4 docs should match " + q.toString(),4,h.length);
    float score0=h[0].score;
    float score1=h[1].score;
    float score2=h[2].score;
    float score3=h[3].score;
    String doc0=s.doc(h[0].doc).get("id");
    String doc1=s.doc(h[1].doc).get("id");
    String doc2=s.doc(h[2].doc).get("id");
    String doc3=s.doc(h[3].doc).get("id");
    assertEquals("doc0 should be d4: ","d4",doc0);
    assertEquals("doc1 should be d3: ","d3",doc1);
    assertEquals("doc2 should be d2: ","d2",doc2);
    assertEquals("doc3 should be d1: ","d1",doc3);
    assertTrue("d4 does not have a better score then d3: " + score0 + " >? "+ score1,score0 > score1);
    assertTrue("d3 does not have a better score then d2: " + score1 + " >? "+ score2,score1 > score2);
    assertTrue("d3 does not have a better score then d1: " + score2 + " >? "+ score3,score2 > score3);
  }
 catch (  Error e) {
    printHits("testBooleanOptionalWithTiebreakerAndBoost",h,s);
    throw e;
  }
}
