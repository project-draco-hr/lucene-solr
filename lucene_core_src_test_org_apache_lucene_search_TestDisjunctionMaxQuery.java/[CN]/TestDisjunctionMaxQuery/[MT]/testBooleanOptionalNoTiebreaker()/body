{
  BooleanQuery.Builder q=new BooleanQuery.Builder();
{
    DisjunctionMaxQuery q1=new DisjunctionMaxQuery(Arrays.asList(tq("hed","albino"),tq("dek","albino")),0.0f);
    q.add(q1,BooleanClause.Occur.SHOULD);
  }
{
    DisjunctionMaxQuery q2=new DisjunctionMaxQuery(Arrays.asList(tq("hed","elephant"),tq("dek","elephant")),0.0f);
    q.add(q2,BooleanClause.Occur.SHOULD);
  }
  QueryUtils.check(random(),q.build(),s);
  ScoreDoc[] h=s.search(q.build(),1000).scoreDocs;
  try {
    assertEquals("4 docs should match " + q.toString(),4,h.length);
    float score=h[0].score;
    for (int i=1; i < h.length - 1; i++) {
      assertEquals("score #" + i + " is not the same",score,h[i].score,SCORE_COMP_THRESH);
    }
    assertEquals("wrong last","d1",s.doc(h[h.length - 1].doc).get("id"));
    float score1=h[h.length - 1].score;
    assertTrue("d1 does not have worse score then others: " + score + " >? "+ score1,score > score1);
  }
 catch (  Error e) {
    printHits("testBooleanOptionalNoTiebreaker",h,s);
    throw e;
  }
}
