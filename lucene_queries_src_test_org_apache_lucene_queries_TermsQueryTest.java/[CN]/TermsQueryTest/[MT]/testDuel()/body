{
  final int iters=atLeast(2);
  for (int iter=0; iter < iters; ++iter) {
    final List<Term> allTerms=new ArrayList<>();
    final int numTerms=TestUtil.nextInt(random(),1,1 << TestUtil.nextInt(random(),1,10));
    for (int i=0; i < numTerms; ++i) {
      final String field=usually() ? "f" : "g";
      final String value=TestUtil.randomAnalysisString(random(),10,true);
      allTerms.add(new Term(field,value));
    }
    Directory dir=newDirectory();
    RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
    final int numDocs=atLeast(100);
    for (int i=0; i < numDocs; ++i) {
      Document doc=new Document();
      final Term term=allTerms.get(random().nextInt(allTerms.size()));
      doc.add(new StringField(term.field(),term.text(),Store.NO));
      iw.addDocument(doc);
    }
    if (numTerms > 1 && random().nextBoolean()) {
      iw.deleteDocuments(new TermQuery(allTerms.get(0)));
    }
    iw.commit();
    final IndexReader reader=iw.getReader();
    final IndexSearcher searcher=newSearcher(reader);
    iw.close();
    if (reader.numDocs() == 0) {
      IOUtils.close(reader,dir);
      continue;
    }
    for (int i=0; i < 100; ++i) {
      final float boost=random().nextFloat() * 10;
      final int numQueryTerms=TestUtil.nextInt(random(),1,1 << TestUtil.nextInt(random(),1,8));
      List<Term> queryTerms=new ArrayList<>();
      for (int j=0; j < numQueryTerms; ++j) {
        queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));
      }
      final BooleanQuery bq=new BooleanQuery();
      for (      Term t : queryTerms) {
        bq.add(new TermQuery(t),Occur.SHOULD);
      }
      final Query q1=new ConstantScoreQuery(bq);
      q1.setBoost(boost);
      final Query q2=new TermsQuery(queryTerms);
      q2.setBoost(boost);
      assertSameMatches(searcher,q1,q2,true);
    }
    reader.close();
    dir.close();
  }
}
