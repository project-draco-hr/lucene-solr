{
  ShingleMatrixFilter.defaultSettingsCodec=null;
  TokenStream ts;
  ts=new ShingleMatrixFilter(new EmptyTokenStream(),1,2,' ',false,new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());
  assertNull(ts.next(new Token()));
  TokenListStream tls;
  LinkedList<Token> tokens;
  tokens=new LinkedList<Token>();
  tokens.add(createToken("please",0,6));
  tokens.add(createToken("divide",7,13));
  tokens.add(createToken("this",14,18));
  tokens.add(createToken("sentence",19,27));
  tokens.add(createToken("into",28,32));
  tokens.add(createToken("shingles",33,39));
  tls=new TokenListStream(tokens);
  ts=new ShingleMatrixFilter(tls,1,2,' ',false,new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());
  Token reusableToken=new Token();
  assertNext(ts,reusableToken,"please",0,6);
  assertNext(ts,reusableToken,"please divide",0,13);
  assertNext(ts,reusableToken,"divide",7,13);
  assertNext(ts,reusableToken,"divide this",7,18);
  assertNext(ts,reusableToken,"this",14,18);
  assertNext(ts,reusableToken,"this sentence",14,27);
  assertNext(ts,reusableToken,"sentence",19,27);
  assertNext(ts,reusableToken,"sentence into",19,32);
  assertNext(ts,reusableToken,"into",28,32);
  assertNext(ts,reusableToken,"into shingles",28,39);
  assertNext(ts,reusableToken,"shingles",33,39);
  assertNull(ts.next(reusableToken));
}
