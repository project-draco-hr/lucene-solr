{
  final Document doc2=new Document();
  for (  IndexableField f : doc1) {
    final Field field1=(Field)f;
    final Field field2;
    final DocValues.Type dvType=field1.fieldType().docValueType();
    if (dvType != null) {
switch (dvType) {
case VAR_INTS:
        field2=new PackedLongDocValuesField(field1.name(),field1.numericValue().longValue());
      break;
case FIXED_INTS_8:
    field2=new ByteDocValuesField(field1.name(),field1.numericValue().byteValue());
  break;
case FIXED_INTS_16:
field2=new ShortDocValuesField(field1.name(),field1.numericValue().shortValue());
break;
case FIXED_INTS_32:
field2=new IntDocValuesField(field1.name(),field1.numericValue().intValue());
break;
case FIXED_INTS_64:
field2=new LongDocValuesField(field1.name(),field1.numericValue().longValue());
break;
case FLOAT_32:
field2=new FloatDocValuesField(field1.name(),field1.numericValue().floatValue());
break;
case FLOAT_64:
field2=new DoubleDocValuesField(field1.name(),field1.numericValue().doubleValue());
break;
case BYTES_FIXED_STRAIGHT:
field2=new StraightBytesDocValuesField(field1.name(),field1.binaryValue(),true);
break;
case BYTES_VAR_STRAIGHT:
field2=new StraightBytesDocValuesField(field1.name(),field1.binaryValue(),false);
break;
case BYTES_FIXED_DEREF:
field2=new DerefBytesDocValuesField(field1.name(),field1.binaryValue(),true);
break;
case BYTES_VAR_DEREF:
field2=new DerefBytesDocValuesField(field1.name(),field1.binaryValue(),false);
break;
case BYTES_FIXED_SORTED:
field2=new SortedBytesDocValuesField(field1.name(),field1.binaryValue(),true);
break;
case BYTES_VAR_SORTED:
field2=new SortedBytesDocValuesField(field1.name(),field1.binaryValue(),false);
break;
default :
throw new IllegalStateException("unknown Type: " + dvType);
}
}
 else {
field2=new Field(field1.name(),field1.stringValue(),field1.fieldType());
}
doc2.add(field2);
}
return doc2;
}
