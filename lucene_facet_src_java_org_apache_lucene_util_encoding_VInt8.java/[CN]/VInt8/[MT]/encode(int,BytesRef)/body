{
  if ((value & ~0x7F) == 0) {
    bytes.bytes[bytes.length]=(byte)value;
    bytes.length++;
  }
 else   if ((value & ~0x3FFF) == 0) {
    bytes.bytes[bytes.length]=(byte)(0x80 | ((value & 0x3F80) >> 7));
    bytes.bytes[bytes.length + 1]=(byte)(value & 0x7F);
    bytes.length+=2;
  }
 else   if ((value & ~0x1FFFFF) == 0) {
    bytes.bytes[bytes.length]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
    bytes.bytes[bytes.length + 1]=(byte)(0x80 | ((value & 0x3F80) >> 7));
    bytes.bytes[bytes.length + 2]=(byte)(value & 0x7F);
    bytes.length+=3;
  }
 else   if ((value & ~0xFFFFFFF) == 0) {
    bytes.bytes[bytes.length]=(byte)(0x80 | ((value & 0xFE00000) >> 21));
    bytes.bytes[bytes.length + 1]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
    bytes.bytes[bytes.length + 2]=(byte)(0x80 | ((value & 0x3F80) >> 7));
    bytes.bytes[bytes.length + 3]=(byte)(value & 0x7F);
    bytes.length+=4;
  }
 else {
    bytes.bytes[bytes.length]=(byte)(0x80 | ((value & 0xF0000000) >> 28));
    bytes.bytes[bytes.length + 1]=(byte)(0x80 | ((value & 0xFE00000) >> 21));
    bytes.bytes[bytes.length + 2]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
    bytes.bytes[bytes.length + 3]=(byte)(0x80 | ((value & 0x3F80) >> 7));
    bytes.bytes[bytes.length + 4]=(byte)(value & 0x7F);
    bytes.length+=5;
  }
}
