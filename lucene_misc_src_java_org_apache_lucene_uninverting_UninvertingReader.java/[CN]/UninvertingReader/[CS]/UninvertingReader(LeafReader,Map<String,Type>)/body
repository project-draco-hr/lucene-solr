{
  super(in);
  this.mapping=mapping;
  ArrayList<FieldInfo> filteredInfos=new ArrayList<>();
  for (  FieldInfo fi : in.getFieldInfos()) {
    DocValuesType type=fi.getDocValuesType();
    if (type == DocValuesType.NONE) {
      Type t=mapping.get(fi.name);
      if (t != null) {
        if (t == Type.INTEGER_POINT || t == Type.LONG_POINT || t == Type.FLOAT_POINT || t == Type.DOUBLE_POINT) {
          if (fi.getPointDimensionCount() == 0) {
            continue;
          }
        }
 else {
          if (fi.getIndexOptions() == IndexOptions.NONE) {
            continue;
          }
        }
switch (t) {
case INTEGER_POINT:
case LONG_POINT:
case FLOAT_POINT:
case DOUBLE_POINT:
case LEGACY_INTEGER:
case LEGACY_LONG:
case LEGACY_FLOAT:
case LEGACY_DOUBLE:
          type=DocValuesType.NUMERIC;
        break;
case BINARY:
      type=DocValuesType.BINARY;
    break;
case SORTED:
  type=DocValuesType.SORTED;
break;
case SORTED_SET_BINARY:
case SORTED_SET_INTEGER:
case SORTED_SET_FLOAT:
case SORTED_SET_LONG:
case SORTED_SET_DOUBLE:
type=DocValuesType.SORTED_SET;
break;
default :
throw new AssertionError();
}
}
}
filteredInfos.add(new FieldInfo(fi.name,fi.number,fi.hasVectors(),fi.omitsNorms(),fi.hasPayloads(),fi.getIndexOptions(),type,fi.getDocValuesGen(),fi.attributes(),fi.getPointDimensionCount(),fi.getPointNumBytes()));
}
fieldInfos=new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));
}
