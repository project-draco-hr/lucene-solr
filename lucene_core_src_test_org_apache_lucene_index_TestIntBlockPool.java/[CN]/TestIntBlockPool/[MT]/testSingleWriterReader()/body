{
  Counter bytesUsed=Counter.newCounter();
  IntBlockPool pool=new IntBlockPool(new ByteTrackingAllocator(bytesUsed));
  for (int j=0; j < 2; j++) {
    IntBlockPool.SliceWriter writer=new IntBlockPool.SliceWriter(pool);
    int start=writer.startNewSlice();
    int num=atLeast(100);
    for (int i=0; i < num; i++) {
      writer.writeInt(i);
    }
    int upto=writer.getCurrentOffset();
    IntBlockPool.SliceReader reader=new IntBlockPool.SliceReader(pool);
    reader.reset(start,upto);
    for (int i=0; i < num; i++) {
      assertEquals(i,reader.readInt());
    }
    assertTrue(reader.endOfSlice());
    if (random().nextBoolean()) {
      pool.reset(true,false);
      assertEquals(0,bytesUsed.get());
    }
 else {
      pool.reset(true,true);
      assertEquals(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT,bytesUsed.get());
    }
  }
}
