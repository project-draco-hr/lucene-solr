{
  if (node instanceof ParametricRangeQueryNode) {
    ParametricRangeQueryNode parametricRangeNode=(ParametricRangeQueryNode)node;
    ParametricQueryNode upper=parametricRangeNode.getUpperBound();
    ParametricQueryNode lower=parametricRangeNode.getLowerBound();
    DateTools.Resolution dateRes=null;
    boolean inclusive=false;
    Locale locale=getQueryConfigHandler().get(ConfigurationKeys.LOCALE);
    if (locale == null) {
      locale=Locale.getDefault();
    }
    CharSequence field=parametricRangeNode.getField();
    String fieldStr=null;
    if (field != null) {
      fieldStr=field.toString();
    }
    FieldConfig fieldConfig=getQueryConfigHandler().getFieldConfig(fieldStr);
    if (fieldConfig != null) {
      dateRes=fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);
    }
    if (upper.getOperator() == CompareOperator.LE) {
      inclusive=true;
    }
 else     if (lower.getOperator() == CompareOperator.GE) {
      inclusive=true;
    }
    String part1=lower.getTextAsString();
    String part2=upper.getTextAsString();
    try {
      DateFormat df=DateFormat.getDateInstance(DateFormat.SHORT,locale);
      df.setLenient(true);
      Date d1=df.parse(part1);
      Date d2=df.parse(part2);
      if (inclusive) {
        Calendar cal=Calendar.getInstance(locale);
        cal.setTime(d2);
        cal.set(Calendar.HOUR_OF_DAY,23);
        cal.set(Calendar.MINUTE,59);
        cal.set(Calendar.SECOND,59);
        cal.set(Calendar.MILLISECOND,999);
        d2=cal.getTime();
      }
      part1=DateTools.dateToString(d1,dateRes);
      part2=DateTools.dateToString(d2,dateRes);
    }
 catch (    Exception e) {
    }
    lower.setText(part1);
    upper.setText(part2);
    return new RangeQueryNode(lower,upper);
  }
  return node;
}
