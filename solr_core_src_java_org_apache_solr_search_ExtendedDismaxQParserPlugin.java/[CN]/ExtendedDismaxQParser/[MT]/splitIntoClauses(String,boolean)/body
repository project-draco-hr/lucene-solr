{
  ArrayList<Clause> lst=new ArrayList<Clause>(4);
  Clause clause;
  int pos=0;
  int end=s.length();
  char ch=0;
  int start;
  boolean disallowUserField;
  outer:   while (pos < end) {
    clause=new Clause();
    disallowUserField=true;
    ch=s.charAt(pos);
    while (Character.isWhitespace(ch)) {
      if (++pos >= end)       break;
      ch=s.charAt(pos);
    }
    start=pos;
    if (ch == '+' || ch == '-') {
      clause.must=ch;
      pos++;
    }
    clause.field=getFieldName(s,pos,end);
    if (clause.field != null && !userFields.isAllowed(clause.field)) {
      clause.field=null;
    }
    if (clause.field != null) {
      disallowUserField=false;
      int colon=s.indexOf(':',pos);
      clause.rawField=s.substring(pos,colon);
      pos+=colon - pos;
      pos++;
    }
    if (pos >= end)     break;
    char inString=0;
    ch=s.charAt(pos);
    if (!ignoreQuote && ch == '"') {
      clause.isPhrase=true;
      inString='"';
      pos++;
    }
    StringBuilder sb=new StringBuilder();
    while (pos < end) {
      ch=s.charAt(pos++);
      if (ch == '\\') {
        sb.append(ch);
        if (pos >= end) {
          sb.append(ch);
          break;
        }
        ch=s.charAt(pos++);
        sb.append(ch);
        continue;
      }
 else       if (inString != 0 && ch == inString) {
        inString=0;
        break;
      }
 else       if (Character.isWhitespace(ch)) {
        clause.hasWhitespace=true;
        if (inString == 0) {
          pos--;
          break;
        }
      }
      if (inString == 0) {
switch (ch) {
case '!':
case '(':
case ')':
case ':':
case '^':
case '[':
case ']':
case '{':
case '}':
case '~':
case '*':
case '?':
case '"':
case '+':
case '-':
case '\\':
case '|':
case '&':
case '/':
          clause.hasSpecialSyntax=true;
        sb.append('\\');
    }
  }
 else   if (ch == '"') {
    sb.append('\\');
  }
  sb.append(ch);
}
clause.val=sb.toString();
if (clause.isPhrase) {
  if (inString != 0) {
    return splitIntoClauses(s,true);
  }
  clause.hasSpecialSyntax=false;
}
 else {
  if (clause.val.length() == 0) {
    clause.syntaxError=true;
    if (clause.must != 0) {
      clause.val="\\" + clause.must;
      clause.must=0;
      clause.hasSpecialSyntax=true;
    }
 else {
      clause=null;
    }
  }
}
if (clause != null) {
  if (disallowUserField) {
    clause.raw=s.substring(start,pos);
    if (!"*:*".equals(clause.raw)) {
      clause.raw=clause.raw.replaceAll(":","\\\\:");
    }
  }
 else {
    clause.raw=s.substring(start,pos);
    if (userFields.isAllowed(clause.field) && !clause.raw.contains("^")) {
      Float boost=userFields.getBoost(clause.field);
      if (boost != null)       clause.raw+="^" + boost;
    }
  }
  lst.add(clause);
}
}
return lst;
}
