{
  validateSettings(minItemsInBlock,maxItemsInBlock);
  this.minItemsInBlock=minItemsInBlock;
  this.maxItemsInBlock=maxItemsInBlock;
  this.maxDoc=state.segmentInfo.maxDoc();
  this.fieldInfos=state.fieldInfos;
  this.postingsWriter=postingsWriter;
  final String termsName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockTreeTermsReader.TERMS_EXTENSION);
  termsOut=state.directory.createOutput(termsName,state.context);
  boolean success=false;
  IndexOutput indexOut=null;
  try {
    CodecUtil.writeIndexHeader(termsOut,BlockTreeTermsReader.TERMS_CODEC_NAME,BlockTreeTermsReader.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
    final String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockTreeTermsReader.TERMS_INDEX_EXTENSION);
    indexOut=state.directory.createOutput(indexName,state.context);
    CodecUtil.writeIndexHeader(indexOut,BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME,BlockTreeTermsReader.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
    postingsWriter.init(termsOut,state);
    this.indexOut=indexOut;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(termsOut,indexOut);
    }
  }
}
