{
  int numValues=docValues.length;
  if (VERBOSE) {
    System.out.println("TEST: numValues=" + numValues + " numDims="+ numDims+ " numBytesPerDim="+ numBytesPerDim);
  }
  boolean useRealWriter=docValues.length > 10000;
  IndexWriterConfig iwc;
  if (useRealWriter) {
    iwc=new IndexWriterConfig(new MockAnalyzer(random()));
  }
 else {
    iwc=newIndexWriterConfig();
  }
  if (expectExceptions) {
    MergeScheduler ms=iwc.getMergeScheduler();
    if (ms instanceof ConcurrentMergeScheduler) {
      ((ConcurrentMergeScheduler)ms).setSuppressExceptions();
    }
  }
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,iwc);
  DirectoryReader r=null;
  byte[][] expectedMinValues=new byte[numDims][];
  byte[][] expectedMaxValues=new byte[numDims][];
  for (int ord=0; ord < docValues.length; ord++) {
    for (int dim=0; dim < numDims; dim++) {
      if (ord == 0) {
        expectedMinValues[dim]=new byte[numBytesPerDim];
        System.arraycopy(docValues[ord][dim],0,expectedMinValues[dim],0,numBytesPerDim);
        expectedMaxValues[dim]=new byte[numBytesPerDim];
        System.arraycopy(docValues[ord][dim],0,expectedMaxValues[dim],0,numBytesPerDim);
      }
 else {
        if (StringHelper.compare(numBytesPerDim,docValues[ord][dim],0,expectedMinValues[dim],0) < 0) {
          System.arraycopy(docValues[ord][dim],0,expectedMinValues[dim],0,numBytesPerDim);
        }
        if (StringHelper.compare(numBytesPerDim,docValues[ord][dim],0,expectedMaxValues[dim],0) > 0) {
          System.arraycopy(docValues[ord][dim],0,expectedMaxValues[dim],0,numBytesPerDim);
        }
      }
    }
  }
  Directory saveDir;
  RandomIndexWriter saveW;
  int addIndexesAt;
  if (random().nextInt(5) == 1) {
    saveDir=dir;
    saveW=w;
    dir=getDirectory(numValues);
    if (useRealWriter) {
      iwc=new IndexWriterConfig(new MockAnalyzer(random()));
    }
 else {
      iwc=newIndexWriterConfig();
    }
    if (expectExceptions) {
      MergeScheduler ms=iwc.getMergeScheduler();
      if (ms instanceof ConcurrentMergeScheduler) {
        ((ConcurrentMergeScheduler)ms).setSuppressExceptions();
      }
    }
    w=new RandomIndexWriter(random(),dir,iwc);
    addIndexesAt=TestUtil.nextInt(random(),1,numValues - 1);
  }
 else {
    saveW=null;
    saveDir=null;
    addIndexesAt=0;
  }
  try {
    Document doc=null;
    int lastID=-1;
    for (int ord=0; ord < numValues; ord++) {
      int id;
      if (ids == null) {
        id=ord;
      }
 else {
        id=ids[ord];
      }
      if (id != lastID) {
        if (doc != null) {
          if (useRealWriter) {
            w.w.addDocument(doc);
          }
 else {
            w.addDocument(doc);
          }
        }
        doc=new Document();
        doc.add(new NumericDocValuesField("id",id));
      }
      doc.add(new BinaryPoint("field",docValues[ord]));
      lastID=id;
      if (random().nextInt(30) == 17) {
        if (useRealWriter) {
          w.w.addDocument(new Document());
        }
 else {
          w.addDocument(new Document());
        }
        if (VERBOSE) {
          System.out.println("add empty doc");
        }
      }
      if (random().nextInt(30) == 17) {
        Document xdoc=new Document();
        xdoc.add(new BinaryPoint("field",docValues[ord]));
        xdoc.add(new StringField("nukeme","yes",Field.Store.NO));
        if (useRealWriter) {
          w.w.addDocument(xdoc);
        }
 else {
          w.addDocument(xdoc);
        }
        if (VERBOSE) {
          System.out.println("add doc doc-to-delete");
        }
        if (random().nextInt(5) == 1) {
          if (useRealWriter) {
            w.w.deleteDocuments(new Term("nukeme","yes"));
          }
 else {
            w.deleteDocuments(new Term("nukeme","yes"));
          }
        }
      }
      if (VERBOSE) {
        System.out.println("  ord=" + ord + " id="+ id);
        for (int dim=0; dim < numDims; dim++) {
          System.out.println("    dim=" + dim + " value="+ new BytesRef(docValues[ord][dim]));
        }
      }
      if (saveW != null && ord >= addIndexesAt) {
        switchIndex(w,dir,saveW);
        w=saveW;
        dir=saveDir;
        saveW=null;
        saveDir=null;
      }
    }
    w.addDocument(doc);
    w.deleteDocuments(new Term("nukeme","yes"));
    if (random().nextBoolean()) {
      if (VERBOSE) {
        System.out.println("\nTEST: now force merge");
      }
      w.forceMerge(1);
    }
    r=w.getReader();
    w.close();
    if (VERBOSE) {
      System.out.println("TEST: reader=" + r);
    }
    NumericDocValues idValues=MultiDocValues.getNumericValues(r,"id");
    int[] docIDToID=new int[r.maxDoc()];
{
      int docID;
      while ((docID=idValues.nextDoc()) != NO_MORE_DOCS) {
        docIDToID[docID]=(int)idValues.longValue();
      }
    }
    Bits liveDocs=MultiFields.getLiveDocs(r);
    byte[] minValues=new byte[numDims * numBytesPerDim];
    Arrays.fill(minValues,(byte)0xff);
    byte[] maxValues=new byte[numDims * numBytesPerDim];
    for (    LeafReaderContext ctx : r.leaves()) {
      PointValues dimValues=ctx.reader().getPointValues("field");
      if (dimValues == null) {
        continue;
      }
      byte[] leafMinValues=dimValues.getMinPackedValue();
      byte[] leafMaxValues=dimValues.getMaxPackedValue();
      for (int dim=0; dim < numDims; dim++) {
        if (StringHelper.compare(numBytesPerDim,leafMinValues,dim * numBytesPerDim,minValues,dim * numBytesPerDim) < 0) {
          System.arraycopy(leafMinValues,dim * numBytesPerDim,minValues,dim * numBytesPerDim,numBytesPerDim);
        }
        if (StringHelper.compare(numBytesPerDim,leafMaxValues,dim * numBytesPerDim,maxValues,dim * numBytesPerDim) > 0) {
          System.arraycopy(leafMaxValues,dim * numBytesPerDim,maxValues,dim * numBytesPerDim,numBytesPerDim);
        }
      }
    }
    byte[] scratch=new byte[numBytesPerDim];
    for (int dim=0; dim < numDims; dim++) {
      System.arraycopy(minValues,dim * numBytesPerDim,scratch,0,numBytesPerDim);
      assertTrue(Arrays.equals(expectedMinValues[dim],scratch));
      System.arraycopy(maxValues,dim * numBytesPerDim,scratch,0,numBytesPerDim);
      assertTrue(Arrays.equals(expectedMaxValues[dim],scratch));
    }
    int iters=atLeast(100);
    for (int iter=0; iter < iters; iter++) {
      if (VERBOSE) {
        System.out.println("\nTEST: iter=" + iter);
      }
      byte[][] queryMin=new byte[numDims][];
      byte[][] queryMax=new byte[numDims][];
      for (int dim=0; dim < numDims; dim++) {
        queryMin[dim]=new byte[numBytesPerDim];
        random().nextBytes(queryMin[dim]);
        queryMax[dim]=new byte[numBytesPerDim];
        random().nextBytes(queryMax[dim]);
        if (StringHelper.compare(numBytesPerDim,queryMin[dim],0,queryMax[dim],0) > 0) {
          byte[] x=queryMin[dim];
          queryMin[dim]=queryMax[dim];
          queryMax[dim]=x;
        }
      }
      if (VERBOSE) {
        for (int dim=0; dim < numDims; dim++) {
          System.out.println("  dim=" + dim + "\n    queryMin="+ new BytesRef(queryMin[dim])+ "\n    queryMax="+ new BytesRef(queryMax[dim]));
        }
      }
      final BitSet hits=new BitSet();
      for (      LeafReaderContext ctx : r.leaves()) {
        PointValues dimValues=ctx.reader().getPointValues("field");
        if (dimValues == null) {
          continue;
        }
        final int docBase=ctx.docBase;
        dimValues.intersect(new PointValues.IntersectVisitor(){
          @Override public void visit(          int docID){
            if (liveDocs == null || liveDocs.get(docBase + docID)) {
              hits.set(docIDToID[docBase + docID]);
            }
          }
          @Override public void visit(          int docID,          byte[] packedValue){
            if (liveDocs != null && liveDocs.get(docBase + docID) == false) {
              return;
            }
            for (int dim=0; dim < numDims; dim++) {
              if (StringHelper.compare(numBytesPerDim,packedValue,dim * numBytesPerDim,queryMin[dim],0) < 0 || StringHelper.compare(numBytesPerDim,packedValue,dim * numBytesPerDim,queryMax[dim],0) > 0) {
                return;
              }
            }
            hits.set(docIDToID[docBase + docID]);
          }
          @Override public Relation compare(          byte[] minPacked,          byte[] maxPacked){
            boolean crosses=false;
            for (int dim=0; dim < numDims; dim++) {
              if (StringHelper.compare(numBytesPerDim,maxPacked,dim * numBytesPerDim,queryMin[dim],0) < 0 || StringHelper.compare(numBytesPerDim,minPacked,dim * numBytesPerDim,queryMax[dim],0) > 0) {
                return Relation.CELL_OUTSIDE_QUERY;
              }
 else               if (StringHelper.compare(numBytesPerDim,minPacked,dim * numBytesPerDim,queryMin[dim],0) < 0 || StringHelper.compare(numBytesPerDim,maxPacked,dim * numBytesPerDim,queryMax[dim],0) > 0) {
                crosses=true;
              }
            }
            if (crosses) {
              return Relation.CELL_CROSSES_QUERY;
            }
 else {
              return Relation.CELL_INSIDE_QUERY;
            }
          }
        }
);
      }
      BitSet expected=new BitSet();
      for (int ord=0; ord < numValues; ord++) {
        boolean matches=true;
        for (int dim=0; dim < numDims; dim++) {
          byte[] x=docValues[ord][dim];
          if (StringHelper.compare(numBytesPerDim,x,0,queryMin[dim],0) < 0 || StringHelper.compare(numBytesPerDim,x,0,queryMax[dim],0) > 0) {
            matches=false;
            break;
          }
        }
        if (matches) {
          int id;
          if (ids == null) {
            id=ord;
          }
 else {
            id=ids[ord];
          }
          expected.set(id);
        }
      }
      int limit=Math.max(expected.length(),hits.length());
      int failCount=0;
      int successCount=0;
      for (int id=0; id < limit; id++) {
        if (expected.get(id) != hits.get(id)) {
          System.out.println("FAIL: id=" + id);
          failCount++;
        }
 else {
          successCount++;
        }
      }
      if (failCount != 0) {
        for (int docID=0; docID < r.maxDoc(); docID++) {
          System.out.println("  docID=" + docID + " id="+ docIDToID[docID]);
        }
        fail(failCount + " docs failed; " + successCount+ " docs succeeded");
      }
    }
  }
  finally {
    IOUtils.closeWhileHandlingException(r,w,saveW,saveDir == null ? null : dir);
  }
}
