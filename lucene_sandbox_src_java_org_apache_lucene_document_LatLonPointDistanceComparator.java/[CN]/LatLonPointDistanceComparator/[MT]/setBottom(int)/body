{
  bottom=values[slot];
  if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {
    GeoRect box=GeoUtils.circleToBBox(longitude,latitude,bottom);
    int minLatEncoded=LatLonPoint.encodeLatitude(box.minLat);
    int maxLatEncoded=LatLonPoint.encodeLatitude(box.maxLat);
    int minLonEncoded=LatLonPoint.encodeLongitude(box.minLon);
    int maxLonEncoded=LatLonPoint.encodeLongitude(box.maxLon);
    if (minLatEncoded != Integer.MIN_VALUE) {
      minLatEncoded--;
    }
    if (minLonEncoded != Integer.MIN_VALUE) {
      minLonEncoded--;
    }
    if (maxLatEncoded != Integer.MAX_VALUE) {
      maxLatEncoded++;
    }
    if (maxLonEncoded != Integer.MAX_VALUE) {
      maxLonEncoded++;
    }
    crossesDateLine=box.crossesDateline();
    if (crossesDateLine) {
      minLon=Integer.MIN_VALUE;
      maxLon=maxLonEncoded;
      minLat=minLatEncoded;
      maxLat=maxLatEncoded;
      minLon2=minLonEncoded;
      maxLon2=Integer.MAX_VALUE;
      minLat2=minLatEncoded;
      maxLat2=maxLatEncoded;
    }
 else {
      minLon=minLonEncoded;
      maxLon=maxLonEncoded;
      minLat=minLatEncoded;
      maxLat=maxLatEncoded;
    }
  }
  setBottomCounter++;
}
