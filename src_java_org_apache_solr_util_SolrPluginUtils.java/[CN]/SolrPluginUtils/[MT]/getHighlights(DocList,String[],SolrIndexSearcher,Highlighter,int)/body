{
  NamedList fragments=new NamedList();
  DocIterator iterator=docs.iterator();
  for (int i=0; i < docs.size(); i++) {
    int docId=iterator.nextDoc();
    Document doc=searcher.doc(docId);
    NamedList docSummaries=new NamedList();
    for (    String fieldName : fieldNames) {
      fieldName=fieldName.trim();
      String[] docTexts=doc.getValues(fieldName);
      if (docTexts == null)       continue;
      String[] summaries;
      TextFragment[] frag;
      if (docTexts.length == 1) {
        TokenStream tstream;
        try {
          tstream=TokenSources.getTokenStream(searcher.getReader(),docId,fieldName);
        }
 catch (        IllegalArgumentException e) {
          tstream=searcher.getSchema().getAnalyzer().tokenStream(fieldName,new StringReader(docTexts[0]));
        }
        frag=highlighter.getBestTextFragments(tstream,docTexts[0],false,numFragments);
      }
 else {
        MultiValueTokenStream tstream;
        tstream=new MultiValueTokenStream(fieldName,docTexts,searcher.getSchema().getAnalyzer());
        frag=highlighter.getBestTextFragments(tstream,tstream.asSingleValue(),false,numFragments);
      }
      if (frag.length > 0) {
        ArrayList fragTexts=new ArrayList();
        for (int j=0; j < frag.length; j++) {
          if ((frag[j] != null) && (frag[j].getScore() > 0)) {
            fragTexts.add(frag[j].toString());
          }
        }
        summaries=(String[])fragTexts.toArray(new String[0]);
        if (summaries.length > 0)         docSummaries.add(fieldName,summaries);
      }
    }
    String printId=searcher.getSchema().printableUniqueKey(doc);
    fragments.add(printId == null ? null : printId,docSummaries);
  }
  return fragments;
}
