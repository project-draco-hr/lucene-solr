{
  Analyzer analyzer=new Analyzer(){
    @Override public TokenStream tokenStream(    String fieldName,    Reader reader){
      return new TokenStream(){
        private final String[] TOKENS={"1","2","3","4","5"};
        private final int[] INCREMENTS={0,2,1,0,1};
        private int i=0;
        PositionIncrementAttribute posIncrAtt=addAttribute(PositionIncrementAttribute.class);
        TermAttribute termAtt=addAttribute(TermAttribute.class);
        OffsetAttribute offsetAtt=addAttribute(OffsetAttribute.class);
        @Override public boolean incrementToken(){
          if (i == TOKENS.length)           return false;
          clearAttributes();
          termAtt.setTermBuffer(TOKENS[i]);
          offsetAtt.setOffset(i,i);
          posIncrAtt.setPositionIncrement(INCREMENTS[i]);
          i++;
          return true;
        }
      }
;
    }
  }
;
  Directory store=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(store,new IndexWriterConfig(TEST_VERSION_CURRENT,analyzer));
  Document d=new Document();
  d.add(new Field("field","bogus",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(d);
  writer.optimize();
  writer.close();
  IndexSearcher searcher=new IndexSearcher(store,true);
  TermPositions pos=searcher.getIndexReader().termPositions(new Term("field","1"));
  pos.next();
  assertEquals(0,pos.nextPosition());
  pos=searcher.getIndexReader().termPositions(new Term("field","2"));
  pos.next();
  assertEquals(2,pos.nextPosition());
  PhraseQuery q;
  ScoreDoc[] hits;
  q=new PhraseQuery();
  q.add(new Term("field","1"));
  q.add(new Term("field","2"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),1);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),2);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","3"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","4"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","9"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  MultiPhraseQuery mq=new MultiPhraseQuery();
  mq.add(new Term[]{new Term("field","3"),new Term("field","9")},0);
  hits=searcher.search(mq,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","4"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  QueryParser qp=new QueryParser(TEST_VERSION_CURRENT,"field",new StopWhitespaceAnalyzer(false));
  q=(PhraseQuery)qp.parse("\"1 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  qp.setEnablePositionIncrements(true);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  qp.setEnablePositionIncrements(false);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  qp=new QueryParser(TEST_VERSION_CURRENT,"field",new StopWhitespaceAnalyzer(true));
  qp.setEnablePositionIncrements(true);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
}
