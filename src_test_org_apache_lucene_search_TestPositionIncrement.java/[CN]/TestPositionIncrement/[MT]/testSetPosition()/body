{
  Analyzer analyzer=new Analyzer(){
    public TokenStream tokenStream(    String fieldName,    Reader reader){
      return new TokenStream(){
        private final String[] TOKENS={"1","2","3","4","5"};
        private final int[] INCREMENTS={1,2,1,0,1};
        private int i=0;
        PositionIncrementAttribute posIncrAtt=(PositionIncrementAttribute)addAttribute(PositionIncrementAttribute.class);
        TermAttribute termAtt=(TermAttribute)addAttribute(TermAttribute.class);
        OffsetAttribute offsetAtt=(OffsetAttribute)addAttribute(OffsetAttribute.class);
        public boolean incrementToken(){
          if (i == TOKENS.length)           return false;
          termAtt.setTermBuffer(TOKENS[i]);
          offsetAtt.setStartOffset(i);
          offsetAtt.setEndOffset(i);
          posIncrAtt.setPositionIncrement(INCREMENTS[i]);
          i++;
          return true;
        }
      }
;
    }
  }
;
  RAMDirectory store=new RAMDirectory();
  IndexWriter writer=new IndexWriter(store,analyzer,true,IndexWriter.MaxFieldLength.LIMITED);
  Document d=new Document();
  d.add(new Field("field","bogus",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(d);
  writer.optimize();
  writer.close();
  IndexSearcher searcher=new IndexSearcher(store);
  PhraseQuery q;
  ScoreDoc[] hits;
  q=new PhraseQuery();
  q.add(new Term("field","1"));
  q.add(new Term("field","2"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),1);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),2);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","3"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","4"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","9"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  MultiPhraseQuery mq=new MultiPhraseQuery();
  mq.add(new Term[]{new Term("field","3"),new Term("field","9")},0);
  hits=searcher.search(mq,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","4"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  Analyzer stpa=new Analyzer(){
    final WhitespaceAnalyzer a=new WhitespaceAnalyzer();
    public TokenStream tokenStream(    String fieldName,    Reader reader){
      TokenStream ts=a.tokenStream(fieldName,reader);
      return new StopFilter(ts,new String[]{"stop"});
    }
  }
;
  QueryParser qp=new QueryParser("field",stpa);
  q=(PhraseQuery)qp.parse("\"1 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  qp.setEnablePositionIncrements(true);
  q=(PhraseQuery)qp.parse("\"1 stop 2\"");
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  boolean dflt=StopFilter.getEnablePositionIncrementsDefault();
  try {
    qp.setEnablePositionIncrements(false);
    StopFilter.setEnablePositionIncrementsDefault(true);
    q=(PhraseQuery)qp.parse("\"1 stop 2\"");
    hits=searcher.search(q,null,1000).scoreDocs;
    assertEquals(0,hits.length);
    qp.setEnablePositionIncrements(true);
    q=(PhraseQuery)qp.parse("\"1 stop 2\"");
    hits=searcher.search(q,null,1000).scoreDocs;
    assertEquals(1,hits.length);
  }
  finally {
    StopFilter.setEnablePositionIncrementsDefault(dflt);
  }
}
