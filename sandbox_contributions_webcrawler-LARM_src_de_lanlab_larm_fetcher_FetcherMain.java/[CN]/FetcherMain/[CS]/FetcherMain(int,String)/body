{
  messageHandler=new MessageHandler();
  File logsDir=new File("logs");
  logsDir.mkdir();
  SimpleLogger storeLog=new SimpleLogger("store",false);
  SimpleLogger visitedLog=new SimpleLogger("URLVisitedFilter",false);
  SimpleLogger scopeLog=new SimpleLogger("URLScopeFilter",false);
  SimpleLogger pathsLog=new SimpleLogger("KnownPathsFilter",false);
  SimpleLogger linksLog=new SimpleLogger("links",false);
  SimpleLogger lengthLog=new SimpleLogger("length",false);
  StoragePipeline storage=new StoragePipeline();
  storage.addDocStorage(new LogStorage(storeLog,true,"logs/pagefile"));
  storage.addLinkStorage(new LinkLogStorage(linksLog));
  storage.addLinkStorage(messageHandler);
  storage.open();
  urlScopeFilter=new URLScopeFilter(scopeLog);
  hostManager=new HostManager(1000);
  hostResolver=new HostResolver();
  if (hostResolverFile != null && !"".equals(hostResolverFile)) {
    hostResolver.initFromFile(hostResolverFile);
  }
  hostManager.setHostResolver(hostResolver);
  reFilter=new RobotExclusionFilter(hostManager);
  fetcher=new Fetcher(nrThreads,storage,storage,hostManager);
  urlLengthFilter=new URLLengthFilter(500,lengthLog);
  HTTPConnection.setDefaultAllowUserInteraction(false);
  HTTPConnection.removeDefaultModule(HTTPClient.ContentEncodingModule.class);
  urlVisitedFilter=new URLVisitedFilter(visitedLog,100000);
  fetcher.init();
  monitor=new ThreadMonitor(urlLengthFilter,urlVisitedFilter,urlScopeFilter,reFilter,messageHandler,fetcher.getThreadPool(),hostManager,5000);
  messageHandler.addListener(urlLengthFilter);
  messageHandler.addListener(urlScopeFilter);
  messageHandler.addListener(reFilter);
  messageHandler.addListener(urlVisitedFilter);
  messageHandler.addListener(fetcher);
}
