{
  Path file=new Path(value);
  try {
    fs=file.getFileSystem(conf);
    if (verifyHasScheme && !isSystemIn(file)) {
      verifyHasScheme(parser,file);
    }
    if (verifyScheme != null && !isSystemIn(file)) {
      verifyScheme(parser,file);
    }
    if (verifyIsAbsolute && !isSystemIn(file)) {
      verifyIsAbsolute(parser,file);
    }
    if (verifyExists && !isSystemIn(file)) {
      verifyExists(parser,file);
    }
    if (verifyNotExists && !isSystemIn(file)) {
      verifyNotExists(parser,file);
    }
    if (verifyIsFile && !isSystemIn(file)) {
      verifyIsFile(parser,file);
    }
    if (verifyIsDirectory && !isSystemIn(file)) {
      verifyIsDirectory(parser,file);
    }
    if (verifyCanRead && !isSystemIn(file)) {
      verifyCanRead(parser,file);
    }
    if (verifyCanWrite && !isSystemIn(file)) {
      verifyCanWrite(parser,file);
    }
    if (verifyCanWriteParent && !isSystemIn(file)) {
      verifyCanWriteParent(parser,file);
    }
    if (verifyCanExecute && !isSystemIn(file)) {
      verifyCanExecute(parser,file);
    }
  }
 catch (  IOException e) {
    throw new ArgumentParserException(e,parser);
  }
  return file;
}
