def p64sb_encode(bpv, f, bits):
    values = (64 / bpv)
    typ = get_type(bits)
    (mask_start, mask_end) = masks(bits)
    f.write(('    public void encode(%s[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {\n' % typ))
    if (bits < bpv):
        f.write('      throw new UnsupportedOperationException();\n')
        f.write('    }\n\n')
        return
    f.write('      assert blocksOffset + iterations * blockCount() <= blocks.length;\n')
    f.write('      assert valuesOffset + iterations * valueCount() <= values.length;\n')
    f.write('      for (int i = 0; i < iterations; ++i) {\n')
    for i in xrange(values):
        block_offset = (i / values)
        offset_in_block = (i % values)
        if (i == 0):
            f.write(('        blocks[blocksOffset++] = %svalues[valuesOffset++]%s' % (mask_start, mask_end)))
        else:
            f.write((' | (%svalues[valuesOffset++]%s << %d)' % (mask_start, mask_end, (i * bpv))))
            if (i == (values - 1)):
                f.write(';\n')
    f.write('      }\n')
    f.write('    }\n\n')
