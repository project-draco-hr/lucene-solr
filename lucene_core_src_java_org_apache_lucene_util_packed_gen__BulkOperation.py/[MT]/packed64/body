def packed64(bpv, f):
    blocks = bpv
    values = ((blocks * 64) / bpv)
    while (((blocks % 2) == 0) and ((values % 2) == 0)):
        blocks /= 2
        values /= 2
    assert ((values * bpv) == (64 * blocks)), ('%d values, %d blocks, %d bits per value' % (values, blocks, bpv))
    mask = ((1 << bpv) - 1)
    f.write(('  PACKED_%d {\n\n' % bpv))
    f.write('    public int blockCount() {\n')
    f.write(('      return %d;\n' % blocks))
    f.write('    }\n\n')
    f.write('    public int valueCount() {\n')
    f.write(('      return %d;\n' % values))
    f.write('    }\n\n')
    if (bpv == 64):
        f.write('    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      System.arraycopy(blocks, blocksOffset, values, valuesOffset, valueCount() * iterations);\n    }\n\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      LongBuffer.wrap(values, valuesOffset, iterations * valueCount()).put(ByteBuffer.wrap(blocks, blocksOffset, 8 * iterations * blockCount()).asLongBuffer());\n    }\n\n    public void encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {\n      System.arraycopy(values, valuesOffset, blocks, blocksOffset, valueCount() * iterations);\n    }\n\n  }\n')
    else:
        p64_decode(bpv, 32, values)
        p64_decode(bpv, 64, values)
        p64_encode(bpv, 32, values)
        p64_encode(bpv, 64, values)
        f.write('  }\n')
