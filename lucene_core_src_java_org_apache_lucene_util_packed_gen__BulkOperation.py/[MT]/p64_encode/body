def p64_encode(bpv, bits, values):
    typ = get_type(bits)
    (mask_start, mask_end) = masks(bits)
    f.write(('    public void encode(%s[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {\n' % typ))
    f.write('      assert blocksOffset + iterations * blockCount() <= blocks.length;\n')
    f.write('      assert valuesOffset + iterations * valueCount() <= values.length;\n')
    f.write('      for (int i = 0; i < iterations; ++i) {\n')
    for i in xrange(0, values):
        block_offset = ((i * bpv) / 64)
        bit_offset = ((i * bpv) % 64)
        if (bit_offset == 0):
            f.write(('        blocks[blocksOffset++] = (%svalues[valuesOffset++]%s << %d)' % (mask_start, mask_end, (64 - bpv))))
        elif ((bit_offset + bpv) == 64):
            f.write((' | %svalues[valuesOffset++]%s;\n' % (mask_start, mask_end)))
        elif ((bit_offset + bpv) < 64):
            f.write((' | (%svalues[valuesOffset++]%s << %d)' % (mask_start, mask_end, ((64 - bit_offset) - bpv))))
        else:
            right_bits = ((bit_offset + bpv) - 64)
            f.write((' | (%svalues[valuesOffset]%s >>> %d);\n' % (mask_start, mask_end, right_bits)))
            f.write(('        blocks[blocksOffset++] = (%svalues[valuesOffset++]%s << %d)' % (mask_start, mask_end, (64 - right_bits))))
    f.write('      }\n')
    f.write('    }\n\n')
