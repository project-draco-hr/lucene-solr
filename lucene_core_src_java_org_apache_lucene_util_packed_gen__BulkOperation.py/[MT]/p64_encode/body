def p64_encode(bpv, bits, values):
    typ = get_type(bits)
    buf = (typ.title() + 'Buffer')
    (mask_start, mask_end) = masks(bits)
    f.write(('    public void encode(%s values, LongBuffer blocks, int iterations) {\n' % buf))
    f.write('      assert blocks.position() + iterations * blocks() <= blocks.limit();\n')
    f.write('      assert values.position() + iterations * values() <= values.limit();\n')
    f.write('      for (int i = 0; i < iterations; ++i) {\n')
    for i in xrange(0, values):
        block_offset = ((i * bpv) / 64)
        bit_offset = ((i * bpv) % 64)
        if (bit_offset == 0):
            f.write(('        blocks.put((%svalues.get()%s << %d)' % (mask_start, mask_end, (64 - bpv))))
        elif ((bit_offset + bpv) == 64):
            f.write((' | %svalues.get()%s);\n' % (mask_start, mask_end)))
        elif ((bit_offset + bpv) < 64):
            f.write((' | (%svalues.get()%s << %d)' % (mask_start, mask_end, ((64 - bit_offset) - bpv))))
        else:
            right_bits = ((bit_offset + bpv) - 64)
            f.write((' | (%svalues.get(values.position())%s >>> %d));\n' % (mask_start, mask_end, right_bits)))
            f.write(('        blocks.put((%svalues.get()%s << %d)' % (mask_start, mask_end, (64 - right_bits))))
    f.write('      }\n')
    f.write('    }\n\n')
