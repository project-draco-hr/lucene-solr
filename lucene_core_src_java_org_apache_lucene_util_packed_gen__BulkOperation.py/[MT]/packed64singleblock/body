def packed64singleblock(bpv, f):
    values = (64 / bpv)
    f.write(('\n  static final class Packed64SingleBlockBulkOperation%d extends BulkOperation {\n\n' % bpv))
    f.write('    public int blocks() {\n')
    f.write('      return 1;\n')
    f.write('     }\n\n')
    f.write('    public int values() {\n')
    f.write(('      return %d;\n' % values))
    f.write('    }\n\n')
    f.write('    public void get(long[] blocks, int bi, long[] values, int vi, int iterations) {\n')
    f.write('      assert bi + iterations * blocks() <= blocks.length;\n')
    f.write('      assert vi + iterations * values() <= values.length;\n')
    f.write('      for (int i = 0; i < iterations; ++i) {\n')
    f.write('        final long block = blocks[bi++];\n')
    mask = ((1 << bpv) - 1)
    for i in xrange(values):
        block_offset = (i / values)
        offset_in_block = (i % values)
        if (i == 0):
            f.write(('        values[vi++] = block & %dL;\n' % mask))
        elif (i == (values - 1)):
            f.write(('        values[vi++] = block >>> %d;\n' % (i * bpv)))
        else:
            f.write(('        values[vi++] = (block >>> %d) & %dL;\n' % ((i * bpv), mask)))
    f.write('      }\n')
    f.write('    }\n\n')
    f.write('    public void set(long[] blocks, int bi, long[] values, int vi, int iterations) {\n')
    f.write('      assert bi + iterations * blocks() <= blocks.length;\n')
    f.write('      assert vi + iterations * values() <= values.length;\n')
    f.write('      for (int i = 0; i < iterations; ++i) {\n')
    for i in xrange(values):
        block_offset = (i / values)
        offset_in_block = (i % values)
        if (i == 0):
            f.write('        blocks[bi++] = values[vi++]')
        else:
            f.write((' | (values[vi++] << %d)' % (i * bpv)))
            if (i == (values - 1)):
                f.write(';\n')
    f.write('      }\n')
    f.write('    }\n')
    f.write('  }\n')
