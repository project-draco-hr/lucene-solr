{
  StringBuilder termText=new StringBuilder(25);
  int startOffset=-1, firstPositionIncrement=-1, wordsMerged=0;
  Token lastToken=null;
  for (Token token=input.next(in); token != null; token=input.next()) {
    termText.append(token.termBuffer(),0,token.termLength());
    if (termText.charAt(termText.length() - 1) == '-') {
      wordsMerged++;
      termText.setLength(termText.length() - 1);
      if (startOffset == -1) {
        startOffset=token.startOffset();
        firstPositionIncrement=token.getPositionIncrement();
      }
      lastToken=token;
    }
 else {
      if (wordsMerged == 0)       return token;
      Token mergedToken=new Token(termText.toString(),startOffset,token.endOffset(),token.type());
      mergedToken.setPositionIncrement(firstPositionIncrement);
      return mergedToken;
    }
  }
  if (startOffset != -1)   return lastToken;
 else   return null;
}
