{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig();
  iwc.setMergeScheduler(new SerialMergeScheduler());
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,iwc);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    doc.add(new StoredField("id",i));
    doc.add(new NumericDocValuesField("id",i));
    if (random().nextInt(10) > 7) {
      double latRaw=GeoTestUtil.nextLatitude();
      double lonRaw=GeoTestUtil.nextLongitude();
      double lat=LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));
      double lon=LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));
      doc.add(new LatLonPoint("field",lat,lon));
      doc.add(new StoredField("lat",lat));
      doc.add(new StoredField("lon",lon));
    }
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  IndexSearcher searcher=newSearcher(reader);
  for (int i=0; i < numQueries; i++) {
    double lat=GeoTestUtil.nextLatitude();
    double lon=GeoTestUtil.nextLongitude();
    double missingValue=Double.POSITIVE_INFINITY;
    Result expected[]=new Result[reader.maxDoc()];
    for (int doc=0; doc < reader.maxDoc(); doc++) {
      Document targetDoc=reader.document(doc);
      final double distance;
      if (targetDoc.getField("lat") == null) {
        distance=missingValue;
      }
 else {
        double docLatitude=targetDoc.getField("lat").numericValue().doubleValue();
        double docLongitude=targetDoc.getField("lon").numericValue().doubleValue();
        distance=SloppyMath.haversinMeters(lat,lon,docLatitude,docLongitude);
      }
      int id=targetDoc.getField("id").numericValue().intValue();
      expected[doc]=new Result(id,distance);
    }
    Arrays.sort(expected);
    int topN=TestUtil.nextInt(random(),1,reader.maxDoc());
    SortField distanceSort=LatLonPoint.newDistanceSort("field",lat,lon);
    distanceSort.setMissingValue(missingValue);
    Sort sort=new Sort(distanceSort,new SortField("id",SortField.Type.INT));
    TopDocs topDocs=searcher.search(new MatchAllDocsQuery(),topN,sort);
    for (int resultNumber=0; resultNumber < topN; resultNumber++) {
      FieldDoc fieldDoc=(FieldDoc)topDocs.scoreDocs[resultNumber];
      Result actual=new Result((Integer)fieldDoc.fields[1],(Double)fieldDoc.fields[0]);
      assertEquals(expected[resultNumber],actual);
    }
    if (topN < reader.maxDoc()) {
      int page2=TestUtil.nextInt(random(),1,reader.maxDoc() - topN);
      TopDocs topDocs2=searcher.searchAfter(topDocs.scoreDocs[topN - 1],new MatchAllDocsQuery(),page2,sort);
      for (int resultNumber=0; resultNumber < page2; resultNumber++) {
        FieldDoc fieldDoc=(FieldDoc)topDocs2.scoreDocs[resultNumber];
        Result actual=new Result((Integer)fieldDoc.fields[1],(Double)fieldDoc.fields[0]);
        assertEquals(expected[topN + resultNumber],actual);
      }
    }
  }
  reader.close();
  writer.close();
  dir.close();
}
