{
  final double ENCODING_TOLERANCE=1e-7;
  int iters=atLeast(10000);
  for (int iter=0; iter < iters; iter++) {
    double lat=-90 + 180.0 * random().nextDouble();
    double latEnc=LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));
    assertEquals("lat=" + lat + " latEnc="+ latEnc+ " diff="+ (lat - latEnc),lat,latEnc,ENCODING_TOLERANCE);
    double lon=-180 + 360.0 * random().nextDouble();
    double lonEnc=LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));
    assertEquals("lon=" + lon + " lonEnc="+ lonEnc+ " diff="+ (lon - lonEnc),lon,lonEnc,ENCODING_TOLERANCE);
  }
  assertEquals(0.0,LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(0.0)),ENCODING_TOLERANCE);
  assertEquals(90.0,LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(90.0)),ENCODING_TOLERANCE);
  assertEquals(-90.0,LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(-90.0)),ENCODING_TOLERANCE);
  assertEquals(0.0,LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(0.0)),ENCODING_TOLERANCE);
  assertEquals(180.0,LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(180.0)),ENCODING_TOLERANCE);
  assertEquals(-180.0,LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(-180.0)),ENCODING_TOLERANCE);
}
