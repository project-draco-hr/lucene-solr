{
  return new FunctionValues(){
    private final ShapeFieldCache<Point> cache=provider.getCache(readerContext.reader());
    private final Point from=ShapeFieldCacheDistanceValueSource.this.from;
    private final DistanceCalculator calculator=ctx.getDistCalc();
    private final double nullValue=(ctx.isGeo() ? 180 : Double.MAX_VALUE);
    @Override public float floatVal(    int doc){
      return (float)doubleVal(doc);
    }
    @Override public double doubleVal(    int doc){
      List<Point> vals=cache.getShapes(doc);
      if (vals != null) {
        double v=calculator.distance(from,vals.get(0));
        for (int i=1; i < vals.size(); i++) {
          v=Math.min(v,calculator.distance(from,vals.get(i)));
        }
        return v;
      }
      return nullValue;
    }
    @Override public String toString(    int doc){
      return description() + "=" + floatVal(doc);
    }
  }
;
}
