{
  if (lattice == null) {
    lattice=new Lattice();
  }
  final int endPos=endPosData.pos;
  char[] fragment=buffer.get(lastBackTracePos,endPos - lastBackTracePos);
  lattice.setup(fragment,dictionaryMap,positions,lastBackTracePos,endPos,useEOS);
  lattice.markUnreachable();
  lattice.calcLeftCost(costs);
  lattice.calcRightCost(costs);
  int bestCost=lattice.bestCost();
  if (VERBOSE) {
    System.out.printf("DEBUG: 1-BEST COST: %d\n",bestCost);
  }
  for (  int node : lattice.bestPathNodeList()) {
    registerNode(node,fragment);
  }
  for (int n=2; ; ++n) {
    List<Integer> nbest=lattice.nBestNodeList(n);
    if (nbest.isEmpty()) {
      break;
    }
    int cost=lattice.cost(nbest.get(0));
    if (VERBOSE) {
      System.out.printf("DEBUG: %d-BEST COST: %d\n",n,cost);
    }
    if (bestCost + nBestCost < cost) {
      break;
    }
    for (    int node : nbest) {
      registerNode(node,fragment);
    }
  }
  if (VERBOSE) {
    lattice.debugPrint();
  }
}
