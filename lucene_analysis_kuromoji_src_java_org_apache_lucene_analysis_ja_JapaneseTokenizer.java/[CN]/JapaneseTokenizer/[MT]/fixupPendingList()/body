{
  Collections.sort(pending,new Comparator<Token>(){
    @Override public int compare(    Token a,    Token b){
      int aOff=a.getOffset();
      int bOff=b.getOffset();
      if (aOff != bOff) {
        return aOff - bOff;
      }
      int aLen=a.getLength();
      int bLen=b.getLength();
      if (aLen != bLen) {
        return aLen - bLen;
      }
      return b.getType().ordinal() - a.getType().ordinal();
    }
  }
);
  for (int i=1; i < pending.size(); ++i) {
    Token a=pending.get(i - 1);
    Token b=pending.get(i);
    if (a.getOffset() == b.getOffset() && a.getLength() == b.getLength()) {
      pending.remove(i);
      --i;
    }
  }
  HashMap<Integer,Integer> map=new HashMap<>();
  for (  Token t : pending) {
    map.put(t.getOffset(),0);
    map.put(t.getOffset() + t.getLength(),0);
  }
  Integer[] offsets=map.keySet().toArray(new Integer[0]);
  Arrays.sort(offsets);
  for (int i=0; i < offsets.length; ++i) {
    map.put(offsets[i],i);
  }
  for (  Token t : pending) {
    t.setPositionLength(map.get(t.getOffset() + t.getLength()) - map.get(t.getOffset()));
  }
  Collections.reverse(pending);
}
