{
  SortValue[] sortValues=new SortValue[sortFields.length];
  IndexSchema schema=searcher.getSchema();
  for (int i=0; i < sortFields.length; ++i) {
    SortField sf=sortFields[i];
    String field=sf.getField();
    boolean reverse=sf.getReverse();
    SchemaField schemaField=schema.getField(field);
    FieldType ft=schemaField.getType();
    if (!schemaField.hasDocValues()) {
      throw new IOException(field + " must have DocValues to use this feature.");
    }
    if (ft instanceof TrieIntField) {
      if (reverse) {
        sortValues[i]=new IntValue(field,new IntDesc());
      }
 else {
        sortValues[i]=new IntValue(field,new IntAsc());
      }
    }
 else     if (ft instanceof TrieFloatField) {
      if (reverse) {
        sortValues[i]=new FloatValue(field,new FloatDesc());
      }
 else {
        sortValues[i]=new FloatValue(field,new FloatAsc());
      }
    }
 else     if (ft instanceof TrieDoubleField) {
      if (reverse) {
        sortValues[i]=new DoubleValue(field,new DoubleDesc());
      }
 else {
        sortValues[i]=new DoubleValue(field,new DoubleAsc());
      }
    }
 else     if (ft instanceof TrieLongField) {
      if (reverse) {
        sortValues[i]=new LongValue(field,new LongDesc());
      }
 else {
        sortValues[i]=new LongValue(field,new LongAsc());
      }
    }
 else     if (ft instanceof StrField) {
      LeafReader reader=searcher.getLeafReader();
      SortedDocValues vals=reader.getSortedDocValues(field);
      if (reverse) {
        sortValues[i]=new StringValue(vals,field,new IntDesc());
      }
 else {
        sortValues[i]=new StringValue(vals,field,new IntAsc());
      }
    }
 else     if (ft instanceof TrieDateField) {
      if (reverse) {
        sortValues[i]=new LongValue(field,new LongDesc());
      }
 else {
        sortValues[i]=new LongValue(field,new LongAsc());
      }
    }
 else     if (ft instanceof BoolField) {
      LeafReader reader=searcher.getLeafReader();
      SortedDocValues vals=reader.getSortedDocValues(field);
      if (reverse) {
        sortValues[i]=new StringValue(vals,field,new IntDesc());
      }
 else {
        sortValues[i]=new StringValue(vals,field,new IntAsc());
      }
    }
 else {
      throw new IOException("Sort fields must be one of the following types: int,float,long,double,string,date,boolean");
    }
  }
  if (sortValues.length == 1) {
    return new SingleValueSortDoc(sortValues[0]);
  }
 else   if (sortValues.length == 2) {
    return new DoubleValueSortDoc(sortValues[0],sortValues[1]);
  }
 else   if (sortValues.length == 3) {
    return new TripleValueSortDoc(sortValues[0],sortValues[1],sortValues[2]);
  }
 else   if (sortValues.length == 4) {
    return new QuadValueSortDoc(sortValues[0],sortValues[1],sortValues[2],sortValues[3]);
  }
 else {
    throw new IOException("A max of 4 sorts can be specified");
  }
}
