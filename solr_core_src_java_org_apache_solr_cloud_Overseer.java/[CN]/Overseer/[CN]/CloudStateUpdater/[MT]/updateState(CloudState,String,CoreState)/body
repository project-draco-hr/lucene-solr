{
  String collection=coreState.getCollectionName();
  String zkCoreNodeName=coreState.getCoreNodeName();
  if (!state.getCollections().contains(coreState.getCollectionName()) && coreState.getNumShards() != null) {
    state=createCollection(state,collection,coreState.getNumShards());
  }
  String shardId=coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);
  if (shardId == null) {
    shardId=getAssignedId(state,nodeName,coreState);
  }
  if (shardId == null) {
    shardId=AssignShard.assignShard(collection,state,coreState.getNumShards());
  }
  Map<String,String> props=new HashMap<String,String>();
  Map<String,String> coreProps=new HashMap<String,String>(coreState.getProperties().size());
  coreProps.putAll(coreState.getProperties());
  coreProps.remove("num_shards");
  for (  Entry<String,String> entry : coreProps.entrySet()) {
    props.put(entry.getKey(),entry.getValue());
  }
  ZkNodeProps zkProps=new ZkNodeProps(props);
  Slice slice=state.getSlice(collection,shardId);
  Map<String,ZkNodeProps> shardProps;
  if (slice == null) {
    shardProps=new HashMap<String,ZkNodeProps>();
  }
 else {
    shardProps=state.getSlice(collection,shardId).getShardsCopy();
  }
  shardProps.put(zkCoreNodeName,zkProps);
  slice=new Slice(shardId,shardProps);
  CloudState newCloudState=updateSlice(state,collection,slice);
  return newCloudState;
}
