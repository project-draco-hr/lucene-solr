{
  final String coreNodeName=message.getStr(ZkStateReader.NODE_NAME_PROP) + "_" + message.getStr(ZkStateReader.CORE_NAME_PROP);
  final String collection=message.getStr(ZkStateReader.COLLECTION_PROP);
  final LinkedHashMap<String,Map<String,Slice>> newStates=new LinkedHashMap<String,Map<String,Slice>>();
  for (  String collectionName : clusterState.getCollections()) {
    if (collection.equals(collectionName)) {
      Map<String,Slice> slices=clusterState.getSlices(collection);
      LinkedHashMap<String,Slice> newSlices=new LinkedHashMap<String,Slice>();
      for (      Slice slice : slices.values()) {
        if (slice.getReplicasMap().containsKey(coreNodeName)) {
          LinkedHashMap<String,Replica> newShards=new LinkedHashMap<String,Replica>();
          newShards.putAll(slice.getReplicasMap());
          newShards.remove(coreNodeName);
          Slice newSlice=new Slice(slice.getName(),newShards);
          newSlices.put(slice.getName(),newSlice);
        }
 else {
          newSlices.put(slice.getName(),slice);
        }
      }
      int cnt=0;
      for (      Slice slice : newSlices.values()) {
        cnt+=slice.getReplicasMap().size();
      }
      if (cnt > 0) {
        newStates.put(collectionName,newSlices);
      }
 else {
        try {
          zkClient.clean("/collections/" + collectionName);
        }
 catch (        InterruptedException e) {
          SolrException.log(log,"Cleaning up collection in zk was interrupted:" + collectionName,e);
          Thread.currentThread().interrupt();
        }
catch (        KeeperException e) {
          SolrException.log(log,"Problem cleaning up collection in zk:" + collectionName,e);
        }
      }
    }
 else {
      newStates.put(collectionName,clusterState.getSlices(collectionName));
    }
  }
  ClusterState newState=new ClusterState(clusterState.getLiveNodes(),newStates);
  return newState;
}
