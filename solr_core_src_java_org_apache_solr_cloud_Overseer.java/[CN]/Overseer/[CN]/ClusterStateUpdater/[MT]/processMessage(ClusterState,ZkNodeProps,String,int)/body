{
  log.info("processMessage: queueSize: {}, message = {}",queueSize,message);
  CollectionParams.CollectionAction collectionAction=CollectionParams.CollectionAction.get(operation);
  if (collectionAction != null) {
switch (collectionAction) {
case CREATE:
      return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState,message);
case DELETE:
    return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState,message);
case CREATESHARD:
  return new CollectionMutator(getZkStateReader()).createShard(clusterState,message);
case DELETESHARD:
return new CollectionMutator(getZkStateReader()).deleteShard(clusterState,message);
case ADDREPLICA:
return new SliceMutator(getZkStateReader()).addReplica(clusterState,message);
case CLUSTERPROP:
handleProp(message);
case ADDREPLICAPROP:
return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState,message);
case DELETEREPLICAPROP:
return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState,message);
case BALANCESHARDUNIQUE:
ExclusiveSliceProperty dProp=new ExclusiveSliceProperty(this,clusterState,message);
if (dProp.balanceProperty()) {
String collName=message.getStr(ZkStateReader.COLLECTION_PROP);
return new ZkWriteCommand(collName,dProp.getDocCollection());
}
break;
default :
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
}
 else {
OverseerAction overseerAction=OverseerAction.get(operation);
if (overseerAction != null) {
switch (overseerAction) {
case STATE:
return new ReplicaMutator(getZkStateReader()).setState(clusterState,message);
case LEADER:
return new SliceMutator(getZkStateReader()).setShardLeader(clusterState,message);
case DELETECORE:
return new SliceMutator(getZkStateReader()).removeReplica(clusterState,message);
case ADDROUTINGRULE:
return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState,message);
case REMOVEROUTINGRULE:
return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState,message);
case UPDATESHARDSTATE:
return new SliceMutator(getZkStateReader()).updateShardState(clusterState,message);
case QUIT:
if (myId.equals(message.get("id"))) {
log.info("Quit command received {}",LeaderElector.getNodeName(myId));
overseerCollectionProcessor.close();
close();
}
 else {
log.warn("Overseer received wrong QUIT message {}",message);
}
break;
default :
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
}
 else {
switch (operation) {
case OverseerCollectionProcessor.CREATECOLLECTION:
return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState,message);
case REMOVECOLLECTION:
return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState,message);
case REMOVESHARD:
return new CollectionMutator(getZkStateReader()).deleteShard(clusterState,message);
default :
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
}
}
return ZkStateWriter.NO_OP;
}
