{
  log.info("Create collection {} with shards {}",collectionName,shards);
  Map<String,Object> routerSpec=DocRouter.getRouterSpec(message);
  String routerName=routerSpec.get("name") == null ? DocRouter.DEFAULT_NAME : (String)routerSpec.get("name");
  DocRouter router=DocRouter.getDocRouter(routerName);
  List<DocRouter.Range> ranges=router.partitionRange(shards.size(),router.fullRange());
  Map<String,Slice> newSlices=new LinkedHashMap<>();
  for (int i=0; i < shards.size(); i++) {
    String sliceName=shards.get(i);
    Map<String,Object> sliceProps=new LinkedHashMap<>(1);
    sliceProps.put(Slice.RANGE,ranges == null ? null : ranges.get(i));
    newSlices.put(sliceName,new Slice(sliceName,null,sliceProps));
  }
  Map<String,Object> collectionProps=new HashMap<>();
  for (  Entry<String,Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {
    Object val=message.get(e.getKey());
    if (val == null) {
      val=OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());
    }
    if (val != null)     collectionProps.put(e.getKey(),val);
  }
  collectionProps.put(DocCollection.DOC_ROUTER,routerSpec);
  if (message.getStr("fromApi") == null)   collectionProps.put("autoCreated","true");
  DocCollection newCollection=new DocCollection(collectionName,newSlices,collectionProps,router);
  return newState(state,singletonMap(newCollection.getName(),newCollection));
}
