{
  CollectionParams.CollectionAction collectionAction=CollectionParams.CollectionAction.get(operation);
  if (collectionAction != null) {
switch (collectionAction) {
case CREATE:
      return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState,message));
case DELETE:
    return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState,message));
case CREATESHARD:
  return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState,message));
case DELETESHARD:
return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState,message));
case ADDREPLICA:
return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState,message));
case ADDREPLICAPROP:
return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState,message));
case DELETEREPLICAPROP:
return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState,message));
case BALANCESHARDUNIQUE:
ExclusiveSliceProperty dProp=new ExclusiveSliceProperty(clusterState,message);
if (dProp.balanceProperty()) {
String collName=message.getStr(ZkStateReader.COLLECTION_PROP);
return Collections.singletonList(new ZkWriteCommand(collName,dProp.getDocCollection()));
}
break;
case MODIFYCOLLECTION:
CollectionsHandler.verifyRuleParams(zkController.getCoreContainer(),message.getProperties());
return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));
case MIGRATESTATEFORMAT:
return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState,message));
default :
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
}
 else {
OverseerAction overseerAction=OverseerAction.get(operation);
if (overseerAction == null) {
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
switch (overseerAction) {
case STATE:
return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState,message));
case LEADER:
return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState,message));
case DELETECORE:
return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState,message));
case ADDROUTINGRULE:
return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState,message));
case REMOVEROUTINGRULE:
return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState,message));
case UPDATESHARDSTATE:
return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState,message));
case QUIT:
if (myId.equals(message.get("id"))) {
log.info("Quit command received {}",LeaderElector.getNodeName(myId));
overseerCollectionConfigSetProcessor.close();
close();
}
 else {
log.warn("Overseer received wrong QUIT message {}",message);
}
break;
case DOWNNODE:
return new NodeMutator(getZkStateReader()).downNode(clusterState,message);
default :
throw new RuntimeException("unknown operation:" + operation + " contents:"+ message.getProperties());
}
}
return Collections.singletonList(ZkStateWriter.NO_OP);
}
