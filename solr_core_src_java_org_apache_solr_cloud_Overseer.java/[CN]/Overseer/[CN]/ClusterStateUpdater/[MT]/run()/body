{
  LeaderStatus isLeader=amILeader();
  while (isLeader == LeaderStatus.DONT_KNOW) {
    log.debug("am_i_leader unclear {}",isLeader);
    isLeader=amILeader();
  }
  if (!this.isClosed && LeaderStatus.YES == isLeader) {
synchronized (reader.getUpdateLock()) {
      try {
        byte[] head=workQueue.peek();
        if (head != null) {
          reader.updateClusterState(true);
          ClusterState clusterState=reader.getClusterState();
          log.info("Replaying operations from work queue.");
          ZkStateWriter zkStateWriter=new ZkStateWriter(reader,stats);
          while (head != null) {
            isLeader=amILeader();
            if (LeaderStatus.NO == isLeader) {
              break;
            }
 else             if (LeaderStatus.YES == isLeader) {
              final ZkNodeProps message=ZkNodeProps.load(head);
              log.info("processMessage: queueSize: {}, message = {}",workQueue.getStats().getQueueLength(),message);
              clusterState=processQueueItem(message,clusterState,zkStateWriter);
              workQueue.poll();
            }
 else {
              log.info("am_i_leader unclear {}",isLeader);
            }
            head=workQueue.peek();
          }
          clusterState=zkStateWriter.writePendingUpdates();
        }
      }
 catch (      KeeperException e) {
        if (e.code() == KeeperException.Code.SESSIONEXPIRED) {
          log.warn("Solr cannot talk to ZK, exiting Overseer work queue loop",e);
          return;
        }
        log.error("Exception in Overseer work queue loop",e);
      }
catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
catch (      Exception e) {
        log.error("Exception in Overseer work queue loop",e);
      }
    }
  }
  log.info("Starting to work on the main queue");
  try {
    ZkStateWriter zkStateWriter=new ZkStateWriter(reader,stats);
    ClusterState clusterState=null;
    boolean refreshClusterState=true;
    while (!this.isClosed) {
      isLeader=amILeader();
      if (LeaderStatus.NO == isLeader) {
        break;
      }
 else       if (LeaderStatus.YES != isLeader) {
        log.debug("am_i_leader unclear {}",isLeader);
        continue;
      }
      DistributedQueue.QueueEvent head=null;
      try {
        head=stateUpdateQueue.peek(true);
      }
 catch (      KeeperException e) {
        if (e.code() == KeeperException.Code.SESSIONEXPIRED) {
          log.warn("Solr cannot talk to ZK, exiting Overseer main queue loop",e);
          return;
        }
        log.error("Exception in Overseer main queue loop",e);
      }
catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
catch (      Exception e) {
        log.error("Exception in Overseer main queue loop",e);
      }
synchronized (reader.getUpdateLock()) {
        try {
          if (refreshClusterState) {
            reader.updateClusterState(true);
            clusterState=reader.getClusterState();
            refreshClusterState=false;
            byte[] data=workQueue.peek();
            boolean hadWorkItems=data != null;
            while (data != null) {
              final ZkNodeProps message=ZkNodeProps.load(data);
              log.info("processMessage: queueSize: {}, message = {}",workQueue.getStats().getQueueLength(),message);
              clusterState=processQueueItem(message,clusterState,zkStateWriter);
              workQueue.poll();
              data=workQueue.peek();
            }
            if (hadWorkItems) {
              clusterState=zkStateWriter.writePendingUpdates();
            }
          }
          while (head != null) {
            final ZkNodeProps message=ZkNodeProps.load(head.getBytes());
            log.info("processMessage: queueSize: {}, message = {} current state version: {}",stateUpdateQueue.getStats().getQueueLength(),message,clusterState.getZkClusterStateVersion());
            clusterState=processQueueItem(message,clusterState,zkStateWriter);
            workQueue.offer(head.getBytes());
            stateUpdateQueue.poll();
            if (isClosed)             break;
            head=stateUpdateQueue.peek(100);
          }
          clusterState=zkStateWriter.writePendingUpdates();
          while (workQueue.poll() != null)           ;
        }
 catch (        KeeperException e) {
          if (e.code() == KeeperException.Code.SESSIONEXPIRED) {
            log.warn("Solr cannot talk to ZK, exiting Overseer main queue loop",e);
            return;
          }
          log.error("Exception in Overseer main queue loop",e);
          refreshClusterState=true;
        }
catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
catch (        Exception e) {
          log.error("Exception in Overseer main queue loop",e);
          refreshClusterState=true;
        }
      }
    }
  }
  finally {
    log.info("Overseer Loop exiting : {}",LeaderElector.getNodeName(myId));
    new Thread("OverseerExitThread"){
      @Override public void run(){
        checkIfIamStillLeader();
      }
    }
.start();
  }
}
