{
  final String collection=message.getStr(ZkStateReader.COLLECTION_PROP);
  final String zkCoreNodeName=message.getStr(ZkStateReader.NODE_NAME_PROP) + "_" + message.getStr(ZkStateReader.CORE_NAME_PROP);
  Integer numShards=message.getStr(ZkStateReader.NUM_SHARDS_PROP) != null ? Integer.parseInt(message.getStr(ZkStateReader.NUM_SHARDS_PROP)) : null;
  log.info("Update state numShards={} message={}",numShards,message);
  boolean collectionExists=state.getCollections().contains(collection);
  if (!collectionExists && numShards != null) {
    state=createCollection(state,collection,numShards);
  }
  String sliceName=message.getStr(ZkStateReader.SHARD_ID_PROP);
  if (sliceName == null) {
    String nodeName=message.getStr(ZkStateReader.NODE_NAME_PROP);
    sliceName=getAssignedId(state,nodeName,message);
    if (sliceName != null) {
      log.info("shard=" + sliceName + " is already registered");
    }
  }
  if (sliceName == null) {
    if (collectionExists) {
      numShards=state.getCollectionStates().get(collection).getSlices().size();
      log.info("Collection already exists with " + ZkStateReader.NUM_SHARDS_PROP + "="+ numShards);
    }
    sliceName=AssignShard.assignShard(collection,state,numShards);
    log.info("Assigning new node to shard shard=" + sliceName);
  }
  Slice slice=state.getSlice(collection,sliceName);
  Map<String,Object> replicaProps=new LinkedHashMap<String,Object>();
  replicaProps.putAll(message.getProperties());
  if (slice != null) {
    Replica oldReplica=slice.getReplicasMap().get(zkCoreNodeName);
    if (oldReplica != null && oldReplica.containsKey(ZkStateReader.LEADER_PROP)) {
      replicaProps.put(ZkStateReader.LEADER_PROP,oldReplica.get(ZkStateReader.LEADER_PROP));
    }
  }
  replicaProps.remove(ZkStateReader.NUM_SHARDS_PROP);
  replicaProps.remove(QUEUE_OPERATION);
  Replica replica=new Replica(zkCoreNodeName,replicaProps);
  Map<String,Object> sliceProps=null;
  Map<String,Replica> replicas;
  if (slice != null) {
    sliceProps=slice.getProperties();
    replicas=slice.getReplicasCopy();
  }
 else {
    replicas=new HashMap<String,Replica>(1);
  }
  replicas.put(replica.getName(),replica);
  slice=new Slice(sliceName,replicas,sliceProps);
  ClusterState newClusterState=updateSlice(state,collection,slice);
  return newClusterState;
}
