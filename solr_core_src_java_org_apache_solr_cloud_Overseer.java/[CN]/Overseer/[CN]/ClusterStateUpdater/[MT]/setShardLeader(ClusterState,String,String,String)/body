{
  DocCollection coll=state.getCollectionOrNull(collectionName);
  if (coll == null) {
    log.error("Could not mark shard leader for non existing collection:" + collectionName);
    return state;
  }
  Map<String,Slice> slices=coll.getSlicesMap();
  slices=new LinkedHashMap<>(slices);
  Slice slice=slices.get(sliceName);
  if (slice == null) {
    slice=coll.getSlice(sliceName);
  }
  if (slice == null) {
    log.error("Could not mark leader for non existing/active slice:" + sliceName);
    return state;
  }
 else {
    Replica oldLeader=slice.getLeader();
    final Map<String,Replica> newReplicas=new LinkedHashMap<>();
    for (    Replica replica : slice.getReplicas()) {
      String coreURL=ZkCoreNodeProps.getCoreUrl(replica.getStr(ZkStateReader.BASE_URL_PROP),replica.getStr(ZkStateReader.CORE_NAME_PROP));
      if (replica == oldLeader && !coreURL.equals(leaderUrl)) {
        Map<String,Object> replicaProps=new LinkedHashMap<>(replica.getProperties());
        replicaProps.remove(Slice.LEADER);
        replica=new Replica(replica.getName(),replicaProps);
      }
 else       if (coreURL.equals(leaderUrl)) {
        Map<String,Object> replicaProps=new LinkedHashMap<>(replica.getProperties());
        replicaProps.put(Slice.LEADER,"true");
        replica=new Replica(replica.getName(),replicaProps);
      }
      newReplicas.put(replica.getName(),replica);
    }
    Map<String,Object> newSliceProps=slice.shallowCopy();
    newSliceProps.put(Slice.REPLICAS,newReplicas);
    Slice newSlice=new Slice(slice.getName(),newReplicas,slice.getProperties());
    slices.put(newSlice.getName(),newSlice);
  }
  DocCollection newCollection=coll.copyWith(slices);
  return newState(state,singletonMap(collectionName,newCollection));
}
