{
  if (collectCurrentPropStats() == false) {
    return false;
  }
  removeOverallocatedReplicas();
  for (  Map.Entry<String,List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {
    for (    SliceReplica srHosting : entProp.getValue()) {
      removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());
    }
  }
  for (  Map.Entry<String,List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {
    ListIterator<SliceReplica> iter=ent.getValue().listIterator();
    while (iter.hasNext()) {
      SliceReplica sr=iter.next();
      shardsNeedingHosts.add(sr.slice.getName());
    }
  }
  balanceUnassignedReplicas();
  for (  Slice newSlice : changedSlices.values()) {
    DocCollection docCollection=CollectionMutator.updateSlice(collectionName,clusterState.getCollection(collectionName),newSlice);
    clusterState=ClusterStateMutator.newState(clusterState,collectionName,docCollection);
  }
  return true;
}
