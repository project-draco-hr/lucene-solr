{
  tmpMaxPropPerNode=origMaxPropPerNode;
  tmpModulo=origModulo;
  while (shardsNeedingHosts.size() > 0) {
    String nodeName="";
    int minSize=Integer.MAX_VALUE;
    SliceReplica srToChange=null;
    for (    String slice : shardsNeedingHosts) {
      for (      Map.Entry<String,List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {
        if (srToChange == null && ent.getValue().size() > 0) {
          srToChange=ent.getValue().get(0);
        }
        ListIterator<SliceReplica> iter=ent.getValue().listIterator();
        while (iter.hasNext()) {
          SliceReplica sr=iter.next();
          if (StringUtils.equals(slice,sr.slice.getName()) == false) {
            continue;
          }
          if (nodesHostingProp.containsKey(ent.getKey()) == false) {
            nodesHostingProp.put(ent.getKey(),new ArrayList<SliceReplica>());
          }
          if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {
            minSize=nodesHostingReplicas.get(ent.getKey()).size();
            srToChange=sr;
            nodeName=ent.getKey();
          }
        }
      }
    }
    shardsNeedingHosts.remove(srToChange.slice.getName());
    if (nodesHostingProp.containsKey(nodeName) == false) {
      nodesHostingProp.put(nodeName,new ArrayList<SliceReplica>());
    }
    nodesHostingProp.get(nodeName).add(srToChange);
    adjustLimits(nodesHostingProp.get(nodeName));
    removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());
    addProp(srToChange.slice,srToChange.replica.getName());
  }
}
