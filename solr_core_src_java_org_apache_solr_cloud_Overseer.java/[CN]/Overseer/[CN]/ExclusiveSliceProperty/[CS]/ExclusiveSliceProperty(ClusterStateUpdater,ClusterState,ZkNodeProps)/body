{
  this.updater=updater;
  this.clusterState=clusterState;
  String tmp=message.getStr(ZkStateReader.PROPERTY_PROP);
  if (StringUtils.startsWith(tmp,OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {
    tmp=OverseerCollectionProcessor.COLL_PROP_PREFIX + tmp;
  }
  this.property=tmp.toLowerCase(Locale.ROOT);
  collectionName=message.getStr(ZkStateReader.COLLECTION_PROP);
  if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Overseer '" + message.getStr(QUEUE_OPERATION) + "'  requires both the '"+ ZkStateReader.COLLECTION_PROP+ "' and '"+ ZkStateReader.PROPERTY_PROP+ "' parameters. No action taken ");
  }
  Boolean sliceUnique=Boolean.parseBoolean(message.getStr(SLICE_UNIQUE));
  if (sliceUnique == false && Overseer.sliceUniqueBooleanProperties.contains(this.property) == false) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Balancing properties amongst replicas in a slice requires that" + " the property be a pre-defined property (e.g. 'preferredLeader') or that 'sliceUnique' be set to 'true' " + " Property: " + this.property + " sliceUnique: "+ Boolean.toString(sliceUnique));
  }
  collection=clusterState.getCollection(collectionName);
  if (collection == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Could not find collection ' " + collectionName + "' for overseer operation '"+ message.getStr(QUEUE_OPERATION)+ "'. No action taken.");
  }
  onlyActiveNodes=Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES,"true"));
}
