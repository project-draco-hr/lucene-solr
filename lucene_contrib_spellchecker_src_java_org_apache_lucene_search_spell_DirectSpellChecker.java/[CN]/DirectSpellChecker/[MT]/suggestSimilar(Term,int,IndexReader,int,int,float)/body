{
  AttributeSource atts=new AttributeSource();
  MultiTermQuery.MaxNonCompetitiveBoostAttribute maxBoostAtt=atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);
  FuzzyTermsEnum e=new FuzzyTermsEnum(ir,atts,term,editDistance,Math.max(minPrefix,editDistance - 1));
  final PriorityQueue<ScoreTerm> stQueue=new PriorityQueue<ScoreTerm>();
  BytesRef queryTerm=new BytesRef(term.text());
  BytesRef candidateTerm;
  ScoreTerm st=new ScoreTerm();
  MultiTermQuery.BoostAttribute boostAtt=e.attributes().addAttribute(MultiTermQuery.BoostAttribute.class);
  while ((candidateTerm=e.next()) != null) {
    final float boost=boostAtt.getBoost();
    if (stQueue.size() >= numSug && boost <= stQueue.peek().boost)     continue;
    if (queryTerm.bytesEquals(candidateTerm))     continue;
    int df=e.docFreq();
    if (df <= docfreq)     continue;
    final float score;
    final String termAsString;
    if (distance == INTERNAL_LEVENSHTEIN) {
      termAsString=null;
      score=boost / e.getScaleFactor() + e.getMinSimilarity();
    }
 else {
      termAsString=candidateTerm.utf8ToString();
      score=distance.getDistance(term.text(),termAsString);
    }
    if (score < accuracy)     continue;
    st.term=new BytesRef(candidateTerm);
    st.boost=boost;
    st.docfreq=df;
    st.termAsString=termAsString;
    st.score=score;
    stQueue.offer(st);
    st=(stQueue.size() > numSug) ? stQueue.poll() : new ScoreTerm();
    maxBoostAtt.setMaxNonCompetitiveBoost((stQueue.size() >= numSug) ? stQueue.peek().boost : Float.NEGATIVE_INFINITY);
  }
  return stQueue;
}
