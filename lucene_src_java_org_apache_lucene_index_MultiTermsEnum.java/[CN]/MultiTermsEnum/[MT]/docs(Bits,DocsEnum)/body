{
  final MultiDocsEnum docsEnum;
  if (reuse != null) {
    docsEnum=(MultiDocsEnum)reuse;
  }
 else {
    docsEnum=new MultiDocsEnum();
  }
  final MultiBits multiSkipDocs;
  if (skipDocs instanceof MultiBits) {
    multiSkipDocs=(MultiBits)skipDocs;
  }
 else {
    multiSkipDocs=null;
  }
  int upto=0;
  for (int i=0; i < numTop; i++) {
    final TermsEnumWithSlice entry=top[i];
    final Bits b;
    if (multiSkipDocs != null) {
      final MultiBits.SubResult sub=multiSkipDocs.getMatchingSub(entry.subSlice);
      if (sub.matches) {
        b=sub.result;
      }
 else {
        b=new BitsSlice(skipDocs,entry.subSlice);
      }
    }
 else     if (skipDocs != null) {
      b=new BitsSlice(skipDocs,entry.subSlice);
    }
 else {
      b=null;
    }
    final DocsEnum subDocsEnum=entry.terms.docs(b,entry.reuseDocs);
    if (subDocsEnum != null) {
      entry.reuseDocs=subDocs[upto].docsEnum=subDocsEnum;
      subDocs[upto].slice=entry.subSlice;
      upto++;
    }
  }
  if (upto == 0) {
    return null;
  }
 else {
    return docsEnum.reset(subDocs,upto);
  }
}
