{
  buf.offset=buf.length=0;
  int maxBytesNeeded=5 * values.length;
  if (buf.bytes.length < maxBytesNeeded) {
    buf.grow(maxBytesNeeded);
  }
  int upto=values.offset + values.length;
  int prev=0;
  for (int i=values.offset; i < upto; i++) {
    int value=values.ints[i] - prev;
    if ((value & ~0x7F) == 0) {
      buf.bytes[buf.length]=(byte)value;
      buf.length++;
    }
 else     if ((value & ~0x3FFF) == 0) {
      buf.bytes[buf.length]=(byte)(0x80 | ((value & 0x3F80) >> 7));
      buf.bytes[buf.length + 1]=(byte)(value & 0x7F);
      buf.length+=2;
    }
 else     if ((value & ~0x1FFFFF) == 0) {
      buf.bytes[buf.length]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
      buf.bytes[buf.length + 1]=(byte)(0x80 | ((value & 0x3F80) >> 7));
      buf.bytes[buf.length + 2]=(byte)(value & 0x7F);
      buf.length+=3;
    }
 else     if ((value & ~0xFFFFFFF) == 0) {
      buf.bytes[buf.length]=(byte)(0x80 | ((value & 0xFE00000) >> 21));
      buf.bytes[buf.length + 1]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
      buf.bytes[buf.length + 2]=(byte)(0x80 | ((value & 0x3F80) >> 7));
      buf.bytes[buf.length + 3]=(byte)(value & 0x7F);
      buf.length+=4;
    }
 else {
      buf.bytes[buf.length]=(byte)(0x80 | ((value & 0xF0000000) >> 28));
      buf.bytes[buf.length + 1]=(byte)(0x80 | ((value & 0xFE00000) >> 21));
      buf.bytes[buf.length + 2]=(byte)(0x80 | ((value & 0x1FC000) >> 14));
      buf.bytes[buf.length + 3]=(byte)(0x80 | ((value & 0x3F80) >> 7));
      buf.bytes[buf.length + 4]=(byte)(value & 0x7F);
      buf.length+=5;
    }
    prev=values.ints[i];
  }
}
