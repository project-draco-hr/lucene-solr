{
  return new LeafReader(){
    @Override public void addCoreClosedListener(    CoreClosedListener listener){
    }
    @Override public void removeCoreClosedListener(    CoreClosedListener listener){
    }
    @Override public Fields fields() throws IOException {
      return new Fields(){
        @Override public Iterator<String> iterator(){
          return Collections.<String>emptyList().iterator();
        }
        @Override public Terms terms(        String field) throws IOException {
          return null;
        }
        @Override public int size(){
          return 0;
        }
      }
;
    }
    @Override public NumericDocValues getNumericDocValues(    String field) throws IOException {
      return null;
    }
    @Override public BinaryDocValues getBinaryDocValues(    String field) throws IOException {
      return null;
    }
    @Override public SortedDocValues getSortedDocValues(    String field) throws IOException {
      return null;
    }
    @Override public SortedNumericDocValues getSortedNumericDocValues(    String field) throws IOException {
      return null;
    }
    @Override public SortedSetDocValues getSortedSetDocValues(    String field) throws IOException {
      return null;
    }
    @Override public NumericDocValues getNormValues(    String field) throws IOException {
      return null;
    }
    @Override public FieldInfos getFieldInfos(){
      return new FieldInfos(new FieldInfo[0]);
    }
    final Bits liveDocs=new Bits.MatchNoBits(maxDoc);
    @Override public Bits getLiveDocs(){
      return liveDocs;
    }
    @Override public PointValues getPointValues(){
      return null;
    }
    @Override public void checkIntegrity() throws IOException {
    }
    @Override public Fields getTermVectors(    int docID) throws IOException {
      return null;
    }
    @Override public int numDocs(){
      return 0;
    }
    @Override public int maxDoc(){
      return maxDoc;
    }
    @Override public void document(    int docID,    StoredFieldVisitor visitor) throws IOException {
    }
    @Override protected void doClose() throws IOException {
    }
    @Override public Sort getIndexSort(){
      return null;
    }
  }
;
}
