{
  Directory dir=newDirectory();
  RandomIndexWriter riw=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())));
  int docCount=atLeast(10000);
  for (int i=0; i < docCount; i++) {
    Document doc=new Document();
    doc.add(newField("field","a",TextField.TYPE_NOT_STORED));
    riw.addDocument(doc);
  }
  riw.forceMerge(1);
  IndexReader r=riw.getReader();
  riw.close();
  IndexSearcher s=newSearcher(r);
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.add(new TermQuery(new Term("field","a")),BooleanClause.Occur.SHOULD);
  bq.add(new TermQuery(new Term("field","a")),BooleanClause.Occur.SHOULD);
  Weight w=s.createNormalizedWeight(bq.build(),true);
  assertEquals(1,s.getIndexReader().leaves().size());
  BulkScorer scorer=w.bulkScorer(s.getIndexReader().leaves().get(0));
  final FixedBitSet hits=new FixedBitSet(docCount);
  final AtomicInteger end=new AtomicInteger();
  LeafCollector c=new SimpleCollector(){
    @Override public void collect(    int doc){
      assertTrue("collected doc=" + doc + " beyond max="+ end,doc < end.intValue());
      hits.set(doc);
    }
    @Override public boolean needsScores(){
      return false;
    }
  }
;
  while (end.intValue() < docCount) {
    final int min=end.intValue();
    final int inc=TestUtil.nextInt(random(),1,1000);
    final int max=end.addAndGet(inc);
    scorer.score(c,null,min,max);
  }
  assertEquals(docCount,hits.cardinality());
  r.close();
  dir.close();
}
