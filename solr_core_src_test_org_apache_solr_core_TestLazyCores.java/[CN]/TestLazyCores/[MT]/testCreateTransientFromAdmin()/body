{
  final CoreContainer cc=init();
  try {
    copyMinConf(new File(solrHomeDirectory,"core1"));
    copyMinConf(new File(solrHomeDirectory,"core2"));
    copyMinConf(new File(solrHomeDirectory,"core3"));
    copyMinConf(new File(solrHomeDirectory,"core4"));
    copyMinConf(new File(solrHomeDirectory,"core5"));
    createViaAdmin(cc,"core1",true,true);
    createViaAdmin(cc,"core2",true,false);
    createViaAdmin(cc,"core3",true,true);
    createViaAdmin(cc,"core4",true,false);
    createViaAdmin(cc,"core5",true,false);
    final SolrCore c1=cc.getCore("core1");
    final SolrCore c2=cc.getCore("core2");
    final SolrCore c3=cc.getCore("core3");
    final SolrCore c4=cc.getCore("core4");
    final SolrCore c5=cc.getCore("core5");
    checkNotInCores(cc,"core1","collection2","collection3","collection4","collection6","collection7","collection8","collection9");
    checkInCores(cc,"collection1","collection5","core2","core3","core4","core5");
class TestThread extends Thread {
      @Override public void run(){
        final int sleep_millis=random().nextInt(1000);
        try {
          if (sleep_millis > 0) {
            if (VERBOSE) {
              System.out.println("TestLazyCores.testCreateTransientFromAdmin Thread.run sleeping for " + sleep_millis + " ms");
            }
            Thread.sleep(sleep_millis);
          }
        }
 catch (        InterruptedException ie) {
          if (VERBOSE) {
            System.out.println("TestLazyCores.testCreateTransientFromAdmin Thread.run caught " + ie + " whilst sleeping for "+ sleep_millis+ " ms");
          }
        }
        c1.close();
        c2.close();
        c3.close();
        c4.close();
        c5.close();
      }
    }
    ;
    final TestThread cThread=new TestThread();
    cThread.start();
    unloadViaAdmin(cc,"core1");
    unloadViaAdmin(cc,"core2");
    unloadViaAdmin(cc,"core3");
    unloadViaAdmin(cc,"core4");
    unloadViaAdmin(cc,"core5");
    cThread.join();
  }
  finally {
    cc.shutdown();
  }
}
