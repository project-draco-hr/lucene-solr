{
  writeField(fieldInfo,new PointReader(){
    @Override public void intersect(    String fieldName,    IntersectVisitor mergedVisitor) throws IOException {
      if (fieldName.equals(fieldInfo.name) == false) {
        throw new IllegalArgumentException("field name must match the field being merged");
      }
      for (int i=0; i < mergeState.pointReaders.length; i++) {
        PointReader pointReader=mergeState.pointReaders[i];
        if (pointReader == null) {
          continue;
        }
        MergeState.DocMap docMap=mergeState.docMaps[i];
        int docBase=mergeState.docBase[i];
        pointReader.intersect(fieldInfo.name,new IntersectVisitor(){
          @Override public void visit(          int docID){
            throw new IllegalStateException();
          }
          @Override public void visit(          int docID,          byte[] packedValue) throws IOException {
            int newDocID=docMap.get(docID);
            if (newDocID != -1) {
              mergedVisitor.visit(docBase + newDocID,packedValue);
            }
          }
          @Override public Relation compare(          byte[] minPackedValue,          byte[] maxPackedValue){
            return Relation.CELL_CROSSES_QUERY;
          }
        }
);
      }
    }
    @Override public void checkIntegrity(){
      throw new UnsupportedOperationException();
    }
    @Override public long ramBytesUsed(){
      return 0L;
    }
    @Override public void close(){
    }
    @Override public byte[] getMinPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public byte[] getMaxPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getNumDimensions(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getBytesPerDimension(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public long size(    String fieldName){
      throw new UnsupportedOperationException();
    }
  }
);
}
