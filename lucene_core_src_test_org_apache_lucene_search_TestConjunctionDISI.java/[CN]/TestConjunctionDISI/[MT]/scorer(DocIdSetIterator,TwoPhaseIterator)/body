{
  return new Scorer(null){
    @Override public TwoPhaseIterator asTwoPhaseIterator(){
      return twoPhaseIterator;
    }
    @Override public int docID(){
      if (twoPhaseIterator != null) {
        throw new UnsupportedOperationException("ConjunctionDISI should call the two-phase iterator");
      }
      return it.docID();
    }
    @Override public int nextDoc() throws IOException {
      if (twoPhaseIterator != null) {
        throw new UnsupportedOperationException("ConjunctionDISI should call the two-phase iterator");
      }
      return it.nextDoc();
    }
    @Override public int advance(    int target) throws IOException {
      if (twoPhaseIterator != null) {
        throw new UnsupportedOperationException("ConjunctionDISI should call the two-phase iterator");
      }
      return it.advance(target);
    }
    @Override public long cost(){
      if (twoPhaseIterator != null) {
        throw new UnsupportedOperationException("ConjunctionDISI should call the two-phase iterator");
      }
      return it.cost();
    }
    @Override public float score() throws IOException {
      return 0;
    }
    @Override public int freq() throws IOException {
      return 0;
    }
  }
;
}
