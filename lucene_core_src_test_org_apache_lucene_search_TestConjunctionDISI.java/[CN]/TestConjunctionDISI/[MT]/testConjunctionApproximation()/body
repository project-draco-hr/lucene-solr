{
  final int iters=atLeast(100);
  for (int iter=0; iter < iters; ++iter) {
    final int maxDoc=TestUtil.nextInt(random(),100,10000);
    final int numIterators=TestUtil.nextInt(random(),2,5);
    final FixedBitSet[] sets=new FixedBitSet[numIterators];
    final Scorer[] iterators=new Scorer[numIterators];
    boolean hasApproximation=false;
    for (int i=0; i < iterators.length; ++i) {
      final FixedBitSet set=randomSet(maxDoc);
      if (random().nextBoolean()) {
        sets[i]=set;
        iterators[i]=new ConstantScoreScorer(null,0f,new BitDocIdSet(set).iterator());
      }
 else {
        final FixedBitSet confirmed=clearRandomBits(set);
        sets[i]=confirmed;
        final TwoPhaseIterator approximation=approximation(new BitDocIdSet(set).iterator(),confirmed);
        iterators[i]=scorer(approximation);
        hasApproximation=true;
      }
    }
    final ConjunctionDISI conjunction=ConjunctionDISI.intersectScorers(Arrays.asList(iterators));
    TwoPhaseIterator twoPhaseIterator=conjunction.asTwoPhaseIterator();
    assertEquals(hasApproximation,twoPhaseIterator != null);
    if (hasApproximation) {
      assertEquals(intersect(sets),toBitSet(maxDoc,TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));
    }
  }
}
