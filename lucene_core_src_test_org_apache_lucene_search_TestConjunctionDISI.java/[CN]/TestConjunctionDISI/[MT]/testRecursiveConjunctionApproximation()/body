{
  final int iters=atLeast(100);
  for (int iter=0; iter < iters; ++iter) {
    final int maxDoc=TestUtil.nextInt(random(),100,10000);
    final int numIterators=TestUtil.nextInt(random(),2,5);
    final FixedBitSet[] sets=new FixedBitSet[numIterators];
    DocIdSetIterator conjunction=null;
    boolean hasApproximation=false;
    for (int i=0; i < numIterators; ++i) {
      final FixedBitSet set=randomSet(maxDoc);
      final DocIdSetIterator newIterator;
      if (random().nextBoolean()) {
        sets[i]=set;
        newIterator=new BitDocIdSet(set).iterator();
      }
 else {
        final FixedBitSet confirmed=clearRandomBits(set);
        sets[i]=confirmed;
        final TwoPhaseDocIdSetIterator approximation=approximation(new BitDocIdSet(set).iterator(),confirmed);
        newIterator=scorer(approximation);
        hasApproximation=true;
      }
      if (conjunction == null) {
        conjunction=newIterator;
      }
 else {
        final ConjunctionDISI conj=ConjunctionDISI.intersect(Arrays.asList(conjunction,newIterator));
        conjunction=scorer(conj,conj.asTwoPhaseIterator());
      }
    }
    TwoPhaseDocIdSetIterator twoPhaseIterator=((Scorer)conjunction).asTwoPhaseIterator();
    assertEquals(hasApproximation,twoPhaseIterator != null);
    if (hasApproximation) {
      assertEquals(intersect(sets),toBitSet(maxDoc,TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));
    }
 else {
      assertEquals(intersect(sets),toBitSet(maxDoc,conjunction));
    }
  }
}
