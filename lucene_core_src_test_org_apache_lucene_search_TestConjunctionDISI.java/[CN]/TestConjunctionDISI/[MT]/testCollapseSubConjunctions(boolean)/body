{
  final int iters=atLeast(100);
  for (int iter=0; iter < iters; ++iter) {
    final int maxDoc=TestUtil.nextInt(random(),100,10000);
    final int numIterators=TestUtil.nextInt(random(),5,10);
    final FixedBitSet[] sets=new FixedBitSet[numIterators];
    final List<DocIdSetIterator> iterators=new LinkedList<>();
    for (int i=0; i < numIterators; ++i) {
      final FixedBitSet set=randomSet(maxDoc);
      if (random().nextBoolean()) {
        sets[i]=set;
        iterators.add(new BitDocIdSet(set).iterator());
      }
 else {
        final FixedBitSet confirmed=clearRandomBits(set);
        sets[i]=confirmed;
        final TwoPhaseIterator approximation=approximation(new BitDocIdSet(set).iterator(),confirmed);
        iterators.add(scorer(approximation));
      }
    }
    final int subIters=atLeast(3);
    for (int subIter=0; subIter < subIters && iterators.size() > 3; ++subIter) {
      final int subSeqStart=TestUtil.nextInt(random(),0,iterators.size() - 2);
      final int subSeqEnd=TestUtil.nextInt(random(),subSeqStart + 2,iterators.size());
      List<DocIdSetIterator> subIterators=iterators.subList(subSeqStart,subSeqEnd);
      DocIdSetIterator subConjunction;
      if (wrapWithScorer) {
        subConjunction=new ConjunctionScorer(null,subIterators,Collections.emptyList());
      }
 else {
        subConjunction=ConjunctionDISI.intersect(subIterators);
      }
      iterators.set(subSeqStart,subConjunction);
      int toRemove=subSeqEnd - subSeqStart - 1;
      while (toRemove-- > 0) {
        iterators.remove(subSeqStart + 1);
      }
    }
    if (iterators.size() == 1) {
      iterators.add(DocIdSetIterator.all(maxDoc));
    }
    final ConjunctionDISI conjunction=ConjunctionDISI.intersect(iterators);
    assertEquals(intersect(sets),toBitSet(maxDoc,conjunction));
  }
}
