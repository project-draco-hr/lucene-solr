{
  maybeYield();
  if (failOnOpenInput) {
    maybeThrowDeterministicException();
  }
  if (!delegate.fileExists(name)) {
    throw new FileNotFoundException(name + " in dir=" + delegate);
  }
  if (openFilesForWrite.contains(name) && !name.startsWith("segments")) {
    throw fillOpenTrace(new IOException("MockDirectoryWrapper: file \"" + name + "\" is still open for writing"),name,false);
  }
  IndexInput delegateInput=delegate.openInput(name,LuceneTestCase.newIOContext(randomState,context));
  final IndexInput ii;
  int randomInt=randomState.nextInt(500);
  if (randomInt == 0) {
    ii=new SlowClosingMockIndexInputWrapper(this,name,delegateInput);
  }
 else   if (randomInt == 1) {
    ii=new SlowOpeningMockIndexInputWrapper(this,name,delegateInput);
  }
 else {
    ii=new MockIndexInputWrapper(this,name,delegateInput);
  }
  addFileHandle(ii,name,Handle.Input);
  return ii;
}
