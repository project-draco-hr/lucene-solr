{
  maybeThrowDeterministicException();
  maybeThrowIOExceptionOnOpen("temp: prefix=" + prefix + " suffix="+ suffix);
  maybeYield();
  if (failOnCreateOutput) {
    maybeThrowDeterministicException();
  }
  if (crashed) {
    throw new IOException("cannot createTempOutput after crash");
  }
  init();
  IndexOutput delegateOutput=in.createTempOutput(prefix,suffix,LuceneTestCase.newIOContext(randomState,context));
  String name=delegateOutput.getName();
  if (name.toLowerCase(Locale.ROOT).endsWith(".tmp") == false) {
    throw new IllegalStateException("wrapped directory failed to use .tmp extension: got: " + name);
  }
  unSyncedFiles.add(name);
  createdFiles.add(name);
  final IndexOutput io=new MockIndexOutputWrapper(this,delegateOutput,name);
  addFileHandle(io,name,Handle.Output);
  openFilesForWrite.add(name);
  if (throttling == Throttling.ALWAYS || (throttling == Throttling.SOMETIMES && randomState.nextInt(200) == 0)) {
    if (LuceneTestCase.VERBOSE) {
      System.out.println("MockDirectoryWrapper: throttling indexOutput (" + name + ")");
    }
    return throttledOutput.newFromDelegate(io);
  }
 else {
    return io;
  }
}
