{
  final NumericDocValues arr=DocValues.getNumeric(readerContext.reader(),field);
  return new IntDocValues(this){
    final MutableValueInt val=new MutableValueInt();
    int lastDocID;
    private int getValueForDoc(    int doc) throws IOException {
      if (doc < lastDocID) {
        throw new IllegalArgumentException("docs were sent out-of-order: lastDocID=" + lastDocID + " vs docID="+ doc);
      }
      lastDocID=doc;
      int curDocID=arr.docID();
      if (doc > curDocID) {
        curDocID=arr.advance(doc);
      }
      if (doc == curDocID) {
        return (int)arr.longValue();
      }
 else {
        return 0;
      }
    }
    @Override public int intVal(    int doc) throws IOException {
      return getValueForDoc(doc);
    }
    @Override public String strVal(    int doc) throws IOException {
      return Integer.toString(intVal(doc));
    }
    @Override public boolean exists(    int doc) throws IOException {
      getValueForDoc(doc);
      return arr.docID() == doc;
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueInt mval=new MutableValueInt();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc) throws IOException {
          mval.value=getValueForDoc(doc);
          mval.exists=arr.docID() == doc;
        }
      }
;
    }
  }
;
}
