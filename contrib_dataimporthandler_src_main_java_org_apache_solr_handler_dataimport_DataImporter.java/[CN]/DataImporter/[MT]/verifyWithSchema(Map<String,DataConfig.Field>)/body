{
  List<String> errors=new ArrayList<String>();
  Map<String,SchemaField> schemaFields=schema.getFields();
  for (  Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {
    SchemaField sf=entry.getValue();
    if (!fields.containsKey(sf.getName())) {
      if (sf.isRequired()) {
        LOG.info(sf.getName() + " is a required field in SolrSchema . But not found in DataConfig");
      }
    }
  }
  for (  Map.Entry<String,DataConfig.Field> entry : fields.entrySet()) {
    DataConfig.Field fld=entry.getValue();
    FieldType fieldType=null;
    try {
      fieldType=schema.getDynamicFieldType(fld.name);
    }
 catch (    RuntimeException ex) {
    }
    if (fld.name != null) {
      if (schema.getFields().get(fld.name) == null && fieldType == null) {
        errors.add("The field :" + fld.name + " present in DataConfig does not have a counterpart in Solr Schema");
      }
    }
 else     if (schema.getFields().get(fld.column) == null && fieldType == null) {
      LOG.info("Column : " + fld.column + " is not a schema field");
    }
  }
  if (!errors.isEmpty()) {
    StringBuffer sb=new StringBuffer("There are errors in the Schema\n");
    for (    String error : errors) {
      sb.append(error).append("\n");
    }
    return sb.toString();
  }
  return null;
}
