{
  List<String> errors=new ArrayList<String>();
  Map<String,SchemaField> schemaFields=schema.getFields();
  for (  Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {
    SchemaField sf=entry.getValue();
    if (!fields.containsKey(sf.getName())) {
      if (sf.isRequired()) {
        LOG.info(sf.getName() + " is a required field in SolrSchema . But not found in DataConfig");
      }
    }
  }
  for (  Map.Entry<String,DataConfig.Field> entry : fields.entrySet()) {
    DataConfig.Field fld=entry.getValue();
    SchemaField field=schema.getFieldOrNull(fld.getName());
    if (field == null) {
      field=config.lowerNameVsSchemaField.get(fld.getName().toLowerCase());
      if (field == null) {
        errors.add("The field :" + fld.getName() + " present in DataConfig does not have a counterpart in Solr Schema");
      }
    }
  }
  if (!errors.isEmpty()) {
    StringBuilder sb=new StringBuilder("There are errors in the Schema\n");
    for (    String error : errors) {
      sb.append(error).append("\n");
    }
    return sb.toString();
  }
  return null;
}
