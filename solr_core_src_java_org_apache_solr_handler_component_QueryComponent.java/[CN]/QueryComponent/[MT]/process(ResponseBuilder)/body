{
  LOG.debug("process: {}",rb.req.getParams());
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  SolrIndexSearcher searcher=req.getSearcher();
  StatsCache statsCache=req.getCore().getStatsCache();
  int purpose=params.getInt(ShardParams.SHARDS_PURPOSE,ShardRequest.PURPOSE_GET_TOP_IDS);
  if ((purpose & ShardRequest.PURPOSE_GET_TERM_STATS) != 0) {
    statsCache.returnLocalStats(rb,searcher);
    return;
  }
  if ((purpose & ShardRequest.PURPOSE_SET_TERM_STATS) != 0) {
    statsCache.receiveGlobalStats(req);
  }
  SolrQueryResponse rsp=rb.rsp;
  IndexSchema schema=searcher.getSchema();
  String ids=params.get(ShardParams.IDS);
  if (ids != null) {
    SchemaField idField=schema.getUniqueKeyField();
    List<String> idArr=StrUtils.splitSmart(ids,",",true);
    int[] luceneIds=new int[idArr.size()];
    int docs=0;
    for (int i=0; i < idArr.size(); i++) {
      int id=searcher.getFirstMatch(new Term(idField.getName(),idField.getType().toInternal(idArr.get(i))));
      if (id >= 0)       luceneIds[docs++]=id;
    }
    DocListAndSet res=new DocListAndSet();
    res.docList=new DocSlice(0,docs,luceneIds,null,docs,0);
    if (rb.isNeedDocSet()) {
      List<Query> queries=new ArrayList<>();
      queries.add(rb.getQuery());
      List<Query> filters=rb.getFilters();
      if (filters != null)       queries.addAll(filters);
      res.docSet=searcher.getDocSet(queries);
    }
    rb.setResults(res);
    ResultContext ctx=new BasicResultContext(rb);
    rsp.addResponse(ctx);
    return;
  }
  long timeAllowed=params.getLong(CommonParams.TIME_ALLOWED,-1L);
  if (null != rb.getCursorMark() && 0 < timeAllowed) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Can not search using both " + CursorMarkParams.CURSOR_MARK_PARAM + " and "+ CommonParams.TIME_ALLOWED);
  }
  QueryCommand cmd=rb.getQueryCommand();
  cmd.setTimeAllowed(timeAllowed);
  req.getContext().put(SolrIndexSearcher.STATS_SOURCE,statsCache.get(req));
  QueryResult result=new QueryResult();
  GroupingSpecification groupingSpec=rb.getGroupingSpec();
  if (groupingSpec != null) {
    try {
      boolean needScores=(cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;
      if (params.getBool(GroupParams.GROUP_DISTRIBUTED_FIRST,false)) {
        CommandHandler.Builder topsGroupsActionBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setNeedDocSet(false).setIncludeHitCount(true).setSearcher(searcher);
        for (        String field : groupingSpec.getFields()) {
          topsGroupsActionBuilder.addCommandField(new SearchGroupsFieldCommand.Builder().setField(schema.getField(field)).setGroupSort(groupingSpec.getGroupSort()).setTopNGroups(cmd.getOffset() + cmd.getLen()).setIncludeGroupCount(groupingSpec.isIncludeGroupCount()).build());
        }
        CommandHandler commandHandler=topsGroupsActionBuilder.build();
        commandHandler.execute();
        SearchGroupsResultTransformer serializer=new SearchGroupsResultTransformer(searcher);
        rsp.add("firstPhase",commandHandler.processResult(result,serializer));
        rsp.add("totalHitCount",commandHandler.getTotalHitCount());
        rb.setResult(result);
        return;
      }
 else       if (params.getBool(GroupParams.GROUP_DISTRIBUTED_SECOND,false)) {
        CommandHandler.Builder secondPhaseBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0).setSearcher(searcher);
        for (        String field : groupingSpec.getFields()) {
          SchemaField schemaField=schema.getField(field);
          String[] topGroupsParam=params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);
          if (topGroupsParam == null) {
            topGroupsParam=new String[0];
          }
          List<SearchGroup<BytesRef>> topGroups=new ArrayList<>(topGroupsParam.length);
          for (          String topGroup : topGroupsParam) {
            SearchGroup<BytesRef> searchGroup=new SearchGroup<>();
            if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {
              searchGroup.groupValue=new BytesRef(schemaField.getType().readableToIndexed(topGroup));
            }
            topGroups.add(searchGroup);
          }
          secondPhaseBuilder.addCommandField(new TopGroupsFieldCommand.Builder().setField(schemaField).setGroupSort(groupingSpec.getGroupSort()).setSortWithinGroup(groupingSpec.getSortWithinGroup()).setFirstPhaseGroups(topGroups).setMaxDocPerGroup(groupingSpec.getGroupOffset() + groupingSpec.getGroupLimit()).setNeedScores(needScores).setNeedMaxScore(needScores).build());
        }
        for (        String query : groupingSpec.getQueries()) {
          secondPhaseBuilder.addCommandField(new Builder().setDocsToCollect(groupingSpec.getOffset() + groupingSpec.getLimit()).setSort(groupingSpec.getGroupSort()).setQuery(query,rb.req).setDocSet(searcher).build());
        }
        CommandHandler commandHandler=secondPhaseBuilder.build();
        commandHandler.execute();
        TopGroupsResultTransformer serializer=new TopGroupsResultTransformer(rb);
        rsp.add("secondPhase",commandHandler.processResult(result,serializer));
        rb.setResult(result);
        return;
      }
      int maxDocsPercentageToCache=params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE,0);
      boolean cacheSecondPassSearch=maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;
      Grouping.TotalCount defaultTotalCount=groupingSpec.isIncludeGroupCount() ? Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;
      int limitDefault=cmd.getLen();
      Grouping grouping=new Grouping(searcher,result,cmd,cacheSecondPassSearch,maxDocsPercentageToCache,groupingSpec.isMain());
      grouping.setGroupSort(groupingSpec.getGroupSort()).setWithinGroupSort(groupingSpec.getSortWithinGroup()).setDefaultFormat(groupingSpec.getResponseFormat()).setLimitDefault(limitDefault).setDefaultTotalCount(defaultTotalCount).setDocsPerGroupDefault(groupingSpec.getGroupLimit()).setGroupOffsetDefault(groupingSpec.getGroupOffset()).setGetGroupedDocSet(groupingSpec.isTruncateGroups());
      if (groupingSpec.getFields() != null) {
        for (        String field : groupingSpec.getFields()) {
          grouping.addFieldCommand(field,rb.req);
        }
      }
      if (groupingSpec.getFunctions() != null) {
        for (        String groupByStr : groupingSpec.getFunctions()) {
          grouping.addFunctionCommand(groupByStr,rb.req);
        }
      }
      if (groupingSpec.getQueries() != null) {
        for (        String groupByStr : groupingSpec.getQueries()) {
          grouping.addQueryCommand(groupByStr,rb.req);
        }
      }
      if (rb.doHighlights || rb.isDebug() || params.getBool(MoreLikeThisParams.MLT,false)) {
        cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);
      }
      grouping.execute();
      if (grouping.isSignalCacheWarning()) {
        rsp.add("cacheWarning",String.format(Locale.ROOT,"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.",maxDocsPercentageToCache));
      }
      rb.setResult(result);
      if (grouping.mainResult != null) {
        ResultContext ctx=new BasicResultContext(rb,grouping.mainResult);
        rsp.addResponse(ctx);
        rsp.getToLog().add("hits",grouping.mainResult.matches());
      }
 else       if (!grouping.getCommands().isEmpty()) {
        rsp.add("grouped",result.groupedResults);
        rsp.getToLog().add("hits",grouping.getCommands().get(0).getMatches());
      }
      return;
    }
 catch (    SyntaxError e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
    }
  }
  searcher.search(result,cmd);
  rb.setResult(result);
  ResultContext ctx=new BasicResultContext(rb);
  rsp.addResponse(ctx);
  rsp.getToLog().add("hits",rb.getResults().docList.matches());
  if (!rb.req.getParams().getBool(ShardParams.IS_SHARD,false)) {
    if (null != rb.getNextCursorMark()) {
      rb.rsp.add(CursorMarkParams.CURSOR_MARK_NEXT,rb.getNextCursorMark().getSerializedTotem());
    }
  }
  if (rb.mergeFieldHandler != null) {
    rb.mergeFieldHandler.handleMergeFields(rb,searcher);
  }
 else {
    doFieldSortValues(rb,searcher);
  }
  doPrefetch(rb);
}
