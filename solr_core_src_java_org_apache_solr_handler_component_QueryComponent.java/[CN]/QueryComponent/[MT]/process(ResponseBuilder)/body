{
  SolrQueryRequest req=rb.req;
  SolrQueryResponse rsp=rb.rsp;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  SolrIndexSearcher searcher=req.getSearcher();
  if (rb.getQueryCommand().getOffset() < 0) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"'start' parameter cannot be negative");
  }
  long timeAllowed=(long)params.getInt(CommonParams.TIME_ALLOWED,-1);
  String ids=params.get(ShardParams.IDS);
  if (ids != null) {
    SchemaField idField=req.getSchema().getUniqueKeyField();
    List<String> idArr=StrUtils.splitSmart(ids,",",true);
    int[] luceneIds=new int[idArr.size()];
    int docs=0;
    for (int i=0; i < idArr.size(); i++) {
      int id=req.getSearcher().getFirstMatch(new Term(idField.getName(),idField.getType().toInternal(idArr.get(i))));
      if (id >= 0)       luceneIds[docs++]=id;
    }
    DocListAndSet res=new DocListAndSet();
    res.docList=new DocSlice(0,docs,luceneIds,null,docs,0);
    if (rb.isNeedDocSet()) {
      List<Query> queries=new ArrayList<Query>();
      queries.add(rb.getQuery());
      List<Query> filters=rb.getFilters();
      if (filters != null)       queries.addAll(filters);
      res.docSet=searcher.getDocSet(queries);
    }
    rb.setResults(res);
    ResultContext ctx=new ResultContext();
    ctx.docs=rb.getResults().docList;
    ctx.query=null;
    rsp.add("response",ctx);
    return;
  }
  SolrIndexSearcher.QueryCommand cmd=rb.getQueryCommand();
  cmd.setTimeAllowed(timeAllowed);
  SolrIndexSearcher.QueryResult result=new SolrIndexSearcher.QueryResult();
  boolean doGroup=params.getBool(GroupParams.GROUP,false);
  if (doGroup) {
    try {
      int maxDocsPercentageToCache=params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE,0);
      boolean cacheSecondPassSearch=maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;
      String[] fields=params.getParams(GroupParams.GROUP_FIELD);
      String[] funcs=params.getParams(GroupParams.GROUP_FUNC);
      String[] queries=params.getParams(GroupParams.GROUP_QUERY);
      String groupSortStr=params.get(GroupParams.GROUP_SORT);
      boolean main=params.getBool(GroupParams.GROUP_MAIN,false);
      String formatStr=params.get(GroupParams.GROUP_FORMAT,Grouping.Format.grouped.name());
      Grouping.Format defaultFormat;
      try {
        defaultFormat=Grouping.Format.valueOf(formatStr);
      }
 catch (      IllegalArgumentException e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format("Illegal %s parameter",GroupParams.GROUP_FORMAT));
      }
      boolean includeTotalGroupCount=params.getBool(GroupParams.GROUP_TOTAL_COUNT,false);
      Grouping.TotalCount defaultTotalCount=includeTotalGroupCount ? Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;
      Sort sort=searcher.weightSort(cmd.getSort());
      Sort groupSort=groupSortStr == null ? sort : searcher.weightSort(QueryParsing.parseSort(groupSortStr,req));
      int limitDefault=cmd.getLen();
      int groupOffsetDefault=params.getInt(GroupParams.GROUP_OFFSET,0);
      int docsPerGroupDefault=params.getInt(GroupParams.GROUP_LIMIT,1);
      Grouping grouping=new Grouping(searcher,result,cmd,cacheSecondPassSearch,maxDocsPercentageToCache,main);
      grouping.setSort(sort).setGroupSort(groupSort).setDefaultFormat(defaultFormat).setLimitDefault(limitDefault).setDefaultTotalCount(defaultTotalCount).setDocsPerGroupDefault(docsPerGroupDefault).setGroupOffsetDefault(groupOffsetDefault);
      if (fields != null) {
        for (        String field : fields) {
          grouping.addFieldCommand(field,rb.req);
        }
      }
      if (funcs != null) {
        for (        String groupByStr : funcs) {
          grouping.addFunctionCommand(groupByStr,rb.req);
        }
      }
      if (queries != null) {
        for (        String groupByStr : queries) {
          grouping.addQueryCommand(groupByStr,rb.req);
        }
      }
      if (rb.doHighlights || rb.isDebug()) {
        cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);
      }
      grouping.execute();
      if (grouping.isSignalCacheWarning()) {
        rsp.add("cacheWarning",String.format("Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.",maxDocsPercentageToCache));
      }
      rb.setResult(result);
      rsp.add("grouped",result.groupedResults);
      if (grouping.mainResult != null) {
        ResultContext ctx=new ResultContext();
        ctx.docs=grouping.mainResult;
        ctx.query=null;
        rsp.add("response",ctx);
        rsp.getToLog().add("hits",grouping.mainResult.matches());
      }
 else       if (!grouping.getCommands().isEmpty()) {
        rsp.getToLog().add("hits",grouping.getCommands().get(0).getMatches());
      }
      return;
    }
 catch (    ParseException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
    }
  }
  searcher.search(result,cmd);
  rb.setResult(result);
  ResultContext ctx=new ResultContext();
  ctx.docs=rb.getResults().docList;
  ctx.query=rb.getQuery();
  rsp.add("response",ctx);
  rsp.getToLog().add("hits",rb.getResults().docList.matches());
  doFieldSortValues(rb,searcher);
  doPrefetch(rb);
}
