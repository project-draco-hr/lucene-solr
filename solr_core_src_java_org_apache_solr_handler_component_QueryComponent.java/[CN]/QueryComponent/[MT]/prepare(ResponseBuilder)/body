{
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  SolrQueryResponse rsp=rb.rsp;
  ReturnFields returnFields=new ReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  rb.setFieldFlags(flags);
  String defType=params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
  String queryString=rb.getQueryString();
  if (queryString == null) {
    queryString=params.get(CommonParams.Q);
    rb.setQueryString(queryString);
  }
  try {
    QParser parser=QParser.getParser(rb.getQueryString(),defType,req);
    Query q=parser.getQuery();
    if (q == null) {
      q=new BooleanQuery();
    }
    rb.setQuery(q);
    rb.setSortSpec(parser.getSort(true));
    rb.setQparser(parser);
    rb.setScoreDoc(parser.getPaging());
    String[] fqs=req.getParams().getParams(CommonParams.FQ);
    if (fqs != null && fqs.length != 0) {
      List<Query> filters=rb.getFilters();
      if (filters == null) {
        filters=new ArrayList<Query>(fqs.length);
      }
      for (      String fq : fqs) {
        if (fq != null && fq.trim().length() != 0) {
          QParser fqp=QParser.getParser(fq,null,req);
          filters.add(fqp.getQuery());
        }
      }
      if (!filters.isEmpty()) {
        rb.setFilters(filters);
      }
    }
  }
 catch (  ParseException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  boolean grouping=params.getBool(GroupParams.GROUP,false);
  if (!grouping) {
    return;
  }
  SolrIndexSearcher.QueryCommand cmd=rb.getQueryCommand();
  SolrIndexSearcher searcher=rb.req.getSearcher();
  GroupingSpecification groupingSpec=new GroupingSpecification();
  rb.setGroupingSpec(groupingSpec);
  Sort groupSort=searcher.weightSort(cmd.getSort());
  if (groupSort == null) {
    groupSort=Sort.RELEVANCE;
  }
  String groupSortStr=params.get(GroupParams.GROUP_SORT);
  Sort sortWithinGroup=groupSortStr == null ? groupSort : searcher.weightSort(QueryParsing.parseSort(groupSortStr,req));
  if (sortWithinGroup == null) {
    sortWithinGroup=Sort.RELEVANCE;
  }
  groupingSpec.setSortWithinGroup(sortWithinGroup);
  groupingSpec.setGroupSort(groupSort);
  String formatStr=params.get(GroupParams.GROUP_FORMAT,Grouping.Format.grouped.name());
  Grouping.Format responseFormat;
  try {
    responseFormat=Grouping.Format.valueOf(formatStr);
  }
 catch (  IllegalArgumentException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format("Illegal %s parameter",GroupParams.GROUP_FORMAT));
  }
  groupingSpec.setResponseFormat(responseFormat);
  groupingSpec.setFields(params.getParams(GroupParams.GROUP_FIELD));
  groupingSpec.setQueries(params.getParams(GroupParams.GROUP_QUERY));
  groupingSpec.setFunctions(params.getParams(GroupParams.GROUP_FUNC));
  groupingSpec.setGroupOffset(params.getInt(GroupParams.GROUP_OFFSET,0));
  groupingSpec.setGroupLimit(params.getInt(GroupParams.GROUP_LIMIT,1));
  groupingSpec.setOffset(rb.getSortSpec().getOffset());
  groupingSpec.setLimit(rb.getSortSpec().getCount());
  groupingSpec.setIncludeGroupCount(params.getBool(GroupParams.GROUP_TOTAL_COUNT,false));
  groupingSpec.setMain(params.getBool(GroupParams.GROUP_MAIN,false));
  groupingSpec.setNeedScore((cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0);
  groupingSpec.setTruncateGroups(params.getBool(GroupParams.GROUP_TRUNCATE,false));
}
