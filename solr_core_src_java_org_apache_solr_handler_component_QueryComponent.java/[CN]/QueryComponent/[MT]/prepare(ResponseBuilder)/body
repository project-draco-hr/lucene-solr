{
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  SolrQueryResponse rsp=rb.rsp;
  ReturnFields returnFields=new SolrReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  rb.setFieldFlags(flags);
  String defType=params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
  String queryString=rb.getQueryString();
  if (queryString == null) {
    queryString=params.get(CommonParams.Q);
    rb.setQueryString(queryString);
  }
  try {
    QParser parser=QParser.getParser(rb.getQueryString(),defType,req);
    Query q=parser.getQuery();
    if (q == null) {
      q=new MatchNoDocsQuery();
    }
    rb.setQuery(q);
    String rankQueryString=rb.req.getParams().get(CommonParams.RQ);
    if (rankQueryString != null) {
      QParser rqparser=QParser.getParser(rankQueryString,defType,req);
      Query rq=rqparser.getQuery();
      if (rq instanceof RankQuery) {
        RankQuery rankQuery=(RankQuery)rq;
        rb.setRankQuery(rankQuery);
        MergeStrategy mergeStrategy=rankQuery.getMergeStrategy();
        if (mergeStrategy != null) {
          rb.addMergeStrategy(mergeStrategy);
          if (mergeStrategy.handlesMergeFields()) {
            rb.mergeFieldHandler=mergeStrategy;
          }
        }
      }
 else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"rq parameter must be a RankQuery");
      }
    }
    rb.setSortSpec(parser.getSort(true));
    rb.setQparser(parser);
    final String cursorStr=rb.req.getParams().get(CursorMarkParams.CURSOR_MARK_PARAM);
    if (null != cursorStr) {
      final CursorMark cursorMark=new CursorMark(rb.req.getSchema(),rb.getSortSpec());
      cursorMark.parseSerializedTotem(cursorStr);
      rb.setCursorMark(cursorMark);
    }
    String[] fqs=req.getParams().getParams(CommonParams.FQ);
    if (fqs != null && fqs.length != 0) {
      List<Query> filters=rb.getFilters();
      filters=filters == null ? new ArrayList<Query>(fqs.length) : new ArrayList<>(filters);
      for (      String fq : fqs) {
        if (fq != null && fq.trim().length() != 0) {
          QParser fqp=QParser.getParser(fq,null,req);
          filters.add(fqp.getQuery());
        }
      }
      if (!filters.isEmpty()) {
        rb.setFilters(filters);
      }
    }
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  if (params.getBool(GroupParams.GROUP,false)) {
    prepareGrouping(rb);
  }
 else {
    if (rb.getSortSpec().getCount() < 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"'rows' parameter cannot be negative");
    }
  }
  if (rb.getSortSpec().getOffset() < 0) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"'start' parameter cannot be negative");
  }
}
