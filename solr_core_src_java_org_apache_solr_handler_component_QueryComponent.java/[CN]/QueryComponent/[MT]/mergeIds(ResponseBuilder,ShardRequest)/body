{
  SortSpec ss=rb.getSortSpec();
  Sort sort=ss.getSort();
  SortField[] sortFields=null;
  if (sort != null)   sortFields=sort.getSort();
 else {
    sortFields=new SortField[]{SortField.FIELD_SCORE};
  }
  SchemaField uniqueKeyField=rb.req.getSchema().getUniqueKeyField();
  HashMap<Object,String> uniqueDoc=new HashMap<Object,String>();
  ShardFieldSortedHitQueue queue;
  queue=new ShardFieldSortedHitQueue(sortFields,ss.getOffset() + ss.getCount());
  NamedList<Object> shardInfo=null;
  if (rb.req.getParams().getBool(ShardParams.SHARDS_INFO,false)) {
    shardInfo=(NamedList<Object>)rb.rsp.getValues().get(ShardParams.SHARDS_INFO);
    if (shardInfo == null) {
      shardInfo=new SimpleOrderedMap<Object>();
      rb.rsp.getValues().add(ShardParams.SHARDS_INFO,shardInfo);
    }
  }
  long numFound=0;
  Float maxScore=null;
  for (  ShardResponse srsp : sreq.responses) {
    SolrDocumentList docs=(SolrDocumentList)srsp.getSolrResponse().getResponse().get("response");
    if (shardInfo != null) {
      SimpleOrderedMap<Object> nl=new SimpleOrderedMap<Object>();
      nl.add("numFound",docs.getNumFound());
      nl.add("maxScore",docs.getMaxScore());
      nl.add("time",srsp.getSolrResponse().getElapsedTime());
      shardInfo.add(srsp.getShard(),nl);
    }
    if (docs.getMaxScore() != null) {
      maxScore=maxScore == null ? docs.getMaxScore() : Math.max(maxScore,docs.getMaxScore());
    }
    numFound+=docs.getNumFound();
    NamedList sortFieldValues=(NamedList)(srsp.getSolrResponse().getResponse().get("sort_values"));
    for (int i=0; i < docs.size(); i++) {
      SolrDocument doc=docs.get(i);
      Object id=doc.getFieldValue(uniqueKeyField.getName());
      String prevShard=uniqueDoc.put(id,srsp.getShard());
      if (prevShard != null) {
        numFound--;
        continue;
      }
      ShardDoc shardDoc=new ShardDoc();
      shardDoc.id=id;
      shardDoc.shard=srsp.getShard();
      shardDoc.orderInShard=i;
      Object scoreObj=doc.getFieldValue("score");
      if (scoreObj != null) {
        if (scoreObj instanceof String) {
          shardDoc.score=Float.parseFloat((String)scoreObj);
        }
 else {
          shardDoc.score=(Float)scoreObj;
        }
      }
      shardDoc.sortFieldValues=sortFieldValues;
      queue.insertWithOverflow(shardDoc);
    }
  }
  int resultSize=queue.size() - ss.getOffset();
  resultSize=Math.max(0,resultSize);
  Map<Object,ShardDoc> resultIds=new HashMap<Object,ShardDoc>();
  for (int i=resultSize - 1; i >= 0; i--) {
    ShardDoc shardDoc=queue.pop();
    shardDoc.positionInResponse=i;
    resultIds.put(shardDoc.id.toString(),shardDoc);
  }
  SolrDocumentList responseDocs=new SolrDocumentList();
  if (maxScore != null)   responseDocs.setMaxScore(maxScore);
  responseDocs.setNumFound(numFound);
  responseDocs.setStart(ss.getOffset());
  for (int i=0; i < resultSize; i++)   responseDocs.add(null);
  rb.resultIds=resultIds;
  rb._responseDocs=responseDocs;
}
