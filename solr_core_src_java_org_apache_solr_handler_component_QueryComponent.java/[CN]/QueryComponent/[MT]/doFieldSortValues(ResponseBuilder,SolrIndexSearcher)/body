{
  SolrQueryRequest req=rb.req;
  SolrQueryResponse rsp=rb.rsp;
  final CharsRef spare=new CharsRef();
  boolean fsv=req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);
  if (fsv) {
    Sort sort=searcher.weightSort(rb.getSortSpec().getSort());
    SortField[] sortFields=sort == null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();
    NamedList<List> sortVals=new NamedList<List>();
    Field field=new StringField("dummy","");
    ReaderContext topReaderContext=searcher.getTopReaderContext();
    AtomicReaderContext[] leaves=ReaderUtil.leaves(topReaderContext);
    AtomicReaderContext currentLeaf=null;
    if (leaves.length == 1) {
      currentLeaf=leaves[0];
      leaves=null;
    }
    for (    SortField sortField : sortFields) {
      SortField.Type type=sortField.getType();
      if (type == SortField.Type.SCORE || type == SortField.Type.DOC)       continue;
      FieldComparator comparator=null;
      FieldComparator comparators[]=(leaves == null) ? null : new FieldComparator[leaves.length];
      String fieldname=sortField.getField();
      FieldType ft=fieldname == null ? null : req.getSchema().getFieldTypeNoEx(fieldname);
      DocList docList=rb.getResults().docList;
      List<Object> vals=new ArrayList<Object>(docList.size());
      DocIterator it=rb.getResults().docList.iterator();
      int idx=0;
      while (it.hasNext()) {
        int doc=it.nextDoc();
        if (leaves != null) {
          idx=ReaderUtil.subIndex(doc,leaves);
          currentLeaf=leaves[idx];
          comparator=comparators[idx];
        }
        if (comparator == null) {
          comparator=sortField.getComparator(1,0);
          comparator=comparator.setNextReader(currentLeaf);
          if (comparators != null)           comparators[idx]=comparator;
        }
        doc-=currentLeaf.docBase;
        comparator.copy(0,doc);
        Object val=comparator.value(0);
        if (val instanceof String) {
          field.setValue((String)val);
          val=ft.toObject(field);
        }
        if (val instanceof BytesRef) {
          field.setValue(((BytesRef)val).utf8ToChars(spare).toString());
          val=ft.toObject(field);
        }
        vals.add(val);
      }
      sortVals.add(fieldname,vals);
    }
    rsp.add("sort_values",sortVals);
  }
}
