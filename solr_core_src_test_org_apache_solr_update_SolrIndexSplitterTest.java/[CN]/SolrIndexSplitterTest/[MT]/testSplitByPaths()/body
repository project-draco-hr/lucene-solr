{
  LocalSolrQueryRequest request=null;
  try {
    String id1="dorothy";
    assertU(adoc("id",id1));
    String id2="kansas";
    assertU(adoc("id",id2));
    assertU(commit());
    assertJQ(req("q","*:*"),"/response/numFound==2");
    List<DocRouter.Range> ranges=getRanges(id1,id2);
    request=lrf.makeRequest("q","dummy");
    SplitIndexCommand command=new SplitIndexCommand(request,Lists.newArrayList(indexDir1.getAbsolutePath(),indexDir2.getAbsolutePath()),null,ranges,new PlainIdRouter());
    new SolrIndexSplitter(command).split();
    Directory directory=h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),DirectoryFactory.DirContext.DEFAULT,h.getCore().getSolrConfig().indexConfig.lockType);
    DirectoryReader reader=DirectoryReader.open(directory);
    assertEquals("id:dorothy should be present in split index1",1,reader.docFreq(new Term("id","dorothy")));
    assertEquals("id:kansas should not be present in split index1",0,reader.docFreq(new Term("id","kansas")));
    assertEquals("split index1 should have only one document",1,reader.numDocs());
    reader.close();
    h.getCore().getDirectoryFactory().release(directory);
    directory=h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),DirectoryFactory.DirContext.DEFAULT,h.getCore().getSolrConfig().indexConfig.lockType);
    reader=DirectoryReader.open(directory);
    assertEquals("id:dorothy should not be present in split index2",0,reader.docFreq(new Term("id","dorothy")));
    assertEquals("id:kansas should be present in split index2",1,reader.docFreq(new Term("id","kansas")));
    assertEquals("split index2 should have only one document",1,reader.numDocs());
    reader.close();
    h.getCore().getDirectoryFactory().release(directory);
  }
  finally {
    if (request != null)     request.close();
  }
}
