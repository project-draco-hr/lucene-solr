{
synchronized (this) {
    long now=System.nanoTime();
    float seconds=(now - previous) / 1000000000.0f;
    metricsRecord.setMetric("blockcache.hit",getPerSecond(blockCacheHit.getAndSet(0),seconds));
    metricsRecord.setMetric("blockcache.miss",getPerSecond(blockCacheMiss.getAndSet(0),seconds));
    metricsRecord.setMetric("blockcache.eviction",getPerSecond(blockCacheEviction.getAndSet(0),seconds));
    metricsRecord.setMetric("blockcache.size",blockCacheSize.get());
    metricsRecord.setMetric("row.reads",getPerSecond(rowReads.getAndSet(0),seconds));
    metricsRecord.setMetric("row.writes",getPerSecond(rowWrites.getAndSet(0),seconds));
    metricsRecord.setMetric("record.reads",getPerSecond(recordReads.getAndSet(0),seconds));
    metricsRecord.setMetric("record.writes",getPerSecond(recordWrites.getAndSet(0),seconds));
    metricsRecord.setMetric("query.external",getPerSecond(queriesExternal.getAndSet(0),seconds));
    metricsRecord.setMetric("query.internal",getPerSecond(queriesInternal.getAndSet(0),seconds));
    metricsRecord.setMetric("buffercache.allocations",getPerSecond(shardBuffercacheAllocate.getAndSet(0),seconds));
    metricsRecord.setMetric("buffercache.lost",getPerSecond(shardBuffercacheLost.getAndSet(0),seconds));
    for (    Entry<String,MethodCall> entry : methodCalls.entrySet()) {
      String key=entry.getKey();
      MethodCall value=entry.getValue();
      long invokes=value.invokes.getAndSet(0);
      long times=value.times.getAndSet(0);
      float avgTimes=(times / (float)invokes) / 1000000000.0f;
      metricsRecord.setMetric("methodcalls." + key + ".count",getPerSecond(invokes,seconds));
      metricsRecord.setMetric("methodcalls." + key + ".time",avgTimes);
    }
    metricsRecord.setMetric("tables",tableCount.get());
    metricsRecord.setMetric("rows",rowCount.get());
    metricsRecord.setMetric("records",recordCount.get());
    metricsRecord.setMetric("index.count",indexCount.get());
    metricsRecord.setMetric("index.memoryusage",indexMemoryUsage.get());
    metricsRecord.setMetric("index.segments",segmentCount.get());
    previous=now;
  }
  metricsRecord.update();
}
