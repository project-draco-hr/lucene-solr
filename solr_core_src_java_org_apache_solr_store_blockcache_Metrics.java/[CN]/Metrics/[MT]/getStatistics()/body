{
  NamedList<Number> stats=new NamedList<Number>();
  long now=System.nanoTime();
  float seconds=(now - previous) / 1000000000.0f;
  long hits=blockCacheHit.getAndSet(0);
  long lookups=hits + blockCacheMiss.getAndSet(0);
  stats.add("lookups",getPerSecond(lookups,seconds));
  stats.add("hits",getPerSecond(hits,seconds));
  stats.add("hitratio",calcHitRatio(lookups,hits));
  stats.add("evictions",getPerSecond(blockCacheEviction.getAndSet(0),seconds));
  stats.add("size",blockCacheSize.get());
  stats.add("row.reads",getPerSecond(rowReads.getAndSet(0),seconds));
  stats.add("row.writes",getPerSecond(rowWrites.getAndSet(0),seconds));
  stats.add("record.reads",getPerSecond(recordReads.getAndSet(0),seconds));
  stats.add("record.writes",getPerSecond(recordWrites.getAndSet(0),seconds));
  stats.add("query.external",getPerSecond(queriesExternal.getAndSet(0),seconds));
  stats.add("query.internal",getPerSecond(queriesInternal.getAndSet(0),seconds));
  stats.add("buffercache.allocations",getPerSecond(shardBuffercacheAllocate.getAndSet(0),seconds));
  stats.add("buffercache.lost",getPerSecond(shardBuffercacheLost.getAndSet(0),seconds));
  for (  Entry<String,MethodCall> entry : methodCalls.entrySet()) {
    String key=entry.getKey();
    MethodCall value=entry.getValue();
    long invokes=value.invokes.getAndSet(0);
    long times=value.times.getAndSet(0);
    float avgTimes=(times / (float)invokes) / 1000000000.0f;
    stats.add("methodcalls." + key + ".count",getPerSecond(invokes,seconds));
    stats.add("methodcalls." + key + ".time",avgTimes);
  }
  stats.add("tables",tableCount.get());
  stats.add("rows",rowCount.get());
  stats.add("records",recordCount.get());
  stats.add("index.count",indexCount.get());
  stats.add("index.memoryusage",indexMemoryUsage.get());
  stats.add("index.segments",segmentCount.get());
  previous=now;
  return stats;
}
