{
  super(PhraseQuery.this);
  final int[] positions=PhraseQuery.this.getPositions();
  if (positions.length < 2) {
    throw new IllegalStateException("PhraseWeight does not support less than 2 terms, call rewrite first");
  }
 else   if (positions[0] != 0) {
    throw new IllegalStateException("PhraseWeight requires that the first position is 0, call rewrite first");
  }
  this.needsScores=needsScores;
  this.similarity=searcher.getSimilarity(needsScores);
  final IndexReaderContext context=searcher.getTopReaderContext();
  states=new TermContext[terms.length];
  TermStatistics termStats[]=new TermStatistics[terms.length];
  for (int i=0; i < terms.length; i++) {
    final Term term=terms[i];
    states[i]=TermContext.build(context,term);
    termStats[i]=searcher.termStatistics(term,states[i]);
  }
  stats=similarity.computeWeight(searcher.collectionStatistics(field),termStats);
}
