{
  if (terms.length != positions.length) {
    throw new IllegalArgumentException("Must have as many terms as positions");
  }
  if (slop < 0) {
    throw new IllegalArgumentException("Slop must be >= 0, got " + slop);
  }
  for (int i=1; i < terms.length; ++i) {
    if (terms[i - 1].field().equals(terms[i].field()) == false) {
      throw new IllegalArgumentException("All terms should have the same field");
    }
  }
  for (  int position : positions) {
    if (position < 0) {
      throw new IllegalArgumentException("Positions must be >= 0, got " + position);
    }
  }
  for (int i=1; i < positions.length; ++i) {
    if (positions[i] < positions[i - 1]) {
      throw new IllegalArgumentException("Positions should not go backwards, got " + positions[i - 1] + " before "+ positions[i]);
    }
  }
  this.slop=slop;
  this.terms=terms;
  this.positions=positions;
  this.field=terms.length == 0 ? null : terms[0].field();
}
