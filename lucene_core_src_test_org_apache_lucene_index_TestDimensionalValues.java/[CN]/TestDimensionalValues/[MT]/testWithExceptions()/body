{
  int numDocs=atLeast(10000);
  int numBytesPerDim=TestUtil.nextInt(random(),2,30);
  int numDims=TestUtil.nextInt(random(),1,5);
  byte[][][] docValues=new byte[numDocs][][];
  for (int docID=0; docID < numDocs; docID++) {
    byte[][] values=new byte[numDims][];
    for (int dim=0; dim < numDims; dim++) {
      values[dim]=new byte[numBytesPerDim];
      random().nextBytes(values[dim]);
    }
    docValues[docID]=values;
  }
  double maxMBHeap=0.05;
  boolean done=false;
  while (done == false) {
    try (MockDirectoryWrapper dir=newMockFSDirectory(createTempDir())){
      try {
        dir.setRandomIOExceptionRate(0.05);
        dir.setRandomIOExceptionRateOnOpen(0.05);
        if (dir instanceof MockDirectoryWrapper) {
          dir.setEnableVirusScanner(false);
        }
        verify(dir,docValues,null,numDims,numBytesPerDim,50,maxMBHeap);
      }
 catch (      AssertionError ae) {
        if (ae.getMessage().contains("does not exist; files=")) {
          done=true;
        }
 else {
          throw ae;
        }
      }
catch (      IllegalArgumentException iae) {
        assertTrue(iae.getMessage().contains("either increase maxMBSortInHeap or decrease maxPointsInLeafNode"));
        System.out.println("  more heap");
        maxMBHeap*=1.25;
      }
catch (      IOException ioe) {
        if (ioe.getMessage().contains("a random IOException")) {
          done=true;
        }
 else {
          throw ioe;
        }
      }
    }
   }
}
