{
  Directory dir=getDirectory(20);
  IndexWriterConfig iwc=newIndexWriterConfig();
  IndexWriter w=new IndexWriter(dir,iwc);
  byte[] point=new byte[4];
  for (int i=0; i < 10; i++) {
    Document doc=new Document();
    BKDUtil.intToBytes(i,point,0);
    doc.add(new DimensionalField("dim",point));
    doc.add(new NumericDocValuesField("id",i));
    doc.add(newStringField("x","x",Field.Store.NO));
    w.addDocument(doc);
  }
  w.addDocument(new Document());
  w.deleteDocuments(new Term("x","x"));
  if (random().nextBoolean()) {
    w.forceMerge(1);
  }
  w.close();
  DirectoryReader r=DirectoryReader.open(dir);
  assertEquals(1,r.numDocs());
  DimensionalValues values=MultiDimensionalValues.get(r);
  Bits liveDocs=MultiFields.getLiveDocs(r);
  NumericDocValues idValues=MultiDocValues.getNumericValues(r,"id");
  if (values != null) {
    BitSet seen=new BitSet();
    values.intersect("dim",new IntersectVisitor(){
      @Override public Relation compare(      byte[] minPacked,      byte[] maxPacked){
        return Relation.QUERY_CROSSES_CELL;
      }
      public void visit(      int docID){
        throw new IllegalStateException();
      }
      public void visit(      int docID,      byte[] packedValue){
        if (liveDocs.get(docID)) {
          seen.set(docID);
        }
        assertEquals(idValues.get(docID),BKDUtil.bytesToInt(packedValue,0));
      }
    }
);
    assertEquals(0,seen.cardinality());
  }
  IOUtils.close(r,dir);
}
