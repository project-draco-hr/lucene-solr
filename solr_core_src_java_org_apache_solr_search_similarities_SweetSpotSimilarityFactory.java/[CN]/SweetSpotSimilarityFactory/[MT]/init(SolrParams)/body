{
  super.init(params);
  Integer ln_min=params.getInt("lengthNormMin");
  Integer ln_max=params.getInt("lengthNormMax");
  Float ln_steep=params.getFloat("lengthNormSteepness");
  if (!allOrNoneNull(ln_min,ln_max,ln_steep)) {
    throw new SolrException(SERVER_ERROR,"Overriding default lengthNorm settings requires all to be specified: lengthNormMin, lengthNormMax, lengthNormSteepness");
  }
  Float hyper_min=params.getFloat("hyperbolicTfMin");
  Float hyper_max=params.getFloat("hyperbolicTfMax");
  Double hyper_base=params.getDouble("hyperbolicTfBase");
  Float hyper_offset=params.getFloat("hyperbolicTfOffset");
  if (!allOrNoneNull(hyper_min,hyper_max,hyper_base,hyper_offset)) {
    throw new SolrException(SERVER_ERROR,"Overriding default hyperbolicTf settings requires all to be specified: hyperbolicTfMin, hyperbolicTfMax, hyperbolicTfBase, hyperbolicTfOffset");
  }
  Float baseline_base=params.getFloat("baselineTfBase");
  Float baseline_min=params.getFloat("baselineTfMin");
  if (!allOrNoneNull(baseline_min,baseline_base)) {
    throw new SolrException(SERVER_ERROR,"Overriding default baselineTf settings requires all to be specified: baselineTfBase, baselineTfMin");
  }
  if ((null != hyper_min) && (null != baseline_min)) {
    throw new SolrException(SERVER_ERROR,"Can not mix hyperbolicTf settings with baselineTf settings");
  }
  sim=(null != hyper_min) ? new HyperbolicSweetSpotSimilarity() : new SweetSpotSimilarity();
  if (null != ln_min) {
    sim.setLengthNormFactors(ln_min,ln_max,ln_steep,this.discountOverlaps);
  }
  if (null != hyper_min) {
    sim.setHyperbolicTfFactors(hyper_min,hyper_max,hyper_base,hyper_offset);
  }
  if (null != baseline_min) {
    sim.setBaselineTfFactors(baseline_base,baseline_min);
  }
}
