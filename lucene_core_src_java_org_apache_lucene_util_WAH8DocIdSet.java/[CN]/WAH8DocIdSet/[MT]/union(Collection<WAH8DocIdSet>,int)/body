{
switch (docIdSets.size()) {
case 0:
    return EMPTY;
case 1:
  return docIdSets.iterator().next();
}
final int numSets=docIdSets.size();
final PriorityQueue<Iterator> iterators=new PriorityQueue<WAH8DocIdSet.Iterator>(numSets){
@Override protected boolean lessThan(Iterator a,Iterator b){
  return a.wordNum < b.wordNum;
}
}
;
for (WAH8DocIdSet set : docIdSets) {
Iterator iterator=set.iterator();
iterator.nextWord();
iterators.add(iterator);
}
Iterator top=iterators.top();
if (top.wordNum == Integer.MAX_VALUE) {
return EMPTY;
}
int wordNum=top.wordNum;
byte word=top.word;
final WordBuilder builder=new WordBuilder().setIndexInterval(indexInterval);
while (true) {
top.nextWord();
iterators.updateTop();
top=iterators.top();
if (top.wordNum == wordNum) {
  word|=top.word;
}
 else {
  builder.addWord(wordNum,word);
  if (top.wordNum == Integer.MAX_VALUE) {
    break;
  }
  wordNum=top.wordNum;
  word=top.word;
}
}
return builder.build();
}
