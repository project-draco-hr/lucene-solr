{
  Directory dir1=new MockRAMDirectory();
  TestIndexReaderReopen.createIndex(dir1,false);
  SegmentReader reader1=(SegmentReader)IndexReader.open(dir1);
  SegmentReader reader2C=(SegmentReader)reader1.clone();
  reader2C.norms("field1");
  Norm reader2CNorm=(Norm)reader2C.norms.get("field1");
  assertTrue("reader2CNorm.bytesRef()=" + reader2CNorm.bytesRef(),reader2CNorm.bytesRef().refCount() == 2);
  SegmentReader reader3C=(SegmentReader)reader2C.clone();
  Norm reader3CCNorm=(Norm)reader3C.norms.get("field1");
  assertEquals(3,reader3CCNorm.bytesRef().refCount());
  SegmentReader reader4C=(SegmentReader)reader3C.clone();
  assertEquals(4,reader3CCNorm.bytesRef().refCount());
  reader4C.setNorm(5,"field1",0.33f);
  try {
    reader3C.setNorm(1,"field1",0.99f);
    fail("did not hit expected exception");
  }
 catch (  Exception ex) {
  }
  assertTrue(Similarity.decodeNorm(reader3C.norms("field1")[5]) != Similarity.decodeNorm(reader4C.norms("field1")[5]));
  Norm reader4CCNorm=(Norm)reader4C.norms.get("field1");
  assertEquals(3,reader3CCNorm.bytesRef().refCount());
  assertEquals(1,reader4CCNorm.bytesRef().refCount());
  SegmentReader reader5C=(SegmentReader)reader4C.clone();
  Norm reader5CCNorm=(Norm)reader5C.norms.get("field1");
  reader5C.setNorm(5,"field1",0.7f);
  assertEquals(1,reader5CCNorm.bytesRef().refCount());
  reader5C.close();
  reader4C.close();
  reader3C.close();
  reader2C.close();
  reader1.close();
  dir1.close();
}
