{
  String collectionName="delLiveColl";
  CloudSolrClient client=createCloudClient(null);
  try {
    createCollection(collectionName,client);
    waitForRecoveriesToFinish(collectionName,false);
    DocCollection testcoll=getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollection(collectionName);
    Slice shard1=null;
    Replica replica1=null;
    for (    Slice slice : testcoll.getSlices()) {
      if (replica1 != null)       break;
      if ("active".equals(slice.getStr("state"))) {
        shard1=slice;
        for (        Replica replica : shard1.getReplicas()) {
          if ("active".equals(replica.getStr("state"))) {
            replica1=replica;
            break;
          }
        }
      }
    }
    if (replica1 == null)     fail("no active replicas found");
    HttpSolrClient replica1Client=new HttpSolrClient(replica1.getStr("base_url"));
    String dataDir=null;
    try {
      CoreAdminResponse status=CoreAdminRequest.getStatus(replica1.getStr("core"),replica1Client);
      NamedList<Object> coreStatus=status.getCoreStatus(replica1.getStr("core"));
      dataDir=(String)coreStatus.get("dataDir");
    }
  finally {
      replica1Client.shutdown();
    }
    try {
      tryToRemoveOnlyIfDown(collectionName,client,replica1,shard1.getName());
      fail("Should have thrown an exception here because the replica is NOT down");
    }
 catch (    SolrException se) {
      assertEquals("Should see 400 here ",se.code(),400);
      assertTrue("Should have had a good message here",se.getMessage().contains("with onlyIfDown='true', but state is 'active'"));
      assertTrue("dataDir for " + replica1.getName() + " should NOT have been deleted by deleteReplica API with onlyIfDown='true'",new File(dataDir).exists());
    }
    removeAndWaitForReplicaGone(collectionName,client,replica1,shard1.getName());
    assertFalse("dataDir for " + replica1.getName() + " should have been deleted by deleteReplica API",new File(dataDir).exists());
  }
  finally {
    client.shutdown();
  }
}
