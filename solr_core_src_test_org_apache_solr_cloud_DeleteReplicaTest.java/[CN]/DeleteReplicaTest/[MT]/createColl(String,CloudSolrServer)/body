{
  int replicationFactor=2;
  int numShards=2;
  int maxShardsPerNode=((((numShards + 1) * replicationFactor) / getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
  Map<String,Object> props=makeMap(REPLICATION_FACTOR,replicationFactor,MAX_SHARDS_PER_NODE,maxShardsPerNode,NUM_SLICES,numShards);
  Map<String,List<Integer>> collectionInfos=new HashMap<String,List<Integer>>();
  createCollection(collectionInfos,COLL_NAME,props,client);
  Set<Map.Entry<String,List<Integer>>> collectionInfosEntrySet=collectionInfos.entrySet();
  for (  Map.Entry<String,List<Integer>> entry : collectionInfosEntrySet) {
    String collection=entry.getKey();
    List<Integer> list=entry.getValue();
    checkForCollection(collection,list,null);
    String url=getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(),collection);
    HttpSolrServer collectionClient=new HttpSolrServer(url);
    waitForNon403or404or503(collectionClient);
  }
}
