{
  MockAnalyzer analyzer=new MockAnalyzer(random());
  LeafReader leafReader=getRandomIndex(analyzer,100);
  try {
    long trainStart=System.currentTimeMillis();
    SimpleNaiveBayesClassifier simpleNaiveBayesClassifier=new SimpleNaiveBayesClassifier(leafReader,analyzer,null,categoryFieldName,textFieldName);
    long trainEnd=System.currentTimeMillis();
    long trainTime=trainEnd - trainStart;
    assertTrue("training took more than 10s: " + trainTime / 1000 + "s",trainTime < 10000);
    long evaluationStart=System.currentTimeMillis();
    ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix=ConfusionMatrixGenerator.getConfusionMatrix(leafReader,simpleNaiveBayesClassifier,categoryFieldName,textFieldName);
    assertNotNull(confusionMatrix);
    long evaluationEnd=System.currentTimeMillis();
    long evaluationTime=evaluationEnd - evaluationStart;
    assertTrue("evaluation took more than 2m: " + evaluationTime / 1000 + "s",evaluationTime < 120000);
    double avgClassificationTime=confusionMatrix.getAvgClassificationTime();
    assertTrue("avg classification time: " + avgClassificationTime,5000 > avgClassificationTime);
    double accuracy=confusionMatrix.getAccuracy();
    assertTrue(accuracy >= 0d);
    assertTrue(accuracy <= 1d);
    double recall=confusionMatrix.getRecall();
    assertTrue(recall >= 0d);
    assertTrue(recall <= 1d);
    double precision=confusionMatrix.getPrecision();
    assertTrue(precision >= 0d);
    assertTrue(precision <= 1d);
    Terms terms=MultiFields.getTerms(leafReader,categoryFieldName);
    TermsEnum iterator=terms.iterator();
    BytesRef term;
    while ((term=iterator.next()) != null) {
      String s=term.utf8ToString();
      recall=confusionMatrix.getRecall(s);
      assertTrue(recall >= 0d);
      assertTrue(recall <= 1d);
      precision=confusionMatrix.getPrecision(s);
      assertTrue(precision >= 0d);
      assertTrue(precision <= 1d);
      double f1Measure=confusionMatrix.getF1Measure(s);
      assertTrue(f1Measure >= 0d);
      assertTrue(f1Measure <= 1d);
    }
  }
  finally {
    leafReader.close();
  }
}
