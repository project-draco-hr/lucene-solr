{
  final SAXParser parser=new SAXParser();
  parser.setFeature("http://xml.org/sax/features/namespaces",true);
  parser.setFeature("http://cyberneko.org/html/features/balance-tags",true);
  parser.setFeature("http://cyberneko.org/html/features/report-errors",false);
  parser.setProperty("http://cyberneko.org/html/properties/names/elems","lower");
  parser.setProperty("http://cyberneko.org/html/properties/names/attrs","lower");
  final StringBuilder title=new StringBuilder(), body=new StringBuilder();
  final DefaultHandler handler=new DefaultHandler(){
    private int inBODY=0, inHEAD=0, inTITLE=0, suppressed=0;
    @Override public void startElement(    String namespaceURI,    String localName,    String qName,    Attributes atts) throws SAXException {
      if (inHEAD > 0) {
        if (equalsIgnoreTurkish("title",localName)) {
          inTITLE++;
        }
 else {
          if (equalsIgnoreTurkish("meta",localName)) {
            String name=atts.getValue("name");
            if (name == null) {
              name=atts.getValue("http-equiv");
            }
            final String val=atts.getValue("content");
            if (name != null && val != null) {
              metaTags.setProperty(name.toLowerCase(Locale.ROOT),val);
            }
          }
        }
      }
 else       if (inBODY > 0) {
        if (SUPPRESS_ELEMENTS.contains(localName)) {
          suppressed++;
        }
 else         if (equalsIgnoreTurkish("img",localName)) {
          final String alt=atts.getValue("alt");
          if (alt != null) {
            body.append('[').append(alt).append(']');
          }
        }
      }
 else       if (equalsIgnoreTurkish("body",localName)) {
        inBODY++;
      }
 else       if (equalsIgnoreTurkish("head",localName)) {
        inHEAD++;
      }
 else       if (equalsIgnoreTurkish("frameset",localName)) {
        throw new SAXException("This parser does not support HTML framesets.");
      }
    }
    @Override public void endElement(    String namespaceURI,    String localName,    String qName) throws SAXException {
      if (inBODY > 0) {
        if (equalsIgnoreTurkish("body",localName)) {
          inBODY--;
        }
 else         if (ENDLINE_ELEMENTS.contains(localName)) {
          body.append('\n');
        }
 else         if (SUPPRESS_ELEMENTS.contains(localName)) {
          suppressed--;
        }
      }
 else       if (inHEAD > 0) {
        if (equalsIgnoreTurkish("head",localName)) {
          inHEAD--;
        }
 else         if (inTITLE > 0 && equalsIgnoreTurkish("title",localName)) {
          inTITLE--;
        }
      }
    }
    @Override public void characters(    char[] ch,    int start,    int length) throws SAXException {
      if (inBODY > 0 && suppressed == 0) {
        body.append(ch,start,length);
      }
 else       if (inTITLE > 0) {
        title.append(ch,start,length);
      }
    }
    @Override public InputSource resolveEntity(    String publicId,    String systemId){
      return new InputSource(new StringReader(""));
    }
  }
;
  parser.setContentHandler(handler);
  parser.setErrorHandler(handler);
  parser.parse(source);
  this.title=title.toString().trim();
  this.body=body.toString();
}
