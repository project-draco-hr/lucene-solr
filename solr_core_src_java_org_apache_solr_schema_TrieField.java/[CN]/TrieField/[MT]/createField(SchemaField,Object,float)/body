{
  boolean indexed=field.indexed();
  boolean stored=field.stored();
  boolean docValues=field.hasDocValues();
  if (!indexed && !stored && !docValues) {
    if (log.isTraceEnabled())     log.trace("Ignoring unindexed/unstored field: " + field);
    return null;
  }
  FieldType ft=new FieldType();
  ft.setStored(stored);
  ft.setTokenized(true);
  ft.setOmitNorms(field.omitNorms());
  ft.setIndexOptions(indexed ? getIndexOptions(field,value.toString()) : IndexOptions.NO);
switch (type) {
case INTEGER:
    ft.setNumericType(NumericType.INT);
  break;
case FLOAT:
ft.setNumericType(NumericType.FLOAT);
break;
case LONG:
ft.setNumericType(NumericType.LONG);
break;
case DOUBLE:
ft.setNumericType(NumericType.DOUBLE);
break;
case DATE:
ft.setNumericType(NumericType.LONG);
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field: " + type);
}
ft.setNumericPrecisionStep(precisionStep);
final org.apache.lucene.document.Field f;
switch (type) {
case INTEGER:
int i=(value instanceof Number) ? ((Number)value).intValue() : Integer.parseInt(value.toString());
f=new org.apache.lucene.document.IntField(field.getName(),i,ft);
break;
case FLOAT:
float fl=(value instanceof Number) ? ((Number)value).floatValue() : Float.parseFloat(value.toString());
f=new org.apache.lucene.document.FloatField(field.getName(),fl,ft);
break;
case LONG:
long l=(value instanceof Number) ? ((Number)value).longValue() : Long.parseLong(value.toString());
f=new org.apache.lucene.document.LongField(field.getName(),l,ft);
break;
case DOUBLE:
double d=(value instanceof Number) ? ((Number)value).doubleValue() : Double.parseDouble(value.toString());
f=new org.apache.lucene.document.DoubleField(field.getName(),d,ft);
break;
case DATE:
Date date=(value instanceof Date) ? ((Date)value) : dateField.parseMath(null,value.toString());
f=new org.apache.lucene.document.LongField(field.getName(),date.getTime(),ft);
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field: " + type);
}
f.setBoost(boost);
return f;
}
