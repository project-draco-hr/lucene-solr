{
  field.checkSortability();
  Object missingValue=null;
  boolean sortMissingLast=field.sortMissingLast();
  boolean sortMissingFirst=field.sortMissingFirst();
  SortField sf;
switch (type) {
case INTEGER:
    if (sortMissingLast) {
      missingValue=top ? Integer.MIN_VALUE : Integer.MAX_VALUE;
    }
 else     if (sortMissingFirst) {
      missingValue=top ? Integer.MAX_VALUE : Integer.MIN_VALUE;
    }
  sf=new SortField(field.getName(),SortField.Type.INT,top,FieldCache.NUMERIC_UTILS_INT_PARSER);
sf.setMissingValue(missingValue);
return sf;
case FLOAT:
if (sortMissingLast) {
missingValue=top ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY;
}
 else if (sortMissingFirst) {
missingValue=top ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
}
sf=new SortField(field.getName(),SortField.Type.FLOAT,top,FieldCache.NUMERIC_UTILS_FLOAT_PARSER);
sf.setMissingValue(missingValue);
return sf;
case DATE:
case LONG:
if (sortMissingLast) {
missingValue=top ? Long.MIN_VALUE : Long.MAX_VALUE;
}
 else if (sortMissingFirst) {
missingValue=top ? Long.MAX_VALUE : Long.MIN_VALUE;
}
sf=new SortField(field.getName(),SortField.Type.LONG,top,FieldCache.NUMERIC_UTILS_LONG_PARSER);
sf.setMissingValue(missingValue);
return sf;
case DOUBLE:
if (sortMissingLast) {
missingValue=top ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
}
 else if (sortMissingFirst) {
missingValue=top ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
}
sf=new SortField(field.getName(),SortField.Type.DOUBLE,top,FieldCache.NUMERIC_UTILS_DOUBLE_PARSER);
sf.setMissingValue(missingValue);
return sf;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field: " + field.name);
}
}
