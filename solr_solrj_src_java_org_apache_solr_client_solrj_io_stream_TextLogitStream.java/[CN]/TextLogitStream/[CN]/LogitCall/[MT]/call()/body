{
  ModifiableSolrParams params=new ModifiableSolrParams();
  HttpSolrClient solrClient=cache.getHttpSolrClient(baseUrl);
  params.add("distrib","false");
  params.add("fq","{!tlogit}");
  params.add("feature",feature);
  params.add("terms",TextLogitStream.toString(terms));
  params.add("idfs",TextLogitStream.toString(idfs));
  for (  String key : paramsMap.keySet()) {
    params.add(key,paramsMap.get(key));
  }
  if (weights != null) {
    params.add("weights",TextLogitStream.toString(weights));
  }
  params.add("iteration",Integer.toString(iteration));
  params.add("outcome",outcome);
  params.add("positiveLabel",Integer.toString(positiveLabel));
  params.add("threshold",Double.toString(threshold));
  params.add("alpha",Double.toString(learningRate));
  QueryRequest request=new QueryRequest(params,SolrRequest.METHOD.POST);
  QueryResponse response=request.process(solrClient);
  NamedList res=response.getResponse();
  NamedList logit=(NamedList)res.get("logit");
  List<Double> shardWeights=(List<Double>)logit.get("weights");
  double shardError=(double)logit.get("error");
  Map map=new HashMap();
  map.put("error",shardError);
  map.put("weights",shardWeights);
  map.put("evaluation",logit.get("evaluation"));
  return new Tuple(map);
}
