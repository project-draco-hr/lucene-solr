{
  StreamExpression expression=new StreamExpression(factory.getFunctionName(this.getClass()));
  expression.addParameter(collection);
  if (includeStreams && !(termsStream instanceof TermsStream)) {
    if (termsStream instanceof Expressible) {
      expression.addParameter(((Expressible)termsStream).toExpression(factory));
    }
 else {
      throw new IOException("This TextLogitStream contains a non-expressible TupleStream - it cannot be converted to an expression");
    }
  }
  for (  Entry<String,String> param : params.entrySet()) {
    expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),param.getValue()));
  }
  expression.addParameter(new StreamExpressionNamedParameter("field",field));
  expression.addParameter(new StreamExpressionNamedParameter("name",name));
  if (termsStream instanceof TermsStream) {
    loadTerms();
    expression.addParameter(new StreamExpressionNamedParameter("terms",toString(terms)));
  }
  expression.addParameter(new StreamExpressionNamedParameter("outcome",outcome));
  if (weights != null) {
    expression.addParameter(new StreamExpressionNamedParameter("weights",toString(weights)));
  }
  expression.addParameter(new StreamExpressionNamedParameter("maxIterations",Integer.toString(maxIterations)));
  if (iteration > 0) {
    expression.addParameter(new StreamExpressionNamedParameter("iteration",Integer.toString(iteration)));
  }
  expression.addParameter(new StreamExpressionNamedParameter("positiveLabel",Integer.toString(positiveLabel)));
  expression.addParameter(new StreamExpressionNamedParameter("threshold",Double.toString(threshold)));
  expression.addParameter(new StreamExpressionNamedParameter("zkHost",zkHost));
  return expression;
}
