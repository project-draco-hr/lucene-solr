{
  this.a=a;
  if (a.isSingleton()) {
    leadsToAccept=null;
    return;
  }
  leadsToAccept=new IdentityHashMap<Transition,Boolean>();
  final Map<State,List<ArrivingTransition>> allArriving=new HashMap<State,List<ArrivingTransition>>();
  final LinkedList<State> q=new LinkedList<State>();
  final Set<State> seen=new HashSet<State>();
  for (  State s : a.getNumberedStates()) {
    for (int i=0; i < s.numTransitions; i++) {
      final Transition t=s.transitionsArray[i];
      List<ArrivingTransition> tl=allArriving.get(t.to);
      if (tl == null) {
        tl=new ArrayList<ArrivingTransition>();
        allArriving.put(t.to,tl);
      }
      tl.add(new ArrivingTransition(s,t));
    }
    if (s.accept) {
      q.add(s);
      seen.add(s);
    }
  }
  while (!q.isEmpty()) {
    final State s=q.removeFirst();
    List<ArrivingTransition> arriving=allArriving.get(s);
    if (arriving != null) {
      for (      ArrivingTransition at : arriving) {
        final State from=at.from;
        if (!seen.contains(from)) {
          q.add(from);
          seen.add(from);
          leadsToAccept.put(at.t,Boolean.TRUE);
        }
      }
    }
  }
}
