{
  char[] points=a.getStartPoints();
  Map<Set<State>,Set<State>> sets=new HashMap<Set<State>,Set<State>>();
  LinkedList<Set<State>> worklist=new LinkedList<Set<State>>();
  Map<Set<State>,State> newstate=new HashMap<Set<State>,State>();
  sets.put(initialset,initialset);
  worklist.add(initialset);
  a.initial=new State();
  newstate.put(initialset,a.initial);
  while (worklist.size() > 0) {
    Set<State> s=worklist.removeFirst();
    State r=newstate.get(s);
    for (    State q : s)     if (q.accept) {
      r.accept=true;
      break;
    }
    for (int n=0; n < points.length; n++) {
      Set<State> p=new HashSet<State>();
      for (      State q : s)       for (      Transition t : q.transitions)       if (t.min <= points[n] && points[n] <= t.max)       p.add(t.to);
      if (!sets.containsKey(p)) {
        sets.put(p,p);
        worklist.add(p);
        newstate.put(p,new State());
      }
      State q=newstate.get(p);
      char min=points[n];
      char max;
      if (n + 1 < points.length)       max=(char)(points[n + 1] - 1);
 else       max=Character.MAX_VALUE;
      r.transitions.add(new Transition(min,max,q));
    }
  }
  a.deterministic=true;
  a.removeDeadTransitions();
}
