{
  if (l.isEmpty())   return BasicAutomata.makeEmptyString();
  boolean all_singleton=true;
  for (  Automaton a : l)   if (!a.isSingleton()) {
    all_singleton=false;
    break;
  }
  if (all_singleton) {
    StringBuilder b=new StringBuilder();
    for (    Automaton a : l)     b.append(a.singleton);
    return BasicAutomata.makeString(b.toString());
  }
 else {
    for (    Automaton a : l)     if (BasicOperations.isEmpty(a))     return BasicAutomata.makeEmpty();
    Set<Integer> ids=new HashSet<Integer>();
    for (    Automaton a : l)     ids.add(System.identityHashCode(a));
    boolean has_aliases=ids.size() != l.size();
    Automaton b=l.get(0);
    if (has_aliases)     b=b.cloneExpanded();
 else     b=b.cloneExpandedIfRequired();
    Set<State> ac=b.getAcceptStates();
    boolean first=true;
    for (    Automaton a : l)     if (first)     first=false;
 else {
      if (a.isEmptyString())       continue;
      Automaton aa=a;
      if (has_aliases)       aa=aa.cloneExpanded();
 else       aa=aa.cloneExpandedIfRequired();
      Set<State> ns=aa.getAcceptStates();
      for (      State s : ac) {
        s.accept=false;
        s.addEpsilon(aa.initial);
        if (s.accept)         ns.add(s);
      }
      ac=ns;
    }
    b.deterministic=false;
    b.clearHashCode();
    b.checkMinimizeAlways();
    return b;
  }
}
