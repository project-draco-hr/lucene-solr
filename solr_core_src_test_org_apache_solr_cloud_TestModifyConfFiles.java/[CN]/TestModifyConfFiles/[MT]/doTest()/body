{
  int which=r.nextInt(clients.size());
  HttpSolrServer client=(HttpSolrServer)clients.get(which);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("op","write");
  params.set("file","schema.xml");
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/file");
  try {
    client.request(request);
    fail("Should have caught exception");
  }
 catch (  Exception e) {
    assertEquals(e.getMessage(),"Input stream list was null for admin file write operation.");
  }
  params.remove("file");
  params.set("stream.body","Testing rewrite of schema.xml file.");
  request=new QueryRequest(params);
  request.setPath("/admin/file");
  try {
    client.request(request);
    fail("Should have caught exception");
  }
 catch (  Exception e) {
    assertEquals(e.getMessage(),"No file name specified for write operation.");
  }
  params.set("file","bogus.txt");
  request=new QueryRequest(params);
  request.setPath("/admin/file");
  try {
    client.request(request);
    fail("Should have caught exception");
  }
 catch (  Exception e) {
    assertEquals(e.getMessage(),"Can not access: bogus.txt");
  }
  params.set("file","schema.xml");
  request=new QueryRequest(params);
  request.setPath("/admin/file");
  client.request(request);
  SolrZkClient zkClient=cloudClient.getZkStateReader().getZkClient();
  String contents=new String(zkClient.getData("/configs/conf1/schema.xml",null,null,true),"UTF-8");
  assertTrue("Schema contents should have changed!","Testing rewrite of schema.xml file.".equals(contents));
  zkClient.makePath("/configs/conf1/velocity/test.vm",false,true);
  params.set("stream.body","Some bogus stuff for a test.");
  params.set("file","velocity/test.vm");
  request=new QueryRequest(params);
  request.setPath("/admin/file");
  client.request(request);
  contents=new String(zkClient.getData("/configs/conf1/velocity/test.vm",null,null,true),"UTF-8");
  assertTrue("Should have found new content in a velocity/test.vm.",contents.indexOf("Some bogus stuff for a test.") != -1);
}
