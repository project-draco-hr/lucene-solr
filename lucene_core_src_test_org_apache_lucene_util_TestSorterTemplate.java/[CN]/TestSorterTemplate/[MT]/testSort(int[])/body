{
  final long[] arr=toLongsAndOrds(intArr);
  final long[] mergeSorted=Arrays.copyOf(arr,arr.length);
  new Last32BitsSorterTemplate(mergeSorted).mergeSort(0,arr.length - 1);
  if (arr.length < SLOW_SORT_THRESHOLD) {
    final long[] insertionSorted=Arrays.copyOf(arr,arr.length);
    new Last32BitsSorterTemplate(insertionSorted).insertionSort(0,arr.length - 1);
    assertArrayEquals(mergeSorted,insertionSorted);
    final long[] binarySorted=Arrays.copyOf(arr,arr.length);
    new Last32BitsSorterTemplate(binarySorted).binarySort(0,arr.length - 1);
    assertArrayEquals(mergeSorted,binarySorted);
  }
  final long[] quickSorted=Arrays.copyOf(arr,arr.length);
  new Last32BitsSorterTemplate(quickSorted).quickSort(0,arr.length - 1);
  assertArrayEquals(toInts(mergeSorted),toInts(quickSorted));
  final long[] timSorted=Arrays.copyOf(arr,arr.length);
  new Last32BitsSorterTemplate(timSorted).timSort(0,arr.length - 1);
  assertArrayEquals(mergeSorted,timSorted);
}
