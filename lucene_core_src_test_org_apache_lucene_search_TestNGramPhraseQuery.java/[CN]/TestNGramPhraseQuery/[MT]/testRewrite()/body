{
  PhraseQuery pq1=new NGramPhraseQuery(2);
  pq1.add(new Term("f","AB"));
  pq1.add(new Term("f","BC"));
  Query q=pq1.rewrite(reader);
  assertTrue(q instanceof NGramPhraseQuery);
  assertSame(pq1,q);
  pq1=(NGramPhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","AB"),new Term("f","BC")},pq1.getTerms());
  assertArrayEquals(new int[]{0,1},pq1.getPositions());
  PhraseQuery pq2=new NGramPhraseQuery(2);
  pq2.add(new Term("f","AB"));
  pq2.add(new Term("f","BC"));
  pq2.add(new Term("f","CD"));
  q=pq2.rewrite(reader);
  assertTrue(q instanceof PhraseQuery);
  assertNotSame(pq2,q);
  pq2=(PhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","AB"),new Term("f","CD")},pq2.getTerms());
  assertArrayEquals(new int[]{0,2},pq2.getPositions());
  PhraseQuery pq3=new NGramPhraseQuery(3);
  pq3.add(new Term("f","ABC"));
  pq3.add(new Term("f","BCD"));
  pq3.add(new Term("f","CDE"));
  pq3.add(new Term("f","DEF"));
  pq3.add(new Term("f","EFG"));
  pq3.add(new Term("f","FGH"));
  q=pq3.rewrite(reader);
  assertTrue(q instanceof PhraseQuery);
  assertNotSame(pq3,q);
  pq3=(PhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","ABC"),new Term("f","DEF"),new Term("f","FGH")},pq3.getTerms());
  assertArrayEquals(new int[]{0,3,5},pq3.getPositions());
}
