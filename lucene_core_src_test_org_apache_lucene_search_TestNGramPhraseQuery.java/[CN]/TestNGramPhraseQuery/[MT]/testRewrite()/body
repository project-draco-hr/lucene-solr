{
  NGramPhraseQuery pq1=new NGramPhraseQuery(2,new PhraseQuery("f","AB","BC"));
  Query q=pq1.rewrite(reader);
  assertSame(q.rewrite(reader),q);
  PhraseQuery rewritten1=(PhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","AB"),new Term("f","BC")},rewritten1.getTerms());
  assertArrayEquals(new int[]{0,1},rewritten1.getPositions());
  NGramPhraseQuery pq2=new NGramPhraseQuery(2,new PhraseQuery("f","AB","BC","CD"));
  q=pq2.rewrite(reader);
  assertTrue(q instanceof PhraseQuery);
  assertNotSame(pq2,q);
  PhraseQuery rewritten2=(PhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","AB"),new Term("f","CD")},rewritten2.getTerms());
  assertArrayEquals(new int[]{0,2},rewritten2.getPositions());
  NGramPhraseQuery pq3=new NGramPhraseQuery(3,new PhraseQuery("f","ABC","BCD","CDE","DEF","EFG","FGH"));
  q=pq3.rewrite(reader);
  assertTrue(q instanceof PhraseQuery);
  assertNotSame(pq3,q);
  PhraseQuery rewritten3=(PhraseQuery)q;
  assertArrayEquals(new Term[]{new Term("f","ABC"),new Term("f","DEF"),new Term("f","FGH")},rewritten3.getTerms());
  assertArrayEquals(new int[]{0,3,5},rewritten3.getPositions());
  NGramPhraseQuery pq4=new NGramPhraseQuery(2,new PhraseQuery("f","AB","BC","CD"));
  pq4.setBoost(100.0F);
  q=pq4.rewrite(reader);
  assertNotSame(pq4,q);
  assertEquals(pq4.getBoost(),q.getBoost(),0.1f);
}
