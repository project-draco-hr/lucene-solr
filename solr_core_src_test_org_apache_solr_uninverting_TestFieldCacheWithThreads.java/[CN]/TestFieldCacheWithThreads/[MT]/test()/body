{
  Directory dir=newDirectory();
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  final List<Long> numbers=new ArrayList<>();
  final List<BytesRef> binary=new ArrayList<>();
  final List<BytesRef> sorted=new ArrayList<>();
  final int numDocs=atLeast(100);
  for (int i=0; i < numDocs; i++) {
    Document d=new Document();
    long number=random().nextLong();
    d.add(new NumericDocValuesField("number",number));
    BytesRef bytes=new BytesRef(TestUtil.randomRealisticUnicodeString(random()));
    d.add(new BinaryDocValuesField("bytes",bytes));
    binary.add(bytes);
    bytes=new BytesRef(TestUtil.randomRealisticUnicodeString(random()));
    d.add(new SortedDocValuesField("sorted",bytes));
    sorted.add(bytes);
    w.addDocument(d);
    numbers.add(number);
  }
  w.forceMerge(1);
  final IndexReader r=DirectoryReader.open(w);
  w.close();
  assertEquals(1,r.leaves().size());
  final LeafReader ar=r.leaves().get(0).reader();
  int numThreads=TestUtil.nextInt(random(),2,5);
  List<Thread> threads=new ArrayList<>();
  final CountDownLatch startingGun=new CountDownLatch(1);
  for (int t=0; t < numThreads; t++) {
    final Random threadRandom=new Random(random().nextLong());
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          startingGun.await();
          int iters=atLeast(1000);
          for (int iter=0; iter < iters; iter++) {
            int docID=threadRandom.nextInt(numDocs);
switch (threadRandom.nextInt(4)) {
case 0:
{
                NumericDocValues values=FieldCache.DEFAULT.getNumerics(ar,"number",FieldCache.INT_POINT_PARSER);
                assertEquals(docID,values.advance(docID));
                assertEquals(numbers.get(docID).longValue(),values.longValue());
              }
            break;
case 1:
{
            NumericDocValues values=FieldCache.DEFAULT.getNumerics(ar,"number",FieldCache.LONG_POINT_PARSER);
            assertEquals(docID,values.advance(docID));
            assertEquals(numbers.get(docID).longValue(),values.longValue());
          }
        break;
case 2:
{
        NumericDocValues values=FieldCache.DEFAULT.getNumerics(ar,"number",FieldCache.FLOAT_POINT_PARSER);
        assertEquals(docID,values.advance(docID));
        assertEquals(numbers.get(docID).longValue(),values.longValue());
      }
    break;
case 3:
{
    NumericDocValues values=FieldCache.DEFAULT.getNumerics(ar,"number",FieldCache.DOUBLE_POINT_PARSER);
    assertEquals(docID,values.advance(docID));
    assertEquals(numbers.get(docID).longValue(),values.longValue());
  }
break;
}
BinaryDocValues bdv=FieldCache.DEFAULT.getTerms(ar,"bytes");
assertEquals(docID,bdv.advance(docID));
assertEquals(binary.get(docID),bdv.binaryValue());
SortedDocValues sdv=FieldCache.DEFAULT.getTermsIndex(ar,"sorted");
assertEquals(docID,sdv.advance(docID));
assertEquals(sorted.get(docID),sdv.binaryValue());
}
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}
}
;
thread.start();
threads.add(thread);
}
startingGun.countDown();
for (Thread thread : threads) {
thread.join();
}
r.close();
dir.close();
}
