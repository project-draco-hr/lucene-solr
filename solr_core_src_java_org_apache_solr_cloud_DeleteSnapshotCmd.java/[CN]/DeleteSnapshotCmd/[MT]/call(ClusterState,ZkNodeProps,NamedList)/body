{
  String collectionName=message.getStr(COLLECTION_PROP);
  String commitName=message.getStr(CoreAdminParams.COMMIT_NAME);
  String asyncId=message.getStr(ASYNC);
  Map<String,String> requestMap=new HashMap<>();
  NamedList shardRequestResults=new NamedList();
  ShardHandler shardHandler=ocmh.shardHandlerFactory.getShardHandler();
  SolrZkClient zkClient=ocmh.overseer.getZkController().getZkClient();
  Optional<CollectionSnapshotMetaData> meta=SolrSnapshotManager.getCollectionLevelSnapshot(zkClient,collectionName,commitName);
  if (!meta.isPresent()) {
    return;
  }
  log.info("Deleting a snapshot for collection={} with commitName={}",collectionName,commitName);
  Set<String> existingCores=new HashSet<>();
  for (  Slice s : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getSlices()) {
    for (    Replica r : s.getReplicas()) {
      existingCores.add(r.getCoreName());
    }
  }
  Set<String> coresWithSnapshot=new HashSet<>();
  for (  CoreSnapshotMetaData m : meta.get().getReplicaSnapshots()) {
    if (existingCores.contains(m.getCoreName())) {
      coresWithSnapshot.add(m.getCoreName());
    }
  }
  log.info("Existing cores with snapshot for collection={} are {}",collectionName,existingCores);
  for (  Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      if (replica.getState() == State.DOWN) {
        continue;
      }
      if (meta.get().getStatus() == SnapshotStatus.InProgress || coresWithSnapshot.contains(replica.getCoreName())) {
        String coreName=replica.getStr(CORE_NAME_PROP);
        ModifiableSolrParams params=new ModifiableSolrParams();
        params.set(CoreAdminParams.ACTION,CoreAdminAction.DELETESNAPSHOT.toString());
        params.set(NAME,slice.getName());
        params.set(CORE_NAME_PROP,coreName);
        params.set(CoreAdminParams.COMMIT_NAME,commitName);
        log.info("Sending deletesnapshot request to core={} with commitName={}",coreName,commitName);
        ocmh.sendShardRequest(replica.getNodeName(),params,shardHandler,asyncId,requestMap);
      }
    }
  }
  ocmh.processResponses(shardRequestResults,shardHandler,false,null,asyncId,requestMap);
  NamedList success=(NamedList)shardRequestResults.get("success");
  List<CoreSnapshotMetaData> replicas=new ArrayList<>();
  if (success != null) {
    for (int i=0; i < success.size(); i++) {
      NamedList resp=(NamedList)success.getVal(i);
      String coreName=(String)resp.get("core");
      coresWithSnapshot.remove(coreName);
    }
  }
  if (!coresWithSnapshot.isEmpty()) {
    log.warn("Failed to delete a snapshot for collection {} with commitName = {}. Snapshot could not be deleted for following cores {}",collectionName,commitName,coresWithSnapshot);
    List<CoreSnapshotMetaData> replicasWithSnapshot=new ArrayList<>();
    for (    CoreSnapshotMetaData m : meta.get().getReplicaSnapshots()) {
      if (coresWithSnapshot.contains(m.getCoreName())) {
        replicasWithSnapshot.add(m);
      }
    }
    CollectionSnapshotMetaData newResult=new CollectionSnapshotMetaData(meta.get().getName(),SnapshotStatus.Failed,meta.get().getCreationDate(),replicasWithSnapshot);
    SolrSnapshotManager.updateCollectionLevelSnapshot(zkClient,collectionName,newResult);
    log.info("Saved snapshot information for collection={} with commitName={} in Zookeeper as follows",collectionName,commitName,Utils.toJSON(newResult));
    throw new SolrException(ErrorCode.SERVER_ERROR,"Failed to delete snapshot on cores " + coresWithSnapshot);
  }
 else {
    SolrSnapshotManager.deleteCollectionLevelSnapshot(zkClient,collectionName,commitName);
    log.info("Deleted Zookeeper snapshot metdata for collection={} with commitName={}",collectionName,commitName);
    log.info("Successfully deleted snapshot for collection={} with commitName={}",collectionName,commitName);
  }
}
