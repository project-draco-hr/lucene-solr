{
  Directory indexDir=newDirectory(), taxoDir=newDirectory();
  IndexWriter indexWriter=new IndexWriter(indexDir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);
  FacetFields facetFields=new FacetFields(taxoWriter);
  Document doc=new Document();
  facetFields.addFields(doc,Arrays.asList(new CategoryPath("A/1",'/')));
  indexWriter.addDocument(doc);
  IOUtils.close(indexWriter,taxoWriter);
  DirectoryReader indexReader=DirectoryReader.open(indexDir);
  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);
  IndexSearcher searcher=new IndexSearcher(indexReader);
  FacetSearchParams fsp=new FacetSearchParams(new CountFacetRequest(new CategoryPath("B"),5));
  final SamplingParams sampleParams=new SamplingParams();
  sampleParams.setMaxSampleSize(100);
  sampleParams.setMinSampleSize(100);
  sampleParams.setSamplingThreshold(100);
  sampleParams.setOversampleFactor(1.0d);
  if (random().nextBoolean()) {
    sampleParams.setSampleFixer(new TakmiSampleFixer(indexReader,taxoReader,fsp));
  }
  final Sampler sampler=new RandomSampler(sampleParams,random());
  TaxonomyFacetsAccumulator[] accumulators=new TaxonomyFacetsAccumulator[]{new TaxonomyFacetsAccumulator(fsp,indexReader,taxoReader),new StandardFacetsAccumulator(fsp,indexReader,taxoReader),new SamplingAccumulator(sampler,fsp,indexReader,taxoReader),new AdaptiveFacetsAccumulator(fsp,indexReader,taxoReader),new SamplingWrapper(new StandardFacetsAccumulator(fsp,indexReader,taxoReader),sampler)};
  for (  TaxonomyFacetsAccumulator fa : accumulators) {
    FacetsCollector fc=FacetsCollector.create(fa);
    searcher.search(new MatchAllDocsQuery(),fc);
    List<FacetResult> facetResults=fc.getFacetResults();
    assertNotNull(facetResults);
    assertEquals("incorrect label returned for " + fa,fsp.facetRequests.get(0).categoryPath,facetResults.get(0).getFacetResultNode().label);
  }
  try {
    assertNull(new SortedSetDocValuesAccumulator(new SortedSetDocValuesReaderState(indexReader),fsp));
    fail("should not have succeeded to execute a request over a category which wasn't indexed as SortedSetDVField");
  }
 catch (  IllegalArgumentException e) {
  }
  RangeAccumulator ra=new RangeAccumulator(new RangeFacetRequest<LongRange>("f",new LongRange("grr",0,true,1,true)));
  FacetsCollector fc=FacetsCollector.create(ra);
  searcher.search(new MatchAllDocsQuery(),fc);
  List<FacetResult> facetResults=fc.getFacetResults();
  assertNotNull(facetResults);
  assertEquals("incorrect label returned for RangeAccumulator",new CategoryPath("f"),facetResults.get(0).getFacetResultNode().label);
  IOUtils.close(indexReader,taxoReader);
  IOUtils.close(indexDir,taxoDir);
}
