{
  Directory indexDir=newDirectory();
  Directory taxoDir=newDirectory();
  TaxonomyWriter taxonomyWriter=new DirectoryTaxonomyWriter(taxoDir);
  IndexWriter iw=new IndexWriter(indexDir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  FacetFields facetFields=new FacetFields(taxonomyWriter);
  for (int i=atLeast(30); i > 0; --i) {
    Document doc=new Document();
    if (random().nextBoolean()) {
      doc.add(new StringField("f","v",Store.NO));
    }
    facetFields.addFields(doc,Collections.singletonList(new CategoryPath("a")));
    iw.addDocument(doc);
  }
  taxonomyWriter.close();
  iw.close();
  DirectoryReader r=DirectoryReader.open(indexDir);
  DirectoryTaxonomyReader taxo=new DirectoryTaxonomyReader(taxoDir);
  FacetSearchParams sParams=new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath("a"),10));
  TaxonomyFacetsAccumulator fa=new TaxonomyFacetsAccumulator(sParams,r,taxo){
    @Override public FacetsAggregator getAggregator(){
      return new SumScoreFacetsAggregator();
    }
  }
;
  FacetsCollector fc=FacetsCollector.create(fa);
  TopScoreDocCollector topDocs=TopScoreDocCollector.create(10,false);
  ConstantScoreQuery csq=new ConstantScoreQuery(new MatchAllDocsQuery());
  csq.setBoost(2.0f);
  newSearcher(r).search(csq,MultiCollector.wrap(fc,topDocs));
  List<FacetResult> res=fc.getFacetResults();
  float value=(float)res.get(0).getFacetResultNode().value;
  TopDocs td=topDocs.topDocs();
  int expected=(int)(td.getMaxScore() * td.totalHits);
  assertEquals(expected,(int)value);
  IOUtils.close(taxo,taxoDir,r,indexDir);
}
