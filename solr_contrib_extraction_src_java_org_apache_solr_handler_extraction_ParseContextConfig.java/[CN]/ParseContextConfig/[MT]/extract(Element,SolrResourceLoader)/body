{
  final NodeList xmlEntries=element.getElementsByTagName("entry");
  for (int i=0, c1=xmlEntries.getLength(); i < c1; i++) {
    final NamedNodeMap xmlEntryAttributes=xmlEntries.item(i).getAttributes();
    final String className=xmlEntryAttributes.getNamedItem("class").getNodeValue();
    final String implementationName=xmlEntryAttributes.getNamedItem("impl").getNodeValue();
    final NodeList xmlProperties=((Element)xmlEntries.item(i)).getElementsByTagName("property");
    final Class<?> interfaceClass=loader.findClass(className,Object.class);
    final BeanInfo beanInfo=Introspector.getBeanInfo(interfaceClass,Introspector.IGNORE_ALL_BEANINFO);
    final HashMap<String,PropertyDescriptor> descriptorMap=new HashMap<>();
    for (    final PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {
      descriptorMap.put(pd.getName(),pd);
    }
    final Object instance=loader.newInstance(implementationName,Object.class);
    if (!interfaceClass.isInstance(instance)) {
      throw new IllegalArgumentException("Implementation class does not extend " + interfaceClass.getName());
    }
    for (int j=0, c2=xmlProperties.getLength(); j < c2; j++) {
      final Node xmlProperty=xmlProperties.item(j);
      final NamedNodeMap xmlPropertyAttributes=xmlProperty.getAttributes();
      final String propertyName=xmlPropertyAttributes.getNamedItem("name").getNodeValue();
      final String propertyValue=xmlPropertyAttributes.getNamedItem("value").getNodeValue();
      final PropertyDescriptor propertyDescriptor=descriptorMap.get(propertyName);
      if (propertyDescriptor == null) {
        throw new IllegalArgumentException(String.format(Locale.ENGLISH,"Unknown bean property %s in class %s",propertyName,interfaceClass.getName()));
      }
      final Method method=propertyDescriptor.getWriteMethod();
      if (method == null) {
        throw new IllegalArgumentException(String.format(Locale.ENGLISH,"Cannot set bean property %s in class %s (no write method available)",propertyName,interfaceClass.getName()));
      }
      method.invoke(instance,getValueFromString(propertyDescriptor.getPropertyType(),propertyValue));
    }
    entries.put(interfaceClass,instance);
  }
}
