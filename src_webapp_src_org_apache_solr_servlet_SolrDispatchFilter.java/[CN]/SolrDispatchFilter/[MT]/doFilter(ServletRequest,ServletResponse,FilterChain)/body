{
  if (abortErrorMessage != null) {
    ((HttpServletResponse)response).sendError(500,abortErrorMessage);
    return;
  }
  if (request instanceof HttpServletRequest) {
    HttpServletRequest req=(HttpServletRequest)request;
    HttpServletResponse resp=(HttpServletResponse)response;
    SolrRequestHandler handler=null;
    SolrQueryRequest solrReq=null;
    try {
      String path=req.getServletPath();
      if (req.getPathInfo() != null) {
        path+=req.getPathInfo();
      }
      if (pathPrefix != null && path.startsWith(pathPrefix)) {
        path=path.substring(pathPrefix.length());
      }
      int idx=path.indexOf(':');
      if (idx > 0) {
        path=path.substring(0,idx);
      }
      final SolrCore core;
      if (multicore != null && multicore.isEnabled()) {
        req.setAttribute("org.apache.solr.MultiCore",multicore);
        if (path.equals(multicore.getAdminPath())) {
          handler=multicore.getMultiCoreHandler();
          core=multicore.getAdminCore();
          if (core == null) {
            throw new RuntimeException("Can not find a valid core for the multicore admin handler");
          }
        }
 else {
          idx=path.indexOf("/",1);
          if (idx > 1) {
            String corename=path.substring(1,idx);
            path=path.substring(idx);
            core=multicore.getCore(corename);
          }
 else {
            core=null;
          }
        }
      }
 else {
        core=singlecore;
      }
      if (core != null) {
        final SolrConfig config=core.getSolrConfig();
        SolrRequestParsers parser=null;
        parser=parsers.get(core);
        if (parser == null) {
          parser=new SolrRequestParsers(config);
          parsers.put(core,parser);
        }
        if (handler == null && path.length() > 1) {
          handler=core.getRequestHandler(path);
          if (handler == null && parser.isHandleSelect()) {
            if ("/select".equals(path) || "/select/".equals(path)) {
              solrReq=parser.parse(core,path,req);
              String qt=solrReq.getParams().get(CommonParams.QT);
              if (qt != null && qt.startsWith("/")) {
                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid query type.  Do not use /select to access: " + qt);
              }
              handler=core.getRequestHandler(qt);
              if (handler == null) {
                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unknown handler: " + qt);
              }
            }
          }
        }
        if (handler != null) {
          if (solrReq == null) {
            solrReq=parser.parse(core,path,req);
          }
          final Method reqMethod=Method.getMethod(req.getMethod());
          if (Method.POST != reqMethod) {
            HttpCacheHeaderUtil.setCacheControlHeader(config,resp);
          }
          if (config.getHttpCachingConfig().isNever304() || !HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq,req,resp)) {
            SolrQueryResponse solrRsp=new SolrQueryResponse();
            this.execute(req,handler,solrReq,solrRsp);
            if (solrRsp.getException() != null) {
              sendError((HttpServletResponse)response,solrRsp.getException());
            }
 else {
              QueryResponseWriter responseWriter=core.getQueryResponseWriter(solrReq);
              response.setContentType(responseWriter.getContentType(solrReq,solrRsp));
              if (Method.HEAD != Method.getMethod(req.getMethod())) {
                if (responseWriter instanceof BinaryQueryResponseWriter) {
                  BinaryQueryResponseWriter binWriter=(BinaryQueryResponseWriter)responseWriter;
                  binWriter.write(response.getOutputStream(),solrReq,solrRsp);
                }
 else {
                  PrintWriter out=response.getWriter();
                  responseWriter.write(out,solrReq,solrRsp);
                }
              }
            }
          }
          return;
        }
 else {
          req.setAttribute("org.apache.solr.SolrCore",core);
          if (singlecore == null && path.startsWith("/admin")) {
            req.getRequestDispatcher(pathPrefix == null ? path : pathPrefix + path).forward(request,response);
            return;
          }
        }
      }
      log.fine("no handler or core retrieved for " + path + ", follow through...");
    }
 catch (    Throwable ex) {
      sendError((HttpServletResponse)response,ex);
      return;
    }
 finally {
      if (solrReq != null) {
        solrReq.close();
      }
    }
  }
  chain.doFilter(request,response);
}
