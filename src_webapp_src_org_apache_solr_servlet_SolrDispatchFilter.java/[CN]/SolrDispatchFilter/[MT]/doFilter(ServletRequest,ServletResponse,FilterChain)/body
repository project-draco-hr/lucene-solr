{
  if (abortErrorMessage != null) {
    ((HttpServletResponse)response).sendError(500,abortErrorMessage);
    return;
  }
  if (request instanceof HttpServletRequest) {
    SolrQueryRequest solrReq=null;
    HttpServletRequest req=(HttpServletRequest)request;
    HttpServletResponse resp=(HttpServletResponse)response;
    try {
      String path=req.getServletPath();
      if (req.getPathInfo() != null) {
        path+=req.getPathInfo();
      }
      if (pathPrefix != null && path.startsWith(pathPrefix)) {
        path=path.substring(pathPrefix.length());
      }
      int idx=path.indexOf(':');
      if (idx > 0) {
        path=path.substring(0,idx);
      }
      SolrRequestHandler handler=null;
      SolrCore core=singlecore;
      if (core == null) {
        if (path.equals(multicore.getAdminPath())) {
          handler=multicore.getMultiCoreHandler();
        }
 else {
          idx=path.indexOf("/",1);
          if (idx > 1) {
            String corename=path.substring(1,idx);
            path=path.substring(idx);
            core=multicore.getCore(corename);
          }
        }
      }
      if (core != null) {
        if (handler == null && path.length() > 1) {
          handler=core.getRequestHandler(path);
        }
        if (handler == null && handleSelect) {
          if ("/select".equals(path) || "/select/".equals(path)) {
            solrReq=parsers.parse(core,path,req);
            String qt=solrReq.getParams().get(CommonParams.QT);
            if (qt != null && qt.startsWith("/")) {
              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid query type.  Do not use /select to access: " + qt);
            }
            handler=core.getRequestHandler(qt);
            if (handler == null) {
              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unknown handler: " + qt);
            }
          }
        }
      }
      if (handler != null) {
        if (core == null) {
          core=multicore.getDefaultCore();
        }
        if (solrReq == null) {
          solrReq=parsers.parse(core,path,req);
        }
        final SolrConfig conf=core.getSolrConfig();
        final Method reqMethod=Method.getMethod(req.getMethod());
        if (Method.POST != reqMethod) {
          HttpCacheHeaderUtil.setCacheControlHeader(conf,resp);
        }
        if (!conf.getHttpCachingConfig().isNever304()) {
          if (HttpCacheHeaderUtil.doCacheHeaderValidation(solrReq,req,resp)) {
            return;
          }
        }
        SolrQueryResponse solrRsp=new SolrQueryResponse();
        this.execute(req,handler,solrReq,solrRsp);
        if (solrRsp.getException() != null) {
          sendError((HttpServletResponse)response,solrRsp.getException());
          return;
        }
        QueryResponseWriter responseWriter=core.getQueryResponseWriter(solrReq);
        response.setContentType(responseWriter.getContentType(solrReq,solrRsp));
        if (Method.HEAD == Method.getMethod(req.getMethod())) {
          return;
        }
        PrintWriter out=response.getWriter();
        responseWriter.write(out,solrReq,solrRsp);
        return;
      }
 else {
        req.setAttribute("org.apache.solr.SolrCore",core);
        if (singlecore == null && path.startsWith("/admin")) {
          req.getRequestDispatcher(path).forward(request,response);
          return;
        }
      }
    }
 catch (    Throwable ex) {
      sendError((HttpServletResponse)response,ex);
      return;
    }
 finally {
      if (solrReq != null) {
        solrReq.close();
      }
    }
  }
  chain.doFilter(request,response);
}
