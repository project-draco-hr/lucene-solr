{
  @SuppressWarnings("resource") final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);
  final TermToBytesRefAttribute bytesAtt=stream.getAttribute(TermToBytesRefAttribute.class);
  assertNotNull(bytesAtt);
  final TypeAttribute typeAtt=stream.getAttribute(TypeAttribute.class);
  assertNotNull(typeAtt);
  final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt=stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);
  assertNotNull(numericAtt);
  stream.reset();
  assertEquals(64,numericAtt.getValueSize());
  for (int shift=0; shift < 64; shift+=LegacyNumericUtils.PRECISION_STEP_DEFAULT) {
    assertTrue("New token is available",stream.incrementToken());
    assertEquals("Shift value wrong",shift,numericAtt.getShift());
    assertEquals("Term is incorrectly encoded",lvalue & ~((1L << shift) - 1L),LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));
    assertEquals("Term raw value is incorrectly encoded",lvalue & ~((1L << shift) - 1L),numericAtt.getRawValue());
    assertEquals("Type incorrect",(shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC,typeAtt.type());
  }
  assertFalse("More tokens available",stream.incrementToken());
  stream.end();
  stream.close();
}
