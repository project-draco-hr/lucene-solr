{
  boolean negateResult;
  if (a < 0.0) {
    a=-a;
    negateResult=true;
  }
 else {
    negateResult=false;
  }
  if (a <= ASIN_MAX_VALUE_FOR_TABS) {
    int index=(int)(a * ASIN_INDEXER + 0.5);
    double delta=a - index * ASIN_DELTA;
    double result=asinTab[index] + delta * (asinDer1DivF1Tab[index] + delta * (asinDer2DivF2Tab[index] + delta * (asinDer3DivF3Tab[index] + delta * asinDer4DivF4Tab[index])));
    return negateResult ? -result : result;
  }
 else {
    if (a < 1.0) {
      double t=(1.0 - a) * 0.5;
      double p=t * (ASIN_PS0 + t * (ASIN_PS1 + t * (ASIN_PS2 + t * (ASIN_PS3 + t * (ASIN_PS4 + t * ASIN_PS5)))));
      double q=1.0 + t * (ASIN_QS1 + t * (ASIN_QS2 + t * (ASIN_QS3 + t * ASIN_QS4)));
      double s=Math.sqrt(t);
      double z=s + s * (p / q);
      double result=ASIN_PIO2_HI - ((z + z) - ASIN_PIO2_LO);
      return negateResult ? -result : result;
    }
 else {
      if (a == 1.0) {
        return negateResult ? -Math.PI / 2 : Math.PI / 2;
      }
 else {
        return Double.NaN;
      }
    }
  }
}
