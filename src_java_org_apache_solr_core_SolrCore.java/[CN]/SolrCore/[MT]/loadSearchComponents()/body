{
  Map<String,SearchComponent> components=new HashMap<String,SearchComponent>();
  String xpath="searchComponent";
  NamedListPluginLoader<SearchComponent> loader=new NamedListPluginLoader<SearchComponent>(xpath,components);
  loader.load(solrConfig.getResourceLoader(),(NodeList)solrConfig.evaluate(xpath,XPathConstants.NODESET));
  final Map<String,Class<? extends SearchComponent>> standardcomponents=new HashMap<String,Class<? extends SearchComponent>>();
  standardcomponents.put(QueryComponent.COMPONENT_NAME,QueryComponent.class);
  standardcomponents.put(FacetComponent.COMPONENT_NAME,FacetComponent.class);
  standardcomponents.put(MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);
  standardcomponents.put(HighlightComponent.COMPONENT_NAME,HighlightComponent.class);
  standardcomponents.put(StatsComponent.COMPONENT_NAME,StatsComponent.class);
  standardcomponents.put(DebugComponent.COMPONENT_NAME,DebugComponent.class);
  for (  Map.Entry<String,Class<? extends SearchComponent>> entry : standardcomponents.entrySet()) {
    if (components.get(entry.getKey()) == null) {
      try {
        SearchComponent comp=entry.getValue().newInstance();
        comp.init(null);
        components.put(entry.getKey(),comp);
      }
 catch (      Exception e) {
        SolrConfig.severeErrors.add(e);
        SolrException.logOnce(log,null,e);
      }
    }
  }
  return components;
}
