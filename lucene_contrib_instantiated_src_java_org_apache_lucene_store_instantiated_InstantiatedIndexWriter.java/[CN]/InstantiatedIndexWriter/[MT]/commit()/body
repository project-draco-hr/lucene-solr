{
  boolean orderedTermsDirty=false;
  Set<InstantiatedTerm> dirtyTerms=new HashSet<InstantiatedTerm>(1000);
  Map<String,FieldSetting> fieldSettingsByFieldName=new HashMap<String,FieldSetting>();
  for (  String fieldName : fieldNameBuffer) {
    fieldSettingsByFieldName.put(fieldName,new FieldSetting(fieldName));
  }
  InstantiatedDocument[] documentsByNumber=new InstantiatedDocument[index.getDocumentsByNumber().length + termDocumentInformationFactoryByDocument.size()];
  System.arraycopy(index.getDocumentsByNumber(),0,documentsByNumber,0,index.getDocumentsByNumber().length);
  int documentNumber=index.getDocumentsByNumber().length;
  List<InstantiatedTerm> orderedTerms=new ArrayList<InstantiatedTerm>(index.getOrderedTerms().length + 5000);
  for (  InstantiatedTerm instantiatedTerm : index.getOrderedTerms()) {
    orderedTerms.add(instantiatedTerm);
  }
  Map<String,byte[]> normsByFieldNameAndDocumentNumber=new HashMap<String,byte[]>(index.getTermsByFieldAndText().size());
  Set<String> fieldNames=new HashSet<String>(20);
  fieldNames.addAll(index.getNormsByFieldNameAndDocumentNumber().keySet());
  fieldNames.addAll(fieldNameBuffer);
  for (  String field : index.getTermsByFieldAndText().keySet()) {
    byte[] norms=new byte[index.getDocumentsByNumber().length + termDocumentInformationFactoryByDocument.size()];
    byte[] oldNorms=index.getNormsByFieldNameAndDocumentNumber().get(field);
    if (oldNorms != null) {
      System.arraycopy(oldNorms,0,norms,0,oldNorms.length);
      Arrays.fill(norms,oldNorms.length,norms.length,similarity.encodeNormValue(1.0f));
    }
 else {
      Arrays.fill(norms,0,norms.length,similarity.encodeNormValue(1.0f));
    }
    normsByFieldNameAndDocumentNumber.put(field,norms);
    fieldNames.remove(field);
  }
  for (  String field : fieldNames) {
    byte[] norms=new byte[index.getDocumentsByNumber().length + termDocumentInformationFactoryByDocument.size()];
    Arrays.fill(norms,0,norms.length,similarity.encodeNormValue(1.0f));
    normsByFieldNameAndDocumentNumber.put(field,norms);
  }
  fieldNames.clear();
  index.setNormsByFieldNameAndDocumentNumber(normsByFieldNameAndDocumentNumber);
  for (  Map.Entry<InstantiatedDocument,Map<FieldSetting,Map<String,TermDocumentInformationFactory>>> eDocumentTermDocInfoByTermTextAndField : termDocumentInformationFactoryByDocument.entrySet()) {
    InstantiatedDocument document=eDocumentTermDocInfoByTermTextAndField.getKey();
    document.setDocumentNumber(documentNumber++);
    documentsByNumber[document.getDocumentNumber()]=document;
    int numFieldsWithTermVectorsInDocument=0;
    int termsInDocument=0;
    for (    Map.Entry<FieldSetting,Map<String,TermDocumentInformationFactory>> eFieldTermDocInfoFactoriesByTermText : eDocumentTermDocInfoByTermTextAndField.getValue().entrySet()) {
      if (eFieldTermDocInfoFactoriesByTermText.getKey().storeTermVector) {
        numFieldsWithTermVectorsInDocument+=eFieldTermDocInfoFactoriesByTermText.getValue().size();
      }
      termsInDocument+=eFieldTermDocInfoFactoriesByTermText.getValue().size();
      if (eFieldTermDocInfoFactoriesByTermText.getKey().indexed && !eFieldTermDocInfoFactoriesByTermText.getKey().omitNorms) {
        float norm=eFieldTermDocInfoFactoriesByTermText.getKey().boost;
        norm*=document.getDocument().getBoost();
        norm*=similarity.lengthNorm(eFieldTermDocInfoFactoriesByTermText.getKey().fieldName,eFieldTermDocInfoFactoriesByTermText.getKey().fieldLength);
        normsByFieldNameAndDocumentNumber.get(eFieldTermDocInfoFactoriesByTermText.getKey().fieldName)[document.getDocumentNumber()]=similarity.encodeNormValue(norm);
      }
 else {
        System.currentTimeMillis();
      }
    }
    Map<InstantiatedTerm,InstantiatedTermDocumentInformation> informationByTermOfCurrentDocument=new HashMap<InstantiatedTerm,InstantiatedTermDocumentInformation>(termsInDocument);
    Map<String,FieldSetting> documentFieldSettingsByFieldName=new HashMap<String,FieldSetting>(eDocumentTermDocInfoByTermTextAndField.getValue().size());
    for (    Map.Entry<FieldSetting,Map<String,TermDocumentInformationFactory>> eFieldSetting_TermDocInfoFactoriesByTermText : eDocumentTermDocInfoByTermTextAndField.getValue().entrySet()) {
      documentFieldSettingsByFieldName.put(eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName,eFieldSetting_TermDocInfoFactoriesByTermText.getKey());
      for (      Map.Entry<String,TermDocumentInformationFactory> eTermText_TermDocInfoFactory : eFieldSetting_TermDocInfoFactoriesByTermText.getValue().entrySet()) {
        InstantiatedTerm term;
        Map<String,InstantiatedTerm> termsByText=index.getTermsByFieldAndText().get(eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName);
        if (termsByText == null) {
          termsByText=new HashMap<String,InstantiatedTerm>(1000);
          index.getTermsByFieldAndText().put(eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName,termsByText);
          term=new InstantiatedTerm(eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName,eTermText_TermDocInfoFactory.getKey());
          termsByText.put(eTermText_TermDocInfoFactory.getKey(),term);
          int pos=Collections.binarySearch(orderedTerms,term,InstantiatedTerm.comparator);
          pos=-1 - pos;
          orderedTerms.add(pos,term);
          orderedTermsDirty=true;
        }
 else {
          term=termsByText.get(eTermText_TermDocInfoFactory.getKey());
          if (term == null) {
            term=new InstantiatedTerm(eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName,eTermText_TermDocInfoFactory.getKey());
            termsByText.put(eTermText_TermDocInfoFactory.getKey(),term);
            int pos=Collections.binarySearch(orderedTerms,term,InstantiatedTerm.comparator);
            pos=-1 - pos;
            orderedTerms.add(pos,term);
            orderedTermsDirty=true;
          }
        }
        int[] positions=new int[eTermText_TermDocInfoFactory.getValue().termPositions.size()];
        for (int i=0; i < positions.length; i++) {
          positions[i]=eTermText_TermDocInfoFactory.getValue().termPositions.get(i);
        }
        byte[][] payloads=new byte[eTermText_TermDocInfoFactory.getValue().payloads.size()][];
        for (int i=0; i < payloads.length; i++) {
          payloads[i]=eTermText_TermDocInfoFactory.getValue().payloads.get(i);
        }
        InstantiatedTermDocumentInformation info=new InstantiatedTermDocumentInformation(term,document,positions,payloads);
        InstantiatedTermDocumentInformation[] associatedDocuments;
        if (term.getAssociatedDocuments() != null) {
          associatedDocuments=new InstantiatedTermDocumentInformation[term.getAssociatedDocuments().length + 1];
          System.arraycopy(term.getAssociatedDocuments(),0,associatedDocuments,0,term.getAssociatedDocuments().length);
        }
 else {
          associatedDocuments=new InstantiatedTermDocumentInformation[1];
        }
        associatedDocuments[associatedDocuments.length - 1]=info;
        term.setAssociatedDocuments(associatedDocuments);
        informationByTermOfCurrentDocument.put(term,info);
        dirtyTerms.add(term);
      }
      if (eFieldSetting_TermDocInfoFactoriesByTermText.getKey().storeOffsetWithTermVector) {
        for (        Map.Entry<InstantiatedTerm,InstantiatedTermDocumentInformation> e : informationByTermOfCurrentDocument.entrySet()) {
          if (eFieldSetting_TermDocInfoFactoriesByTermText.getKey().fieldName.equals(e.getKey().field())) {
            TermDocumentInformationFactory factory=eFieldSetting_TermDocInfoFactoriesByTermText.getValue().get(e.getKey().text());
            e.getValue().setTermOffsets(factory.termOffsets.toArray(new TermVectorOffsetInfo[factory.termOffsets.size()]));
          }
        }
      }
    }
    Map<String,List<InstantiatedTermDocumentInformation>> termDocumentInformationsByField=new HashMap<String,List<InstantiatedTermDocumentInformation>>();
    for (    Map.Entry<InstantiatedTerm,InstantiatedTermDocumentInformation> eTerm_TermDocumentInformation : informationByTermOfCurrentDocument.entrySet()) {
      List<InstantiatedTermDocumentInformation> termDocumentInformations=termDocumentInformationsByField.get(eTerm_TermDocumentInformation.getKey().field());
      if (termDocumentInformations == null) {
        termDocumentInformations=new ArrayList<InstantiatedTermDocumentInformation>();
        termDocumentInformationsByField.put(eTerm_TermDocumentInformation.getKey().field(),termDocumentInformations);
      }
      termDocumentInformations.add(eTerm_TermDocumentInformation.getValue());
    }
    for (    Map.Entry<String,List<InstantiatedTermDocumentInformation>> eField_TermDocInfos : termDocumentInformationsByField.entrySet()) {
      Collections.sort(eField_TermDocInfos.getValue(),new Comparator<InstantiatedTermDocumentInformation>(){
        public int compare(        InstantiatedTermDocumentInformation instantiatedTermDocumentInformation,        InstantiatedTermDocumentInformation instantiatedTermDocumentInformation1){
          return instantiatedTermDocumentInformation.getTerm().getTerm().compareTo(instantiatedTermDocumentInformation1.getTerm().getTerm());
        }
      }
);
      if (documentFieldSettingsByFieldName.get(eField_TermDocInfos.getKey()).storeTermVector) {
        if (document.getVectorSpace() == null) {
          document.setVectorSpace(new HashMap<String,List<InstantiatedTermDocumentInformation>>(documentFieldSettingsByFieldName.size()));
        }
        document.getVectorSpace().put(eField_TermDocInfos.getKey(),eField_TermDocInfos.getValue());
      }
    }
    fieldSettingsByFieldName.putAll(documentFieldSettingsByFieldName);
  }
  for (  InstantiatedTerm term : dirtyTerms) {
    Arrays.sort(term.getAssociatedDocuments(),InstantiatedTermDocumentInformation.documentNumberComparator);
  }
  index.setDocumentsByNumber(documentsByNumber);
  index.setOrderedTerms(orderedTerms.toArray(new InstantiatedTerm[orderedTerms.size()]));
  for (  FieldSetting fieldSetting : fieldSettingsByFieldName.values()) {
    index.getFieldSettings().merge(fieldSetting);
  }
  if (orderedTermsDirty) {
    for (int i=0; i < index.getOrderedTerms().length; i++) {
      index.getOrderedTerms()[i].setTermIndex(i);
    }
  }
  IndexReader indexDeleter=index.indexReaderFactory();
  if (unflushedDeletions.size() > 0) {
    for (    Term term : unflushedDeletions) {
      indexDeleter.deleteDocuments(term);
    }
    unflushedDeletions.clear();
  }
  unflushedDocuments.clear();
  termDocumentInformationFactoryByDocument.clear();
  fieldNameBuffer.clear();
  if (index.getDeletedDocuments() != null) {
    BitVector deletedDocuments=new BitVector(index.getDocumentsByNumber().length);
    for (int i=0; i < index.getDeletedDocuments().size(); i++) {
      if (index.getDeletedDocuments().get(i)) {
        deletedDocuments.set(i);
      }
    }
    index.setDeletedDocuments(deletedDocuments);
  }
  index.setVersion(System.currentTimeMillis());
  indexDeleter.close();
}
