{
  final int count=250;
  final int LENGTH_MASK=0xffff;
  Random r=random;
  final long seed=r.nextLong();
  Random gen=new Random(seed);
  int totalLength=0;
  int duration;
  Date end;
  Date veryStart=new Date();
  Date start=new Date();
  Transaction txn=env.beginTransaction(null,null);
  Directory store=null;
  if (VERBOSE)   System.out.println("Writing files byte by byte");
  try {
    store=new JEDirectory(txn,index,blocks);
    for (int i=0; i < count; i++) {
      String name=i + ".dat";
      int length=gen.nextInt() & LENGTH_MASK;
      IndexOutput file=store.createOutput(name);
      totalLength+=length;
      for (int j=0; j < length; j++) {
        byte b=(byte)(gen.nextInt() & 0x7F);
        file.writeByte(b);
      }
      file.close();
    }
  }
 catch (  IOException e) {
    txn.abort();
    txn=null;
    throw e;
  }
 finally {
    if (txn != null)     txn.commit();
    store.close();
  }
  end=new Date();
  if (VERBOSE) {
    duration=(int)(end.getTime() - start.getTime());
    System.out.print(duration);
    System.out.print(" total milliseconds to read, ");
    System.out.print(totalLength / duration);
    System.out.println(" kb/s");
  }
  try {
    txn=env.beginTransaction(null,null);
    store=new JEDirectory(txn,index,blocks);
    gen=new Random(seed);
    start=new Date();
    for (int i=0; i < count; i++) {
      if (i % 2 == 0) {
        String name=i + ".dat";
        store.deleteFile(name);
      }
    }
  }
 catch (  IOException e) {
    txn.abort();
    txn=null;
    throw e;
  }
catch (  DatabaseException e) {
    if (txn != null) {
      txn.abort();
      txn=null;
    }
    throw e;
  }
 finally {
    if (txn != null)     txn.commit();
    store.close();
  }
  end=new Date();
  if (VERBOSE) {
    System.out.print(end.getTime() - start.getTime());
    System.out.println(" total milliseconds to delete even files");
    duration=(int)(end.getTime() - start.getTime());
    System.out.print(duration);
    System.out.print(" total milliseconds to create, ");
    System.out.print(totalLength / duration);
    System.out.println(" kb/s");
  }
  try {
    txn=env.beginTransaction(null,null);
    store=new JEDirectory(txn,index,blocks);
    gen=new Random(seed);
    start=new Date();
    for (int i=0; i < count; i++) {
      int length=gen.nextInt() & LENGTH_MASK;
      if (i % 2 != 0) {
        String name=i + ".dat";
        IndexInput file=store.openInput(name);
        if (file.length() != length)         throw new Exception("length incorrect");
        for (int j=0; j < length; j++) {
          byte b=(byte)(gen.nextInt() & 0x7F);
          if (file.readByte() != b)           throw new Exception("contents incorrect");
        }
        file.close();
      }
 else {
        for (int j=0; j < length; j++) {
          gen.nextInt();
        }
      }
    }
  }
 catch (  IOException e) {
    txn.abort();
    txn=null;
    throw e;
  }
catch (  DatabaseException e) {
    if (txn != null) {
      txn.abort();
      txn=null;
    }
    throw e;
  }
 finally {
    if (txn != null)     txn.commit();
    store.close();
  }
  end=new Date();
  if (VERBOSE) {
    duration=(int)(end.getTime() - start.getTime());
    System.out.print(duration);
    System.out.print(" total milliseconds to read, ");
    System.out.print(totalLength / duration);
    System.out.println(" kb/s");
  }
  try {
    txn=env.beginTransaction(null,null);
    store=new JEDirectory(txn,index,blocks);
    gen=new Random(seed);
    start=new Date();
    for (int i=0; i < count; i++) {
      if (i % 2 != 0) {
        String name=i + ".dat";
        store.deleteFile(name);
      }
    }
  }
 catch (  IOException e) {
    txn.abort();
    txn=null;
    throw e;
  }
catch (  DatabaseException e) {
    if (txn != null) {
      txn.abort();
      txn=null;
    }
    throw e;
  }
 finally {
    if (txn != null)     txn.commit();
    store.close();
  }
  end=new Date();
  if (VERBOSE) {
    System.out.print(end.getTime() - start.getTime());
    System.out.println(" total milliseconds to delete");
    System.out.print(end.getTime() - veryStart.getTime());
    System.out.println(" total milliseconds");
  }
  Cursor cursor=null;
  try {
    cursor=index.openCursor(null,null);
    DatabaseEntry foundKey=new DatabaseEntry();
    DatabaseEntry foundData=new DatabaseEntry();
    if (cursor.getNext(foundKey,foundData,LockMode.DEFAULT) == OperationStatus.SUCCESS) {
      fail("index database is not empty");
    }
  }
 catch (  DatabaseException e) {
    throw e;
  }
 finally {
    if (cursor != null)     cursor.close();
  }
  cursor=null;
  try {
    cursor=blocks.openCursor(null,null);
    DatabaseEntry foundKey=new DatabaseEntry();
    DatabaseEntry foundData=new DatabaseEntry();
    if (cursor.getNext(foundKey,foundData,LockMode.DEFAULT) == OperationStatus.SUCCESS) {
      fail("blocks database is not empty");
    }
  }
 catch (  DatabaseException e) {
    throw e;
  }
 finally {
    if (cursor != null)     cursor.close();
  }
}
