{
  float matchCost=2;
  if (reqTwoPhaseIterator != null) {
    matchCost+=reqTwoPhaseIterator.matchCost();
  }
  final float exclMatchCost=ADVANCE_COST + (exclTwoPhaseIterator == null ? 0 : exclTwoPhaseIterator.matchCost());
  float ratio;
  if (reqApproximation.cost() <= 0) {
    ratio=1f;
  }
 else   if (exclApproximation.cost() <= 0) {
    ratio=0f;
  }
 else {
    ratio=(float)Math.min(reqApproximation.cost(),exclApproximation.cost()) / reqApproximation.cost();
  }
  matchCost+=ratio * exclMatchCost;
  return matchCost;
}
