{
  noDocs=atLeast(4096);
  distance=(1 << 30) / noDocs;
  directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(TestUtil.nextInt(random(),100,1000)).setMergePolicy(newLogMergePolicy()));
  final LegacyFieldType storedInt=new LegacyFieldType(LegacyIntField.TYPE_NOT_STORED);
  storedInt.setStored(true);
  storedInt.freeze();
  final LegacyFieldType storedInt8=new LegacyFieldType(storedInt);
  storedInt8.setNumericPrecisionStep(8);
  final LegacyFieldType storedInt4=new LegacyFieldType(storedInt);
  storedInt4.setNumericPrecisionStep(4);
  final LegacyFieldType storedInt2=new LegacyFieldType(storedInt);
  storedInt2.setNumericPrecisionStep(2);
  LegacyIntField field8=new LegacyIntField("field8",0,storedInt8), field4=new LegacyIntField("field4",0,storedInt4), field2=new LegacyIntField("field2",0,storedInt2);
  Document doc=new Document();
  doc.add(field8);
  doc.add(field4);
  doc.add(field2);
  for (int l=0; l < noDocs; l++) {
    int val=distance * l + startOffset;
    field8.setIntValue(val);
    field4.setIntValue(val);
    field2.setIntValue(val);
    val=l - (noDocs / 2);
    writer.addDocument(doc);
  }
  Map<String,Type> map=new HashMap<>();
  map.put("field2",Type.LEGACY_INTEGER);
  map.put("field4",Type.LEGACY_INTEGER);
  map.put("field8",Type.LEGACY_INTEGER);
  reader=UninvertingReader.wrap(writer.getReader(),map);
  searcher=newSearcher(reader);
  writer.close();
}
