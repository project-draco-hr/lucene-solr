{
  HashArray temp=this.hashArrays[this.hashArrays.length - 1];
  for (int i=this.hashArrays.length - 1; i > 0; i--) {
    this.hashArrays[i]=this.hashArrays[i - 1];
  }
  this.capacity*=2;
  this.hashArrays[0]=new HashArray(this.capacity);
  for (int i=1; i < this.hashArrays.length; i++) {
    int[] sourceOffsetArray=this.hashArrays[i].offsets;
    int[] sourceCidsArray=this.hashArrays[i].cids;
    for (int k=0; k < sourceOffsetArray.length; k++) {
      for (int j=0; j < i && sourceOffsetArray[k] != 0; j++) {
        int[] targetOffsetArray=this.hashArrays[j].offsets;
        int[] targetCidsArray=this.hashArrays[j].cids;
        int newIndex=indexFor(stringHashCode(this.labelRepository,sourceOffsetArray[k]),targetOffsetArray.length);
        if (targetOffsetArray[newIndex] == 0) {
          targetOffsetArray[newIndex]=sourceOffsetArray[k];
          targetCidsArray[newIndex]=sourceCidsArray[k];
          sourceOffsetArray[k]=0;
        }
      }
    }
  }
  for (int i=0; i < temp.offsets.length; i++) {
    int offset=temp.offsets[i];
    if (offset > 0) {
      int hash=stringHashCode(this.labelRepository,offset);
      addLabelOffset(hash,temp.cids[i],offset);
    }
  }
  CollisionMap oldCollisionMap=this.collisionMap;
  this.collisionMap=new CollisionMap(oldCollisionMap.capacity(),this.labelRepository);
  this.threshold=(int)(this.capacity * this.loadFactor);
  Iterator<CollisionMap.Entry> it=oldCollisionMap.entryIterator();
  while (it.hasNext()) {
    CollisionMap.Entry e=it.next();
    addLabelOffset(stringHashCode(this.labelRepository,e.offset),e.cid,e.offset);
  }
}
