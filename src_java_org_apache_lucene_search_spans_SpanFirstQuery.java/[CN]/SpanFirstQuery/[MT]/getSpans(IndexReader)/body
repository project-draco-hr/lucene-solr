{
  return new Spans(){
    private Spans spans=match.getSpans(reader);
    @Override public boolean next() throws IOException {
      while (spans.next()) {
        if (end() <= end)         return true;
      }
      return false;
    }
    @Override public boolean skipTo(    int target) throws IOException {
      if (!spans.skipTo(target))       return false;
      return spans.end() <= end || next();
    }
    @Override public int doc(){
      return spans.doc();
    }
    @Override public int start(){
      return spans.start();
    }
    @Override public int end(){
      return spans.end();
    }
    @Override public Collection<byte[]> getPayload() throws IOException {
      ArrayList<byte[]> result=null;
      if (spans.isPayloadAvailable()) {
        result=new ArrayList<byte[]>(spans.getPayload());
      }
      return result;
    }
    @Override public boolean isPayloadAvailable(){
      return spans.isPayloadAvailable();
    }
    @Override public String toString(){
      return "spans(" + SpanFirstQuery.this.toString() + ")";
    }
  }
;
}
