{
  SimpleOrderedMap<Object> properties=new SimpleOrderedMap<Object>();
  properties.add(FIELD_NAME,getName());
  properties.add(TYPE_NAME,getType().getTypeName());
  if (showDefaults) {
    if (null != getDefaultValue()) {
      properties.add(DEFAULT_VALUE,getDefaultValue());
    }
    properties.add(getPropertyName(INDEXED),indexed());
    properties.add(getPropertyName(STORED),stored());
    properties.add(getPropertyName(DOC_VALUES),hasDocValues());
    properties.add(getPropertyName(STORE_TERMVECTORS),storeTermVector());
    properties.add(getPropertyName(STORE_TERMPOSITIONS),storeTermPositions());
    properties.add(getPropertyName(STORE_TERMOFFSETS),storeTermOffsets());
    properties.add(getPropertyName(OMIT_NORMS),omitNorms());
    properties.add(getPropertyName(OMIT_TF_POSITIONS),omitTermFreqAndPositions());
    properties.add(getPropertyName(OMIT_POSITIONS),omitPositions());
    properties.add(getPropertyName(STORE_OFFSETS),storeOffsetsWithPositions());
    properties.add(getPropertyName(MULTIVALUED),multiValued());
    if (sortMissingFirst()) {
      properties.add(getPropertyName(SORT_MISSING_FIRST),sortMissingFirst());
    }
 else     if (sortMissingLast()) {
      properties.add(getPropertyName(SORT_MISSING_LAST),sortMissingLast());
    }
    properties.add(getPropertyName(REQUIRED),isRequired());
    properties.add(getPropertyName(TOKENIZED),isTokenized());
  }
 else {
    for (    Map.Entry<String,String> arg : args.entrySet()) {
      String key=arg.getKey();
      String value=arg.getValue();
      if (key.equals(DEFAULT_VALUE)) {
        properties.add(key,value);
      }
 else {
        properties.add(key,StrUtils.parseBool(value,false));
      }
    }
  }
  return properties;
}
