{
  Directory dir=newDirectory();
  Directory aux=newDirectory();
  Directory aux2=newDirectory();
  setUpDirs(dir,aux,true);
  IndexWriter writer=newWriter(aux2,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100).setMergePolicy(newLogMergePolicy(10)));
  writer.addIndexes(aux);
  assertEquals(30,writer.maxDoc());
  assertEquals(3,writer.getSegmentCount());
  writer.close();
  IndexWriterConfig dontMergeConfig=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES);
  writer=new IndexWriter(aux,dontMergeConfig);
  for (int i=0; i < 27; i++) {
    writer.deleteDocuments(new Term("id","" + i));
  }
  writer.close();
  IndexReader reader=IndexReader.open(aux);
  assertEquals(3,reader.numDocs());
  reader.close();
  dontMergeConfig=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES);
  writer=new IndexWriter(aux2,dontMergeConfig);
  for (int i=0; i < 8; i++) {
    writer.deleteDocuments(new Term("id","" + i));
  }
  writer.close();
  reader=IndexReader.open(aux2);
  assertEquals(22,reader.numDocs());
  reader.close();
  writer=newWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(6).setMergePolicy(newLogMergePolicy(4)));
  writer.addIndexes(aux,aux2);
  assertEquals(1040,writer.maxDoc());
  assertEquals(1000,writer.getDocCount(0));
  writer.close();
  dir.close();
  aux.close();
  aux2.close();
}
