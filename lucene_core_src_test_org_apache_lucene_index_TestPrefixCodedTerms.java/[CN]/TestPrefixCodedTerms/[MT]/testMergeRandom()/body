{
  PrefixCodedTerms pb[]=new PrefixCodedTerms[TestUtil.nextInt(random(),2,10)];
  Set<Term> superSet=new TreeSet<>();
  for (int i=0; i < pb.length; i++) {
    Set<Term> terms=new TreeSet<>();
    int nterms=TestUtil.nextInt(random(),0,10000);
    for (int j=0; j < nterms; j++) {
      String field=TestUtil.randomUnicodeString(random(),2);
      Term term=new Term(field,TestUtil.randomUnicodeString(random(),4));
      terms.add(term);
    }
    superSet.addAll(terms);
    PrefixCodedTerms.Builder b=new PrefixCodedTerms.Builder();
    for (    Term ref : terms) {
      b.add(ref);
    }
    pb[i]=b.finish();
  }
  Iterator<Term> expected=superSet.iterator();
  MergedPrefixCodedTermsIterator actual=new MergedPrefixCodedTermsIterator(Arrays.asList(pb));
  String field="";
  BytesRef lastTerm=null;
  BytesRef term;
  while ((term=actual.next()) != null) {
    if (field != actual.field()) {
      field=actual.field();
      lastTerm=null;
    }
    if (lastTerm != null && lastTerm.equals(term)) {
      continue;
    }
    lastTerm=BytesRef.deepCopyOf(term);
    assertTrue(expected.hasNext());
    Term expectedTerm=expected.next();
    assertEquals(expectedTerm,new Term(field,term));
  }
  assertFalse(expected.hasNext());
}
