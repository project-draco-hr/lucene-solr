{
  StreamExpression expression=new StreamExpression(factory.getFunctionName(this.getClass()));
  expression.addParameter(collection);
  if (includeStreams) {
    if (tupleStream instanceof Expressible) {
      expression.addParameter(((Expressible)tupleStream).toExpression(factory));
    }
 else {
      throw new IOException("This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression");
    }
  }
 else {
    expression.addParameter("<stream>");
  }
  Set<Map.Entry<String,String>> entries=queryParams.entrySet();
  for (  Map.Entry param : entries) {
    String value=param.getValue().toString();
    value=value.replace("\"","\\\"");
    expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(),value));
  }
  if (metrics != null) {
    for (    Metric metric : metrics) {
      expression.addParameter(metric.toExpression(factory));
    }
  }
  expression.addParameter(new StreamExpressionNamedParameter("zkHost",zkHost));
  expression.addParameter(new StreamExpressionNamedParameter("gather",zkHost));
  expression.addParameter(new StreamExpressionNamedParameter("walk",traverseFrom + "->" + traverseTo));
  expression.addParameter(new StreamExpressionNamedParameter("trackTraversal",Boolean.toString(trackTraversal)));
  StringBuilder buf=new StringBuilder();
  for (  Traversal.Scatter sc : scatter) {
    if (buf.length() > 0) {
      buf.append(",");
    }
    buf.append(sc.toString());
  }
  expression.addParameter(new StreamExpressionNamedParameter("scatter",buf.toString()));
  return expression;
}
