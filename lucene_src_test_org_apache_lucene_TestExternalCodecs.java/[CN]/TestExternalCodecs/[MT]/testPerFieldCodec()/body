{
  final int NUM_DOCS=atLeast(173);
  MockDirectoryWrapper dir=newDirectory();
  dir.setCheckIndexOnClose(false);
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setCodec(new CustomPerFieldCodec()).setMergePolicy(newLogMergePolicy(3)));
  Document doc=new Document();
  doc.add(newField("field1","this field uses the standard codec as the test",TextField.TYPE_UNSTORED));
  Field field2=newField("field2","this field uses the pulsing codec as the test",TextField.TYPE_UNSTORED);
  doc.add(field2);
  Field idField=newField("id","",StringField.TYPE_UNSTORED);
  doc.add(idField);
  for (int i=0; i < NUM_DOCS; i++) {
    idField.setValue("" + i);
    w.addDocument(doc);
    if ((i + 1) % 10 == 0) {
      w.commit();
    }
  }
  if (VERBOSE) {
    System.out.println("TEST: now delete id=77");
  }
  w.deleteDocuments(new Term("id","77"));
  IndexReader r=IndexReader.open(w,true);
  IndexReader[] subs=r.getSequentialSubReaders();
  assertEquals(NUM_DOCS - 1,r.numDocs());
  IndexSearcher s=newSearcher(r);
  assertEquals(NUM_DOCS - 1,s.search(new TermQuery(new Term("field1","standard")),1).totalHits);
  assertEquals(NUM_DOCS - 1,s.search(new TermQuery(new Term("field2","pulsing")),1).totalHits);
  r.close();
  if (VERBOSE) {
    System.out.println("\nTEST: now delete 2nd doc");
  }
  w.deleteDocuments(new Term("id","44"));
  w.forceMerge(1);
  r=IndexReader.open(w,true);
  assertEquals(NUM_DOCS - 2,r.maxDoc());
  assertEquals(NUM_DOCS - 2,r.numDocs());
  s=newSearcher(r);
  assertEquals(NUM_DOCS - 2,s.search(new TermQuery(new Term("field1","standard")),1).totalHits);
  assertEquals(NUM_DOCS - 2,s.search(new TermQuery(new Term("field2","pulsing")),1).totalHits);
  assertEquals(1,s.search(new TermQuery(new Term("id","76")),1).totalHits);
  assertEquals(0,s.search(new TermQuery(new Term("id","77")),1).totalHits);
  assertEquals(0,s.search(new TermQuery(new Term("id","44")),1).totalHits);
  r.close();
  w.close();
  dir.close();
}
