{
  CodecProvider provider=new MyCodecs();
  Codec pulsing=new PulsingReverseTermsCodec();
  provider.register(pulsing);
  final int NUM_DOCS=173;
  Directory dir=newDirectory();
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,true)).setCodecProvider(provider).setMergePolicy(newLogMergePolicy(3)));
  w.setInfoStream(VERBOSE ? System.out : null);
  Document doc=new Document();
  doc.add(newField("field1","this field uses the standard codec as the test",Field.Store.NO,Field.Index.ANALYZED));
  Field field2=newField("field2","this field uses the pulsing codec as the test",Field.Store.NO,Field.Index.ANALYZED);
  provider.setFieldCodec(field2.name(),pulsing.name);
  doc.add(field2);
  Field idField=newField("id","",Field.Store.NO,Field.Index.NOT_ANALYZED);
  provider.setFieldCodec(idField.name(),pulsing.name);
  doc.add(idField);
  for (int i=0; i < NUM_DOCS; i++) {
    idField.setValue("" + i);
    w.addDocument(doc);
    if ((i + 1) % 10 == 0) {
      w.commit();
    }
  }
  w.deleteDocuments(new Term("id","77"));
  IndexReader r=IndexReader.open(w);
  IndexReader[] subs=r.getSequentialSubReaders();
  for (int i=0; i < subs.length; i++) {
    testTermsOrder(subs[i]);
  }
  testTermsOrder(r);
  assertEquals(NUM_DOCS - 1,r.numDocs());
  IndexSearcher s=new IndexSearcher(r);
  assertEquals(NUM_DOCS - 1,s.search(new TermQuery(new Term("field1","standard")),1).totalHits);
  assertEquals(NUM_DOCS - 1,s.search(new TermQuery(new Term("field2","pulsing")),1).totalHits);
  r.close();
  s.close();
  w.deleteDocuments(new Term("id","44"));
  w.optimize();
  r=IndexReader.open(w);
  assertEquals(NUM_DOCS - 2,r.maxDoc());
  assertEquals(NUM_DOCS - 2,r.numDocs());
  s=new IndexSearcher(r);
  assertEquals(NUM_DOCS - 2,s.search(new TermQuery(new Term("field1","standard")),1).totalHits);
  assertEquals(NUM_DOCS - 2,s.search(new TermQuery(new Term("field2","pulsing")),1).totalHits);
  assertEquals(1,s.search(new TermQuery(new Term("id","76")),1).totalHits);
  assertEquals(0,s.search(new TermQuery(new Term("id","77")),1).totalHits);
  assertEquals(0,s.search(new TermQuery(new Term("id","44")),1).totalHits);
  testTermsOrder(r);
  r.close();
  s.close();
  w.close();
  dir.close();
}
