{
  long count=0;
  BytesRefBuilder priorTerm=new BytesRefBuilder();
  priorTerm.grow(maxLength);
  BytesRef indexTerm=new BytesRef();
  long startFP=data.getFilePointer();
  PagedBytes pagedBytes=new PagedBytes(15);
  MonotonicBlockPackedWriter addresses=new MonotonicBlockPackedWriter(data,BLOCK_SIZE);
  for (  BytesRef b : values) {
    int termPosition=(int)(count & REVERSE_INTERVAL_MASK);
    if (termPosition == 0) {
      int len=StringHelper.sortKeyLength(priorTerm.get(),b);
      indexTerm.bytes=b.bytes;
      indexTerm.offset=b.offset;
      indexTerm.length=len;
      addresses.add(pagedBytes.copyUsingLengthPrefix(indexTerm));
    }
 else     if (termPosition == REVERSE_INTERVAL_MASK) {
      priorTerm.copyBytes(b);
    }
    count++;
  }
  addresses.finish();
  long numBytes=pagedBytes.getPointer();
  pagedBytes.freeze(true);
  PagedBytesDataInput in=pagedBytes.getDataInput();
  meta.writeLong(startFP);
  data.writeVLong(numBytes);
  data.copyBytes(in,numBytes);
}
