{
  long count=0;
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  long gcd=0;
  boolean missing=false;
  HashSet<Long> uniqueValues=null;
  if (optimizeStorage) {
    uniqueValues=new HashSet<>();
    for (    Number nv : values) {
      final long v;
      if (nv == null) {
        v=0;
        missing=true;
      }
 else {
        v=nv.longValue();
      }
      if (gcd != 1) {
        if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {
          gcd=1;
        }
 else         if (count != 0) {
          gcd=MathUtil.gcd(gcd,v - minValue);
        }
      }
      minValue=Math.min(minValue,v);
      maxValue=Math.max(maxValue,v);
      if (uniqueValues != null) {
        if (uniqueValues.add(v)) {
          if (uniqueValues.size() > 256) {
            uniqueValues=null;
          }
        }
      }
      ++count;
    }
  }
 else {
    for (    Number nv : values) {
      long v=nv.longValue();
      minValue=Math.min(minValue,v);
      maxValue=Math.max(maxValue,v);
      ++count;
    }
  }
  final long delta=maxValue - minValue;
  final int deltaBitsRequired=DirectWriter.unsignedBitsRequired(delta);
  final int tableBitsRequired=uniqueValues == null ? Integer.MAX_VALUE : DirectWriter.bitsRequired(uniqueValues.size() - 1);
  final int format;
  if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {
    format=TABLE_COMPRESSED;
  }
 else   if (gcd != 0 && gcd != 1) {
    final long gcdDelta=(maxValue - minValue) / gcd;
    final long gcdBitsRequired=DirectWriter.unsignedBitsRequired(gcdDelta);
    format=gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;
  }
 else {
    format=DELTA_COMPRESSED;
  }
  meta.writeVInt(field.number);
  meta.writeByte(Lucene410DocValuesFormat.NUMERIC);
  meta.writeVInt(format);
  if (missing) {
    meta.writeLong(data.getFilePointer());
    writeMissingBitset(values);
  }
 else {
    meta.writeLong(-1L);
  }
  meta.writeLong(data.getFilePointer());
  meta.writeVLong(count);
switch (format) {
case GCD_COMPRESSED:
    meta.writeLong(minValue);
  meta.writeLong(gcd);
final long maxDelta=(maxValue - minValue) / gcd;
final int bits=DirectWriter.unsignedBitsRequired(maxDelta);
meta.writeVInt(bits);
final DirectWriter quotientWriter=DirectWriter.getInstance(data,count,bits);
for (Number nv : values) {
long value=nv == null ? 0 : nv.longValue();
quotientWriter.add((value - minValue) / gcd);
}
quotientWriter.finish();
break;
case DELTA_COMPRESSED:
final long minDelta=delta < 0 ? 0 : minValue;
meta.writeLong(minDelta);
meta.writeVInt(deltaBitsRequired);
final DirectWriter writer=DirectWriter.getInstance(data,count,deltaBitsRequired);
for (Number nv : values) {
long v=nv == null ? 0 : nv.longValue();
writer.add(v - minDelta);
}
writer.finish();
break;
case TABLE_COMPRESSED:
final Long[] decode=uniqueValues.toArray(new Long[uniqueValues.size()]);
Arrays.sort(decode);
final HashMap<Long,Integer> encode=new HashMap<>();
meta.writeVInt(decode.length);
for (int i=0; i < decode.length; i++) {
meta.writeLong(decode[i]);
encode.put(decode[i],i);
}
meta.writeVInt(tableBitsRequired);
final DirectWriter ordsWriter=DirectWriter.getInstance(data,count,tableBitsRequired);
for (Number nv : values) {
ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));
}
ordsWriter.finish();
break;
default :
throw new AssertionError();
}
meta.writeLong(data.getFilePointer());
}
