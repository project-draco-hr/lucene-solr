{
  int loopFactor=integers / facetIDs.length;
  System.out.println("\nEstimating ~" + integers + " Integers compression time by\nEncoding/decoding facets' ID payload of docID = "+ docID+ " (unsorted, length of: "+ facetIDs.length+ ") "+ loopFactor+ " times.");
  System.out.println();
  String header=String.format(headerFormat,"Encoder","Bits/Int","Encode Time","Encode Time","Decode Time","Decode Time");
  System.out.println(header);
  String header2=String.format(headerFormat,"","","[milliseconds]","[microsecond / int]","[milliseconds]","[microsecond / int]");
  System.out.println(header2);
  char[] separator=header.toCharArray();
  Arrays.fill(separator,'-');
  System.out.println(separator);
  encoderTest(new VInt8IntEncoder(),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))),facetIDs,loopFactor);
  encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))),facetIDs,loopFactor);
  System.out.println();
}
