{
  int STATUS_OK=200;
  int FORBIDDEN=403;
  int PROMPT_FOR_CREDENTIALS=401;
  String jsonRules="{" + "  user-role : {" + "    steve: [dev,user],"+ "    tim: [dev,admin],"+ "    joe: [user],"+ "    noble:[dev,user]"+ "  },"+ "  permissions : ["+ "    {name:'schema-edit',"+ "     role:admin},"+ "    {name:'collection-admin-read',"+ "    role:null},"+ "    {name:collection-admin-edit ,"+ "    role:admin},"+ "    {name:mycoll_update,"+ "      collection:mycoll,"+ "      path:'/update/*',"+ "      role:[dev,admin]"+ "    }]}";
  Map initConfig=(Map)Utils.fromJSON(jsonRules.getBytes(StandardCharsets.UTF_8));
  RuleBasedAuthorizationPlugin plugin=new RuleBasedAuthorizationPlugin();
  plugin.init(initConfig);
  Map<String,Object> values=Utils.makeMap("resource","/update/json/docs","httpMethod","POST","collectionRequests",Collections.singletonList(new AuthorizationContext.CollectionRequest("mycoll")),"userPrincipal",new BasicUserPrincipal("tim"));
  AuthorizationContext context=new MockAuthorizationContext(values);
  AuthorizationResponse authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
  values.remove("userPrincipal");
  authResp=plugin.authorize(context);
  assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);
  values.put("userPrincipal",new BasicUserPrincipal("somebody"));
  authResp=plugin.authorize(context);
  assertEquals(FORBIDDEN,authResp.statusCode);
  values.put("httpMethod","GET");
  values.put("resource","/schema");
  authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
  values.put("resource","/schema/fields");
  authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
  values.put("resource","/schema");
  values.put("httpMethod","POST");
  authResp=plugin.authorize(context);
  assertEquals(FORBIDDEN,authResp.statusCode);
  values.put("resource","/admin/collections");
  values.put("requestType",AuthorizationContext.RequestType.ADMIN);
  values.put("params",new MapSolrParams(Collections.singletonMap("action","LIST")));
  values.put("httpMethod","GET");
  authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
  values.remove("userPrincipal");
  authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
  values.put("params",new MapSolrParams(Collections.singletonMap("action","CREATE")));
  authResp=plugin.authorize(context);
  assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);
  values.put("params",new MapSolrParams(Collections.singletonMap("action","RELOAD")));
  authResp=plugin.authorize(context);
  assertEquals(PROMPT_FOR_CREDENTIALS,authResp.statusCode);
  values.put("userPrincipal",new BasicUserPrincipal("somebody"));
  authResp=plugin.authorize(context);
  assertEquals(FORBIDDEN,authResp.statusCode);
  values.put("userPrincipal",new BasicUserPrincipal("tim"));
  authResp=plugin.authorize(context);
  assertEquals(STATUS_OK,authResp.statusCode);
}
