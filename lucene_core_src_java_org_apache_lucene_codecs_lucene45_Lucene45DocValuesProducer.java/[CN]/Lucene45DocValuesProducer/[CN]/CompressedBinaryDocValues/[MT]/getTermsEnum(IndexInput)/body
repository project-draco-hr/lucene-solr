{
  input.seek(bytes.offset);
  return new TermsEnum(){
    private long currentOrd=-1;
    private final BytesRef term=new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);
    @Override public BytesRef next() throws IOException {
      if (++currentOrd >= numValues) {
        return null;
      }
 else {
        int start=input.readVInt();
        int suffix=input.readVInt();
        input.readBytes(term.bytes,start,suffix);
        term.length=start + suffix;
        return term;
      }
    }
    @Override public SeekStatus seekCeil(    BytesRef text) throws IOException {
      long low=0;
      long high=numIndexValues - 1;
      while (low <= high) {
        long mid=(low + high) >>> 1;
        seekExact(mid * interval);
        int cmp=term.compareTo(text);
        if (cmp < 0) {
          low=mid + 1;
        }
 else         if (cmp > 0) {
          high=mid - 1;
        }
 else {
          return SeekStatus.FOUND;
        }
      }
      if (numIndexValues == 0) {
        return SeekStatus.END;
      }
      long block=low - 1;
      seekExact(block < 0 ? -1 : block * interval);
      while (next() != null) {
        int cmp=term.compareTo(text);
        if (cmp == 0) {
          return SeekStatus.FOUND;
        }
 else         if (cmp > 0) {
          return SeekStatus.NOT_FOUND;
        }
      }
      return SeekStatus.END;
    }
    @Override public void seekExact(    long ord) throws IOException {
      long block=ord / interval;
      if (ord >= currentOrd && block == currentOrd / interval) {
      }
 else {
        currentOrd=ord - ord % interval - 1;
        input.seek(bytes.offset + addresses.get(block));
      }
      while (currentOrd < ord) {
        next();
      }
    }
    @Override public BytesRef term() throws IOException {
      return term;
    }
    @Override public long ord() throws IOException {
      return currentOrd;
    }
    @Override public int docFreq() throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public long totalTermFreq() throws IOException {
      return -1;
    }
    @Override public DocsEnum docs(    Bits liveDocs,    DocsEnum reuse,    int flags) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public DocsAndPositionsEnum docsAndPositions(    Bits liveDocs,    DocsAndPositionsEnum reuse,    int flags) throws IOException {
      throw new UnsupportedOperationException();
    }
  }
;
}
