{
  final IndexInput data=this.data.clone();
  data.seek(entry.offset);
switch (entry.format) {
case DELTA_COMPRESSED:
    final BlockPackedReader reader=new BlockPackedReader(data,entry.packedIntsVersion,entry.blockSize,entry.count,true);
  return reader;
case BITPACK_COMPRESSED:
final PackedInts.Reader bits=PackedInts.getDirectReaderNoHeader(data,PackedInts.Format.PACKED,entry.packedIntsVersion,(int)entry.count,entry.bitsRequired);
return new LongValues(){
@Override public long get(long id){
  return bits.get((int)id) - 1;
}
}
;
case GCD_COMPRESSED:
final long min=entry.minValue;
final long mult=entry.gcd;
final BlockPackedReader quotientReader=new BlockPackedReader(data,entry.packedIntsVersion,entry.blockSize,entry.count,true);
return new LongValues(){
@Override public long get(long id){
return min + mult * quotientReader.get(id);
}
}
;
case TABLE_COMPRESSED:
final long table[]=entry.table;
final int bitsRequired=PackedInts.bitsRequired(table.length - 1);
final PackedInts.Reader ords=PackedInts.getDirectReaderNoHeader(data,PackedInts.Format.PACKED,entry.packedIntsVersion,(int)entry.count,bitsRequired);
return new LongValues(){
@Override public long get(long id){
return table[(int)ords.get((int)id)];
}
}
;
default :
throw new AssertionError();
}
}
