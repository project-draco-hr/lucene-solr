{
  String metaName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,metaExtension);
  ChecksumIndexInput in=state.directory.openChecksumInput(metaName,state.context);
  this.maxDoc=state.segmentInfo.getDocCount();
  boolean success=false;
  try {
    version=CodecUtil.checkHeader(in,metaCodec,Lucene45DocValuesFormat.VERSION_START,Lucene45DocValuesFormat.VERSION_CURRENT);
    numerics=new HashMap<>();
    ords=new HashMap<>();
    ordIndexes=new HashMap<>();
    binaries=new HashMap<>();
    sortedSets=new HashMap<>();
    readFields(in,state.fieldInfos);
    if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {
      CodecUtil.checkFooter(in);
    }
 else {
      CodecUtil.checkEOF(in);
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(in);
    }
 else {
      IOUtils.closeWhileHandlingException(in);
    }
  }
  success=false;
  try {
    String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,dataExtension);
    data=state.directory.openInput(dataName,state.context);
    final int version2=CodecUtil.checkHeader(data,dataCodec,Lucene45DocValuesFormat.VERSION_START,Lucene45DocValuesFormat.VERSION_CURRENT);
    if (version != version2) {
      throw new CorruptIndexException("Format versions mismatch");
    }
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(this.data);
    }
  }
  ramBytesUsed=new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));
}
