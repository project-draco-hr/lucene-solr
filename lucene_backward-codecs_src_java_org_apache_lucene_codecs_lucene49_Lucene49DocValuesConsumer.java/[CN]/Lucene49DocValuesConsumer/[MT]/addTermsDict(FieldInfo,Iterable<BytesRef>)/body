{
  int minLength=Integer.MAX_VALUE;
  int maxLength=Integer.MIN_VALUE;
  for (  BytesRef v : values) {
    minLength=Math.min(minLength,v.length);
    maxLength=Math.max(maxLength,v.length);
  }
  if (minLength == maxLength) {
    addBinaryField(field,values);
  }
 else {
    meta.writeVInt(field.number);
    meta.writeByte(Lucene49DocValuesFormat.BINARY);
    meta.writeVInt(BINARY_PREFIX_COMPRESSED);
    meta.writeLong(-1L);
    final long startFP=data.getFilePointer();
    RAMOutputStream addressBuffer=new RAMOutputStream();
    MonotonicBlockPackedWriter termAddresses=new MonotonicBlockPackedWriter(addressBuffer,BLOCK_SIZE);
    BytesRefBuilder lastTerm=new BytesRefBuilder();
    lastTerm.grow(Math.max(0,maxLength));
    long count=0;
    for (    BytesRef v : values) {
      if (count % ADDRESS_INTERVAL == 0) {
        termAddresses.add(data.getFilePointer() - startFP);
        lastTerm.clear();
      }
      int sharedPrefix=StringHelper.bytesDifference(lastTerm.get(),v);
      data.writeVInt(sharedPrefix);
      data.writeVInt(v.length - sharedPrefix);
      data.writeBytes(v.bytes,v.offset + sharedPrefix,v.length - sharedPrefix);
      lastTerm.copyBytes(v);
      count++;
    }
    final long indexStartFP=data.getFilePointer();
    termAddresses.finish();
    addressBuffer.writeTo(data);
    addressBuffer=null;
    termAddresses=null;
    meta.writeVInt(minLength);
    meta.writeVInt(maxLength);
    meta.writeVLong(count);
    meta.writeLong(startFP);
    meta.writeVInt(ADDRESS_INTERVAL);
    meta.writeLong(indexStartFP);
    meta.writeVInt(PackedInts.VERSION_CURRENT);
    meta.writeVInt(BLOCK_SIZE);
  }
}
