{
  super.init(schema,args);
  if (ctx == null) {
    MapListener<String,String> argsWrap=new MapListener<>(args);
    ctx=SpatialContextFactory.makeSpatialContext(argsWrap,schema.getResourceLoader().getClassLoader());
    args.keySet().removeAll(argsWrap.getSeenKeys());
  }
  final String unitsErrMsg="units parameter is deprecated, please use distanceUnits instead for field types with class " + getClass().getSimpleName();
  this.units=args.remove("units");
  if (units != null) {
    if ("degrees".equals(units)) {
      log.warn(unitsErrMsg);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,unitsErrMsg);
    }
  }
  final String distanceUnitsStr=args.remove("distanceUnits");
  if (distanceUnitsStr == null) {
    if (units != null) {
      this.distanceUnits=DistanceUnits.BACKCOMPAT;
    }
 else {
      this.distanceUnits=ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;
    }
  }
 else {
    if (units != null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,unitsErrMsg);
    }
    this.distanceUnits=parseDistanceUnits(distanceUnitsStr);
    if (this.distanceUnits == null)     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Must specify distanceUnits as one of " + DistanceUnits.getSupportedUnits() + " on field types with class "+ getClass().getSimpleName());
  }
  argsParser=newSpatialArgsParser();
}
