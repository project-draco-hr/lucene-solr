{
  log.info("Reading Solr Schema");
  try {
    Config schemaConf=new Config(solrConfig.getResourceLoader(),"schema",is,"/schema/");
    Document document=schemaConf.getDocument();
    final XPath xpath=schemaConf.getXPath();
    Node nd=(Node)xpath.evaluate("/schema/@name",document,XPathConstants.NODE);
    if (nd == null) {
      log.warning("schema has no name!");
    }
 else {
      name=nd.getNodeValue();
      log.info("Schema name=" + name);
    }
    version=schemaConf.getFloat("/schema/@version",1.0f);
    final IndexSchema schema=this;
    AbstractPluginLoader<FieldType> loader=new AbstractPluginLoader<FieldType>("[schema.xml] fieldType",true,true){
      @Override protected FieldType create(      ResourceLoader loader,      String name,      String className,      Node node) throws Exception {
        FieldType ft=(FieldType)loader.newInstance(className);
        ft.setTypeName(name);
        String expression="./analyzer[@type='query']";
        Node anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
        Analyzer queryAnalyzer=readAnalyzer(anode);
        expression="./analyzer[not(@type)] | ./analyzer[@type='index']";
        anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
        Analyzer analyzer=readAnalyzer(anode);
        if (queryAnalyzer == null)         queryAnalyzer=analyzer;
        if (analyzer == null)         analyzer=queryAnalyzer;
        if (analyzer != null) {
          ft.setAnalyzer(analyzer);
          ft.setQueryAnalyzer(queryAnalyzer);
        }
        return ft;
      }
      @Override protected void init(      FieldType plugin,      Node node) throws Exception {
        Map<String,String> params=DOMUtil.toMapExcept(node.getAttributes(),"name","class");
        plugin.setArgs(schema,params);
      }
      @Override protected FieldType register(      String name,      FieldType plugin) throws Exception {
        log.finest("fieldtype defined: " + plugin);
        return fieldTypes.put(name,plugin);
      }
    }
;
    String expression="/schema/types/fieldtype | /schema/types/fieldType";
    NodeList nodes=(NodeList)xpath.evaluate(expression,document,XPathConstants.NODESET);
    loader.load(solrConfig.getResourceLoader(),nodes);
    Map<String,Boolean> explicitRequiredProp=new HashMap<String,Boolean>();
    ArrayList<DynamicField> dFields=new ArrayList<DynamicField>();
    expression="/schema/fields/field | /schema/fields/dynamicField";
    nodes=(NodeList)xpath.evaluate(expression,document,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      Node node=nodes.item(i);
      NamedNodeMap attrs=node.getAttributes();
      String name=DOMUtil.getAttr(attrs,"name","field definition");
      log.finest("reading field def " + name);
      String type=DOMUtil.getAttr(attrs,"type","field " + name);
      FieldType ft=fieldTypes.get(type);
      if (ft == null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unknown fieldtype '" + type + "' specified on field "+ name,false);
      }
      Map<String,String> args=DOMUtil.toMapExcept(attrs,"name","type");
      if (args.get("required") != null) {
        explicitRequiredProp.put(name,Boolean.valueOf(args.get("required")));
      }
      SchemaField f=SchemaField.create(name,ft,args);
      if (node.getNodeName().equals("field")) {
        SchemaField old=fields.put(f.getName(),f);
        if (old != null) {
          String msg="[schema.xml] Duplicate field definition for '" + f.getName() + "' ignoring: "+ old.toString();
          Throwable t=new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);
          SolrException.logOnce(log,null,t);
          SolrConfig.severeErrors.add(t);
        }
        log.fine("field defined: " + f);
        if (f.getDefaultValue() != null) {
          log.fine(name + " contains default value: " + f.getDefaultValue());
          fieldsWithDefaultValue.add(f);
        }
        if (f.isRequired()) {
          log.fine(name + " is required in this schema");
          requiredFields.add(f);
        }
      }
 else       if (node.getNodeName().equals("dynamicField")) {
        boolean dup=false;
        for (        DynamicField df : dFields) {
          if (df.regex.equals(f.name)) {
            String msg="[schema.xml] Duplicate DynamicField definition for '" + f.getName() + "' ignoring: "+ f.toString();
            Throwable t=new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);
            SolrException.logOnce(log,null,t);
            SolrConfig.severeErrors.add(t);
            dup=true;
            break;
          }
        }
        if (!dup) {
          dFields.add(new DynamicField(f));
          log.fine("dynamic field defined: " + f);
        }
      }
 else {
        throw new RuntimeException("Unknown field type");
      }
    }
    requiredFields.addAll(getFieldsWithDefaultValue());
    Collections.sort(dFields);
    log.finest("Dynamic Field Ordering:" + dFields);
    dynamicFields=(DynamicField[])dFields.toArray(new DynamicField[dFields.size()]);
    Node node=(Node)xpath.evaluate("/schema/similarity",document,XPathConstants.NODE);
    if (node == null) {
      similarityFactory=new SimilarityFactory(){
        public Similarity getSimilarity(){
          return Similarity.getDefault();
        }
      }
;
      log.fine("using default similarity");
    }
 else {
      final Object obj=solrConfig.getResourceLoader().newInstance(((Element)node).getAttribute("class"));
      if (obj instanceof SimilarityFactory) {
        SolrParams params=SolrParams.toSolrParams(DOMUtil.childNodesToNamedList(node));
        similarityFactory=(SimilarityFactory)obj;
        similarityFactory.init(params);
      }
 else {
        similarityFactory=new SimilarityFactory(){
          public Similarity getSimilarity(){
            return (Similarity)obj;
          }
        }
;
      }
      log.fine("using similarity factory" + similarityFactory.getClass().getName());
    }
    node=(Node)xpath.evaluate("/schema/defaultSearchField/text()",document,XPathConstants.NODE);
    if (node == null) {
      log.warning("no default search field specified in schema.");
    }
 else {
      defaultSearchFieldName=node.getNodeValue().trim();
      if (defaultSearchFieldName != null) {
        SchemaField defaultSearchField=getFields().get(defaultSearchFieldName);
        if ((defaultSearchField == null) || !defaultSearchField.indexed()) {
          String msg="default search field '" + defaultSearchFieldName + "' not defined or not indexed";
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);
        }
      }
      log.info("default search field is " + defaultSearchFieldName);
    }
    node=(Node)xpath.evaluate("/schema/solrQueryParser/@defaultOperator",document,XPathConstants.NODE);
    if (node == null) {
      log.fine("using default query parser operator (OR)");
    }
 else {
      queryParserDefaultOperator=node.getNodeValue().trim();
      log.info("query parser default operator is " + queryParserDefaultOperator);
    }
    node=(Node)xpath.evaluate("/schema/uniqueKey/text()",document,XPathConstants.NODE);
    if (node == null) {
      log.warning("no uniqueKey specified in schema.");
    }
 else {
      uniqueKeyField=getIndexedField(node.getNodeValue().trim());
      uniqueKeyFieldName=uniqueKeyField.getName();
      uniqueKeyFieldType=uniqueKeyField.getType();
      log.info("unique key field: " + uniqueKeyFieldName);
      if (Boolean.FALSE != explicitRequiredProp.get(uniqueKeyFieldName)) {
        uniqueKeyField.required=true;
        requiredFields.add(uniqueKeyField);
      }
    }
    ArrayList<DynamicCopy> dCopies=new ArrayList<DynamicCopy>();
    expression="//copyField";
    nodes=(NodeList)xpath.evaluate(expression,document,XPathConstants.NODESET);
    for (int i=0; i < nodes.getLength(); i++) {
      node=nodes.item(i);
      NamedNodeMap attrs=node.getAttributes();
      String source=DOMUtil.getAttr(attrs,"source","copyField definition");
      String dest=DOMUtil.getAttr(attrs,"dest","copyField definition");
      boolean sourceIsPattern=isWildCard(source);
      boolean destIsPattern=isWildCard(dest);
      log.fine("copyField source='" + source + "' dest='"+ dest+ "'");
      SchemaField d=getField(dest);
      if (sourceIsPattern) {
        if (destIsPattern) {
          DynamicField df=null;
          for (          DynamicField dd : dynamicFields) {
            if (dd.regex.equals(dest)) {
              df=dd;
              break;
            }
          }
          if (df == null) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"copyField dynamic destination must match a dynamicField.");
          }
          dCopies.add(new DynamicDestCopy(source,df));
        }
 else {
          dCopies.add(new DynamicCopy(source,d));
        }
      }
 else       if (destIsPattern) {
        String msg="copyField only supports a dynamic destination if the source is also dynamic";
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);
      }
 else {
        SchemaField f=getField(source);
        SchemaField[] destArr=copyFields.get(source);
        if (destArr == null) {
          destArr=new SchemaField[]{d};
        }
 else {
          destArr=(SchemaField[])append(destArr,d);
        }
        copyFields.put(source,destArr);
        copyFieldTargetCounts.put(d,(copyFieldTargetCounts.containsKey(d) ? copyFieldTargetCounts.get(d) + 1 : 1));
      }
    }
    for (    Map.Entry<SchemaField,Integer> entry : copyFieldTargetCounts.entrySet()) {
      if (entry.getValue() > 1 && !entry.getKey().multiValued()) {
        log.warning("Field " + entry.getKey().name + " is not multivalued "+ "and destination for multiple copyFields ("+ entry.getValue()+ ")");
      }
    }
    log.finest("Dynamic Copied Fields:" + dCopies);
    dynamicCopyFields=(DynamicCopy[])dCopies.toArray(new DynamicCopy[dCopies.size()]);
  }
 catch (  SolrException e) {
    SolrConfig.severeErrors.add(e);
    throw e;
  }
catch (  Exception e) {
    SolrConfig.severeErrors.add(e);
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Schema Parsing Failed",e,false);
  }
  analyzer=new SolrIndexAnalyzer();
  queryAnalyzer=new SolrQueryAnalyzer();
}
