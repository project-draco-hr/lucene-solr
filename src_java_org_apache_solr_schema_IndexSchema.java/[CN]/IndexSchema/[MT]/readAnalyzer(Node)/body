{
  if (node == null)   return null;
  NamedNodeMap attrs=node.getAttributes();
  String analyzerName=DOMUtil.getAttr(attrs,"class");
  if (analyzerName != null) {
    return (Analyzer)loader.newInstance(analyzerName);
  }
  XPath xpath=XPathFactory.newInstance().newXPath();
  final ArrayList<TokenizerFactory> tokenizers=new ArrayList<TokenizerFactory>(1);
  AbstractPluginLoader<TokenizerFactory> tokenizerLoader=new AbstractPluginLoader<TokenizerFactory>("[schema.xml] analyzer/tokenizer",false,false){
    @Override protected void init(    TokenizerFactory plugin,    Node node) throws Exception {
      if (!tokenizers.isEmpty()) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"The schema defines multiple tokenizers for: " + node);
      }
      plugin.init(DOMUtil.toMapExcept(node.getAttributes(),"class"));
      tokenizers.add(plugin);
    }
    @Override protected TokenizerFactory register(    String name,    TokenizerFactory plugin) throws Exception {
      return null;
    }
  }
;
  tokenizerLoader.load(loader,(NodeList)xpath.evaluate("./tokenizer",node,XPathConstants.NODESET));
  if (tokenizers.isEmpty()) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"analyzer without class or tokenizer & filter list");
  }
  final ArrayList<TokenFilterFactory> filters=new ArrayList<TokenFilterFactory>();
  AbstractPluginLoader<TokenFilterFactory> filterLoader=new AbstractPluginLoader<TokenFilterFactory>("[schema.xml] analyzer/filter",false,false){
    @Override protected void init(    TokenFilterFactory plugin,    Node node) throws Exception {
      if (plugin != null) {
        plugin.init(DOMUtil.toMapExcept(node.getAttributes(),"class"));
        filters.add(plugin);
      }
    }
    @Override protected TokenFilterFactory register(    String name,    TokenFilterFactory plugin) throws Exception {
      return null;
    }
  }
;
  filterLoader.load(loader,(NodeList)xpath.evaluate("./filter",node,XPathConstants.NODESET));
  return new TokenizerChain(tokenizers.get(0),filters.toArray(new TokenFilterFactory[filters.size()]));
}
