{
  CoreContainer cores=getCoreContainer();
  if (cores == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Core container instance missing");
  }
  boolean do_persist=false;
  SolrParams params=req.getParams();
  SolrParams required=params.required();
  MultiCoreAction action=MultiCoreAction.STATUS;
  String a=params.get(MultiCoreParams.ACTION);
  if (a != null) {
    action=MultiCoreAction.get(a);
    if (action == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unknown 'action' value.  Use: " + MultiCoreAction.values());
    }
  }
  String cname=params.get(MultiCoreParams.CORE);
switch (action) {
case CREATE:
{
      CoreDescriptor dcore=new CoreDescriptor(cores);
      dcore.init(params.get(MultiCoreParams.NAME),params.get(MultiCoreParams.INSTANCE_DIR));
      String opts=params.get(MultiCoreParams.CONFIG);
      if (opts != null)       dcore.setConfigName(opts);
      opts=params.get(MultiCoreParams.SCHEMA);
      if (opts != null)       dcore.setSchemaName(opts);
      SolrCore core=cores.create(dcore);
      rsp.add("core",core.getName());
      do_persist=cores.isPersistent();
      break;
    }
case STATUS:
{
    NamedList<Object> status=new SimpleOrderedMap<Object>();
    if (cname == null) {
      for (      CoreDescriptor d : cores.getDescriptors()) {
        cname=d.getName();
        status.add(d.getName(),getCoreStatus(cores,cname));
      }
    }
 else {
      status.add(cname,getCoreStatus(cores,cname));
    }
    rsp.add("status",status);
    do_persist=false;
    break;
  }
case PERSIST:
{
  do_persist=true;
  break;
}
case RELOAD:
{
cores.reload(cname);
do_persist=false;
break;
}
case SWAP:
{
do_persist=params.getBool(MultiCoreParams.PERSISTENT,cores.isPersistent());
String with=required.get(MultiCoreParams.WITH);
cores.swap(cname,with);
break;
}
default :
{
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"TODO: IMPLEMENT: " + action);
}
}
if (do_persist) {
cores.persist();
rsp.add("saved",cores.getConfigFile().getAbsolutePath());
}
}
