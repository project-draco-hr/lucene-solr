{
  if (VERBOSE) {
    System.out.println("\nTEST: start testRandomExceptions");
  }
  MockDirectoryWrapper dir=newDirectory();
  MockAnalyzer analyzer=new MockAnalyzer(random());
  analyzer.setEnableChecks(false);
  MockIndexWriter writer=new MockIndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));
  ((ConcurrentMergeScheduler)writer.getConfig().getMergeScheduler()).setSuppressExceptions();
  if (VERBOSE) {
    System.out.println("TEST: initial commit");
  }
  writer.commit();
  IndexerThread thread=new IndexerThread(0,writer);
  thread.run();
  if (thread.failure != null) {
    thread.failure.printStackTrace(System.out);
    fail("thread " + thread.getName() + ": hit unexpected failure");
  }
  if (VERBOSE) {
    System.out.println("TEST: commit after thread start");
  }
  writer.commit();
  try {
    writer.close();
  }
 catch (  Throwable t) {
    System.out.println("exception during close:");
    t.printStackTrace(System.out);
    writer.rollback();
  }
  IndexReader r2=IndexReader.open(dir);
  final int count=r2.docFreq(new Term("content4","aaa"));
  final int count2=r2.docFreq(new Term("content4","ddd"));
  assertEquals(count,count2);
  r2.close();
  dir.close();
}
