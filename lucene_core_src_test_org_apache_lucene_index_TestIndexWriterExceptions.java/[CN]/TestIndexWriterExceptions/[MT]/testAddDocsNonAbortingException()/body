{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final int numDocs1=random().nextInt(25);
  for (int docCount=0; docCount < numDocs1; docCount++) {
    Document doc=new Document();
    doc.add(newTextField("content","good content",Field.Store.NO));
    w.addDocument(doc);
  }
  final List<Document> docs=new ArrayList<>();
  for (int docCount=0; docCount < 7; docCount++) {
    Document doc=new Document();
    docs.add(doc);
    doc.add(newStringField("id",docCount + "",Field.Store.NO));
    doc.add(newTextField("content","silly content " + docCount,Field.Store.NO));
    if (docCount == 4) {
      Field f=newTextField("crash","",Field.Store.NO);
      doc.add(f);
      MockTokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);
      tokenizer.setReader(new StringReader("crash me on the 4th token"));
      tokenizer.setEnableChecks(false);
      f.setTokenStream(new CrashingFilter("crash",tokenizer));
    }
  }
  try {
    w.addDocuments(docs);
    fail("did not hit expected exception");
  }
 catch (  IOException ioe) {
    assertEquals(CRASH_FAIL_MESSAGE,ioe.getMessage());
  }
  final int numDocs2=random().nextInt(25);
  for (int docCount=0; docCount < numDocs2; docCount++) {
    Document doc=new Document();
    doc.add(newTextField("content","good content",Field.Store.NO));
    w.addDocument(doc);
  }
  final IndexReader r=w.getReader();
  w.shutdown();
  final IndexSearcher s=newSearcher(r);
  PhraseQuery pq=new PhraseQuery();
  pq.add(new Term("content","silly"));
  pq.add(new Term("content","content"));
  assertEquals(0,s.search(pq,1).totalHits);
  pq=new PhraseQuery();
  pq.add(new Term("content","good"));
  pq.add(new Term("content","content"));
  assertEquals(numDocs1 + numDocs2,s.search(pq,1).totalHits);
  r.close();
  dir.close();
}
