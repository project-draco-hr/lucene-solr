{
  MockDirectoryWrapper.Failure failure=new MockDirectoryWrapper.Failure(){
    @Override public MockDirectoryWrapper.Failure reset(){
      doFail=false;
      return this;
    }
    @Override public void eval(    MockDirectoryWrapper dir) throws IOException {
      if (doFail) {
        if (random().nextBoolean()) {
          throw new FileNotFoundException("some/file/name.ext (Too many open files)");
        }
      }
    }
  }
;
  MockDirectoryWrapper dir=newMockDirectory();
  dir.setFailOnOpenInput(true);
  dir.failOn(failure);
  IndexWriterConfig iwc=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  IndexWriter iw=new IndexWriter(dir,iwc);
  Document doc=new Document();
  doc.add(new StringField("foo","bar",Field.Store.NO));
  iw.addDocument(doc);
  iw.commit();
  DirectoryReader ir=DirectoryReader.open(dir);
  assertEquals(1,ir.numDocs());
  ir.close();
  iw.shutdown();
  for (int i=0; i < 10; i++) {
    failure.setDoFail();
    iwc=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
    try {
      iw=new IndexWriter(dir,iwc);
    }
 catch (    CorruptIndexException ex) {
      continue;
    }
catch (    FileNotFoundException|NoSuchFileException ex) {
      continue;
    }
    failure.clearDoFail();
    iw.shutdown();
    ir=DirectoryReader.open(dir);
    assertEquals("lost document after iteration: " + i,1,ir.numDocs());
    ir.close();
  }
  failure.clearDoFail();
  ir=DirectoryReader.open(dir);
  assertEquals(1,ir.numDocs());
  ir.close();
  dir.close();
}
