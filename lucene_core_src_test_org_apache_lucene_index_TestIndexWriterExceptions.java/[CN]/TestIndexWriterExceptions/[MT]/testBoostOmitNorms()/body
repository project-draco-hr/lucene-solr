{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  iwc.setMergePolicy(newLogMergePolicy());
  IndexWriter iw=new IndexWriter(dir,iwc);
  Document doc=new Document();
  doc.add(new StringField("field1","sometext",Field.Store.YES));
  doc.add(new TextField("field2","sometext",Field.Store.NO));
  doc.add(new StringField("foo","bar",Field.Store.NO));
  iw.addDocument(doc);
  try {
    doc=new Document();
    IndexDocument docList=new IndexDocument(){
      List<IndexableField> list=new ArrayList<IndexableField>();
      List<StorableField> storedList=new ArrayList<StorableField>();
      @Override public Iterable<? extends IndexableField> indexableFields(){
        if (list.size() == 0) {
          list.add(new IndexableField(){
            @Override public String name(){
              return "foo";
            }
            @Override public IndexableFieldType fieldType(){
              return StringField.TYPE_NOT_STORED;
            }
            @Override public float boost(){
              return 5f;
            }
            @Override public TokenStream tokenStream(            Analyzer analyzer) throws IOException {
              return null;
            }
          }
);
        }
        return list;
      }
      @Override public Iterable<? extends StorableField> storableFields(){
        return storedList;
      }
    }
;
    iw.addDocument(docList);
    fail("didn't get any exception, boost silently discarded");
  }
 catch (  UnsupportedOperationException expected) {
  }
  DirectoryReader ir=DirectoryReader.open(iw,false);
  assertEquals(1,ir.numDocs());
  assertEquals("sometext",ir.document(0).get("field1"));
  ir.close();
  iw.close();
  dir.close();
}
