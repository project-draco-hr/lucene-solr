{
  Analyzer analyzer=new Analyzer(new Analyzer.PerFieldReuseStrategy()){
    @Override public TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      MockTokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.WHITESPACE,false);
      tokenizer.setEnableChecks(false);
      return new TokenStreamComponents(tokenizer,new CrashingFilter(fieldName,tokenizer));
    }
  }
;
  for (int i=0; i < 2; i++) {
    if (VERBOSE) {
      System.out.println("TEST: cycle i=" + i);
    }
    MockDirectoryWrapper dir=newDirectory();
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setMergePolicy(newLogMergePolicy()));
    LogMergePolicy lmp=(LogMergePolicy)writer.getConfig().getMergePolicy();
    lmp.setMergeFactor(Math.max(lmp.getMergeFactor(),5));
    Document doc=new Document();
    doc.add(newField("contents","here are some contents",DocCopyIterator.custom5));
    writer.addDocument(doc);
    writer.addDocument(doc);
    doc.add(newField("crash","this should crash after 4 terms",DocCopyIterator.custom5));
    doc.add(newField("other","this will not get indexed",DocCopyIterator.custom5));
    try {
      writer.addDocument(doc);
      fail("did not hit expected exception");
    }
 catch (    IOException ioe) {
      if (VERBOSE) {
        System.out.println("TEST: hit expected exception");
        ioe.printStackTrace(System.out);
      }
    }
    if (0 == i) {
      doc=new Document();
      doc.add(newField("contents","here are some contents",DocCopyIterator.custom5));
      writer.addDocument(doc);
      writer.addDocument(doc);
    }
    writer.close();
    if (VERBOSE) {
      System.out.println("TEST: open reader");
    }
    IndexReader reader=DirectoryReader.open(dir);
    if (i == 0) {
      int expected=5;
      assertEquals(expected,reader.docFreq(new Term("contents","here")));
      assertEquals(expected,reader.maxDoc());
      int numDel=0;
      final Bits liveDocs=MultiFields.getLiveDocs(reader);
      assertNotNull(liveDocs);
      for (int j=0; j < reader.maxDoc(); j++) {
        if (!liveDocs.get(j))         numDel++;
 else {
          reader.document(j);
          reader.getTermVectors(j);
        }
      }
      assertEquals(1,numDel);
    }
    reader.close();
    writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setMaxBufferedDocs(10));
    doc=new Document();
    doc.add(newField("contents","here are some contents",DocCopyIterator.custom5));
    for (int j=0; j < 17; j++)     writer.addDocument(doc);
    writer.forceMerge(1);
    writer.close();
    reader=DirectoryReader.open(dir);
    int expected=19 + (1 - i) * 2;
    assertEquals(expected,reader.docFreq(new Term("contents","here")));
    assertEquals(expected,reader.maxDoc());
    int numDel=0;
    assertNull(MultiFields.getLiveDocs(reader));
    for (int j=0; j < reader.maxDoc(); j++) {
      reader.document(j);
      reader.getTermVectors(j);
    }
    reader.close();
    assertEquals(0,numDel);
    dir.close();
  }
}
