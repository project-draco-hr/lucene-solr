{
  final String messageToFailOn=random().nextBoolean() ? "rollback: done finish merges" : "rollback before checkpoint";
  InfoStream evilInfoStream=new InfoStream(){
    @Override public void message(    String component,    String message){
      if (messageToFailOn.equals(message)) {
        throw new RuntimeException("BOOM!");
      }
    }
    @Override public boolean isEnabled(    String component){
      return true;
    }
    @Override public void close() throws IOException {
    }
  }
;
  Directory dir=newMockDirectory();
  IndexWriterConfig iwc=new IndexWriterConfig(null);
  iwc.setInfoStream(evilInfoStream);
  IndexWriter iw=new IndexWriter(dir,iwc);
  Document doc=new Document();
  for (int i=0; i < 10; i++) {
    iw.addDocument(doc);
  }
  iw.commit();
  iw.addDocument(doc);
  DirectoryReader r=DirectoryReader.open(iw,false);
  if (random().nextBoolean()) {
    iw.prepareCommit();
  }
  try {
    iw.rollback();
    fail();
  }
 catch (  RuntimeException expected) {
    assertEquals("BOOM!",expected.getMessage());
  }
  r.close();
  assertTrue(iw.isClosed());
  assertFalse(IndexWriter.isLocked(dir));
  r=DirectoryReader.open(dir);
  assertEquals(10,r.maxDoc());
  r.close();
  dir.close();
}
