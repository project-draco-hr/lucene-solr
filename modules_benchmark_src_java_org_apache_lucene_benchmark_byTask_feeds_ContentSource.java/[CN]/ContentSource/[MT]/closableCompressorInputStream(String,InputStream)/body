{
  final InputStream delegee=csFactory.createCompressorInputStream(type,is);
  if (!type.equals(CompressorStreamFactory.GZIP)) {
    return delegee;
  }
  return new InputStream(){
    @Override public int read() throws IOException {
      return delegee.read();
    }
    @Override public int read(    byte[] b) throws IOException {
      return delegee.read(b);
    }
    @Override public int available() throws IOException {
      return delegee.available();
    }
    @Override public synchronized void mark(    int readlimit){
      delegee.mark(readlimit);
    }
    @Override public boolean markSupported(){
      return delegee.markSupported();
    }
    @Override public int read(    byte[] b,    int off,    int len) throws IOException {
      return delegee.read(b,off,len);
    }
    @Override public synchronized void reset() throws IOException {
      delegee.reset();
    }
    @Override public long skip(    long n) throws IOException {
      return delegee.skip(n);
    }
    @Override public void close() throws IOException {
      delegee.close();
      is.close();
    }
  }
;
}
