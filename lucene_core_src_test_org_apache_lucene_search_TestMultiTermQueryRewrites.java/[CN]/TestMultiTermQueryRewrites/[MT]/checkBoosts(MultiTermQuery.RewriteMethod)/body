{
  final MultiTermQuery mtq=new MultiTermQuery("data"){
    @Override protected TermsEnum getTermsEnum(    Terms terms,    AttributeSource atts) throws IOException {
      return new FilteredTermsEnum(terms.iterator()){
        final BoostAttribute boostAtt=attributes().addAttribute(BoostAttribute.class);
        @Override protected AcceptStatus accept(        BytesRef term){
          boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));
          if (term.length == 0) {
            return AcceptStatus.NO;
          }
          char c=(char)(term.bytes[term.offset] & 0xff);
          if (c >= '2') {
            if (c <= '7') {
              return AcceptStatus.YES;
            }
 else {
              return AcceptStatus.END;
            }
          }
 else {
            return AcceptStatus.NO;
          }
        }
      }
;
    }
    @Override public String toString(    String field){
      return "dummy";
    }
  }
;
  mtq.setRewriteMethod(method);
  final Query q1=searcher.rewrite(mtq);
  final Query q2=multiSearcher.rewrite(mtq);
  final Query q3=multiSearcherDupls.rewrite(mtq);
  if (VERBOSE) {
    System.out.println();
    System.out.println("single segment: " + q1);
    System.out.println("multi segment: " + q2);
    System.out.println("multi segment with duplicates: " + q3);
  }
  assertEquals("The multi-segment case must produce same rewritten query",q1,q2);
  assertEquals("The multi-segment case with duplicates must produce same rewritten query",q1,q3);
  checkBooleanQueryBoosts((BooleanQuery)q1);
  checkBooleanQueryBoosts((BooleanQuery)q2);
  checkBooleanQueryBoosts((BooleanQuery)q3);
}
