{
  if (lo >= hi)   return;
  int mid=(lo + hi) / 2;
  if (comparePostings(postings[lo].p,postings[mid].p) > 0) {
    PostingVector tmp=postings[lo];
    postings[lo]=postings[mid];
    postings[mid]=tmp;
  }
  if (comparePostings(postings[mid].p,postings[hi].p) > 0) {
    PostingVector tmp=postings[mid];
    postings[mid]=postings[hi];
    postings[hi]=tmp;
    if (comparePostings(postings[lo].p,postings[mid].p) > 0) {
      PostingVector tmp2=postings[lo];
      postings[lo]=postings[mid];
      postings[mid]=tmp2;
    }
  }
  int left=lo + 1;
  int right=hi - 1;
  if (left >= right)   return;
  PostingVector partition=postings[mid];
  for (; ; ) {
    while (comparePostings(postings[right].p,partition.p) > 0)     --right;
    while (left < right && comparePostings(postings[left].p,partition.p) <= 0)     ++left;
    if (left < right) {
      PostingVector tmp=postings[left];
      postings[left]=postings[right];
      postings[right]=tmp;
      --right;
    }
 else {
      break;
    }
  }
  quickSort(postings,lo,left);
  quickSort(postings,left + 1,hi);
}
