{
  SimpleOrderedMap<Object> topLevel=new SimpleOrderedMap<Object>();
  topLevel.add(NAME,getSchemaName());
  topLevel.add(VERSION,getVersion());
  if (null != uniqueKeyFieldName) {
    topLevel.add(UNIQUE_KEY,uniqueKeyFieldName);
  }
  if (null != defaultSearchFieldName) {
    topLevel.add(DEFAULT_SEARCH_FIELD,defaultSearchFieldName);
  }
  if (isExplicitQueryParserDefaultOperator) {
    SimpleOrderedMap<Object> solrQueryParserProperties=new SimpleOrderedMap<Object>();
    solrQueryParserProperties.add(DEFAULT_OPERATOR,queryParserDefaultOperator);
    topLevel.add(SOLR_QUERY_PARSER,solrQueryParserProperties);
  }
  if (isExplicitSimilarity) {
    topLevel.add(SIMILARITY,similarityFactory.getNamedPropertyValues());
  }
  List<SimpleOrderedMap<Object>> fieldTypeProperties=new ArrayList<SimpleOrderedMap<Object>>();
  SortedMap<String,FieldType> sortedFieldTypes=new TreeMap<String,FieldType>(fieldTypes);
  for (  FieldType fieldType : sortedFieldTypes.values()) {
    fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));
  }
  topLevel.add(FIELD_TYPES,fieldTypeProperties);
  List<SimpleOrderedMap<Object>> fieldProperties=new ArrayList<SimpleOrderedMap<Object>>();
  SortedSet<String> fieldNames=new TreeSet<String>(fields.keySet());
  for (  String fieldName : fieldNames) {
    fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));
  }
  topLevel.add(FIELDS,fieldProperties);
  List<SimpleOrderedMap<Object>> dynamicFieldProperties=new ArrayList<SimpleOrderedMap<Object>>();
  for (  IndexSchema.DynamicField dynamicField : dynamicFields) {
    if (!dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) {
      dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));
    }
  }
  topLevel.add(DYNAMIC_FIELDS,dynamicFieldProperties);
  topLevel.add(COPY_FIELDS,getCopyFieldProperties(false,null,null));
  return topLevel;
}
