{
  log.debug(COPY_FIELD + " " + SOURCE+ "='"+ source+ "' "+ DESTINATION+ "='"+ dest+ "' "+ MAX_CHARS+ "="+ maxChars);
  DynamicField destDynamicField=null;
  SchemaField destSchemaField=fields.get(dest);
  SchemaField sourceSchemaField=fields.get(source);
  DynamicField sourceDynamicBase=null;
  DynamicField destDynamicBase=null;
  boolean sourceIsDynamicFieldReference=false;
  boolean sourceIsExplicitFieldGlob=false;
  final String invalidGlobMessage="is an invalid glob: either it contains more than one asterisk," + " or the asterisk occurs neither at the start nor at the end.";
  final boolean sourceIsGlob=isValidFieldGlob(source);
  if (source.contains("*") && !sourceIsGlob) {
    String msg="copyField source :'" + source + "' "+ invalidGlobMessage;
    throw new SolrException(ErrorCode.SERVER_ERROR,msg);
  }
  if (dest.contains("*") && !isValidFieldGlob(dest)) {
    String msg="copyField dest :'" + dest + "' "+ invalidGlobMessage;
    throw new SolrException(ErrorCode.SERVER_ERROR,msg);
  }
  if (null == sourceSchemaField && sourceIsGlob) {
    Pattern pattern=Pattern.compile(source.replace("*",".*"));
    for (    String field : fields.keySet()) {
      if (pattern.matcher(field).matches()) {
        sourceIsExplicitFieldGlob=true;
        break;
      }
    }
  }
  if (null == destSchemaField || (null == sourceSchemaField && !sourceIsExplicitFieldGlob)) {
    for (    DynamicField dynamicField : dynamicFields) {
      if (null == sourceSchemaField && !sourceIsDynamicFieldReference && !sourceIsExplicitFieldGlob) {
        if (dynamicField.matches(source)) {
          sourceIsDynamicFieldReference=true;
          if (!source.equals(dynamicField.getRegex())) {
            sourceDynamicBase=dynamicField;
          }
        }
      }
      if (null == destSchemaField) {
        if (dest.equals(dynamicField.getRegex())) {
          destDynamicField=dynamicField;
          destSchemaField=dynamicField.prototype;
        }
 else         if (dynamicField.matches(dest)) {
          destSchemaField=dynamicField.makeSchemaField(dest);
          destDynamicField=new DynamicField(destSchemaField);
          destDynamicBase=dynamicField;
        }
      }
      if (null != destSchemaField && (null != sourceSchemaField || sourceIsDynamicFieldReference || sourceIsExplicitFieldGlob)) {
        break;
      }
    }
  }
  if (null == sourceSchemaField && !sourceIsGlob && !sourceIsDynamicFieldReference) {
    String msg="copyField source :'" + source + "' is not a glob and doesn't match any explicit field or dynamicField.";
    throw new SolrException(ErrorCode.SERVER_ERROR,msg);
  }
  if (null == destSchemaField) {
    String msg="copyField dest :'" + dest + "' is not an explicit field and doesn't match a dynamicField.";
    throw new SolrException(ErrorCode.SERVER_ERROR,msg);
  }
  if (sourceIsDynamicFieldReference || sourceIsGlob) {
    if (null != destDynamicField) {
      registerDynamicCopyField(new DynamicCopy(source,destDynamicField,maxChars,sourceDynamicBase,destDynamicBase));
      incrementCopyFieldTargetCount(destSchemaField);
    }
 else {
      destDynamicField=new DynamicField(destSchemaField);
      registerDynamicCopyField(new DynamicCopy(source,destDynamicField,maxChars,sourceDynamicBase,null));
      incrementCopyFieldTargetCount(destSchemaField);
    }
  }
 else {
    if (null != destDynamicField) {
      if (destDynamicField.pattern instanceof DynamicReplacement.DynamicPattern.NameEquals) {
        registerDynamicCopyField(new DynamicCopy(source,destDynamicField,maxChars,sourceDynamicBase,destDynamicBase));
        incrementCopyFieldTargetCount(destSchemaField);
      }
 else {
        String msg="copyField only supports a dynamic destination with an asterisk " + "if the source also has an asterisk";
        throw new SolrException(ErrorCode.SERVER_ERROR,msg);
      }
    }
 else {
      List<CopyField> copyFieldList=copyFieldsMap.get(source);
      if (copyFieldList == null) {
        copyFieldList=new ArrayList<CopyField>();
        copyFieldsMap.put(source,copyFieldList);
      }
      copyFieldList.add(new CopyField(sourceSchemaField,destSchemaField,maxChars));
      incrementCopyFieldTargetCount(destSchemaField);
    }
  }
}
