{
  String[] groupNames=null;
  if (gNames != null && gNames.trim().length() > 0) {
    groupNames=gNames.split(",");
  }
  Pattern regexp=getPattern(reStr);
  Matcher m=regexp.matcher(value);
  if (m.find() && m.groupCount() > 0) {
    if (m.groupCount() > 1) {
      List l=null;
      Map<String,String> map=null;
      if (groupNames == null) {
        l=new ArrayList();
      }
 else {
        map=new HashMap<>();
      }
      for (int i=1; i <= m.groupCount(); i++) {
        try {
          if (l != null) {
            l.add(m.group(i));
          }
 else           if (map != null) {
            if (i <= groupNames.length) {
              String nameOfGroup=groupNames[i - 1];
              if (nameOfGroup != null && nameOfGroup.trim().length() > 0) {
                map.put(nameOfGroup,m.group(i));
              }
            }
          }
        }
 catch (        Exception e) {
          LOG.warn("Parsing failed for field : " + columnName,e);
        }
      }
      return l == null ? map : l;
    }
 else {
      return m.group(1);
    }
  }
  return null;
}
