{
  if (e.length <= n || e[0].length <= m) {
    e=new int[Math.max(e.length,n + 1)][Math.max(e.length,m + 1)];
  }
  int d[][]=e;
  int i;
  int j;
  char s_i;
  if (n == 0)   return m;
  if (m == 0)   return n;
  for (i=0; i <= n; i++)   d[i][0]=i;
  for (j=0; j <= m; j++)   d[0][j]=j;
  for (i=1; i <= n; i++) {
    s_i=s.charAt(i - 1);
    for (j=1; j <= m; j++) {
      if (s_i != t.charAt(j - 1))       d[i][j]=min(d[i - 1][j],d[i][j - 1],d[i - 1][j - 1]) + 1;
 else       d[i][j]=min(d[i - 1][j] + 1,d[i][j - 1] + 1,d[i - 1][j - 1]);
    }
  }
  return d[n][m];
}
