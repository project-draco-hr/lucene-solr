{
  if (from == mid || mid == to || compare(mid - 1,mid) <= 0) {
    return;
  }
 else   if (to - from == 2) {
    swap(mid - 1,mid);
    return;
  }
  while (compare(from,mid) <= 0) {
    ++from;
  }
  while (compare(mid - 1,to - 1) <= 0) {
    --to;
  }
  int first_cut, second_cut;
  int len11, len22;
  if (mid - from > to - mid) {
    len11=(mid - from) >>> 1;
    first_cut=from + len11;
    second_cut=lower(mid,to,first_cut);
    len22=second_cut - mid;
  }
 else {
    len22=(to - mid) >>> 1;
    second_cut=mid + len22;
    first_cut=upper(from,mid,second_cut);
    len11=first_cut - from;
  }
  rotate(first_cut,mid,second_cut);
  final int new_mid=first_cut + len22;
  mergeInPlace(from,first_cut,new_mid);
  mergeInPlace(new_mid,second_cut,to);
}
