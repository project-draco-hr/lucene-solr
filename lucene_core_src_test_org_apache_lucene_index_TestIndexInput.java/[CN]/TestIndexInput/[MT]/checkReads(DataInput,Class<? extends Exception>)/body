{
  assertEquals(128,is.readVInt());
  assertEquals(16383,is.readVInt());
  assertEquals(16384,is.readVInt());
  assertEquals(16385,is.readVInt());
  assertEquals(Integer.MAX_VALUE,is.readVInt());
  assertEquals(-1,is.readVInt());
  assertEquals((long)Integer.MAX_VALUE,is.readVLong());
  assertEquals(Long.MAX_VALUE,is.readVLong());
  assertEquals("Lucene",is.readString());
  assertEquals("\u00BF",is.readString());
  assertEquals("Lu\u00BFce\u00BFne",is.readString());
  assertEquals("\u2620",is.readString());
  assertEquals("Lu\u2620ce\u2620ne",is.readString());
  assertEquals("\uD834\uDD1E",is.readString());
  assertEquals("\uD834\uDD1E\uD834\uDD60",is.readString());
  assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne",is.readString());
  assertEquals("\u0000",is.readString());
  assertEquals("Lu\u0000ce\u0000ne",is.readString());
  try {
    is.readVInt();
    fail("Should throw " + expectedEx.getName());
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().startsWith("Invalid vInt"));
    assertTrue(expectedEx.isInstance(e));
  }
  assertEquals(1,is.readVInt());
  try {
    is.readVLong();
    fail("Should throw " + expectedEx.getName());
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().startsWith("Invalid vLong"));
    assertTrue(expectedEx.isInstance(e));
  }
  assertEquals(1L,is.readVLong());
}
