{
  assertEquals(ds1.cardinality(),ds2.cardinality());
  DocIdSetIterator it1=ds1.iterator();
  DocIdSetIterator it2=ds2.iterator();
  assertEquals(it1.docID(),it2.docID());
  for (int doc=it1.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it1.nextDoc()) {
    assertEquals(doc,it2.nextDoc());
    assertEquals(it1.docID(),it2.docID());
  }
  assertEquals(DocIdSetIterator.NO_MORE_DOCS,it2.nextDoc());
  assertEquals(it1.docID(),it2.docID());
  it1=ds1.iterator();
  it2=ds2.iterator();
  for (int doc=-1; doc != DocIdSetIterator.NO_MORE_DOCS; ) {
    if (random().nextBoolean()) {
      doc=it1.nextDoc();
      assertEquals(doc,it2.nextDoc());
      assertEquals(it1.docID(),it2.docID());
    }
 else {
      final int target=doc + 1 + random().nextInt(random().nextBoolean() ? 64 : numBits / 64);
      doc=it1.advance(target);
      assertEquals(doc,it2.advance(target));
      assertEquals(it1.docID(),it2.docID());
    }
  }
}
