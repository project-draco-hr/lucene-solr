{
  final int numBits=_TestUtil.nextInt(random(),100,1 << 20);
  final int numDocIdSets=_TestUtil.nextInt(random(),1,4);
  final List<FixedBitSet> fixedSets=new ArrayList<FixedBitSet>(numDocIdSets);
  for (int i=0; i < numDocIdSets; ++i) {
    fixedSets.add(randomSet(numBits,random().nextFloat()));
  }
  final List<WAH8DocIdSet> compressedSets=new ArrayList<WAH8DocIdSet>(numDocIdSets);
  for (  FixedBitSet set : fixedSets) {
    compressedSets.add(WAH8DocIdSet.copyOf(set.iterator()));
  }
  final WAH8DocIdSet union=WAH8DocIdSet.intersect(compressedSets);
  final FixedBitSet expected=new FixedBitSet(numBits);
  expected.set(0,expected.length());
  for (  DocIdSet set : fixedSets) {
    final DocIdSetIterator it=set.iterator();
    int lastDoc=-1;
    for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {
      expected.clear(lastDoc + 1,doc);
      lastDoc=doc;
    }
    if (lastDoc + 1 < expected.length()) {
      expected.clear(lastDoc + 1,expected.length());
    }
  }
  assertEquals(numBits,expected,union);
}
