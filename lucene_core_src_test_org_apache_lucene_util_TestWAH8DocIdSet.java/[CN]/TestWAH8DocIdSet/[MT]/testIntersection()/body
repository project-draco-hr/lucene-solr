{
  final int numBits=TestUtil.nextInt(random(),100,1 << 20);
  final int numDocIdSets=TestUtil.nextInt(random(),1,4);
  final List<BitSet> fixedSets=new ArrayList<BitSet>(numDocIdSets);
  for (int i=0; i < numDocIdSets; ++i) {
    fixedSets.add(randomSet(numBits,random().nextFloat()));
  }
  final List<WAH8DocIdSet> compressedSets=new ArrayList<WAH8DocIdSet>(numDocIdSets);
  for (  BitSet set : fixedSets) {
    compressedSets.add(copyOf(set,numBits));
  }
  final WAH8DocIdSet union=WAH8DocIdSet.intersect(compressedSets);
  final BitSet expected=new BitSet(numBits);
  expected.set(0,expected.size());
  for (  BitSet set : fixedSets) {
    for (int previousDoc=-1, doc=set.nextSetBit(0); ; previousDoc=doc, doc=set.nextSetBit(doc + 1)) {
      if (doc == -1) {
        expected.clear(previousDoc + 1,set.size());
        break;
      }
 else {
        expected.clear(previousDoc + 1,doc);
      }
    }
  }
  assertEquals(numBits,expected,union);
}
