{
  if (getIndex().getOrderedTerms().length == 0) {
    return null;
  }
  return new Fields(){
    @Override public FieldsEnum iterator(){
      final InstantiatedTerm[] orderedTerms=getIndex().getOrderedTerms();
      return new FieldsEnum(){
        int upto=-1;
        String currentField;
        @Override public String next(){
          do {
            upto++;
            if (upto >= orderedTerms.length) {
              return null;
            }
          }
 while (orderedTerms[upto].field() == currentField);
          currentField=orderedTerms[upto].field();
          return currentField;
        }
        @Override public TermsEnum terms(){
          return new InstantiatedTermsEnum(orderedTerms,upto,currentField);
        }
      }
;
    }
    @Override public Terms terms(    final String field){
      final InstantiatedTerm[] orderedTerms=getIndex().getOrderedTerms();
      int i=Arrays.binarySearch(orderedTerms,new Term(field),InstantiatedTerm.termComparator);
      if (i < 0) {
        i=-i - 1;
      }
      if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {
        return null;
      }
      final int startLoc=i;
      long sum=0;
      int upto=i;
      while (upto < orderedTerms.length && orderedTerms[i].field() == field) {
        sum+=orderedTerms[i].getTotalTermFreq();
        upto++;
      }
      final long sumTotalTermFreq=sum;
      return new Terms(){
        @Override public TermsEnum iterator(){
          return new InstantiatedTermsEnum(orderedTerms,startLoc,field);
        }
        @Override public long getSumTotalTermFreq(){
          return sumTotalTermFreq;
        }
        @Override public Comparator<BytesRef> getComparator(){
          return BytesRef.getUTF8SortedAsUnicodeComparator();
        }
      }
;
    }
  }
;
}
