{
  updateCommand=cmd;
  if (zkEnabled) {
    zkCheck();
    nodes=setupRequest(cmd.getHashableId(),cmd.getSolrInputDocument());
  }
 else {
    isLeader=getNonZkLeaderAssumption(req);
  }
  int minRf=-1;
  if (replicationTracker != null) {
    minRf=replicationTracker.minRf;
  }
 else {
    SolrParams rp=cmd.getReq().getParams();
    String distribUpdate=rp.get(DISTRIB_UPDATE_PARAM);
    if (distribUpdate == null || distribUpdate.equals(DistribPhase.TOLEADER.toString())) {
      String minRepFact=rp.get(UpdateRequest.MIN_REPFACT);
      if (minRepFact != null) {
        try {
          minRf=Integer.parseInt(minRepFact);
        }
 catch (        NumberFormatException nfe) {
          minRf=-1;
        }
        if (minRf <= 0)         throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid value " + minRepFact + " for "+ UpdateRequest.MIN_REPFACT+ "; must be >0 and less than or equal to the collection replication factor.");
      }
      if (minRf > 1) {
        String myShardId=forwardToLeader ? null : cloudDesc.getShardId();
        replicationTracker=new RequestReplicationTracker(myShardId,minRf);
      }
    }
  }
  boolean dropCmd=false;
  if (!forwardToLeader) {
    dropCmd=versionAdd(cmd);
  }
  if (dropCmd) {
    return;
  }
  if (zkEnabled && isLeader && !isSubShardLeader) {
    DocCollection coll=zkController.getClusterState().getCollection(collection);
    List<Node> subShardLeaders=getSubShardLeaders(coll,cloudDesc.getShardId(),cmd.getHashableId(),cmd.getSolrInputDocument());
    if (subShardLeaders != null && !subShardLeaders.isEmpty()) {
      ModifiableSolrParams params=new ModifiableSolrParams(filterParams(req.getParams()));
      params.set(DISTRIB_UPDATE_PARAM,DistribPhase.FROMLEADER.toString());
      params.set(DISTRIB_FROM,ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(),req.getCore().getName()));
      params.set(DISTRIB_FROM_PARENT,req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());
      for (      Node subShardLeader : subShardLeaders) {
        cmdDistrib.distribAdd(cmd,Collections.singletonList(subShardLeader),params,true);
      }
    }
    List<Node> nodesByRoutingRules=getNodesByRoutingRules(zkController.getClusterState(),coll,cmd.getHashableId(),cmd.getSolrInputDocument());
    if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {
      ModifiableSolrParams params=new ModifiableSolrParams(filterParams(req.getParams()));
      params.set(DISTRIB_UPDATE_PARAM,DistribPhase.FROMLEADER.toString());
      params.set(DISTRIB_FROM,ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(),req.getCore().getName()));
      params.set(DISTRIB_FROM_COLLECTION,req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName());
      params.set(DISTRIB_FROM_SHARD,req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());
      for (      Node nodesByRoutingRule : nodesByRoutingRules) {
        cmdDistrib.distribAdd(cmd,Collections.singletonList(nodesByRoutingRule),params,true);
      }
    }
  }
  ModifiableSolrParams params=null;
  if (nodes != null) {
    params=new ModifiableSolrParams(filterParams(req.getParams()));
    params.set(DISTRIB_UPDATE_PARAM,(isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString() : DistribPhase.TOLEADER.toString()));
    params.set(DISTRIB_FROM,ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(),req.getCore().getName()));
    if (replicationTracker != null && minRf > 1)     params.set(UpdateRequest.MIN_REPFACT,String.valueOf(minRf));
    cmdDistrib.distribAdd(cmd,nodes,params,false,replicationTracker);
  }
  if (returnVersions && rsp != null && idField != null) {
    if (addsResponse == null) {
      addsResponse=new NamedList<String>();
      rsp.add("adds",addsResponse);
    }
    if (scratch == null)     scratch=new CharsRef();
    idField.getType().indexedToReadable(cmd.getIndexedId(),scratch);
    addsResponse.add(scratch.toString(),cmd.getVersion());
  }
}
