{
  BytesRef idBytes=cmd.getIndexedId();
  if (idBytes == null) {
    super.processAdd(cmd);
    return false;
  }
  if (vinfo == null) {
    if (AtomicUpdateDocumentMerger.isAtomicUpdate(cmd)) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Atomic document updates are not supported unless <updateLog/> is configured");
    }
 else {
      super.processAdd(cmd);
      return false;
    }
  }
  int bucketHash=Hash.murmurhash3_x86_32(idBytes.bytes,idBytes.offset,idBytes.length,0);
  long versionOnUpdate=cmd.getVersion();
  if (versionOnUpdate == 0) {
    SolrInputField versionField=cmd.getSolrInputDocument().getField(VersionInfo.VERSION_FIELD);
    if (versionField != null) {
      Object o=versionField.getValue();
      versionOnUpdate=o instanceof Number ? ((Number)o).longValue() : Long.parseLong(o.toString());
    }
 else {
      String versionOnUpdateS=req.getParams().get(VERSION_FIELD);
      versionOnUpdate=versionOnUpdateS == null ? 0 : Long.parseLong(versionOnUpdateS);
    }
  }
  boolean isReplayOrPeersync=(cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;
  boolean leaderLogic=isLeader && !isReplayOrPeersync;
  boolean forwardedFromCollection=cmd.getReq().getParams().get(DISTRIB_FROM_COLLECTION) != null;
  VersionBucket bucket=vinfo.bucket(bucketHash);
  vinfo.lockForUpdate();
  try {
synchronized (bucket) {
      boolean checkDeleteByQueries=false;
      if (versionsStored) {
        long bucketVersion=bucket.highest;
        if (leaderLogic) {
          if (forwardedFromCollection && ulog.getState() == UpdateLog.State.ACTIVE) {
            log.info("Removing version field from doc: " + cmd.getPrintableId());
            cmd.solrDoc.remove(VERSION_FIELD);
            versionOnUpdate=0;
          }
          boolean updated=getUpdatedDocument(cmd,versionOnUpdate);
          if (forwardedFromCollection && ulog.getState() != UpdateLog.State.ACTIVE && isReplayOrPeersync == false) {
            log.info("Leader logic applied but update log is buffering: " + cmd.getPrintableId());
            cmd.setFlags(cmd.getFlags() | UpdateCommand.BUFFERING);
            ulog.add(cmd);
            return true;
          }
          if (versionOnUpdate != 0) {
            Long lastVersion=vinfo.lookupVersion(cmd.getIndexedId());
            long foundVersion=lastVersion == null ? -1 : lastVersion;
            if (versionOnUpdate == foundVersion || (versionOnUpdate < 0 && foundVersion < 0) || (versionOnUpdate == 1 && foundVersion > 0)) {
            }
 else {
              throw new SolrException(ErrorCode.CONFLICT,"version conflict for " + cmd.getPrintableId() + " expected="+ versionOnUpdate+ " actual="+ foundVersion);
            }
          }
          long version=vinfo.getNewClock();
          cmd.setVersion(version);
          cmd.getSolrInputDocument().setField(VersionInfo.VERSION_FIELD,version);
          bucket.updateHighest(version);
        }
 else {
          cmd.setVersion(versionOnUpdate);
          if (ulog.getState() != UpdateLog.State.ACTIVE && isReplayOrPeersync == false) {
            cmd.setFlags(cmd.getFlags() | UpdateCommand.BUFFERING);
            ulog.add(cmd);
            return true;
          }
          if (bucketVersion != 0 && bucketVersion < versionOnUpdate) {
            bucket.updateHighest(versionOnUpdate);
          }
 else {
            Long lastVersion=vinfo.lookupVersion(cmd.getIndexedId());
            if (lastVersion != null && Math.abs(lastVersion) >= versionOnUpdate) {
              log.debug("Dropping add update due to version {}",idBytes.utf8ToString());
              return true;
            }
            checkDeleteByQueries=true;
          }
        }
      }
      boolean willDistrib=isLeader && nodes != null && nodes.size() > 0;
      SolrInputDocument clonedDoc=null;
      if (willDistrib && cloneRequiredOnLeader) {
        clonedDoc=cmd.solrDoc.deepCopy();
      }
      doLocalAdd(cmd);
      if (willDistrib && cloneRequiredOnLeader) {
        cmd.solrDoc=clonedDoc;
      }
    }
  }
  finally {
    vinfo.unlockForUpdate();
  }
  return false;
}
