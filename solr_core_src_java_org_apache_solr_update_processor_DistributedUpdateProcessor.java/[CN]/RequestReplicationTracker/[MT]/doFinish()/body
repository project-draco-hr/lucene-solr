{
  cmdDistrib.finish();
  List<Error> errors=cmdDistrib.getErrors();
  if (errors.size() > 0) {
    if (errors.get(0).req.node instanceof RetryNode) {
      rsp.setException(errors.get(0).e);
    }
 else {
      if (log.isWarnEnabled()) {
        for (        Error error : errors) {
          log.warn("Error sending update",error.e);
        }
      }
    }
  }
  for (  final SolrCmdDistributor.Error error : errors) {
    if (error.req.node instanceof RetryNode) {
      continue;
    }
    DistribPhase phase=DistribPhase.parseParam(error.req.uReq.getParams().get(DISTRIB_UPDATE_PARAM));
    if (phase != DistribPhase.FROMLEADER)     continue;
    if (error.req.uReq.getParams().get(COMMIT_END_POINT) != null)     continue;
    final String replicaUrl=error.req.node.getUrl();
    String cause=(error.e instanceof SolrException) ? ((SolrException)error.e).getMetadata("cause") : null;
    if ("LeaderChanged".equals(cause)) {
      log.error("On " + cloudDesc.getCoreNodeName() + ", replica "+ replicaUrl+ " now thinks it is the leader! Failing the request to let the client retry! "+ error.e);
      rsp.setException(error.e);
      break;
    }
    int maxTries=1;
    boolean sendRecoveryCommand=true;
    String collection=null;
    String shardId=null;
    if (error.req.node instanceof StdNode) {
      StdNode stdNode=(StdNode)error.req.node;
      collection=stdNode.getCollection();
      shardId=stdNode.getShardId();
      String leaderCoreNodeName=null;
      try {
        leaderCoreNodeName=zkController.getZkStateReader().getLeaderRetry(collection,shardId).getName();
      }
 catch (      Exception exc) {
        log.error("Failed to determine if " + cloudDesc.getCoreNodeName() + " is still the leader for "+ collection+ " "+ shardId+ " before putting "+ replicaUrl+ " into leader-initiated recovery due to: "+ exc);
      }
      List<ZkCoreNodeProps> myReplicas=zkController.getZkStateReader().getReplicaProps(collection,cloudDesc.getShardId(),cloudDesc.getCoreNodeName());
      boolean foundErrorNodeInReplicaList=false;
      for (      ZkCoreNodeProps replicaProp : myReplicas) {
        if (((Replica)replicaProp.getNodeProps()).getName().equals(((Replica)stdNode.getNodeProps().getNodeProps()).getName())) {
          foundErrorNodeInReplicaList=true;
          break;
        }
      }
      if (cloudDesc.getCoreNodeName().equals(leaderCoreNodeName) && foundErrorNodeInReplicaList) {
        try {
          sendRecoveryCommand=zkController.ensureReplicaInLeaderInitiatedRecovery(collection,shardId,replicaUrl,stdNode.getNodeProps(),false);
          if (sendRecoveryCommand) {
            maxTries=120;
          }
        }
 catch (        Exception exc) {
          Throwable setLirZnodeFailedCause=SolrException.getRootCause(exc);
          log.error("Leader failed to set replica " + error.req.node.getUrl() + " state to DOWN due to: "+ setLirZnodeFailedCause,setLirZnodeFailedCause);
          if (setLirZnodeFailedCause instanceof KeeperException.SessionExpiredException || setLirZnodeFailedCause instanceof KeeperException.ConnectionLossException) {
            sendRecoveryCommand=false;
          }
        }
      }
 else {
        sendRecoveryCommand=false;
        if (!foundErrorNodeInReplicaList) {
          log.warn("Core " + cloudDesc.getCoreNodeName() + " belonging to "+ collection+ " "+ shardId+ ", does not have error'd node "+ stdNode.getNodeProps().getCoreUrl()+ " as a replica. "+ "No request recovery command will be sent!");
        }
 else {
          log.warn("Core " + cloudDesc.getCoreNodeName() + " is no longer the leader for "+ collection+ " "+ shardId+ ", no request recovery command will be sent!");
        }
      }
    }
    if (!sendRecoveryCommand)     continue;
    Throwable rootCause=SolrException.getRootCause(error.e);
    log.error("Setting up to try to start recovery on replica " + replicaUrl + " after: "+ rootCause);
    CoreContainer coreContainer=req.getCore().getCoreDescriptor().getCoreContainer();
    LeaderInitiatedRecoveryThread lirThread=new LeaderInitiatedRecoveryThread(zkController,coreContainer,collection,shardId,error.req.node.getNodeProps(),maxTries,cloudDesc.getCoreNodeName());
    ExecutorService executor=coreContainer.getUpdateShardHandler().getUpdateExecutor();
    executor.execute(lirThread);
  }
  if (replicationTracker != null) {
    rsp.getResponseHeader().add(UpdateRequest.REPFACT,replicationTracker.getAchievedRf());
    rsp.getResponseHeader().add(UpdateRequest.MIN_REPFACT,replicationTracker.minRf);
    replicationTracker=null;
  }
}
