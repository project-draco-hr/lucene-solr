{
  cmdDistrib.finish();
  List<Error> errors=cmdDistrib.getErrors();
  if (errors.size() > 0) {
    if (errors.get(0).req.node instanceof RetryNode) {
      rsp.setException(errors.get(0).e);
    }
 else {
      if (log.isWarnEnabled()) {
        for (        Error error : errors) {
          log.warn("Error sending update to " + error.req.node.getBaseUrl(),error.e);
        }
      }
    }
  }
  for (  final SolrCmdDistributor.Error error : errors) {
    if (error.req.node instanceof RetryNode) {
      continue;
    }
    DistribPhase phase=DistribPhase.parseParam(error.req.uReq.getParams().get(DISTRIB_UPDATE_PARAM));
    if (phase != DistribPhase.FROMLEADER)     continue;
    if (error.req.uReq.getParams().get(COMMIT_END_POINT) != null)     continue;
    final String replicaUrl=error.req.node.getUrl();
    String cause=(error.e instanceof SolrException) ? ((SolrException)error.e).getMetadata("cause") : null;
    if ("LeaderChanged".equals(cause)) {
      log.error("On " + cloudDesc.getCoreNodeName() + ", replica "+ replicaUrl+ " now thinks it is the leader! Failing the request to let the client retry! "+ error.e);
      rsp.setException(error.e);
      break;
    }
    String collection=null;
    String shardId=null;
    if (error.req.node instanceof StdNode) {
      StdNode stdNode=(StdNode)error.req.node;
      collection=stdNode.getCollection();
      shardId=stdNode.getShardId();
      String leaderCoreNodeName=null;
      Exception getLeaderExc=null;
      Replica leaderProps=null;
      try {
        leaderProps=zkController.getZkStateReader().getLeader(collection,shardId);
        if (leaderProps != null) {
          leaderCoreNodeName=leaderProps.getName();
        }
      }
 catch (      Exception exc) {
        getLeaderExc=exc;
      }
      if (leaderCoreNodeName == null) {
        log.warn("Failed to determine if {} is still the leader for collection={} shardId={} " + "before putting {} into leader-initiated recovery",cloudDesc.getCoreNodeName(),collection,shardId,replicaUrl,getLeaderExc);
      }
      List<ZkCoreNodeProps> myReplicas=zkController.getZkStateReader().getReplicaProps(collection,cloudDesc.getShardId(),cloudDesc.getCoreNodeName());
      boolean foundErrorNodeInReplicaList=false;
      if (myReplicas != null) {
        for (        ZkCoreNodeProps replicaProp : myReplicas) {
          if (((Replica)replicaProp.getNodeProps()).getName().equals(((Replica)stdNode.getNodeProps().getNodeProps()).getName())) {
            foundErrorNodeInReplicaList=true;
            break;
          }
        }
      }
      if (replicationTracker != null && replicationTracker.getAchievedRf() < replicationTracker.minRf) {
        continue;
      }
      if (leaderCoreNodeName != null && cloudDesc.getCoreNodeName().equals(leaderCoreNodeName) && foundErrorNodeInReplicaList && !stdNode.getNodeProps().getCoreUrl().equals(leaderProps.getCoreUrl())) {
        try {
          Throwable rootCause=SolrException.getRootCause(error.e);
          log.error("Setting up to try to start recovery on replica {}",replicaUrl,rootCause);
          zkController.ensureReplicaInLeaderInitiatedRecovery(req.getCore().getCoreDescriptor().getCoreContainer(),collection,shardId,stdNode.getNodeProps(),req.getCore().getCoreDescriptor(),false);
        }
 catch (        Exception exc) {
          Throwable setLirZnodeFailedCause=SolrException.getRootCause(exc);
          log.error("Leader failed to set replica " + error.req.node.getUrl() + " state to DOWN due to: "+ setLirZnodeFailedCause,setLirZnodeFailedCause);
        }
      }
 else {
        if (!foundErrorNodeInReplicaList) {
          log.warn("Core " + cloudDesc.getCoreNodeName() + " belonging to "+ collection+ " "+ shardId+ ", does not have error'd node "+ stdNode.getNodeProps().getCoreUrl()+ " as a replica. "+ "No request recovery command will be sent!");
        }
 else {
          log.warn("Core " + cloudDesc.getCoreNodeName() + " is no longer the leader for "+ collection+ " "+ shardId+ " or we tried to put ourself into LIR, no request recovery command will be sent!");
        }
      }
    }
  }
  if (replicationTracker != null) {
    rsp.getResponseHeader().add(UpdateRequest.REPFACT,replicationTracker.getAchievedRf());
    rsp.getResponseHeader().add(UpdateRequest.MIN_REPFACT,replicationTracker.minRf);
    replicationTracker=null;
  }
}
