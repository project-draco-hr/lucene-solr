{
  List<Node> nodes=null;
  if (zkEnabled) {
    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {
      isLeader=false;
      forwardToLeader=false;
      return nodes;
    }
    String coreName=req.getCore().getName();
    ClusterState cstate=zkController.getClusterState();
    DocCollection coll=cstate.getCollection(collection);
    Slice slice=coll.getRouter().getTargetSlice(id,doc,req.getParams(),coll);
    if (slice == null) {
      String shardId=req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();
      slice=coll.getSlice(shardId);
      if (slice == null) {
        throw new SolrException(ErrorCode.BAD_REQUEST,"No shard " + shardId + " in "+ coll);
      }
    }
    DistribPhase phase=DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));
    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {
      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {
      }
 else {
        isLeader=false;
        forwardToLeader=false;
        return nodes;
      }
    }
    String shardId=slice.getName();
    try {
      Replica leaderReplica=zkController.getZkStateReader().getLeaderRetry(collection,shardId);
      isLeader=leaderReplica.getName().equals(req.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());
      if (!isLeader) {
        isSubShardLeader=amISubShardLeader(coll,slice,id,doc);
        if (isSubShardLeader) {
          String myShardId=req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();
          slice=coll.getSlice(myShardId);
          shardId=myShardId;
          leaderReplica=zkController.getZkStateReader().getLeaderRetry(collection,myShardId);
          List<ZkCoreNodeProps> myReplicas=zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName(),coreName,null,ZkStateReader.DOWN);
        }
      }
      doDefensiveChecks(phase);
      String fromCollection=updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);
      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {
        forwardToLeader=false;
      }
 else       if (isLeader || isSubShardLeader) {
        forwardToLeader=false;
        List<ZkCoreNodeProps> replicaProps=zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName(),coreName,null,ZkStateReader.DOWN);
        if (replicaProps != null) {
          if (nodes == null) {
            nodes=new ArrayList<>(replicaProps.size());
          }
          String[] skipList=req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);
          Set<String> skipListSet=null;
          if (skipList != null) {
            skipListSet=new HashSet<>(skipList.length);
            skipListSet.addAll(Arrays.asList(skipList));
            log.info("test.distrib.skip.servers was found and contains:" + skipListSet);
          }
          for (          ZkCoreNodeProps props : replicaProps) {
            if (skipList != null) {
              boolean skip=skipListSet.contains(props.getCoreUrl());
              log.info("check url:" + props.getCoreUrl() + " against:"+ skipListSet+ " result:"+ skip);
              if (!skip) {
                nodes.add(new StdNode(props));
              }
            }
 else {
              nodes.add(new StdNode(props));
            }
          }
        }
      }
 else {
        nodes=new ArrayList<>(1);
        nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica),zkController.getZkStateReader(),collection,shardId));
        forwardToLeader=true;
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
  }
  return nodes;
}
