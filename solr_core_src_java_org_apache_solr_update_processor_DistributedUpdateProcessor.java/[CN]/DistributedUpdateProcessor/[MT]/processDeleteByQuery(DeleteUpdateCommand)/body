{
  if (vinfo == null) {
    super.processDelete(cmd);
    return;
  }
  long versionOnUpdate=cmd.getVersion();
  if (versionOnUpdate == 0) {
    String versionOnUpdateS=req.getParams().get(VERSION_FIELD);
    versionOnUpdate=versionOnUpdateS == null ? 0 : Long.parseLong(versionOnUpdateS);
  }
  versionOnUpdate=Math.abs(versionOnUpdate);
  boolean isReplay=(cmd.getFlags() & UpdateCommand.REPLAY) != 0;
  boolean leaderLogic=isLeader && !isReplay;
  if (!leaderLogic && versionOnUpdate == 0) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"missing _version_ on update from leader");
  }
  vinfo.blockUpdates();
  try {
    if (versionsStored) {
      if (leaderLogic) {
        long version=vinfo.getNewClock();
        cmd.setVersion(-version);
      }
 else {
        cmd.setVersion(-versionOnUpdate);
        if (ulog.getState() != UpdateLog.State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
          cmd.setFlags(cmd.getFlags() | UpdateCommand.BUFFERING);
          ulog.deleteByQuery(cmd);
          return;
        }
      }
    }
    doLocalDelete(cmd);
  }
  finally {
    vinfo.unblockUpdates();
  }
  if (zkEnabled) {
    ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());
    if (!params.getBool(DELQUERY_END_POINT,false)) {
      params.set(DELQUERY_END_POINT,true);
      String nodeName=req.getCore().getCoreDescriptor().getCoreContainer().getZkController().getNodeName();
      String shardZkNodeName=nodeName + "_" + req.getCore().getName();
      List<Node> nodes=getCollectionUrls(req,req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),shardZkNodeName);
      if (nodes != null) {
        cmdDistrib.distribDelete(cmd,nodes,params);
        finish();
      }
    }
  }
  if (returnVersions && rsp != null) {
    if (deleteByQueryResponse == null) {
      deleteByQueryResponse=new NamedList<String>();
      rsp.add("deleteByQuery",deleteByQueryResponse);
    }
    deleteByQueryResponse.add(cmd.getQuery(),cmd.getVersion());
  }
}
