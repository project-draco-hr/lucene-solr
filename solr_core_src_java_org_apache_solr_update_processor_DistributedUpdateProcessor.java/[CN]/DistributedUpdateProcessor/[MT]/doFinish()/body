{
  cmdDistrib.finish();
  List<Error> errors=cmdDistrib.getErrors();
  if (errors.size() > 0) {
    if (errors.get(0).req.node instanceof RetryNode) {
      rsp.setException(errors.get(0).e);
    }
  }
  for (  final SolrCmdDistributor.Error error : errors) {
    if (error.req.node instanceof RetryNode) {
      continue;
    }
    final String recoveryUrl=error.req.node.getBaseUrl();
    Thread thread=new Thread(){
{
        setDaemon(true);
      }
      @Override public void run(){
        log.info("try and ask " + recoveryUrl + " to recover");
        HttpSolrServer server=new HttpSolrServer(recoveryUrl);
        server.setSoTimeout(60000);
        server.setConnectionTimeout(15000);
        RequestRecovery recoverRequestCmd=new RequestRecovery();
        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);
        recoverRequestCmd.setCoreName(error.req.node.getCoreName());
        try {
          server.request(recoverRequestCmd);
        }
 catch (        Throwable t) {
          SolrException.log(log,recoveryUrl + ": Could not tell a replica to recover",t);
        }
      }
    }
;
    ExecutorService executor=req.getCore().getCoreDescriptor().getCoreContainer().getUpdateExecutor();
    executor.execute(thread);
  }
}
