{
  cmdDistrib.finish();
  List<Error> errors=cmdDistrib.getErrors();
  if (errors.size() > 0) {
    if (errors.get(0).req.node instanceof RetryNode) {
      rsp.setException(errors.get(0).e);
    }
 else {
      if (log.isWarnEnabled()) {
        for (        Error error : errors) {
          log.warn("Error sending update",error.e);
        }
      }
    }
  }
  for (  final SolrCmdDistributor.Error error : errors) {
    if (error.req.node instanceof RetryNode) {
      continue;
    }
    DistribPhase phase=DistribPhase.parseParam(error.req.uReq.getParams().get(DISTRIB_UPDATE_PARAM));
    if (phase != DistribPhase.FROMLEADER)     continue;
    final String replicaUrl=error.req.node.getUrl();
    int maxTries=1;
    boolean sendRecoveryCommand=true;
    String collection=null;
    String shardId=null;
    if (error.req.node instanceof StdNode) {
      StdNode stdNode=(StdNode)error.req.node;
      collection=stdNode.getCollection();
      shardId=stdNode.getShardId();
      try {
        sendRecoveryCommand=zkController.ensureReplicaInLeaderInitiatedRecovery(collection,shardId,replicaUrl,stdNode.getNodeProps(),false);
        if (sendRecoveryCommand) {
          maxTries=120;
        }
      }
 catch (      Exception e) {
        log.error("Leader failed to set replica " + error.req.node.getUrl() + " state to DOWN due to: "+ e,e);
      }
    }
    if (!sendRecoveryCommand)     continue;
    Throwable rootCause=SolrException.getRootCause(error.e);
    log.error("Setting up to try to start recovery on replica " + replicaUrl + " after: "+ rootCause);
    CoreContainer coreContainer=req.getCore().getCoreDescriptor().getCoreContainer();
    LeaderInitiatedRecoveryThread lirThread=new LeaderInitiatedRecoveryThread(zkController,coreContainer,collection,shardId,error.req.node.getNodeProps(),maxTries);
    ExecutorService executor=coreContainer.getUpdateShardHandler().getUpdateExecutor();
    executor.execute(lirThread);
  }
}
