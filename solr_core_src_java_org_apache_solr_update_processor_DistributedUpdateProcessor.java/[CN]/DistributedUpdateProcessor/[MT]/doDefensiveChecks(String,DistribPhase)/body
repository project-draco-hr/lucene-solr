{
  String from=req.getParams().get("distrib.from");
  boolean localIsLeader=req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader();
  if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) {
    log.error("Request says it is coming from leader, but we are the leader: " + req.getParamString());
    throw new SolrException(ErrorCode.BAD_REQUEST,"Request says it is coming from leader, but we are the leader");
  }
  if (DistribPhase.FROMLEADER == phase && from != null) {
    ZkCoreNodeProps clusterStateLeader=new ZkCoreNodeProps(zkController.getClusterState().getLeader(collection,shardId));
    if (clusterStateLeader.getNodeProps() == null || !clusterStateLeader.getCoreUrl().equals(from)) {
      String coreUrl=null;
      if (clusterStateLeader.getNodeProps() != null) {
        coreUrl=clusterStateLeader.getCoreUrl();
      }
      log.error("We got a request from the leader, but it's not who our cluster state says is the leader :" + req.getParamString() + " : "+ coreUrl);
      new SolrException(ErrorCode.BAD_REQUEST,"We got a request from the leader, but it's not who our cluster state says is the leader.");
    }
  }
}
