{
  if (!zkEnabled) {
    isLeader=getNonZkLeaderAssumption(req);
  }
 else {
    zkCheck();
  }
  DistribPhase phase=DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));
  if (zkEnabled && DistribPhase.NONE == phase) {
    boolean leaderForAnyShard=false;
    Map<String,Slice> slices=zkController.getClusterState().getSlicesMap(collection);
    if (slices == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot find collection:" + collection + " in "+ zkController.getClusterState().getCollections());
    }
    ModifiableSolrParams params=new ModifiableSolrParams(filterParams(req.getParams()));
    params.set(DISTRIB_UPDATE_PARAM,DistribPhase.TOLEADER.toString());
    List<Node> leaders=new ArrayList<Node>(slices.size());
    for (    Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {
      String sliceName=sliceEntry.getKey();
      ZkNodeProps leaderProps;
      try {
        leaderProps=zkController.getZkStateReader().getLeaderProps(collection,sliceName);
      }
 catch (      InterruptedException e) {
        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Exception finding leader for shard " + sliceName,e);
      }
      ZkCoreNodeProps coreLeaderProps=new ZkCoreNodeProps(leaderProps);
      String leaderNodeName=coreLeaderProps.getCoreNodeName();
      String coreName=req.getCore().getName();
      String coreNodeName=zkController.getNodeName() + "_" + coreName;
      isLeader=coreNodeName.equals(leaderNodeName);
      if (isLeader) {
        leaderForAnyShard=true;
      }
 else {
        leaders.add(new StdNode(coreLeaderProps));
      }
    }
    params.remove("commit");
    cmdDistrib.distribDelete(cmd,leaders,params);
    if (!leaderForAnyShard) {
      return;
    }
    phase=DistribPhase.TOLEADER;
  }
  List<Node> replicas=null;
  if (zkEnabled && DistribPhase.TOLEADER == phase) {
    isLeader=true;
    replicas=setupRequest();
  }
 else   if (DistribPhase.FROMLEADER == phase) {
    isLeader=false;
  }
  if (vinfo == null) {
    super.processDelete(cmd);
    return;
  }
  long versionOnUpdate=cmd.getVersion();
  if (versionOnUpdate == 0) {
    String versionOnUpdateS=req.getParams().get(VERSION_FIELD);
    versionOnUpdate=versionOnUpdateS == null ? 0 : Long.parseLong(versionOnUpdateS);
  }
  versionOnUpdate=Math.abs(versionOnUpdate);
  boolean isReplay=(cmd.getFlags() & UpdateCommand.REPLAY) != 0;
  boolean leaderLogic=isLeader && !isReplay;
  if (!leaderLogic && versionOnUpdate == 0) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"missing _version_ on update from leader");
  }
  vinfo.blockUpdates();
  try {
    if (versionsStored) {
      if (leaderLogic) {
        long version=vinfo.getNewClock();
        cmd.setVersion(-version);
        doLocalDelete(cmd);
      }
 else {
        cmd.setVersion(-versionOnUpdate);
        if (ulog.getState() != UpdateLog.State.ACTIVE && (cmd.getFlags() & UpdateCommand.REPLAY) == 0) {
          cmd.setFlags(cmd.getFlags() | UpdateCommand.BUFFERING);
          ulog.deleteByQuery(cmd);
          return;
        }
        doLocalDelete(cmd);
      }
    }
  }
  finally {
    vinfo.unblockUpdates();
  }
  if (leaderLogic && replicas != null) {
    ModifiableSolrParams params=new ModifiableSolrParams(filterParams(req.getParams()));
    params.set(VERSION_FIELD,Long.toString(cmd.getVersion()));
    params.set(DISTRIB_UPDATE_PARAM,DistribPhase.FROMLEADER.toString());
    params.set("update.from",ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(),req.getCore().getName()));
    cmdDistrib.distribDelete(cmd,replicas,params);
    cmdDistrib.finish();
  }
  if (returnVersions && rsp != null) {
    if (deleteByQueryResponse == null) {
      deleteByQueryResponse=new NamedList<String>();
      rsp.add("deleteByQuery",deleteByQueryResponse);
    }
    deleteByQueryResponse.add(cmd.getQuery(),cmd.getVersion());
  }
}
