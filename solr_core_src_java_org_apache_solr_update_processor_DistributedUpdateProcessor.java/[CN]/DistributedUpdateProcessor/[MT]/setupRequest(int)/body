{
  List<Node> nodes=null;
  if (zkEnabled) {
    numNodes=zkController.getClusterState().getLiveNodes().size();
    String shardId=getShard(hash,collection,zkController.getClusterState());
    try {
      ZkCoreNodeProps leaderProps=new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(collection,shardId));
      String leaderNodeName=leaderProps.getCoreNodeName();
      String coreName=req.getCore().getName();
      String coreNodeName=zkController.getNodeName() + "_" + coreName;
      isLeader=coreNodeName.equals(leaderNodeName);
      DistribPhase phase=DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));
      if (DistribPhase.FROMLEADER == phase) {
        forwardToLeader=false;
      }
 else       if (isLeader) {
        forwardToLeader=false;
        List<ZkCoreNodeProps> replicaProps=zkController.getZkStateReader().getReplicaProps(collection,shardId,zkController.getNodeName(),coreName,null,ZkStateReader.DOWN);
        if (replicaProps != null) {
          nodes=new ArrayList<Node>(replicaProps.size());
          String[] skipList=req.getParams().getParams("test.distrib.skip.servers");
          Set<String> skipListSet=null;
          if (skipList != null) {
            skipListSet=new HashSet<String>(skipList.length);
            skipListSet.addAll(Arrays.asList(skipList));
          }
          for (          ZkCoreNodeProps props : replicaProps) {
            if (skipList != null) {
              if (!skipListSet.contains(props.getCoreUrl())) {
                nodes.add(new StdNode(props));
              }
            }
 else {
              nodes.add(new StdNode(props));
            }
          }
        }
      }
 else {
        nodes=new ArrayList<Node>(1);
        nodes.add(new RetryNode(leaderProps,zkController.getZkStateReader(),collection,shardId));
        forwardToLeader=true;
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
  }
  return nodes;
}
