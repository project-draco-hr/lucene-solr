{
  Query q=super.parse();
  float boost=1f;
  if (q instanceof BoostQuery) {
    BoostQuery bq=(BoostQuery)q;
    boost=bq.getBoost();
    q=bq.getQuery();
  }
  if (q instanceof BooleanQuery == false) {
    if (boost != 1f) {
      q=new BoostQuery(q,boost);
    }
    return q;
  }
  BooleanQuery obq=(BooleanQuery)q;
  Collection<Query> should=new ArrayList<>();
  Collection<BooleanClause> prohibOrReq=new ArrayList<>();
  BooleanQuery.Builder newqb=new BooleanQuery.Builder();
  for (  BooleanClause clause : obq) {
    if (clause.isProhibited() || clause.isRequired()) {
      prohibOrReq.add(clause);
    }
 else {
      BooleanQuery.Builder bq=new BooleanQuery.Builder();
      bq.add(clause);
      should.add(bq.build());
    }
  }
  if (should.size() > 0) {
    DisjunctionMaxQuery dmq=new DisjunctionMaxQuery(should,tie);
    newqb.add(dmq,BooleanClause.Occur.SHOULD);
  }
  for (  BooleanClause c : prohibOrReq) {
    newqb.add(c);
  }
  Query newq=newqb.build();
  if (boost != 1f) {
    newq=new BoostQuery(newq,boost);
  }
  return newq;
}
