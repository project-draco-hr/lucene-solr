{
  final Class<? extends AttributeImpl> clazz=this.getClass();
  final Class<? extends Attribute>[] interfaces=AttributeSource.getAttributeInterfaces(clazz);
  if (interfaces.length != 1) {
    throw new UnsupportedOperationException(clazz.getName() + " implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.");
  }
  final Class<? extends Attribute> interf=interfaces[0];
  final Field[] fields=clazz.getDeclaredFields();
  try {
    for (int i=0; i < fields.length; i++) {
      final Field f=fields[i];
      if (Modifier.isStatic(f.getModifiers()))       continue;
      f.setAccessible(true);
      reflector.reflect(interf,f.getName(),f.get(this));
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}
