{
{
    Query query=strategy.makeQuery(new SpatialArgs(operation,randomRectangle()));
    SearchResults searchResults=executeQuery(query,1);
    assertEquals(0,searchResults.numFound);
  }
  final boolean biasContains=(operation == SpatialOperation.Contains);
  Map<String,Shape> indexedShapes=new LinkedHashMap<>();
  Map<String,Shape> indexedShapesGS=new LinkedHashMap<>();
  final int numIndexedShapes=randomIntBetween(1,6);
  boolean indexedAtLeastOneShapePair=false;
  for (int i=0; i < numIndexedShapes; i++) {
    String id="" + i;
    Shape indexedShape;
    int R=random().nextInt(12);
    if (R == 0) {
      indexedShape=null;
    }
 else     if (R == 1) {
      indexedShape=randomPoint();
    }
 else     if (R <= 4) {
      indexedShape=randomShapePairRect(biasContains);
      indexedAtLeastOneShapePair=true;
    }
 else {
      indexedShape=randomRectangle();
    }
    indexedShapes.put(id,indexedShape);
    indexedShapesGS.put(id,gridSnap(indexedShape));
    adoc(id,indexedShape);
    if (random().nextInt(10) == 0)     commit();
  }
  Iterator<String> idIter=indexedShapes.keySet().iterator();
  while (idIter.hasNext()) {
    String id=idIter.next();
    if (random().nextInt(10) == 0) {
      deleteDoc(id);
      idIter.remove();
      indexedShapesGS.remove(id);
    }
  }
  commit();
  final int numQueryShapes=atLeast(20);
  for (int i=0; i < numQueryShapes; i++) {
    int scanLevel=randomInt(grid.getMaxLevels());
    ((RecursivePrefixTreeStrategy)strategy).setPrefixGridScanLevel(scanLevel);
    final Shape queryShape;
switch (randomInt(10)) {
case 0:
      queryShape=randomPoint();
    break;
case 1:
case 2:
case 3:
  if (!indexedAtLeastOneShapePair) {
    queryShape=randomShapePairRect(biasContains);
    break;
  }
default :
queryShape=randomRectangle();
}
final Shape queryShapeGS=gridSnap(queryShape);
final boolean opIsDisjoint=operation == SpatialOperation.IsDisjointTo;
Set<String> expectedIds=new LinkedHashSet<>();
Set<String> secondaryIds=new LinkedHashSet<>();
for (Map.Entry<String,Shape> entry : indexedShapes.entrySet()) {
String id=entry.getKey();
Shape indexedShapeCompare=entry.getValue();
if (indexedShapeCompare == null) continue;
Shape queryShapeCompare=queryShape;
if (operation.evaluate(indexedShapeCompare,queryShapeCompare)) {
expectedIds.add(id);
if (opIsDisjoint) {
  indexedShapeCompare=indexedShapesGS.get(id);
  queryShapeCompare=queryShapeGS;
  if (!operation.evaluate(indexedShapeCompare,queryShapeCompare))   secondaryIds.add(id);
}
}
 else if (!opIsDisjoint) {
if (operation == SpatialOperation.Intersects) {
  indexedShapeCompare=indexedShapesGS.get(id);
  queryShapeCompare=queryShapeGS;
}
 else if (operation == SpatialOperation.Contains) {
  indexedShapeCompare=indexedShapesGS.get(id);
}
 else if (operation == SpatialOperation.IsWithin) {
  queryShapeCompare=queryShapeGS;
}
if (operation.evaluate(indexedShapeCompare,queryShapeCompare)) secondaryIds.add(id);
}
}
SpatialArgs args=new SpatialArgs(operation,queryShape);
if (queryShape instanceof ShapePair) args.setDistErrPct(0.0);
Query query=strategy.makeQuery(args);
SearchResults got=executeQuery(query,100);
Set<String> remainingExpectedIds=new LinkedHashSet<>(expectedIds);
for (SearchResult result : got.results) {
String id=result.getId();
boolean removed=remainingExpectedIds.remove(id);
if (!removed && (!opIsDisjoint && !secondaryIds.contains(id))) {
fail("Shouldn't match",id,indexedShapes,indexedShapesGS,queryShape);
}
}
if (opIsDisjoint) remainingExpectedIds.removeAll(secondaryIds);
if (!remainingExpectedIds.isEmpty()) {
String id=remainingExpectedIds.iterator().next();
fail("Should have matched",id,indexedShapes,indexedShapesGS,queryShape);
}
}
}
