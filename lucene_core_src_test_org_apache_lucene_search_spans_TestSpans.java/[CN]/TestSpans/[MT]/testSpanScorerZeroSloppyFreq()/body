{
  IndexReaderContext topReaderContext=searcher.getTopReaderContext();
  List<LeafReaderContext> leaves=topReaderContext.leaves();
  int subIndex=ReaderUtil.subIndex(11,leaves);
  for (int i=0, c=leaves.size(); i < c; i++) {
    final LeafReaderContext ctx=leaves.get(i);
    final Similarity sim=new ClassicSimilarity(){
      @Override public float sloppyFreq(      int distance){
        return 0.0f;
      }
    }
;
    final Similarity oldSim=searcher.getSimilarity(true);
    Scorer spanScorer;
    try {
      searcher.setSimilarity(sim);
      SpanQuery snq=spanNearOrderedQuery(field,1,"t1","t2");
      spanScorer=searcher.createNormalizedWeight(snq,true).scorer(ctx);
    }
  finally {
      searcher.setSimilarity(oldSim);
    }
    if (i == subIndex) {
      assertTrue("first doc",spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
      assertEquals("first doc number",spanScorer.docID() + ctx.docBase,11);
      float score=spanScorer.score();
      assertTrue("first doc score should be zero, " + score,score == 0.0f);
    }
 else {
      assertTrue("no second doc",spanScorer == null || spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);
    }
  }
}
