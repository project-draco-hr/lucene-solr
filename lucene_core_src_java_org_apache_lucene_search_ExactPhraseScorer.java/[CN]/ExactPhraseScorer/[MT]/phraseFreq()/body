{
  final PostingsAndPosition[] postings=this.postings;
  for (  PostingsAndPosition posting : postings) {
    posting.freq=posting.postings.freq();
    posting.pos=posting.postings.nextPosition();
    posting.upTo=1;
  }
  int freq=0;
  final PostingsAndPosition lead=postings[0];
  advanceHead:   while (true) {
    final int phrasePos=lead.pos - lead.offset;
    for (int j=1; j < postings.length; ++j) {
      final PostingsAndPosition posting=postings[j];
      final int expectedPos=phrasePos + posting.offset;
      if (advancePosition(posting,expectedPos) == false) {
        break advanceHead;
      }
      if (posting.pos != expectedPos) {
        if (advancePosition(lead,posting.pos - posting.offset + lead.offset)) {
          continue advanceHead;
        }
 else {
          break advanceHead;
        }
      }
    }
    freq+=1;
    if (needsScores == false) {
      break;
    }
    if (lead.upTo == lead.freq) {
      break;
    }
    lead.pos=lead.postings.nextPosition();
    lead.upTo+=1;
  }
  return this.freq=freq;
}
