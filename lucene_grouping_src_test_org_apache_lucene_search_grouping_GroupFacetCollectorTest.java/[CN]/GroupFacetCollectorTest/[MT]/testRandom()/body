{
  Random random=random();
  int numberOfRuns=_TestUtil.nextInt(random,3,6);
  for (int indexIter=0; indexIter < numberOfRuns; indexIter++) {
    boolean multipleFacetsPerDocument=random.nextBoolean();
    IndexContext context=createIndexContext(multipleFacetsPerDocument);
    final IndexSearcher searcher=newSearcher(context.indexReader);
    for (int searchIter=0; searchIter < 100; searchIter++) {
      boolean useDv=context.useDV && random.nextBoolean();
      String searchTerm=context.contentStrings[random.nextInt(context.contentStrings.length)];
      int limit=random.nextInt(context.facetValues.size());
      int offset=random.nextInt(context.facetValues.size() - limit);
      int size=offset + limit;
      int minCount=random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);
      boolean orderByCount=random.nextBoolean();
      String randomStr=getFromSet(context.facetValues,random.nextInt(context.facetValues.size()));
      final String facetPrefix;
      if (randomStr == null) {
        facetPrefix=null;
      }
 else {
        int codePointLen=randomStr.codePointCount(0,randomStr.length());
        int randomLen=random.nextInt(codePointLen);
        if (codePointLen == randomLen - 1) {
          facetPrefix=null;
        }
 else {
          int end=randomStr.offsetByCodePoints(0,randomLen);
          facetPrefix=random.nextBoolean() ? null : randomStr.substring(end);
        }
      }
      GroupedFacetResult expectedFacetResult=createExpectedFacetResult(searchTerm,context,offset,limit,minCount,orderByCount,facetPrefix);
      AbstractGroupFacetCollector groupFacetCollector=createRandomCollector("group","facet",facetPrefix,multipleFacetsPerDocument,useDv);
      searcher.search(new TermQuery(new Term("content",searchTerm)),groupFacetCollector);
      TermGroupFacetCollector.GroupedFacetResult actualFacetResult=groupFacetCollector.mergeSegmentResults(size,minCount,orderByCount);
      List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries=expectedFacetResult.getFacetEntries();
      List<TermGroupFacetCollector.FacetEntry> actualFacetEntries=actualFacetResult.getFacetEntries(offset,limit);
      if (VERBOSE) {
        System.out.println("Collector: " + groupFacetCollector.getClass().getSimpleName());
        System.out.println("Num group: " + context.numGroups);
        System.out.println("Num doc: " + context.numDocs);
        System.out.println("Index iter: " + indexIter);
        System.out.println("multipleFacetsPerDocument: " + multipleFacetsPerDocument);
        System.out.println("Search iter: " + searchIter);
        System.out.println("Search term: " + searchTerm);
        System.out.println("Min count: " + minCount);
        System.out.println("Facet offset: " + offset);
        System.out.println("Facet limit: " + limit);
        System.out.println("Facet prefix: " + facetPrefix);
        System.out.println("Order by count: " + orderByCount);
        System.out.println("\n=== Expected: \n");
        System.out.println("Total count " + expectedFacetResult.getTotalCount());
        System.out.println("Total missing count " + expectedFacetResult.getTotalMissingCount());
        int counter=1;
        for (        TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {
          System.out.println(String.format(Locale.ROOT,"%d. Expected facet value %s with count %d",counter++,expectedFacetEntry.getValue().utf8ToString(),expectedFacetEntry.getCount()));
        }
        System.out.println("\n=== Actual: \n");
        System.out.println("Total count " + actualFacetResult.getTotalCount());
        System.out.println("Total missing count " + actualFacetResult.getTotalMissingCount());
        counter=1;
        for (        TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {
          System.out.println(String.format(Locale.ROOT,"%d. Actual facet value %s with count %d",counter++,actualFacetEntry.getValue().utf8ToString(),actualFacetEntry.getCount()));
        }
        System.out.println("\n===================================================================================");
      }
      assertEquals(expectedFacetResult.getTotalCount(),actualFacetResult.getTotalCount());
      assertEquals(expectedFacetResult.getTotalMissingCount(),actualFacetResult.getTotalMissingCount());
      assertEquals(expectedFacetEntries.size(),actualFacetEntries.size());
      for (int i=0; i < expectedFacetEntries.size(); i++) {
        TermGroupFacetCollector.FacetEntry expectedFacetEntry=expectedFacetEntries.get(i);
        TermGroupFacetCollector.FacetEntry actualFacetEntry=actualFacetEntries.get(i);
        assertEquals(expectedFacetEntry.getValue().utf8ToString() + " != " + actualFacetEntry.getValue().utf8ToString(),expectedFacetEntry.getValue(),actualFacetEntry.getValue());
        assertEquals(expectedFacetEntry.getCount() + " != " + actualFacetEntry.getCount(),expectedFacetEntry.getCount(),actualFacetEntry.getCount());
      }
    }
    context.indexReader.close();
    context.dir.close();
  }
}
