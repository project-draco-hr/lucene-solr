{
  final Random random=random();
  final int numDocs=TestUtil.nextInt(random,138,1145) * RANDOM_MULTIPLIER;
  final int numGroups=TestUtil.nextInt(random,1,numDocs / 4);
  final int numFacets=TestUtil.nextInt(random,1,numDocs / 6);
  if (VERBOSE) {
    System.out.println("TEST: numDocs=" + numDocs + " numGroups="+ numGroups);
  }
  final List<String> groups=new ArrayList<>();
  for (int i=0; i < numGroups; i++) {
    groups.add(generateRandomNonEmptyString());
  }
  final List<String> facetValues=new ArrayList<>();
  for (int i=0; i < numFacets; i++) {
    facetValues.add(generateRandomNonEmptyString());
  }
  final String[] contentBrs=new String[TestUtil.nextInt(random,2,20)];
  if (VERBOSE) {
    System.out.println("TEST: create fake content");
  }
  for (int contentIDX=0; contentIDX < contentBrs.length; contentIDX++) {
    contentBrs[contentIDX]=generateRandomNonEmptyString();
    if (VERBOSE) {
      System.out.println("  content=" + contentBrs[contentIDX]);
    }
  }
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,dir,newIndexWriterConfig(new MockAnalyzer(random)));
  Document doc=new Document();
  Document docNoGroup=new Document();
  Document docNoFacet=new Document();
  Document docNoGroupNoFacet=new Document();
  Field group=newStringField("group","",Field.Store.NO);
  Field groupDc=new SortedDocValuesField("group",new BytesRef());
  doc.add(groupDc);
  docNoFacet.add(groupDc);
  doc.add(group);
  docNoFacet.add(group);
  Field[] facetFields;
  if (multipleFacetValuesPerDocument == false) {
    facetFields=new Field[2];
    facetFields[0]=newStringField("facet","",Field.Store.NO);
    doc.add(facetFields[0]);
    docNoGroup.add(facetFields[0]);
    facetFields[1]=new SortedDocValuesField("facet",new BytesRef());
    doc.add(facetFields[1]);
    docNoGroup.add(facetFields[1]);
  }
 else {
    facetFields=multipleFacetValuesPerDocument ? new Field[2 + random.nextInt(6)] : new Field[1];
    for (int i=0; i < facetFields.length; i++) {
      facetFields[i]=new SortedSetDocValuesField("facet",new BytesRef());
      doc.add(facetFields[i]);
      docNoGroup.add(facetFields[i]);
    }
  }
  Field content=newStringField("content","",Field.Store.NO);
  doc.add(content);
  docNoGroup.add(content);
  docNoFacet.add(content);
  docNoGroupNoFacet.add(content);
  NavigableSet<String> uniqueFacetValues=new TreeSet<>(new Comparator<String>(){
    @Override public int compare(    String a,    String b){
      if (a == b) {
        return 0;
      }
 else       if (a == null) {
        return -1;
      }
 else       if (b == null) {
        return 1;
      }
 else {
        return a.compareTo(b);
      }
    }
  }
);
  Map<String,Map<String,Set<String>>> searchTermToFacetToGroups=new HashMap<>();
  int facetWithMostGroups=0;
  for (int i=0; i < numDocs; i++) {
    final String groupValue;
    if (random.nextInt(24) == 17) {
      groupValue="";
    }
 else {
      groupValue=groups.get(random.nextInt(groups.size()));
    }
    String contentStr=contentBrs[random.nextInt(contentBrs.length)];
    if (!searchTermToFacetToGroups.containsKey(contentStr)) {
      searchTermToFacetToGroups.put(contentStr,new HashMap<String,Set<String>>());
    }
    Map<String,Set<String>> facetToGroups=searchTermToFacetToGroups.get(contentStr);
    List<String> facetVals=new ArrayList<>();
    if (multipleFacetValuesPerDocument == false) {
      String facetValue=facetValues.get(random.nextInt(facetValues.size()));
      uniqueFacetValues.add(facetValue);
      if (!facetToGroups.containsKey(facetValue)) {
        facetToGroups.put(facetValue,new HashSet<String>());
      }
      Set<String> groupsInFacet=facetToGroups.get(facetValue);
      groupsInFacet.add(groupValue);
      if (groupsInFacet.size() > facetWithMostGroups) {
        facetWithMostGroups=groupsInFacet.size();
      }
      facetFields[0].setStringValue(facetValue);
      facetFields[1].setBytesValue(new BytesRef(facetValue));
      facetVals.add(facetValue);
    }
 else {
      for (      Field facetField : facetFields) {
        String facetValue=facetValues.get(random.nextInt(facetValues.size()));
        uniqueFacetValues.add(facetValue);
        if (!facetToGroups.containsKey(facetValue)) {
          facetToGroups.put(facetValue,new HashSet<String>());
        }
        Set<String> groupsInFacet=facetToGroups.get(facetValue);
        groupsInFacet.add(groupValue);
        if (groupsInFacet.size() > facetWithMostGroups) {
          facetWithMostGroups=groupsInFacet.size();
        }
        facetField.setBytesValue(new BytesRef(facetValue));
        facetVals.add(facetValue);
      }
    }
    if (VERBOSE) {
      System.out.println("  doc content=" + contentStr + " group="+ (groupValue == null ? "null" : groupValue)+ " facetVals="+ facetVals);
    }
    if (groupValue != null) {
      groupDc.setBytesValue(new BytesRef(groupValue));
      group.setStringValue(groupValue);
    }
 else {
      groupDc.setBytesValue(new BytesRef());
    }
    content.setStringValue(contentStr);
    if (groupValue == null && facetVals.isEmpty()) {
      writer.addDocument(docNoGroupNoFacet);
    }
 else     if (facetVals.isEmpty()) {
      writer.addDocument(docNoFacet);
    }
 else     if (groupValue == null) {
      writer.addDocument(docNoGroup);
    }
 else {
      writer.addDocument(doc);
    }
  }
  DirectoryReader reader=writer.getReader();
  writer.close();
  return new IndexContext(searchTermToFacetToGroups,reader,numDocs,dir,facetWithMostGroups,numGroups,contentBrs,uniqueFacetValues);
}
