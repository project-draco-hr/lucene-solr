{
  final String groupField="hotel";
  FieldType customType=new FieldType();
  customType.setStored(true);
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  boolean useDv=true;
  Document doc=new Document();
  addField(doc,groupField,"a",useDv);
  addField(doc,"airport","ams",useDv);
  addField(doc,"duration","5",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"a",useDv);
  addField(doc,"airport","dus",useDv);
  addField(doc,"duration","10",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  addField(doc,"airport","ams",useDv);
  addField(doc,"duration","10",useDv);
  w.addDocument(doc);
  w.commit();
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  addField(doc,"airport","ams",useDv);
  addField(doc,"duration","5",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  addField(doc,"airport","ams",useDv);
  addField(doc,"duration","5",useDv);
  w.addDocument(doc);
  IndexSearcher indexSearcher=newSearcher(w.getReader());
  List<TermGroupFacetCollector.FacetEntry> entries;
  AbstractGroupFacetCollector groupedAirportFacetCollector;
  TermGroupFacetCollector.GroupedFacetResult airportResult;
  for (  int limit : new int[]{2,10,100,Integer.MAX_VALUE}) {
    groupedAirportFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "airport_dv" : "airport",null,false);
    indexSearcher.search(new MatchAllDocsQuery(),groupedAirportFacetCollector);
    int maxOffset=5;
    airportResult=groupedAirportFacetCollector.mergeSegmentResults(Integer.MAX_VALUE == limit ? limit : maxOffset + limit,0,false);
    assertEquals(3,airportResult.getTotalCount());
    assertEquals(0,airportResult.getTotalMissingCount());
    entries=airportResult.getFacetEntries(maxOffset,limit);
    assertEquals(0,entries.size());
    entries=airportResult.getFacetEntries(0,limit);
    assertEquals(2,entries.size());
    assertEquals("ams",entries.get(0).getValue().utf8ToString());
    assertEquals(2,entries.get(0).getCount());
    assertEquals("dus",entries.get(1).getValue().utf8ToString());
    assertEquals(1,entries.get(1).getCount());
    entries=airportResult.getFacetEntries(1,limit);
    assertEquals(1,entries.size());
    assertEquals("dus",entries.get(0).getValue().utf8ToString());
    assertEquals(1,entries.get(0).getCount());
  }
  AbstractGroupFacetCollector groupedDurationFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "duration_dv" : "duration",null,false);
  indexSearcher.search(new MatchAllDocsQuery(),groupedDurationFacetCollector);
  TermGroupFacetCollector.GroupedFacetResult durationResult=groupedDurationFacetCollector.mergeSegmentResults(10,0,false);
  assertEquals(4,durationResult.getTotalCount());
  assertEquals(0,durationResult.getTotalMissingCount());
  entries=durationResult.getFacetEntries(0,10);
  assertEquals(2,entries.size());
  assertEquals("10",entries.get(0).getValue().utf8ToString());
  assertEquals(2,entries.get(0).getCount());
  assertEquals("5",entries.get(1).getValue().utf8ToString());
  assertEquals(2,entries.get(1).getCount());
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  if (useDv) {
    addField(doc,"airport","",useDv);
  }
  addField(doc,"duration","5",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  addField(doc,"airport","bru",useDv);
  addField(doc,"duration","10",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"b",useDv);
  addField(doc,"airport","bru",useDv);
  addField(doc,"duration","15",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"a",useDv);
  addField(doc,"airport","bru",useDv);
  addField(doc,"duration","10",useDv);
  w.addDocument(doc);
  indexSearcher.getIndexReader().close();
  indexSearcher=newSearcher(w.getReader());
  groupedAirportFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "airport_dv" : "airport",null,!useDv);
  indexSearcher.search(new MatchAllDocsQuery(),groupedAirportFacetCollector);
  airportResult=groupedAirportFacetCollector.mergeSegmentResults(3,0,true);
  entries=airportResult.getFacetEntries(1,2);
  assertEquals(2,entries.size());
  if (useDv) {
    assertEquals(6,airportResult.getTotalCount());
    assertEquals(0,airportResult.getTotalMissingCount());
    assertEquals("bru",entries.get(0).getValue().utf8ToString());
    assertEquals(2,entries.get(0).getCount());
    assertEquals("",entries.get(1).getValue().utf8ToString());
    assertEquals(1,entries.get(1).getCount());
  }
 else {
    assertEquals(5,airportResult.getTotalCount());
    assertEquals(1,airportResult.getTotalMissingCount());
    assertEquals("bru",entries.get(0).getValue().utf8ToString());
    assertEquals(2,entries.get(0).getCount());
    assertEquals("dus",entries.get(1).getValue().utf8ToString());
    assertEquals(1,entries.get(1).getCount());
  }
  groupedDurationFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "duration_dv" : "duration",null,false);
  indexSearcher.search(new MatchAllDocsQuery(),groupedDurationFacetCollector);
  durationResult=groupedDurationFacetCollector.mergeSegmentResults(10,2,true);
  assertEquals(5,durationResult.getTotalCount());
  assertEquals(0,durationResult.getTotalMissingCount());
  entries=durationResult.getFacetEntries(1,1);
  assertEquals(1,entries.size());
  assertEquals("5",entries.get(0).getValue().utf8ToString());
  assertEquals(2,entries.get(0).getCount());
  doc=new Document();
  addField(doc,groupField,"c",useDv);
  addField(doc,"airport","bru",useDv);
  addField(doc,"duration","15",useDv);
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"c",useDv);
  addField(doc,"airport","dus",useDv);
  addField(doc,"duration","10",useDv);
  w.addDocument(doc);
  indexSearcher.getIndexReader().close();
  indexSearcher=newSearcher(w.getReader());
  groupedAirportFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "airport_dv" : "airport",null,false);
  indexSearcher.search(new MatchAllDocsQuery(),groupedAirportFacetCollector);
  airportResult=groupedAirportFacetCollector.mergeSegmentResults(10,0,false);
  entries=airportResult.getFacetEntries(0,10);
  if (useDv) {
    assertEquals(8,airportResult.getTotalCount());
    assertEquals(0,airportResult.getTotalMissingCount());
    assertEquals(4,entries.size());
    assertEquals("",entries.get(0).getValue().utf8ToString());
    assertEquals(1,entries.get(0).getCount());
    assertEquals("ams",entries.get(1).getValue().utf8ToString());
    assertEquals(2,entries.get(1).getCount());
    assertEquals("bru",entries.get(2).getValue().utf8ToString());
    assertEquals(3,entries.get(2).getCount());
    assertEquals("dus",entries.get(3).getValue().utf8ToString());
    assertEquals(2,entries.get(3).getCount());
  }
 else {
    assertEquals(7,airportResult.getTotalCount());
    assertEquals(1,airportResult.getTotalMissingCount());
    assertEquals(3,entries.size());
    assertEquals("ams",entries.get(0).getValue().utf8ToString());
    assertEquals(2,entries.get(0).getCount());
    assertEquals("bru",entries.get(1).getValue().utf8ToString());
    assertEquals(3,entries.get(1).getCount());
    assertEquals("dus",entries.get(2).getValue().utf8ToString());
    assertEquals(2,entries.get(2).getCount());
  }
  groupedDurationFacetCollector=createRandomCollector(useDv ? "hotel_dv" : "hotel",useDv ? "duration_dv" : "duration","1",false);
  indexSearcher.search(new MatchAllDocsQuery(),groupedDurationFacetCollector);
  durationResult=groupedDurationFacetCollector.mergeSegmentResults(10,0,true);
  assertEquals(5,durationResult.getTotalCount());
  assertEquals(0,durationResult.getTotalMissingCount());
  entries=durationResult.getFacetEntries(0,10);
  assertEquals(2,entries.size());
  assertEquals("10",entries.get(0).getValue().utf8ToString());
  assertEquals(3,entries.get(0).getCount());
  assertEquals("15",entries.get(1).getValue().utf8ToString());
  assertEquals(2,entries.get(1).getCount());
  w.shutdown();
  indexSearcher.getIndexReader().close();
  dir.close();
}
