{
  while (true) {
    final int shapeType=random().nextInt(4);
switch (shapeType) {
case 0:
{
        final boolean isClockwise=random().nextDouble() < 0.5;
        try {
          return Geo3DPoint.newPolygonQuery(field,makePoly(PlanetModel.WGS84,new GeoPoint(PlanetModel.WGS84,toRadians(GeoTestUtil.nextLatitude()),toRadians(GeoTestUtil.nextLongitude())),isClockwise,true));
        }
 catch (        IllegalArgumentException e) {
          continue;
        }
      }
case 1:
{
      final double widthMeters=random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;
      try {
        return Geo3DPoint.newDistanceQuery(field,GeoTestUtil.nextLatitude(),GeoTestUtil.nextLongitude(),widthMeters);
      }
 catch (      IllegalArgumentException e) {
        continue;
      }
    }
case 2:
{
    final Rectangle r=GeoTestUtil.nextBox();
    return Geo3DPoint.newBoxQuery(field,r.minLat,r.maxLat,r.minLon,r.maxLon);
  }
case 3:
{
  final int pointCount=random().nextInt(5) + 1;
  final double width=random().nextDouble() * Math.PI * 0.5* MEAN_EARTH_RADIUS_METERS;
  final double[] latitudes=new double[pointCount];
  final double[] longitudes=new double[pointCount];
  for (int i=0; i < pointCount; i++) {
    latitudes[i]=GeoTestUtil.nextLatitude();
    longitudes[i]=GeoTestUtil.nextLongitude();
  }
  try {
    return Geo3DPoint.newPathQuery(field,latitudes,longitudes,width);
  }
 catch (  IllegalArgumentException e) {
    continue;
  }
}
default :
throw new IllegalStateException("Unexpected shape type");
}
}
}
