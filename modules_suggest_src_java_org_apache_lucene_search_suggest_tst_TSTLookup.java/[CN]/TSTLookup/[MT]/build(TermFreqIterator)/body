{
  root=new TernaryTreeNode();
  if ((!(tfit instanceof SortedIterator)) || ((SortedIterator)tfit).comparator() != BytesRef.getUTF8SortedAsUTF16Comparator()) {
    tfit=new SortedTermFreqIteratorWrapper(tfit,BytesRef.getUTF8SortedAsUTF16Comparator());
  }
  ArrayList<String> tokens=new ArrayList<String>();
  ArrayList<Float> vals=new ArrayList<Float>();
  BytesRef spare;
  CharsRef charsSpare=new CharsRef();
  while ((spare=tfit.next()) != null) {
    charsSpare.grow(spare.length);
    UnicodeUtil.UTF8toUTF16(spare.bytes,spare.offset,spare.length,charsSpare);
    tokens.add(charsSpare.toString());
    vals.add(new Float(tfit.freq()));
  }
  autocomplete.balancedTree(tokens.toArray(),vals.toArray(),0,tokens.size() - 1,root);
}
