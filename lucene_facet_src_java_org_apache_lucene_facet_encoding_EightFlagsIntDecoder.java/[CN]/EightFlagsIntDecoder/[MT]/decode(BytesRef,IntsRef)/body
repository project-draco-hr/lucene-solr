{
  values.offset=values.length=0;
  int upto=buf.offset + buf.length;
  int offset=buf.offset;
  while (offset < upto) {
    int indicator=buf.bytes[offset++] & 0xFF;
    int ordinal=0;
    int capacityNeeded=values.length + 8;
    if (values.ints.length < capacityNeeded) {
      values.grow(capacityNeeded);
    }
    while (ordinal != 8) {
      if (DECODE_TABLE[indicator][ordinal++] == 0) {
        if (offset == upto) {
          return;
        }
        int value=0;
        while (true) {
          byte b=buf.bytes[offset++];
          if (b >= 0) {
            values.ints[values.length++]=((value << 7) | b) + 2;
            break;
          }
 else {
            value=(value << 7) | (b & 0x7F);
          }
        }
      }
 else {
        values.ints[values.length++]=1;
      }
    }
  }
}
