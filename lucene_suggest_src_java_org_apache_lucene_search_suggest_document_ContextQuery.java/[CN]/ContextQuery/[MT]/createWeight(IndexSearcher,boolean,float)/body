{
  final CompletionWeight innerWeight=((CompletionWeight)innerQuery.createWeight(searcher,needsScores,boost));
  Automaton optionalSepLabel=Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));
  Automaton prefixAutomaton=Operations.concatenate(optionalSepLabel,innerWeight.getAutomaton());
  Automaton contextsAutomaton=Operations.concatenate(toContextAutomaton(contexts,matchAllContexts),prefixAutomaton);
  contextsAutomaton=Operations.determinize(contextsAutomaton,Operations.DEFAULT_MAX_DETERMINIZED_STATES);
  final Map<IntsRef,Float> contextMap=new HashMap<>(contexts.size());
  final TreeSet<Integer> contextLengths=new TreeSet<>();
  for (  Map.Entry<IntsRef,ContextMetaData> entry : contexts.entrySet()) {
    ContextMetaData contextMetaData=entry.getValue();
    contextMap.put(entry.getKey(),contextMetaData.boost);
    contextLengths.add(entry.getKey().length);
  }
  int[] contextLengthArray=new int[contextLengths.size()];
  final Iterator<Integer> iterator=contextLengths.descendingIterator();
  for (int i=0; iterator.hasNext(); i++) {
    contextLengthArray[i]=iterator.next();
  }
  return new ContextCompletionWeight(this,contextsAutomaton,innerWeight,contextMap,contextLengthArray);
}
