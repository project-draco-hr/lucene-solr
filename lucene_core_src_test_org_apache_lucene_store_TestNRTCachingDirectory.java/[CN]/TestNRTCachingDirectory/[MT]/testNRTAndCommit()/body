{
  Directory dir=newDirectory();
  NRTCachingDirectory cachedDir=new NRTCachingDirectory(dir,2.0,25.0);
  MockAnalyzer analyzer=new MockAnalyzer(random());
  analyzer.setMaxTokenLength(TestUtil.nextInt(random(),1,IndexWriter.MAX_TERM_LENGTH));
  IndexWriterConfig conf=newIndexWriterConfig(analyzer);
  RandomIndexWriter w=new RandomIndexWriter(random(),cachedDir,conf);
  final LineFileDocs docs=new LineFileDocs(random());
  final int numDocs=TestUtil.nextInt(random(),100,400);
  if (VERBOSE) {
    System.out.println("TEST: numDocs=" + numDocs);
  }
  final List<BytesRef> ids=new ArrayList<>();
  DirectoryReader r=null;
  for (int docCount=0; docCount < numDocs; docCount++) {
    final Document doc=docs.nextDoc();
    ids.add(new BytesRef(doc.get("docid")));
    w.addDocument(doc);
    if (random().nextInt(20) == 17) {
      if (r == null) {
        r=DirectoryReader.open(w.w);
      }
 else {
        final DirectoryReader r2=DirectoryReader.openIfChanged(r);
        if (r2 != null) {
          r.close();
          r=r2;
        }
      }
      assertEquals(1 + docCount,r.numDocs());
      final IndexSearcher s=newSearcher(r);
      TopDocs hits=s.search(new TermQuery(new Term("body","the")),10);
    }
  }
  if (r != null) {
    r.close();
  }
  w.close();
  final String[] cachedFiles=cachedDir.listCachedFiles();
  for (  String file : cachedFiles) {
    System.out.println("FAIL: cached file " + file + " remains after sync");
  }
  assertEquals(0,cachedFiles.length);
  r=DirectoryReader.open(dir);
  for (  BytesRef id : ids) {
    assertEquals(1,r.docFreq(new Term("docid",id)));
  }
  r.close();
  cachedDir.close();
  docs.close();
}
