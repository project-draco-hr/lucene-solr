{
  Directory dir=newDirectory();
  NRTCachingDirectory cachedDir=new NRTCachingDirectory(dir,2.0,25.0);
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random));
  RandomIndexWriter w=new RandomIndexWriter(random,cachedDir,conf);
  final LineFileDocs docs=new LineFileDocs(random,defaultCodecSupportsDocValues());
  final int numDocs=_TestUtil.nextInt(random,100,400);
  if (VERBOSE) {
    System.out.println("TEST: numDocs=" + numDocs);
  }
  final List<BytesRef> ids=new ArrayList<BytesRef>();
  DirectoryReader r=null;
  for (int docCount=0; docCount < numDocs; docCount++) {
    final Document doc=docs.nextDoc();
    ids.add(new BytesRef(doc.get("docid")));
    w.addDocument(doc);
    if (random.nextInt(20) == 17) {
      if (r == null) {
        r=IndexReader.open(w.w,false);
      }
 else {
        final DirectoryReader r2=DirectoryReader.openIfChanged(r);
        if (r2 != null) {
          r.close();
          r=r2;
        }
      }
      assertEquals(1 + docCount,r.numDocs());
      final IndexSearcher s=new IndexSearcher(r);
      TopDocs hits=s.search(new TermQuery(new Term("body","the")),10);
    }
  }
  if (r != null) {
    r.close();
  }
  w.close();
  final String[] cachedFiles=cachedDir.listCachedFiles();
  for (  String file : cachedFiles) {
    System.out.println("FAIL: cached file " + file + " remains after sync");
  }
  assertEquals(0,cachedFiles.length);
  r=IndexReader.open(dir);
  for (  BytesRef id : ids) {
    assertEquals(1,r.docFreq("docid",id));
  }
  r.close();
  cachedDir.close();
}
