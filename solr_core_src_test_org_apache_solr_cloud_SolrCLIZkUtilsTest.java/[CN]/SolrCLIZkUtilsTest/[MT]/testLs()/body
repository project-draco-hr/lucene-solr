{
  Path configSet=TEST_PATH().resolve("configsets");
  copyConfigUp(configSet,"cloud-subdirs","lister");
  String[] args=new String[]{"-path","/configs","-zkHost",zkAddr};
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream ps=new PrintStream(baos,false,StandardCharsets.UTF_8.name());
  SolrCLI.ZkLsTool tool=new SolrCLI.ZkLsTool(ps);
  int res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  String content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertTrue("Return should contain the conf directory",content.contains("lister"));
  assertFalse("Return should NOT contain a child node",content.contains("solrconfig.xml"));
  args=new String[]{"-path","/configs","-recurse","false","-zkHost",zkAddr};
  res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertTrue("Return should contain the conf directory",content.contains("lister"));
  assertFalse("Return should NOT contain a child node",content.contains("solrconfig.xml"));
  args=new String[]{"-path","/configs","-recurse","true","-zkHost",zkAddr};
  res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertTrue("Return should contain the conf directory",content.contains("lister"));
  assertTrue("Return should contain a child node",content.contains("solrconfig.xml"));
  args=new String[]{"-path","/","-recurse","true","-zkHost",zkAddr};
  res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertTrue("Return should contain the conf directory",content.contains("lister"));
  assertTrue("Return should contain a child node",content.contains("solrconfig.xml"));
  args=new String[]{"-path","/","-zkHost",zkAddr};
  res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertFalse("Return should not contain /zookeeper",content.contains("/zookeeper"));
  args=new String[]{"-path","/configs/","-recurse","true","-zkHost",zkAddr};
  res=tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args));
  content=new String(baos.toByteArray(),StandardCharsets.UTF_8);
  assertEquals("List should have succeeded",res,0);
  assertTrue("Return should contain the conf directory",content.contains("lister"));
  assertTrue("Return should contain a child node",content.contains("solrconfig.xml"));
}
