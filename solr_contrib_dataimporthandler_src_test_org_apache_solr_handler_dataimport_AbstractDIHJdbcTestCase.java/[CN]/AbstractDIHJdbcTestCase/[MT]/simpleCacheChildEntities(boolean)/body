{
  useSimpleCaches=true;
  countryEntity=true;
  sportsEntity=true;
  countryCached=true;
  sportsCached=true;
  int dbRequestsMoreThan=3;
  int dbRequestsLessThan=totalPeople() * 2 + 1;
  h.query("/dataimport",generateRequest());
  assertQ(req("*:*"),"//*[@numFound='" + (totalPeople()) + "']");
  if (!underlyingDataModified || (personNameExists("Samantha") && "Nauru".equals(countryNameByCode("NR")))) {
    assertQ(req("NAME_mult_s:Samantha"),"//*[@numFound='1']","//doc/str[@name='COUNTRY_NAME_s']='Nauru'");
  }
  if (!underlyingDataModified) {
    assertQ(req("COUNTRY_CODES_mult_s:NR"),"//*[@numFound='2']","//doc/str[@name='COUNTRY_NAME_s']='Nauru'");
    assertQ(req("SPORT_NAME_mult_s:Sailing"),"//*[@numFound='2']");
  }
  String[] michaelsSports=sportNamesByPersonId(3);
  if (!underlyingDataModified || michaelsSports.length > 0) {
    String[] xpath=new String[michaelsSports.length + 1];
    xpath[0]="//*[@numFound='1']";
    int i=1;
    for (    String ms : michaelsSports) {
      xpath[i]="//doc/arr[@name='SPORT_NAME_mult_s']/str[" + i + "]='"+ ms+ "'";
      i++;
    }
    assertQ(req("NAME_mult_s:Michael"),xpath);
  }
  if (checkDatabaseRequests) {
    Assert.assertTrue("Expecting more than " + dbRequestsMoreThan + " database calls, but DIH reported "+ totalDatabaseRequests(),totalDatabaseRequests() > dbRequestsMoreThan);
    Assert.assertTrue("Expecting fewer than " + dbRequestsLessThan + " database calls, but DIH reported "+ totalDatabaseRequests(),totalDatabaseRequests() < dbRequestsLessThan);
  }
}
