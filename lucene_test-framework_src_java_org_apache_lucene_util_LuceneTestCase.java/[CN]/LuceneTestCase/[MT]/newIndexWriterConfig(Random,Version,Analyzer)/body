{
  IndexWriterConfig c=new IndexWriterConfig(v,a);
  c.setSimilarity(classEnvRule.similarity);
  if (VERBOSE) {
    c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));
  }
  if (r.nextBoolean()) {
    c.setMergeScheduler(new SerialMergeScheduler());
  }
 else   if (rarely(r)) {
    int maxThreadCount=TestUtil.nextInt(random(),1,4);
    int maxMergeCount=TestUtil.nextInt(random(),maxThreadCount,maxThreadCount + 4);
    ConcurrentMergeScheduler cms=new ConcurrentMergeScheduler();
    cms.setMaxMergesAndThreads(maxMergeCount,maxThreadCount);
    c.setMergeScheduler(cms);
  }
  if (r.nextBoolean()) {
    if (rarely(r)) {
      c.setMaxBufferedDocs(TestUtil.nextInt(r,2,15));
    }
 else {
      c.setMaxBufferedDocs(TestUtil.nextInt(r,16,1000));
    }
  }
  if (r.nextBoolean()) {
    int maxNumThreadStates=rarely(r) ? TestUtil.nextInt(r,5,20) : TestUtil.nextInt(r,1,4);
    try {
      if (rarely(r)) {
        Method setIndexerThreadPoolMethod=IndexWriterConfig.class.getDeclaredMethod("setIndexerThreadPool",Class.forName("org.apache.lucene.index.DocumentsWriterPerThreadPool"));
        setIndexerThreadPoolMethod.setAccessible(true);
        Class<?> clazz=Class.forName("org.apache.lucene.index.RandomDocumentsWriterPerThreadPool");
        Constructor<?> ctor=clazz.getConstructor(int.class,Random.class);
        ctor.setAccessible(true);
        setIndexerThreadPoolMethod.invoke(c,ctor.newInstance(maxNumThreadStates,r));
      }
 else {
        c.setMaxThreadStates(maxNumThreadStates);
      }
    }
 catch (    Exception e) {
      Rethrow.rethrow(e);
    }
  }
  c.setMergePolicy(newMergePolicy(r));
  if (rarely(r)) {
    c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));
  }
  c.setUseCompoundFile(r.nextBoolean());
  c.setReaderPooling(r.nextBoolean());
  c.setCheckIntegrityAtMerge(r.nextBoolean());
  return c;
}
