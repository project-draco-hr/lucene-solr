{
  if (rarely()) {
    final boolean wasOriginallyAtomic=r instanceof AtomicReader;
    for (int i=0, c=random.nextInt(6) + 1; i < c; i++) {
switch (random.nextInt(4)) {
case 0:
        r=SlowCompositeReaderWrapper.wrap(r);
      break;
case 1:
    r=(r instanceof AtomicReader) ? new ParallelAtomicReader((AtomicReader)r) : new ParallelCompositeReader((CompositeReader)r);
  break;
case 2:
r=new FCInvisibleMultiReader(r);
break;
case 3:
final AtomicReader ar=SlowCompositeReaderWrapper.wrap(r);
final List<String> allFields=new ArrayList<String>();
for (FieldInfo fi : ar.getFieldInfos()) {
allFields.add(fi.name);
}
Collections.shuffle(allFields,random);
final int end=allFields.isEmpty() ? 0 : random.nextInt(allFields.size());
final Set<String> fields=new HashSet<String>(allFields.subList(0,end));
r=new ParallelAtomicReader(new FieldFilterAtomicReader(ar,fields,false),new FieldFilterAtomicReader(ar,fields,true));
break;
default :
fail("should not get here");
}
}
if (wasOriginallyAtomic) {
r=SlowCompositeReaderWrapper.wrap(r);
}
 else if ((r instanceof CompositeReader) && !(r instanceof FCInvisibleMultiReader)) {
r=new FCInvisibleMultiReader(r);
}
if (VERBOSE) {
System.out.println("maybeWrapReader wrapped: " + r);
}
}
return r;
}
