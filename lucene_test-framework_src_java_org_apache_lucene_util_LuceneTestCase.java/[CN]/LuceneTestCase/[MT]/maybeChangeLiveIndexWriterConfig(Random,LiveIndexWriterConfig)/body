{
  boolean didChange=false;
  if (rarely(r)) {
synchronized (c) {
      boolean flushByRAM;
switch (liveIWCFlushMode) {
case BY_RAM:
        flushByRAM=true;
      break;
case BY_DOCS:
    flushByRAM=false;
  break;
case EITHER:
flushByRAM=random().nextBoolean();
break;
default :
throw new AssertionError();
}
if (flushByRAM) {
c.setRAMBufferSizeMB(TestUtil.nextInt(r,1,10));
c.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);
}
 else {
if (rarely(r)) {
c.setMaxBufferedDocs(TestUtil.nextInt(r,2,15));
}
 else {
c.setMaxBufferedDocs(TestUtil.nextInt(r,16,1000));
}
c.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);
}
}
didChange=true;
}
if (rarely(r)) {
boolean limitBufferedDeletes=r.nextBoolean();
if (limitBufferedDeletes) {
c.setMaxBufferedDeleteTerms(TestUtil.nextInt(r,1,1000));
}
 else {
c.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);
}
didChange=true;
}
if (rarely(r)) {
if (r.nextBoolean()) {
c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));
}
 else {
c.setMergedSegmentWarmer(null);
}
didChange=true;
}
if (rarely(r)) {
c.setUseCompoundFile(r.nextBoolean());
didChange=true;
}
if (rarely(r)) {
c.setCheckIntegrityAtMerge(r.nextBoolean());
didChange=true;
}
if (rarely(r)) {
MergeScheduler ms=c.getMergeScheduler();
if (ms instanceof ConcurrentMergeScheduler) {
int maxThreadCount=TestUtil.nextInt(r,1,4);
int maxMergeCount=TestUtil.nextInt(r,maxThreadCount,maxThreadCount + 4);
((ConcurrentMergeScheduler)ms).setMaxMergesAndThreads(maxMergeCount,maxThreadCount);
}
didChange=true;
}
if (rarely(r)) {
MergePolicy mp=c.getMergePolicy();
configureRandom(r,mp);
if (mp instanceof LogMergePolicy) {
LogMergePolicy logmp=(LogMergePolicy)mp;
logmp.setCalibrateSizeByDeletes(r.nextBoolean());
if (rarely(r)) {
logmp.setMergeFactor(TestUtil.nextInt(r,2,9));
}
 else {
logmp.setMergeFactor(TestUtil.nextInt(r,10,50));
}
}
 else if (mp instanceof TieredMergePolicy) {
TieredMergePolicy tmp=(TieredMergePolicy)mp;
if (rarely(r)) {
tmp.setMaxMergeAtOnce(TestUtil.nextInt(r,2,9));
tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r,2,9));
}
 else {
tmp.setMaxMergeAtOnce(TestUtil.nextInt(r,10,50));
tmp.setMaxMergeAtOnceExplicit(TestUtil.nextInt(r,10,50));
}
if (rarely(r)) {
tmp.setMaxMergedSegmentMB(0.2 + r.nextDouble() * 2.0);
}
 else {
tmp.setMaxMergedSegmentMB(r.nextDouble() * 100);
}
tmp.setFloorSegmentMB(0.2 + r.nextDouble() * 2.0);
tmp.setForceMergeDeletesPctAllowed(0.0 + r.nextDouble() * 30.0);
if (rarely(r)) {
tmp.setSegmentsPerTier(TestUtil.nextInt(r,2,20));
}
 else {
tmp.setSegmentsPerTier(TestUtil.nextInt(r,10,50));
}
configureRandom(r,tmp);
tmp.setReclaimDeletesWeight(r.nextDouble() * 4);
}
didChange=true;
}
if (VERBOSE && didChange) {
System.out.println("NOTE: LuceneTestCase: randomly changed IWC's live settings to:\n" + c);
}
}
