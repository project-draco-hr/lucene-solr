{
  if (rarely(random) && !bare) {
    directory=new NRTCachingDirectory(directory,random.nextDouble(),random.nextDouble());
  }
  if (rarely(random) && !bare) {
    final double maxMBPerSec=10 + 5 * (random.nextDouble() - 0.5);
    if (LuceneTestCase.VERBOSE) {
      System.out.println("LuceneTestCase: will rate limit output IndexOutput to " + maxMBPerSec + " MB/sec");
    }
    final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper=new RateLimitedDirectoryWrapper(directory);
switch (random.nextInt(10)) {
case 3:
      rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec,Context.FLUSH);
    break;
case 2:
  rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec,Context.FLUSH);
rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec,Context.MERGE);
break;
default :
rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec,Context.MERGE);
}
directory=rateLimitedDirectoryWrapper;
}
if (bare) {
BaseDirectoryWrapper base=new BaseDirectoryWrapper(directory);
closeAfterSuite(new CloseableDirectory(base,suiteFailureMarker));
return base;
}
 else {
MockDirectoryWrapper mock=new MockDirectoryWrapper(random,directory);
mock.setThrottling(TEST_THROTTLING);
closeAfterSuite(new CloseableDirectory(mock,suiteFailureMarker));
return mock;
}
}
