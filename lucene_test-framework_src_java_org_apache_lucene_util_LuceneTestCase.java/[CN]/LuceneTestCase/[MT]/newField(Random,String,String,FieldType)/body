{
  name=new String(name);
  FieldType prevType=fieldToType.get(name);
  if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {
    if (prevType == null) {
      fieldToType.put(name,new FieldType(type));
    }
 else {
      type=mergeTermVectorOptions(type,prevType);
    }
    return new Field(name,value,type);
  }
  FieldType newType=new FieldType(type);
  if (!newType.stored() && random.nextBoolean()) {
    newType.setStored(true);
  }
  if (!newType.storeTermVectors() && random.nextBoolean()) {
    newType.setStoreTermVectors(true);
    if (!newType.storeTermVectorPositions()) {
      newType.setStoreTermVectorPositions(random.nextBoolean());
      if (newType.storeTermVectorPositions()) {
        if (!newType.storeTermVectorPayloads()) {
          newType.setStoreTermVectorPayloads(random.nextBoolean());
        }
      }
    }
    if (!newType.storeTermVectorOffsets()) {
      newType.setStoreTermVectorOffsets(random.nextBoolean());
    }
    if (VERBOSE) {
      System.out.println("NOTE: LuceneTestCase: upgrade name=" + name + " type="+ newType);
    }
  }
  newType.freeze();
  fieldToType.put(name,newType);
  return new Field(name,value,newType);
}
