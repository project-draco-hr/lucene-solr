{
  Set<String> leftFields=getDVFields(leftReader);
  Set<String> rightFields=getDVFields(rightReader);
  assertEquals(info,leftFields,rightFields);
  for (  String field : leftFields) {
{
      NumericDocValues leftValues=MultiDocValues.getNumericValues(leftReader,field);
      NumericDocValues rightValues=MultiDocValues.getNumericValues(rightReader,field);
      if (leftValues != null && rightValues != null) {
        assertDocValuesEquals(info,leftReader.maxDoc(),leftValues,rightValues);
      }
 else {
        assertNull(info,leftValues);
        assertNull(info,rightValues);
      }
    }
{
      BinaryDocValues leftValues=MultiDocValues.getBinaryValues(leftReader,field);
      BinaryDocValues rightValues=MultiDocValues.getBinaryValues(rightReader,field);
      if (leftValues != null && rightValues != null) {
        BytesRef scratchLeft=new BytesRef();
        BytesRef scratchRight=new BytesRef();
        for (int docID=0; docID < leftReader.maxDoc(); docID++) {
          leftValues.get(docID,scratchLeft);
          rightValues.get(docID,scratchRight);
          assertEquals(info,scratchLeft,scratchRight);
        }
      }
 else {
        assertNull(info,leftValues);
        assertNull(info,rightValues);
      }
    }
{
      SortedDocValues leftValues=MultiDocValues.getSortedValues(leftReader,field);
      SortedDocValues rightValues=MultiDocValues.getSortedValues(rightReader,field);
      if (leftValues != null && rightValues != null) {
        assertEquals(info,leftValues.getValueCount(),rightValues.getValueCount());
        BytesRef scratchLeft=new BytesRef();
        BytesRef scratchRight=new BytesRef();
        for (int i=0; i < leftValues.getValueCount(); i++) {
          leftValues.lookupOrd(i,scratchLeft);
          rightValues.lookupOrd(i,scratchRight);
          assertEquals(info,scratchLeft,scratchRight);
        }
        for (int docID=0; docID < leftReader.maxDoc(); docID++) {
          leftValues.get(docID,scratchLeft);
          rightValues.get(docID,scratchRight);
          assertEquals(info,scratchLeft,scratchRight);
        }
      }
 else {
        assertNull(info,leftValues);
        assertNull(info,rightValues);
      }
    }
{
      SortedSetDocValues leftValues=MultiDocValues.getSortedSetValues(leftReader,field);
      SortedSetDocValues rightValues=MultiDocValues.getSortedSetValues(rightReader,field);
      if (leftValues != null && rightValues != null) {
        assertEquals(info,leftValues.getValueCount(),rightValues.getValueCount());
        BytesRef scratchLeft=new BytesRef();
        BytesRef scratchRight=new BytesRef();
        for (int i=0; i < leftValues.getValueCount(); i++) {
          leftValues.lookupOrd(i,scratchLeft);
          rightValues.lookupOrd(i,scratchRight);
          assertEquals(info,scratchLeft,scratchRight);
        }
        for (int docID=0; docID < leftReader.maxDoc(); docID++) {
          leftValues.setDocument(docID);
          rightValues.setDocument(docID);
          long ord;
          while ((ord=leftValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
            assertEquals(info,ord,rightValues.nextOrd());
          }
          assertEquals(info,SortedSetDocValues.NO_MORE_ORDS,rightValues.nextOrd());
        }
      }
 else {
        assertNull(info,leftValues);
        assertNull(info,rightValues);
      }
    }
{
      Bits leftBits=MultiDocValues.getDocsWithField(leftReader,field);
      Bits rightBits=MultiDocValues.getDocsWithField(rightReader,field);
      if (leftBits != null && rightBits != null) {
        assertEquals(info,leftBits.length(),rightBits.length());
        for (int i=0; i < leftBits.length(); i++) {
          assertEquals(info,leftBits.get(i),rightBits.get(i));
        }
      }
 else {
        assertNull(info,leftBits);
        assertNull(info,rightBits);
      }
    }
  }
}
