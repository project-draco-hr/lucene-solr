{
  IndexWriterConfig c=new IndexWriterConfig(a);
  c.setSimilarity(classEnvRule.similarity);
  if (VERBOSE) {
    c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));
  }
  if (r.nextBoolean()) {
    c.setMergeScheduler(new SerialMergeScheduler());
  }
 else   if (rarely(r)) {
    ConcurrentMergeScheduler cms;
    if (r.nextBoolean()) {
      cms=new ConcurrentMergeScheduler();
    }
 else {
      cms=new ConcurrentMergeScheduler(){
        @Override protected synchronized void maybeStall(){
        }
      }
;
    }
    int maxThreadCount=TestUtil.nextInt(r,1,4);
    int maxMergeCount=TestUtil.nextInt(r,maxThreadCount,maxThreadCount + 4);
    cms.setMaxMergesAndThreads(maxMergeCount,maxThreadCount);
    c.setMergeScheduler(cms);
  }
  if (r.nextBoolean()) {
    if (rarely(r)) {
      c.setMaxBufferedDocs(TestUtil.nextInt(r,2,15));
    }
 else {
      c.setMaxBufferedDocs(TestUtil.nextInt(r,16,1000));
    }
  }
  if (r.nextBoolean()) {
    int maxNumThreadStates=rarely(r) ? TestUtil.nextInt(r,5,20) : TestUtil.nextInt(r,1,4);
    c.setMaxThreadStates(maxNumThreadStates);
  }
  c.setMergePolicy(newMergePolicy(r));
  avoidPathologicalMerging(c);
  if (rarely(r)) {
    c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));
  }
  c.setUseCompoundFile(r.nextBoolean());
  c.setReaderPooling(r.nextBoolean());
  return c;
}
