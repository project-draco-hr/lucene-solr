{
  if (leftTerms == null || rightTerms == null) {
    assertNull(info,leftTerms);
    assertNull(info,rightTerms);
    return;
  }
  assertTermsStatisticsEquals(info,leftTerms,rightTerms);
  assertEquals(leftTerms.hasOffsets(),rightTerms.hasOffsets());
  assertEquals(leftTerms.hasPositions(),rightTerms.hasPositions());
  assertEquals(leftTerms.hasPayloads(),rightTerms.hasPayloads());
  TermsEnum leftTermsEnum=leftTerms.iterator(null);
  TermsEnum rightTermsEnum=rightTerms.iterator(null);
  assertTermsEnumEquals(info,leftReader,leftTermsEnum,rightTermsEnum,true);
  assertTermsSeekingEquals(info,leftTerms,rightTerms);
  if (deep) {
    int numIntersections=atLeast(3);
    for (int i=0; i < numIntersections; i++) {
      String re=AutomatonTestUtil.randomRegexp(random());
      CompiledAutomaton automaton=new CompiledAutomaton(new RegExp(re,RegExp.NONE).toLightAutomaton());
      if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {
        TermsEnum leftIntersection=leftTerms.intersect(automaton,null);
        TermsEnum rightIntersection=rightTerms.intersect(automaton,null);
        assertTermsEnumEquals(info,leftReader,leftIntersection,rightIntersection,rarely());
      }
    }
  }
}
