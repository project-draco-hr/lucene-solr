{
  BytesRef term;
  PostingsEnum leftPositions=null;
  PostingsEnum rightPositions=null;
  PostingsEnum leftDocs=null;
  PostingsEnum rightDocs=null;
  while ((term=leftTermsEnum.next()) != null) {
    assertEquals(info,term,rightTermsEnum.next());
    assertTermStatsEquals(info,leftTermsEnum,rightTermsEnum);
    if (deep) {
      assertDocsAndPositionsEnumEquals(info,leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.ALL));
      assertPositionsSkippingEquals(info,leftReader,leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(rightPositions,PostingsEnum.ALL));
      assertDocsEnumEquals(info,leftDocs=leftTermsEnum.postings(leftDocs),rightDocs=rightTermsEnum.postings(rightDocs),true);
      assertDocsEnumEquals(info,leftDocs=leftTermsEnum.postings(leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(rightDocs,PostingsEnum.NONE),false);
      assertDocsSkippingEquals(info,leftReader,leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(leftDocs),rightDocs=rightTermsEnum.postings(rightDocs),true);
      assertDocsSkippingEquals(info,leftReader,leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(rightDocs,PostingsEnum.NONE),false);
    }
  }
  assertNull(info,rightTermsEnum.next());
}
