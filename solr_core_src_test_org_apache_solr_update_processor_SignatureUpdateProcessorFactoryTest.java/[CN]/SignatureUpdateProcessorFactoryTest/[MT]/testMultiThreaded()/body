{
  UpdateRequestProcessorChain chained=h.getCore().getUpdateProcessingChain("dedupe");
  SignatureUpdateProcessorFactory factory=((SignatureUpdateProcessorFactory)chained.getProcessors().get(0));
  factory.setEnabled(true);
  Thread[] threads=null;
  Thread[] threads2=null;
  threads=new Thread[7];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        for (int i=0; i < 30; i++) {
          try {
            addDoc(adoc("id",Integer.toString(1 + i),"v_t","Goodbye Dude girl!"));
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
;
    threads[i].setName("testThread-" + i);
  }
  threads2=new Thread[3];
  for (int i=0; i < threads2.length; i++) {
    threads2[i]=new Thread(){
      @Override public void run(){
        for (int i=0; i < 10; i++) {
          try {
            addDoc(adoc("id",Integer.toString(1 + i),"v_t","Goodbye Dude girl!"));
            addDoc(commit());
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
;
    threads2[i].setName("testThread2-" + i);
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  for (int i=0; i < threads2.length; i++) {
    threads2[i].start();
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].join();
  }
  for (int i=0; i < threads2.length; i++) {
    threads2[i].join();
  }
  SolrCore core=h.getCore();
  assertU(commit());
  checkNumDocs(1);
  factory.setEnabled(false);
}
