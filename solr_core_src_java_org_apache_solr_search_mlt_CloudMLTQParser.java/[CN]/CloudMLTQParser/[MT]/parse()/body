{
  String id=localParams.get(QueryParsing.V);
  SolrDocument doc=getDocument(id);
  if (doc == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error completing MLT request. Could not fetch " + "document with id [" + id + "]");
  }
  MoreLikeThis mlt=new MoreLikeThis(req.getSearcher().getIndexReader());
  if (localParams.getInt("mintf") != null)   mlt.setMinTermFreq(localParams.getInt("mintf"));
  mlt.setMinDocFreq(localParams.getInt("mindf",0));
  if (localParams.get("minwl") != null)   mlt.setMinWordLen(localParams.getInt("minwl"));
  if (localParams.get("maxwl") != null)   mlt.setMaxWordLen(localParams.getInt("maxwl"));
  if (localParams.get("maxqt") != null)   mlt.setMaxQueryTerms(localParams.getInt("maxqt"));
  if (localParams.get("maxntp") != null)   mlt.setMaxNumTokensParsed(localParams.getInt("maxntp"));
  if (localParams.get("maxdf") != null) {
    mlt.setMaxDocFreq(localParams.getInt("maxdf"));
  }
  mlt.setAnalyzer(req.getSchema().getIndexAnalyzer());
  String[] qf=localParams.getParams("qf");
  Map<String,Collection<Object>> filteredDocument=new HashMap();
  if (qf != null) {
    mlt.setFieldNames(qf);
    for (    String field : qf) {
      filteredDocument.put(field,doc.getFieldValues(field));
    }
  }
 else {
    Map<String,SchemaField> fields=req.getSchema().getFields();
    ArrayList<String> fieldNames=new ArrayList();
    for (    String field : doc.getFieldNames()) {
      if (fields.get(field).stored() && fields.get(field).getType().isExplicitAnalyzer()) {
        fieldNames.add(field);
        filteredDocument.put(field,doc.getFieldValues(field));
      }
    }
    mlt.setFieldNames(fieldNames.toArray(new String[fieldNames.size()]));
  }
  try {
    return mlt.like(filteredDocument);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Bad Request");
  }
}
