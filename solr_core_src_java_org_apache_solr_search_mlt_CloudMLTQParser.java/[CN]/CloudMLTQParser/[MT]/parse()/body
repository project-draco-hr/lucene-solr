{
  String id=localParams.get(QueryParsing.V);
  SolrDocument doc=getDocument(id);
  if (doc == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error completing MLT request. Could not fetch " + "document with id [" + id + "]");
  }
  String[] qf=localParams.getParams("qf");
  Map<String,Float> boostFields=new HashMap<>();
  MoreLikeThis mlt=new MoreLikeThis(req.getSearcher().getIndexReader());
  if (localParams.getInt("mintf") != null)   mlt.setMinTermFreq(localParams.getInt("mintf"));
  mlt.setMinDocFreq(localParams.getInt("mindf",0));
  if (localParams.get("minwl") != null)   mlt.setMinWordLen(localParams.getInt("minwl"));
  if (localParams.get("maxwl") != null)   mlt.setMaxWordLen(localParams.getInt("maxwl"));
  if (localParams.get("maxqt") != null)   mlt.setMaxQueryTerms(localParams.getInt("maxqt"));
  if (localParams.get("maxntp") != null)   mlt.setMaxNumTokensParsed(localParams.getInt("maxntp"));
  if (localParams.get("maxdf") != null) {
    mlt.setMaxDocFreq(localParams.getInt("maxdf"));
  }
  if (localParams.get("boost") != null) {
    mlt.setBoost(localParams.getBool("boost"));
    boostFields=SolrPluginUtils.parseFieldBoosts(qf);
  }
  mlt.setAnalyzer(req.getSchema().getIndexAnalyzer());
  Map<String,Collection<Object>> filteredDocument=new HashMap<>();
  ArrayList<String> fieldNames=new ArrayList<>();
  if (qf != null) {
    for (    String fieldName : qf) {
      if (!StringUtils.isEmpty(fieldName)) {
        String[] strings=splitList.split(fieldName);
        for (        String string : strings) {
          if (!StringUtils.isEmpty(string)) {
            fieldNames.add(string);
          }
        }
      }
    }
  }
 else {
    Map<String,SchemaField> fields=req.getSchema().getFields();
    for (    String field : doc.getFieldNames()) {
      if (fields.get(field).stored() && fields.get(field).getType().isExplicitAnalyzer()) {
        fieldNames.add(field);
      }
    }
  }
  if (fieldNames.size() < 1) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis requires at least one similarity field: qf");
  }
  mlt.setFieldNames(fieldNames.toArray(new String[fieldNames.size()]));
  for (  String field : fieldNames) {
    filteredDocument.put(field,doc.getFieldValues(field));
  }
  try {
    Query rawMLTQuery=mlt.like(filteredDocument);
    BooleanQuery boostedMLTQuery=(BooleanQuery)rawMLTQuery;
    if (boostFields.size() > 0) {
      BooleanQuery.Builder newQ=new BooleanQuery.Builder();
      newQ.setDisableCoord(boostedMLTQuery.isCoordDisabled());
      newQ.setMinimumNumberShouldMatch(boostedMLTQuery.getMinimumNumberShouldMatch());
      for (      BooleanClause clause : boostedMLTQuery) {
        Query q=clause.getQuery();
        float originalBoost=1f;
        if (q instanceof BoostQuery) {
          BoostQuery bq=(BoostQuery)q;
          q=bq.getQuery();
          originalBoost=bq.getBoost();
        }
        Float fieldBoost=boostFields.get(((TermQuery)q).getTerm().field());
        q=((fieldBoost != null) ? new BoostQuery(q,fieldBoost * originalBoost) : clause.getQuery());
        newQ.add(q,clause.getOccur());
      }
      boostedMLTQuery=newQ.build();
    }
    BooleanQuery.Builder realMLTQuery=new BooleanQuery.Builder();
    realMLTQuery.setDisableCoord(true);
    realMLTQuery.add(boostedMLTQuery,BooleanClause.Occur.MUST);
    realMLTQuery.add(createIdQuery("id",id),BooleanClause.Occur.MUST_NOT);
    return realMLTQuery.build();
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Bad Request");
  }
}
