{
  String id=localParams.get(QueryParsing.V);
  SolrDocument doc=getDocument(id);
  MoreLikeThis mlt=new MoreLikeThis(req.getSearcher().getIndexReader());
  mlt.setMinTermFreq(localParams.getInt("mintf",1));
  mlt.setMinDocFreq(localParams.getInt("mindf",0));
  if (localParams.get("minwl") != null)   mlt.setMinWordLen(localParams.getInt("minwl"));
  if (localParams.get("maxwl") != null)   mlt.setMaxWordLen(localParams.getInt("maxwl"));
  mlt.setAnalyzer(req.getSchema().getIndexAnalyzer());
  String[] qf=localParams.getParams("qf");
  Map<String,ArrayList<String>> filteredDocument=new HashMap();
  if (qf != null) {
    mlt.setFieldNames(qf);
    for (    String field : qf) {
      filteredDocument.put(field,(ArrayList<String>)doc.get(field));
    }
  }
 else {
    for (    String field : doc.getFieldNames()) {
      filteredDocument.put(field,(ArrayList<String>)doc.get(field));
    }
  }
  try {
    return mlt.like(filteredDocument);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Bad Request");
  }
}
