{
  if (child == null)   throw new IllegalArgumentException("child analyzer must not be null");
  return new Analyzer(){
    private final HashMap<String,ArrayList<AttributeSource.State>> cache=new HashMap<String,ArrayList<AttributeSource.State>>();
    public TokenStream tokenStream(    String fieldName,    Reader reader){
      final ArrayList<AttributeSource.State> tokens=cache.get(fieldName);
      if (tokens == null) {
        final ArrayList<AttributeSource.State> tokens2=new ArrayList<AttributeSource.State>();
        TokenStream tokenStream=new TokenFilter(child.tokenStream(fieldName,reader)){
          public boolean incrementToken() throws IOException {
            boolean hasNext=input.incrementToken();
            if (hasNext)             tokens2.add(captureState());
            return hasNext;
          }
        }
;
        cache.put(fieldName,tokens2);
        return tokenStream;
      }
 else {
        return new TokenStream(){
          private Iterator<AttributeSource.State> iter=tokens.iterator();
          public boolean incrementToken(){
            if (!iter.hasNext())             return false;
            restoreState(iter.next());
            return true;
          }
        }
;
      }
    }
  }
;
}
