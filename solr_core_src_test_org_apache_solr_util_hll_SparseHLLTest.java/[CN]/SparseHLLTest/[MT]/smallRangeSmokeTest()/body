{
  final int log2m=11;
  final int m=(1 << log2m);
  final int regwidth=5;
{
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.SPARSE);
    hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,0,1));
    final long cardinality=hll.cardinality();
    final long expected=(long)Math.ceil(m * Math.log((double)m / (m - 1)));
    assertEquals(cardinality,expected);
  }
{
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.SPARSE);
    for (int i=0; i < (m - 1); i++) {
      hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,i,1));
    }
    final long cardinality=hll.cardinality();
    final long expected=(long)Math.ceil(m * Math.log((double)m / 1));
    assertEquals(cardinality,expected);
  }
}
