{
  final int log2m=11;
  final int sparseThreshold=256;
{
    final HLL hllA=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    final HLL hllB=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    hllA.union(hllB);
    assertEquals(hllA.getType(),HLLType.SPARSE);
    assertEquals(hllA.cardinality(),0L);
  }
{
    final HLL hllA=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,1,1));
    final HLL hllB=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,2,1));
    hllA.union(hllB);
    assertEquals(hllA.getType(),HLLType.SPARSE);
    assertEquals(hllA.cardinality(),3L);
    assertRegisterPresent(hllA,1,(byte)1);
    assertRegisterPresent(hllA,2,(byte)1);
  }
{
    final HLL hllA=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,1,10));
    final HLL hllB=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,1,13));
    hllA.union(hllB);
    assertEquals(hllA.getType(),HLLType.SPARSE);
    assertEquals(hllA.cardinality(),2L);
    assertOneRegisterSet(hllA,1,(byte)13);
  }
{
    final HLL hllA=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    final HLL hllB=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    final long rawValueA=ProbabilisticTestUtil.constructHLLValue(log2m,3,11);
    final long rawValueB=ProbabilisticTestUtil.constructHLLValue(log2m,4,13);
    final long rawValueBPrime=ProbabilisticTestUtil.constructHLLValue(log2m,4,21);
    final long rawValueC=ProbabilisticTestUtil.constructHLLValue(log2m,5,14);
    hllA.addRaw(rawValueA);
    hllA.addRaw(rawValueB);
    hllB.addRaw(rawValueBPrime);
    hllB.addRaw(rawValueC);
    hllA.union(hllB);
    assertRegisterPresent(hllA,3,(byte)11);
    assertRegisterPresent(hllA,4,(byte)21);
    assertRegisterPresent(hllA,5,(byte)14);
  }
{
    final HLL hllA=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    final HLL hllB=new HLL(log2m,5,128,sparseThreshold,HLLType.SPARSE);
    for (int i=0; i < sparseThreshold; i++) {
      hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,i,1));
      hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,(i + sparseThreshold),1));
    }
    hllA.union(hllB);
    assertEquals(hllA.getType(),HLLType.FULL);
  }
}
