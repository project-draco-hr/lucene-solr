{
  final int log2m=11;
  final int regwidth=5;
  final int sparseThreshold=256;
  final int shortWordLength=16;
  final ISchemaVersion schemaVersion=SerializationUtil.DEFAULT_SCHEMA_VERSION;
  final HLLType type=HLLType.SPARSE;
  final int padding=schemaVersion.paddingBytes(type);
{
    final HLL hll=new HLL(log2m,regwidth,128,sparseThreshold,HLLType.SPARSE);
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,padding);
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
{
    final HLL hll=new HLL(log2m,regwidth,128,sparseThreshold,HLLType.SPARSE);
    for (int i=0; i < 3; i++) {
      final long rawValue=ProbabilisticTestUtil.constructHLLValue(log2m,i,(i + 9));
      hll.addRaw(rawValue);
    }
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength,3));
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
{
    final HLL hll=new HLL(log2m,regwidth,128,sparseThreshold,HLLType.SPARSE);
    for (int i=0; i < sparseThreshold; i++) {
      final long rawValue=ProbabilisticTestUtil.constructHLLValue(log2m,i,(i % 9) + 1);
      hll.addRaw(rawValue);
    }
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength,sparseThreshold));
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
}
