{
  final int log2m=11;
  final int m=(1 << log2m);
  final int regwidth=5;
  final int l=log2m + 30;
{
    final HLL hll=new HLL(log2m,regwidth,128,m,HLLType.SPARSE);
    final int registerValue=31;
    for (int i=0; i < m; i++) {
      hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m,i,registerValue));
    }
    final long cardinality=hll.cardinality();
    final double estimator=HLLUtil.alphaMSquared(m) / ((double)m / Math.pow(2,registerValue));
    assertTrue(estimator > Math.pow(2,l) / 30);
    final long expected=(long)Math.ceil(-1.0 * Math.pow(2,l) * Math.log(1.0 - estimator / Math.pow(2,l)));
    assertEquals(cardinality,expected);
  }
}
