{
  final int log2m=11;
  final int regwidth=5;
  final int sparseThreshold=256;
  for (int run=0; run < 100; run++) {
    final HLL hll=new HLL(log2m,regwidth,128,sparseThreshold,HLLType.SPARSE);
    final IntByteOpenHashMap map=new IntByteOpenHashMap();
    for (int i=0; i < sparseThreshold; i++) {
      final long rawValue=RandomizedTest.randomLong();
      final short registerIndex=ProbabilisticTestUtil.getRegisterIndex(rawValue,log2m);
      final byte registerValue=ProbabilisticTestUtil.getRegisterValue(rawValue,log2m);
      if (map.get(registerIndex) < registerValue) {
        map.put(registerIndex,registerValue);
      }
      hll.addRaw(rawValue);
    }
    for (    IntByteCursor c : map) {
      final byte expectedRegisterValue=map.get(c.key);
      assertRegisterPresent(hll,c.key,expectedRegisterValue);
    }
  }
}
