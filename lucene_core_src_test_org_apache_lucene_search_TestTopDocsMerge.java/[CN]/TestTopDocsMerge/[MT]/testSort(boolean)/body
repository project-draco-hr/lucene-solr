{
  IndexReader reader=null;
  Directory dir=null;
  final int numDocs=TEST_NIGHTLY ? atLeast(1000) : atLeast(100);
  final String[] tokens=new String[]{"a","b","c","d","e"};
  if (VERBOSE) {
    System.out.println("TEST: make index");
  }
{
    dir=newDirectory();
    final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
    final String[] content=new String[atLeast(20)];
    for (int contentIDX=0; contentIDX < content.length; contentIDX++) {
      final StringBuilder sb=new StringBuilder();
      final int numTokens=TestUtil.nextInt(random(),1,10);
      for (int tokenIDX=0; tokenIDX < numTokens; tokenIDX++) {
        sb.append(tokens[random().nextInt(tokens.length)]).append(' ');
      }
      content[contentIDX]=sb.toString();
    }
    for (int docIDX=0; docIDX < numDocs; docIDX++) {
      final Document doc=new Document();
      doc.add(new SortedDocValuesField("string",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
      doc.add(newTextField("text",content[random().nextInt(content.length)],Field.Store.NO));
      doc.add(new FloatDocValuesField("float",random().nextFloat()));
      final int intValue;
      if (random().nextInt(100) == 17) {
        intValue=Integer.MIN_VALUE;
      }
 else       if (random().nextInt(100) == 17) {
        intValue=Integer.MAX_VALUE;
      }
 else {
        intValue=random().nextInt();
      }
      doc.add(new NumericDocValuesField("int",intValue));
      if (VERBOSE) {
        System.out.println("  doc=" + doc);
      }
      w.addDocument(doc);
    }
    reader=w.getReader();
    w.close();
  }
  final IndexSearcher searcher=newSearcher(reader);
  final IndexReaderContext ctx=searcher.getTopReaderContext();
  final ShardSearcher[] subSearchers;
  final int[] docStarts;
  if (ctx instanceof LeafReaderContext) {
    subSearchers=new ShardSearcher[1];
    docStarts=new int[1];
    subSearchers[0]=new ShardSearcher((LeafReaderContext)ctx,ctx);
    docStarts[0]=0;
  }
 else {
    final CompositeReaderContext compCTX=(CompositeReaderContext)ctx;
    final int size=compCTX.leaves().size();
    subSearchers=new ShardSearcher[size];
    docStarts=new int[size];
    int docBase=0;
    for (int searcherIDX=0; searcherIDX < subSearchers.length; searcherIDX++) {
      final LeafReaderContext leave=compCTX.leaves().get(searcherIDX);
      subSearchers[searcherIDX]=new ShardSearcher(leave,compCTX);
      docStarts[searcherIDX]=docBase;
      docBase+=leave.reader().maxDoc();
    }
  }
  final List<SortField> sortFields=new ArrayList<>();
  sortFields.add(new SortField("string",SortField.Type.STRING,true));
  sortFields.add(new SortField("string",SortField.Type.STRING,false));
  sortFields.add(new SortField("int",SortField.Type.INT,true));
  sortFields.add(new SortField("int",SortField.Type.INT,false));
  sortFields.add(new SortField("float",SortField.Type.FLOAT,true));
  sortFields.add(new SortField("float",SortField.Type.FLOAT,false));
  sortFields.add(new SortField(null,SortField.Type.SCORE,true));
  sortFields.add(new SortField(null,SortField.Type.SCORE,false));
  sortFields.add(new SortField(null,SortField.Type.DOC,true));
  sortFields.add(new SortField(null,SortField.Type.DOC,false));
  int numIters=atLeast(300);
  for (int iter=0; iter < numIters; iter++) {
    final Query query=new TermQuery(new Term("text",tokens[random().nextInt(tokens.length)]));
    final Sort sort;
    if (random().nextInt(10) == 4) {
      sort=null;
    }
 else {
      final SortField[] randomSortFields=new SortField[TestUtil.nextInt(random(),1,3)];
      for (int sortIDX=0; sortIDX < randomSortFields.length; sortIDX++) {
        randomSortFields[sortIDX]=sortFields.get(random().nextInt(sortFields.size()));
      }
      sort=new Sort(randomSortFields);
    }
    final int numHits=TestUtil.nextInt(random(),1,numDocs + 5);
    if (VERBOSE) {
      System.out.println("TEST: search query=" + query + " sort="+ sort+ " numHits="+ numHits);
    }
    int from=-1;
    int size=-1;
    final TopDocs topHits;
    if (sort == null) {
      if (useFrom) {
        TopScoreDocCollector c=TopScoreDocCollector.create(numHits);
        searcher.search(query,c);
        from=TestUtil.nextInt(random(),0,numHits - 1);
        size=numHits - from;
        TopDocs tempTopHits=c.topDocs();
        if (from < tempTopHits.scoreDocs.length) {
          ScoreDoc[] newScoreDocs=new ScoreDoc[Math.min(size,tempTopHits.scoreDocs.length - from)];
          System.arraycopy(tempTopHits.scoreDocs,from,newScoreDocs,0,newScoreDocs.length);
          tempTopHits.scoreDocs=newScoreDocs;
          topHits=tempTopHits;
        }
 else {
          topHits=new TopDocs(tempTopHits.totalHits,new ScoreDoc[0],tempTopHits.getMaxScore());
        }
      }
 else {
        topHits=searcher.search(query,numHits);
      }
    }
 else {
      final TopFieldCollector c=TopFieldCollector.create(sort,numHits,true,true,true);
      searcher.search(query,c);
      if (useFrom) {
        from=TestUtil.nextInt(random(),0,numHits - 1);
        size=numHits - from;
        TopDocs tempTopHits=c.topDocs();
        if (from < tempTopHits.scoreDocs.length) {
          ScoreDoc[] newScoreDocs=new ScoreDoc[Math.min(size,tempTopHits.scoreDocs.length - from)];
          System.arraycopy(tempTopHits.scoreDocs,from,newScoreDocs,0,newScoreDocs.length);
          tempTopHits.scoreDocs=newScoreDocs;
          topHits=tempTopHits;
        }
 else {
          topHits=new TopDocs(tempTopHits.totalHits,new ScoreDoc[0],tempTopHits.getMaxScore());
        }
      }
 else {
        topHits=c.topDocs(0,numHits);
      }
    }
    if (VERBOSE) {
      if (useFrom) {
        System.out.println("from=" + from + " size="+ size);
      }
      System.out.println("  top search: " + topHits.totalHits + " totalHits; hits="+ (topHits.scoreDocs == null ? "null" : topHits.scoreDocs.length + " maxScore=" + topHits.getMaxScore()));
      if (topHits.scoreDocs != null) {
        for (int hitIDX=0; hitIDX < topHits.scoreDocs.length; hitIDX++) {
          final ScoreDoc sd=topHits.scoreDocs[hitIDX];
          System.out.println("    doc=" + sd.doc + " score="+ sd.score);
        }
      }
    }
    final Weight w=searcher.createNormalizedWeight(query,PostingsEnum.FLAG_FREQS);
    final TopDocs[] shardHits;
    if (sort == null) {
      shardHits=new TopDocs[subSearchers.length];
    }
 else {
      shardHits=new TopFieldDocs[subSearchers.length];
    }
    for (int shardIDX=0; shardIDX < subSearchers.length; shardIDX++) {
      final TopDocs subHits;
      final ShardSearcher subSearcher=subSearchers[shardIDX];
      if (sort == null) {
        subHits=subSearcher.search(w,numHits);
      }
 else {
        final TopFieldCollector c=TopFieldCollector.create(sort,numHits,true,true,true);
        subSearcher.search(w,c);
        subHits=c.topDocs(0,numHits);
      }
      shardHits[shardIDX]=subHits;
      if (VERBOSE) {
        System.out.println("  shard=" + shardIDX + " "+ subHits.totalHits+ " totalHits hits="+ (subHits.scoreDocs == null ? "null" : subHits.scoreDocs.length));
        if (subHits.scoreDocs != null) {
          for (          ScoreDoc sd : subHits.scoreDocs) {
            System.out.println("    doc=" + sd.doc + " score="+ sd.score);
          }
        }
      }
    }
    final TopDocs mergedHits;
    if (useFrom) {
      if (sort == null) {
        mergedHits=TopDocs.merge(from,size,shardHits);
      }
 else {
        mergedHits=TopDocs.merge(sort,from,size,(TopFieldDocs[])shardHits);
      }
    }
 else {
      if (sort == null) {
        mergedHits=TopDocs.merge(numHits,shardHits);
      }
 else {
        mergedHits=TopDocs.merge(sort,numHits,(TopFieldDocs[])shardHits);
      }
    }
    if (mergedHits.scoreDocs != null) {
      for (int hitIDX=0; hitIDX < mergedHits.scoreDocs.length; hitIDX++) {
        final ScoreDoc sd=mergedHits.scoreDocs[hitIDX];
        assertEquals("doc=" + sd.doc + " wrong shard",ReaderUtil.subIndex(sd.doc,docStarts),sd.shardIndex);
      }
    }
    TestUtil.assertEquals(topHits,mergedHits);
  }
  reader.close();
  dir.close();
}
