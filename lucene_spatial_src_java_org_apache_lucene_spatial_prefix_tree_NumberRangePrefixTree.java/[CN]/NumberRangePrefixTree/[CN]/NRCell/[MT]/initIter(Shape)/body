{
  cellNumber=-1;
  if (filter instanceof LevelledValue && ((LevelledValue)filter).getLevel() == 0)   filter=null;
  iterFilter=filter;
  NRCell parent=getLVAtLevel(getLevel() - 1);
  if (filter == null) {
    iterFirstCellNumber=0;
    iterFirstIsIntersects=false;
    iterLastCellNumber=getNumSubCells(parent) - 1;
    iterLastIsIntersects=false;
    return;
  }
  final LevelledValue minLV;
  final LevelledValue maxLV;
  final int lastLevelInCommon;
  if (filter instanceof NRShape) {
    NRShape nrShape=(NRShape)iterFilter;
    minLV=nrShape.getMinLV();
    maxLV=nrShape.getMaxLV();
    lastLevelInCommon=nrShape.getLastLevelInCommon();
  }
 else {
    minLV=(LevelledValue)iterFilter;
    maxLV=minLV;
    lastLevelInCommon=minLV.getLevel();
  }
  if (iterFilter == parent.iterFilter && (getLevel() <= lastLevelInCommon || parent.iterFirstCellNumber != parent.iterLastCellNumber)) {
    if (parent.iterFirstIsIntersects && parent.cellNumber == parent.iterFirstCellNumber && minLV.getLevel() >= getLevel()) {
      iterFirstCellNumber=minLV.getValAtLevel(getLevel());
      iterFirstIsIntersects=(minLV.getLevel() > getLevel());
    }
 else {
      iterFirstCellNumber=0;
      iterFirstIsIntersects=false;
    }
    if (parent.iterLastIsIntersects && parent.cellNumber == parent.iterLastCellNumber && maxLV.getLevel() >= getLevel()) {
      iterLastCellNumber=maxLV.getValAtLevel(getLevel());
      iterLastIsIntersects=(maxLV.getLevel() > getLevel());
    }
 else {
      iterLastCellNumber=getNumSubCells(parent) - 1;
      iterLastIsIntersects=false;
    }
    if (iterFirstCellNumber == iterLastCellNumber) {
      if (iterLastIsIntersects)       iterFirstIsIntersects=true;
 else       if (iterFirstIsIntersects)       iterLastIsIntersects=true;
    }
    return;
  }
  int startCmp=comparePrefixLV(minLV,parent);
  if (startCmp > 0) {
    iterFirstCellNumber=0;
    iterFirstIsIntersects=false;
    iterLastCellNumber=-1;
    iterLastIsIntersects=false;
    return;
  }
  int endCmp=comparePrefixLV(maxLV,parent);
  if (endCmp < 0) {
    iterFirstCellNumber=0;
    iterFirstIsIntersects=false;
    iterLastCellNumber=-1;
    iterLastIsIntersects=false;
    return;
  }
  if (startCmp < 0 || minLV.getLevel() < getLevel()) {
    iterFirstCellNumber=0;
    iterFirstIsIntersects=false;
  }
 else {
    iterFirstCellNumber=minLV.getValAtLevel(getLevel());
    iterFirstIsIntersects=(minLV.getLevel() > getLevel());
  }
  if (endCmp > 0 || maxLV.getLevel() < getLevel()) {
    iterLastCellNumber=getNumSubCells(parent) - 1;
    iterLastIsIntersects=false;
  }
 else {
    iterLastCellNumber=maxLV.getValAtLevel(getLevel());
    iterLastIsIntersects=(maxLV.getLevel() > getLevel());
  }
  if (iterFirstCellNumber == iterLastCellNumber) {
    if (iterLastIsIntersects)     iterFirstIsIntersects=true;
 else     if (iterFirstIsIntersects)     iterLastIsIntersects=true;
  }
}
