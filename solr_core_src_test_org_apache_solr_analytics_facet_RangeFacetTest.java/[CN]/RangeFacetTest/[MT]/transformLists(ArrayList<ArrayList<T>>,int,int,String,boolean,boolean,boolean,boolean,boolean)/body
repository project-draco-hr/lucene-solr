{
  String[] stringGaps=gapString.split(",");
  int[] gaps=new int[stringGaps.length];
  for (int i=0; i < gaps.length; i++) {
    gaps[i]=Integer.parseInt(stringGaps[i]);
  }
  int bigGap=0;
  int last=gaps[gaps.length - 1];
  for (int i=0; i < gaps.length - 1; i++) {
    bigGap+=gaps[i];
  }
  int off=(end - start - bigGap) % last;
  if (!hardend && off > 0) {
    end+=last - off;
  }
  ArrayList<ArrayList<T>> lists=new ArrayList<ArrayList<T>>();
  ArrayList<T> between=new ArrayList<T>();
  int gap=0;
  int gapCounter=0;
  if (incLow && incUp) {
    for (int i=start; i < end && i < listsStart.size(); i+=gap) {
      if (gapCounter < gaps.length) {
        gap=gaps[gapCounter++];
      }
      ArrayList<T> list=new ArrayList<T>();
      for (int j=i; j <= i + gap && j <= end && j < listsStart.size(); j++) {
        list.addAll(listsStart.get(j));
      }
      lists.add(list);
    }
    for (int i=start; i < listsStart.size() && i <= end; i++) {
      between.addAll(listsStart.get(i));
    }
  }
 else   if (incLow && !incUp) {
    for (int i=start; i < end && i < listsStart.size(); i+=gap) {
      if (gapCounter < gaps.length) {
        gap=gaps[gapCounter++];
      }
      ArrayList<T> list=new ArrayList<T>();
      for (int j=i; j < i + gap && j < end && j < listsStart.size(); j++) {
        list.addAll(listsStart.get(j));
      }
      lists.add(list);
    }
    for (int i=start; i < listsStart.size() && i < end; i++) {
      between.addAll(listsStart.get(i));
    }
  }
 else   if (!incLow && incUp) {
    for (int i=start; i < end && i < listsStart.size(); i+=gap) {
      if (gapCounter < gaps.length) {
        gap=gaps[gapCounter++];
      }
      ArrayList<T> list=new ArrayList<T>();
      for (int j=i + 1; j <= i + gap && j <= end && j < listsStart.size(); j++) {
        list.addAll(listsStart.get(j));
      }
      lists.add(list);
    }
    for (int i=start + 1; i < listsStart.size() && i <= end; i++) {
      between.addAll(listsStart.get(i));
    }
  }
 else {
    for (int i=start; i < end && i < listsStart.size(); i+=gap) {
      if (gapCounter < gaps.length) {
        gap=gaps[gapCounter++];
      }
      ArrayList<T> list=new ArrayList<T>();
      for (int j=i + 1; j < i + gap && j < end && j < listsStart.size(); j++) {
        list.addAll(listsStart.get(j));
      }
      lists.add(list);
    }
    for (int i=start + 1; i < listsStart.size() && i < end; i++) {
      between.addAll(listsStart.get(i));
    }
  }
  if (incEdge && !incLow && start >= 0) {
    lists.get(0).addAll(listsStart.get(start));
    between.addAll(listsStart.get(start));
  }
  if (incEdge && !incUp && end < listsStart.size()) {
    lists.get(lists.size() - 1).addAll(listsStart.get(end));
    between.addAll(listsStart.get(end));
  }
  ArrayList<T> before=new ArrayList<T>();
  ArrayList<T> after=new ArrayList<T>();
  if (incOut || !(incLow || incEdge)) {
    for (int i=0; i <= start; i++) {
      before.addAll(listsStart.get(i));
    }
  }
 else {
    for (int i=0; i < start; i++) {
      before.addAll(listsStart.get(i));
    }
  }
  if (incOut || !(incUp || incEdge)) {
    for (int i=end; i < listsStart.size(); i++) {
      after.addAll(listsStart.get(i));
    }
  }
 else {
    for (int i=end + 1; i < listsStart.size(); i++) {
      after.addAll(listsStart.get(i));
    }
  }
  if (before.size() > 0) {
    lists.add(before);
  }
  if (after.size() > 0) {
    lists.add(after);
  }
  if (between.size() > 0) {
    lists.add(between);
  }
  return lists;
}
