{
  final float def=defVal;
  return new DocTermsIndexDocValues(this,readerContext,field){
    private final BytesRef spare=new BytesRef();
    @Override protected String toTerm(    String readableValue){
      return NumberUtils.float2sortableStr(readableValue);
    }
    @Override public float floatVal(    int doc){
      int ord=termsIndex.getOrd(doc);
      if (ord == -1) {
        return def;
      }
 else {
        termsIndex.lookupOrd(ord,spare);
        return NumberUtils.SortableStr2float(spare);
      }
    }
    @Override public int intVal(    int doc){
      return (int)floatVal(doc);
    }
    @Override public long longVal(    int doc){
      return (long)floatVal(doc);
    }
    @Override public double doubleVal(    int doc){
      return (double)floatVal(doc);
    }
    @Override public String strVal(    int doc){
      return Float.toString(floatVal(doc));
    }
    @Override public String toString(    int doc){
      return description() + '=' + floatVal(doc);
    }
    @Override public Object objectVal(    int doc){
      int ord=termsIndex.getOrd(doc);
      if (ord == -1) {
        return null;
      }
 else {
        termsIndex.lookupOrd(ord,spare);
        return NumberUtils.SortableStr2float(spare);
      }
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueFloat mval=new MutableValueFloat();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          int ord=termsIndex.getOrd(doc);
          if (ord == -1) {
            mval.value=def;
            mval.exists=false;
          }
 else {
            termsIndex.lookupOrd(ord,spare);
            mval.value=NumberUtils.SortableStr2float(spare);
            mval.exists=true;
          }
        }
      }
;
    }
  }
;
}
