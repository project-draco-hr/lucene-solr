{
  int indexIter=50 * RANDOM_MULTIPLIER;
  int queryIter=100 * RANDOM_MULTIPLIER;
  while (--indexIter >= 0) {
    int indexSize=random.nextInt(25 * RANDOM_MULTIPLIER);
    List<FldType> types=new ArrayList<FldType>();
    types.add(new FldType("id",ONE_ONE,new SVal('A','Z',4,4)));
    types.add(new FldType("score_f",ONE_ONE,new FVal(1,100)));
    types.add(new FldType("foo_i",ONE_ONE,new IRange(0,indexSize)));
    types.add(new FldType("foo_s",ONE_ONE,new SVal('a','z',1,2)));
    types.add(new FldType("small_s",ONE_ONE,new SVal('a',(char)('c' + indexSize / 10),1,1)));
    types.add(new FldType("small_i",ONE_ONE,new IRange(0,5 + indexSize / 10)));
    clearIndex();
    Map<Comparable,Doc> model=indexDocs(types,null,indexSize);
    if (false) {
      clearIndex();
      model.clear();
      Doc d1=createDoc(types);
      d1.getValues("small_s").set(0,"c");
      d1.getValues("small_i").set(0,5);
      d1.order=0;
      updateJ(toJSON(d1),params("commit","true"));
      model.put(d1.id,d1);
      d1=createDoc(types);
      d1.getValues("small_s").set(0,"b");
      d1.getValues("small_i").set(0,5);
      d1.order=1;
      updateJ(toJSON(d1),params("commit","false"));
      model.put(d1.id,d1);
      d1=createDoc(types);
      d1.getValues("small_s").set(0,"c");
      d1.getValues("small_i").set(0,5);
      d1.order=2;
      updateJ(toJSON(d1),params("commit","false"));
      model.put(d1.id,d1);
      d1=createDoc(types);
      d1.getValues("small_s").set(0,"c");
      d1.getValues("small_i").set(0,5);
      d1.order=3;
      updateJ(toJSON(d1),params("commit","false"));
      model.put(d1.id,d1);
      d1=createDoc(types);
      d1.getValues("small_s").set(0,"b");
      d1.getValues("small_i").set(0,2);
      d1.order=4;
      updateJ(toJSON(d1),params("commit","true"));
      model.put(d1.id,d1);
    }
    for (int qiter=0; qiter < queryIter; qiter++) {
      String groupField=types.get(random.nextInt(types.size())).fname;
      int rows=random.nextInt(10) == 0 ? random.nextInt(model.size() + 2) : random.nextInt(11) - 1;
      int start=random.nextInt(5) == 0 ? random.nextInt(model.size() + 2) : random.nextInt(5);
      int group_limit=random.nextInt(10) == 0 ? random.nextInt(model.size() + 2) : random.nextInt(11) - 1;
      group_limit=random.nextInt(10) + 1;
      int group_offset=random.nextInt(10) == 0 ? random.nextInt(model.size() + 2) : random.nextInt(2);
      String[] stringSortA=new String[1];
      Comparator<Doc> sortComparator=createSort(h.getCore().getSchema(),types,stringSortA);
      String sortStr=stringSortA[0];
      Comparator<Doc> groupComparator=random.nextBoolean() ? sortComparator : createSort(h.getCore().getSchema(),types,stringSortA);
      String groupSortStr=stringSortA[0];
      groupComparator=sortComparator;
      groupSortStr=null;
      if (false) {
        groupField="small_i";
        sortComparator=createComparator(Arrays.asList(createComparator("small_s",true,true,false)));
        sortStr="small_s asc";
        groupComparator=createComparator(Arrays.asList(createComparator("small_s",true,true,false)));
        groupSortStr="small_s asc";
        rows=1;
        start=0;
        group_offset=1;
        group_limit=1;
      }
      Map<Comparable,Grp> groups=groupBy(model.values(),groupField);
      for (      Grp grp : groups.values()) {
        Collections.sort(grp.docs,groupComparator);
      }
      List<Grp> sortedGroups=new ArrayList(groups.values());
      Collections.sort(sortedGroups,createFirstDocComparator(sortComparator));
      Object modelResponse=buildGroupedResult(h.getCore().getSchema(),sortedGroups,start,rows,group_offset,group_limit);
      SolrQueryRequest req=req("group","true","wt","json","indent","true","echoParams","all","q","{!func}score_f","group.field",groupField,sortStr == null ? "nosort" : "sort",sortStr == null ? "" : sortStr,(groupSortStr == null || groupSortStr == sortStr) ? "nosort" : "group.sort",groupSortStr == null ? "" : groupSortStr,"rows","" + rows,"start","" + start,"group.offset","" + group_offset,"group.limit","" + group_limit);
      String strResponse=h.query(req);
      Object realResponse=ObjectBuilder.fromJSON(strResponse);
      String err=JSONTestUtil.matchObj("/grouped/" + groupField,realResponse,modelResponse);
      if (err != null) {
        log.error("GROUPING MISMATCH: " + err + "\n\trequest="+ req+ "\n\tresult="+ strResponse+ "\n\texpected="+ JSONUtil.toJSON(modelResponse)+ "\n\tsorted_model="+ sortedGroups);
        String rsp=h.query(req);
        fail(err);
      }
    }
  }
}
