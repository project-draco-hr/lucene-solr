{
  final RequestHandlers handlers=this;
  AbstractPluginLoader<SolrRequestHandler> loader=new AbstractPluginLoader<SolrRequestHandler>("[solrconfig.xml] requestHandler",true){
    @Override protected SolrRequestHandler create(    String name,    String className,    Map<String,String> params,    Node node) throws Exception {
      String startup=params.get("startup");
      if (startup != null) {
        if ("lazy".equals(startup)) {
          log.info("adding lazy requestHandler: " + className);
          NamedList args=DOMUtil.childNodesToNamedList(node);
          return new LazyRequestHandlerWrapper(className,args);
        }
 else {
          throw new Exception("Unknown startup value: '" + startup + "' for: "+ className);
        }
      }
      return super.create(name,className,params,node);
    }
    @Override protected SolrRequestHandler register(    String name,    SolrRequestHandler plugin) throws Exception {
      return handlers.register(name,plugin);
    }
    @Override protected void init(    SolrRequestHandler plugin,    Map<String,String> params,    Node node) throws Exception {
      plugin.init(DOMUtil.childNodesToNamedList(node));
    }
  }
;
  NodeList nodes=(NodeList)config.evaluate("requestHandler",XPathConstants.NODESET);
  SolrRequestHandler defaultHandler=loader.load(nodes);
  if (defaultHandler == null) {
    defaultHandler=get(RequestHandlers.DEFAULT_HANDLER_NAME);
    if (defaultHandler == null) {
      defaultHandler=new StandardRequestHandler();
      register(RequestHandlers.DEFAULT_HANDLER_NAME,defaultHandler);
    }
  }
  register(null,defaultHandler);
  register("",defaultHandler);
}
