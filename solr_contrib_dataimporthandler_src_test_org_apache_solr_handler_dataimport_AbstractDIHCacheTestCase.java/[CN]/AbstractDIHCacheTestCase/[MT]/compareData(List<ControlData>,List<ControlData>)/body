{
  List<ControlData> control=new ArrayList<>(theControl);
  Collections.sort(control);
  StringBuilder errors=new StringBuilder();
  if (test.size() != control.size()) {
    errors.append("-Returned data has " + test.size() + " records.  expected: "+ control.size()+ "\n");
  }
  for (int i=0; i < control.size() && i < test.size(); i++) {
    Object[] controlRec=control.get(i).data;
    Object[] testRec=test.get(i).data;
    if (testRec.length != controlRec.length) {
      errors.append("-Record indexAt=" + i + " has "+ testRec.length+ " data elements.  extpected: "+ controlRec.length+ "\n");
    }
    for (int j=0; j < controlRec.length && j < testRec.length; j++) {
      Object controlObj=controlRec[j];
      Object testObj=testRec[j];
      if (controlObj == null && testObj != null) {
        errors.append("-Record indexAt=" + i + ", Data Element indexAt="+ j+ " is not NULL as expected.\n");
      }
 else       if (controlObj != null && testObj == null) {
        errors.append("-Record indexAt=" + i + ", Data Element indexAt="+ j+ " is NULL.  Expected: "+ controlObj+ " (class="+ controlObj.getClass().getName()+ ")\n");
      }
 else       if (controlObj != null && testObj != null && controlObj instanceof Clob) {
        String controlString=clobToString((Clob)controlObj);
        String testString=clobToString((Clob)testObj);
        if (!controlString.equals(testString)) {
          errors.append("-Record indexAt=" + i + ", Data Element indexAt="+ j+ " has: "+ testString+ " (class=Clob) ... Expected: "+ controlString+ " (class=Clob)\n");
        }
      }
 else       if (controlObj != null && !controlObj.equals(testObj)) {
        errors.append("-Record indexAt=" + i + ", Data Element indexAt="+ j+ " has: "+ testObj+ " (class="+ testObj.getClass().getName()+ ") ... Expected: "+ controlObj+ " (class="+ controlObj.getClass().getName()+ ")\n");
      }
    }
  }
  if (errors.length() > 0) {
    Assert.fail(errors.toString());
  }
}
