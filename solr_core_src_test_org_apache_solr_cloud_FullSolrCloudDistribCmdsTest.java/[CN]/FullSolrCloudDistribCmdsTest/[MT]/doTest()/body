{
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  waitForRecoveriesToFinish(false);
  QueryResponse results;
  UpdateRequest uReq;
  long docId=addUpdateDelete();
  SolrInputDocument doc1;
  SolrInputDocument doc2;
  docId=addTwoDocsInOneRequest(docId);
  uReq=new UpdateRequest();
  uReq.deleteById(Long.toString(docId - 1));
  uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);
  controlClient.deleteById(Long.toString(docId - 1));
  controlClient.deleteById(Long.toString(docId - 2));
  commit();
  results=query(cloudClient);
  assertEquals(0,results.getResults().getNumFound());
  results=query(controlClient);
  assertEquals(0,results.getResults().getNumFound());
  indexr("id",docId++,t1,"originalcontent");
  uReq=new UpdateRequest();
  doc1=new SolrInputDocument();
  addFields(doc1,"id",docId++);
  uReq.add(doc1);
  doc2=new SolrInputDocument();
  addFields(doc2,"id",docId++);
  uReq.add(doc2);
  uReq.process(cloudClient);
  uReq.process(controlClient);
  uReq=new UpdateRequest();
  uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);
  controlClient.deleteById(Long.toString(docId - 2));
  commit();
  assertDocCounts(VERBOSE);
  checkShardConsistency();
  results=query(controlClient);
  assertEquals(2,results.getResults().getNumFound());
  results=query(cloudClient);
  assertEquals(2,results.getResults().getNumFound());
  docId=testIndexQueryDeleteHierarchical(docId);
  docId=testIndexingDocPerRequestWithHttpSolrServer(docId);
  testIndexingWithSuss(docId);
  testDeleteByQueryDistrib();
  docId=testThatCantForwardToLeaderFails(docId);
  docId=testIndexingBatchPerRequestWithHttpSolrServer(docId);
}
