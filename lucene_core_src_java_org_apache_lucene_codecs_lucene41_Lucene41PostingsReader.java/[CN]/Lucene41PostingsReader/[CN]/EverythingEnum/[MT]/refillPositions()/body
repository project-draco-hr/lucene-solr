{
  if (posIn.getFilePointer() == lastPosBlockFP) {
    final int count=(int)(totalTermFreq % BLOCK_SIZE);
    int payloadLength=0;
    int offsetLength=0;
    payloadByteUpto=0;
    for (int i=0; i < count; i++) {
      int code=posIn.readVInt();
      if (indexHasPayloads) {
        if ((code & 1) != 0) {
          payloadLength=posIn.readVInt();
        }
        payloadLengthBuffer[i]=payloadLength;
        posDeltaBuffer[i]=code >>> 1;
        if (payloadLength != 0) {
          if (payloadByteUpto + payloadLength > payloadBytes.length) {
            payloadBytes=ArrayUtil.grow(payloadBytes,payloadByteUpto + payloadLength);
          }
          posIn.readBytes(payloadBytes,payloadByteUpto,payloadLength);
          payloadByteUpto+=payloadLength;
        }
      }
 else {
        posDeltaBuffer[i]=code;
      }
      if (indexHasOffsets) {
        int deltaCode=posIn.readVInt();
        if ((deltaCode & 1) != 0) {
          offsetLength=posIn.readVInt();
        }
        offsetStartDeltaBuffer[i]=deltaCode >>> 1;
        offsetLengthBuffer[i]=offsetLength;
      }
    }
    payloadByteUpto=0;
  }
 else {
    forUtil.readBlock(posIn,encoded,posDeltaBuffer);
    if (indexHasPayloads) {
      if (needsPayloads) {
        forUtil.readBlock(payIn,encoded,payloadLengthBuffer);
        int numBytes=payIn.readVInt();
        if (numBytes > payloadBytes.length) {
          payloadBytes=ArrayUtil.grow(payloadBytes,numBytes);
        }
        payIn.readBytes(payloadBytes,0,numBytes);
      }
 else {
        forUtil.skipBlock(payIn);
        int numBytes=payIn.readVInt();
        payIn.seek(payIn.getFilePointer() + numBytes);
      }
      payloadByteUpto=0;
    }
    if (indexHasOffsets) {
      if (needsOffsets) {
        forUtil.readBlock(payIn,encoded,offsetStartDeltaBuffer);
        forUtil.readBlock(payIn,encoded,offsetLengthBuffer);
      }
 else {
        forUtil.skipBlock(payIn);
        forUtil.skipBlock(payIn);
      }
    }
  }
}
