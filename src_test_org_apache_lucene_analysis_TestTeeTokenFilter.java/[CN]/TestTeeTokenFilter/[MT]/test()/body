{
  SinkTokenizer sink1=new SinkTokenizer(null){
    public void add(    Token t){
      if (t != null && t.term().equalsIgnoreCase("The")) {
        super.add(t);
      }
    }
  }
;
  TokenStream source=new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())),sink1);
  int i=0;
  final Token reusableToken=new Token();
  for (Token nextToken=source.next(reusableToken); nextToken != null; nextToken=source.next(reusableToken)) {
    assertTrue(nextToken.term() + " is not equal to " + tokens1[i],nextToken.term().equals(tokens1[i]) == true);
    i++;
  }
  assertTrue(i + " does not equal: " + tokens1.length,i == tokens1.length);
  assertTrue("sink1 Size: " + sink1.getTokens().size() + " is not: "+ 2,sink1.getTokens().size() == 2);
  i=0;
  for (Token token=sink1.next(reusableToken); token != null; token=sink1.next(reusableToken)) {
    assertTrue(token.term() + " is not equal to " + "The",token.term().equalsIgnoreCase("The") == true);
    i++;
  }
  assertTrue(i + " does not equal: " + sink1.getTokens().size(),i == sink1.getTokens().size());
}
