{
  BytesRefBuilder ref=new BytesRefBuilder();
  int num=atLeast(2);
  for (int j=0; j < num; j++) {
    int numEntries=0;
    final int size=797;
    BitSet bits=new BitSet(size);
    for (int i=0; i < size; i++) {
      String str;
      do {
        str=TestUtil.randomRealisticUnicodeString(random(),1000);
      }
 while (str.length() == 0);
      ref.copyChars(str);
      final int key=hash.add(ref.get());
      if (key < 0) {
        assertTrue(bits.get((-key) - 1));
      }
 else {
        assertFalse(bits.get(key));
        bits.set(key);
        numEntries++;
      }
    }
    assertEquals(hash.size(),bits.cardinality());
    assertEquals(numEntries,bits.cardinality());
    assertEquals(numEntries,hash.size());
    int[] compact=hash.compact();
    assertTrue(numEntries < compact.length);
    for (int i=0; i < numEntries; i++) {
      bits.set(compact[i],false);
    }
    assertEquals(0,bits.cardinality());
    hash.clear();
    assertEquals(0,hash.size());
    hash.reinit();
  }
}
