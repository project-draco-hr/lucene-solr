{
  SolrQueryRequest req=lrf.makeRequest("q","*:*");
  final int iters=atLeast(5000);
  final int nonBlankAttempts=37;
  for (int i=0; i < iters; i++) {
    final StringBuilder input=new StringBuilder();
    final String[] names=new String[_TestUtil.nextInt(r,1,10)];
    final boolean[] reverse=new boolean[names.length];
    for (int j=0; j < names.length; j++) {
      names[j]=null;
      for (int k=0; k < nonBlankAttempts && null == names[j]; k++) {
        names[j]=_TestUtil.randomRealisticUnicodeString(r,1,100);
        names[j]=names[j].replaceFirst("\\{","\\{\\{");
        names[j]=names[j].replaceFirst("\\(","\\(\\(");
        names[j]=names[j].replaceFirst("(\\\"|\\')","$1$1z");
        names[j]=names[j].replaceFirst("(\\d)","$1x");
        names[j]=names[j].replaceAll("\\p{Cntrl}|\\p{javaWhitespace}","");
        if (0 == names[j].length()) {
          names[j]=null;
        }
      }
      assertNotNull("Unable to generate a (non-blank) names[" + j + "] after "+ nonBlankAttempts+ " attempts",names[j]);
      reverse[j]=r.nextBoolean();
      input.append(r.nextBoolean() ? " " : "");
      input.append(names[j]);
      input.append(" ");
      input.append(reverse[j] ? "desc," : "asc,");
    }
    input.deleteCharAt(input.length() - 1);
    SortField[] sorts=null;
    try {
      sorts=QueryParsing.parseSort(input.toString(),req).getSort();
    }
 catch (    RuntimeException e) {
      throw new RuntimeException("Failed to parse sort: " + input,e);
    }
    assertEquals("parsed sorts had unexpected size",names.length,sorts.length);
    for (int j=0; j < names.length; j++) {
      assertEquals("sorts[" + j + "] had unexpected reverse: "+ input,reverse[j],sorts[j].getReverse());
      final Type type=sorts[j].getType();
      if (Type.SCORE.equals(type)) {
        assertEquals("sorts[" + j + "] is (unexpectedly) type score : "+ input,"score",names[j]);
      }
 else       if (Type.DOC.equals(type)) {
        assertEquals("sorts[" + j + "] is (unexpectedly) type doc : "+ input,"_docid_",names[j]);
      }
 else       if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {
        fail("sorts[" + j + "] resulted in a '"+ type.toString()+ "', either sort parsing code is broken, or func/query "+ "semantics have gotten broader and munging in this test "+ "needs improved: "+ input);
      }
 else {
        assertEquals("sorts[" + j + "] ("+ type.toString()+ ") had unexpected field in: "+ input,names[j],sorts[j].getField());
      }
    }
  }
}
