{
  Directory dir=new RAMDirectory();
  Field f=new StringField("f","0",Field.Store.NO);
  Field f2=new StringField("f2","0",Field.Store.NO);
  for (int iterCnt=0; iterCnt < iter; iterCnt++) {
    IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(new SimpleAnalyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE));
    final MyDoc[] mydocs=new MyDoc[ndocs];
    int v1EmptyPercent=50;
    int v2EmptyPercent=50;
    int commitCountdown=commitCount;
    for (int i=0; i < ndocs; i++) {
      MyDoc mydoc=new MyDoc();
      mydoc.doc=i;
      mydocs[i]=mydoc;
      Document document=new Document();
      if (r.nextInt(100) < v1EmptyPercent) {
        mydoc.val=Integer.toString(r.nextInt(maxval));
        f.setStringValue(mydoc.val);
        document.add(f);
      }
      if (r.nextInt(100) < v2EmptyPercent) {
        mydoc.val2=Integer.toString(r.nextInt(maxval));
        f2.setStringValue(mydoc.val2);
        document.add(f2);
      }
      iw.addDocument(document);
      if (--commitCountdown <= 0) {
        commitCountdown=commitCount;
        iw.commit();
      }
    }
    iw.close();
    Map<String,UninvertingReader.Type> mapping=new HashMap<>();
    mapping.put("f",UninvertingReader.Type.SORTED);
    mapping.put("f2",UninvertingReader.Type.SORTED);
    DirectoryReader reader=UninvertingReader.wrap(DirectoryReader.open(dir),mapping);
    IndexSearcher searcher=new IndexSearcher(reader);
    assertTrue(reader.leaves().size() > 1);
    for (int i=0; i < qiter; i++) {
      Filter filt=new Filter(){
        @Override public DocIdSet getDocIdSet(        LeafReaderContext context,        Bits acceptDocs){
          return BitsFilteredDocIdSet.wrap(randSet(context.reader().maxDoc()),acceptDocs);
        }
        @Override public String toString(        String field){
          return "TestSortFilter";
        }
      }
;
      int top=r.nextInt((ndocs >> 3) + 1) + 1;
      final boolean luceneSort=r.nextBoolean();
      final boolean sortMissingLast=!luceneSort && r.nextBoolean();
      final boolean sortMissingFirst=!luceneSort && !sortMissingLast;
      final boolean reverse=r.nextBoolean();
      List<SortField> sfields=new ArrayList<>();
      final boolean secondary=r.nextBoolean();
      final boolean luceneSort2=r.nextBoolean();
      final boolean sortMissingLast2=!luceneSort2 && r.nextBoolean();
      final boolean sortMissingFirst2=!luceneSort2 && !sortMissingLast2;
      final boolean reverse2=r.nextBoolean();
      if (r.nextBoolean())       sfields.add(new SortField(null,SortField.Type.SCORE));
      sfields.add(Sorting.getStringSortField("f",reverse,sortMissingLast,sortMissingFirst));
      if (secondary) {
        sfields.add(Sorting.getStringSortField("f2",reverse2,sortMissingLast2,sortMissingFirst2));
      }
      if (r.nextBoolean())       sfields.add(new SortField(null,SortField.Type.SCORE));
      Sort sort=new Sort(sfields.toArray(new SortField[sfields.size()]));
      final String nullRep=luceneSort || sortMissingFirst && !reverse || sortMissingLast && reverse ? "" : "zzz";
      final String nullRep2=luceneSort2 || sortMissingFirst2 && !reverse2 || sortMissingLast2 && reverse2 ? "" : "zzz";
      boolean trackScores=r.nextBoolean();
      boolean trackMaxScores=r.nextBoolean();
      boolean scoreInOrder=r.nextBoolean();
      final TopFieldCollector topCollector=TopFieldCollector.create(sort,top,true,trackScores,trackMaxScores);
      final List<MyDoc> collectedDocs=new ArrayList<>();
      Collector myCollector=new FilterCollector(topCollector){
        @Override public LeafCollector getLeafCollector(        LeafReaderContext context) throws IOException {
          final int docBase=context.docBase;
          return new FilterLeafCollector(super.getLeafCollector(context)){
            @Override public void collect(            int doc) throws IOException {
              super.collect(doc);
              collectedDocs.add(mydocs[docBase + doc]);
            }
          }
;
        }
      }
;
      searcher.search(new FilteredQuery(new MatchAllDocsQuery(),filt),myCollector);
      Collections.sort(collectedDocs,new Comparator<MyDoc>(){
        @Override public int compare(        MyDoc o1,        MyDoc o2){
          String v1=o1.val == null ? nullRep : o1.val;
          String v2=o2.val == null ? nullRep : o2.val;
          int cmp=v1.compareTo(v2);
          if (reverse)           cmp=-cmp;
          if (cmp != 0)           return cmp;
          if (secondary) {
            v1=o1.val2 == null ? nullRep2 : o1.val2;
            v2=o2.val2 == null ? nullRep2 : o2.val2;
            cmp=v1.compareTo(v2);
            if (reverse2)             cmp=-cmp;
          }
          cmp=cmp == 0 ? o1.doc - o2.doc : cmp;
          return cmp;
        }
      }
);
      TopDocs topDocs=topCollector.topDocs();
      ScoreDoc[] sdocs=topDocs.scoreDocs;
      for (int j=0; j < sdocs.length; j++) {
        int id=sdocs[j].doc;
        if (id != collectedDocs.get(j).doc) {
          log.error("Error at pos " + j + "\n\tsortMissingFirst="+ sortMissingFirst+ " sortMissingLast="+ sortMissingLast+ " reverse="+ reverse+ "\n\tEXPECTED="+ collectedDocs);
        }
        assertEquals(id,collectedDocs.get(j).doc);
      }
    }
    reader.close();
  }
  dir.close();
}
