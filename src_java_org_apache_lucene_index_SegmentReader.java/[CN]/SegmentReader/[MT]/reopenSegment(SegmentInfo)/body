{
  boolean deletionsUpToDate=(this.si.hasDeletions() == si.hasDeletions()) && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));
  boolean normsUpToDate=true;
  boolean[] fieldNormsChanged=new boolean[fieldInfos.size()];
  if (normsUpToDate) {
    for (int i=0; i < fieldInfos.size(); i++) {
      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {
        normsUpToDate=false;
        fieldNormsChanged[i]=true;
      }
    }
  }
  if (normsUpToDate && deletionsUpToDate) {
    return this;
  }
  SegmentReader clone=new SegmentReader();
  boolean success=false;
  try {
    clone.directory=directory;
    clone.si=si;
    clone.segment=segment;
    clone.readBufferSize=readBufferSize;
    clone.cfsReader=cfsReader;
    clone.storeCFSReader=storeCFSReader;
    clone.fieldInfos=fieldInfos;
    clone.tis=tis;
    clone.freqStream=freqStream;
    clone.proxStream=proxStream;
    clone.termVectorsReaderOrig=termVectorsReaderOrig;
    final String fieldsSegment;
    final Directory dir;
    Directory storeDir=directory();
    if (si.getDocStoreOffset() != -1) {
      fieldsSegment=si.getDocStoreSegment();
      if (storeCFSReader != null) {
        storeDir=storeCFSReader;
      }
    }
 else {
      fieldsSegment=segment;
      if (cfsReader != null) {
        storeDir=cfsReader;
      }
    }
    if (fieldsReader != null) {
      clone.fieldsReader=new FieldsReader(storeDir,fieldsSegment,fieldInfos,readBufferSize,si.getDocStoreOffset(),si.docCount);
    }
    if (!deletionsUpToDate) {
      clone.deletedDocs=null;
      clone.loadDeletedDocs();
    }
 else {
      clone.deletedDocs=this.deletedDocs;
    }
    clone.norms=new HashMap();
    if (!normsUpToDate) {
      for (int i=0; i < fieldNormsChanged.length; i++) {
        if (!fieldNormsChanged[i]) {
          String curField=fieldInfos.fieldInfo(i).name;
          Norm norm=(Norm)this.norms.get(curField);
          norm.incRef();
          clone.norms.put(curField,norm);
        }
      }
      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(),readBufferSize);
    }
 else {
      Iterator it=norms.keySet().iterator();
      while (it.hasNext()) {
        String field=(String)it.next();
        Norm norm=(Norm)norms.get(field);
        norm.incRef();
        clone.norms.put(field,norm);
      }
    }
    if (clone.singleNormStream == null) {
      for (int i=0; i < fieldInfos.size(); i++) {
        FieldInfo fi=fieldInfos.fieldInfo(i);
        if (fi.isIndexed && !fi.omitNorms) {
          Directory d=si.getUseCompoundFile() ? cfsReader : directory();
          String fileName=si.getNormFileName(fi.number);
          if (si.hasSeparateNorms(fi.number)) {
            continue;
          }
          if (fileName.endsWith("." + IndexFileNames.NORMS_EXTENSION)) {
            clone.singleNormStream=d.openInput(fileName,readBufferSize);
            break;
          }
        }
      }
    }
    success=true;
  }
  finally {
    if (this.referencedSegmentReader != null) {
      clone.referencedSegmentReader=this.referencedSegmentReader;
      referencedSegmentReader.incRefReaderNotNorms();
    }
 else {
      clone.referencedSegmentReader=this;
      incRefReaderNotNorms();
    }
    if (!success) {
      clone.decRef();
    }
  }
  return clone;
}
