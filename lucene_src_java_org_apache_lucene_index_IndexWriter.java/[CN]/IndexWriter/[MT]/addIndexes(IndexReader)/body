{
  ensureOpen();
  try {
    if (infoStream != null)     message("flush at addIndexes(IndexReader...)");
    flush(false,true);
    String mergedName=newSegmentName();
    SegmentMerger merger=new SegmentMerger(directory,config.getTermIndexInterval(),mergedName,null,payloadProcessorProvider,globalFieldNumberMap.newFieldInfos(SegmentCodecsBuilder.create(codecs)));
    for (    IndexReader reader : readers)     merger.add(reader);
    int docCount=merger.merge();
    final FieldInfos fieldInfos=merger.fieldInfos();
    SegmentInfo info=new SegmentInfo(mergedName,docCount,directory,false,merger.getSegmentCodecs(),fieldInfos);
    setDiagnostics(info,"addIndexes(IndexReader...)");
    boolean useCompoundFile;
synchronized (this) {
      if (stopMerges) {
        deleter.deleteNewFiles(info.files());
        return;
      }
      ensureOpen();
      useCompoundFile=mergePolicy.useCompoundFile(segmentInfos,info);
    }
    if (useCompoundFile) {
      IOContext context=new IOContext(new MergeInfo(info.docCount,info.sizeInBytes(true),true,false));
      merger.createCompoundFile(mergedName + ".cfs",info,context);
      deleter.deleteNewFiles(info.files());
      info.setUseCompoundFile(true);
    }
synchronized (this) {
      if (stopMerges) {
        deleter.deleteNewFiles(info.files());
        return;
      }
      ensureOpen();
      segmentInfos.add(info);
      checkpoint();
    }
  }
 catch (  OutOfMemoryError oom) {
    handleOOM(oom,"addIndexes(IndexReader...)");
  }
}
