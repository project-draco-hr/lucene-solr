{
  if (merge.registerDone)   return true;
  if (stopMerges) {
    merge.abort();
    throw new MergePolicy.MergeAbortedException("merge is aborted: " + merge.segString(directory));
  }
  boolean isExternal=false;
  for (  SegmentInfo info : merge.segments) {
    if (mergingSegments.contains(info)) {
      return false;
    }
    if (!segmentInfos.contains(info)) {
      return false;
    }
    if (info.dir != directory) {
      isExternal=true;
    }
    if (segmentsToOptimize.containsKey(info)) {
      merge.optimize=true;
      merge.maxNumSegmentsOptimize=optimizeMaxNumSegments;
    }
  }
  ensureValidMerge(merge);
  pendingMerges.add(merge);
  if (infoStream != null)   infoStream.message("IW","add merge to pendingMerges: " + merge.segString(directory) + " [total "+ pendingMerges.size()+ " pending]");
  merge.mergeGen=mergeGen;
  merge.isExternal=isExternal;
  if (infoStream != null) {
    StringBuilder builder=new StringBuilder("registerMerge merging= [");
    for (    SegmentInfo info : mergingSegments) {
      builder.append(info.name).append(", ");
    }
    builder.append("]");
    infoStream.message("IW",builder.toString());
  }
  for (  SegmentInfo info : merge.segments) {
    if (infoStream != null) {
      infoStream.message("IW","registerMerge info=" + info);
    }
    mergingSegments.add(info);
  }
  merge.registerDone=true;
  return true;
}
