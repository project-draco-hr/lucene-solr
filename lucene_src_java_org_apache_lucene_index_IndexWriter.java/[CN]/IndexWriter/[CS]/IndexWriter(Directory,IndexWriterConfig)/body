{
  config=(IndexWriterConfig)conf.clone();
  directory=d;
  analyzer=conf.getAnalyzer();
  setMessageID(defaultInfoStream);
  termIndexInterval=conf.getTermIndexInterval();
  writeLockTimeout=conf.getWriteLockTimeout();
  similarity=conf.getSimilarity();
  mergePolicy=conf.getMergePolicy();
  mergePolicy.setIndexWriter(this);
  mergeScheduler=conf.getMergeScheduler();
  mergedSegmentWarmer=conf.getMergedSegmentWarmer();
  codecs=conf.getCodecProvider();
  poolReaders=conf.getReaderPooling();
  this.readerPool=new IndexReaderPool(this,directory,config);
  OpenMode mode=conf.getOpenMode();
  boolean create;
  if (mode == OpenMode.CREATE) {
    create=true;
  }
 else   if (mode == OpenMode.APPEND) {
    create=false;
  }
 else {
    create=!IndexReader.indexExists(directory);
  }
  if (create) {
    directory.clearLock(WRITE_LOCK_NAME);
  }
  writeLock=directory.makeLock(WRITE_LOCK_NAME);
  if (!writeLock.obtain(writeLockTimeout))   throw new LockObtainFailedException("Index locked for write: " + writeLock);
  boolean success=false;
  try {
    if (create) {
      try {
        segmentInfos.read(directory,codecs);
        segmentInfos.clear();
      }
 catch (      IOException e) {
      }
      changeCount++;
    }
 else {
      segmentInfos.read(directory,codecs);
      IndexCommit commit=conf.getIndexCommit();
      if (commit != null) {
        if (commit.getDirectory() != directory)         throw new IllegalArgumentException("IndexCommit's directory doesn't match my directory");
        SegmentInfos oldInfos=new SegmentInfos();
        oldInfos.read(directory,commit.getSegmentsFileName(),codecs);
        segmentInfos.replace(oldInfos);
        changeCount++;
        if (infoStream != null)         message("init: loaded commit \"" + commit.getSegmentsFileName() + "\"");
      }
    }
    setRollbackSegmentInfos(segmentInfos);
    docWriter=new DocumentsWriter(directory,this,conf);
    deleter=new IndexFileDeleter(directory,conf.getIndexDeletionPolicy(),segmentInfos,infoStream,docWriter,this.codecs);
    if (deleter.startingCommitDeleted)     changeCount++;
    docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());
    docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());
    docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());
    pushMaxBufferedDocs();
    if (infoStream != null) {
      message("init: create=" + create);
      messageState();
    }
    success=true;
  }
  finally {
    if (!success) {
      if (infoStream != null) {
        message("init: hit exception on init; releasing write lock");
      }
      try {
        writeLock.release();
      }
 catch (      Throwable t) {
      }
      writeLock=null;
    }
  }
}
