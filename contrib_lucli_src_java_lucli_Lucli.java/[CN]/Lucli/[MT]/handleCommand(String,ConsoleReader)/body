{
  String[] words=tokenizeCommand(line);
  if (words.length == 0)   return;
  String query="";
  if (line.trim().startsWith("#"))   return;
switch (getCommandId(words[0],words.length - 1)) {
case INFO:
    luceneMethods.info();
  break;
case SEARCH:
for (int ii=1; ii < words.length; ii++) {
  query+=words[ii] + " ";
}
luceneMethods.search(query,false,false,cr);
break;
case COUNT:
for (int ii=1; ii < words.length; ii++) {
query+=words[ii] + " ";
}
luceneMethods.count(query);
break;
case QUIT:
exit();
break;
case TERMS:
if (words.length > 1) luceneMethods.terms(words[1]);
 else luceneMethods.terms(null);
break;
case INDEX:
LuceneMethods newLm=new LuceneMethods(words[1]);
try {
newLm.info();
luceneMethods=newLm;
}
 catch (IOException ioe) {
error(ioe.toString());
}
break;
case OPTIMIZE:
luceneMethods.optimize();
break;
case TOKENS:
for (int ii=1; ii < words.length; ii++) {
query+=words[ii] + " ";
}
luceneMethods.search(query,false,true,cr);
break;
case EXPLAIN:
for (int ii=1; ii < words.length; ii++) {
query+=words[ii] + " ";
}
luceneMethods.search(query,true,false,cr);
break;
case ANALYZER:
luceneMethods.analyzer(words[1]);
break;
case HELP:
help();
break;
case NOCOMMAND:
break;
case UNKOWN:
System.out.println("Unknown command: " + words[0] + ". Type help to get a list of commands.");
break;
}
}
