{
  int maxSize=100;
  long[] a=new long[maxSize];
  long[] discards=new long[maxSize];
  for (int iter=0; iter < 100; iter++) {
    int discardCount=0;
    int startSize=random.nextInt(maxSize) + 1;
    int endSize=startSize == maxSize ? maxSize : startSize + random.nextInt(maxSize - startSize);
    int adds=random.nextInt(maxSize + 1);
    LongPriorityQueue pq=new LongPriorityQueue(startSize,endSize,Long.MIN_VALUE);
    for (int i=0; i < adds; i++) {
      long v=random.nextLong();
      a[i]=v;
      long out=pq.insertWithOverflow(v);
      if (i < endSize) {
        assertEquals(out,Long.MIN_VALUE);
      }
 else {
        discards[discardCount++]=out;
      }
    }
    assertEquals(Math.min(adds,endSize),pq.size());
    assertEquals(adds,pq.size() + discardCount);
    Arrays.sort(a,0,adds);
    Arrays.sort(discards,0,discardCount);
    for (int i=0; i < discardCount; i++) {
      assertEquals(a[i],discards[i]);
    }
    for (int i=discardCount; i < adds; i++) {
      assertEquals(a[i],pq.pop());
    }
    assertEquals(0,pq.size());
  }
}
