{
  Set<Query> expandQueries=new LinkedHashSet<>();
  for (Iterator<Query> i=flatQueries.iterator(); i.hasNext(); ) {
    Query query=i.next();
    i.remove();
    expandQueries.add(query);
    float queryBoost=1f;
    while (query instanceof BoostQuery) {
      BoostQuery bq=(BoostQuery)query;
      queryBoost*=bq.getBoost();
      query=bq.getQuery();
    }
    if (!(query instanceof PhraseQuery))     continue;
    for (Iterator<Query> j=flatQueries.iterator(); j.hasNext(); ) {
      Query qj=j.next();
      float qjBoost=1f;
      while (qj instanceof BoostQuery) {
        BoostQuery bq=(BoostQuery)qj;
        qjBoost*=bq.getBoost();
        qj=bq.getQuery();
      }
      if (!(qj instanceof PhraseQuery))       continue;
      checkOverlap(expandQueries,(PhraseQuery)query,queryBoost,(PhraseQuery)qj,qjBoost);
    }
  }
  return expandQueries;
}
