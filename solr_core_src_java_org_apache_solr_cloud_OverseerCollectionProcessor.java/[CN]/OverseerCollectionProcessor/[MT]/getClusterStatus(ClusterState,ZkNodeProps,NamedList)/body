{
  String collection=message.getStr(ZkStateReader.COLLECTION_PROP);
  Aliases aliases=zkStateReader.getAliases();
  Map<String,List<String>> collectionVsAliases=new HashMap<>();
  Map<String,String> aliasVsCollections=aliases.getCollectionAliasMap();
  if (aliasVsCollections != null) {
    for (    Map.Entry<String,String> entry : aliasVsCollections.entrySet()) {
      List<String> colls=StrUtils.splitSmart(entry.getValue(),',');
      String alias=entry.getKey();
      for (      String coll : colls) {
        if (collection == null || collection.equals(coll)) {
          List<String> list=collectionVsAliases.get(coll);
          if (list == null) {
            list=new ArrayList<>();
            collectionVsAliases.put(coll,list);
          }
          list.add(alias);
        }
      }
    }
  }
  Map roles=null;
  if (zkStateReader.getZkClient().exists(ZkStateReader.ROLES,true)) {
    roles=(Map)ZkStateReader.fromJSON(zkStateReader.getZkClient().getData(ZkStateReader.ROLES,null,null,true));
  }
  byte[] bytes=ZkStateReader.toJSON(clusterState);
  Map<String,Object> stateMap=(Map<String,Object>)ZkStateReader.fromJSON(bytes);
  String shard=message.getStr(ZkStateReader.SHARD_ID_PROP);
  NamedList<Object> collectionProps=new SimpleOrderedMap<Object>();
  if (collection == null) {
    Set<String> collections=clusterState.getCollections();
    for (    String name : collections) {
      Map<String,Object> collectionStatus=null;
      if (clusterState.getCollection(name).getStateFormat() > 1) {
        bytes=ZkStateReader.toJSON(clusterState.getCollection(name));
        Map<String,Object> docCollection=(Map<String,Object>)ZkStateReader.fromJSON(bytes);
        collectionStatus=getCollectionStatus(docCollection,name,shard);
      }
 else {
        collectionStatus=getCollectionStatus((Map<String,Object>)stateMap.get(name),name,shard);
      }
      if (collectionVsAliases.containsKey(name) && !collectionVsAliases.get(name).isEmpty()) {
        collectionStatus.put("aliases",collectionVsAliases.get(name));
      }
      collectionProps.add(name,collectionStatus);
    }
  }
 else {
    String routeKey=message.getStr(ShardParams._ROUTE_);
    Map<String,Object> docCollection=null;
    if (clusterState.getCollection(collection).getStateFormat() > 1) {
      bytes=ZkStateReader.toJSON(clusterState.getCollection(collection));
      docCollection=(Map<String,Object>)ZkStateReader.fromJSON(bytes);
    }
 else {
      docCollection=(Map<String,Object>)stateMap.get(collection);
    }
    if (routeKey == null) {
      Map<String,Object> collectionStatus=getCollectionStatus(docCollection,collection,shard);
      if (collectionVsAliases.containsKey(collection) && !collectionVsAliases.get(collection).isEmpty()) {
        collectionStatus.put("aliases",collectionVsAliases.get(collection));
      }
      collectionProps.add(collection,collectionStatus);
    }
 else {
      DocCollection coll=clusterState.getCollection(collection);
      DocRouter router=coll.getRouter();
      Collection<Slice> slices=router.getSearchSlices(routeKey,null,coll);
      String s="";
      for (      Slice slice : slices) {
        s+=slice.getName() + ",";
      }
      if (shard != null) {
        s+=shard;
      }
      Map<String,Object> collectionStatus=getCollectionStatus(docCollection,collection,s);
      if (collectionVsAliases.containsKey(collection) && !collectionVsAliases.get(collection).isEmpty()) {
        collectionStatus.put("aliases",collectionVsAliases.get(collection));
      }
      collectionProps.add(collection,collectionStatus);
    }
  }
  NamedList<Object> clusterStatus=new SimpleOrderedMap<>();
  clusterStatus.add("collections",collectionProps);
  Map clusterProps=zkStateReader.getClusterProps();
  if (clusterProps != null && !clusterProps.isEmpty()) {
    clusterStatus.add("properties",clusterProps);
  }
  if (aliasVsCollections != null && !aliasVsCollections.isEmpty()) {
    clusterStatus.add("aliases",aliasVsCollections);
  }
  if (roles != null) {
    clusterStatus.add("roles",roles);
  }
  List<String> liveNodes=zkStateReader.getZkClient().getChildren(ZkStateReader.LIVE_NODES_ZKNODE,null,true);
  clusterStatus.add("live_nodes",liveNodes);
  results.add("cluster",clusterStatus);
}
