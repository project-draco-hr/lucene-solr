{
  String collectionName=message.getStr("name");
  if (clusterState.getCollections().contains(collectionName)) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"collection already exists: " + collectionName);
  }
  try {
    int repFactor=msgStrToInt(message,REPLICATION_FACTOR,1);
    Integer numSlices=msgStrToInt(message,NUM_SLICES,null);
    if (numSlices == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST,NUM_SLICES + " is a required param");
    }
    int maxShardsPerNode=msgStrToInt(message,MAX_SHARDS_PER_NODE,1);
    String createNodeSetStr;
    List<String> createNodeList=((createNodeSetStr=message.getStr(CREATE_NODE_SET)) == null) ? null : StrUtils.splitSmart(createNodeSetStr,",",true);
    if (repFactor <= 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,REPLICATION_FACTOR + " must be greater than or equal to 0");
    }
    if (numSlices <= 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,NUM_SLICES + " must be > 0");
    }
    String configName=message.getStr("collection.configName");
    Set<String> nodes=clusterState.getLiveNodes();
    List<String> nodeList=new ArrayList<String>(nodes.size());
    nodeList.addAll(nodes);
    if (createNodeList != null)     nodeList.retainAll(createNodeList);
    Collections.shuffle(nodeList);
    if (nodeList.size() <= 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot create collection " + collectionName + ". No live Solr-instances"+ ((createNodeList != null) ? " among Solr-instances specified in " + CREATE_NODE_SET + ":"+ createNodeSetStr : ""));
    }
    if (repFactor > nodeList.size()) {
      log.warn("Specified " + REPLICATION_FACTOR + " of "+ repFactor+ " on collection "+ collectionName+ " is higher than or equal to the number of Solr instances currently live or part of your "+ CREATE_NODE_SET+ "("+ nodeList.size()+ "). Its unusual to run two replica of the same slice on the same Solr-instance.");
    }
    int maxShardsAllowedToCreate=maxShardsPerNode * nodeList.size();
    int requestedShardsToCreate=numSlices * repFactor;
    if (maxShardsAllowedToCreate < requestedShardsToCreate) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot create collection " + collectionName + ". Value of "+ MAX_SHARDS_PER_NODE+ " is "+ maxShardsPerNode+ ", and the number of live nodes is "+ nodeList.size()+ ". This allows a maximum of "+ maxShardsAllowedToCreate+ " to be created. Value of "+ NUM_SLICES+ " is "+ numSlices+ " and value of "+ REPLICATION_FACTOR+ " is "+ repFactor+ ". This requires "+ requestedShardsToCreate+ " shards to be created (higher than the allowed number)");
    }
    for (int i=1; i <= numSlices; i++) {
      for (int j=1; j <= repFactor; j++) {
        String nodeName=nodeList.get((repFactor * (i - 1) + (j - 1)) % nodeList.size());
        String sliceName="shard" + i;
        String shardName=collectionName + "_" + sliceName+ "_replica"+ j;
        log.info("Creating shard " + shardName + " as part of slice "+ sliceName+ " of collection "+ collectionName+ " on "+ nodeName);
        ModifiableSolrParams params=new ModifiableSolrParams();
        params.set(CoreAdminParams.ACTION,CoreAdminAction.CREATE.toString());
        params.set(CoreAdminParams.NAME,shardName);
        params.set("collection.configName",configName);
        params.set(CoreAdminParams.COLLECTION,collectionName);
        params.set(CoreAdminParams.SHARD,sliceName);
        params.set(ZkStateReader.NUM_SHARDS_PROP,numSlices);
        ShardRequest sreq=new ShardRequest();
        params.set("qt",adminPath);
        sreq.purpose=1;
        String replica=zkStateReader.getZkClient().getBaseUrlForNodeName(nodeName);
        if (replica.startsWith("http://"))         replica=replica.substring(7);
        sreq.shards=new String[]{replica};
        sreq.actualShards=sreq.shards;
        sreq.params=params;
        shardHandler.submit(sreq,replica,sreq.params);
      }
    }
    ShardResponse srsp;
    do {
      srsp=shardHandler.takeCompletedOrError();
      if (srsp != null) {
        processResponse(results,srsp);
      }
    }
 while (srsp != null);
    log.info("Finished create command on all shards for collection: " + collectionName);
  }
 catch (  SolrException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new SolrException(ErrorCode.SERVER_ERROR,null,ex);
  }
}
