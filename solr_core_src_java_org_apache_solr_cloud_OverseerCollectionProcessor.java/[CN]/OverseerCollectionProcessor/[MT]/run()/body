{
  log.info("Process current queue of collection creations");
  LeaderStatus isLeader=amILeader();
  while (isLeader == LeaderStatus.DONT_KNOW) {
    log.debug("am_i_leader unclear {}",isLeader);
    isLeader=amILeader();
  }
  try {
    prioritizeOverseerNodes();
  }
 catch (  Exception e) {
    log.error("Unable to prioritize overseer ",e);
  }
  while (!this.isClosed) {
    try {
      isLeader=amILeader();
      if (LeaderStatus.NO == isLeader) {
        break;
      }
 else       if (LeaderStatus.YES != isLeader) {
        log.debug("am_i_leader unclear {}",isLeader);
        continue;
      }
      QueueEvent head=workQueue.peek(true);
      final ZkNodeProps message=ZkNodeProps.load(head.getBytes());
      final String asyncId=(message.containsKey(ASYNC) && message.get(ASYNC) != null) ? (String)message.get(ASYNC) : null;
      try {
        if (message.containsKey(ASYNC) && message.get(ASYNC) != null && !runningMap.contains(message.getStr(ASYNC)))         runningMap.put(asyncId,null);
      }
 catch (      KeeperException.NodeExistsException e) {
      }
      log.info("Overseer Collection Processor: Get the message id:" + head.getId() + " message:"+ message.toString());
      final String operation=message.getStr(QUEUE_OPERATION);
      SolrResponse response=processMessage(message,operation);
      head.setBytes(SolrResponse.serializable(response));
      if (!operation.equals(REQUESTSTATUS) && asyncId != null) {
        if (response.getResponse().get("failure") != null || response.getResponse().get("exception") != null) {
          failureMap.put(asyncId,null);
        }
 else {
          completedMap.put(asyncId,null);
        }
      }
      if (asyncId != null)       runningMap.remove(asyncId);
      workQueue.remove(head);
      log.info("Overseer Collection Processor: Message id:" + head.getId() + " complete, response:"+ response.getResponse().toString());
    }
 catch (    KeeperException e) {
      if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {
        log.warn("Overseer cannot talk to ZK");
        return;
      }
      SolrException.log(log,"",e);
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      return;
    }
catch (    Exception e) {
      SolrException.log(log,"",e);
    }
  }
}
