{
  log.info("prioritizing overseer nodes");
  SolrZkClient zk=zkStateReader.getZkClient();
  if (!zk.exists(ZkStateReader.ROLES,true))   return;
  Map m=(Map)ZkStateReader.fromJSON(zk.getData(ZkStateReader.ROLES,null,new Stat(),true));
  List overseerDesignates=(List)m.get("overseer");
  if (overseerDesignates == null || overseerDesignates.isEmpty())   return;
  if (overseerDesignates.size() == 1 && overseerDesignates.contains(getLeaderNode(zk)))   return;
  log.info("overseer designates {}",overseerDesignates);
  List<String> nodeNames=getSortedOverseerNodeNames(zk);
  if (nodeNames.size() < 2)   return;
  ArrayList<String> nodesTobePushedBack=new ArrayList<>();
  List<String> availableDesignates=new ArrayList<>();
  log.info("sorted nodes {}",nodeNames);
  for (int i=0; i < nodeNames.size(); i++) {
    String s=nodeNames.get(i);
    if (overseerDesignates.contains(s)) {
      availableDesignates.add(s);
      for (int j=0; j < i; j++) {
        if (!overseerDesignates.contains(nodeNames.get(j))) {
          if (!nodesTobePushedBack.contains(nodeNames.get(j)))           nodesTobePushedBack.add(nodeNames.get(j));
        }
      }
    }
    if (availableDesignates.size() > 1)     break;
  }
  if (!availableDesignates.isEmpty()) {
    for (int i=nodesTobePushedBack.size() - 1; i >= 0; i--) {
      String s=nodesTobePushedBack.get(i);
      log.info("pushing back {} ",s);
      invokeOverseerOp(s,"rejoin");
    }
    boolean prioritizationComplete=false;
    long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(2500,TimeUnit.MILLISECONDS);
    while (System.nanoTime() < timeout) {
      List<String> currentNodeNames=getSortedOverseerNodeNames(zk);
      int totalLeaders=0;
      for (int i=0; i < availableDesignates.size(); i++) {
        if (overseerDesignates.contains(currentNodeNames.get(i)))         totalLeaders++;
      }
      if (totalLeaders == availableDesignates.size()) {
        prioritizationComplete=true;
        break;
      }
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
        log.warn("Thread interrupted",e);
        break;
      }
    }
    if (!prioritizationComplete) {
      log.warn("available designates and current state {} {} ",availableDesignates,getSortedOverseerNodeNames(zk));
    }
  }
 else {
    log.warn("No overseer designates are available, overseerDesignates: {}, live nodes : {}",overseerDesignates,nodeNames);
    return;
  }
  String leaderNode=getLeaderNode(zkStateReader.getZkClient());
  if (leaderNode == null)   return;
  if (!overseerDesignates.contains(leaderNode) && !availableDesignates.isEmpty()) {
    String newLeader=availableDesignates.get(0);
    log.info("I am not an overseerdesignate , forcing a new leader {} ",newLeader);
    invokeOverseerOp(newLeader,"leader");
  }
}
