{
  SolrZkClient zk=zkStateReader.getZkClient();
  if (!zk.exists(ZkStateReader.ROLES,true))   return;
  Map m=(Map)ZkStateReader.fromJSON(zk.getData(ZkStateReader.ROLES,null,new Stat(),true));
  List overseerDesignates=(List)m.get("overseer");
  if (overseerDesignates == null || overseerDesignates.isEmpty())   return;
  String ldr=getLeaderNode(zk);
  if (overseerDesignates.contains(ldr))   return;
  log.info("prioritizing overseer nodes at {} overseer designates are {}",myId,overseerDesignates);
  List<String> electionNodes=getSortedElectionNodes(zk,OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE);
  if (electionNodes.size() < 2)   return;
  log.info("sorted nodes {}",electionNodes);
  String designateNodeId=null;
  for (  String electionNode : electionNodes) {
    if (overseerDesignates.contains(LeaderElector.getNodeName(electionNode))) {
      designateNodeId=electionNode;
      break;
    }
  }
  if (designateNodeId == null) {
    log.warn("No live overseer designate ");
    return;
  }
  if (!designateNodeId.equals(electionNodes.get(1))) {
    log.info("asking node {} to come join election at head",designateNodeId);
    invokeOverseerOp(designateNodeId,"rejoinAtHead");
    log.info("asking the old first in line {} to rejoin election  ",electionNodes.get(1));
    invokeOverseerOp(electionNodes.get(1),"rejoin");
  }
  Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION,Overseer.OverseerAction.QUIT.toLower(),"id",getLeaderId(zkStateReader.getZkClient()))));
}
