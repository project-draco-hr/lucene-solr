{
  final FloatValues vals=cache.getFloats(readerContext.reader,field,creator);
  final float[] arr=vals.values;
  final Bits valid=vals.valid;
  return new DocValues(){
    @Override public float floatVal(    int doc){
      return arr[doc];
    }
    @Override public int intVal(    int doc){
      return (int)arr[doc];
    }
    @Override public long longVal(    int doc){
      return (long)arr[doc];
    }
    @Override public double doubleVal(    int doc){
      return (double)arr[doc];
    }
    @Override public String strVal(    int doc){
      return Float.toString(arr[doc]);
    }
    @Override public String toString(    int doc){
      return description() + '=' + floatVal(doc);
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final float[] floatArr=arr;
        private final MutableValueFloat mval=new MutableValueFloat();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=floatArr[doc];
          mval.exists=valid.get(doc);
        }
      }
;
    }
  }
;
}
