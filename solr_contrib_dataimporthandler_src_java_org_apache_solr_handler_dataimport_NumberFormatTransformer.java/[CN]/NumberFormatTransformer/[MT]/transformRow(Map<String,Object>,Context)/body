{
  for (  Map<String,String> fld : context.getAllEntityFields()) {
    String style=context.replaceTokens(fld.get(FORMAT_STYLE));
    if (style != null) {
      String column=fld.get(DataImporter.COLUMN);
      String srcCol=fld.get(RegexTransformer.SRC_COL_NAME);
      Locale locale=null;
      String localeStr=context.replaceTokens(fld.get(LOCALE));
      if (srcCol == null)       srcCol=column;
      if (localeStr != null) {
        Matcher matcher=localeRegex.matcher(localeStr);
        if (matcher.find() && matcher.groupCount() == 2) {
          locale=new Locale(matcher.group(1),matcher.group(2));
        }
 else {
          throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Invalid Locale specified for field: " + fld);
        }
      }
 else {
        locale=Locale.getDefault();
      }
      Object val=row.get(srcCol);
      String styleSmall=style.toLowerCase(Locale.ROOT);
      if (val instanceof List) {
        List<String> inputs=(List)val;
        List results=new ArrayList();
        for (        String input : inputs) {
          try {
            results.add(process(input,styleSmall,locale));
          }
 catch (          ParseException e) {
            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Failed to apply NumberFormat on column: " + column,e);
          }
        }
        row.put(column,results);
      }
 else {
        if (val == null || val.toString().trim().equals(""))         continue;
        try {
          row.put(column,process(val.toString(),styleSmall,locale));
        }
 catch (        ParseException e) {
          throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Failed to apply NumberFormat on column: " + column,e);
        }
      }
    }
  }
  return row;
}
