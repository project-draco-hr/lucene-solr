{
  indexStream.seek(n * 8L);
  long position=indexStream.readLong();
  fieldsStream.seek(position);
  Document doc=new Document();
  int numFields=fieldsStream.readVInt();
  for (int i=0; i < numFields; i++) {
    int fieldNumber=fieldsStream.readVInt();
    FieldInfo fi=fieldInfos.fieldInfo(fieldNumber);
    byte bits=fieldsStream.readByte();
    boolean compressed=(bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;
    boolean tokenize=(bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;
    if ((bits & FieldsWriter.FIELD_IS_BINARY) != 0) {
      final byte[] b=new byte[fieldsStream.readVInt()];
      fieldsStream.readBytes(b,0,b.length);
      if (compressed)       doc.add(new Field(fi.name,uncompress(b),Field.Store.COMPRESS));
 else       doc.add(new Field(fi.name,b,Field.Store.YES));
    }
 else {
      Field.Index index;
      Field.Store store=Field.Store.YES;
      if (fi.isIndexed && tokenize)       index=Field.Index.TOKENIZED;
 else       if (fi.isIndexed && !tokenize)       index=Field.Index.UN_TOKENIZED;
 else       index=Field.Index.NO;
      Field.TermVector termVector=null;
      if (fi.storeTermVector) {
        if (fi.storeOffsetWithTermVector) {
          if (fi.storePositionWithTermVector) {
            termVector=Field.TermVector.WITH_POSITIONS_OFFSETS;
          }
 else {
            termVector=Field.TermVector.WITH_OFFSETS;
          }
        }
 else         if (fi.storePositionWithTermVector) {
          termVector=Field.TermVector.WITH_POSITIONS;
        }
 else {
          termVector=Field.TermVector.YES;
        }
      }
 else {
        termVector=Field.TermVector.NO;
      }
      if (compressed) {
        store=Field.Store.COMPRESS;
        final byte[] b=new byte[fieldsStream.readVInt()];
        fieldsStream.readBytes(b,0,b.length);
        Field f=new Field(fi.name,new String(uncompress(b),"UTF-8"),store,index,termVector);
        f.setOmitNorms(fi.omitNorms);
        doc.add(f);
      }
 else {
        Field f=new Field(fi.name,fieldsStream.readString(),store,index,termVector);
        f.setOmitNorms(fi.omitNorms);
        doc.add(f);
      }
    }
  }
  return doc;
}
