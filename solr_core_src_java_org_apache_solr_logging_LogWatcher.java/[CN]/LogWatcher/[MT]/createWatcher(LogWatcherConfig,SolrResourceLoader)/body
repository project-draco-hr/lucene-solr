{
  String fname=config.getLoggingClass();
  String slf4jImpl;
  try {
    slf4jImpl=StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();
    log.debug("SLF4J impl is " + slf4jImpl);
    if (fname == null) {
      if ("org.slf4j.impl.Log4jLoggerFactory".equals(slf4jImpl)) {
        fname="Log4j";
      }
 else       if (slf4jImpl.indexOf("JDK") > 0) {
        fname="JUL";
      }
    }
  }
 catch (  Throwable e) {
    log.warn("Unable to read SLF4J version.  LogWatcher will be disabled: " + e);
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
    return null;
  }
  if (fname == null) {
    log.debug("No LogWatcher configured");
    return null;
  }
  if ("JUL".equalsIgnoreCase(fname))   return new JulWatcher(slf4jImpl);
  if ("Log4j".equals(fname))   return new Log4jWatcher(slf4jImpl);
  try {
    return loader != null ? loader.newInstance(fname,LogWatcher.class) : null;
  }
 catch (  Throwable e) {
    log.warn("Unable to load LogWatcher {}: {}",fname,e);
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
  }
  return null;
}
