{
  Directory dir=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT).setIndexDeletionPolicy(new KeepAllCommits()));
  for (int i=0; i < 4; i++) {
    Document doc=new Document();
    doc.add(new Field("id","" + i,Field.Store.NO,Field.Index.NOT_ANALYZED));
    writer.addDocument(doc);
    Map<String,String> data=new HashMap<String,String>();
    data.put("index",i + "");
    writer.commit(data);
  }
  for (int i=0; i < 4; i++) {
    writer.deleteDocuments(new Term("id","" + i));
    Map<String,String> data=new HashMap<String,String>();
    data.put("index",(4 + i) + "");
    writer.commit(data);
  }
  writer.close();
  IndexReader r=IndexReader.open(dir,false);
  assertEquals(0,r.numDocs());
  assertEquals(4,r.maxDoc());
  Collection<IndexCommit> commits=IndexReader.listCommits(dir);
  for (  final IndexCommit commit : commits) {
    IndexReader r2=r.reopen(commit);
    assertTrue(r2 != r);
    try {
      r2.deleteDocument(0);
      fail("no exception hit");
    }
 catch (    UnsupportedOperationException uoe) {
    }
    final Map<String,String> s=commit.getUserData();
    final int v;
    if (s.size() == 0) {
      v=-1;
    }
 else {
      v=Integer.parseInt(s.get("index"));
    }
    if (v < 4) {
      assertEquals(1 + v,r2.numDocs());
    }
 else {
      assertEquals(7 - v,r2.numDocs());
    }
    r.close();
    r=r2;
  }
  r.close();
  dir.close();
}
