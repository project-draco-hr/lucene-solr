{
  final File tmpDir=createTempDir("TestNeverDelete");
  final BaseDirectoryWrapper d=newFSDirectory(tmpDir);
  if (d instanceof MockDirectoryWrapper) {
    ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);
  }
  final RandomIndexWriter w=new RandomIndexWriter(random(),d,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));
  w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(),5,30));
  w.commit();
  Thread[] indexThreads=new Thread[random().nextInt(4)];
  final long stopTime=System.currentTimeMillis() + atLeast(1000);
  for (int x=0; x < indexThreads.length; x++) {
    indexThreads[x]=new Thread(){
      @Override public void run(){
        try {
          int docCount=0;
          while (System.currentTimeMillis() < stopTime) {
            final Document doc=new Document();
            doc.add(newStringField("dc","" + docCount,Field.Store.YES));
            doc.add(newTextField("field","here is some text",Field.Store.YES));
            w.addDocument(doc);
            if (docCount % 13 == 0) {
              w.commit();
            }
            docCount++;
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    indexThreads[x].setName("Thread " + x);
    indexThreads[x].start();
  }
  final Set<String> allFiles=new HashSet<>();
  DirectoryReader r=DirectoryReader.open(d);
  while (System.currentTimeMillis() < stopTime) {
    final IndexCommit ic=r.getIndexCommit();
    if (VERBOSE) {
      System.out.println("TEST: check files: " + ic.getFileNames());
    }
    allFiles.addAll(ic.getFileNames());
    for (    String fileName : allFiles) {
      assertTrue("file " + fileName + " does not exist",slowFileExists(d,fileName));
    }
    DirectoryReader r2=DirectoryReader.openIfChanged(r);
    if (r2 != null) {
      r.close();
      r=r2;
    }
    Thread.sleep(1);
  }
  r.close();
  for (  Thread t : indexThreads) {
    t.join();
  }
  w.shutdown();
  d.close();
  TestUtil.rm(tmpDir);
}
