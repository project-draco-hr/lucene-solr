{
  SolrInputDocument doc=processAdd(chain,doc(f("id","1"),f("title",title[0]),f("teststop",teststop[0]),f("nonexistent","foobar"),f("ssto",teststop[0]),f("sind",teststop[0])));
  assertEquals("title should be unchanged",title[0],doc.getFieldValue("title"));
  assertTrue("teststop should be a Field",doc.getFieldValue("teststop") instanceof Field);
  Field f=(Field)doc.getFieldValue("teststop");
  assertEquals("teststop should have stringValue","this is a test.",f.stringValue());
  assertNotNull("teststop should have tokensStreamValue",f.tokenStreamValue());
  assertNull("nonexistent should be dropped",doc.getField("nonexistent"));
  f=(Field)doc.getFieldValue("ssto");
  assertNotNull("should have ssto",f);
  assertNotNull("should have stringValue",f.stringValue());
  assertNull("should not have tokenStreamValue",f.tokenStreamValue());
  f=(Field)doc.getFieldValue("sind");
  assertNotNull("should have sind",f);
  assertNull("should not have stringValue: '" + f.stringValue() + "'",f.stringValue());
  assertNotNull("should have tokenStreamValue",f.tokenStreamValue());
  doc=processAdd(chain,doc(f("id","2"),f("title",title[1]),f("teststop",teststop[1]),f("nonexistent","foobar"),f("ssto",teststop[1]),f("sind",teststop[1])));
  assertTrue("title should be a Field",doc.getFieldValue("title") instanceof Field);
  assertTrue("teststop should be a Field",doc.getFieldValue("teststop") instanceof Field);
  f=(Field)doc.getFieldValue("teststop");
  assertEquals("teststop should have stringValue","this is a test.",f.stringValue());
  assertNotNull("teststop should have tokensStreamValue",f.tokenStreamValue());
  assertNull("nonexistent should be dropped",doc.getField("nonexistent"));
  f=(Field)doc.getFieldValue("ssto");
  assertNotNull("should have ssto",f);
  assertNotNull("should have stringValue",f.stringValue());
  assertNull("should not have tokenStreamValue",f.tokenStreamValue());
  f=(Field)doc.getFieldValue("sind");
  assertNotNull("should have sind",f);
  assertNull("should not have stringValue: '" + f.stringValue() + "'",f.stringValue());
  assertNotNull("should have tokenStreamValue",f.tokenStreamValue());
  assertU(commit());
  assertQ(req("teststop:\"one two three\""),"//str[@name='id'][.='1']","//str[@name='teststop'][.='this is a test.']");
  assertQ(req("teststop:three"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.='1']","//result/doc[1]/str[@name='title'][.='not pre-analyzed']","//result/doc[2]/str[@name='id'][.='2']","//result/doc[2]/arr[@name='title']/str[.='string value']");
  assertQ(req("ssto:three"),"//*[@numFound='0']");
  assertQ(req("sind:three"),"//*[@numFound='2']");
}
