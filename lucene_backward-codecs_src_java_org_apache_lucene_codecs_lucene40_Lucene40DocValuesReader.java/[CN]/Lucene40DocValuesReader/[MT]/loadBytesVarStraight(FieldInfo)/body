{
  String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
  String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"idx");
  IndexInput data=null;
  IndexInput index=null;
  boolean success=false;
  try {
    data=dir.openInput(dataName,state.context);
    CodecUtil.checkHeader(data,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);
    index=dir.openInput(indexName,state.context);
    CodecUtil.checkHeader(index,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);
    long totalBytes=index.readVLong();
    PagedBytes bytes=new PagedBytes(16);
    bytes.copy(data,totalBytes);
    final PagedBytes.Reader bytesReader=bytes.freeze(true);
    final PackedInts.Reader reader=PackedInts.getReader(index);
    CodecUtil.checkEOF(data);
    CodecUtil.checkEOF(index);
    success=true;
    long bytesUsed=bytesReader.ramBytesUsed() + reader.ramBytesUsed();
    ramBytesUsed.addAndGet(bytesUsed);
    instanceInfo.put(field.name,Accountables.namedAccountable("variable straight",bytesUsed));
    return new BinaryDocValues(){
      @Override public BytesRef get(      int docID){
        final BytesRef term=new BytesRef();
        long startAddress=reader.get(docID);
        long endAddress=reader.get(docID + 1);
        bytesReader.fillSlice(term,startAddress,(int)(endAddress - startAddress));
        return term;
      }
    }
;
  }
  finally {
    if (success) {
      IOUtils.close(data,index);
    }
 else {
      IOUtils.closeWhileHandlingException(data,index);
    }
  }
}
