{
  String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
  String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"idx");
  IndexInput data=null;
  IndexInput index=null;
  boolean success=false;
  try {
    data=dir.openInput(dataName,state.context);
    CodecUtil.checkHeader(data,Lucene40DocValuesFormat.BYTES_VAR_DEREF_CODEC_NAME_DAT,Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_START,Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_CURRENT);
    index=dir.openInput(indexName,state.context);
    CodecUtil.checkHeader(index,Lucene40DocValuesFormat.BYTES_VAR_DEREF_CODEC_NAME_IDX,Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_START,Lucene40DocValuesFormat.BYTES_VAR_DEREF_VERSION_CURRENT);
    final long totalBytes=index.readLong();
    final PagedBytes bytes=new PagedBytes(16);
    bytes.copy(data,totalBytes);
    final PagedBytes.Reader bytesReader=bytes.freeze(true);
    final PackedInts.Reader reader=PackedInts.getReader(index);
    CodecUtil.checkEOF(data);
    CodecUtil.checkEOF(index);
    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());
    success=true;
    return new BinaryDocValues(){
      @Override public BytesRef get(      int docID){
        final BytesRef term=new BytesRef();
        long startAddress=reader.get(docID);
        BytesRef lengthBytes=new BytesRef();
        bytesReader.fillSlice(lengthBytes,startAddress,1);
        byte code=lengthBytes.bytes[lengthBytes.offset];
        if ((code & 128) == 0) {
          bytesReader.fillSlice(term,startAddress + 1,(int)code);
        }
 else {
          bytesReader.fillSlice(lengthBytes,startAddress + 1,1);
          int length=((code & 0x7f) << 8) | (lengthBytes.bytes[lengthBytes.offset] & 0xff);
          bytesReader.fillSlice(term,startAddress + 2,length);
        }
        return term;
      }
    }
;
  }
  finally {
    if (success) {
      IOUtils.close(data,index);
    }
 else {
      IOUtils.closeWhileHandlingException(data,index);
    }
  }
}
