{
  String fileName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
  IndexInput input=dir.openInput(fileName,state.context);
  boolean success=false;
  try {
    CodecUtil.checkHeader(input,Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);
    final int fixedLength=input.readInt();
    PagedBytes bytes=new PagedBytes(16);
    bytes.copy(input,fixedLength * (long)state.segmentInfo.getDocCount());
    final PagedBytes.Reader bytesReader=bytes.freeze(true);
    CodecUtil.checkEOF(input);
    success=true;
    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());
    instanceInfo.put(field.name,bytesReader);
    return new BinaryDocValues(){
      @Override public BytesRef get(      int docID){
        final BytesRef term=new BytesRef();
        bytesReader.fillSlice(term,fixedLength * (long)docID,fixedLength);
        return term;
      }
    }
;
  }
  finally {
    if (success) {
      IOUtils.close(input);
    }
 else {
      IOUtils.closeWhileHandlingException(input);
    }
  }
}
