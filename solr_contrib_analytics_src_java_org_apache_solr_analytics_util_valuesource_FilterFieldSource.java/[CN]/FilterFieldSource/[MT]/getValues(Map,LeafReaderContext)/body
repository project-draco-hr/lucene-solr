{
  final FunctionValues vals=source.getValues(context,readerContext);
  return new FunctionValues(){
    @Override public byte byteVal(    int doc) throws IOException {
      return vals.byteVal(doc);
    }
    @Override public short shortVal(    int doc) throws IOException {
      return vals.shortVal(doc);
    }
    @Override public float floatVal(    int doc) throws IOException {
      return vals.floatVal(doc);
    }
    @Override public int intVal(    int doc) throws IOException {
      return vals.intVal(doc);
    }
    @Override public long longVal(    int doc) throws IOException {
      return vals.longVal(doc);
    }
    @Override public double doubleVal(    int doc) throws IOException {
      return vals.doubleVal(doc);
    }
    @Override public String strVal(    int doc) throws IOException {
      return vals.strVal(doc);
    }
    @Override public Object objectVal(    int doc) throws IOException {
      return exists(doc) ? vals.objectVal(doc) : null;
    }
    @Override public boolean exists(    int doc) throws IOException {
      Object other=vals.objectVal(doc);
      return other != null && !missValue.equals(other);
    }
    @Override public String toString(    int doc) throws IOException {
      return NAME + '(' + vals.toString(doc)+ ')';
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final ValueFiller delegateFiller=vals.getValueFiller();
        private final MutableValue mval=delegateFiller.getValue();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc) throws IOException {
          delegateFiller.fillValue(doc);
          mval.exists=exists(doc);
        }
      }
;
    }
  }
;
}
