{
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  rb.isDistrib=params.getBool("distrib",req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware());
  String shards=params.get(ShardParams.SHARDS);
  boolean hasShardURL=shards != null && shards.indexOf('/') > 0;
  rb.isDistrib=hasShardURL | rb.isDistrib;
  if (rb.isDistrib) {
    ClusterState clusterState=null;
    Map<String,Slice> slices=null;
    CoreDescriptor coreDescriptor=req.getCore().getCoreDescriptor();
    CloudDescriptor cloudDescriptor=coreDescriptor.getCloudDescriptor();
    ZkController zkController=coreDescriptor.getCoreContainer().getZkController();
    if (shards != null) {
      List<String> lst=StrUtils.splitSmart(shards,",",true);
      rb.shards=lst.toArray(new String[lst.size()]);
      rb.slices=new String[rb.shards.length];
      if (zkController != null) {
        for (int i=0; i < rb.shards.length; i++) {
          if (rb.shards[i].indexOf('/') < 0) {
            rb.slices[i]=rb.shards[i];
            rb.shards[i]=null;
          }
        }
      }
    }
 else     if (zkController != null) {
      clusterState=zkController.getClusterState();
      String shardKeys=params.get(ShardParams._ROUTE_);
      if (shardKeys == null)       shardKeys=params.get(ShardParams.SHARD_KEYS);
      slices=new HashMap<String,Slice>();
      String collections=params.get("collection");
      if (collections != null) {
        List<String> collectionList=StrUtils.splitSmart(collections,",",true);
        for (        String collectionName : collectionList) {
          addSlices(slices,clusterState,params,collectionName,shardKeys,true);
        }
      }
 else {
        String collectionName=cloudDescriptor.getCollectionName();
        addSlices(slices,clusterState,params,collectionName,shardKeys,false);
      }
      rb.slices=slices.keySet().toArray(new String[slices.size()]);
      rb.shards=new String[rb.slices.length];
    }
    if (zkController != null) {
      String ourSlice=cloudDescriptor.getShardId();
      String ourCollection=cloudDescriptor.getCollectionName();
      if (rb.slices.length == 1 && rb.slices[0] != null && (rb.slices[0].equals(ourSlice) || rb.slices[0].equals(ourCollection + "_" + ourSlice)) && ZkStateReader.ACTIVE.equals(cloudDescriptor.getLastPublished())) {
        boolean shortCircuit=params.getBool("shortCircuit",true);
        String targetHandler=params.get(ShardParams.SHARDS_QT);
        shortCircuit=shortCircuit && targetHandler == null;
        if (shortCircuit) {
          rb.isDistrib=false;
          return;
        }
      }
      for (int i=0; i < rb.shards.length; i++) {
        if (rb.shards[i] == null) {
          if (clusterState == null) {
            clusterState=zkController.getClusterState();
            slices=clusterState.getSlicesMap(cloudDescriptor.getCollectionName());
          }
          String sliceName=rb.slices[i];
          Slice slice=slices.get(sliceName);
          if (slice == null) {
            rb.shards[i]="";
            continue;
          }
          Map<String,Replica> sliceShards=slice.getReplicasMap();
          StringBuilder sliceShardsStr=new StringBuilder();
          boolean first=true;
          for (          Replica replica : sliceShards.values()) {
            if (!clusterState.liveNodesContain(replica.getNodeName()) || !replica.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE))             continue;
            if (first) {
              first=false;
            }
 else {
              sliceShardsStr.append('|');
            }
            String url=ZkCoreNodeProps.getCoreUrl(replica);
            if (url.startsWith("http://"))             url=url.substring(7);
            sliceShardsStr.append(url);
          }
          rb.shards[i]=sliceShardsStr.toString();
        }
      }
    }
  }
  String shards_rows=params.get(ShardParams.SHARDS_ROWS);
  if (shards_rows != null) {
    rb.shards_rows=Integer.parseInt(shards_rows);
  }
  String shards_start=params.get(ShardParams.SHARDS_START);
  if (shards_start != null) {
    rb.shards_start=Integer.parseInt(shards_start);
  }
}
