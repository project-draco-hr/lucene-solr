{
  final List<String> urls=getURLs(shard);
  Callable<ShardResponse> task=new Callable<ShardResponse>(){
    public ShardResponse call() throws Exception {
      ShardResponse srsp=new ShardResponse();
      srsp.setShardRequest(sreq);
      srsp.setShard(shard);
      SimpleSolrResponse ssr=new SimpleSolrResponse();
      srsp.setSolrResponse(ssr);
      long startTime=System.currentTimeMillis();
      try {
        params.remove(CommonParams.WT);
        params.remove(CommonParams.VERSION);
        QueryRequest req=new QueryRequest(params);
        req.setMethod(SolrRequest.METHOD.POST);
        if (urls.size() == 0) {
          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,"no servers hosting shard: " + shard);
        }
        if (urls.size() <= 1) {
          String url=urls.get(0);
          srsp.setShardAddress(url);
          SolrServer server=new CommonsHttpSolrServer(url,httpClient == null ? httpShardHandlerFactory.client : httpClient);
          ssr.nl=server.request(req);
        }
 else {
          LBHttpSolrServer.Rsp rsp=httpShardHandlerFactory.loadbalancer.request(new LBHttpSolrServer.Req(req,urls));
          ssr.nl=rsp.getResponse();
          srsp.setShardAddress(rsp.getServer());
        }
      }
 catch (      Throwable th) {
        srsp.setException(th);
        if (th instanceof SolrException) {
          srsp.setResponseCode(((SolrException)th).code());
        }
 else {
          srsp.setResponseCode(-1);
        }
      }
      ssr.elapsedTime=System.currentTimeMillis() - startTime;
      return srsp;
    }
  }
;
  pending.add(completionService.submit(task));
}
