{
  dataImporter.store(DataImporter.STATUS_MSGS,statusMessages);
  document=dataImporter.getConfig().getDocumentByName(docName);
  if (document == null)   return;
  final AtomicLong startTime=new AtomicLong(System.currentTimeMillis());
  statusMessages.put(TIME_ELAPSED,new Object(){
    public String toString(){
      return getTimeElapsedSince(startTime.get());
    }
  }
);
  statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,importStatistics.queryCount);
  statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,importStatistics.rowsCount);
  statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,importStatistics.docCount);
  statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,importStatistics.skipDocCount);
  List<String> entities=requestParameters.entities;
  for (  DataConfig.Entity e : document.entities) {
    if (entities != null && !entities.contains(e.name))     continue;
    root=e;
    if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP && dataImporter.getLastIndexTime() != null) {
      doDelta();
    }
 else {
      doFullDump();
    }
    statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);
  }
  if (stop.get()) {
    if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {
      statusMessages.put("Aborted",DataImporter.DATE_TIME_FORMAT.format(new Date()));
      rollback();
    }
 else     if (requestParameters.commit) {
      commit();
    }
  }
 else {
    commit();
  }
  statusMessages.remove(TIME_ELAPSED);
  statusMessages.put("Time taken ",getTimeElapsedSince(startTime.get()));
  LOG.info("Time taken = " + getTimeElapsedSince(startTime.get()));
}
