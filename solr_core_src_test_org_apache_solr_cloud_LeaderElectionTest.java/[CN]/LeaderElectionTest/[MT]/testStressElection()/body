{
  final ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(15,new DefaultSolrThreadFactory("stressElection"));
  final List<ClientThread> threads=Collections.synchronizedList(new ArrayList<ClientThread>());
  ClientThread thread1=null;
  thread1=new ClientThread("shard1",0);
  threads.add(thread1);
  scheduler.schedule(thread1,0,TimeUnit.MILLISECONDS);
  Thread.sleep(2000);
  Thread scheduleThread=new Thread(){
    @Override public void run(){
      int count=atLeast(5);
      for (int i=1; i < count; i++) {
        int launchIn=random().nextInt(500);
        ClientThread thread=null;
        try {
          thread=new ClientThread("shard1",i);
        }
 catch (        Exception e) {
        }
        if (thread != null) {
          threads.add(thread);
          scheduler.schedule(thread,launchIn,TimeUnit.MILLISECONDS);
        }
      }
    }
  }
;
  Thread killThread=new Thread(){
    @Override public void run(){
      while (!stopStress) {
        try {
          int j;
          try {
            j=random().nextInt(threads.size() - 2);
          }
 catch (          IllegalArgumentException e) {
            continue;
          }
          try {
            threads.get(j).close();
          }
 catch (          Exception e) {
          }
          Thread.sleep(10);
        }
 catch (        Exception e) {
        }
      }
    }
  }
;
  Thread connLossThread=new Thread(){
    @Override public void run(){
      while (!stopStress) {
        try {
          Thread.sleep(50);
          int j;
          j=random().nextInt(threads.size());
          try {
            threads.get(j).es.zkClient.getSolrZooKeeper().closeCnxn();
            if (random().nextBoolean()) {
              long sessionId=zkClient.getSolrZooKeeper().getSessionId();
              server.expire(sessionId);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          Thread.sleep(500);
        }
 catch (        Exception e) {
        }
      }
    }
  }
;
  scheduleThread.start();
  connLossThread.start();
  killThread.start();
  Thread.sleep(4000);
  stopStress=true;
  scheduleThread.interrupt();
  connLossThread.interrupt();
  killThread.interrupt();
  scheduleThread.join();
  scheduler.shutdownNow();
  connLossThread.join();
  killThread.join();
  int seq=threads.get(getLeaderThread()).getSeq();
  for (  ClientThread thread : threads) {
    thread.es.zkClient.getSolrZooKeeper().close();
    thread.close();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
}
