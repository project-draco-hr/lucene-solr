{
  final String field="data";
  final String[] vals={"1","2","3","4","5","6","A","Z","B","Y","Z","X","foo"};
  int maxLev=4;
  TestBoolean2.Callback minNrCB=new TestBoolean2.Callback(){
    @Override public void postCreate(    BooleanQuery q){
      BooleanClause[] c=q.getClauses();
      int opt=0;
      for (int i=0; i < c.length; i++) {
        if (c[i].getOccur() == BooleanClause.Occur.SHOULD)         opt++;
      }
      q.setMinimumNumberShouldMatch(random().nextInt(opt + 2));
      if (random().nextBoolean()) {
        Term randomTerm=new Term(field,vals[random().nextInt(vals.length)]);
        q.add(new TermQuery(randomTerm),BooleanClause.Occur.MUST_NOT);
      }
    }
  }
;
  int num=atLeast(20);
  for (int i=0; i < num; i++) {
    int lev=random().nextInt(maxLev);
    final long seed=random().nextLong();
    BooleanQuery q1=TestBoolean2.randBoolQuery(new Random(seed),true,lev,field,vals,null);
    BooleanQuery q2=TestBoolean2.randBoolQuery(new Random(seed),true,lev,field,vals,null);
    minNrCB.postCreate(q2);
    TopDocs top1=s.search(q1,100);
    TopDocs top2=s.search(q2,100);
    if (i < 100) {
      QueryUtils.check(random(),q1,s);
      QueryUtils.check(random(),q2,s);
    }
    assertSubsetOfSameScores(q2,top1,top2);
  }
}
