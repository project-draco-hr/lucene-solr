{
  final long[] arr=new long[RandomInts.randomIntBetween(random(),1,TEST_NIGHTLY ? 1000000 : 100000)];
  float[] ratioOptions=new float[]{PackedInts.DEFAULT,PackedInts.COMPACT,PackedInts.FAST};
  for (  int bpv : new int[]{0,1,63,64,RandomInts.randomIntBetween(random(),2,62)}) {
    for (    DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {
      final int pageSize=1 << TestUtil.nextInt(random(),6,20);
      float acceptableOverheadRatio=ratioOptions[TestUtil.nextInt(random(),0,ratioOptions.length - 1)];
      PackedLongValues.Builder buf;
      final int inc;
switch (dataType) {
case PACKED:
        buf=PackedLongValues.packedBuilder(pageSize,acceptableOverheadRatio);
      inc=0;
    break;
case DELTA_PACKED:
  buf=PackedLongValues.deltaPackedBuilder(pageSize,acceptableOverheadRatio);
inc=0;
break;
case MONOTONIC:
buf=PackedLongValues.monotonicBuilder(pageSize,acceptableOverheadRatio);
inc=TestUtil.nextInt(random(),-1000,1000);
break;
default :
throw new RuntimeException("added a type and forgot to add it here?");
}
if (bpv == 0) {
arr[0]=random().nextLong();
for (int i=1; i < arr.length; ++i) {
arr[i]=arr[i - 1] + inc;
}
}
 else if (bpv == 64) {
for (int i=0; i < arr.length; ++i) {
arr[i]=random().nextLong();
}
}
 else {
final long minValue=TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE - PackedInts.maxValue(bpv));
for (int i=0; i < arr.length; ++i) {
arr[i]=minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv);
}
}
for (int i=0; i < arr.length; ++i) {
buf.add(arr[i]);
if (rarely()) {
final long expectedBytesUsed=RamUsageTester.sizeOf(buf);
final long computedBytesUsed=buf.ramBytesUsed();
assertEquals(expectedBytesUsed,computedBytesUsed);
}
}
assertEquals(arr.length,buf.size());
final PackedLongValues values=buf.build();
try {
buf.add(random().nextLong());
fail("expected an exception");
}
 catch (IllegalStateException e) {
}
assertEquals(arr.length,values.size());
for (int i=0; i < arr.length; ++i) {
assertEquals(arr[i],values.get(i));
}
final PackedLongValues.Iterator it=values.iterator();
for (int i=0; i < arr.length; ++i) {
if (random().nextBoolean()) {
assertTrue(it.hasNext());
}
assertEquals(arr[i],it.next());
}
assertFalse(it.hasNext());
final long expectedBytesUsed=RamUsageTester.sizeOf(values);
final long computedBytesUsed=values.ramBytesUsed();
assertEquals(expectedBytesUsed,computedBytesUsed);
}
}
}
