{
  final int valueCount=_TestUtil.nextInt(random(),5,600);
  final int off1=random().nextInt(valueCount);
  final int off2=random().nextInt(valueCount);
  final int len=random().nextInt(Math.min(valueCount - off1,valueCount - off2));
  final int mem=random().nextInt(1024);
  for (int bpv=1; bpv <= 64; ++bpv) {
    long mask=PackedInts.maxValue(bpv);
    for (    PackedInts.Mutable r1 : createPackedInts(valueCount,bpv)) {
      for (int i=0; i < r1.size(); ++i) {
        r1.set(i,(31L * i - 1023) & mask);
      }
      for (      PackedInts.Mutable r2 : createPackedInts(valueCount,bpv)) {
        String msg="src=" + r1 + ", dest="+ r2+ ", srcPos="+ off1+ ", destPos="+ off2+ ", len="+ len+ ", mem="+ mem;
        PackedInts.copy(r1,off1,r2,off2,len,mem);
        for (int i=0; i < r2.size(); ++i) {
          String m=msg + ", i=" + i;
          if (i >= off2 && i < off2 + len) {
            assertEquals(m,r1.get(i - off2 + off1),r2.get(i));
          }
 else {
            assertEquals(m,0,r2.get(i));
          }
        }
      }
    }
  }
}
