{
  final int numIters=atLeast(3);
  for (int iter=0; iter < numIters; iter++) {
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter);
    }
    final int valueCount=atLeast(100000);
    int bits1=_TestUtil.nextInt(random(),1,64);
    int bits2=_TestUtil.nextInt(random(),1,64);
    if (bits1 > bits2) {
      int tmp=bits1;
      bits1=bits2;
      bits2=tmp;
    }
    if (VERBOSE) {
      System.out.println("  valueCount=" + valueCount + " bits1="+ bits1+ " bits2="+ bits2);
    }
    final PackedInts.Mutable packed1=PackedInts.getMutable(valueCount,bits1,PackedInts.COMPACT);
    final PackedInts.Mutable packed2=PackedInts.getMutable(valueCount,bits2,PackedInts.COMPACT);
    final long maxValue=PackedInts.maxValue(bits1);
    for (int i=0; i < valueCount; i++) {
      final long val=_TestUtil.nextLong(random(),0,maxValue);
      packed1.set(i,val);
      packed2.set(i,val);
    }
    final long[] buffer=new long[valueCount];
    for (int iter2=0; iter2 < 20; iter2++) {
      int start=random().nextInt(valueCount - 1);
      int len=_TestUtil.nextInt(random(),1,valueCount - start);
      int offset;
      if (VERBOSE) {
        System.out.println("  copy " + len + " values @ "+ start);
      }
      if (len == valueCount) {
        offset=0;
      }
 else {
        offset=random().nextInt(valueCount - len);
      }
      if (random().nextBoolean()) {
        int got=packed1.get(start,buffer,offset,len);
        assertTrue(got <= len);
        int sot=packed2.set(start,buffer,offset,got);
        assertTrue(sot <= got);
      }
 else {
        PackedInts.copy(packed1,offset,packed2,offset,len,random().nextInt(10 * len));
      }
    }
    for (int i=0; i < valueCount; i++) {
      assertEquals("value " + i,packed1.get(i),packed2.get(i));
    }
  }
}
