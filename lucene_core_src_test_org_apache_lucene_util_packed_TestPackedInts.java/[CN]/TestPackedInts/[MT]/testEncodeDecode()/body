{
  for (  PackedInts.Format format : PackedInts.Format.values()) {
    for (int bpv=1; bpv <= 64; ++bpv) {
      if (!format.isSupported(bpv)) {
        continue;
      }
      String msg=format + " " + bpv;
      final PackedInts.Encoder encoder=PackedInts.getEncoder(format,PackedInts.VERSION_CURRENT,bpv);
      final PackedInts.Decoder decoder=PackedInts.getDecoder(format,PackedInts.VERSION_CURRENT,bpv);
      final int blockCount=encoder.blockCount();
      final int valueCount=encoder.valueCount();
      assertEquals(blockCount,decoder.blockCount());
      assertEquals(valueCount,decoder.valueCount());
      final int iterations=random().nextInt(100);
      final int blocksOffset=random().nextInt(100);
      final int valuesOffset=random().nextInt(100);
      final int blocksOffset2=random().nextInt(100);
      final int blocksLen=iterations * blockCount;
      final long[] blocks=new long[blocksOffset + blocksLen];
      for (int i=0; i < blocks.length; ++i) {
        blocks[i]=random().nextLong();
        if (format == PackedInts.Format.PACKED_SINGLE_BLOCK && 64 % bpv != 0) {
          final int toClear=64 % bpv;
          blocks[i]=(blocks[i] << toClear) >>> toClear;
        }
      }
      final long[] values=new long[valuesOffset + iterations * valueCount];
      decoder.decode(blocks,blocksOffset,values,valuesOffset,iterations);
      for (      long value : values) {
        assertTrue(value <= PackedInts.maxValue(bpv));
      }
      final long[] blocks2=new long[blocksOffset2 + blocksLen];
      encoder.encode(values,valuesOffset,blocks2,blocksOffset2,iterations);
      assertArrayEquals(msg,Arrays.copyOfRange(blocks,blocksOffset,blocks.length),Arrays.copyOfRange(blocks2,blocksOffset2,blocks2.length));
      final byte[] byteBlocks=new byte[8 * blocks.length];
      ByteBuffer.wrap(byteBlocks).asLongBuffer().put(blocks);
      final long[] values2=new long[valuesOffset + iterations * valueCount];
      decoder.decode(byteBlocks,blocksOffset * 8,values2,valuesOffset,iterations);
      for (      long value : values2) {
        assertTrue(msg,value <= PackedInts.maxValue(bpv));
      }
      assertArrayEquals(msg,values,values2);
      final byte[] blocks3=new byte[8 * (blocksOffset2 + blocksLen)];
      encoder.encode(values,valuesOffset,blocks3,8 * blocksOffset2,iterations);
      assertEquals(msg,LongBuffer.wrap(blocks2),ByteBuffer.wrap(blocks3).asLongBuffer());
    }
  }
}
