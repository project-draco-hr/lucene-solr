{
  int INDEX=(int)Math.pow(2,30) + 1;
  int BITS=2;
  Packed64 p64=null;
  try {
    p64=new Packed64(INDEX,BITS);
  }
 catch (  OutOfMemoryError oome) {
  }
  if (p64 != null) {
    p64.set(INDEX - 1,1);
    assertEquals("The value at position " + (INDEX - 1) + " should be correct for Packed64",1,p64.get(INDEX - 1));
    p64=null;
  }
  for (int bits=1; bits <= 64; ++bits) {
    if (Packed64SingleBlock.isSupported(bits)) {
      int index=Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);
      Packed64SingleBlock p64sb=null;
      try {
        p64sb=Packed64SingleBlock.create(index,bits);
      }
 catch (      OutOfMemoryError oome) {
        continue;
      }
      p64sb.set(index - 1,1);
      assertEquals("The value at position " + (index - 1) + " should be correct for "+ p64sb.getClass().getSimpleName(),1,p64sb.get(index - 1));
    }
  }
  int index=Integer.MAX_VALUE / 24 + 1;
  Packed8ThreeBlocks p8=null;
  try {
    p8=new Packed8ThreeBlocks(index);
  }
 catch (  OutOfMemoryError oome) {
  }
  if (p8 != null) {
    p8.set(index - 1,1);
    assertEquals("The value at position " + (index - 1) + " should be correct for Packed8ThreeBlocks",1,p8.get(index - 1));
    p8=null;
  }
  index=Integer.MAX_VALUE / 48 + 1;
  Packed16ThreeBlocks p16=null;
  try {
    p16=new Packed16ThreeBlocks(index);
  }
 catch (  OutOfMemoryError oome) {
  }
  if (p16 != null) {
    p16.set(index - 1,1);
    assertEquals("The value at position " + (index - 1) + " should be correct for Packed16ThreeBlocks",1,p16.get(index - 1));
    p16=null;
  }
}
