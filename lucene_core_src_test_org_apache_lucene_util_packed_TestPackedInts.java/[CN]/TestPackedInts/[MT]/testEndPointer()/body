{
  final Directory dir=newDirectory();
  final int valueCount=RandomNumbers.randomIntBetween(random(),1,1000);
  final IndexOutput out=dir.createOutput("tests.bin",newIOContext(random()));
  for (int i=0; i < valueCount; ++i) {
    out.writeLong(0);
  }
  out.close();
  final IndexInput in=dir.openInput("tests.bin",newIOContext(random()));
  for (int version=PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {
    for (int bpv=1; bpv <= 64; ++bpv) {
      for (      PackedInts.Format format : PackedInts.Format.values()) {
        if (!format.isSupported(bpv)) {
          continue;
        }
        final long byteCount=format.byteCount(version,valueCount,bpv);
        String msg="format=" + format + ",version="+ version+ ",valueCount="+ valueCount+ ",bpv="+ bpv;
        in.seek(0L);
        final PackedInts.ReaderIterator it=PackedInts.getReaderIteratorNoHeader(in,format,version,valueCount,bpv,RandomNumbers.randomIntBetween(random(),1,1 << 16));
        for (int i=0; i < valueCount; ++i) {
          it.next();
        }
        assertEquals(msg,byteCount,in.getFilePointer());
        in.seek(0L);
        final PackedInts.Reader directReader=PackedInts.getDirectReaderNoHeader(in,format,version,valueCount,bpv);
        directReader.get(valueCount - 1);
        assertEquals(msg,byteCount,in.getFilePointer());
        in.seek(0L);
        PackedInts.getReaderNoHeader(in,format,version,valueCount,bpv);
        assertEquals(msg,byteCount,in.getFilePointer());
      }
    }
  }
  in.close();
  dir.close();
}
