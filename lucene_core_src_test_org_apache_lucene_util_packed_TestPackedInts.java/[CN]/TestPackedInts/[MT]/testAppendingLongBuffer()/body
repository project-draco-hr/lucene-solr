{
  final long[] arr=new long[RandomInts.randomIntBetween(random(),1,1000000)];
  for (  int bpv : new int[]{0,1,63,64,RandomInts.randomIntBetween(random(),2,62)}) {
    for (    boolean monotonic : new boolean[]{true,false}) {
      final int pageSize=1 << _TestUtil.nextInt(random(),6,20);
      final int initialPageCount=_TestUtil.nextInt(random(),0,16);
      AbstractAppendingLongBuffer buf;
      final int inc;
      if (monotonic) {
        buf=new MonotonicAppendingLongBuffer(initialPageCount,pageSize);
        inc=_TestUtil.nextInt(random(),-1000,1000);
      }
 else {
        buf=new AppendingLongBuffer(initialPageCount,pageSize);
        inc=0;
      }
      if (bpv == 0) {
        arr[0]=random().nextLong();
        for (int i=1; i < arr.length; ++i) {
          arr[i]=arr[i - 1] + inc;
        }
      }
 else       if (bpv == 64) {
        for (int i=0; i < arr.length; ++i) {
          arr[i]=random().nextLong();
        }
      }
 else {
        final long minValue=_TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE - PackedInts.maxValue(bpv));
        for (int i=0; i < arr.length; ++i) {
          arr[i]=minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv);
        }
      }
      for (int i=0; i < arr.length; ++i) {
        buf.add(arr[i]);
      }
      assertEquals(arr.length,buf.size());
      final AbstractAppendingLongBuffer.Iterator it=buf.iterator();
      for (int i=0; i < arr.length; ++i) {
        if (random().nextBoolean()) {
          assertTrue(it.hasNext());
        }
        assertEquals(arr[i],it.next());
      }
      assertFalse(it.hasNext());
      for (int i=0; i < arr.length; ++i) {
        assertEquals(arr[i],buf.get(i));
      }
      final long expectedBytesUsed=RamUsageEstimator.sizeOf(buf);
      final long computedBytesUsed=buf.ramBytesUsed();
      assertEquals("got " + computedBytesUsed + ", expected: "+ expectedBytesUsed,expectedBytesUsed,computedBytesUsed);
    }
  }
}
