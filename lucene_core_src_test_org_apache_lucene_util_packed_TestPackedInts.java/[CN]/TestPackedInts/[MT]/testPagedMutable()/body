{
  final int bitsPerValue=_TestUtil.nextInt(random(),1,64);
  final long max=PackedInts.maxValue(bitsPerValue);
  int pageSize=1 << (_TestUtil.nextInt(random(),6,30));
  PagedMutable writer=new PagedMutable(0,pageSize,bitsPerValue,random().nextFloat() / 2);
  assertEquals(0,writer.size());
  AppendingLongBuffer buf=new AppendingLongBuffer();
  int size=random().nextInt(1000000);
  for (int i=0; i < size; ++i) {
    buf.add(bitsPerValue == 64 ? random().nextLong() : _TestUtil.nextLong(random(),0,max));
  }
  writer=new PagedMutable(size,pageSize,bitsPerValue,random().nextFloat());
  assertEquals(size,writer.size());
  for (int i=size - 1; i >= 0; --i) {
    writer.set(i,buf.get(i));
  }
  for (int i=0; i < size; ++i) {
    assertEquals(buf.get(i),writer.get(i));
  }
  assertEquals(RamUsageEstimator.sizeOf(writer) - RamUsageEstimator.sizeOf(writer.format),writer.ramBytesUsed());
  PagedMutable copy=writer.resize(_TestUtil.nextLong(random(),writer.size() / 2,writer.size() * 3 / 2));
  for (long i=0; i < copy.size(); ++i) {
    if (i < writer.size()) {
      assertEquals(writer.get(i),copy.get(i));
    }
 else {
      assertEquals(0,copy.get(i));
    }
  }
  PagedMutable grow=writer.grow(_TestUtil.nextLong(random(),writer.size() / 2,writer.size() * 3 / 2));
  for (long i=0; i < grow.size(); ++i) {
    if (i < writer.size()) {
      assertEquals(writer.get(i),grow.get(i));
    }
 else {
      assertEquals(0,grow.get(i));
    }
  }
}
