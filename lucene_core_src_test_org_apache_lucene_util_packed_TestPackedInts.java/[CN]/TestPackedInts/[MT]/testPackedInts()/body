{
  int num=atLeast(3);
  for (int iter=0; iter < num; iter++) {
    for (int nbits=1; nbits <= 64; nbits++) {
      final long maxValue=PackedInts.maxValue(nbits);
      final int valueCount=TestUtil.nextInt(random(),1,600);
      final int bufferSize=random().nextBoolean() ? TestUtil.nextInt(random(),0,48) : TestUtil.nextInt(random(),0,4096);
      final Directory d=newDirectory();
      IndexOutput out=d.createOutput("out.bin",newIOContext(random()));
      final float acceptableOverhead;
      if (iter == 0) {
        acceptableOverhead=0.0f;
      }
 else {
        acceptableOverhead=random().nextFloat();
      }
      PackedInts.Writer w=PackedInts.getWriter(out,valueCount,nbits,acceptableOverhead);
      final long startFp=out.getFilePointer();
      final int actualValueCount=random().nextBoolean() ? valueCount : TestUtil.nextInt(random(),0,valueCount);
      final long[] values=new long[valueCount];
      for (int i=0; i < actualValueCount; i++) {
        if (nbits == 64) {
          values[i]=random().nextLong();
        }
 else {
          values[i]=TestUtil.nextLong(random(),0,maxValue);
        }
        w.add(values[i]);
      }
      w.finish();
      final long fp=out.getFilePointer();
      out.close();
      final long bytes=w.getFormat().byteCount(PackedInts.VERSION_CURRENT,valueCount,w.bitsPerValue);
      assertEquals(bytes,fp - startFp);
{
        IndexInput in=d.openInput("out.bin",newIOContext(random()));
        CodecUtil.checkHeader(in,PackedInts.CODEC_NAME,PackedInts.VERSION_START,PackedInts.VERSION_CURRENT);
        assertEquals(w.bitsPerValue,in.readVInt());
        assertEquals(valueCount,in.readVInt());
        assertEquals(w.getFormat().getId(),in.readVInt());
        assertEquals(startFp,in.getFilePointer());
        in.close();
      }
{
        IndexInput in=d.openInput("out.bin",newIOContext(random()));
        PackedInts.Reader r=PackedInts.getReader(in);
        assertEquals(fp,in.getFilePointer());
        for (int i=0; i < valueCount; i++) {
          assertEquals("index=" + i + " valueCount="+ valueCount+ " nbits="+ nbits+ " for "+ r.getClass().getSimpleName(),values[i],r.get(i));
        }
        in.close();
        final long expectedBytesUsed=RamUsageEstimator.sizeOf(r);
        final long computedBytesUsed=r.ramBytesUsed();
        assertEquals(r.getClass() + "expected " + expectedBytesUsed+ ", got: "+ computedBytesUsed,expectedBytesUsed,computedBytesUsed);
      }
{
        IndexInput in=d.openInput("out.bin",newIOContext(random()));
        PackedInts.ReaderIterator r=PackedInts.getReaderIterator(in,bufferSize);
        for (int i=0; i < valueCount; i++) {
          assertEquals("index=" + i + " valueCount="+ valueCount+ " nbits="+ nbits+ " for "+ r.getClass().getSimpleName(),values[i],r.next());
          assertEquals(i,r.ord());
        }
        assertEquals(fp,in.getFilePointer());
        in.close();
      }
{
        IndexInput in=d.openInput("out.bin",newIOContext(random()));
        PackedInts.ReaderIterator r=PackedInts.getReaderIterator(in,bufferSize);
        int i=0;
        while (i < valueCount) {
          final int count=TestUtil.nextInt(random(),1,95);
          final LongsRef next=r.next(count);
          for (int k=0; k < next.length; ++k) {
            assertEquals("index=" + i + " valueCount="+ valueCount+ " nbits="+ nbits+ " for "+ r.getClass().getSimpleName(),values[i + k],next.longs[next.offset + k]);
          }
          i+=next.length;
        }
        assertEquals(fp,in.getFilePointer());
        in.close();
      }
{
        IndexInput in=d.openInput("out.bin",newIOContext(random()));
        PackedInts.Reader intsEnum=PackedInts.getDirectReader(in);
        for (int i=0; i < valueCount; i++) {
          final String msg="index=" + i + " valueCount="+ valueCount+ " nbits="+ nbits+ " for "+ intsEnum.getClass().getSimpleName();
          final int index=random().nextInt(valueCount);
          assertEquals(msg,values[index],intsEnum.get(index));
        }
        intsEnum.get(intsEnum.size() - 1);
        assertEquals(fp,in.getFilePointer());
        in.close();
      }
      d.close();
    }
  }
}
