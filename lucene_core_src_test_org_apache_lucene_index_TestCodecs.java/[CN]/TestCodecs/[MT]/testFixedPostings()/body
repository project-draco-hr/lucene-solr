{
  final int NUM_TERMS=100;
  final TermData[] terms=new TermData[NUM_TERMS];
  for (int i=0; i < NUM_TERMS; i++) {
    final int[] docs=new int[]{i};
    final String text=Integer.toString(i,Character.MAX_RADIX);
    terms[i]=new TermData(text,docs,null);
  }
  final FieldInfos fieldInfos=new FieldInfos(new FieldInfos.FieldNumberBiMap());
  final FieldData field=new FieldData("field",fieldInfos,terms,true,false);
  final FieldData[] fields=new FieldData[]{field};
  final Directory dir=newDirectory();
  FieldInfos clonedFieldInfos=fieldInfos.clone();
  this.write(fieldInfos,dir,fields,true);
  Codec codec=Codec.getDefault();
  final SegmentInfo si=new SegmentInfo(SEGMENT,10000,dir,false,codec,clonedFieldInfos);
  final FieldsProducer reader=codec.postingsFormat().fieldsProducer(new SegmentReadState(dir,si,fieldInfos,newIOContext(random),DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR));
  final FieldsEnum fieldsEnum=reader.iterator();
  assertNotNull(fieldsEnum.next());
  final Terms terms2=fieldsEnum.terms();
  assertNotNull(terms2);
  final TermsEnum termsEnum=terms2.iterator(null);
  DocsEnum docsEnum=null;
  for (int i=0; i < NUM_TERMS; i++) {
    final BytesRef term=termsEnum.next();
    assertNotNull(term);
    assertEquals(terms[i].text2,term.utf8ToString());
    for (int iter=0; iter < 2; iter++) {
      docsEnum=_TestUtil.docs(random,termsEnum,null,docsEnum,false);
      assertEquals(terms[i].docs[0],docsEnum.nextDoc());
      assertEquals(DocIdSetIterator.NO_MORE_DOCS,docsEnum.nextDoc());
    }
  }
  assertNull(termsEnum.next());
  for (int i=0; i < NUM_TERMS; i++) {
    assertEquals(termsEnum.seekCeil(new BytesRef(terms[i].text2)),TermsEnum.SeekStatus.FOUND);
  }
  assertNull(fieldsEnum.next());
  reader.close();
  dir.close();
}
