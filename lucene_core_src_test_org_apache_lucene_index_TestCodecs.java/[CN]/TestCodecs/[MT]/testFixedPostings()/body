{
  final int NUM_TERMS=100;
  final TermData[] terms=new TermData[NUM_TERMS];
  for (int i=0; i < NUM_TERMS; i++) {
    final int[] docs=new int[]{i};
    final String text=Integer.toString(i,Character.MAX_RADIX);
    terms[i]=new TermData(text,docs,null);
  }
  final FieldInfos.Builder builder=new FieldInfos.Builder();
  final FieldData field=new FieldData("field",builder,terms,true,false);
  final FieldData[] fields=new FieldData[]{field};
  final FieldInfos fieldInfos=builder.finish();
  final Directory dir=newDirectory();
  Codec codec=Codec.getDefault();
  final SegmentInfo si=new SegmentInfo(dir,Version.LATEST,SEGMENT,10000,false,codec,null,StringHelper.randomId(),new HashMap<>());
  this.write(si,fieldInfos,dir,fields);
  final FieldsProducer reader=codec.postingsFormat().fieldsProducer(new SegmentReadState(dir,si,fieldInfos,newIOContext(random())));
  final Iterator<String> fieldsEnum=reader.iterator();
  String fieldName=fieldsEnum.next();
  assertNotNull(fieldName);
  final Terms terms2=reader.terms(fieldName);
  assertNotNull(terms2);
  final TermsEnum termsEnum=terms2.iterator(null);
  PostingsEnum postingsEnum=null;
  for (int i=0; i < NUM_TERMS; i++) {
    final BytesRef term=termsEnum.next();
    assertNotNull(term);
    assertEquals(terms[i].text2,term.utf8ToString());
    for (int iter=0; iter < 2; iter++) {
      postingsEnum=TestUtil.docs(random(),termsEnum,null,postingsEnum,PostingsEnum.NONE);
      assertEquals(terms[i].docs[0],postingsEnum.nextDoc());
      assertEquals(DocIdSetIterator.NO_MORE_DOCS,postingsEnum.nextDoc());
    }
  }
  assertNull(termsEnum.next());
  for (int i=0; i < NUM_TERMS; i++) {
    assertEquals(termsEnum.seekCeil(new BytesRef(terms[i].text2)),TermsEnum.SeekStatus.FOUND);
  }
  assertFalse(fieldsEnum.hasNext());
  reader.close();
  dir.close();
}
