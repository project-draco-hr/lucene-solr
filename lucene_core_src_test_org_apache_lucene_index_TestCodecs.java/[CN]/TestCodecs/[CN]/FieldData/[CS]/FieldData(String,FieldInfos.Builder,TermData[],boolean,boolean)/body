{
  this.omitTF=omitTF;
  this.storePayloads=storePayloads;
  fieldInfo=fieldInfos.addOrUpdate(name,new IndexableFieldType(){
    @Override public boolean stored(){
      return false;
    }
    @Override public boolean tokenized(){
      return false;
    }
    @Override public boolean storeTermVectors(){
      return false;
    }
    @Override public boolean storeTermVectorOffsets(){
      return false;
    }
    @Override public boolean storeTermVectorPositions(){
      return false;
    }
    @Override public boolean storeTermVectorPayloads(){
      return false;
    }
    @Override public boolean omitNorms(){
      return false;
    }
    @Override public IndexOptions indexOptions(){
      return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
    }
    @Override public DocValuesType docValueType(){
      return DocValuesType.NONE;
    }
  }
);
  if (storePayloads) {
    fieldInfo.setStorePayloads();
  }
  this.terms=terms;
  for (int i=0; i < terms.length; i++)   terms[i].field=this;
  Arrays.sort(terms);
}
