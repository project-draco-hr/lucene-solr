{
  assumeTrue("Codec does not support getDocsWithField",codecSupportsDocsWithField());
  assumeTrue("Codec does not support SORTED_SET",codecSupportsSortedSet());
  assumeTrue("Codec does not support SORTED_NUMERIC",codecSupportsSortedNumeric());
  Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random()));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  Field idField=new StringField("id","",Field.Store.NO);
  Field storedBinField=new StoredField("storedBin",new byte[0]);
  Field dvBinField=new BinaryDocValuesField("dvBin",new BytesRef());
  Field dvSortedField=new SortedDocValuesField("dvSorted",new BytesRef());
  Field storedNumericField=new StoredField("storedNum","");
  Field dvNumericField=new NumericDocValuesField("dvNum",0);
  int numDocs=TestUtil.nextInt(random(),1025,2047);
  for (int i=0; i < numDocs; i++) {
    idField.setStringValue(Integer.toString(i));
    int length=TestUtil.nextInt(random(),0,8);
    byte buffer[]=new byte[length];
    random().nextBytes(buffer);
    storedBinField.setBytesValue(buffer);
    dvBinField.setBytesValue(buffer);
    dvSortedField.setBytesValue(buffer);
    long numericValue=random().nextLong();
    storedNumericField.setStringValue(Long.toString(numericValue));
    dvNumericField.setLongValue(numericValue);
    Document doc=new Document();
    doc.add(idField);
    if (random().nextInt(4) > 0) {
      doc.add(storedBinField);
      doc.add(dvBinField);
      doc.add(dvSortedField);
    }
    if (random().nextInt(4) > 0) {
      doc.add(storedNumericField);
      doc.add(dvNumericField);
    }
    int numSortedSetFields=random().nextInt(3);
    Set<String> values=new TreeSet<>();
    for (int j=0; j < numSortedSetFields; j++) {
      values.add(TestUtil.randomSimpleString(random()));
    }
    for (    String v : values) {
      doc.add(new SortedSetDocValuesField("dvSortedSet",new BytesRef(v)));
      doc.add(new StoredField("storedSortedSet",v));
    }
    int numSortedNumericFields=random().nextInt(3);
    Set<Long> numValues=new TreeSet<>();
    for (int j=0; j < numSortedNumericFields; j++) {
      numValues.add(TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE));
    }
    for (    Long l : numValues) {
      doc.add(new SortedNumericDocValuesField("dvSortedNumeric",l));
      doc.add(new StoredField("storedSortedNumeric",Long.toString(l)));
    }
    writer.addDocument(doc);
    if (random().nextInt(31) == 0) {
      writer.commit();
    }
  }
  int numDeletions=random().nextInt(numDocs / 10);
  for (int i=0; i < numDeletions; i++) {
    int id=random().nextInt(numDocs);
    writer.deleteDocuments(new Term("id",Integer.toString(id)));
  }
  writer.close();
  final DirectoryReader ir=DirectoryReader.open(dir);
  int numThreads=TestUtil.nextInt(random(),2,7);
  Thread threads[]=new Thread[numThreads];
  final CountDownLatch startingGun=new CountDownLatch(1);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          startingGun.await();
          for (          AtomicReaderContext context : ir.leaves()) {
            AtomicReader r=context.reader();
            BinaryDocValues binaries=r.getBinaryDocValues("dvBin");
            Bits binaryBits=r.getDocsWithField("dvBin");
            SortedDocValues sorted=r.getSortedDocValues("dvSorted");
            Bits sortedBits=r.getDocsWithField("dvSorted");
            NumericDocValues numerics=r.getNumericDocValues("dvNum");
            Bits numericBits=r.getDocsWithField("dvNum");
            SortedSetDocValues sortedSet=r.getSortedSetDocValues("dvSortedSet");
            Bits sortedSetBits=r.getDocsWithField("dvSortedSet");
            SortedNumericDocValues sortedNumeric=r.getSortedNumericDocValues("dvSortedNumeric");
            Bits sortedNumericBits=r.getDocsWithField("dvSortedNumeric");
            for (int j=0; j < r.maxDoc(); j++) {
              BytesRef binaryValue=r.document(j).getBinaryValue("storedBin");
              if (binaryValue != null) {
                if (binaries != null) {
                  BytesRef scratch=binaries.get(j);
                  assertEquals(binaryValue,scratch);
                  scratch=sorted.get(j);
                  assertEquals(binaryValue,scratch);
                  assertTrue(binaryBits.get(j));
                  assertTrue(sortedBits.get(j));
                }
              }
 else               if (binaries != null) {
                assertFalse(binaryBits.get(j));
                assertFalse(sortedBits.get(j));
                assertEquals(-1,sorted.getOrd(j));
              }
              String number=r.document(j).get("storedNum");
              if (number != null) {
                if (numerics != null) {
                  assertEquals(Long.parseLong(number),numerics.get(j));
                }
              }
 else               if (numerics != null) {
                assertFalse(numericBits.get(j));
                assertEquals(0,numerics.get(j));
              }
              String values[]=r.document(j).getValues("storedSortedSet");
              if (values.length > 0) {
                assertNotNull(sortedSet);
                sortedSet.setDocument(j);
                for (int k=0; k < values.length; k++) {
                  long ord=sortedSet.nextOrd();
                  assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);
                  BytesRef value=sortedSet.lookupOrd(ord);
                  assertEquals(values[k],value.utf8ToString());
                }
                assertEquals(SortedSetDocValues.NO_MORE_ORDS,sortedSet.nextOrd());
                assertTrue(sortedSetBits.get(j));
              }
 else               if (sortedSet != null) {
                sortedSet.setDocument(j);
                assertEquals(SortedSetDocValues.NO_MORE_ORDS,sortedSet.nextOrd());
                assertFalse(sortedSetBits.get(j));
              }
              String numValues[]=r.document(j).getValues("storedSortedNumeric");
              if (numValues.length > 0) {
                assertNotNull(sortedNumeric);
                sortedNumeric.setDocument(j);
                assertEquals(numValues.length,sortedNumeric.count());
                for (int k=0; k < numValues.length; k++) {
                  long v=sortedNumeric.valueAt(k);
                  assertEquals(numValues[k],Long.toString(v));
                }
                assertTrue(sortedNumericBits.get(j));
              }
 else               if (sortedNumeric != null) {
                sortedNumeric.setDocument(j);
                assertEquals(0,sortedNumeric.count());
                assertFalse(sortedNumericBits.get(j));
              }
            }
          }
          TestUtil.checkReader(ir);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    threads[i].start();
  }
  startingGun.countDown();
  for (  Thread t : threads) {
    t.join();
  }
  ir.close();
  dir.close();
}
