{
  Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  Document doc=new Document();
  Field idField=new StringField("id","",Field.Store.NO);
  Field indexedField=new StringField("indexed","",Field.Store.NO);
  Field dvField=new SortedDocValuesField("dv",new BytesRef());
  doc.add(idField);
  doc.add(indexedField);
  doc.add(dvField);
  int numDocs=atLeast(300);
  for (int i=0; i < numDocs; i++) {
    idField.setStringValue(Integer.toString(i));
    final int length;
    if (minLength == maxLength) {
      length=minLength;
    }
 else {
      length=TestUtil.nextInt(random(),minLength,maxLength);
    }
    String value=TestUtil.randomSimpleString(random(),length);
    indexedField.setStringValue(value);
    dvField.setBytesValue(new BytesRef(value));
    writer.addDocument(doc);
    if (random().nextInt(31) == 0) {
      writer.commit();
    }
  }
  int numDeletions=random().nextInt(numDocs / 10);
  for (int i=0; i < numDeletions; i++) {
    int id=random().nextInt(numDocs);
    writer.deleteDocuments(new Term("id",Integer.toString(id)));
  }
  writer.shutdown();
  DirectoryReader ir=DirectoryReader.open(dir);
  for (  AtomicReaderContext context : ir.leaves()) {
    AtomicReader r=context.reader();
    SortedDocValues expected=FieldCache.DEFAULT.getTermsIndex(r,"indexed");
    SortedDocValues actual=r.getSortedDocValues("dv");
    assertEquals(r.maxDoc(),expected,actual);
  }
  ir.close();
  dir.close();
}
