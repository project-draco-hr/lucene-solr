{
  Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random()));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  Document doc=new Document();
  Field idField=new StringField("id","",Field.Store.NO);
  Field storedBinField=new StoredField("storedBin",new byte[0]);
  Field dvBinField=new BinaryDocValuesField("dvBin",new BytesRef());
  Field dvSortedField=new SortedDocValuesField("dvSorted",new BytesRef());
  Field storedNumericField=new StoredField("storedNum","");
  Field dvNumericField=new NumericDocValuesField("dvNum",0);
  doc.add(idField);
  doc.add(storedBinField);
  doc.add(dvBinField);
  doc.add(dvSortedField);
  doc.add(storedNumericField);
  doc.add(dvNumericField);
  int numDocs=atLeast(300);
  for (int i=0; i < numDocs; i++) {
    idField.setStringValue(Integer.toString(i));
    int length=TestUtil.nextInt(random(),0,8);
    byte buffer[]=new byte[length];
    random().nextBytes(buffer);
    storedBinField.setBytesValue(buffer);
    dvBinField.setBytesValue(buffer);
    dvSortedField.setBytesValue(buffer);
    long numericValue=random().nextLong();
    storedNumericField.setStringValue(Long.toString(numericValue));
    dvNumericField.setLongValue(numericValue);
    writer.addDocument(doc);
    if (random().nextInt(31) == 0) {
      writer.commit();
    }
  }
  int numDeletions=random().nextInt(numDocs / 10);
  for (int i=0; i < numDeletions; i++) {
    int id=random().nextInt(numDocs);
    writer.deleteDocuments(new Term("id",Integer.toString(id)));
  }
  writer.close();
  final DirectoryReader ir=DirectoryReader.open(dir);
  int numThreads=TestUtil.nextInt(random(),2,7);
  Thread threads[]=new Thread[numThreads];
  final CountDownLatch startingGun=new CountDownLatch(1);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          startingGun.await();
          for (          LeafReaderContext context : ir.leaves()) {
            LeafReader r=context.reader();
            BinaryDocValues binaries=r.getBinaryDocValues("dvBin");
            SortedDocValues sorted=r.getSortedDocValues("dvSorted");
            NumericDocValues numerics=r.getNumericDocValues("dvNum");
            for (int j=0; j < r.maxDoc(); j++) {
              BytesRef binaryValue=r.document(j).getBinaryValue("storedBin");
              assertEquals(j,binaries.nextDoc());
              BytesRef scratch=binaries.binaryValue();
              assertEquals(binaryValue,scratch);
              assertEquals(j,sorted.nextDoc());
              scratch=sorted.binaryValue();
              assertEquals(binaryValue,scratch);
              String expected=r.document(j).get("storedNum");
              assertEquals(j,numerics.nextDoc());
              assertEquals(Long.parseLong(expected),numerics.longValue());
            }
          }
          TestUtil.checkReader(ir);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    threads[i].start();
  }
  startingGun.countDown();
  for (  Thread t : threads) {
    t.join();
  }
  ir.close();
  dir.close();
}
