{
  assumeTrue("Codec does not support getDocsWithField",defaultCodecSupportsDocsWithField());
  assumeTrue("Codec does not support SORTED_SET",defaultCodecSupportsSortedSet());
  assumeTrue("Codec does not support SORTED_NUMERIC",defaultCodecSupportsSortedNumeric());
  Directory dir=newFSDirectory(createTempDir());
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random()));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  int numSortedSets=random().nextInt(21);
  int numBinaries=random().nextInt(21);
  int numSortedNums=random().nextInt(21);
  int numDocs=TestUtil.nextInt(random(),2025,2047);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    for (int j=0; j < numSortedSets; j++) {
      doc.add(new SortedSetDocValuesField("ss" + j,new BytesRef(TestUtil.randomSimpleString(random()))));
      doc.add(new SortedSetDocValuesField("ss" + j,new BytesRef(TestUtil.randomSimpleString(random()))));
    }
    for (int j=0; j < numBinaries; j++) {
      doc.add(new BinaryDocValuesField("b" + j,new BytesRef(TestUtil.randomSimpleString(random()))));
    }
    for (int j=0; j < numSortedNums; j++) {
      doc.add(new SortedNumericDocValuesField("sn" + j,TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE)));
      doc.add(new SortedNumericDocValuesField("sn" + j,TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE)));
    }
    writer.addDocument(doc);
  }
  writer.close();
  for (int i=0; i < 10; i++) {
    final DirectoryReader r=DirectoryReader.open(dir);
    final CountDownLatch startingGun=new CountDownLatch(1);
    Thread threads[]=new Thread[TestUtil.nextInt(random(),4,10)];
    for (int tid=0; tid < threads.length; tid++) {
      threads[tid]=new Thread(){
        @Override public void run(){
          try {
            ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);
            PrintStream infoStream=new PrintStream(bos,false,IOUtils.UTF_8);
            startingGun.await();
            for (            AtomicReaderContext leaf : r.leaves()) {
              CheckIndex.testDocValues(leaf.reader(),infoStream,true);
            }
          }
 catch (          Exception e) {
            throw new RuntimeException();
          }
        }
      }
;
    }
    for (int tid=0; tid < threads.length; tid++) {
      threads[tid].start();
    }
    startingGun.countDown();
    for (int tid=0; tid < threads.length; tid++) {
      threads[tid].join();
    }
    r.close();
  }
  dir.close();
}
