{
  Analyzer analyzer=new MockAnalyzer(random());
  Directory d=newFSDirectory(_TestUtil.getTempDir("hugeBinaryValues"));
  boolean doFixed=random().nextBoolean();
  int numDocs;
  int fixedLength=0;
  if (doFixed) {
    numDocs=_TestUtil.nextInt(random(),10,20);
    fixedLength=_TestUtil.nextInt(random(),65537,256 * 1024);
  }
 else {
    numDocs=_TestUtil.nextInt(random(),100,200);
  }
  IndexWriter w=new IndexWriter(d,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer));
  List<byte[]> docBytes=new ArrayList<byte[]>();
  long totalBytes=0;
  for (int docID=0; docID < numDocs; docID++) {
    int numBytes;
    if (doFixed) {
      numBytes=fixedLength;
    }
 else     if (docID == 0 || random().nextInt(5) == 3) {
      numBytes=_TestUtil.nextInt(random(),65537,3 * 1024 * 1024);
    }
 else {
      numBytes=_TestUtil.nextInt(random(),1,1024 * 1024);
    }
    totalBytes+=numBytes;
    if (totalBytes > 5 * 1024 * 1024) {
      break;
    }
    byte[] bytes=new byte[numBytes];
    random().nextBytes(bytes);
    docBytes.add(bytes);
    Document doc=new Document();
    BytesRef b=new BytesRef(bytes);
    b.length=bytes.length;
    doc.add(new BinaryDocValuesField("field",b));
    doc.add(new StringField("id","" + docID,Field.Store.YES));
    try {
      w.addDocument(doc);
    }
 catch (    IllegalArgumentException iae) {
      if (iae.getMessage().indexOf("is too large") == -1) {
        throw iae;
      }
 else {
        assertFalse(codecAcceptsHugeBinaryValues("field"));
        w.rollback();
        d.close();
        return;
      }
    }
  }
  DirectoryReader r;
  try {
    r=w.getReader();
  }
 catch (  IllegalArgumentException iae) {
    if (iae.getMessage().indexOf("is too large") == -1) {
      throw iae;
    }
 else {
      assertFalse(codecAcceptsHugeBinaryValues("field"));
      w.rollback();
      d.close();
      return;
    }
  }
  w.close();
  AtomicReader ar=SlowCompositeReaderWrapper.wrap(r);
  BinaryDocValues s=FieldCache.DEFAULT.getTerms(ar,"field");
  for (int docID=0; docID < docBytes.size(); docID++) {
    StoredDocument doc=ar.document(docID);
    BytesRef bytes=new BytesRef();
    s.get(docID,bytes);
    byte[] expected=docBytes.get(Integer.parseInt(doc.get("id")));
    assertEquals(expected.length,bytes.length);
    assertEquals(new BytesRef(expected),bytes);
  }
  assertTrue(codecAcceptsHugeBinaryValues("field"));
  ar.close();
  d.close();
}
