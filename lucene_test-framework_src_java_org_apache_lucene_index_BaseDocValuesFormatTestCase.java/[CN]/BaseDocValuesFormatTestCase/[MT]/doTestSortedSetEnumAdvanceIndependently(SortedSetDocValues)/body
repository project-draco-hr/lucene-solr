{
  if (dv.getValueCount() < 2) {
    return;
  }
  List<BytesRef> terms=new ArrayList<>();
  TermsEnum te=dv.termsEnum();
  terms.add(BytesRef.deepCopyOf(te.next()));
  terms.add(BytesRef.deepCopyOf(te.next()));
  TermsEnum enum1=dv.termsEnum();
  TermsEnum enum2=dv.termsEnum();
  BytesRefBuilder term1=new BytesRefBuilder();
  BytesRefBuilder term2=new BytesRefBuilder();
  term1.copyBytes(enum1.next());
  term2.copyBytes(enum2.next());
  term1.copyBytes(enum1.next());
  assertEquals(term1.get(),enum1.term());
  assertEquals(term2.get(),enum2.term());
  enum1=dv.termsEnum();
  enum2=dv.termsEnum();
  term1=new BytesRefBuilder();
  term2=new BytesRefBuilder();
  term2.copyBytes(enum2.next());
  BytesRefBuilder seekTerm=new BytesRefBuilder();
  seekTerm.append(terms.get(0));
  seekTerm.append((byte)0);
  enum1.seekCeil(seekTerm.get());
  term1.copyBytes(enum1.term());
  assertEquals(term1.get(),enum1.term());
  assertEquals(term2.get(),enum2.term());
  enum1=dv.termsEnum();
  enum2=dv.termsEnum();
  term1=new BytesRefBuilder();
  term2=new BytesRefBuilder();
  term2.copyBytes(enum2.next());
  enum1.seekCeil(terms.get(1));
  term1.copyBytes(enum1.term());
  assertEquals(term1.get(),enum1.term());
  assertEquals(term2.get(),enum2.term());
  enum1=dv.termsEnum();
  enum2=dv.termsEnum();
  term1=new BytesRefBuilder();
  term2=new BytesRefBuilder();
  term2.copyBytes(enum2.next());
  final boolean found=enum1.seekExact(terms.get(1));
  assertTrue(found);
  term1.copyBytes(enum1.term());
  enum1=dv.termsEnum();
  enum2=dv.termsEnum();
  term1=new BytesRefBuilder();
  term2=new BytesRefBuilder();
  term2.copyBytes(enum2.next());
  enum1.seekExact(1);
  term1.copyBytes(enum1.term());
  assertEquals(term1.get(),enum1.term());
  assertEquals(term2.get(),enum2.term());
}
