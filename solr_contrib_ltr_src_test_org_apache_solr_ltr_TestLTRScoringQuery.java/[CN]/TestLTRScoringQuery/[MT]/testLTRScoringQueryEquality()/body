{
  final List<Feature> features=makeFeatures(new int[]{0,1,2});
  final List<Normalizer> norms=new ArrayList<Normalizer>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));
  final List<Feature> allFeatures=makeFeatures(new int[]{0,1,2,3,4,5,6,7,8,9});
  final Map<String,Object> modelParams=makeFeatureWeights(features);
  final LTRScoringModel algorithm1=TestLinearModel.createLinearModel("testModelName",features,norms,"testStoreName",allFeatures,modelParams);
  final LTRScoringQuery m0=new LTRScoringQuery(algorithm1);
  final HashMap<String,String[]> externalFeatureInfo=new HashMap<>();
  externalFeatureInfo.put("queryIntent",new String[]{"company"});
  externalFeatureInfo.put("user_query",new String[]{"abc"});
  final LTRScoringQuery m1=new LTRScoringQuery(algorithm1,externalFeatureInfo,false,null);
  final HashMap<String,String[]> externalFeatureInfo2=new HashMap<>();
  externalFeatureInfo2.put("user_query",new String[]{"abc"});
  externalFeatureInfo2.put("queryIntent",new String[]{"company"});
  int totalPoolThreads=10, numThreadsPerRequest=10;
  LTRThreadModule threadManager=new LTRThreadModule(totalPoolThreads,numThreadsPerRequest);
  final LTRScoringQuery m2=new LTRScoringQuery(algorithm1,externalFeatureInfo2,false,threadManager);
  assertEquals(m1,m2);
  assertEquals(m1.hashCode(),m2.hashCode());
  assertFalse(m1.equals(m0));
  assertFalse(m1.hashCode() == m0.hashCode());
  final LTRScoringModel algorithm2=TestLinearModel.createLinearModel("testModelName2",features,norms,"testStoreName",allFeatures,modelParams);
  final LTRScoringQuery m3=new LTRScoringQuery(algorithm2);
  assertFalse(m1.equals(m3));
  assertFalse(m1.hashCode() == m3.hashCode());
  final LTRScoringModel algorithm3=TestLinearModel.createLinearModel("testModelName",features,norms,"testStoreName3",allFeatures,modelParams);
  final LTRScoringQuery m4=new LTRScoringQuery(algorithm3);
  assertFalse(m1.equals(m4));
  assertFalse(m1.hashCode() == m4.hashCode());
}
