{
  int startsAt=0;
  jjnewStateCnt=62;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 62:
case 27:
          if ((0xfbfffcfaffffd9ffL & l) == 0L)           break;
        if (kind > 28)         kind=28;
      jjCheckNAddTwoStates(27,28);
    break;
case 0:
  if ((0xfbff54f8ffffd9ffL & l) != 0L) {
    if (kind > 28)     kind=28;
    jjCheckNAddTwoStates(27,28);
  }
 else   if ((0x100002600L & l) != 0L) {
    if (kind > 8)     kind=8;
  }
 else   if ((0x280200000000L & l) != 0L)   jjstateSet[jjnewStateCnt++]=15;
 else   if (curChar == 47)   jjstateSet[jjnewStateCnt++]=31;
 else   if (curChar == 34)   jjCheckNAddStates(0,2);
if ((0x7bff50f8ffffd9ffL & l) != 0L) {
  if (kind > 25)   kind=25;
  jjCheckNAddStates(3,7);
}
 else if (curChar == 42) {
  if (kind > 27)   kind=27;
}
 else if (curChar == 33) {
  if (kind > 15)   kind=15;
}
if (curChar == 38) jjstateSet[jjnewStateCnt++]=4;
break;
case 4:
if (curChar == 38 && kind > 13) kind=13;
break;
case 5:
if (curChar == 38) jjstateSet[jjnewStateCnt++]=4;
break;
case 13:
if (curChar == 33 && kind > 15) kind=15;
break;
case 14:
if ((0x280200000000L & l) != 0L) jjstateSet[jjnewStateCnt++]=15;
break;
case 15:
if ((0x100002600L & l) != 0L && kind > 18) kind=18;
break;
case 16:
if (curChar == 34) jjCheckNAddStates(0,2);
break;
case 17:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddStates(0,2);
break;
case 19:
jjCheckNAddStates(0,2);
break;
case 20:
if (curChar == 34 && kind > 24) kind=24;
break;
case 22:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 26) kind=26;
jjAddStates(8,9);
break;
case 23:
if (curChar == 46) jjCheckNAdd(24);
break;
case 24:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 26) kind=26;
jjCheckNAdd(24);
break;
case 25:
if (curChar == 42 && kind > 27) kind=27;
break;
case 26:
if ((0xfbff54f8ffffd9ffL & l) == 0L) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 29:
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 30:
if (curChar == 47) jjstateSet[jjnewStateCnt++]=31;
break;
case 31:
if ((0xffff7bffffffffffL & l) != 0L) jjCheckNAddStates(10,12);
break;
case 32:
if ((0xffff7fffffffffffL & l) != 0L) jjCheckNAddStates(10,12);
break;
case 33:
if (curChar == 47) jjCheckNAddStates(10,12);
break;
case 35:
if (curChar == 47 && kind > 29) kind=29;
break;
case 36:
if (curChar == 33) jjCheckNAddStates(13,15);
break;
case 37:
if ((0x100002600L & l) != 0L) jjCheckNAddTwoStates(37,38);
break;
case 38:
if ((0xdfffffffffffffffL & l) != 0L) jjCheckNAddStates(16,19);
break;
case 39:
if (curChar == 61) jjCheckNAddStates(20,25);
break;
case 40:
if (curChar == 34) jjCheckNAddStates(26,28);
break;
case 41:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddStates(26,28);
break;
case 43:
jjCheckNAddStates(26,28);
break;
case 44:
if (curChar == 34) jjCheckNAddStates(13,15);
break;
case 47:
if ((0xfffffdfefffff9ffL & l) == 0L) break;
if (kind > 32) kind=32;
jjstateSet[jjnewStateCnt++]=47;
break;
case 48:
if (curChar == 39) jjCheckNAddStates(29,31);
break;
case 49:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddStates(29,31);
break;
case 51:
jjCheckNAddStates(29,31);
break;
case 52:
if (curChar == 39) jjCheckNAddStates(13,15);
break;
case 53:
if ((0xfffffffeffffffffL & l) != 0L) jjCheckNAddStates(32,35);
break;
case 54:
if ((0x7bff50f8ffffd9ffL & l) == 0L) break;
if (kind > 25) kind=25;
jjCheckNAddStates(3,7);
break;
case 55:
if ((0x7bfff8faffffd9ffL & l) == 0L) break;
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 57:
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 58:
if ((0x7bfff8faffffd9ffL & l) != 0L) jjCheckNAddStates(36,38);
break;
case 60:
jjCheckNAddStates(36,38);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 62:
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
}
 else if (curChar == 92) jjCheckNAddTwoStates(29,29);
break;
case 0:
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 25) kind=25;
jjCheckNAddStates(3,7);
}
 else if (curChar == 92) jjCheckNAddStates(39,41);
 else if (curChar == 123) jjstateSet[jjnewStateCnt++]=36;
 else if (curChar == 126) {
if (kind > 26) kind=26;
jjstateSet[jjnewStateCnt++]=22;
}
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
}
if (curChar == 78) jjstateSet[jjnewStateCnt++]=11;
 else if (curChar == 124) jjstateSet[jjnewStateCnt++]=8;
 else if (curChar == 79) jjstateSet[jjnewStateCnt++]=6;
 else if (curChar == 65) jjstateSet[jjnewStateCnt++]=2;
break;
case 1:
if (curChar == 68 && kind > 13) kind=13;
break;
case 2:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=1;
break;
case 3:
if (curChar == 65) jjstateSet[jjnewStateCnt++]=2;
break;
case 6:
if (curChar == 82 && kind > 14) kind=14;
break;
case 7:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=6;
break;
case 8:
if (curChar == 124 && kind > 14) kind=14;
break;
case 9:
if (curChar == 124) jjstateSet[jjnewStateCnt++]=8;
break;
case 10:
if (curChar == 84 && kind > 15) kind=15;
break;
case 11:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=10;
break;
case 12:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=11;
break;
case 17:
if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(0,2);
break;
case 18:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=19;
break;
case 19:
jjCheckNAddStates(0,2);
break;
case 21:
if (curChar != 126) break;
if (kind > 26) kind=26;
jjstateSet[jjnewStateCnt++]=22;
break;
case 26:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 27:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 28:
if (curChar == 92) jjCheckNAddTwoStates(29,29);
break;
case 29:
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 31:
case 32:
jjCheckNAddStates(10,12);
break;
case 34:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=33;
break;
case 38:
if ((0xdfffffffffffffffL & l) != 0L) jjCheckNAddStates(16,19);
break;
case 41:
if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(26,28);
break;
case 42:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=43;
break;
case 43:
jjCheckNAddStates(26,28);
break;
case 45:
if (curChar != 125) break;
if (kind > 32) kind=32;
jjCheckNAddTwoStates(46,47);
break;
case 46:
if (curChar == 123) jjstateSet[jjnewStateCnt++]=36;
break;
case 47:
if ((0xf7ffffffbfffffffL & l) == 0L) break;
if (kind > 32) kind=32;
jjCheckNAdd(47);
break;
case 49:
if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(29,31);
break;
case 50:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=51;
break;
case 51:
jjCheckNAddStates(29,31);
break;
case 53:
if ((0xdfffffffffffffffL & l) != 0L) jjCheckNAddStates(32,35);
break;
case 54:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 25) kind=25;
jjCheckNAddStates(3,7);
break;
case 55:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 56:
if (curChar == 92) jjCheckNAddTwoStates(57,57);
break;
case 57:
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 58:
if ((0x97ffffff87ffffffL & l) != 0L) jjCheckNAddStates(36,38);
break;
case 59:
if (curChar == 92) jjCheckNAddTwoStates(60,60);
break;
case 60:
jjCheckNAddStates(36,38);
break;
case 61:
if (curChar == 92) jjCheckNAddStates(39,41);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 62:
case 27:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 0:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
if (kind > 8) kind=8;
}
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) {
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
}
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) {
if (kind > 25) kind=25;
jjCheckNAddStates(3,7);
}
break;
case 15:
if (jjCanMove_0(hiByte,i1,i2,l1,l2) && kind > 18) kind=18;
break;
case 17:
case 19:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(0,2);
break;
case 26:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 29:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 28) kind=28;
jjCheckNAddTwoStates(27,28);
break;
case 31:
case 32:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(10,12);
break;
case 37:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(37,38);
break;
case 38:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(16,19);
break;
case 41:
case 43:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(26,28);
break;
case 47:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 32) kind=32;
jjstateSet[jjnewStateCnt++]=47;
break;
case 49:
case 51:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(29,31);
break;
case 53:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(32,35);
break;
case 54:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 25) kind=25;
jjCheckNAddStates(3,7);
break;
case 55:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 57:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 25) kind=25;
jjCheckNAddTwoStates(55,56);
break;
case 58:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(36,38);
break;
case 60:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(36,38);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=62 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
