{
  HashMap<String,String> args=new HashMap<String,String>();
  args.put(QueryParsing.DEFTYPE,ComplexPhraseQParserPlugin.NAME);
  args.put(CommonParams.FL,"id");
  TestHarness.LocalRequestFactory sumLRF=h.getRequestFactory("standard",0,200,args);
  assertU(adoc("name","john smith","id","1"));
  assertU(adoc("name","johathon smith","id","2"));
  assertU(adoc("name","john percival smith","id","3"));
  assertU(commit());
  assertU(optimize());
  assertQ("Simple multi-term still works",sumLRF.makeRequest("name:\"john smith\""),"//doc[./int[@name='id']='1']","//result[@numFound='1']");
  assertQ(req("q","{!complexphrase} name:\"john smith\""),"//doc[./int[@name='id']='1']","//result[@numFound='1']");
  assertQ("wildcards and fuzzies are OK in phrases",sumLRF.makeRequest("name:\"j* smyth~\""),"//doc[./int[@name='id']='1']","//doc[./int[@name='id']='2']","//result[@numFound='2']");
  assertQ("boolean logic works",sumLRF.makeRequest("name:\"(jo* -john) smith\""),"//doc[./int[@name='id']='2']","//result[@numFound='1']");
  assertQ("position logic works",sumLRF.makeRequest("name:\"jo*  smith\"~2"),"//doc[./int[@name='id']='1']","//doc[./int[@name='id']='2']","//doc[./int[@name='id']='3']","//result[@numFound='3']");
  assertQ("range queries supported",sumLRF.makeRequest("name:\"jo* [sma TO smz]\""),"//doc[./int[@name='id']='1']","//doc[./int[@name='id']='2']","//result[@numFound='2']");
  assertQ("Simple single-term still works",sumLRF.makeRequest("name:\"john\""),"//doc[./int[@name='id']='1']","//doc[./int[@name='id']='3']","//result[@numFound='2']");
  assertQ("OR inside phrase works",sumLRF.makeRequest("name:\"(john johathon) smith\""),"//doc[./int[@name='id']='1']","//doc[./int[@name='id']='2']","//result[@numFound='2']");
}
