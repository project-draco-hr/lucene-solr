{
  HashMap<String,String> args=new HashMap<String,String>();
  args.put(QueryParsing.DEFTYPE,ComplexPhraseQParserPlugin.NAME);
  args.put(CommonParams.FL,"id");
  args.put(HighlightParams.HIGHLIGHT,Boolean.TRUE.toString());
  args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER,Boolean.TRUE.toString());
  args.put(HighlightParams.FIELD_MATCH,Boolean.FALSE.toString());
  args.put(HighlightParams.FRAGSIZE,String.valueOf(0));
  args.put(HighlightParams.FIELDS,"name");
  TestHarness.LocalRequestFactory sumLRF=h.getRequestFactory("standard",0,200,args);
  assertU(adoc("name","john smith smith john","id","1"));
  assertU(adoc("name","johathon smith smith johathon","id","2"));
  assertU(adoc("name","john percival smith","id","3"));
  assertU(commit());
  assertU(optimize());
  assertQ("range queries supported",sumLRF.makeRequest("name:[sma TO smz]"),"//doc[./str[@name='id']='1']","//doc[./str[@name='id']='2']","//doc[./str[@name='id']='3']","//result[@numFound='3']");
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("PhraseHighlighter=true Test",sumLRF.makeRequest("name:\"(john johathon) smith\""),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> smith john']","//lst[@name='highlighting']/lst[@name='2']","//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> smith johathon']");
  args.put(HighlightParams.USE_PHRASE_HIGHLIGHTER,Boolean.FALSE.toString());
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("PhraseHighlighter=false Test",sumLRF.makeRequest("name:\"(john johathon) smith\""),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> <em>smith</em> <em>smith</em> <em>john</em>']","//lst[@name='highlighting']/lst[@name='2']","//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> <em>smith</em> <em>smith</em> <em>johathon</em>']");
}
