{
  NamedList list=super.getStatistics();
  if (core != null) {
    list.add("indexSize",readableSize(getIndexSize()));
    long[] versionGen=getIndexVersion();
    list.add("indexVersion",versionGen[0]);
    list.add(GENERATION,versionGen[1]);
    list.add("indexPath",core.getIndexDir());
    list.add("isMaster",String.valueOf(isMaster));
    list.add("isSlave",String.valueOf(isSlave));
    SnapPuller snapPuller=tempSnapPuller;
    if (snapPuller != null) {
      list.add(MASTER_URL,snapPuller.getMasterUrl());
      if (snapPuller.getPollInterval() != null) {
        list.add(SnapPuller.POLL_INTERVAL,snapPuller.getPollInterval());
      }
      list.add("isPollingDisabled",String.valueOf(isPollingDisabled()));
      list.add("isReplicating",String.valueOf(isReplicating()));
      long elapsed=getTimeElapsed(snapPuller);
      long val=SnapPuller.getTotalBytesDownloaded(snapPuller);
      if (elapsed > 0) {
        list.add("timeElapsed",elapsed);
        list.add("bytesDownloaded",val);
        list.add("downloadSpeed",val / elapsed);
      }
      Properties props=loadReplicationProperties();
      addVal(list,SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN,props,Long.class);
      addVal(list,SnapPuller.INDEX_REPLICATED_AT,props,Date.class);
      addVal(list,SnapPuller.CONF_FILES_REPLICATED_AT,props,Date.class);
      addVal(list,SnapPuller.REPLICATION_FAILED_AT,props,Date.class);
      addVal(list,SnapPuller.TIMES_FAILED,props,Integer.class);
      addVal(list,SnapPuller.TIMES_INDEX_REPLICATED,props,Integer.class);
      addVal(list,SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED,props,Long.class);
      addVal(list,SnapPuller.TIMES_CONFIG_REPLICATED,props,Integer.class);
      addVal(list,SnapPuller.CONF_FILES_REPLICATED,props,String.class);
    }
    if (isMaster) {
      if (includeConfFiles != null)       list.add("confFilesToReplicate",includeConfFiles);
      list.add(REPLICATE_AFTER,getReplicateAfterStrings());
      list.add("replicationEnabled",String.valueOf(replicationEnabled.get()));
    }
  }
  return list;
}
