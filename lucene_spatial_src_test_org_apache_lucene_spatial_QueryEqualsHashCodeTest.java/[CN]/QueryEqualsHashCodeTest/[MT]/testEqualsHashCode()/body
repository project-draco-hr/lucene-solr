{
  final SpatialPrefixTree grid=new QuadPrefixTree(ctx,10);
  final SpatialArgs args1=makeArgs1();
  final SpatialArgs args2=makeArgs2();
  Collection<ObjGenerator> generators=new ArrayList<ObjGenerator>();
  generators.add(new ObjGenerator(){
    @Override public Object gen(    SpatialArgs args){
      return new RecursivePrefixTreeStrategy(grid,"recursive_quad").makeQuery(args);
    }
  }
);
  generators.add(new ObjGenerator(){
    @Override public Object gen(    SpatialArgs args){
      return new TermQueryPrefixTreeStrategy(grid,"termquery_quad").makeQuery(args);
    }
  }
);
  generators.add(new ObjGenerator(){
    @Override public Object gen(    SpatialArgs args){
      return new PointVectorStrategy(ctx,"pointvector").makeQuery(args);
    }
  }
);
  generators.add(new ObjGenerator(){
    @Override public Object gen(    SpatialArgs args){
      return new BBoxStrategy(ctx,"bbox").makeQuery(args);
    }
  }
);
  for (  ObjGenerator generator : generators) {
    testStratQueryEqualsHashcode(args1,args2,generator);
  }
}
