{
  parseParams(FacetParams.FACET_RANGE,field);
  Map<String,Object> cmd=new HashMap<String,Object>(5);
  Map<String,Object> type=new HashMap<String,Object>(1);
  type.put("range",cmd);
  String f=key;
  cmd.put("field",facetValue);
  cmd.put("start",required.getFieldParam(f,FacetParams.FACET_RANGE_START));
  cmd.put("end",required.getFieldParam(f,FacetParams.FACET_RANGE_END));
  cmd.put("gap",required.getFieldParam(f,FacetParams.FACET_RANGE_GAP));
  String[] p=params.getFieldParams(f,FacetParams.FACET_RANGE_OTHER);
  if (p != null)   cmd.put("other",p.length == 1 ? p[0] : Arrays.asList(p));
  p=params.getFieldParams(f,FacetParams.FACET_RANGE_INCLUDE);
  if (p != null)   cmd.put("include",p.length == 1 ? p[0] : Arrays.asList(p));
  final int mincount=params.getFieldInt(f,FacetParams.FACET_MINCOUNT,0);
  cmd.put("mincount",mincount);
  boolean hardend=params.getFieldBool(f,FacetParams.FACET_RANGE_HARD_END,false);
  if (hardend)   cmd.put("hardend",hardend);
  addSub(key,type);
  handleSubs(cmd);
}
