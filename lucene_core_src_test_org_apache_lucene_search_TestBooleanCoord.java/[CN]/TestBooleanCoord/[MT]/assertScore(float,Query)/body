{
  Weight weight=searcher.createNormalizedWeight(query,true);
  Scorer scorer=weight.scorer(reader.leaves().get(0));
  assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);
  assertEquals(0,scorer.nextDoc());
  assertEquals(expected,scorer.score(),0.0001f);
  final AtomicBoolean seen=new AtomicBoolean(false);
  BulkScorer bulkScorer=weight.bulkScorer(reader.leaves().get(0));
  assertNotNull(bulkScorer);
  bulkScorer.score(new LeafCollector(){
    Scorer scorer;
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      assertFalse(seen.get());
      assertEquals(0,doc);
      assertEquals(expected,scorer.score(),0.0001f);
      seen.set(true);
    }
  }
,null,0,1);
  assertTrue(seen.get());
  Explanation expl=weight.explain(reader.leaves().get(0),0);
  assertEquals(expected,expl.getValue(),0.0001f);
}
