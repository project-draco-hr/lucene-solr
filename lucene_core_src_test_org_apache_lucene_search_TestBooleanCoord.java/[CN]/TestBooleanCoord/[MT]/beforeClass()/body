{
  dir=newDirectory();
  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(null));
  Document doc=new Document();
  doc.add(new StringField("field","A",Field.Store.NO));
  doc.add(new StringField("field","B",Field.Store.NO));
  doc.add(new StringField("field","C",Field.Store.NO));
  iw.addDocument(doc);
  doc=new Document();
  doc.add(new StringField("field","1",Field.Store.NO));
  doc.add(new StringField("field","2",Field.Store.NO));
  doc.add(new StringField("field","3",Field.Store.NO));
  iw.addDocument(doc);
  iw.close();
  reader=DirectoryReader.open(dir);
  searcher=new IndexSearcher(reader);
  searcher.setSimilarity(new Similarity(){
    @Override public float coord(    int overlap,    int maxOverlap){
      return overlap / (float)(maxOverlap + 1);
    }
    @Override public long computeNorm(    FieldInvertState state){
      throw new AssertionError();
    }
    @Override public SimWeight computeWeight(    CollectionStatistics collectionStats,    TermStatistics... termStats){
      return new SimWeight(){
        @Override public float getValueForNormalization(){
          return 1f;
        }
        @Override public void normalize(        float queryNorm,        float topLevelBoost){
        }
      }
;
    }
    @Override public SimScorer simScorer(    SimWeight weight,    LeafReaderContext context) throws IOException {
      return new SimScorer(){
        @Override public float score(        int doc,        float freq){
          return 1;
        }
        @Override public float computeSlopFactor(        int distance){
          throw new AssertionError();
        }
        @Override public float computePayloadFactor(        int doc,        int start,        int end,        BytesRef payload){
          throw new AssertionError();
        }
      }
;
    }
  }
);
}
