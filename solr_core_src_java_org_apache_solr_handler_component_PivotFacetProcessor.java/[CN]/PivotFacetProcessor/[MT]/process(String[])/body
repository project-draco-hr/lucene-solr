{
  if (!rb.doFacets || pivots == null)   return null;
  StatsInfo statsInfo=rb._statsInfo;
  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<>();
  for (  String pivotList : pivots) {
    try {
      this.parseParams(FacetParams.FACET_PIVOT,pivotList);
    }
 catch (    SyntaxError e) {
      throw new SolrException(ErrorCode.BAD_REQUEST,e);
    }
    List<String> pivotFields=StrUtils.splitSmart(facetValue,",",true);
    if (pivotFields.size() < 1) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Pivot Facet needs at least one field name: " + pivotList);
    }
 else {
      SolrIndexSearcher searcher=rb.req.getSearcher();
      for (      String fieldName : pivotFields) {
        SchemaField sfield=searcher.getSchema().getField(fieldName);
        if (sfield == null) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"\"" + fieldName + "\" is not a valid field name in pivot: "+ pivotList);
        }
      }
    }
    String refineKey=null;
    List<StatsField> statsFields=Collections.emptyList();
    if (null != localParams) {
      refineKey=localParams.get(PivotFacet.REFINE_PARAM);
      String statsLocalParam=localParams.get(StatsParams.STATS);
      if (null != refineKey && null != statsLocalParam && null == statsInfo) {
        statsInfo=new StatsInfo(rb);
      }
      statsFields=getTaggedStatsFields(statsInfo,statsLocalParam);
    }
    if (null != refineKey) {
      String[] refinementValuesByField=params.getParams(PivotFacet.REFINE_PARAM + refineKey);
      for (      String refinements : refinementValuesByField) {
        pivotResponse.addAll(processSingle(pivotFields,refinements,statsFields));
      }
    }
 else {
      pivotResponse.addAll(processSingle(pivotFields,null,statsFields));
    }
  }
  return pivotResponse;
}
