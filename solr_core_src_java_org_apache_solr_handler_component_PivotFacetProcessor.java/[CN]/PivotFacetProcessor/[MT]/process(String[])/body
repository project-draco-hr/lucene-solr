{
  if (!rb.doFacets || pivots == null)   return null;
  StatsInfo statsInfo=rb._statsInfo;
  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<>();
  for (  String pivotList : pivots) {
    final ParsedParams parsed;
    try {
      parsed=this.parseParams(FacetParams.FACET_PIVOT,pivotList);
    }
 catch (    SyntaxError e) {
      throw new SolrException(ErrorCode.BAD_REQUEST,e);
    }
    List<String> pivotFields=StrUtils.splitSmart(parsed.facetValue,",",true);
    if (pivotFields.size() < 1) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Pivot Facet needs at least one field name: " + pivotList);
    }
 else {
      SolrIndexSearcher searcher=rb.req.getSearcher();
      for (      String fieldName : pivotFields) {
        SchemaField sfield=searcher.getSchema().getField(fieldName);
        if (sfield == null) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"\"" + fieldName + "\" is not a valid field name in pivot: "+ pivotList);
        }
      }
    }
    String refineKey=null;
    List<StatsField> statsFields=Collections.emptyList();
    List<FacetComponent.FacetBase> facetQueries=Collections.emptyList();
    List<RangeFacetRequest> facetRanges=Collections.emptyList();
    if (null != parsed.localParams) {
      refineKey=parsed.localParams.get(PivotFacet.REFINE_PARAM);
      String statsLocalParam=parsed.localParams.get(StatsParams.STATS);
      if (null != refineKey && null != statsLocalParam && null == statsInfo) {
        statsInfo=new StatsInfo(rb);
      }
      statsFields=getTaggedStatsFields(statsInfo,statsLocalParam);
      try {
        FacetComponent.FacetContext facetContext=FacetComponent.FacetContext.getFacetContext(req);
        String taggedQueries=parsed.localParams.get(QUERY);
        if (StringUtils.isEmpty(taggedQueries)) {
          facetQueries=Collections.emptyList();
        }
 else {
          List<String> localParamValue=StrUtils.splitSmart(taggedQueries,',');
          if (localParamValue.size() > 1) {
            String msg=QUERY + " local param of " + FacetParams.FACET_PIVOT+ "may not include tags separated by a comma - please use a common tag on all "+ FacetParams.FACET_QUERY+ " params you wish to compute under this pivot";
            throw new SolrException(ErrorCode.BAD_REQUEST,msg);
          }
          taggedQueries=localParamValue.get(0);
          facetQueries=facetContext.getQueryFacetsForTag(taggedQueries);
        }
        String taggedRanges=parsed.localParams.get(RANGE);
        if (StringUtils.isEmpty(taggedRanges)) {
          facetRanges=Collections.emptyList();
        }
 else {
          List<String> localParamValue=StrUtils.splitSmart(taggedRanges,',');
          if (localParamValue.size() > 1) {
            String msg=RANGE + " local param of " + FacetParams.FACET_PIVOT+ "may not include tags separated by a comma - please use a common tag on all "+ FacetParams.FACET_RANGE+ " params you wish to compute under this pivot";
            throw new SolrException(ErrorCode.BAD_REQUEST,msg);
          }
          taggedRanges=localParamValue.get(0);
          facetRanges=facetContext.getRangeFacetRequestsForTag(taggedRanges);
        }
      }
 catch (      IllegalStateException e) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"Faceting context not set, cannot calculate pivot values");
      }
    }
    if (null != refineKey) {
      String[] refinementValuesByField=params.getParams(PivotFacet.REFINE_PARAM + refineKey);
      for (      String refinements : refinementValuesByField) {
        pivotResponse.addAll(processSingle(pivotFields,refinements,statsFields,parsed,facetQueries,facetRanges));
      }
    }
 else {
      pivotResponse.addAll(processSingle(pivotFields,null,statsFields,parsed,facetQueries,facetRanges));
    }
  }
  return pivotResponse;
}
