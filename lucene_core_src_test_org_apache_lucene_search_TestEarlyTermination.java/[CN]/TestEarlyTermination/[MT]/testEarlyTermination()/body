{
  final int iters=atLeast(5);
  final IndexReader reader=writer.getReader();
  final IndexSearcher searcher=new IndexSearcher(reader);
  for (int i=0; i < iters; ++i) {
    final Collector collector=new Collector(){
      final boolean outOfOrder=random().nextBoolean();
      boolean collectionTerminated=true;
      @Override public void setScorer(      Scorer scorer) throws IOException {
      }
      @Override public void collect(      int doc) throws IOException {
        assertFalse(collectionTerminated);
        if (rarely()) {
          collectionTerminated=true;
          throw new CollectionTerminatedException();
        }
      }
      @Override public void setNextReader(      AtomicReaderContext context) throws IOException {
        collectionTerminated=false;
      }
      @Override public boolean acceptsDocsOutOfOrder(){
        return outOfOrder;
      }
    }
;
    searcher.search(new MatchAllDocsQuery(),collector);
  }
  reader.close();
}
