{
  fieldState.reset(docState.doc.getBoost());
  final boolean doInvert=consumer.start(fields,count);
  for (int i=0; i < count; i++) {
    final Fieldable field=fields[i];
    if (field.isIndexed() && doInvert) {
      if (i > 0)       fieldState.position+=docState.analyzer == null ? 0 : docState.analyzer.getPositionIncrementGap(fieldInfo.name);
      if (!field.isTokenized()) {
        String stringValue=field.stringValue();
        final int valueLength=stringValue.length();
        parent.singleToken.reinit(stringValue,0,valueLength);
        fieldState.attributeSource=parent.singleToken;
        consumer.start(field);
        boolean success=false;
        try {
          consumer.add();
          success=true;
        }
  finally {
          if (!success) {
            docState.docWriter.setAborting();
          }
        }
        fieldState.offset+=valueLength;
        fieldState.length++;
        fieldState.position++;
      }
 else {
        final TokenStream stream;
        final TokenStream streamValue=field.tokenStreamValue();
        if (streamValue != null)         stream=streamValue;
 else {
          final Reader reader;
          final Reader readerValue=field.readerValue();
          if (readerValue != null)           reader=readerValue;
 else {
            String stringValue=field.stringValue();
            if (stringValue == null) {
              throw new IllegalArgumentException("field must have either TokenStream, String or Reader value");
            }
            parent.stringReader.init(stringValue);
            reader=parent.stringReader;
          }
          stream=docState.analyzer.reusableTokenStream(fieldInfo.name,reader);
        }
        stream.reset();
        try {
          boolean hasMoreTokens=stream.incrementToken();
          fieldState.attributeSource=stream;
          OffsetAttribute offsetAttribute=fieldState.attributeSource.addAttribute(OffsetAttribute.class);
          PositionIncrementAttribute posIncrAttribute=fieldState.attributeSource.addAttribute(PositionIncrementAttribute.class);
          consumer.start(field);
          for (; ; ) {
            if (!hasMoreTokens)             break;
            final int posIncr=posIncrAttribute.getPositionIncrement();
            fieldState.position+=posIncr;
            if (fieldState.position > 0) {
              fieldState.position--;
            }
            if (posIncr == 0)             fieldState.numOverlap++;
            boolean success=false;
            try {
              consumer.add();
              success=true;
            }
  finally {
              if (!success) {
                docState.docWriter.setAborting();
              }
            }
            fieldState.length++;
            fieldState.position++;
            hasMoreTokens=stream.incrementToken();
          }
          stream.end();
          fieldState.offset+=offsetAttribute.endOffset();
        }
  finally {
          stream.close();
        }
      }
      fieldState.offset+=docState.analyzer == null ? 0 : docState.analyzer.getOffsetGap(field);
      fieldState.boost*=field.getBoost();
    }
    fields[i]=null;
  }
  consumer.finish();
  endConsumer.finish();
}
