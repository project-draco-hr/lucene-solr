{
  final int maxLength=1000;
  UnifiedHighlighter uh=new UnifiedHighlighter(null,new MockAnalyzer(random())){
    @Override protected Map<String,Object[]> highlightFieldsAsObjects(    String[] fieldsIn,    Query query,    int[] docIdsIn,    int[] maxPassagesIn) throws IOException {
      return super.highlightFieldsAsObjects(fieldsIn,query,docIdsIn,maxPassagesIn);
    }
    @Override protected OffsetSource getOffsetSource(    String field){
      return super.getOffsetSource(field);
    }
    @Override protected BreakIterator getBreakIterator(    String field){
      return super.getBreakIterator(field);
    }
    @Override protected PassageScorer getScorer(    String field){
      return super.getScorer(field);
    }
    @Override protected PassageFormatter getFormatter(    String field){
      return super.getFormatter(field);
    }
    @Override public Analyzer getIndexAnalyzer(){
      return super.getIndexAnalyzer();
    }
    @Override public IndexSearcher getIndexSearcher(){
      return super.getIndexSearcher();
    }
    @Override protected int getMaxNoHighlightPassages(    String field){
      return super.getMaxNoHighlightPassages(field);
    }
    @Override protected Boolean requiresRewrite(    SpanQuery spanQuery){
      return super.requiresRewrite(spanQuery);
    }
    @Override protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(    String[] fields){
      return super.newLimitedStoredFieldsVisitor(fields);
    }
    @Override protected List<CharSequence[]> loadFieldValues(    String[] fields,    DocIdSetIterator docIter,    int cacheCharsThreshold) throws IOException {
      return super.loadFieldValues(fields,docIter,cacheCharsThreshold);
    }
    @Override protected FieldHighlighter getFieldHighlighter(    String field,    Query query,    SortedSet<Term> allTerms,    int maxPassages){
      return super.getFieldHighlighter(field,query,allTerms,maxPassages);
    }
    @Override protected FieldOffsetStrategy getOffsetStrategy(    String field,    Query query,    SortedSet<Term> allTerms){
      return super.getOffsetStrategy(field,query,allTerms);
    }
    @Override public int getMaxLength(){
      return maxLength;
    }
  }
;
  assertEquals(uh.getMaxLength(),maxLength);
}
