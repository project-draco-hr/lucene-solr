{
  Integer numShards=2;
  List<Object> urls=new ArrayList<Object>();
  urls.add("shard1");
  urls.add("shard2");
  urls.add("shard3");
  urls.add("shard4");
  urls.add("shard5");
  urls.add("shard6");
  List<List<String>> shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),2,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(3,u.size());
  }
  numShards=1;
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),1,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(6,u.size());
  }
  numShards=6;
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),6,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(1,u.size());
  }
  numShards=3;
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),3,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(2,u.size());
  }
  numShards=null;
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),6,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(1,u.size());
  }
  numShards=null;
  urls=new ArrayList<Object>();
  urls.add("shard1");
  urls.add("shard2");
  urls.add("shard3");
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),3,shardUrls.size());
  for (  List<String> u : shardUrls) {
    assertEquals(1,u.size());
  }
  numShards=2;
  urls=new ArrayList<Object>();
  urls.add("shard1");
  urls.add("shard2");
  urls.add("shard3");
  urls.add("shard4");
  urls.add("shard5");
  shardUrls=MapReduceIndexerTool.buildShardUrls(urls,numShards);
  assertEquals(shardUrls.toString(),2,shardUrls.size());
  Set<Integer> counts=new HashSet<Integer>();
  counts.add(shardUrls.get(0).size());
  counts.add(shardUrls.get(1).size());
  assertTrue(counts.contains(2));
  assertTrue(counts.contains(3));
}
