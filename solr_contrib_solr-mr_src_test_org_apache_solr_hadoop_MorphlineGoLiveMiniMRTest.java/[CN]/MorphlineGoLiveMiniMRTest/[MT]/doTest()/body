{
  waitForRecoveriesToFinish(false);
  FileSystem fs=dfsCluster.getFileSystem();
  Path inDir=fs.makeQualified(new Path("/user/testing/testMapperReducer/input"));
  fs.delete(inDir,true);
  String DATADIR="/user/testing/testMapperReducer/data";
  Path dataDir=fs.makeQualified(new Path(DATADIR));
  fs.delete(dataDir,true);
  Path outDir=fs.makeQualified(new Path("/user/testing/testMapperReducer/output"));
  fs.delete(outDir,true);
  assertTrue(fs.mkdirs(inDir));
  Path INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile1);
  JobConf jobConf=getJobConf();
  jobConf.setMaxMapAttempts(1);
  jobConf.setMaxReduceAttempts(1);
  jobConf.setJar(SEARCH_ARCHIVES_JAR);
  jobConf.setBoolean("ignoreTikaException",false);
  MapReduceIndexerTool tool;
  int res;
  QueryResponse results;
  HttpSolrServer server=new HttpSolrServer(cloudJettys.get(0).url);
  String[] args=new String[]{};
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--log4j=" + ExternalPaths.SOURCE_HOME + "/core/src/test-files/log4j.properties","--mappers=3",++numRuns % 2 == 0 ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--go-live-threads",Integer.toString(random().nextInt(15) + 1),"--verbose","--go-live"};
  args=prependInitialArgs(args);
  List<String> argList=new ArrayList<String>();
  getShardUrlArgs(argList);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=server.query(new SolrQuery("*:*"));
    assertEquals(20,results.getResults().getNumFound());
  }
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(inDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile2);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--mappers=3","--verbose","--go-live",++numRuns % 2 == 0 ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--go-live-threads",Integer.toString(random().nextInt(15) + 1)};
  args=prependInitialArgs(args);
  argList=new ArrayList<String>();
  getShardUrlArgs(argList);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=server.query(new SolrQuery("*:*"));
    assertEquals(22,results.getResults().getNumFound());
  }
  String collection="collection1";
  if (random().nextBoolean()) {
    createAlias("updatealias","collection1");
    collection="updatealias";
  }
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  args=new String[]{"--output-dir=" + outDir.toString(),"--mappers=3","--reducers=6","--verbose","--go-live",++numRuns % 2 == 0 ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--zk-host",zkServer.getZkAddress(),"--collection",collection};
  args=prependInitialArgs(args);
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=server.query(new SolrQuery("*:*"));
    assertEquals(2126,results.getResults().getNumFound());
  }
  server.shutdown();
  String replicatedCollection="replicated_collection";
  createCollection(replicatedCollection,2,3,2);
  waitForRecoveriesToFinish(false);
  cloudClient.setDefaultCollection(replicatedCollection);
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(dataDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--mappers=3","--reducers=6","--verbose","--go-live","--zk-host",zkServer.getZkAddress(),"--collection",replicatedCollection,dataDir.toString()};
  args=prependInitialArgs(args);
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=cloudClient.query(new SolrQuery("*:*"));
    assertEquals(2104,results.getResults().getNumFound());
    checkConsistency(replicatedCollection);
  }
  cloudClient.deleteByQuery("*:*");
  cloudClient.commit();
  fs.delete(inDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(dataDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--shards","2","--mappers=3","--verbose","--go-live","--go-live-threads",Integer.toString(random().nextInt(15) + 1),dataDir.toString()};
  args=prependInitialArgs(args);
  argList=new ArrayList<String>();
  getShardUrlArgs(argList,replicatedCollection);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    checkConsistency(replicatedCollection);
    results=cloudClient.query(new SolrQuery("*:*"));
    assertEquals(2104,results.getResults().getNumFound());
  }
}
