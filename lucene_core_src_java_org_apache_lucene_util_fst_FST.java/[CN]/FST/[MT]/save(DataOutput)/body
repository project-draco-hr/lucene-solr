{
  if (startNode == -1) {
    throw new IllegalStateException("call finish first");
  }
  if (nodeAddress != null) {
    throw new IllegalStateException("cannot save an FST pre-packed FST; it must first be packed");
  }
  if (packed && !(nodeRefToAddress instanceof PackedInts.Mutable)) {
    throw new IllegalStateException("cannot save a FST which has been loaded from disk ");
  }
  CodecUtil.writeHeader(out,FILE_FORMAT_NAME,VERSION_CURRENT);
  if (packed) {
    out.writeByte((byte)1);
  }
 else {
    out.writeByte((byte)0);
  }
  if (emptyOutput != null) {
    out.writeByte((byte)1);
    RAMOutputStream ros=new RAMOutputStream();
    outputs.writeFinalOutput(emptyOutput,ros);
    byte[] emptyOutputBytes=new byte[(int)ros.getFilePointer()];
    ros.writeTo(emptyOutputBytes,0);
    if (!packed) {
      final int stopAt=emptyOutputBytes.length / 2;
      int upto=0;
      while (upto < stopAt) {
        final byte b=emptyOutputBytes[upto];
        emptyOutputBytes[upto]=emptyOutputBytes[emptyOutputBytes.length - upto - 1];
        emptyOutputBytes[emptyOutputBytes.length - upto - 1]=b;
        upto++;
      }
    }
    out.writeVInt(emptyOutputBytes.length);
    out.writeBytes(emptyOutputBytes,0,emptyOutputBytes.length);
  }
 else {
    out.writeByte((byte)0);
  }
  final byte t;
  if (inputType == INPUT_TYPE.BYTE1) {
    t=0;
  }
 else   if (inputType == INPUT_TYPE.BYTE2) {
    t=1;
  }
 else {
    t=2;
  }
  out.writeByte(t);
  if (packed) {
    ((PackedInts.Mutable)nodeRefToAddress).save(out);
  }
  out.writeVLong(startNode);
  out.writeVLong(nodeCount);
  out.writeVLong(arcCount);
  out.writeVLong(arcWithOutputCount);
  long numBytes=bytes.getPosition();
  out.writeVLong(numBytes);
  bytes.writeTo(out);
}
