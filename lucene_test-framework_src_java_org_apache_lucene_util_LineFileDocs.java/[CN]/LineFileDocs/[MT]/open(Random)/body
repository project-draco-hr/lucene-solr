{
  InputStream is=getClass().getResourceAsStream(path);
  boolean needSkip=true;
  long size=0L;
  if (is == null) {
    File file=new File(path);
    if (path.endsWith(".gz")) {
      is=new FileInputStream(file);
    }
 else {
      size=file.length();
      final long seekTo=randomSeekPos(random,size);
      final FileChannel channel=new RandomAccessFile(path,"r").getChannel();
      if (LuceneTestCase.VERBOSE) {
        System.out.println("TEST: LineFileDocs: file seek to fp=" + seekTo + " on open");
      }
      channel.position(seekTo);
      is=Channels.newInputStream(channel);
      needSkip=false;
    }
  }
 else {
    size=is.available();
  }
  if (path.endsWith(".gz")) {
    is=new GZIPInputStream(is);
    size*=2.8;
  }
  if (needSkip) {
    final long skipTo=randomSeekPos(random,size);
    if (LuceneTestCase.VERBOSE) {
      System.out.println("TEST: LineFileDocs: stream skip to fp=" + skipTo + " on open");
    }
    is.skip(skipTo);
  }
  int b;
  do {
    b=is.read();
  }
 while (b >= 0 && b != 13 && b != 10);
  CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);
  reader=new BufferedReader(new InputStreamReader(is,decoder),BUFFER_SIZE);
  reader.readLine();
}
