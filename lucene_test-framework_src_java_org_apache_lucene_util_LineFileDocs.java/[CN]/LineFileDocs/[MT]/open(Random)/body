{
  InputStream is=getClass().getResourceAsStream(path);
  boolean needSkip=true;
  long size=0L, seekTo=0L;
  if (is == null) {
    Path file=Paths.get(path);
    size=Files.size(file);
    if (path.endsWith(".gz")) {
      is=Files.newInputStream(file);
    }
 else {
      seekTo=randomSeekPos(random,size);
      final SeekableByteChannel channel=Files.newByteChannel(file);
      if (LuceneTestCase.VERBOSE) {
        System.out.println("TEST: LineFileDocs: file seek to fp=" + seekTo + " on open");
      }
      channel.position(seekTo);
      is=Channels.newInputStream(channel);
      needSkip=false;
    }
  }
 else {
    size=is.available();
  }
  if (path.endsWith(".gz")) {
    is=new GZIPInputStream(is);
    size*=2.8;
  }
  if (needSkip) {
    seekTo=randomSeekPos(random,size);
    if (LuceneTestCase.VERBOSE) {
      System.out.println("TEST: LineFileDocs: stream skip to fp=" + seekTo + " on open");
    }
    is.skip(seekTo);
  }
  if (seekTo > 0L) {
    int b;
    do {
      b=is.read();
    }
 while (b >= 0 && b != 13 && b != 10);
  }
  CharsetDecoder decoder=StandardCharsets.UTF_8.newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);
  reader=new BufferedReader(new InputStreamReader(is,decoder),BUFFER_SIZE);
  if (seekTo > 0L) {
    reader.readLine();
  }
}
