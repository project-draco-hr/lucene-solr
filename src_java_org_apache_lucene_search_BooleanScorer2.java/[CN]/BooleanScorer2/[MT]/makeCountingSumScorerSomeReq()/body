{
  if (optionalScorers.size() < minNrShouldMatch) {
    return new NonMatchingScorer();
  }
 else   if (optionalScorers.size() == minNrShouldMatch) {
    ArrayList allReq=new ArrayList(requiredScorers);
    allReq.addAll(optionalScorers);
    return addProhibitedScorers(countingConjunctionSumScorer(allReq));
  }
 else {
    Scorer requiredCountingSumScorer=(requiredScorers.size() == 1) ? new SingleMatchScorer((Scorer)requiredScorers.get(0)) : countingConjunctionSumScorer(requiredScorers);
    if (minNrShouldMatch > 0) {
      return addProhibitedScorers(dualConjunctionSumScorer(requiredCountingSumScorer,countingDisjunctionSumScorer(optionalScorers,minNrShouldMatch)));
    }
 else {
      return new ReqOptSumScorer(addProhibitedScorers(requiredCountingSumScorer),((optionalScorers.size() == 1) ? new SingleMatchScorer((Scorer)optionalScorers.get(0)) : countingDisjunctionSumScorer(optionalScorers,1)));
    }
  }
}
