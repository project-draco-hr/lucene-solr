{
  if (testMethods != null)   return testMethods;
  testClassesRun.add(getTestClass().getJavaClass().getSimpleName());
  testMethods=getTestClass().getAnnotatedMethods(Test.class);
  for (  Method m : getTestClass().getJavaClass().getMethods()) {
    final Ignore ignored=m.getAnnotation(Ignore.class);
    if (ignored != null) {
      System.err.println("NOTE: Ignoring test method '" + m.getName() + "': "+ ignored.value());
    }
    final int mod=m.getModifiers();
    if (m.getName().startsWith("test") && m.getAnnotation(Test.class) == null && !Modifier.isAbstract(mod) && m.getParameterTypes().length == 0 && m.getReturnType() == Void.TYPE) {
      if (Modifier.isStatic(mod))       throw new RuntimeException("Test methods must not be static.");
      testMethods.add(new FrameworkMethod(m));
    }
  }
  return testMethods;
}
