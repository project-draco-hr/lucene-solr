{
  int rogueThreads=threadCleanup("test class");
  if (rogueThreads > 0) {
    System.err.println("RESOURCE LEAK: test class left " + rogueThreads + " thread(s) running");
  }
  String codecDescription;
  CodecProvider cp=CodecProvider.getDefault();
  if ("randomPerField".equals(TEST_CODEC)) {
    if (cp instanceof RandomCodecProvider)     codecDescription=cp.toString();
 else     codecDescription="PreFlex";
  }
 else {
    codecDescription=codec.toString();
  }
  if (CodecProvider.getDefault() == savedCodecProvider)   removeTestCodecs(codec,CodecProvider.getDefault());
  CodecProvider.setDefault(savedCodecProvider);
  Locale.setDefault(savedLocale);
  TimeZone.setDefault(savedTimeZone);
  System.clearProperty("solr.solr.home");
  System.clearProperty("solr.data.dir");
  if (!testsFailed)   for (  MockDirectoryWrapper d : stores.keySet()) {
    if (d.isOpen()) {
      StackTraceElement elements[]=stores.get(d);
      StackTraceElement element=null;
      for (int i=2; i < elements.length; i++) {
        StackTraceElement ste=elements[i];
        if (ste.getClassName().indexOf("LuceneTestCase") == -1) {
          element=ste;
          break;
        }
      }
      fail("directory of test was not closed, opened from: " + element);
    }
  }
  stores=null;
  if (VERBOSE || testsFailed)   System.err.println("NOTE: test params are: codec=" + codecDescription + ", locale="+ locale+ ", timezone="+ (timeZone == null ? "(null)" : timeZone.getID()));
  if (testsFailed) {
    System.err.println("NOTE: all tests run in this JVM:");
    System.err.println(Arrays.toString(testClassesRun.toArray()));
    System.err.println("NOTE: " + System.getProperty("os.name") + " "+ System.getProperty("os.version")+ " "+ System.getProperty("os.arch")+ "/"+ System.getProperty("java.vendor")+ " "+ System.getProperty("java.version")+ " "+ (Constants.JRE_IS_64BIT ? "(64-bit)" : "(32-bit)")+ "/"+ "cpus="+ Runtime.getRuntime().availableProcessors()+ ","+ "threads="+ Thread.activeCount()+ ","+ "free="+ Runtime.getRuntime().freeMemory()+ ","+ "total="+ Runtime.getRuntime().totalMemory());
  }
}
