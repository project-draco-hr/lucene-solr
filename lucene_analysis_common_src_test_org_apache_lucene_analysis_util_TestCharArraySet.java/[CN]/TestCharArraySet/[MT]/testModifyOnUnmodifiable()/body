{
  CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT,10,true);
  set.addAll(Arrays.asList(TEST_STOP_WORDS));
  final int size=set.size();
  set=CharArraySet.unmodifiableSet(set);
  assertEquals("Set size changed due to unmodifiableSet call",size,set.size());
  String NOT_IN_SET="SirGallahad";
  assertFalse("Test String already exists in set",set.contains(NOT_IN_SET));
  try {
    set.add(NOT_IN_SET.toCharArray());
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable set",set.contains(NOT_IN_SET));
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.add(NOT_IN_SET);
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable set",set.contains(NOT_IN_SET));
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.add(new StringBuilder(NOT_IN_SET));
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable set",set.contains(NOT_IN_SET));
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.clear();
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Changed unmodifiable set",set.contains(NOT_IN_SET));
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.add((Object)NOT_IN_SET);
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable set",set.contains(NOT_IN_SET));
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.removeAll(new CharArraySet(TEST_VERSION_CURRENT,Arrays.asList(TEST_STOP_WORDS),true));
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.retainAll(new CharArraySet(TEST_VERSION_CURRENT,Arrays.asList(NOT_IN_SET),true));
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertEquals("Size of unmodifiable set has changed",size,set.size());
  }
  try {
    set.addAll(Arrays.asList(NOT_IN_SET));
    fail("Modified unmodifiable set");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable set",set.contains(NOT_IN_SET));
  }
  for (int i=0; i < TEST_STOP_WORDS.length; i++) {
    assertTrue(set.contains(TEST_STOP_WORDS[i]));
  }
}
