{
  assertTrue(!MinHashFilter.isLessThanUnsigned(0L,0L));
  assertTrue(MinHashFilter.isLessThanUnsigned(0L,-1L));
  assertTrue(MinHashFilter.isLessThanUnsigned(1L,-1L));
  assertTrue(MinHashFilter.isLessThanUnsigned(-2L,-1L));
  assertTrue(MinHashFilter.isLessThanUnsigned(1L,2L));
  assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE,Long.MIN_VALUE));
  FixedSizeTreeSet<LongPair> minSet=new FixedSizeTreeSet<LongPair>(500);
  HashSet<LongPair> unadded=new HashSet<LongPair>();
  for (int i=0; i < 100; i++) {
    LongPair hash=new LongPair();
    MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i),0,4,0,hash);
    LongPair peek=null;
    if (minSet.size() > 0) {
      peek=minSet.last();
    }
    if (!minSet.add(hash)) {
      unadded.add(hash);
    }
 else {
      if (peek != null) {
        if ((minSet.size() == 500) && !peek.equals(minSet.last())) {
          unadded.add(peek);
        }
      }
    }
  }
  assertEquals(100,minSet.size());
  assertEquals(0,unadded.size());
  HashSet<LongPair> collisionDetection=new HashSet<LongPair>();
  unadded=new HashSet<LongPair>();
  minSet=new FixedSizeTreeSet<LongPair>(500);
  for (int i=0; i < 1000000; i++) {
    LongPair hash=new LongPair();
    MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i),0,4,0,hash);
    collisionDetection.add(hash);
    LongPair peek=null;
    if (minSet.size() > 0) {
      peek=minSet.last();
    }
    if (!minSet.add(hash)) {
      unadded.add(hash);
    }
 else {
      if (peek != null) {
        if ((minSet.size() == 500) && !peek.equals(minSet.last())) {
          unadded.add(peek);
        }
      }
    }
  }
  assertEquals(1000000,collisionDetection.size());
  assertEquals(500,minSet.size());
  assertEquals(999500,unadded.size());
  LongPair last=null;
  LongPair current=null;
  while ((current=minSet.pollLast()) != null) {
    if (last != null) {
      assertTrue(isLessThan(current,last));
    }
    last=current;
  }
}
