{
  doc=subScorers[0].docID();
  if (doc == NO_MORE_DOCS) {
    nrMatchers=Integer.MAX_VALUE;
    return;
  }
  score=subScorers[0].score();
  nrMatchers=1;
  countMatches(1);
  countMatches(2);
  for (int i=mm - 2; i >= 0; i--) {
    if (mmStack[i].docID() >= doc || mmStack[i].advance(doc) != NO_MORE_DOCS) {
      if (mmStack[i].docID() == doc) {
        nrMatchers++;
        score+=mmStack[i].score();
      }
 else {
        if (nrMatchers + i < mm) {
          return;
        }
      }
    }
 else {
      numScorers--;
      if (numScorers < mm) {
        doc=NO_MORE_DOCS;
        nrMatchers=Integer.MAX_VALUE;
        return;
      }
      if (mm - 2 - i > 0) {
        System.arraycopy(mmStack,i + 1,mmStack,i,mm - 2 - i);
      }
      while (!minheapRemove(sortedSubScorers[sortedSubScorersIdx++]))       ;
      mmStack[mm - 2]=sortedSubScorers[sortedSubScorersIdx - 1];
      if (nrMatchers + i < mm) {
        return;
      }
    }
  }
}
