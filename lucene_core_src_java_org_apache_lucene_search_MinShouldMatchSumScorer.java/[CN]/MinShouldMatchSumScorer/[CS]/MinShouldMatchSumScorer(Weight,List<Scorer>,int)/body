{
  super(weight);
  this.nrInHeap=this.numScorers=subScorers.size();
  if (minimumNrMatchers <= 0) {
    throw new IllegalArgumentException("Minimum nr of matchers must be positive");
  }
  if (numScorers <= 1) {
    throw new IllegalArgumentException("There must be at least 2 subScorers");
  }
  this.mm=minimumNrMatchers;
  this.sortedSubScorers=subScorers.toArray(new Scorer[this.numScorers]);
  ArrayUtil.mergeSort(sortedSubScorers,new Comparator<Scorer>(){
    @Override public int compare(    Scorer o1,    Scorer o2){
      return Long.signum(o2.cost() - o1.cost());
    }
  }
);
  this.mmStack=new Scorer[mm - 1];
  for (int i=0; i < mm - 1; i++) {
    mmStack[i]=sortedSubScorers[i];
  }
  nrInHeap-=mm - 1;
  this.sortedSubScorersIdx=mm - 1;
  this.subScorers=new Scorer[nrInHeap];
  for (int i=0; i < nrInHeap; i++) {
    this.subScorers[i]=this.sortedSubScorers[mm - 1 + i];
  }
  minheapHeapify();
}
