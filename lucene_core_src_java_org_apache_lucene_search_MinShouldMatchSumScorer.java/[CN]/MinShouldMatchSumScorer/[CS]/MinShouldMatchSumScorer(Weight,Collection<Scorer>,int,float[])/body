{
  super(weight);
  if (minShouldMatch > scorers.size()) {
    throw new IllegalArgumentException("minShouldMatch should be <= the number of scorers");
  }
  if (minShouldMatch < 1) {
    throw new IllegalArgumentException("minShouldMatch should be >= 1");
  }
  this.minShouldMatch=minShouldMatch;
  this.coord=coord;
  this.doc=-1;
  head=new DisiPriorityQueue<Scorer>(scorers.size() - minShouldMatch + 1);
  tail=new DisiWrapper[minShouldMatch - 1];
  for (  Scorer scorer : scorers) {
    addLead(new DisiWrapper<Scorer>(scorer));
  }
  List<ChildScorer> children=new ArrayList<>();
  for (  Scorer scorer : scorers) {
    children.add(new ChildScorer(scorer,"SHOULD"));
  }
  this.childScorers=Collections.unmodifiableCollection(children);
  this.cost=cost(scorers,minShouldMatch);
}
