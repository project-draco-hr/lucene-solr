{
  StringBuilder zkBuilder=new StringBuilder();
  int lastIndexValue=zkHosts.size() - 1;
  int i=0;
  for (  String zkHost : zkHosts) {
    zkBuilder.append(zkHost);
    if (i < lastIndexValue) {
      zkBuilder.append(",");
    }
    i++;
  }
  if (chroot != null) {
    if (chroot.startsWith("/")) {
      zkBuilder.append(chroot);
    }
 else {
      throw new IllegalArgumentException("The chroot must start with a forward slash.");
    }
  }
  log.info("Final constructed zkHost string: " + zkBuilder.toString());
  this.zkHost=zkBuilder.toString();
  this.myClient=HttpClientUtil.createClient(null);
  this.lbServer=new LBHttpSolrServer(myClient);
  this.lbServer.setRequestWriter(new BinaryRequestWriter());
  this.lbServer.setParser(new BinaryResponseParser());
  this.updatesToLeaders=true;
  shutdownLBHttpSolrServer=true;
}
