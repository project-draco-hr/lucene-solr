{
  UpdateRequest updateRequest=(UpdateRequest)request;
  ModifiableSolrParams params=(ModifiableSolrParams)request.getParams();
  ModifiableSolrParams routableParams=new ModifiableSolrParams();
  ModifiableSolrParams nonRoutableParams=new ModifiableSolrParams();
  if (params != null) {
    nonRoutableParams.add(params);
    routableParams.add(params);
    for (    String param : NON_ROUTABLE_PARAMS) {
      routableParams.remove(param);
    }
  }
  if (params == null) {
    return null;
  }
  String collection=params.get("collection",defaultCollection);
  if (collection == null) {
    throw new SolrServerException("No collection param specified on request and no default collection has been set.");
  }
  Aliases aliases=zkStateReader.getAliases();
  if (aliases != null) {
    Map<String,String> collectionAliases=aliases.getCollectionAliasMap();
    if (collectionAliases != null && collectionAliases.containsKey(collection)) {
      collection=collectionAliases.get(collection);
    }
  }
  DocCollection col=clusterState.getCollection(collection);
  DocRouter router=col.getRouter();
  if (router instanceof ImplicitDocRouter) {
    return null;
  }
  Map<String,List<String>> urlMap=buildUrlMap(col);
  NamedList exceptions=new NamedList();
  NamedList shardResponses=new NamedList();
  Map<String,LBHttpSolrServer.Req> routes=updateRequest.getRoutes(router,col,urlMap,routableParams,this.idField);
  if (routes == null) {
    return null;
  }
  Iterator<Map.Entry<String,LBHttpSolrServer.Req>> it=routes.entrySet().iterator();
  long start=System.nanoTime();
  if (this.parallelUpdates) {
    ArrayBlockingQueue<RequestTask> finishedTasks=new ArrayBlockingQueue<RequestTask>(routes.size());
    while (it.hasNext()) {
      Map.Entry<String,LBHttpSolrServer.Req> entry=it.next();
      String url=entry.getKey();
      LBHttpSolrServer.Req lbRequest=entry.getValue();
      threadPool.execute(new RequestTask(url,lbRequest,finishedTasks));
    }
    while ((shardResponses.size() + exceptions.size()) != routes.size()) {
      RequestTask requestTask=null;
      try {
        requestTask=finishedTasks.take();
      }
 catch (      Exception e) {
        throw new SolrException(ErrorCode.SERVER_ERROR,e);
      }
      Exception e=requestTask.getException();
      if (e != null) {
        exceptions.add(requestTask.getLeader(),e);
      }
 else {
        shardResponses.add(requestTask.getLeader(),requestTask.getRsp().getResponse());
      }
    }
    if (exceptions.size() > 0) {
      throw new RouteException(ErrorCode.SERVER_ERROR,exceptions,routes);
    }
  }
 else {
    while (it.hasNext()) {
      Map.Entry<String,LBHttpSolrServer.Req> entry=it.next();
      String url=entry.getKey();
      LBHttpSolrServer.Req lbRequest=entry.getValue();
      try {
        NamedList rsp=lbServer.request(lbRequest).getResponse();
        shardResponses.add(url,rsp);
      }
 catch (      Exception e) {
        throw new SolrServerException(e);
      }
    }
  }
  UpdateRequest nonRoutableRequest=null;
  List<String> deleteQuery=updateRequest.getDeleteQuery();
  if (deleteQuery != null && deleteQuery.size() > 0) {
    UpdateRequest deleteQueryRequest=new UpdateRequest();
    deleteQueryRequest.setDeleteQuery(deleteQuery);
    nonRoutableRequest=deleteQueryRequest;
  }
  Set<String> paramNames=nonRoutableParams.getParameterNames();
  Set<String> intersection=new HashSet<String>(paramNames);
  intersection.retainAll(NON_ROUTABLE_PARAMS);
  if (nonRoutableRequest != null || intersection.size() > 0) {
    if (nonRoutableRequest == null) {
      nonRoutableRequest=new UpdateRequest();
    }
    nonRoutableRequest.setParams(nonRoutableParams);
    List<String> urlList=new ArrayList<String>();
    urlList.addAll(routes.keySet());
    Collections.shuffle(urlList,rand);
    LBHttpSolrServer.Req req=new LBHttpSolrServer.Req(nonRoutableRequest,urlList);
    try {
      LBHttpSolrServer.Rsp rsp=lbServer.request(req);
      shardResponses.add(urlList.get(0),rsp.getResponse());
    }
 catch (    Exception e) {
      throw new SolrException(ErrorCode.SERVER_ERROR,urlList.get(0),e);
    }
  }
  long end=System.nanoTime();
  RouteResponse rr=condenseResponse(shardResponses,(long)((end - start) / 1000000));
  rr.setRouteResponses(shardResponses);
  rr.setRoutes(routes);
  return rr;
}
