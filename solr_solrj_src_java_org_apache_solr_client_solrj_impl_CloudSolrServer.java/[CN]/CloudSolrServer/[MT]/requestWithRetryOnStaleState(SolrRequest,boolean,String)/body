{
  connect();
  String stateVerParam=null;
  List<DocCollection> requestedExternalCollections=null;
  if (collection != null && !request.getPath().startsWith("/admin")) {
    Set<String> requestedCollectionNames=getCollectionList(getZkStateReader().getClusterState(),collection);
    requestedExternalCollections=new ArrayList<DocCollection>(requestedCollectionNames.size());
    StringBuilder stateVerParamBuilder=null;
    for (    String requestedCollection : requestedCollectionNames) {
      DocCollection coll=getDocCollection(getZkStateReader().getClusterState(),requestedCollection);
      int collVer=coll.getVersion();
      if (coll.isExternal()) {
        requestedExternalCollections.add(coll);
        if (stateVerParamBuilder == null) {
          stateVerParamBuilder=new StringBuilder();
        }
 else {
          stateVerParamBuilder.append("|");
        }
        stateVerParamBuilder.append(coll.getName()).append(":").append(collVer);
      }
    }
    if (stateVerParamBuilder != null) {
      stateVerParam=stateVerParamBuilder.toString();
    }
  }
  if (request.getParams() instanceof ModifiableSolrParams) {
    ModifiableSolrParams params=(ModifiableSolrParams)request.getParams();
    if (stateVerParam != null) {
      params.set(STATE_VERSION,stateVerParam);
    }
 else {
      params.remove(STATE_VERSION);
    }
  }
  NamedList<Object> resp=null;
  try {
    resp=sendRequest(request);
  }
 catch (  Exception exc) {
    Throwable rootCause=SolrException.getRootCause(exc);
    if (collection == null || request.getPath().startsWith("/admin")) {
      if (exc instanceof SolrServerException) {
        throw (SolrServerException)exc;
      }
 else       if (exc instanceof IOException) {
        throw (IOException)exc;
      }
 else       if (exc instanceof RuntimeException) {
        throw (RuntimeException)exc;
      }
 else {
        throw new SolrServerException(rootCause);
      }
    }
    int errorCode=(rootCause instanceof SolrException) ? ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;
    log.error("Request to collection {} failed due to (" + errorCode + ") {}, retry? "+ retry,collection,rootCause.toString());
    boolean wasCommError=(rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException|| rootCause instanceof SocketException);
    boolean stateWasStale=false;
    if (retry && !requestedExternalCollections.isEmpty() && SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE) {
      stateWasStale=true;
      for (      DocCollection ext : requestedExternalCollections) {
        collectionStateCache.remove(ext.getName());
      }
    }
    if (retry && !stateWasStale && !requestedExternalCollections.isEmpty()&& wasCommError) {
      for (      DocCollection ext : requestedExternalCollections) {
        DocCollection latestStateFromZk=getZkStateReader().getExternCollection(ext.getName());
        if (latestStateFromZk.getVersion() != ext.getVersion()) {
          stateWasStale=true;
          collectionStateCache.put(ext.getName(),new ExpiringCachedDocCollection(latestStateFromZk));
        }
      }
    }
    requestedExternalCollections.clear();
    if (stateWasStale) {
      log.warn("Re-trying request to external collection(s) " + collection + " after stale state error from server.");
      resp=requestWithRetryOnStaleState(request,false,collection);
    }
 else {
      if (exc instanceof SolrServerException) {
        throw (SolrServerException)exc;
      }
 else       if (exc instanceof IOException) {
        throw (IOException)exc;
      }
 else {
        throw new SolrServerException(rootCause);
      }
    }
  }
  return resp;
}
