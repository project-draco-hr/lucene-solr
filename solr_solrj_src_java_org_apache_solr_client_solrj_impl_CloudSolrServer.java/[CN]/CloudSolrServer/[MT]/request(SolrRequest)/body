{
  connect();
  ClusterState clusterState=zkStateReader.getClusterState();
  boolean sendToLeaders=false;
  List<String> replicas=null;
  if (request instanceof IsUpdateRequest) {
    if (request instanceof UpdateRequest) {
      NamedList response=directUpdate((AbstractUpdateRequest)request,clusterState);
      if (response != null) {
        return response;
      }
    }
    sendToLeaders=true;
    replicas=new ArrayList<String>();
  }
  SolrParams reqParams=request.getParams();
  if (reqParams == null) {
    reqParams=new ModifiableSolrParams();
  }
  List<String> theUrlList=new ArrayList<String>();
  if (request.getPath().equals("/admin/collections") || request.getPath().equals("/admin/cores")) {
    Set<String> liveNodes=clusterState.getLiveNodes();
    for (    String liveNode : liveNodes) {
      int splitPointBetweenHostPortAndContext=liveNode.indexOf("_");
      theUrlList.add("http://" + liveNode.substring(0,splitPointBetweenHostPortAndContext) + "/"+ URLDecoder.decode(liveNode,"UTF-8").substring(splitPointBetweenHostPortAndContext + 1));
    }
  }
 else {
    String collection=reqParams.get("collection",defaultCollection);
    if (collection == null) {
      throw new SolrServerException("No collection param specified on request and no default collection has been set.");
    }
    Set<String> collectionsList=getCollectionList(clusterState,collection);
    if (collectionsList.size() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Could not find collection: " + collection);
    }
    collection=collectionsList.iterator().next();
    StringBuilder collectionString=new StringBuilder();
    Iterator<String> it=collectionsList.iterator();
    for (int i=0; i < collectionsList.size(); i++) {
      String col=it.next();
      collectionString.append(col);
      if (i < collectionsList.size() - 1) {
        collectionString.append(",");
      }
    }
    Map<String,Slice> slices=new HashMap<String,Slice>();
    for (    String collectionName : collectionsList) {
      Collection<Slice> colSlices=clusterState.getActiveSlices(collectionName);
      if (colSlices == null) {
        throw new SolrServerException("Could not find collection:" + collectionName);
      }
      ClientUtils.addSlices(slices,collectionName,colSlices,true);
    }
    Set<String> liveNodes=clusterState.getLiveNodes();
synchronized (cachLock) {
      List<String> leaderUrlList=leaderUrlLists.get(collection);
      List<String> urlList=urlLists.get(collection);
      List<String> replicasList=replicasLists.get(collection);
      if ((sendToLeaders && leaderUrlList == null) || (!sendToLeaders && urlList == null) || clusterState.hashCode() != this.lastClusterStateHashCode) {
        Map<String,ZkNodeProps> nodes=new HashMap<String,ZkNodeProps>();
        List<String> urlList2=new ArrayList<String>();
        for (        Slice slice : slices.values()) {
          for (          ZkNodeProps nodeProps : slice.getReplicasMap().values()) {
            ZkCoreNodeProps coreNodeProps=new ZkCoreNodeProps(nodeProps);
            String node=coreNodeProps.getNodeName();
            if (!liveNodes.contains(coreNodeProps.getNodeName()) || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE))             continue;
            if (nodes.put(node,nodeProps) == null) {
              if (!sendToLeaders || (sendToLeaders && coreNodeProps.isLeader())) {
                String url=coreNodeProps.getCoreUrl();
                urlList2.add(url);
              }
 else               if (sendToLeaders) {
                String url=coreNodeProps.getCoreUrl();
                replicas.add(url);
              }
            }
          }
        }
        if (sendToLeaders) {
          this.leaderUrlLists.put(collection,urlList2);
          leaderUrlList=urlList2;
          this.replicasLists.put(collection,replicas);
          replicasList=replicas;
        }
 else {
          this.urlLists.put(collection,urlList2);
          urlList=urlList2;
        }
        this.lastClusterStateHashCode=clusterState.hashCode();
      }
      if (sendToLeaders) {
        theUrlList=new ArrayList<String>(leaderUrlList.size());
        theUrlList.addAll(leaderUrlList);
      }
 else {
        theUrlList=new ArrayList<String>(urlList.size());
        theUrlList.addAll(urlList);
      }
      Collections.shuffle(theUrlList,rand);
      if (sendToLeaders) {
        ArrayList<String> theReplicas=new ArrayList<String>(replicasList.size());
        theReplicas.addAll(replicasList);
        Collections.shuffle(theReplicas,rand);
        theUrlList.addAll(theReplicas);
      }
    }
  }
  LBHttpSolrServer.Req req=new LBHttpSolrServer.Req(request,theUrlList);
  LBHttpSolrServer.Rsp rsp=lbServer.request(req);
  return rsp.getResponse();
}
