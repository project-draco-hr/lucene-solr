{
  connect();
  CloudState cloudState=zkStateReader.getCloudState();
  SolrParams reqParams=request.getParams();
  if (reqParams == null) {
    reqParams=new ModifiableSolrParams();
  }
  String collection=reqParams.get("collection",defaultCollection);
  List<String> collectionList=StrUtils.splitSmart(collection,",",true);
  Map<String,Slice> slices=new HashMap<String,Slice>();
  for (int i=0; i < collectionList.size(); i++) {
    String coll=collectionList.get(i);
    ClientUtils.appendMap(coll,slices,cloudState.getSlices(coll));
  }
  Set<String> liveNodes=cloudState.getLiveNodes();
  Map<String,ZkNodeProps> nodes=new HashMap<String,ZkNodeProps>();
  List<String> urlList=new ArrayList<String>();
  for (  Slice slice : slices.values()) {
    for (    ZkNodeProps nodeProps : slice.getShards().values()) {
      ZkCoreNodeProps coreNodeProps=new ZkCoreNodeProps(nodeProps);
      String node=coreNodeProps.getNodeName();
      if (!liveNodes.contains(coreNodeProps.getNodeName()) || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE))       continue;
      if (nodes.put(node,nodeProps) == null) {
        String url=coreNodeProps.getCoreUrl();
        urlList.add(url);
      }
    }
  }
  Collections.shuffle(urlList,rand);
  LBHttpSolrServer.Req req=new LBHttpSolrServer.Req(request,urlList);
  LBHttpSolrServer.Rsp rsp=lbServer.request(req);
  return rsp.getResponse();
}
