{
  connect();
  ClusterState clusterState=zkStateReader.getClusterState();
  boolean sendToLeaders=false;
  List<String> replicas=null;
  if (request instanceof IsUpdateRequest && updatesToLeaders) {
    sendToLeaders=true;
    replicas=new ArrayList<String>();
  }
  SolrParams reqParams=request.getParams();
  if (reqParams == null) {
    reqParams=new ModifiableSolrParams();
  }
  String collection=reqParams.get("collection",defaultCollection);
  if (collection == null) {
    throw new SolrServerException("No collection param specified on request and no default collection has been set.");
  }
  List<String> collectionList=StrUtils.splitSmart(collection,",",true);
  Map<String,Slice> slices=new HashMap<String,Slice>();
  for (int i=0; i < collectionList.size(); i++) {
    String coll=collectionList.get(i);
    ClientUtils.appendMap(coll,slices,clusterState.getSlices(coll));
  }
  Set<String> liveNodes=clusterState.getLiveNodes();
  List<String> theUrlList;
synchronized (cachLock) {
    System.out.println("work with collection:" + collection);
    List<String> leaderUrlList=leaderUrlLists.get(collection);
    List<String> urlList=urlLists.get(collection);
    List<String> replicasList=replicasLists.get(collection);
    if ((sendToLeaders && leaderUrlList == null) || (!sendToLeaders && urlList == null) || clusterState.hashCode() != this.lastClusterStateHashCode) {
      System.out.println("build a new map for " + collection);
      Map<String,ZkNodeProps> nodes=new HashMap<String,ZkNodeProps>();
      List<String> urlList2=new ArrayList<String>();
      for (      Slice slice : slices.values()) {
        for (        ZkNodeProps nodeProps : slice.getReplicasMap().values()) {
          ZkCoreNodeProps coreNodeProps=new ZkCoreNodeProps(nodeProps);
          String node=coreNodeProps.getNodeName();
          if (!liveNodes.contains(coreNodeProps.getNodeName()) || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE))           continue;
          if (nodes.put(node,nodeProps) == null) {
            if (!sendToLeaders || (sendToLeaders && coreNodeProps.isLeader())) {
              String url=coreNodeProps.getCoreUrl();
              urlList2.add(url);
            }
 else             if (sendToLeaders) {
              String url=coreNodeProps.getCoreUrl();
              replicas.add(url);
            }
          }
        }
      }
      if (sendToLeaders) {
        this.leaderUrlLists.put(collection,urlList2);
        leaderUrlList=urlList2;
        this.replicasLists.put(collection,replicas);
        replicasList=replicas;
      }
 else {
        this.urlLists.put(collection,urlList2);
        urlList=urlList2;
      }
      this.lastClusterStateHashCode=clusterState.hashCode();
    }
    if (sendToLeaders) {
      theUrlList=new ArrayList<String>(leaderUrlList.size());
      theUrlList.addAll(leaderUrlList);
    }
 else {
      theUrlList=new ArrayList<String>(urlList.size());
      theUrlList.addAll(urlList);
    }
    Collections.shuffle(theUrlList,rand);
    if (sendToLeaders) {
      ArrayList<String> theReplicas=new ArrayList<String>(replicasList.size());
      theReplicas.addAll(replicasList);
      Collections.shuffle(theReplicas,rand);
      theUrlList.addAll(theReplicas);
    }
  }
  LBHttpSolrServer.Req req=new LBHttpSolrServer.Req(request,theUrlList);
  LBHttpSolrServer.Rsp rsp=lbServer.request(req);
  return rsp.getResponse();
}
