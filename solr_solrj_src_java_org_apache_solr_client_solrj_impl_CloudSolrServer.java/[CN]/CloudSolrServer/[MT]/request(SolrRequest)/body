{
  connect();
  ClusterState clusterState=zkStateReader.getClusterState();
  SolrParams reqParams=request.getParams();
  if (reqParams == null) {
    reqParams=new ModifiableSolrParams();
  }
  String collection=reqParams.get("collection",defaultCollection);
  if (collection == null) {
    throw new SolrServerException("No collection param specified on request and no default collection has been set.");
  }
  List<String> collectionList=StrUtils.splitSmart(collection,",",true);
  Map<String,Slice> slices=new HashMap<String,Slice>();
  for (int i=0; i < collectionList.size(); i++) {
    String coll=collectionList.get(i);
    ClientUtils.appendMap(coll,slices,clusterState.getSlices(coll));
  }
  Set<String> liveNodes=clusterState.getLiveNodes();
  if (clusterState.hashCode() != this.lastClusterStateHashCode) {
    Map<String,ZkNodeProps> nodes=new HashMap<String,ZkNodeProps>();
    List<String> urlList=new ArrayList<String>();
    for (    Slice slice : slices.values()) {
      for (      ZkNodeProps nodeProps : slice.getShards().values()) {
        ZkCoreNodeProps coreNodeProps=new ZkCoreNodeProps(nodeProps);
        String node=coreNodeProps.getNodeName();
        if (!liveNodes.contains(coreNodeProps.getNodeName()) || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE))         continue;
        if (nodes.put(node,nodeProps) == null) {
          String url=coreNodeProps.getCoreUrl();
          urlList.add(url);
        }
      }
    }
    this.urlList=urlList;
    this.lastClusterStateHashCode=clusterState.hashCode();
  }
  Collections.shuffle(urlList,rand);
  LBHttpSolrServer.Req req=new LBHttpSolrServer.Req(request,urlList);
  LBHttpSolrServer.Rsp rsp=lbServer.request(req);
  return rsp.getResponse();
}
