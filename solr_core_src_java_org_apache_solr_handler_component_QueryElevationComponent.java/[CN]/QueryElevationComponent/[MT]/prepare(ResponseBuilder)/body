{
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  if (!params.getBool(QueryElevationParams.ENABLE,true)) {
    return;
  }
  boolean exclusive=params.getBool(QueryElevationParams.EXCLUSIVE,false);
  boolean force=params.getBool(QueryElevationParams.FORCE_ELEVATION,forceElevation);
  boolean markExcludes=params.getBool(QueryElevationParams.MARK_EXCLUDES,false);
  String boostStr=params.get(QueryElevationParams.IDS);
  String exStr=params.get(QueryElevationParams.EXCLUDE);
  Query query=rb.getQuery();
  SolrParams localParams=rb.getQparser().getLocalParams();
  String qstr=localParams == null ? rb.getQueryString() : localParams.get(QueryParsing.V);
  if (query == null || qstr == null) {
    return;
  }
  ElevationObj booster=null;
  try {
    if (boostStr != null || exStr != null) {
      List<String> boosts=(boostStr != null) ? StrUtils.splitSmart(boostStr,",",true) : new ArrayList<String>(0);
      List<String> excludes=(exStr != null) ? StrUtils.splitSmart(exStr,",",true) : new ArrayList<String>(0);
      booster=new ElevationObj(qstr,boosts,excludes);
    }
 else {
      IndexReader reader=req.getSearcher().getIndexReader();
      qstr=getAnalyzedQuery(qstr);
      booster=getElevationMap(reader,req.getCore()).get(qstr);
    }
  }
 catch (  Exception ex) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error loading elevation",ex);
  }
  if (booster != null) {
    rb.req.getContext().put(BOOSTED,booster.ids);
    rb.req.getContext().put(BOOSTED_PRIORITY,booster.priority);
    if (exclusive == true) {
      rb.setQuery(new BoostQuery(booster.include,0f));
    }
 else {
      BooleanQuery.Builder newq=new BooleanQuery.Builder();
      newq.add(query,BooleanClause.Occur.SHOULD);
      newq.add(new BoostQuery(booster.include,0f),BooleanClause.Occur.SHOULD);
      if (booster.exclude != null) {
        if (markExcludes == false) {
          for (          TermQuery tq : booster.exclude) {
            newq.add(new BooleanClause(tq,BooleanClause.Occur.MUST_NOT));
          }
        }
 else {
          rb.req.getContext().put(EXCLUDED,booster.excludeIds);
        }
      }
      rb.setQuery(newq.build());
    }
    ElevationComparatorSource comparator=new ElevationComparatorSource(booster);
    SortSpec sortSpec=rb.getSortSpec();
    if (sortSpec.getSort() == null) {
      sortSpec.setSortAndFields(new Sort(new SortField[]{new SortField("_elevate_",comparator,true),new SortField(null,SortField.Type.SCORE,false)}),Arrays.asList(new SchemaField[2]));
    }
 else {
      SortSpec modSortSpec=this.modifySortSpec(sortSpec,force,comparator);
      if (null != modSortSpec) {
        rb.setSortSpec(modSortSpec);
      }
    }
    GroupingSpecification groupingSpec=rb.getGroupingSpec();
    if (groupingSpec != null) {
      SortField[] groupSort=groupingSpec.getGroupSort().getSort();
      Sort modGroupSort=this.modifySort(groupSort,force,comparator);
      if (modGroupSort != null) {
        groupingSpec.setGroupSort(modGroupSort);
      }
      SortField[] withinGroupSort=groupingSpec.getSortWithinGroup().getSort();
      Sort modWithinGroupSort=this.modifySort(withinGroupSort,force,comparator);
      if (modWithinGroupSort != null) {
        groupingSpec.setSortWithinGroup(modWithinGroupSort);
      }
    }
  }
  if (rb.isDebug()) {
    List<String> match=null;
    if (booster != null) {
      match=new ArrayList<>(booster.priority.size());
      for (      Object o : booster.include.clauses()) {
        TermQuery tq=(TermQuery)((BooleanClause)o).getQuery();
        match.add(tq.getTerm().text());
      }
    }
    SimpleOrderedMap<Object> dbg=new SimpleOrderedMap<>();
    dbg.add("q",qstr);
    dbg.add("match",match);
    if (rb.isDebugQuery()) {
      rb.addDebugInfo("queryBoosting",dbg);
    }
  }
}
