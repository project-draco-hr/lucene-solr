{
  boolean modify=false;
  SortField[] currentSorts=current.getSort().getSort();
  List<SchemaField> currentFields=current.getSchemaFields();
  ArrayList<SortField> sorts=new ArrayList<SortField>(currentSorts.length + 1);
  List<SchemaField> fields=new ArrayList<SchemaField>(currentFields.size() + 1);
  if (force && currentSorts[0].getType() != SortField.Type.SCORE) {
    sorts.add(new SortField("_elevate_",comparator,true));
    fields.add(null);
    modify=true;
  }
  for (int i=0; i < currentSorts.length; i++) {
    SortField sf=currentSorts[i];
    if (sf.getType() == SortField.Type.SCORE) {
      sorts.add(new SortField("_elevate_",comparator,!sf.getReverse()));
      fields.add(null);
      modify=true;
    }
    sorts.add(sf);
    fields.add(currentFields.get(i));
  }
  if (modify) {
    SortSpec newSpec=new SortSpec(new Sort(sorts.toArray(new SortField[sorts.size()])),fields);
    newSpec.setOffset(current.getOffset());
    newSpec.setCount(current.getCount());
    return newSpec;
  }
  return null;
}
