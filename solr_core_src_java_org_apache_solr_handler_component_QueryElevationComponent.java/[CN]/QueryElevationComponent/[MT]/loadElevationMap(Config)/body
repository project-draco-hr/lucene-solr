{
  XPath xpath=XPathFactory.newInstance().newXPath();
  Map<String,ElevationObj> map=new HashMap<>();
  NodeList nodes=(NodeList)cfg.evaluate("elevate/query",XPathConstants.NODESET);
  for (int i=0; i < nodes.getLength(); i++) {
    Node node=nodes.item(i);
    String qstr=DOMUtil.getAttr(node,"text","missing query 'text'");
    NodeList children=null;
    try {
      children=(NodeList)xpath.evaluate("doc",node,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"query requires '<doc .../>' child");
    }
    ArrayList<String> include=new ArrayList<>();
    ArrayList<String> exclude=new ArrayList<>();
    for (int j=0; j < children.getLength(); j++) {
      Node child=children.item(j);
      String id=DOMUtil.getAttr(child,"id","missing 'id'");
      String e=DOMUtil.getAttr(child,EXCLUDE,null);
      if (e != null) {
        if (Boolean.valueOf(e)) {
          exclude.add(id);
          continue;
        }
      }
      include.add(id);
    }
    ElevationObj elev=new ElevationObj(qstr,include,exclude);
    if (map.containsKey(elev.analyzed)) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Boosting query defined twice for query: '" + elev.text + "' ("+ elev.analyzed+ "')");
    }
    map.put(elev.analyzed,elev);
  }
  return map;
}
