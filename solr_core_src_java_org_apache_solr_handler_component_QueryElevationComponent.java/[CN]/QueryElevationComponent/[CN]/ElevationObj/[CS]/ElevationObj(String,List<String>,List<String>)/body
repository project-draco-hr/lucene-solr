{
  this.text=qstr;
  this.analyzed=getAnalyzedQuery(this.text);
  this.ids=new HashSet<>();
  this.excludeIds=new HashSet<>();
  BooleanQuery.Builder include=new BooleanQuery.Builder();
  this.priority=new HashMap<>();
  int max=elevate.size() + 5;
  for (  String id : elevate) {
    id=idSchemaFT.readableToIndexed(id);
    ids.add(id);
    TermQuery tq=new TermQuery(new Term(idField,id));
    include.add(tq,BooleanClause.Occur.SHOULD);
    this.priority.put(new BytesRef(id),max--);
  }
  this.include=include.build();
  if (exclude == null || exclude.isEmpty()) {
    this.exclude=null;
  }
 else {
    this.exclude=new TermQuery[exclude.size()];
    for (int i=0; i < exclude.size(); i++) {
      String id=idSchemaFT.readableToIndexed(exclude.get(i));
      excludeIds.add(id);
      this.exclude[i]=new TermQuery(new Term(idField,id));
    }
  }
}
