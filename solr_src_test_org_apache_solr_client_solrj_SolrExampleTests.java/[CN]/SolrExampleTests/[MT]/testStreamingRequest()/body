{
  server.deleteByQuery("*:*");
  server.commit();
  assertNumFound("*:*",0);
  UpdateRequest req=new UpdateRequest();
  for (int i=0; i < 10; i++) {
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id","" + i);
    doc.addField("cat","foocat");
    req.add(doc);
  }
  req.setAction(ACTION.COMMIT,true,true);
  req.process(server);
  SolrQuery query=new SolrQuery("*:*");
  query.set(CommonParams.FL,"id,score,_docid_");
  QueryResponse response=server.query(query);
  assertEquals(0,response.getStatus());
  assertEquals(10,response.getResults().getNumFound());
  final AtomicInteger cnt=new AtomicInteger(0);
  server.queryAndStreamResponse(query,new StreamingResponseCallback(){
    @Override public void streamDocListInfo(    long numFound,    long start,    Float maxScore){
      assertEquals(10,numFound);
    }
    @Override public void streamSolrDocument(    SolrDocument doc){
      cnt.incrementAndGet();
      Float score=(Float)doc.get("score");
      Integer docid=(Integer)doc.get("_docid_");
      assertEquals("should have score",new Float(1.0),score);
    }
  }
);
  assertEquals(10,cnt.get());
}
