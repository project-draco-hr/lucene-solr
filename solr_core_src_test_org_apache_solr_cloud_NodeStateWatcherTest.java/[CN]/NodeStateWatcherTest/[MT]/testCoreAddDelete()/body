{
  String zkDir=dataDir.getAbsolutePath() + File.separator + "zookeeper/server1/data";
  ZkTestServer server=new ZkTestServer(zkDir);
  SolrZkClient zkClient=null;
  ZkStateReader reader=null;
  SolrZkClient overseerClient=null;
  MockZKController controller=null;
  try {
    final String NODE_NAME="node1";
    server.run();
    zkClient=new SolrZkClient(server.getZkAddress(),TIMEOUT);
    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());
    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
    zkClient.makePath("/live_nodes",true);
    System.setProperty(ZkStateReader.NUM_SHARDS_PROP,"2");
    reader=new ZkStateReader(zkClient);
    reader.createClusterStateWatchersAndUpdate();
    controller=new MockZKController(server.getZkAddress(),NODE_NAME,"collection1");
    final String path=Overseer.STATES_NODE + "/" + NODE_NAME;
    final AtomicInteger callCounter=new AtomicInteger();
    NodeStateWatcher watcher=new NodeStateWatcher(zkClient,NODE_NAME,path,new NodeStateChangeListener(){
      @Override public void coreChanged(      String nodeName,      Set<CoreState> states) throws KeeperException, InterruptedException {
        callCounter.incrementAndGet();
      }
      @Override public void coreDeleted(      String nodeName,      Collection<CoreState> states) throws KeeperException, InterruptedException {
        callCounter.incrementAndGet();
      }
    }
);
    controller.publishState("core1","state1",2);
    waitForCall(1,callCounter);
    assertEquals(1,watcher.getCurrentState().size());
    controller.publishState("core2","state1",2);
    waitForCall(2,callCounter);
    assertEquals(2,watcher.getCurrentState().size());
    controller.publishState("core1",null,2);
    waitForCall(3,callCounter);
    assertEquals(1,watcher.getCurrentState().size());
    controller.publishState("core2",null,2);
    waitForCall(4,callCounter);
    assertEquals(0,watcher.getCurrentState().size());
  }
  finally {
    if (zkClient != null) {
      zkClient.close();
    }
    if (controller != null) {
      controller.close();
    }
    if (overseerClient != null) {
      overseerClient.close();
    }
    if (reader != null) {
      reader.close();
    }
  }
}
