{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig(random(),null);
  iwc.setMergePolicy(newLogMergePolicy());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);
  int numDocs=TEST_NIGHTLY ? atLeast(500) : atLeast(50);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    int numValues=random().nextInt(5);
    for (int j=0; j < numValues; j++) {
      doc.add(new SortedSetDocValuesField("bytes",new BytesRef(TestUtil.randomUnicodeString(random()))));
    }
    iw.addDocument(doc);
    if (random().nextInt(17) == 0) {
      iw.commit();
    }
  }
  DirectoryReader ir=iw.getReader();
  iw.forceMerge(1);
  DirectoryReader ir2=iw.getReader();
  LeafReader merged=getOnlyLeafReader(ir2);
  iw.close();
  SortedSetDocValues multi=MultiDocValues.getSortedSetValues(ir,"bytes");
  SortedSetDocValues single=merged.getSortedSetDocValues("bytes");
  if (multi == null) {
    assertNull(single);
  }
 else {
    assertEquals(single.getValueCount(),multi.getValueCount());
    for (long i=0; i < single.getValueCount(); i++) {
      final BytesRef expected=BytesRef.deepCopyOf(single.lookupOrd(i));
      final BytesRef actual=multi.lookupOrd(i);
      assertEquals(expected,actual);
    }
    while (true) {
      int docID=single.nextDoc();
      assertEquals(docID,multi.nextDoc());
      if (docID == NO_MORE_DOCS) {
        break;
      }
      ArrayList<Long> expectedList=new ArrayList<>();
      long ord;
      while ((ord=single.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
        expectedList.add(ord);
      }
      int upto=0;
      while ((ord=multi.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
        assertEquals(expectedList.get(upto).longValue(),ord);
        upto++;
      }
      assertEquals(expectedList.size(),upto);
    }
  }
  testRandomAdvance(merged.getSortedSetDocValues("bytes"),MultiDocValues.getSortedSetValues(ir,"bytes"));
  ir.close();
  ir2.close();
  dir.close();
}
