{
  sortedBuckets=new ArrayList<>(buckets.values());
  Comparator<FacetBucket> comparator=null;
  final FacetField.SortDirection direction=freq.sortDirection;
  final int sortMul=direction.getMultiplier();
  if ("count".equals(freq.sortVariable)) {
    comparator=new Comparator<FacetBucket>(){
      @Override public int compare(      FacetBucket o1,      FacetBucket o2){
        int v=-Long.compare(o1.count,o2.count) * sortMul;
        return v == 0 ? o1.bucketValue.compareTo(o2.bucketValue) : v;
      }
    }
;
    Collections.sort(sortedBuckets,comparator);
  }
 else   if ("index".equals(freq.sortVariable)) {
    comparator=new Comparator<FacetBucket>(){
      @Override public int compare(      FacetBucket o1,      FacetBucket o2){
        return -o1.bucketValue.compareTo(o2.bucketValue) * sortMul;
      }
    }
;
    Collections.sort(sortedBuckets,comparator);
  }
 else {
    final String key=freq.sortVariable;
    List<SortVal> lst=new ArrayList<SortVal>(buckets.size());
    List<FacetBucket> nulls=new ArrayList<FacetBucket>(buckets.size() >> 1);
    for (int i=0; i < sortedBuckets.size(); i++) {
      FacetBucket bucket=sortedBuckets.get(i);
      FacetMerger merger=bucket.getExistingMerger(key);
      if (merger == null) {
        nulls.add(bucket);
      }
      if (merger != null) {
        SortVal sv=new SortVal();
        sv.bucket=bucket;
        sv.merger=(FacetSortableMerger)merger;
        sv.direction=direction;
        lst.add(sv);
      }
    }
    Collections.sort(lst);
    Collections.sort(nulls,new Comparator<FacetBucket>(){
      @Override public int compare(      FacetBucket o1,      FacetBucket o2){
        return o1.bucketValue.compareTo(o2.bucketValue);
      }
    }
);
    ArrayList<FacetBucket> out=new ArrayList<>(buckets.size());
    for (    SortVal sv : lst) {
      out.add(sv.bucket);
    }
    out.addAll(nulls);
    sortedBuckets=out;
  }
}
