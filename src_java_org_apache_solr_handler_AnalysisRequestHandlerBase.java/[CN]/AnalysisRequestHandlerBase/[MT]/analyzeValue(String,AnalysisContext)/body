{
  Analyzer analyzer=context.getAnalyzer();
  if (!TokenizerChain.class.isInstance(analyzer)) {
    TokenStream tokenStream=analyzer.tokenStream(context.getFieldName(),new StringReader(value));
    NamedList<List<NamedList>> namedList=new SimpleOrderedMap<List<NamedList>>();
    namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(analyzeTokenStream(tokenStream),context));
    return namedList;
  }
  TokenizerChain tokenizerChain=(TokenizerChain)analyzer;
  NamedList<List<NamedList>> namedList=new SimpleOrderedMap<List<NamedList>>();
  TokenStream tokenStream=tokenizerChain.getTokenizerFactory().create(new StringReader(value));
  List<Token> tokens=analyzeTokenStream(tokenStream);
  namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(tokens,context));
  ListBasedTokenStream listBasedTokenStream=new ListBasedTokenStream(tokens);
  for (  TokenFilterFactory tokenFilterFactory : tokenizerChain.getTokenFilterFactories()) {
    tokenStream=tokenFilterFactory.create(listBasedTokenStream);
    List<Token> tokenList=analyzeTokenStream(tokenStream);
    namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(tokenList,context));
    listBasedTokenStream=new ListBasedTokenStream(tokenList);
  }
  return namedList;
}
