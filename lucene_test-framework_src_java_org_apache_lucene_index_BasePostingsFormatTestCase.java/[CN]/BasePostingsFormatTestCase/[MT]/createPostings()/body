{
  totalPostings=0;
  totalPayloadBytes=0;
  fields=new TreeMap<String,Map<BytesRef,Long>>();
  final int numFields=_TestUtil.nextInt(random(),1,5);
  if (VERBOSE) {
    System.out.println("TEST: " + numFields + " fields");
  }
  maxDoc=0;
  FieldInfo[] fieldInfoArray=new FieldInfo[numFields];
  int fieldUpto=0;
  while (fieldUpto < numFields) {
    String field=_TestUtil.randomSimpleString(random());
    if (fields.containsKey(field)) {
      continue;
    }
    fieldInfoArray[fieldUpto]=new FieldInfo(field,true,fieldUpto,false,false,true,IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS,null,DocValues.Type.FIXED_INTS_8,null);
    fieldUpto++;
    Map<BytesRef,Long> postings=new TreeMap<BytesRef,Long>();
    fields.put(field,postings);
    Set<String> seenTerms=new HashSet<String>();
    final int numTerms=4;
    for (int termUpto=0; termUpto < numTerms; termUpto++) {
      String term=_TestUtil.randomSimpleString(random());
      if (seenTerms.contains(term)) {
        continue;
      }
      seenTerms.add(term);
      if (TEST_NIGHTLY && termUpto == 0 && fieldUpto == 1) {
        term="big_" + term;
      }
 else       if (termUpto == 1 && fieldUpto == 1) {
        term="medium_" + term;
      }
 else       if (random().nextBoolean()) {
        term="low_" + term;
      }
 else {
        term="verylow_" + term;
      }
      long termSeed=random().nextLong();
      postings.put(new BytesRef(term),termSeed);
      DocsEnum docsEnum=getSeedPostings(term,termSeed,false,IndexOptions.DOCS_ONLY);
      int doc;
      int lastDoc=0;
      while ((doc=docsEnum.nextDoc()) != DocsEnum.NO_MORE_DOCS) {
        lastDoc=doc;
      }
      maxDoc=Math.max(lastDoc,maxDoc);
    }
  }
  fieldInfos=new FieldInfos(fieldInfoArray);
  maxDoc++;
  globalLiveDocs=new FixedBitSet(maxDoc);
  double liveRatio=random().nextDouble();
  for (int i=0; i < maxDoc; i++) {
    if (random().nextDouble() <= liveRatio) {
      globalLiveDocs.set(i);
    }
  }
  allTerms=new ArrayList<FieldAndTerm>();
  for (  Map.Entry<String,Map<BytesRef,Long>> fieldEnt : fields.entrySet()) {
    String field=fieldEnt.getKey();
    for (    Map.Entry<BytesRef,Long> termEnt : fieldEnt.getValue().entrySet()) {
      allTerms.add(new FieldAndTerm(field,termEnt.getKey()));
    }
  }
  if (VERBOSE) {
    System.out.println("TEST: done init postings; " + allTerms.size() + " total terms, across "+ fieldInfos.size()+ " fields");
  }
}
