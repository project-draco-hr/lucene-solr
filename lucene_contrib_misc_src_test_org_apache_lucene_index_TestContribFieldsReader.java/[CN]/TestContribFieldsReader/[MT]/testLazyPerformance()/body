{
  String userName=System.getProperty("user.name");
  File file=_TestUtil.getTempDir("lazyDir" + userName);
  Directory tmpDir=newFSDirectory(file);
  assertTrue(tmpDir != null);
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());
  ((LogMergePolicy)conf.getMergePolicy()).setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(tmpDir,conf);
  writer.addDocument(testDoc);
  writer.close();
  assertTrue(fieldInfos != null);
  long lazyTime=0;
  long regularTime=0;
  int length=10;
  Set<String> lazyFieldNames=new HashSet<String>();
  lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);
  SetBasedFieldSelector fieldSelector=new SetBasedFieldSelector(Collections.<String>emptySet(),lazyFieldNames);
  for (int i=0; i < length; i++) {
    IndexReader reader=IndexReader.open(tmpDir);
    Document doc;
    doc=reader.document(0);
    assertTrue("doc is null and it shouldn't be",doc != null);
    IndexableField field=doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
    assertTrue("field is null and it shouldn't be",field != null);
    assertFalse("field is lazy",field.getClass().getSimpleName().equals("LazyField"));
    String value;
    long start;
    long finish;
    start=System.currentTimeMillis();
    value=field.stringValue();
    finish=System.currentTimeMillis();
    assertTrue("value is null and it shouldn't be",value != null);
    regularTime+=(finish - start);
    reader.close();
    reader=null;
    doc=null;
    System.gc();
    reader=IndexReader.open(tmpDir);
    doc=getDocument(reader,0,fieldSelector);
    field=doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
    assertTrue("field is not lazy",field.getClass().getSimpleName().equals("LazyField"));
    start=System.currentTimeMillis();
    value=field.stringValue();
    finish=System.currentTimeMillis();
    assertTrue("value is null and it shouldn't be",value != null);
    lazyTime+=(finish - start);
    reader.close();
  }
  tmpDir.close();
  if (VERBOSE) {
    System.out.println("Average Non-lazy time (should be very close to zero): " + regularTime / length + " ms for " + length + " reads");
    System.out.println("Average Lazy Time (should be greater than zero): " + lazyTime / length + " ms for " + length + " reads");
  }
}
