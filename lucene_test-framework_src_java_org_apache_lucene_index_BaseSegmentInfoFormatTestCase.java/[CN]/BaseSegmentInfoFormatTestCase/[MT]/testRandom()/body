{
  Codec codec=getCodec();
  Version[] versions=getVersions();
  for (int i=0; i < 10; i++) {
    Directory dir=newDirectory();
    Version version=versions[random().nextInt(versions.length)];
    String name="_" + Integer.toString(random().nextInt(Integer.MAX_VALUE),Character.MAX_RADIX);
    int docCount=TestUtil.nextInt(random(),1,IndexWriter.MAX_DOCS);
    boolean isCompoundFile=random().nextBoolean();
    Set<String> files=new HashSet<>();
    int numFiles=random().nextInt(10);
    for (int j=0; j < numFiles; j++) {
      String file=IndexFileNames.segmentFileName(name,"",Integer.toString(j));
      files.add(file);
      dir.createOutput(file,IOContext.DEFAULT).close();
    }
    Map<String,String> diagnostics=new HashMap<>();
    int numDiags=random().nextInt(10);
    for (int j=0; j < numDiags; j++) {
      diagnostics.put(TestUtil.randomUnicodeString(random()),TestUtil.randomUnicodeString(random()));
    }
    byte id[]=new byte[StringHelper.ID_LENGTH];
    random().nextBytes(id);
    SegmentInfo info=new SegmentInfo(dir,version,name,docCount,isCompoundFile,codec,diagnostics,id);
    info.setFiles(files);
    codec.segmentInfoFormat().getSegmentInfoWriter().write(dir,info,IOContext.DEFAULT);
    SegmentInfo info2=codec.segmentInfoFormat().getSegmentInfoReader().read(dir,name,IOContext.DEFAULT);
    assertEquals(info,info2);
    dir.close();
  }
}
