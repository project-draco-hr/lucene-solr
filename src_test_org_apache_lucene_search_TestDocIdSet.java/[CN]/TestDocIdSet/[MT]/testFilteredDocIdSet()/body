{
  final int maxdoc=10;
  final DocIdSet innerSet=new DocIdSet(){
    public DocIdSetIterator iterator(){
      return new DocIdSetIterator(){
        int docid=-1;
        public int doc(){
          return docid;
        }
        public boolean next() throws IOException {
          docid++;
          return (docid < maxdoc);
        }
        public boolean skipTo(        int target) throws IOException {
          do {
            if (!next()) {
              return false;
            }
          }
 while (target > doc());
          return true;
        }
      }
;
    }
  }
;
  DocIdSet filteredSet=new FilteredDocIdSet(innerSet){
    protected boolean match(    int docid){
      return docid % 2 == 0;
    }
  }
;
  DocIdSetIterator iter=filteredSet.iterator();
  ArrayList list=new ArrayList();
  if (iter.skipTo(3)) {
    list.add(new Integer(iter.doc()));
    while (iter.next()) {
      list.add(new Integer(iter.doc()));
    }
  }
  int[] docs=new int[list.size()];
  int c=0;
  Iterator intIter=list.iterator();
  while (intIter.hasNext()) {
    docs[c++]=((Integer)intIter.next()).intValue();
  }
  int[] answer=new int[]{4,6,8};
  boolean same=Arrays.equals(answer,docs);
  if (!same) {
    System.out.println("answer: " + Arrays.toString(answer));
    System.out.println("gotten: " + Arrays.toString(docs));
    fail();
  }
}
