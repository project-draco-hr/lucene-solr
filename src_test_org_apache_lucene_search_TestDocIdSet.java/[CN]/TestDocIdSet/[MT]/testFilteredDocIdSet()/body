{
  final int maxdoc=10;
  final DocIdSet innerSet=new DocIdSet(){
    public DocIdSetIterator iterator(){
      return new DocIdSetIterator(){
        int docid=-1;
        public int docID(){
          return docid;
        }
        public int nextDoc() throws IOException {
          docid++;
          return docid < maxdoc ? docid : (docid=NO_MORE_DOCS);
        }
        public int advance(        int target) throws IOException {
          while (nextDoc() < target) {
          }
          return docid;
        }
      }
;
    }
  }
;
  DocIdSet filteredSet=new FilteredDocIdSet(innerSet){
    protected boolean match(    int docid){
      return docid % 2 == 0;
    }
  }
;
  DocIdSetIterator iter=filteredSet.iterator();
  ArrayList list=new ArrayList();
  int doc=iter.advance(3);
  if (doc != DocIdSetIterator.NO_MORE_DOCS) {
    list.add(Integer.valueOf(doc));
    while ((doc=iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      list.add(Integer.valueOf(doc));
    }
  }
  int[] docs=new int[list.size()];
  int c=0;
  Iterator intIter=list.iterator();
  while (intIter.hasNext()) {
    docs[c++]=((Integer)intIter.next()).intValue();
  }
  int[] answer=new int[]{4,6,8};
  boolean same=Arrays.equals(answer,docs);
  if (!same) {
    System.out.println("answer: " + _TestUtil.arrayToString(answer));
    System.out.println("gotten: " + _TestUtil.arrayToString(docs));
    fail();
  }
}
