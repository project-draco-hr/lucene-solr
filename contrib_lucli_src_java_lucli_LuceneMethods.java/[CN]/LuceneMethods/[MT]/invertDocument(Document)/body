{
  Map<String,Integer> tokenMap=new HashMap<String,Integer>();
  final int maxFieldLength=10000;
  Analyzer analyzer=createAnalyzer();
  for (  Fieldable field : doc.getFields()) {
    String fieldName=field.name();
    if (field.isIndexed()) {
      if (field.isTokenized()) {
        Reader reader;
        if (field.readerValue() != null)         reader=field.readerValue();
 else         if (field.stringValue() != null)         reader=new StringReader(field.stringValue());
 else         throw new IllegalArgumentException("field must have either String or Reader value");
        int position=0;
        TokenStream stream=analyzer.tokenStream(fieldName,reader);
        TermAttribute termAtt=stream.addAttribute(TermAttribute.class);
        PositionIncrementAttribute posIncrAtt=stream.addAttribute(PositionIncrementAttribute.class);
        try {
          while (stream.incrementToken()) {
            position+=(posIncrAtt.getPositionIncrement() - 1);
            position++;
            String name=termAtt.term();
            Integer Count=tokenMap.get(name);
            if (Count == null) {
              tokenMap.put(name,Integer.valueOf(1));
            }
 else {
              int count=Count.intValue();
              tokenMap.put(name,Integer.valueOf(count + 1));
            }
            if (position > maxFieldLength)             break;
          }
        }
  finally {
          stream.close();
        }
      }
    }
  }
  Map.Entry<String,Integer>[] sortedHash=getSortedMapEntries(tokenMap);
  for (int ii=0; ii < sortedHash.length && ii < 10; ii++) {
    Map.Entry<String,Integer> currentEntry=sortedHash[ii];
    message((ii + 1) + ":" + currentEntry.getKey()+ " "+ currentEntry.getValue());
  }
}
