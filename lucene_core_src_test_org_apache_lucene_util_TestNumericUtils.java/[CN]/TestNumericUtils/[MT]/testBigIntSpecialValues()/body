{
  BigInteger[] values=new BigInteger[]{BigInteger.valueOf(Integer.MIN_VALUE),BigInteger.valueOf(Integer.MIN_VALUE + 1),BigInteger.valueOf(Integer.MIN_VALUE + 2),BigInteger.valueOf(-64765767),BigInteger.valueOf(-4000),BigInteger.valueOf(-3000),BigInteger.valueOf(-2000),BigInteger.valueOf(-1000),BigInteger.valueOf(-1),BigInteger.valueOf(0),BigInteger.valueOf(1),BigInteger.valueOf(10),BigInteger.valueOf(300),BigInteger.valueOf(765878989),BigInteger.valueOf(Integer.MAX_VALUE - 2),BigInteger.valueOf(Integer.MAX_VALUE - 1),BigInteger.valueOf(Integer.MAX_VALUE)};
  BytesRef[] encoded=new BytesRef[values.length];
  for (int i=0; i < values.length; i++) {
    encoded[i]=new BytesRef(new byte[Integer.BYTES]);
    NumericUtils.bigIntToSortableBytes(values[i],Integer.BYTES,encoded[i].bytes,encoded[i].offset);
    assertEquals("forward and back conversion should generate same big integer",values[i],NumericUtils.sortableBytesToBigInt(encoded[i].bytes,encoded[i].offset,Integer.BYTES));
  }
  for (int i=1; i < encoded.length; i++) {
    assertTrue("check sort order",encoded[i - 1].compareTo(encoded[i]) < 0);
  }
}
