{
  String payload="{\n" + "'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\n" + "}";
  runConfigCommand(writeHarness,"/config?wt=json",payload);
  testForResponseElement(writeHarness,testServerBaseUrl,"/config/overlay?wt=json",cloudSolrServer,Arrays.asList("overlay","requestHandler","/x","startup"),"lazy",10);
  payload="{\n" + "'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\n" + "}";
  runConfigCommand(writeHarness,"/config?wt=json",payload);
  testForResponseElement(writeHarness,testServerBaseUrl,"/config/overlay?wt=json",cloudSolrServer,Arrays.asList("overlay","requestHandler","/x","a"),"b",10);
  testForResponseElement(writeHarness,testServerBaseUrl,"/x?wt=json&getdefaults=true&json.nl=map",cloudSolrServer,Arrays.asList("getdefaults","def_a"),"def A val",10);
  payload="{\n" + "'delete-requesthandler' : '/x'" + "}";
  runConfigCommand(writeHarness,"/config?wt=json",payload);
  boolean success=false;
  long startTime=System.nanoTime();
  int maxTimeoutSeconds=10;
  while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime,TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {
    String uri="/config/overlay?wt=json";
    Map m=testServerBaseUrl == null ? getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri,cloudSolrServer);
    if (null == ConfigOverlay.getObjectByPath(m,true,Arrays.asList("overlay","requestHandler","/x","a"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  assertTrue("Could not delete requestHandler  ",success);
}
