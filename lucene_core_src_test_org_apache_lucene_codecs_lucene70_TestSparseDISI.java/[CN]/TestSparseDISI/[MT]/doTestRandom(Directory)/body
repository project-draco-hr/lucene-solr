{
  List<Integer> docs=new ArrayList<>();
  final int maxStep=TestUtil.nextInt(random(),1,1 << TestUtil.nextInt(random(),2,10));
  final int numDocs=TestUtil.nextInt(random(),1,1000);
  for (int doc=-1, i=0; i < numDocs; ++i) {
    doc+=TestUtil.nextInt(random(),1,maxStep);
    docs.add(doc);
  }
  final int maxDoc=docs.get(docs.size() - 1) + TestUtil.nextInt(random(),1,100);
  FixedBitSet set=new FixedBitSet(maxDoc);
  for (  int doc : docs) {
    set.set(doc);
  }
  try (IndexOutput out=dir.createOutput("foo",IOContext.DEFAULT)){
    SparseDISI.writeBitSet(new BitSetIterator(set,docs.size()),maxDoc,out);
  }
   try (IndexInput in=dir.openInput("foo",IOContext.DEFAULT)){
    SparseDISI disi=new SparseDISI(maxDoc,in,0L,docs.size());
    BitSetIterator disi2=new BitSetIterator(set,docs.size());
    int i=0;
    for (int doc=disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=disi2.nextDoc()) {
      assertEquals(doc,disi.nextDoc());
      assertEquals(i++,disi.index());
    }
    assertEquals(DocIdSetIterator.NO_MORE_DOCS,disi.nextDoc());
  }
   for (  int step : new int[]{1,20,maxStep,maxStep * 10}) {
    try (IndexInput in=dir.openInput("foo",IOContext.DEFAULT)){
      SparseDISI disi=new SparseDISI(maxDoc,in,0L,docs.size());
      BitSetIterator disi2=new BitSetIterator(set,docs.size());
      while (true) {
        int target=disi2.docID() + step;
        int doc=disi2.advance(target);
        assertEquals(doc,disi.advance(target));
        if (doc == DocIdSetIterator.NO_MORE_DOCS) {
          break;
        }
        int index=Collections.binarySearch(docs,doc);
        assertEquals(index,disi.index());
      }
    }
   }
  dir.deleteFile("foo");
}
