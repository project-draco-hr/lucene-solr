{
  String field=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  String lowerTerm=DOMUtils.getAttributeOrFail(e,"lowerTerm");
  String upperTerm=DOMUtils.getAttributeOrFail(e,"upperTerm");
  boolean lowerInclusive=DOMUtils.getAttribute(e,"includeLower",true);
  boolean upperInclusive=DOMUtils.getAttribute(e,"includeUpper",true);
  int precisionStep=DOMUtils.getAttribute(e,"precisionStep",NumericUtils.PRECISION_STEP_DEFAULT);
  String type=DOMUtils.getAttribute(e,"type","int");
  try {
    Filter filter;
    if (type.equalsIgnoreCase("int")) {
      filter=NumericRangeFilter.newIntRange(field,precisionStep,Integer.valueOf(lowerTerm),Integer.valueOf(upperTerm),lowerInclusive,upperInclusive);
    }
 else     if (type.equalsIgnoreCase("long")) {
      filter=NumericRangeFilter.newLongRange(field,precisionStep,Long.valueOf(lowerTerm),Long.valueOf(upperTerm),lowerInclusive,upperInclusive);
    }
 else     if (type.equalsIgnoreCase("double")) {
      filter=NumericRangeFilter.newDoubleRange(field,precisionStep,Double.valueOf(lowerTerm),Double.valueOf(upperTerm),lowerInclusive,upperInclusive);
    }
 else     if (type.equalsIgnoreCase("float")) {
      filter=NumericRangeFilter.newFloatRange(field,precisionStep,Float.valueOf(lowerTerm),Float.valueOf(upperTerm),lowerInclusive,upperInclusive);
    }
 else {
      throw new ParserException("type attribute must be one of: [long, int, double, float]");
    }
    return filter;
  }
 catch (  NumberFormatException nfe) {
    if (strictMode) {
      throw new ParserException("Could not parse lowerTerm or upperTerm into a number",nfe);
    }
    return NO_MATCH_FILTER;
  }
}
