{
  Random random=random();
  for (int iter=0; iter < 5 * RANDOM_MULTIPLIER; iter++) {
    BaseDirectoryWrapper dir=newFSDirectory(TestUtil.createTempDir("testOverflow"));
    if (dir instanceof MockDirectoryWrapper) {
      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
    }
    final int blockBits=TestUtil.nextInt(random,1,20);
    final int blockSize=1 << blockBits;
    final PagedBytes p=new PagedBytes(blockBits);
    final IndexOutput out=dir.createOutput("foo",IOContext.DEFAULT);
    final int numBytes=TestUtil.nextInt(random(),2,10000000);
    final byte[] answer=new byte[numBytes];
    random().nextBytes(answer);
    int written=0;
    while (written < numBytes) {
      if (random().nextInt(10) == 7) {
        out.writeByte(answer[written++]);
      }
 else {
        int chunk=Math.min(random().nextInt(1000),numBytes - written);
        out.writeBytes(answer,written,chunk);
        written+=chunk;
      }
    }
    out.close();
    final IndexInput input=dir.openInput("foo",IOContext.DEFAULT);
    final DataInput in=input.clone();
    p.copy(input,input.length());
    final PagedBytes.Reader reader=p.freeze(random.nextBoolean());
    final byte[] verify=new byte[numBytes];
    int read=0;
    while (read < numBytes) {
      if (random().nextInt(10) == 7) {
        verify[read++]=in.readByte();
      }
 else {
        int chunk=Math.min(random().nextInt(1000),numBytes - read);
        in.readBytes(verify,read,chunk);
        read+=chunk;
      }
    }
    assertTrue(Arrays.equals(answer,verify));
    final BytesRef slice=new BytesRef();
    for (int iter2=0; iter2 < 100; iter2++) {
      final int pos=random.nextInt(numBytes - 1);
      final int len=random.nextInt(Math.min(blockSize + 1,numBytes - pos));
      reader.fillSlice(slice,pos,len);
      for (int byteUpto=0; byteUpto < len; byteUpto++) {
        assertEquals(answer[pos + byteUpto],slice.bytes[slice.offset + byteUpto]);
      }
    }
    input.close();
    dir.close();
  }
}
