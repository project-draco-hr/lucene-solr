{
  BaseDirectoryWrapper dir=newFSDirectory(createTempDir("testOverflow"));
  if (dir instanceof MockDirectoryWrapper) {
    ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
  }
  final int blockBits=TestUtil.nextInt(random(),14,28);
  final int blockSize=1 << blockBits;
  byte[] arr=new byte[TestUtil.nextInt(random(),blockSize / 2,blockSize * 2)];
  for (int i=0; i < arr.length; ++i) {
    arr[i]=(byte)i;
  }
  final long numBytes=(1L << 31) + TestUtil.nextInt(random(),1,blockSize * 3);
  final PagedBytes p=new PagedBytes(blockBits);
  final IndexOutput out=dir.createOutput("foo",IOContext.DEFAULT);
  for (long i=0; i < numBytes; ) {
    assertEquals(i,out.getFilePointer());
    final int len=(int)Math.min(arr.length,numBytes - i);
    out.writeBytes(arr,len);
    i+=len;
  }
  assertEquals(numBytes,out.getFilePointer());
  out.close();
  final IndexInput in=dir.openInput("foo",IOContext.DEFAULT);
  p.copy(in,numBytes);
  final PagedBytes.Reader reader=p.freeze(random().nextBoolean());
  for (  long offset : new long[]{0L,Integer.MAX_VALUE,numBytes - 1,TestUtil.nextLong(random(),1,numBytes - 2)}) {
    BytesRef b=new BytesRef();
    reader.fillSlice(b,offset,1);
    assertEquals(arr[(int)(offset % arr.length)],b.bytes[b.offset]);
  }
  in.close();
  dir.close();
}
