{
  waitForThingsToLevelOut(15);
  TestInjection.splitFailureBeforeReplicaCreation="true:100";
  try {
    try {
      CollectionAdminRequest.SplitShard splitShard=CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
      splitShard.setShardName(SHARD1);
      splitShard.process(cloudClient);
      fail("Shard split was not supposed to succeed after failure injection!");
    }
 catch (    Exception e) {
    }
    ZkStateReader zkStateReader=cloudClient.getZkStateReader();
    zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
    ClusterState state=zkStateReader.getClusterState();
    DocCollection collection=state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
    Slice shard10=collection.getSlice(SHARD1_0);
    assertEquals(Slice.State.CONSTRUCTION,shard10.getState());
    assertEquals(1,shard10.getReplicas().size());
    Slice shard11=collection.getSlice(SHARD1_1);
    assertEquals(Slice.State.CONSTRUCTION,shard11.getState());
    assertEquals(1,shard11.getReplicas().size());
    TestInjection.reset();
    try {
      CollectionAdminRequest.SplitShard splitShard=CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
      splitShard.setShardName(SHARD1);
      splitShard.process(cloudClient);
    }
 catch (    Exception e) {
      log.error("Shard split failed",e);
      fail("Shard split did not succeed after a previous failed split attempt left sub-shards in construction state");
    }
  }
  finally {
    TestInjection.reset();
  }
}
