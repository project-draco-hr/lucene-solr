{
  ClusterState clusterState=cloudClient.getZkStateReader().getClusterState();
  final DocRouter router=clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();
  Slice shard1=clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1);
  DocRouter.Range shard1Range=shard1.getRange() != null ? shard1.getRange() : router.fullRange();
  List<DocRouter.Range> subRanges=new ArrayList<>();
  List<DocRouter.Range> ranges=router.partitionRange(4,shard1Range);
  subRanges.add(ranges.get(0));
  try {
    splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1,subRanges,null);
    fail("Shard splitting with just one custom hash range should not succeed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
    log.info("Expected exception:",e);
  }
  subRanges.clear();
  subRanges.add(ranges.get(3));
  subRanges.add(ranges.get(0));
  try {
    splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1,subRanges,null);
    fail("Shard splitting with missing hashes in between given ranges should not succeed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
    log.info("Expected exception:",e);
  }
  subRanges.clear();
  subRanges.add(ranges.get(0));
  subRanges.add(ranges.get(1));
  subRanges.add(ranges.get(2));
  subRanges.add(new DocRouter.Range(ranges.get(3).min - 15,ranges.get(3).max));
  try {
    splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1,subRanges,null);
    fail("Shard splitting with overlapping ranges should not succeed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
    log.info("Expected exception:",e);
  }
  subRanges.clear();
}
