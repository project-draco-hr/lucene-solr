{
  log.info("Starting testSplitWithRouteField");
  String collectionName="routeFieldColl";
  int numShards=4;
  int replicationFactor=2;
  int maxShardsPerNode=(((numShards * replicationFactor) / getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
  HashMap<String,List<Integer>> collectionInfos=new HashMap<String,List<Integer>>();
  CloudSolrServer client=null;
  String shard_fld="shard_s";
  try {
    client=createCloudClient(null);
    Map<String,Object> props=ZkNodeProps.makeMap(REPLICATION_FACTOR,replicationFactor,MAX_SHARDS_PER_NODE,maxShardsPerNode,NUM_SLICES,numShards,"router.field",shard_fld);
    createCollection(collectionInfos,collectionName,props,client);
  }
  finally {
    if (client != null)     client.shutdown();
  }
  List<Integer> list=collectionInfos.get(collectionName);
  checkForCollection(collectionName,list,null);
  waitForRecoveriesToFinish(false);
  String url=CustomCollectionTest.getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(),collectionName);
  HttpSolrServer collectionClient=new HttpSolrServer(url);
  ClusterState clusterState=cloudClient.getZkStateReader().getClusterState();
  final DocRouter router=clusterState.getCollection(collectionName).getRouter();
  Slice shard1=clusterState.getSlice(collectionName,SHARD1);
  DocRouter.Range shard1Range=shard1.getRange() != null ? shard1.getRange() : router.fullRange();
  final List<DocRouter.Range> ranges=router.partitionRange(2,shard1Range);
  final int[] docCounts=new int[ranges.size()];
  for (int i=100; i <= 200; i++) {
    String shardKey="" + (char)('a' + (i % 26));
    collectionClient.add(getDoc(id,i,"n_ti",i,shard_fld,shardKey));
    int idx=getHashRangeIdx(router,ranges,shardKey);
    if (idx != -1) {
      docCounts[idx]++;
    }
  }
  for (int i=0; i < docCounts.length; i++) {
    int docCount=docCounts[i];
    log.info("Shard {} docCount = {}","shard1_" + i,docCount);
  }
  collectionClient.commit();
  for (int i=0; i < 3; i++) {
    try {
      splitShard(collectionName,SHARD1,null);
      break;
    }
 catch (    HttpSolrServer.RemoteSolrException e) {
      if (e.code() != 500) {
        throw e;
      }
      log.error("SPLITSHARD failed. " + (i < 2 ? " Retring split" : ""),e);
      if (i == 2) {
        fail("SPLITSHARD was not successful even after three tries");
      }
    }
  }
  assertEquals(docCounts[0],collectionClient.query(new SolrQuery("*:*").setParam("shards","shard1_0")).getResults().getNumFound());
  assertEquals(docCounts[1],collectionClient.query(new SolrQuery("*:*").setParam("shards","shard1_1")).getResults().getNumFound());
}
