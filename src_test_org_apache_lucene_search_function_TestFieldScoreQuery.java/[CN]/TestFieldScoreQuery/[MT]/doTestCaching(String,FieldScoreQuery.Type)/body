{
  HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes=new HashMap<FieldScoreQuery.Type,Object>();
  expectedArrayTypes.put(FieldScoreQuery.Type.BYTE,new byte[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.SHORT,new short[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.INT,new int[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT,new float[0]);
  IndexSearcher s=new IndexSearcher(dir,true);
  Object innerArray=null;
  boolean warned=false;
  for (int i=0; i < 10; i++) {
    FieldScoreQuery q=new FieldScoreQuery(field,tp);
    ScoreDoc[] h=s.search(q,null,1000).scoreDocs;
    assertEquals("All docs should be matched!",N_DOCS,h.length);
    IndexReader[] readers=s.getIndexReader().getSequentialSubReaders();
    for (int j=0; j < readers.length; j++) {
      IndexReader reader=readers[j];
      try {
        if (i == 0) {
          innerArray=q.valSrc.getValues(reader).getInnerArray();
          log(i + ".  compare: " + innerArray.getClass()+ " to "+ expectedArrayTypes.get(tp).getClass());
          assertEquals("field values should be cached in the correct array type!",innerArray.getClass(),expectedArrayTypes.get(tp).getClass());
        }
 else {
          log(i + ".  compare: " + innerArray+ " to "+ q.valSrc.getValues(reader).getInnerArray());
          assertSame("field values should be cached and reused!",innerArray,q.valSrc.getValues(reader).getInnerArray());
        }
      }
 catch (      UnsupportedOperationException e) {
        if (!warned) {
          System.err.println("WARNING: " + testName() + " cannot fully test values of "+ q);
          warned=true;
        }
      }
    }
  }
  s=new IndexSearcher(dir,true);
  FieldScoreQuery q=new FieldScoreQuery(field,tp);
  ScoreDoc[] h=s.search(q,null,1000).scoreDocs;
  assertEquals("All docs should be matched!",N_DOCS,h.length);
  IndexReader[] readers=s.getIndexReader().getSequentialSubReaders();
  for (int j=0; j < readers.length; j++) {
    IndexReader reader=readers[j];
    try {
      log("compare: " + innerArray + " to "+ q.valSrc.getValues(reader).getInnerArray());
      assertNotSame("cached field values should not be reused if reader as changed!",innerArray,q.valSrc.getValues(reader).getInnerArray());
    }
 catch (    UnsupportedOperationException e) {
      if (!warned) {
        System.err.println("WARNING: " + testName() + " cannot fully test values of "+ q);
        warned=true;
      }
    }
  }
}
