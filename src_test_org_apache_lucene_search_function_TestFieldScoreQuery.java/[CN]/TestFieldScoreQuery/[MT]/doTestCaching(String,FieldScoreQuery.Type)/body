{
  HashMap expectedArrayTypes=new HashMap();
  expectedArrayTypes.put(FieldScoreQuery.Type.BYTE,new byte[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.SHORT,new short[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.INT,new int[0]);
  expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT,new float[0]);
  IndexSearcher s=new IndexSearcher(dir);
  Object innerArray=null;
  for (int i=0; i < 10; i++) {
    FieldScoreQuery q=new FieldScoreQuery(field,tp);
    Hits h=s.search(q);
    assertEquals("All docs should be matched!",N_DOCS,h.length());
    if (i == 0) {
      innerArray=q.valSrc.getValues(s.getIndexReader()).getInnerArray();
      log(i + ".  compare: " + innerArray.getClass()+ " to "+ expectedArrayTypes.get(tp).getClass());
      assertEquals("field values should be cached in the correct array type!",innerArray.getClass(),expectedArrayTypes.get(tp).getClass());
    }
 else {
      log(i + ".  compare: " + innerArray+ " to "+ q.valSrc.getValues(s.getIndexReader()).getInnerArray());
      assertSame("field values should be cached and reused!",innerArray,q.valSrc.getValues(s.getIndexReader()).getInnerArray());
    }
  }
  s=new IndexSearcher(dir);
  FieldScoreQuery q=new FieldScoreQuery(field,tp);
  Hits h=s.search(q);
  assertEquals("All docs should be matched!",N_DOCS,h.length());
  log("compare: " + innerArray + " to "+ q.valSrc.getValues(s.getIndexReader()).getInnerArray());
  assertNotSame("cached field values should not be reused if reader as changed!",innerArray,q.valSrc.getValues(s.getIndexReader()).getInnerArray());
}
