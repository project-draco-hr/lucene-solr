{
  String payload="{\n" + "          'delete-copy-field' : {\n" + "                       'source' :'replaceFieldA',\n"+ "                       'dest':['replaceDynamicCopyFieldDest']\n"+ "                       },\n"+ "          'delete-field' : {'name':'replaceFieldA'},\n"+ "          'delete-dynamic-field' : {'name' :'replaceDynamicField'},\n"+ "          'delete-field-type' : {'name' :'myNewFieldTypeName'}\n"+ " }";
  String aField="a" + seed;
  String dynamicFldName="*_lol" + seed;
  String dynamicCopyFldDest="hello_lol" + seed;
  String newFieldTypeName="mystr" + seed;
  payload=payload.replace("replaceFieldA",aField);
  payload=payload.replace("replaceDynamicField",dynamicFldName);
  payload=payload.replace("replaceDynamicCopyFieldDest",dynamicCopyFldDest);
  payload=payload.replace("myNewFieldTypeName",newFieldTypeName);
  RestTestHarness publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
  String response=publisher.post("/schema?wt=json",SolrTestCaseJ4.json(payload));
  Map map=(Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
  Object errors=map.get("errors");
  if (errors != null) {
    errs.add(new String(Utils.toJSON(errors),StandardCharsets.UTF_8));
    return;
  }
  Set<String> errmessages=new HashSet<>();
  RestTestHarness harness=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
  try {
    long startTime=System.nanoTime();
    long maxTimeoutMillis=100000;
    while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime,TimeUnit.NANOSECONDS) < maxTimeoutMillis) {
      errmessages.clear();
      Map m=getObj(harness,aField,"fields");
      if (m != null)       errmessages.add(StrUtils.formatString("field {0} still exists",aField));
      m=getObj(harness,dynamicFldName,"dynamicFields");
      if (m != null)       errmessages.add(StrUtils.formatString("dynamic field {0} still exists",dynamicFldName));
      List l=getSourceCopyFields(harness,aField);
      if (checkCopyField(l,aField,dynamicCopyFldDest))       errmessages.add(StrUtils.formatString("CopyField source={0},dest={1} still exists",aField,dynamicCopyFldDest));
      m=getObj(harness,newFieldTypeName,"fieldTypes");
      if (m != null)       errmessages.add(StrUtils.formatString("new type {0} still exists",newFieldTypeName));
      if (errmessages.isEmpty())       break;
      Thread.sleep(10);
    }
  }
  finally {
    harness.close();
  }
  if (!errmessages.isEmpty()) {
    errs.addAll(errmessages);
  }
}
