{
  SolrParams params=req.getParams();
  long timeAllowed=(long)params.getInt(CommonParams.TIME_ALLOWED,-1);
  if (timeAllowed > 0) {
    SolrQueryTimeoutImpl.set(timeAllowed);
  }
  try {
    ReturnFields returnFields=new SolrReturnFields(req);
    rsp.setReturnFields(returnFields);
    int flags=0;
    if (returnFields.wantsScore()) {
      flags|=SolrIndexSearcher.GET_SCORES;
    }
    String defType=params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
    String q=params.get(CommonParams.Q);
    Query query=null;
    SortSpec sortSpec=null;
    List<Query> filters=null;
    try {
      if (q != null) {
        QParser parser=QParser.getParser(q,defType,req);
        query=parser.getQuery();
        sortSpec=parser.getSortSpec(true);
      }
      String[] fqs=req.getParams().getParams(CommonParams.FQ);
      if (fqs != null && fqs.length != 0) {
        filters=new ArrayList<>();
        for (        String fq : fqs) {
          if (fq != null && fq.trim().length() != 0) {
            QParser fqp=QParser.getParser(fq,req);
            filters.add(fqp.getQuery());
          }
        }
      }
    }
 catch (    SyntaxError e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
    }
    SolrIndexSearcher searcher=req.getSearcher();
    MoreLikeThisHelper mlt=new MoreLikeThisHelper(params,searcher);
    TermStyle termStyle=TermStyle.get(params.get(MoreLikeThisParams.INTERESTING_TERMS));
    List<InterestingTerm> interesting=(termStyle == TermStyle.NONE) ? null : new ArrayList<>(mlt.mlt.getMaxQueryTerms());
    DocListAndSet mltDocs=null;
    Reader reader=null;
    try {
      if (q == null || q.trim().length() < 1) {
        Iterable<ContentStream> streams=req.getContentStreams();
        if (streams != null) {
          Iterator<ContentStream> iter=streams.iterator();
          if (iter.hasNext()) {
            reader=iter.next().getReader();
          }
          if (iter.hasNext()) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis does not support multiple ContentStreams");
          }
        }
      }
      int start=params.getInt(CommonParams.START,CommonParams.START_DEFAULT);
      int rows=params.getInt(CommonParams.ROWS,CommonParams.ROWS_DEFAULT);
      if (reader != null) {
        mltDocs=mlt.getMoreLikeThis(reader,start,rows,filters,interesting,flags);
      }
 else       if (q != null) {
        boolean includeMatch=params.getBool(MoreLikeThisParams.MATCH_INCLUDE,true);
        int matchOffset=params.getInt(MoreLikeThisParams.MATCH_OFFSET,0);
        DocList match=searcher.getDocList(query,null,null,matchOffset,1,flags);
        if (includeMatch) {
          rsp.add("match",match);
        }
        DocIterator iterator=match.iterator();
        if (iterator.hasNext()) {
          int id=iterator.nextDoc();
          mltDocs=mlt.getMoreLikeThis(id,start,rows,filters,interesting,flags);
        }
      }
 else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis requires either a query (?q=) or text to find similar documents.");
      }
    }
  finally {
      if (reader != null) {
        reader.close();
      }
    }
    if (mltDocs == null) {
      mltDocs=new DocListAndSet();
    }
    rsp.addResponse(mltDocs.docList);
    if (interesting != null) {
      if (termStyle == TermStyle.DETAILS) {
        NamedList<Float> it=new NamedList<>();
        for (        InterestingTerm t : interesting) {
          it.add(t.term.toString(),t.boost);
        }
        rsp.add("interestingTerms",it);
      }
 else {
        List<String> it=new ArrayList<>(interesting.size());
        for (        InterestingTerm t : interesting) {
          it.add(t.term.text());
        }
        rsp.add("interestingTerms",it);
      }
    }
    if (params.getBool(FacetParams.FACET,false)) {
      if (mltDocs.docSet == null) {
        rsp.add("facet_counts",null);
      }
 else {
        SimpleFacets f=new SimpleFacets(req,mltDocs.docSet,params);
        rsp.add("facet_counts",FacetComponent.getFacetCounts(f));
      }
    }
    boolean dbg=req.getParams().getBool(CommonParams.DEBUG_QUERY,false);
    boolean dbgQuery=false, dbgResults=false;
    if (dbg == false) {
      String[] dbgParams=req.getParams().getParams(CommonParams.DEBUG);
      if (dbgParams != null) {
        for (        String dbgParam : dbgParams) {
          if (dbgParam.equals(CommonParams.QUERY)) {
            dbgQuery=true;
          }
 else           if (dbgParam.equals(CommonParams.RESULTS)) {
            dbgResults=true;
          }
        }
      }
    }
 else {
      dbgQuery=true;
      dbgResults=true;
    }
    if (dbg == true) {
      try {
        NamedList<Object> dbgInfo=SolrPluginUtils.doStandardDebug(req,q,mlt.getRawMLTQuery(),mltDocs.docList,dbgQuery,dbgResults);
        if (null != dbgInfo) {
          if (null != filters) {
            dbgInfo.add("filter_queries",req.getParams().getParams(CommonParams.FQ));
            List<String> fqs=new ArrayList<>(filters.size());
            for (            Query fq : filters) {
              fqs.add(QueryParsing.toString(fq,req.getSchema()));
            }
            dbgInfo.add("parsed_filter_queries",fqs);
          }
          rsp.add("debug",dbgInfo);
        }
      }
 catch (      Exception e) {
        SolrException.log(log,"Exception during debug",e);
        rsp.add("exception_during_debug",SolrException.toStr(e));
      }
    }
  }
 catch (  ExitableDirectoryReader.ExitingReaderException ex) {
    log.warn("Query: " + req.getParamString() + "; "+ ex.getMessage());
  }
 finally {
    SolrQueryTimeoutImpl.reset();
  }
}
