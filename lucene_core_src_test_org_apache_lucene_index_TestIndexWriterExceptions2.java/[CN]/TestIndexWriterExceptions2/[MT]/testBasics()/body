{
  Directory dir=newDirectory();
  if (dir instanceof MockDirectoryWrapper) {
    ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);
    ((MockDirectoryWrapper)dir).setUseSlowOpenClosers(false);
  }
  ByteArrayOutputStream exceptionLog=new ByteArrayOutputStream();
  PrintStream exceptionStream=new PrintStream(exceptionLog,true,"UTF-8");
  final long analyzerSeed=random().nextLong();
  Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      MockTokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,false);
      tokenizer.setEnableChecks(false);
      TokenStream stream=new CrankyTokenFilter(tokenizer,new Random(analyzerSeed));
      return new TokenStreamComponents(tokenizer,stream);
    }
  }
;
  Codec inner=RANDOM_MULTIPLIER > 1 ? Codec.getDefault() : new AssertingCodec();
  Codec codec=new CrankyCodec(inner,new Random(random().nextLong()));
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer);
  conf.setMergeScheduler(new SerialMergeScheduler());
  conf.setCodec(codec);
  int numDocs=atLeast(2500);
  IndexWriter iw=new IndexWriter(dir,conf);
  try {
    for (int i=0; i < numDocs; i++) {
      Document doc=new Document();
      doc.add(newStringField("id",Integer.toString(i),Field.Store.NO));
      doc.add(new NumericDocValuesField("dv",i));
      doc.add(newTextField("text1",TestUtil.randomAnalysisString(random(),20,true),Field.Store.NO));
      try {
        iw.addDocument(doc);
        int thingToDo=random().nextInt(4);
        if (thingToDo == 0) {
          iw.deleteDocuments(new Term("id",Integer.toString(i)));
        }
 else         if (thingToDo == 1 && defaultCodecSupportsFieldUpdates()) {
          iw.updateNumericDocValue(new Term("id",Integer.toString(i)),"dv",i + 1L);
        }
      }
 catch (      Exception e) {
        if (e.getMessage() != null && e.getMessage().startsWith("Fake IOException")) {
          exceptionStream.println("\nTEST: got expected fake exc:" + e.getMessage());
          e.printStackTrace(exceptionStream);
        }
 else {
          Rethrow.rethrow(e);
        }
      }
      if (random().nextInt(10) == 0) {
        try {
          if (random().nextBoolean()) {
            DirectoryReader ir=null;
            try {
              ir=DirectoryReader.open(iw,random().nextBoolean());
              TestUtil.checkReader(ir);
            }
  finally {
              IOUtils.closeWhileHandlingException(ir);
            }
          }
 else {
            iw.commit();
          }
          if (DirectoryReader.indexExists(dir)) {
            TestUtil.checkIndex(dir);
          }
        }
 catch (        Exception e) {
          if (e.getMessage() != null && e.getMessage().startsWith("Fake IOException")) {
            exceptionStream.println("\nTEST: got expected fake exc:" + e.getMessage());
            e.printStackTrace(exceptionStream);
          }
 else {
            Rethrow.rethrow(e);
          }
        }
      }
    }
    try {
      iw.shutdown();
    }
 catch (    Exception e) {
      if (e.getMessage() != null && e.getMessage().startsWith("Fake IOException")) {
        exceptionStream.println("\nTEST: got expected fake exc:" + e.getMessage());
        e.printStackTrace(exceptionStream);
        try {
          iw.rollback();
        }
 catch (        Throwable t) {
        }
      }
 else {
        Rethrow.rethrow(e);
      }
    }
    dir.close();
  }
 catch (  Throwable t) {
    System.out.println("Unexpected exception: dumping fake-exception-log:...");
    exceptionStream.flush();
    System.out.println(exceptionLog.toString("UTF-8"));
    System.out.flush();
    Rethrow.rethrow(t);
  }
  if (VERBOSE) {
    System.out.println("TEST PASSED: dumping fake-exception-log:...");
    System.out.println(exceptionLog.toString("UTF-8"));
  }
}
