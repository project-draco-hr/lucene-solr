{
  String[] happyPathAsserts=new String[]{"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=" + (peopleMultiplier * deptMultiplier),"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=" + (peopleMultiplier * deptMultiplier),"//result[@numFound=" + peopleMultiplier + "]"};
  Random random1=random();
  assertQ("dave works at both, whether we set a  default separator or both",req(new String[]{"q","name_s:dave","indent","true","fl",(random().nextBoolean() ? "name_s_dv,dept_ss_dv" : "*") + ",subq1:[subquery " + ((random1.nextBoolean() ? "" : "separator=,"))+ "]","rows","" + peopleMultiplier,"subq1.q","{!terms f=dept_id_s v=$row.dept_ss_dv " + ((random1.nextBoolean() ? "" : "separator=,")) + "}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2),"subq1.logParamsList","q,fl,rows,row.dept_ss_dv"}),happyPathAsserts);
  assertQ("even via numbers",req("q","name_s:dave","indent","true","fl","dept_is_dv,name_s_dv,subq1:[subquery]","rows","" + (peopleMultiplier),"subq1.q","{!terms f=dept_id_i v=$row.dept_is_dv}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),happyPathAsserts);
  assertQ("even if we set a separator both",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\" \"]","rows","" + (peopleMultiplier),"subq1.q","{!terms f=dept_id_s v=$row.dept_ss_dv separator=\" \"}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),happyPathAsserts);
  String[] noMatchAtSubQ=new String[]{"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=" + (peopleMultiplier),"//result[@numFound=" + peopleMultiplier + "]"};
  assertQ("different separators, no match",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv,subq1:[subquery]","rows","" + (peopleMultiplier),"subq1.q","{!terms f=dept_id_s v=$row.dept_ss_dv separator=\" \"}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),noMatchAtSubQ);
  assertQ("and no matter where",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv,subq1:[subquery separator=\" \"]","rows","" + (peopleMultiplier),"subq1.q","{!terms f=dept_id_s v=$row.dept_ss_dv}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),noMatchAtSubQ);
  assertQ("setting a wrong parser gets you nowhere",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv,subq1:[subquery]","rows","" + (peopleMultiplier),"subq1.q","{!term f=dept_id_s v=$row.dept_ss_dv}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),noMatchAtSubQ);
  assertQ("but it luckily works with default query parser, but it's not really reliable",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv,subq1:[subquery separator=\" \"]","rows","" + (peopleMultiplier),"subq1.q","{!lucene df=dept_id_s v=$row.dept_ss_dv}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),happyPathAsserts);
  assertQ("even lucene qp can't help at any separator but space",req("q","name_s:dave","indent","true","fl","dept_ss_dv,name_s_dv," + "subq1:[subquery " + (random().nextBoolean() ? "" : "separator=" + ((random().nextBoolean() ? "" : ","))) + "]","rows","" + (peopleMultiplier),"subq1.q","{!lucene df=dept_id_s v=$row.dept_ss_dv}","subq1.fl","text_t","subq1.indent","true","subq1.rows","" + (deptMultiplier * 2)),noMatchAtSubQ);
}
