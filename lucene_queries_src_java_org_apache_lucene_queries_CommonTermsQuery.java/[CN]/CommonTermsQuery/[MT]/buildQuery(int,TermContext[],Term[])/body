{
  List<Query> lowFreqQueries=new ArrayList<>();
  List<Query> highFreqQueries=new ArrayList<>();
  for (int i=0; i < queryTerms.length; i++) {
    TermContext termContext=contextArray[i];
    if (termContext == null) {
      lowFreqQueries.add(newTermQuery(queryTerms[i],null));
    }
 else {
      if ((maxTermFrequency >= 1f && termContext.docFreq() > maxTermFrequency) || (termContext.docFreq() > (int)Math.ceil(maxTermFrequency * (float)maxDoc))) {
        highFreqQueries.add(newTermQuery(queryTerms[i],termContext));
      }
 else {
        lowFreqQueries.add(newTermQuery(queryTerms[i],termContext));
      }
    }
  }
  final int numLowFreqClauses=lowFreqQueries.size();
  final int numHighFreqClauses=highFreqQueries.size();
  Occur lowFreqOccur=this.lowFreqOccur;
  Occur highFreqOccur=this.highFreqOccur;
  int lowFreqMinShouldMatch=0;
  int highFreqMinShouldMatch=0;
  if (lowFreqOccur == Occur.SHOULD && numLowFreqClauses > 0) {
    lowFreqMinShouldMatch=calcLowFreqMinimumNumberShouldMatch(numLowFreqClauses);
  }
  if (highFreqOccur == Occur.SHOULD && numHighFreqClauses > 0) {
    highFreqMinShouldMatch=calcHighFreqMinimumNumberShouldMatch(numHighFreqClauses);
  }
  if (lowFreqQueries.isEmpty()) {
    if (highFreqMinShouldMatch == 0 && highFreqOccur != Occur.MUST) {
      highFreqOccur=Occur.MUST;
    }
  }
  BooleanQuery.Builder builder=new BooleanQuery.Builder();
  builder.setDisableCoord(true);
  if (lowFreqQueries.isEmpty() == false) {
    BooleanQuery.Builder lowFreq=new BooleanQuery.Builder();
    lowFreq.setDisableCoord(disableCoord);
    for (    Query query : lowFreqQueries) {
      lowFreq.add(query,lowFreqOccur);
    }
    lowFreq.setMinimumNumberShouldMatch(lowFreqMinShouldMatch);
    Query lowFreqQuery=lowFreq.build();
    lowFreqQuery.setBoost(lowFreqBoost);
    builder.add(lowFreqQuery,Occur.MUST);
  }
  if (highFreqQueries.isEmpty() == false) {
    BooleanQuery.Builder highFreq=new BooleanQuery.Builder();
    highFreq.setDisableCoord(disableCoord);
    for (    Query query : highFreqQueries) {
      highFreq.add(query,highFreqOccur);
    }
    highFreq.setMinimumNumberShouldMatch(highFreqMinShouldMatch);
    Query highFreqQuery=highFreq.build();
    highFreqQuery.setBoost(highFreqBoost);
    builder.add(highFreqQuery,Occur.SHOULD);
  }
  Query rewritten=builder.build();
  rewritten.setBoost(getBoost());
  return rewritten;
}
