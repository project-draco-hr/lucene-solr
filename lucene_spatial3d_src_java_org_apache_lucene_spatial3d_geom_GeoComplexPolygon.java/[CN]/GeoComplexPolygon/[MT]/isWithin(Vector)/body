{
  if (testPoint.isNumericallyIdentical(thePoint)) {
    return true;
  }
  if (testPointZPlane.evaluateIsZero(thePoint)) {
    final SidedPlane testPointCutoff=new SidedPlane(thePoint,testPointZPlane,testPoint);
    final SidedPlane checkPointCutoff=new SidedPlane(testPoint,testPointZPlane,thePoint);
    final CrossingEdgeIterator crossingEdgeIterator=new CrossingEdgeIterator(testPointZPlane,testPointCutoff,checkPointCutoff);
    final XYZBounds testZPlaneBounds=new XYZBounds();
    testPointZPlane.recordBounds(planetModel,testZPlaneBounds,testPointCutoff,checkPointCutoff);
    final double xDelta=testZPlaneBounds.getMaximumX() - testZPlaneBounds.getMinimumX();
    final double yDelta=testZPlaneBounds.getMaximumY() - testZPlaneBounds.getMinimumY();
    if (xDelta <= yDelta) {
      xTree.traverse(crossingEdgeIterator,testZPlaneBounds.getMinimumX(),testZPlaneBounds.getMaximumX());
    }
 else     if (yDelta <= xDelta) {
      yTree.traverse(crossingEdgeIterator,testZPlaneBounds.getMinimumY(),testZPlaneBounds.getMaximumY());
    }
    return ((crossingEdgeIterator.getCrossingCount() & 0x00000001) == 0) ? testPointInSet : !testPointInSet;
  }
 else {
    final Plane xyPlane=new Plane(planetModel,z);
  }
  return false;
}
