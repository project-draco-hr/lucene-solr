{
  String authcPrefix="/admin/authentication";
  String authzPrefix="/admin/authorization";
  String old=cloudSolrClient.getDefaultCollection();
  cloudSolrClient.setDefaultCollection(null);
  NamedList<Object> rsp;
  HttpClient cl=cloudSolrClient.getLbClient().getHttpClient();
  String baseUrl=getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName),random()).getStr(BASE_URL_PROP);
  verifySecurityStatus(cl,baseUrl + authcPrefix,"/errorMessages",null,20);
  zkClient.setData("/security.json",STD_CONF.replaceAll("'","\"").getBytes(UTF_8),true);
  verifySecurityStatus(cl,baseUrl + authcPrefix,"authentication/class","solr.BasicAuthPlugin",20);
  boolean found=false;
  for (  JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {
    if (baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))) {
      found=true;
      jettySolrRunner.stop();
      jettySolrRunner.start();
      verifySecurityStatus(cl,baseUrl + authcPrefix,"authentication/class","solr.BasicAuthPlugin",20);
      break;
    }
  }
  assertTrue("No server found to restart , looking for : " + baseUrl,found);
  String command="{\n" + "'set-user': {'harry':'HarryIsCool'}\n" + "}";
  GenericSolrRequest genericReq=new GenericSolrRequest(SolrRequest.METHOD.POST,authcPrefix,new ModifiableSolrParams());
  genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8),"")));
  try {
    cloudSolrClient.request(genericReq);
    fail("Should have failed with a 401");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
  }
  command="{\n" + "'set-user': {'harry':'HarryIsUberCool'}\n" + "}";
  HttpPost httpPost=new HttpPost(baseUrl + authcPrefix);
  setBasicAuthHeader(httpPost,"solr","SolrRocks");
  httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));
  httpPost.addHeader("Content-Type","application/json; charset=UTF-8");
  verifySecurityStatus(cl,baseUrl + authcPrefix,"authentication.enabled","true",20);
  HttpResponse r=cl.execute(httpPost);
  int statusCode=r.getStatusLine().getStatusCode();
  assertEquals("proper_cred sent, but access denied",200,statusCode);
  baseUrl=getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName),random()).getStr(BASE_URL_PROP);
  verifySecurityStatus(cl,baseUrl + authcPrefix,"authentication/credentials/harry",NOT_NULL_PREDICATE,20);
  command="{\n" + "'set-user-role': {'harry':'admin'}\n" + "}";
  httpPost=new HttpPost(baseUrl + authzPrefix);
  setBasicAuthHeader(httpPost,"solr","SolrRocks");
  httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));
  httpPost.addHeader("Content-Type","application/json; charset=UTF-8");
  r=cl.execute(httpPost);
  assertEquals(200,r.getStatusLine().getStatusCode());
  baseUrl=getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName),random()).getStr(BASE_URL_PROP);
  verifySecurityStatus(cl,baseUrl + authzPrefix,"authorization/user-role/harry",NOT_NULL_PREDICATE,20);
  httpPost=new HttpPost(baseUrl + authzPrefix);
  setBasicAuthHeader(httpPost,"harry","HarryIsUberCool");
  httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap("set-permission",Utils.makeMap("name","x-update","collection","x","path","/update/*","role","dev")))));
  httpPost.addHeader("Content-Type","application/json; charset=UTF-8");
  verifySecurityStatus(cl,baseUrl + authzPrefix,"authorization/user-role/harry",NOT_NULL_PREDICATE,20);
  r=cl.execute(httpPost);
  assertEquals(200,r.getStatusLine().getStatusCode());
  verifySecurityStatus(cl,baseUrl + authzPrefix,"authorization/permissions[1]/collection","x",20);
  httpPost=new HttpPost(baseUrl + authzPrefix);
  setBasicAuthHeader(httpPost,"harry","HarryIsUberCool");
  httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap("set-permission",Utils.makeMap("name","collection-admin-edit","role","admin")))));
  r=cl.execute(httpPost);
  verifySecurityStatus(cl,baseUrl + authzPrefix,"authorization/permissions[2]/name","collection-admin-edit",20);
  CollectionAdminRequest.Reload reload=new CollectionAdminRequest.Reload();
  reload.setCollectionName(defaultCollName);
  HttpSolrClient solrClient=new HttpSolrClient(baseUrl);
  try {
    rsp=solrClient.request(reload);
    fail("must have failed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
  }
  reload.setMethod(SolrRequest.METHOD.POST);
  try {
    rsp=solrClient.request(reload);
    fail("must have failed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
  }
  cloudSolrClient.request(new CollectionAdminRequest.Reload().setCollectionName(defaultCollName).setBasicAuthCredentials("harry","HarryIsUberCool"));
  try {
    cloudSolrClient.request(new CollectionAdminRequest.Reload().setCollectionName(defaultCollName).setBasicAuthCredentials("harry","Cool12345"));
    fail("This should not succeed");
  }
 catch (  HttpSolrClient.RemoteSolrException e) {
  }
  cloudSolrClient.setDefaultCollection(old);
  httpPost=new HttpPost(baseUrl + authzPrefix);
  setBasicAuthHeader(httpPost,"harry","HarryIsUberCool");
  httpPost.setEntity(new ByteArrayEntity("{set-permission : { name : update , role : admin}}".getBytes(UTF_8)));
  httpPost.addHeader("Content-Type","application/json; charset=UTF-8");
  r=cl.execute(httpPost);
  assertEquals(200,r.getStatusLine().getStatusCode());
  SolrInputDocument doc=new SolrInputDocument();
  doc.setField("id","4");
  UpdateRequest update=new UpdateRequest();
  update.setBasicAuthCredentials("harry","HarryIsUberCool");
  update.add(doc);
  update.setCommitWithin(100);
  cloudSolrClient.request(update);
}
