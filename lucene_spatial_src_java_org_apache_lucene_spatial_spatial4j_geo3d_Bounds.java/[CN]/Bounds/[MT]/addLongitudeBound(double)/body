{
  if (leftLongitude == null && rightLongitude == null) {
    leftLongitude=longitude;
    rightLongitude=longitude;
  }
 else {
    double currentLeftLongitude=leftLongitude;
    double currentRightLongitude=rightLongitude;
    if (currentRightLongitude < currentLeftLongitude)     currentRightLongitude+=2.0 * Math.PI;
    if (longitude < currentLeftLongitude)     longitude+=2.0 * Math.PI;
    if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {
      double leftExtensionAmt;
      double rightExtensionAmt;
      if (longitude < currentLeftLongitude) {
        leftExtensionAmt=currentLeftLongitude - longitude;
      }
 else {
        leftExtensionAmt=currentLeftLongitude + 2.0 * Math.PI - longitude;
      }
      if (longitude > currentRightLongitude) {
        rightExtensionAmt=longitude - currentRightLongitude;
      }
 else {
        rightExtensionAmt=longitude + 2.0 * Math.PI - currentRightLongitude;
      }
      if (leftExtensionAmt < rightExtensionAmt) {
        currentLeftLongitude=leftLongitude - leftExtensionAmt;
        while (currentLeftLongitude <= -Math.PI) {
          currentLeftLongitude+=2.0 * Math.PI;
        }
        leftLongitude=currentLeftLongitude;
      }
 else {
        currentRightLongitude=rightLongitude + rightExtensionAmt;
        while (currentRightLongitude > Math.PI) {
          currentRightLongitude-=2.0 * Math.PI;
        }
        rightLongitude=currentRightLongitude;
      }
    }
  }
  double testRightLongitude=rightLongitude;
  if (testRightLongitude < leftLongitude)   testRightLongitude+=Math.PI * 2.0;
  if (testRightLongitude - leftLongitude >= Math.PI) {
    noLongitudeBound=true;
    leftLongitude=null;
    rightLongitude=null;
  }
}
