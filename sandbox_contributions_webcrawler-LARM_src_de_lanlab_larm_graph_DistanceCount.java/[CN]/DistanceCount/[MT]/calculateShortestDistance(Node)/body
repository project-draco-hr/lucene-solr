{
  clearDistances();
  firstNode.setDistance(0);
  nodesToDo.addLast(firstNode);
  int calculations=0;
  while (!nodesToDo.isEmpty()) {
    if (calculations % 100000 == 0) {
      System.out.println("Calculations: " + calculations + "; nodes to go: "+ nodesToDo.size()+ " total Mem: "+ Runtime.getRuntime().totalMemory()+ "; free mem: "+ Runtime.getRuntime().freeMemory());
    }
    calculations++;
    Node act=(Node)nodesToDo.removeFirst();
    LinkedList outTrans=act.getOutgoing();
    float distance=act.getDistance();
    Iterator i=outTrans.iterator();
    while (i.hasNext()) {
      Transition t=(Transition)i.next();
      float transDistance=t.getDistance();
      float newDistance=distance + (t.isFrame() ? 0.25f : 1f);
      if (transDistance > newDistance) {
        t.setDistance(newDistance);
        Node to=t.getTo();
        if (to.distance > distance) {
          to.setDistance(newDistance);
          nodesToDo.addLast(to);
        }
      }
    }
  }
  System.out.println("Calculations: " + calculations);
}
