{
  System.out.println("reading file...");
  long t1=System.currentTimeMillis();
  BufferedReader b=new BufferedReader(new FileReader(filename));
  String line;
  boolean firstNotFound=true;
  Node firstNode=null;
  int lines=0;
  while ((line=b.readLine()) != null) {
    lines++;
    String title=null;
    try {
      StringTokenizer st=new StringTokenizer(line,"\t");
      String from=st.nextToken();
      if (from.endsWith("/")) {
        from=from.substring(0,from.length() - 1);
      }
      from=from.toLowerCase();
      String to=st.nextToken();
      if (to.endsWith("/")) {
        to=to.substring(0,to.length() - 1);
      }
      to=to.toLowerCase();
      boolean isFrame=(Integer.parseInt(st.nextToken()) == 1);
      if (st.countTokens() > 3) {
        title="<untitled>";
        st.nextToken();
        st.nextToken();
        st.nextToken();
        title=st.nextToken();
        if (title.length() > 2) {
          title=title.substring(1,title.length() - 1);
          int indexOfPara=title.indexOf("\"");
          if (indexOfPara > -1) {
            title=title.substring(0,indexOfPara);
          }
        }
      }
      Node fromNode=getOrCreateNode(from,null);
      Node toNode=getOrCreateNode(to,title);
      Transition t=new Transition(fromNode,toNode,isFrame);
      if (lines % 10000 == 0) {
        System.out.println("" + lines + " Lines; "+ nodes.size()+ " nodes");
      }
    }
 catch (    NoSuchElementException e) {
      System.out.println("Malformed line " + lines + ": field number doesn't match");
    }
catch (    NumberFormatException e) {
      System.out.println("Malformed line " + lines + ": NumberFormat wrong");
    }
  }
  System.out.println("finished; b" + lines + " Lines; "+ nodes.size()+ " nodes");
  long t2=System.currentTimeMillis();
  System.out.println("" + (t2 - t1) + " ms");
}
