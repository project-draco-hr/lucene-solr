{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())));
  int numDocs=atLeast(50);
  int totalDocsWithZero=0;
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    int num=random().nextInt(10);
    if (num == 0) {
      totalDocsWithZero++;
    }
    doc.add(newTextField("field","" + num,Field.Store.YES));
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  final boolean queryFirst=random().nextBoolean();
  IndexSearcher searcher=newSearcher(reader);
  Query query=new FilteredQuery(new TermQuery(new Term("field","0")),new Filter(){
    @Override public DocIdSet getDocIdSet(    final AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      return new DocIdSet(){
        @Override public long ramBytesUsed(){
          return 0L;
        }
        @Override public Bits bits() throws IOException {
          return null;
        }
        @Override public DocIdSetIterator iterator() throws IOException {
          final DocsEnum termDocsEnum=context.reader().termDocsEnum(new Term("field","0"));
          if (termDocsEnum == null) {
            return null;
          }
          return new DocIdSetIterator(){
            boolean nextCalled;
            boolean advanceCalled;
            @Override public int nextDoc() throws IOException {
              assertTrue("queryFirst: " + queryFirst + " advanced: "+ advanceCalled+ " next: "+ nextCalled,nextCalled || advanceCalled ^ !queryFirst);
              nextCalled=true;
              return termDocsEnum.nextDoc();
            }
            @Override public int docID(){
              return termDocsEnum.docID();
            }
            @Override public int advance(            int target) throws IOException {
              assertTrue("queryFirst: " + queryFirst + " advanced: "+ advanceCalled+ " next: "+ nextCalled,advanceCalled || nextCalled ^ queryFirst);
              advanceCalled=true;
              return termDocsEnum.advance(target);
            }
            @Override public long cost(){
              return termDocsEnum.cost();
            }
          }
;
        }
      }
;
    }
  }
,queryFirst ? FilteredQuery.LEAP_FROG_QUERY_FIRST_STRATEGY : random().nextBoolean() ? FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY : FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY);
  TopDocs search=searcher.search(query,10);
  assertEquals(totalDocsWithZero,search.totalHits);
  IOUtils.close(reader,directory);
}
