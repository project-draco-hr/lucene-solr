{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())));
  int numDocs=atLeast(50);
  int totalDocsWithZero=0;
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    int num=random().nextInt(5);
    if (num == 0) {
      totalDocsWithZero++;
    }
    doc.add(newTextField("field","" + num,Field.Store.YES));
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  IndexSearcher searcher=newSearcher(reader);
  Query query=new FilteredQuery(new TermQuery(new Term("field","0")),new Filter(){
    @Override public DocIdSet getDocIdSet(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      final boolean nullBitset=random().nextInt(10) == 5;
      final LeafReader reader=context.reader();
      PostingsEnum termPostingsEnum=reader.postings(new Term("field","0"));
      if (termPostingsEnum == null) {
        return null;
      }
      final BitSet bitSet=new BitSet(reader.maxDoc());
      int d;
      while ((d=termPostingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {
        bitSet.set(d,true);
      }
      return new DocIdSet(){
        @Override public long ramBytesUsed(){
          return 0L;
        }
        @Override public Bits bits() throws IOException {
          if (nullBitset) {
            return null;
          }
          return new Bits(){
            @Override public boolean get(            int index){
              assertTrue("filter was called for a non-matching doc",bitSet.get(index));
              return bitSet.get(index);
            }
            @Override public int length(){
              return bitSet.length();
            }
          }
;
        }
        @Override public DocIdSetIterator iterator() throws IOException {
          assertTrue("iterator should not be called if bitset is present",nullBitset);
          return reader.postings(new Term("field","0"));
        }
      }
;
    }
    @Override public String toString(    String field){
      return "filterField0";
    }
  }
,FilteredQuery.QUERY_FIRST_FILTER_STRATEGY);
  TopDocs search=searcher.search(query,10);
  assertEquals(totalDocsWithZero,search.totalHits);
  IOUtils.close(reader,directory);
}
