{
  final String baseUrl=getBaseUrl();
  final CloudDescriptor cloudDesc=desc.getCloudDescriptor();
  final String collection=cloudDesc.getCollectionName();
  log.info("Attempting to update " + ZkStateReader.CLUSTER_STATE + " version "+ null);
  CloudState state=CloudState.load(zkClient,zkStateReader.getCloudState().getLiveNodes());
  final String coreZkNodeName=getNodeName() + "_" + coreName;
  String shardId=cloudDesc.getShardId();
  Map<String,String> props=new HashMap<String,String>();
  props.put(ZkStateReader.BASE_URL_PROP,baseUrl);
  props.put(ZkStateReader.CORE_NAME_PROP,coreName);
  props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());
  props.put(ZkStateReader.ROLES_PROP,cloudDesc.getRoles());
  props.put(ZkStateReader.STATE_PROP,ZkStateReader.DOWN);
  if (log.isInfoEnabled()) {
    log.info("Register shard - core:" + coreName + " address:"+ baseUrl+ " shardId:"+ shardId);
  }
  ZkNodeProps leaderProps=new ZkNodeProps(ZkStateReader.BASE_URL_PROP,props.get(ZkStateReader.BASE_URL_PROP),ZkStateReader.CORE_NAME_PROP,props.get(ZkStateReader.CORE_NAME_PROP),ZkStateReader.NODE_NAME_PROP,props.get(ZkStateReader.NODE_NAME_PROP));
  joinElection(collection,coreZkNodeName,shardId,leaderProps);
  String leaderUrl=zkStateReader.getLeaderUrl(collection,cloudDesc.getShardId(),30000);
  String ourUrl=ZkCoreNodeProps.getCoreUrl(baseUrl,coreName);
  log.info("We are " + ourUrl + " and leader is "+ leaderUrl);
  boolean isLeader=leaderUrl.equals(ourUrl);
  SolrCore core=null;
  if (cc != null) {
    try {
      core=cc.getCore(desc.getName());
      if (isLeader) {
        UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
        if (!core.isReloaded() && ulog != null) {
          Future<UpdateLog.RecoveryInfo> recoveryFuture=core.getUpdateHandler().getUpdateLog().recoverFromLog();
          if (recoveryFuture != null) {
            recoveryFuture.get();
          }
        }
      }
      boolean didRecovery=checkRecovery(coreName,desc,recoverReloadedCores,isLeader,cloudDesc,collection,coreZkNodeName,shardId,leaderProps,core,cc);
      if (didRecovery) {
        publishAsActive(baseUrl,desc,coreZkNodeName,coreName);
      }
    }
  finally {
      if (core != null) {
        core.close();
      }
    }
  }
 else {
    publishAsActive(baseUrl,desc,coreZkNodeName,coreName);
  }
  zkStateReader.updateCloudState(true);
  return shardId;
}
