{
  final String baseUrl=getBaseUrl();
  final CloudDescriptor cloudDesc=desc.getCloudDescriptor();
  final String collection=cloudDesc.getCollectionName();
  final String coreZkNodeName=getNodeName() + "_" + coreName;
  String shardId=cloudDesc.getShardId();
  Map<String,String> props=new HashMap<String,String>();
  props.put(ZkStateReader.BASE_URL_PROP,baseUrl);
  props.put(ZkStateReader.CORE_NAME_PROP,coreName);
  props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());
  if (log.isInfoEnabled()) {
    log.info("Register shard - core:" + coreName + " address:"+ baseUrl+ " shardId:"+ shardId);
  }
  ZkNodeProps leaderProps=new ZkNodeProps(props);
  try {
    joinElection(desc);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
catch (  KeeperException e) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
catch (  IOException e) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
  String leaderUrl=getLeaderProps(collection,cloudDesc.getShardId()).getCoreUrl();
  String cloudStateLeader=zkStateReader.getLeaderUrl(collection,cloudDesc.getShardId(),30000);
  int tries=0;
  while (!leaderUrl.equals(cloudStateLeader)) {
    if (tries == 60) {
      throw new SolrException(ErrorCode.SERVER_ERROR,"There is conflicting information about the leader of shard: " + cloudDesc.getShardId() + " our state says:"+ leaderUrl+ " but zookeeper says:"+ cloudStateLeader);
    }
    Thread.sleep(1000);
    tries++;
    cloudStateLeader=zkStateReader.getLeaderUrl(collection,cloudDesc.getShardId(),30000);
  }
  String ourUrl=ZkCoreNodeProps.getCoreUrl(baseUrl,coreName);
  log.info("We are " + ourUrl + " and leader is "+ leaderUrl);
  boolean isLeader=leaderUrl.equals(ourUrl);
  SolrCore core=null;
  if (cc != null) {
    try {
      core=cc.getCore(desc.getName());
      UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
      if (!core.isReloaded() && ulog != null) {
        Future<UpdateLog.RecoveryInfo> recoveryFuture=core.getUpdateHandler().getUpdateLog().recoverFromLog();
        if (recoveryFuture != null) {
          recoveryFuture.get();
        }
 else {
          log.info("No LogReplay needed for core=" + core.getName() + " baseURL="+ baseUrl);
        }
      }
      boolean didRecovery=checkRecovery(coreName,desc,recoverReloadedCores,isLeader,cloudDesc,collection,coreZkNodeName,shardId,leaderProps,core,cc);
      if (!didRecovery) {
        publish(desc,ZkStateReader.ACTIVE);
      }
    }
  finally {
      if (core != null) {
        core.close();
      }
    }
  }
 else {
    publish(desc,ZkStateReader.ACTIVE);
  }
  zkStateReader.updateCloudState(true);
  return shardId;
}
