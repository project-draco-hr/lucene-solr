{
  final String baseUrl=getBaseUrl();
  final CloudDescriptor cloudDesc=desc.getCloudDescriptor();
  final String collection=cloudDesc.getCollectionName();
  final String coreZkNodeName=getNodeName() + "_" + coreName;
  String shardId=cloudDesc.getShardId();
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(ZkStateReader.BASE_URL_PROP,baseUrl);
  props.put(ZkStateReader.CORE_NAME_PROP,coreName);
  props.put(ZkStateReader.NODE_NAME_PROP,getNodeName());
  if (log.isInfoEnabled()) {
    log.info("Register replica - core:" + coreName + " address:"+ baseUrl+ " collection:"+ cloudDesc.getCollectionName()+ " shard:"+ shardId);
  }
  ZkNodeProps leaderProps=new ZkNodeProps(props);
  try {
    joinElection(desc,afterExpiration);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
catch (  KeeperException e) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
catch (  IOException e) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
  }
  String leaderUrl=getLeader(cloudDesc,Integer.parseInt(leaderVoteWait) + 600000);
  String ourUrl=ZkCoreNodeProps.getCoreUrl(baseUrl,coreName);
  log.info("We are " + ourUrl + " and leader is "+ leaderUrl);
  boolean isLeader=leaderUrl.equals(ourUrl);
  SolrCore core=null;
  try {
    core=cc.getCore(desc.getName());
    UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
    if (!core.isReloaded() && ulog != null) {
      Future<UpdateLog.RecoveryInfo> recoveryFuture=core.getUpdateHandler().getUpdateLog().recoverFromLog();
      if (recoveryFuture != null) {
        recoveryFuture.get();
      }
 else {
        log.info("No LogReplay needed for core=" + core.getName() + " baseURL="+ baseUrl);
      }
    }
    boolean didRecovery=checkRecovery(coreName,desc,recoverReloadedCores,isLeader,cloudDesc,collection,coreZkNodeName,shardId,leaderProps,core,cc);
    if (!didRecovery) {
      publish(desc,ZkStateReader.ACTIVE);
    }
  }
  finally {
    if (core != null) {
      core.close();
    }
  }
  zkStateReader.updateClusterState(true);
  return shardId;
}
