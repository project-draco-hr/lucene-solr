{
  CloudDescriptor cloudDesc=descriptor.getCloudDescriptor();
  String collection=cloudDesc.getCollectionName();
  String shard=cloudDesc.getShardId();
  ZkCoreNodeProps leaderProps=null;
  int retries=6;
  for (int i=0; i < retries; i++) {
    try {
      if (isClosed) {
        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"We have been closed");
      }
      leaderProps=getLeaderProps(collection,shard,30000);
      break;
    }
 catch (    Exception e) {
      SolrException.log(log,"There was a problem finding the leader in zk",e);
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e1) {
        Thread.currentThread().interrupt();
      }
      if (i == retries - 1) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"There was a problem finding the leader in zk");
      }
    }
  }
  String leaderBaseUrl=leaderProps.getBaseUrl();
  String leaderCoreName=leaderProps.getCoreName();
  String myCoreNodeName=cloudDesc.getCoreNodeName();
  String myCoreName=descriptor.getName();
  String ourUrl=ZkCoreNodeProps.getCoreUrl(getBaseUrl(),myCoreName);
  boolean isLeader=leaderProps.getCoreUrl().equals(ourUrl);
  if (!isLeader && !SKIP_AUTO_RECOVERY) {
    String lirState=null;
    try {
      lirState=getLeaderInitiatedRecoveryState(collection,shard,myCoreNodeName);
    }
 catch (    Exception exc) {
      log.error("Failed to determine if replica " + myCoreNodeName + " is in leader-initiated recovery due to: "+ exc,exc);
    }
    if (lirState != null) {
      log.info("Replica " + myCoreNodeName + " is already in leader-initiated recovery, so not waiting for leader to see down state.");
    }
 else {
      log.info("Replica " + myCoreNodeName + " NOT in leader-initiated recovery, need to wait for leader to see down state.");
      HttpSolrServer server=null;
      server=new HttpSolrServer(leaderBaseUrl);
      try {
        server.setConnectionTimeout(15000);
        server.setSoTimeout(120000);
        WaitForState prepCmd=new WaitForState();
        prepCmd.setCoreName(leaderCoreName);
        prepCmd.setNodeName(getNodeName());
        prepCmd.setCoreNodeName(coreZkNodeName);
        prepCmd.setState(ZkStateReader.DOWN);
        retries=6;
        for (int i=0; i < retries; i++) {
          if (isClosed) {
            throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"We have been closed");
          }
          try {
            server.request(prepCmd);
            break;
          }
 catch (          Exception e) {
            SolrException.log(log,"There was a problem making a request to the leader",e);
            try {
              Thread.sleep(2000);
            }
 catch (            InterruptedException e1) {
              Thread.currentThread().interrupt();
            }
            if (i == retries - 1) {
              throw new SolrException(ErrorCode.SERVER_ERROR,"There was a problem making a request to the leader");
            }
          }
        }
      }
  finally {
        server.shutdown();
      }
    }
  }
  return leaderProps;
}
