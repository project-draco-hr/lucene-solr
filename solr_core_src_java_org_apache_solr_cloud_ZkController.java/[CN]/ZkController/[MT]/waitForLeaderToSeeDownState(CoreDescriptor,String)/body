{
  CloudDescriptor cloudDesc=descriptor.getCloudDescriptor();
  String collection=cloudDesc.getCollectionName();
  String shard=cloudDesc.getShardId();
  ZkCoreNodeProps leaderProps=null;
  int retries=6;
  for (int i=0; i < retries; i++) {
    try {
      leaderProps=getLeaderProps(collection,shard);
      break;
    }
 catch (    Exception e) {
      SolrException.log(log,"There was a problem finding the leader in zk",e);
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e1) {
        Thread.currentThread().interrupt();
      }
      if (i == retries - 1) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"There was a problem finding the leader in zk");
      }
    }
  }
  String leaderBaseUrl=leaderProps.getBaseUrl();
  String leaderCoreName=leaderProps.getCoreName();
  String ourUrl=ZkCoreNodeProps.getCoreUrl(getBaseUrl(),descriptor.getName());
  boolean isLeader=leaderProps.getCoreUrl().equals(ourUrl);
  if (!isLeader && !SKIP_AUTO_RECOVERY) {
    CommonsHttpSolrServer server=null;
    try {
      server=new CommonsHttpSolrServer(leaderBaseUrl);
    }
 catch (    MalformedURLException e) {
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
    server.setConnectionTimeout(45000);
    server.setSoTimeout(45000);
    WaitForState prepCmd=new WaitForState();
    prepCmd.setCoreName(leaderCoreName);
    prepCmd.setNodeName(getNodeName());
    prepCmd.setCoreNodeName(coreZkNodeName);
    prepCmd.setState(ZkStateReader.DOWN);
    prepCmd.setPauseFor(0);
    retries=6;
    for (int i=0; i < retries; i++) {
      try {
        server.request(prepCmd);
        break;
      }
 catch (      Exception e) {
        SolrException.log(log,"There was a problem making a request to the leader",e);
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e1) {
          Thread.currentThread().interrupt();
        }
        if (i == retries - 1) {
          throw new SolrException(ErrorCode.SERVER_ERROR,"There was a problem making a request to the leader");
        }
      }
    }
    server.shutdown();
  }
  return leaderProps;
}
