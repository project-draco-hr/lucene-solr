{
  String collection=cd.getCollectionName();
  log.debug("Check for collection zkNode:" + collection);
  String collectionPath=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection;
  try {
    if (!zkClient.exists(collectionPath,true)) {
      log.debug("Creating collection in ZooKeeper:" + collection);
      try {
        Map<String,Object> collectionProps=new HashMap<>();
        String defaultConfigName=System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP,collection);
        if (cd.getParams().size() > 0) {
          collectionProps.putAll(cd.getParams());
          if (!collectionProps.containsKey(CONFIGNAME_PROP)) {
            getConfName(collection,collectionPath,collectionProps);
          }
        }
 else         if (System.getProperty("bootstrap_confdir") != null) {
          log.info("Setting config for collection:" + collection + " to "+ defaultConfigName);
          Properties sysProps=System.getProperties();
          for (          String sprop : System.getProperties().stringPropertyNames()) {
            if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {
              collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()),sysProps.getProperty(sprop));
            }
          }
          if (!collectionProps.containsKey(CONFIGNAME_PROP))           collectionProps.put(CONFIGNAME_PROP,defaultConfigName);
        }
 else         if (Boolean.getBoolean("bootstrap_conf")) {
          collectionProps.put(CONFIGNAME_PROP,cd.getCollectionName());
        }
 else {
          getConfName(collection,collectionPath,collectionProps);
        }
        collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);
        ZkNodeProps zkProps=new ZkNodeProps(collectionProps);
        zkClient.makePath(collectionPath,Utils.toJSON(zkProps),CreateMode.PERSISTENT,null,true);
      }
 catch (      KeeperException e) {
        if (e.code() != KeeperException.Code.NODEEXISTS) {
          throw e;
        }
      }
    }
 else {
      log.debug("Collection zkNode exists");
    }
  }
 catch (  KeeperException e) {
    if (e.code() == KeeperException.Code.NODEEXISTS) {
      return;
    }
    throw new SolrException(ErrorCode.SERVER_ERROR,"Error creating collection node in Zookeeper",e);
  }
catch (  InterruptedException e) {
    Thread.interrupted();
    throw new SolrException(ErrorCode.SERVER_ERROR,"Error creating collection node in Zookeeper",e);
  }
}
