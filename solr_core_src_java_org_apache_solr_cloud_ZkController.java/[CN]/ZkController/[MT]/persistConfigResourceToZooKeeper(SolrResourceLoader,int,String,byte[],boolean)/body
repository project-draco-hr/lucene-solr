{
  final ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;
  final ZkController zkController=zkLoader.getZkController();
  final SolrZkClient zkClient=zkController.getZkClient();
  final String resourceLocation=zkLoader.getConfigSetZkPath() + "/" + resourceName;
  String errMsg="Failed to persist resource at {0} - old {1}";
  try {
    try {
      zkClient.setData(resourceLocation,content,znodeVersion,true);
      zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);
    }
 catch (    NoNodeException e) {
      if (createIfNotExists) {
        try {
          zkClient.create(resourceLocation,content,CreateMode.PERSISTENT,true);
          zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);
        }
 catch (        KeeperException.NodeExistsException nee) {
          try {
            Stat stat=zkClient.exists(resourceLocation,null,true);
            log.info("failed to set data version in zk is {0} and expected version is {1} ",stat.getVersion(),znodeVersion);
          }
 catch (          Exception e1) {
            log.warn("could not get stat");
          }
          log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));
          throw new ResourceModifiedInZkException(ErrorCode.CONFLICT,MessageFormat.format(errMsg,resourceLocation,znodeVersion) + ", retry.");
        }
      }
    }
  }
 catch (  KeeperException.BadVersionException bve) {
    int v=-1;
    try {
      Stat stat=zkClient.exists(resourceLocation,null,true);
      v=stat.getVersion();
    }
 catch (    Exception e) {
      log.error(e.getMessage());
    }
    log.info(MessageFormat.format(errMsg + " zkVersion= " + v,resourceLocation,znodeVersion));
    throw new ResourceModifiedInZkException(ErrorCode.CONFLICT,MessageFormat.format(errMsg,resourceLocation,znodeVersion) + ", retry.");
  }
catch (  ResourceModifiedInZkException e) {
    throw e;
  }
catch (  Exception e) {
    if (e instanceof InterruptedException) {
      Thread.currentThread().interrupt();
    }
    final String msg="Error persisting resource at " + resourceLocation;
    log.error(msg,e);
    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);
  }
  return true;
}
