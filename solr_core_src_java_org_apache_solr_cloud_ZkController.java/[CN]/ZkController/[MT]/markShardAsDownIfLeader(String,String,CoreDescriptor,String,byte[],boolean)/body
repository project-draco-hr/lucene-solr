{
  if (!leaderCd.getCloudDescriptor().isLeader()) {
    log.info("No longer leader, aborting attempt to mark shard down as part of LIR");
    throw new NotLeaderException(ErrorCode.SERVER_ERROR,"Locally, we do not think we are the leader.");
  }
  ContextKey key=new ContextKey(collection,leaderCd.getCloudDescriptor().getCoreNodeName());
  ElectionContext context=electionContexts.get(key);
  if (context == null || !leaderCd.getCloudDescriptor().isLeader()) {
    log.info("No longer leader, aborting attempt to mark shard down as part of LIR");
    throw new NotLeaderException(ErrorCode.SERVER_ERROR,"Locally, we do not think we are the leader.");
  }
  Integer leaderZkNodeParentVersion=((ShardLeaderElectionContextBase)context).leaderZkNodeParentVersion;
  if (zkClient.exists(znodePath,retryOnConnLoss)) {
    List<Op> ops=new ArrayList<>(2);
    ops.add(Op.check(new org.apache.hadoop.fs.Path(((ShardLeaderElectionContextBase)context).leaderPath).getParent().toString(),leaderZkNodeParentVersion));
    ops.add(Op.setData(znodePath,znodeData,-1));
    zkClient.multi(ops,retryOnConnLoss);
  }
 else {
    String parentZNodePath=getLeaderInitiatedRecoveryZnodePath(collection,shardId);
    try {
      zkClient.makePath(parentZNodePath,retryOnConnLoss);
    }
 catch (    KeeperException.NodeExistsException nee) {
    }
    List<Op> ops=new ArrayList<>(2);
    ops.add(Op.check(new org.apache.hadoop.fs.Path(((ShardLeaderElectionContextBase)context).leaderPath).getParent().toString(),leaderZkNodeParentVersion));
    ops.add(Op.create(znodePath,znodeData,zkClient.getZkACLProvider().getACLsToAdd(znodePath),CreateMode.PERSISTENT));
    zkClient.multi(ops,retryOnConnLoss);
  }
}
