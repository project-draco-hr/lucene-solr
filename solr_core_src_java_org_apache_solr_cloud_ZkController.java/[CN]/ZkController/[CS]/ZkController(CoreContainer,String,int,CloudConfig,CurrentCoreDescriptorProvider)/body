{
  if (cc == null)   throw new IllegalArgumentException("CoreContainer cannot be null.");
  this.cc=cc;
  this.cloudConfig=cloudConfig;
  this.genericCoreNodeNames=cloudConfig.getGenericCoreNodeNames();
  String localHostContext=trimLeadingAndTrailingSlashes(cloudConfig.getSolrHostContext());
  this.zkServerAddress=zkServerAddress;
  this.localHostPort=cloudConfig.getSolrHostPort();
  this.hostName=normalizeHostName(cloudConfig.getHost());
  this.nodeName=generateNodeName(this.hostName,Integer.toString(this.localHostPort),localHostContext);
  MDC.put(NODE_NAME_PROP,nodeName);
  this.leaderVoteWait=cloudConfig.getLeaderVoteWait();
  this.leaderConflictResolveWait=cloudConfig.getLeaderConflictResolveWait();
  this.clientTimeout=cloudConfig.getZkClientTimeout();
  DefaultConnectionStrategy strat=new DefaultConnectionStrategy();
  String zkACLProviderClass=cloudConfig.getZkACLProviderClass();
  ZkACLProvider zkACLProvider=null;
  if (zkACLProviderClass != null && zkACLProviderClass.trim().length() > 0) {
    zkACLProvider=cc.getResourceLoader().newInstance(zkACLProviderClass,ZkACLProvider.class);
  }
 else {
    zkACLProvider=new DefaultZkACLProvider();
  }
  String zkCredentialsProviderClass=cloudConfig.getZkCredentialsProviderClass();
  if (zkCredentialsProviderClass != null && zkCredentialsProviderClass.trim().length() > 0) {
    strat.setZkCredentialsToAddAutomatically(cc.getResourceLoader().newInstance(zkCredentialsProviderClass,ZkCredentialsProvider.class));
  }
 else {
    strat.setZkCredentialsToAddAutomatically(new DefaultZkCredentialsProvider());
  }
  addOnReconnectListener(getConfigDirListener());
  zkClient=new SolrZkClient(zkServerAddress,clientTimeout,zkClientConnectTimeout,strat,new OnReconnect(){
    @Override public void command(){
      log.info("ZooKeeper session re-connected ... refreshing core states after session expiration.");
      try {
        cc.cancelCoreRecoveries();
        registerAllCoresAsDown(registerOnReconnect,false);
        if (!zkRunOnly) {
          ElectionContext context=new OverseerElectionContext(zkClient,overseer,getNodeName());
          ElectionContext prevContext=overseerElector.getContext();
          if (prevContext != null) {
            prevContext.cancelElection();
          }
          overseerElector.setup(context);
          overseerElector.joinElection(context,true);
        }
        zkStateReader.createClusterStateWatchersAndUpdate();
        createEphemeralLiveNode();
        List<CoreDescriptor> descriptors=registerOnReconnect.getCurrentDescriptors();
        if (descriptors != null) {
          ExecutorService executorService=(cc != null) ? cc.getCoreZkRegisterExecutorService() : null;
          for (          CoreDescriptor descriptor : descriptors) {
            try {
              throwErrorIfReplicaReplaced(descriptor);
              if (executorService != null) {
                executorService.submit(new RegisterCoreAsync(descriptor,true,true));
              }
 else {
                register(descriptor.getName(),descriptor,true,true);
              }
            }
 catch (            Exception e) {
              SolrException.log(log,"Error registering SolrCore",e);
            }
          }
        }
synchronized (reconnectListeners) {
          for (          OnReconnect listener : reconnectListeners) {
            try {
              listener.command();
            }
 catch (            Exception exc) {
              log.warn("Error when notifying OnReconnect listener " + listener + " after session re-connected.",exc);
            }
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
catch (      Exception e) {
        SolrException.log(log,"",e);
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
    }
  }
,new BeforeReconnect(){
    @Override public void command(){
      try {
        ZkController.this.overseer.close();
      }
 catch (      Exception e) {
        log.error("Error trying to stop any Overseer threads",e);
      }
      markAllAsNotLeader(registerOnReconnect);
    }
  }
,zkACLProvider);
  this.overseerJobQueue=Overseer.getInQueue(zkClient);
  this.overseerCollectionQueue=Overseer.getCollectionQueue(zkClient);
  this.overseerRunningMap=Overseer.getRunningMap(zkClient);
  this.overseerCompletedMap=Overseer.getCompletedMap(zkClient);
  this.overseerFailureMap=Overseer.getFailureMap(zkClient);
  cmdExecutor=new ZkCmdExecutor(clientTimeout);
  leaderElector=new LeaderElector(zkClient);
  zkStateReader=new ZkStateReader(zkClient);
  this.baseURL=zkStateReader.getBaseUrlForNodeName(this.nodeName);
  init(registerOnReconnect);
}
