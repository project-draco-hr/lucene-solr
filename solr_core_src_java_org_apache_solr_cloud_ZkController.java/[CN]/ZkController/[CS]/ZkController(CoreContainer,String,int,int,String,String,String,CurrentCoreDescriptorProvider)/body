{
  this.cc=cc;
  if (localHostContext.contains("/")) {
    throw new IllegalArgumentException("localHostContext (" + localHostContext + ") should not contain a /");
  }
  this.zkServerAddress=zkServerAddress;
  this.localHostPort=locaHostPort;
  this.localHostContext=localHostContext;
  this.localHost=getHostAddress(localHost);
  this.hostName=getHostNameFromAddress(this.localHost);
  this.nodeName=this.hostName + ':' + this.localHostPort+ '_'+ this.localHostContext;
  this.baseURL=this.localHost + ":" + this.localHostPort+ "/"+ this.localHostContext;
  zkClient=new SolrZkClient(zkServerAddress,zkClientTimeout,zkClientConnectTimeout,new OnReconnect(){
    public void command(){
      try {
        ShardHandler shardHandler;
        String adminPath;
        if (cc == null) {
          shardHandler=new HttpShardHandlerFactory().getShardHandler();
          adminPath="/admin/cores";
        }
 else {
          shardHandler=cc.getShardHandlerFactory().getShardHandler();
          adminPath=cc.getAdminPath();
        }
        ElectionContext context=new OverseerElectionContext(shardHandler,adminPath,getNodeName(),zkStateReader);
        overseerElector.joinElection(context);
        zkStateReader.createClusterStateWatchersAndUpdate();
        registerAllCoresAsDown(registerOnReconnect);
        createEphemeralLiveNode();
        List<CoreDescriptor> descriptors=registerOnReconnect.getCurrentDescriptors();
        if (descriptors != null) {
          for (          CoreDescriptor descriptor : descriptors) {
            register(descriptor.getName(),descriptor,true);
          }
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
catch (      Exception e) {
        SolrException.log(log,"",e);
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
    }
  }
);
  this.overseerJobQueue=Overseer.getInQueue(zkClient);
  this.overseerCollectionQueue=Overseer.getCollectionQueue(zkClient);
  cmdExecutor=new ZkCmdExecutor();
  leaderElector=new LeaderElector(zkClient);
  zkStateReader=new ZkStateReader(zkClient);
  init(registerOnReconnect);
}
