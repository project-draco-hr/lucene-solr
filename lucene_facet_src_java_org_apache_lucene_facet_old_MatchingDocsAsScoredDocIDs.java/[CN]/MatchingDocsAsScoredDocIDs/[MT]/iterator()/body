{
  return new ScoredDocIDsIterator(){
    final Iterator<MatchingDocs> mdIter=matchingDocs.iterator();
    int scoresIdx=0;
    int doc=0;
    MatchingDocs current;
    int currentLength;
    boolean done=false;
    @Override public boolean next(){
      if (done) {
        return false;
      }
      while (current == null) {
        if (!mdIter.hasNext()) {
          done=true;
          return false;
        }
        current=mdIter.next();
        currentLength=current.bits.length();
        doc=0;
        scoresIdx=0;
        if (doc >= currentLength || (doc=current.bits.nextSetBit(doc)) == -1) {
          current=null;
        }
 else {
          doc=-1;
        }
      }
      ++doc;
      if (doc >= currentLength || (doc=current.bits.nextSetBit(doc)) == -1) {
        current=null;
        return next();
      }
      return true;
    }
    @Override public float getScore(){
      return current.scores == null ? ScoredDocIDsIterator.DEFAULT_SCORE : current.scores[scoresIdx++];
    }
    @Override public int getDocID(){
      return done ? DocIdSetIterator.NO_MORE_DOCS : doc + current.context.docBase;
    }
  }
;
}
