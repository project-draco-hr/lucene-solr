{
  final FieldInfo fieldInfo=readerContext.reader().getFieldInfos().fieldInfo(field);
  if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {
    final BinaryDocValues binaryValues=DocValues.getBinary(readerContext.reader(),field);
    final Bits docsWithField=DocValues.getDocsWithField(readerContext.reader(),field);
    return new FunctionValues(){
      @Override public boolean exists(      int doc){
        return docsWithField.get(doc);
      }
      @Override public boolean bytesVal(      int doc,      BytesRef target){
        binaryValues.get(doc,target);
        return target.length > 0;
      }
      public String strVal(      int doc){
        final BytesRef bytes=new BytesRef();
        return bytesVal(doc,bytes) ? bytes.utf8ToString() : null;
      }
      @Override public Object objectVal(      int doc){
        return strVal(doc);
      }
      @Override public String toString(      int doc){
        return description() + '=' + strVal(doc);
      }
      @Override public ValueFiller getValueFiller(){
        return new ValueFiller(){
          private final MutableValueStr mval=new MutableValueStr();
          @Override public MutableValue getValue(){
            return mval;
          }
          @Override public void fillValue(          int doc){
            mval.exists=docsWithField.get(doc);
            if (mval.exists) {
              binaryValues.get(doc,mval.value);
            }
          }
        }
;
      }
    }
;
  }
 else {
    return new DocTermsIndexDocValues(this,readerContext,field){
      @Override protected String toTerm(      String readableValue){
        return readableValue;
      }
      @Override public Object objectVal(      int doc){
        return strVal(doc);
      }
      @Override public String toString(      int doc){
        return description() + '=' + strVal(doc);
      }
    }
;
  }
}
