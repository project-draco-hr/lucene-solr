{
  List<String> list=new ArrayList<String>();
  int maxLength=atLeast(500);
  ByteBlockPool pool=new ByteBlockPool(new ByteBlockPool.DirectAllocator());
  pool.nextBuffer();
  final int numValues=atLeast(100);
  BytesRef ref=new BytesRef();
  for (int i=0; i < numValues; i++) {
    final String value=_TestUtil.randomRealisticUnicodeString(random,maxLength);
    list.add(value);
    ref.copy(value);
    pool.copy(ref);
  }
  RAMDirectory dir=new RAMDirectory();
  IndexOutput stream=dir.createOutput("foo.txt");
  pool.writePool(stream);
  stream.flush();
  stream.close();
  IndexInput input=dir.openInput("foo.txt");
  assertEquals(pool.byteOffset + pool.byteUpto,stream.length());
  BytesRef expected=new BytesRef();
  BytesRef actual=new BytesRef();
  for (  String string : list) {
    expected.copy(string);
    actual.grow(expected.length);
    actual.length=expected.length;
    input.readBytes(actual.bytes,0,actual.length);
    assertEquals(expected,actual);
  }
  try {
    input.readByte();
    fail("must be EOF");
  }
 catch (  IOException e) {
  }
  dir.close();
}
