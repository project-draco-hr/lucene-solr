{
  for (  LeafReaderContext ctx : sortedReader.leaves()) {
    LeafReader reader=ctx.reader();
    TermsEnum termsEnum=reader.terms(DOC_POSITIONS_FIELD).iterator();
    assertEquals(SeekStatus.FOUND,termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));
    PostingsEnum sortedPositions=termsEnum.postings(null,PostingsEnum.ALL);
    int doc;
    while ((doc=sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      int freq=sortedPositions.freq();
      int id=Integer.parseInt(reader.document(doc).get(ID_FIELD));
      assertEquals("incorrect freq for doc=" + doc,id / 10 + 1,freq);
      for (int i=0; i < freq; i++) {
        assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
        assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
        assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
        assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
      }
    }
    final PostingsEnum reuse=sortedPositions;
    sortedPositions=termsEnum.postings(reuse,PostingsEnum.ALL);
    doc=0;
    while ((doc=sortedPositions.advance(doc + TestUtil.nextInt(random(),1,5))) != DocIdSetIterator.NO_MORE_DOCS) {
      int freq=sortedPositions.freq();
      int id=Integer.parseInt(reader.document(doc).get(ID_FIELD));
      assertEquals("incorrect freq for doc=" + doc,id / 10 + 1,freq);
      for (int i=0; i < freq; i++) {
        assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
        assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
        assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
        assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
      }
    }
  }
}
