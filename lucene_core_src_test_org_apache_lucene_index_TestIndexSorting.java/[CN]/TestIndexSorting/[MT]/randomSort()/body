{
  int numFields=TestUtil.nextInt(random(),1,3);
  SortField[] sortFields=new SortField[numFields];
  for (int i=0; i < numFields - 1; i++) {
    boolean reversed=random().nextBoolean();
    SortField sortField;
switch (random().nextInt(5)) {
case 0:
      sortField=new SortField("int",SortField.Type.INT,reversed);
    if (random().nextBoolean()) {
      sortField.setMissingValue(random().nextInt());
    }
  break;
case 1:
sortField=new SortField("long",SortField.Type.LONG,reversed);
if (random().nextBoolean()) {
sortField.setMissingValue(random().nextLong());
}
break;
case 2:
sortField=new SortField("float",SortField.Type.FLOAT,reversed);
if (random().nextBoolean()) {
sortField.setMissingValue(random().nextFloat());
}
break;
case 3:
sortField=new SortField("double",SortField.Type.DOUBLE,reversed);
if (random().nextBoolean()) {
sortField.setMissingValue(random().nextDouble());
}
break;
case 4:
sortField=new SortField("bytes",SortField.Type.STRING,reversed);
if (random().nextBoolean()) {
sortField.setMissingValue(SortField.STRING_LAST);
}
break;
default :
throw new AssertionError();
}
sortFields[i]=sortField;
}
sortFields[numFields - 1]=new SortField("id",SortField.Type.INT);
return new Sort(sortFields);
}
