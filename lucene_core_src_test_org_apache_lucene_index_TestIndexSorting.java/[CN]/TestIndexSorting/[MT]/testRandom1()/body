{
  int numDocs=atLeast(100);
  FieldType POSITIONS_TYPE=new FieldType(TextField.TYPE_NOT_STORED);
  POSITIONS_TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  POSITIONS_TYPE.freeze();
  FieldType TERM_VECTORS_TYPE=new FieldType(TextField.TYPE_NOT_STORED);
  TERM_VECTORS_TYPE.setStoreTermVectors(true);
  TERM_VECTORS_TYPE.freeze();
  List<Document> docs=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    int id=i * 10;
    Document doc=new Document();
    doc.add(new StringField("id",Integer.toString(id),Store.YES));
    doc.add(new StringField("docs","#all#",Store.NO));
    PositionsTokenStream positions=new PositionsTokenStream();
    positions.setId(id);
    doc.add(new Field("positions",positions,POSITIONS_TYPE));
    doc.add(new NumericDocValuesField("numeric",id));
    TextField norms=new TextField("norms",Integer.toString(id),Store.NO);
    norms.setBoost(Float.intBitsToFloat(id));
    doc.add(norms);
    doc.add(new BinaryDocValuesField("binary",new BytesRef(Integer.toString(id))));
    doc.add(new SortedDocValuesField("sorted",new BytesRef(Integer.toString(id))));
    doc.add(new SortedSetDocValuesField("sorted_set",new BytesRef(Integer.toString(id))));
    doc.add(new SortedSetDocValuesField("sorted_set",new BytesRef(Integer.toString(id + 1))));
    doc.add(new SortedNumericDocValuesField("sorted_numeric",id));
    doc.add(new SortedNumericDocValuesField("sorted_numeric",id + 1));
    doc.add(new Field("term_vectors",Integer.toString(id),TERM_VECTORS_TYPE));
    byte[] bytes=new byte[4];
    NumericUtils.intToSortableBytes(id,bytes,0);
    doc.add(new BinaryPoint("points",bytes));
    docs.add(doc);
  }
  long seed=random().nextLong();
  Directory dir1=newFSDirectory(createTempDir());
  IndexWriterConfig iwc1=newIndexWriterConfig(new MockAnalyzer(random()));
  iwc1.setSimilarity(new NormsSimilarity(iwc1.getSimilarity()));
  iwc1.setMergePolicy(newLogMergePolicy());
  if (VERBOSE) {
    System.out.println("TEST: now index pre-sorted");
  }
  RandomIndexWriter w1=new RandomIndexWriter(new Random(seed),dir1,iwc1);
  for (  Document doc : docs) {
    ((PositionsTokenStream)((Field)doc.getField("positions")).tokenStreamValue()).setId(Integer.parseInt(doc.get("id")));
    w1.addDocument(doc);
  }
  Directory dir2=newFSDirectory(createTempDir());
  IndexWriterConfig iwc2=newIndexWriterConfig(new MockAnalyzer(random()));
  iwc2.setSimilarity(new NormsSimilarity(iwc2.getSimilarity()));
  Sort sort=new Sort(new SortField("numeric",SortField.Type.INT));
  iwc2.setIndexSort(sort);
  Collections.shuffle(docs,random());
  if (VERBOSE) {
    System.out.println("TEST: now index with index-time sorting");
  }
  RandomIndexWriter w2=new RandomIndexWriter(new Random(seed),dir2,iwc2);
  int count=0;
  int commitAtCount=TestUtil.nextInt(random(),1,numDocs - 1);
  for (  Document doc : docs) {
    ((PositionsTokenStream)((Field)doc.getField("positions")).tokenStreamValue()).setId(Integer.parseInt(doc.get("id")));
    if (count++ == commitAtCount) {
      w2.commit();
    }
    w2.addDocument(doc);
  }
  w2.forceMerge(1);
  DirectoryReader r1=w1.getReader();
  DirectoryReader r2=w2.getReader();
  assertEquals(sort,getOnlyLeafReader(r2).getIndexSort());
  assertReaderEquals("left: sorted by hand; right: sorted by Lucene",r1,r2);
  IOUtils.close(w1,w2,r1,r2,dir1,dir2);
}
