{
  int numDocs;
  if (TEST_NIGHTLY) {
    numDocs=atLeast(100000);
  }
 else {
    numDocs=atLeast(1000);
  }
  List<RandomDoc> docs=new ArrayList<>();
  Sort sort=randomSort();
  if (VERBOSE) {
    System.out.println("TEST: numDocs=" + numDocs + " use sort="+ sort);
  }
  Directory dir1=newFSDirectory(createTempDir());
  IndexWriterConfig iwc1=newIndexWriterConfig(new MockAnalyzer(random()));
  IndexWriter w1=new IndexWriter(dir1,iwc1);
  Directory dir2=newFSDirectory(createTempDir());
  IndexWriterConfig iwc2=newIndexWriterConfig(new MockAnalyzer(random()));
  iwc2.setIndexSort(sort);
  IndexWriter w2=new IndexWriter(dir2,iwc2);
  Set<Integer> toDelete=new HashSet<>();
  double deleteChance=random().nextDouble();
  for (int id=0; id < numDocs; id++) {
    RandomDoc docValues=new RandomDoc(id);
    docs.add(docValues);
    if (VERBOSE) {
      System.out.println("TEST: doc id=" + id);
      System.out.println("  int=" + docValues.intValue);
      System.out.println("  long=" + docValues.longValue);
      System.out.println("  float=" + docValues.floatValue);
      System.out.println("  double=" + docValues.doubleValue);
      System.out.println("  bytes=" + new BytesRef(docValues.bytesValue));
    }
    Document doc=new Document();
    doc.add(new StringField("id",Integer.toString(id),Field.Store.YES));
    doc.add(new NumericDocValuesField("id",id));
    doc.add(new NumericDocValuesField("int",docValues.intValue));
    doc.add(new NumericDocValuesField("long",docValues.longValue));
    doc.add(new DoubleDocValuesField("double",docValues.doubleValue));
    doc.add(new FloatDocValuesField("float",docValues.floatValue));
    doc.add(new SortedDocValuesField("bytes",new BytesRef(docValues.bytesValue)));
    w1.addDocument(doc);
    w2.addDocument(doc);
    if (random().nextDouble() < deleteChance) {
      toDelete.add(id);
    }
  }
  for (  int id : toDelete) {
    w1.deleteDocuments(new Term("id",Integer.toString(id)));
    w2.deleteDocuments(new Term("id",Integer.toString(id)));
  }
  DirectoryReader r1=DirectoryReader.open(w1);
  IndexSearcher s1=newSearcher(r1);
  if (random().nextBoolean()) {
    int maxSegmentCount=TestUtil.nextInt(random(),1,5);
    if (VERBOSE) {
      System.out.println("TEST: now forceMerge(" + maxSegmentCount + ")");
    }
    w2.forceMerge(maxSegmentCount);
  }
  DirectoryReader r2=DirectoryReader.open(w2);
  IndexSearcher s2=newSearcher(r2);
  for (int iter=0; iter < 100; iter++) {
    int numHits=TestUtil.nextInt(random(),1,numDocs);
    if (VERBOSE) {
      System.out.println("TEST: iter=" + iter + " numHits="+ numHits);
    }
    TopFieldCollector c1=TopFieldCollector.create(sort,numHits,true,true,true);
    s1.search(new MatchAllDocsQuery(),c1);
    TopDocs hits1=c1.topDocs();
    TopFieldCollector c2=TopFieldCollector.create(sort,numHits,true,true,true);
    EarlyTerminatingSortingCollector c3=new EarlyTerminatingSortingCollector(c2,sort,numHits);
    s2.search(new MatchAllDocsQuery(),c3);
    TopDocs hits2=c2.topDocs();
    if (VERBOSE) {
      System.out.println("  topDocs query-time sort: totalHits=" + hits1.totalHits);
      for (      ScoreDoc scoreDoc : hits1.scoreDocs) {
        System.out.println("    " + scoreDoc.doc);
      }
      System.out.println("  topDocs index-time sort: totalHits=" + hits2.totalHits);
      for (      ScoreDoc scoreDoc : hits2.scoreDocs) {
        System.out.println("    " + scoreDoc.doc);
      }
    }
    assertTrue(hits2.totalHits <= hits1.totalHits);
    assertEquals(hits2.scoreDocs.length,hits1.scoreDocs.length);
    for (int i=0; i < hits2.scoreDocs.length; i++) {
      ScoreDoc hit1=hits1.scoreDocs[i];
      ScoreDoc hit2=hits2.scoreDocs[i];
      assertEquals(r1.document(hit1.doc).get("id"),r2.document(hit2.doc).get("id"));
      assertEquals(((FieldDoc)hit1).fields,((FieldDoc)hit2).fields);
    }
  }
  IOUtils.close(r1,r2,w1,w2,dir1,dir2);
}
