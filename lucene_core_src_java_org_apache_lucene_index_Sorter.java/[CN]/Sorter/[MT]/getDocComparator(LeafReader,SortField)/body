{
  int maxDoc=reader.maxDoc();
switch (sortField.getType()) {
case STRING:
{
      final int missingOrd;
      if (sortField.getMissingValue() == SortField.STRING_LAST) {
        missingOrd=Integer.MAX_VALUE;
      }
 else {
        missingOrd=Integer.MIN_VALUE;
      }
      final int[] ords=new int[reader.maxDoc()];
      Arrays.fill(ords,missingOrd);
      SortedDocValues sorted=DocValues.getSorted(reader,sortField.getField());
      int docID;
      while ((docID=sorted.nextDoc()) != NO_MORE_DOCS) {
        ords[docID]=sorted.ordValue();
      }
      final int reverseMul;
      if (sortField.getReverse()) {
        reverseMul=-1;
      }
 else {
        reverseMul=1;
      }
      return new DocComparator(){
        @Override public int compare(        int docID1,        int docID2){
          return reverseMul * Integer.compare(ords[docID1],ords[docID2]);
        }
      }
;
    }
case LONG:
{
    long[] values=new long[maxDoc];
    NumericDocValues dvs=DocValues.getNumeric(reader,sortField.getField());
    if (sortField.getMissingValue() != null) {
      Arrays.fill(values,(Long)sortField.getMissingValue());
    }
    while (true) {
      int docID=dvs.nextDoc();
      if (docID == NO_MORE_DOCS) {
        break;
      }
      values[docID]=dvs.longValue();
    }
    final int reverseMul;
    if (sortField.getReverse()) {
      reverseMul=-1;
    }
 else {
      reverseMul=1;
    }
    return new DocComparator(){
      @Override public int compare(      int docID1,      int docID2){
        return reverseMul * Long.compare(values[docID1],values[docID2]);
      }
    }
;
  }
case INT:
{
  int[] values=new int[maxDoc];
  NumericDocValues dvs=DocValues.getNumeric(reader,sortField.getField());
  if (sortField.getMissingValue() != null) {
    Arrays.fill(values,(Integer)sortField.getMissingValue());
  }
  while (true) {
    int docID=dvs.nextDoc();
    if (docID == NO_MORE_DOCS) {
      break;
    }
    values[docID]=(int)dvs.longValue();
  }
  final int reverseMul;
  if (sortField.getReverse()) {
    reverseMul=-1;
  }
 else {
    reverseMul=1;
  }
  return new DocComparator(){
    @Override public int compare(    int docID1,    int docID2){
      return reverseMul * Integer.compare(values[docID1],values[docID2]);
    }
  }
;
}
case DOUBLE:
{
double[] values=new double[maxDoc];
NumericDocValues dvs=DocValues.getNumeric(reader,sortField.getField());
if (sortField.getMissingValue() != null) {
  Arrays.fill(values,(Double)sortField.getMissingValue());
}
while (true) {
  int docID=dvs.nextDoc();
  if (docID == NO_MORE_DOCS) {
    break;
  }
  values[docID]=Double.longBitsToDouble(dvs.longValue());
}
final int reverseMul;
if (sortField.getReverse()) {
  reverseMul=-1;
}
 else {
  reverseMul=1;
}
return new DocComparator(){
  @Override public int compare(  int docID1,  int docID2){
    return reverseMul * Double.compare(values[docID1],values[docID2]);
  }
}
;
}
case FLOAT:
{
float[] values=new float[maxDoc];
NumericDocValues dvs=DocValues.getNumeric(reader,sortField.getField());
if (sortField.getMissingValue() != null) {
Arrays.fill(values,(Float)sortField.getMissingValue());
}
while (true) {
int docID=dvs.nextDoc();
if (docID == NO_MORE_DOCS) {
  break;
}
values[docID]=Float.intBitsToFloat((int)dvs.longValue());
}
final int reverseMul;
if (sortField.getReverse()) {
reverseMul=-1;
}
 else {
reverseMul=1;
}
return new DocComparator(){
@Override public int compare(int docID1,int docID2){
  return reverseMul * Float.compare(values[docID1],values[docID2]);
}
}
;
}
default :
throw new IllegalArgumentException("unhandled SortField.getType()=" + sortField.getType());
}
}
