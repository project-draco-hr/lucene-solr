{
  if (sortSpec == null || sortSpec.length() == 0)   return null;
  String[] parts=sortSeparator.split(sortSpec.trim(),0);
  if (parts.length == 0)   return null;
  ArrayList<SortField> lst=new ArrayList<SortField>();
  int num=-1;
  int pos=0;
  String fn;
  boolean top=true;
  boolean normalSortOnScore=false;
  while (pos < parts.length) {
    String str=parts[pos];
    if ("top".equals(str) || "bottom".equals(str) || "asc".equals(str)|| "desc".equals(str)) {
      fn="score";
    }
 else {
      fn=str;
      pos++;
    }
    str=parts[pos];
    if ("top".equals(str) || "desc".equals(str)) {
      top=true;
    }
 else     if ("bottom".equals(str) || "asc".equals(str)) {
      top=false;
    }
 else {
      return null;
    }
    if ("score".equals(fn)) {
      if (top) {
        normalSortOnScore=true;
        lst.add(SortField.FIELD_SCORE);
      }
 else {
        lst.add(new SortField(null,SortField.SCORE,true));
      }
    }
 else {
      try {
        SchemaField f=schema.getField(fn);
        if (f == null || !f.indexed())         return null;
        lst.add(f.getType().getSortField(f,top));
      }
 catch (      Exception e) {
        return null;
      }
    }
    pos++;
    if (pos + 1 == parts.length) {
      try {
        num=Integer.parseInt(parts[pos]);
      }
 catch (      Exception e) {
        return null;
      }
      pos++;
    }
  }
  Sort sort;
  if (normalSortOnScore && lst.size() == 1) {
    sort=null;
  }
 else {
    sort=new Sort((SortField[])lst.toArray(new SortField[lst.size()]));
  }
  return new SortSpec(sort,num);
}
