{
  if (sortSpec == null || sortSpec.length() == 0)   return null;
  String[] parts=sortSep.split(sortSpec.trim());
  if (parts.length == 0)   return null;
  SortField[] lst=new SortField[parts.length];
  for (int i=0; i < parts.length; i++) {
    String part=parts[i].trim();
    boolean top=true;
    int idx=part.indexOf(' ');
    if (idx > 0) {
      String order=part.substring(idx + 1).trim();
      if ("desc".equals(order) || "top".equals(order)) {
        top=true;
      }
 else       if ("asc".equals(order) || "bottom".equals(order)) {
        top=false;
      }
 else {
        throw new SolrException(400,"Unknown sort order: " + order);
      }
      part=part.substring(0,idx).trim();
    }
 else {
      throw new SolrException(400,"Missing sort order.");
    }
    if ("score".equals(part)) {
      if (top) {
        if (parts.length == 1) {
          return null;
        }
        lst[i]=SortField.FIELD_SCORE;
      }
 else {
        lst[i]=new SortField(null,SortField.SCORE,true);
      }
    }
 else {
      SchemaField f=null;
      try {
        f=schema.getField(part);
      }
 catch (      SolrException e) {
        throw new SolrException(400,"can not sort on undefined field: " + part,e);
      }
      if (f == null || !f.indexed()) {
        throw new SolrException(400,"can not sort on unindexed field: " + part);
      }
      lst[i]=f.getType().getSortField(f,top);
    }
  }
  return new SortSpec(new Sort(lst),-1);
}
