{
  SolrCore core=h.getCore();
  NewSearcherListener trigger=new NewSearcherListener(TriggerOn.Hard);
  core.registerNewSearcherListener(trigger);
  DirectUpdateHandler2 updateHandler=(DirectUpdateHandler2)core.getUpdateHandler();
  updateHandler.registerCommitCallback(trigger);
  CommitTracker tracker=updateHandler.commitTracker;
  tracker.setTimeUpperBound(-1);
  tracker.setDocsUpperBound(8);
  NewSearcherListener softTrigger=new NewSearcherListener(TriggerOn.Soft);
  updateHandler.registerSoftCommitCallback(softTrigger);
  core.registerNewSearcherListener(softTrigger);
  CommitTracker softTracker=updateHandler.softCommitTracker;
  softTracker.setTimeUpperBound(-1);
  softTracker.setDocsUpperBound(4);
  XmlUpdateRequestHandler handler=new XmlUpdateRequestHandler();
  handler.init(null);
  MapSolrParams params=new MapSolrParams(new HashMap<String,String>());
  SolrQueryResponse rsp=new SolrQueryResponse();
  SolrQueryRequestBase req=new SolrQueryRequestBase(core,params){
  }
;
  for (int i=0; i < 4; i++) {
    req.setContentStreams(toContentStreams(adoc("id",Integer.toString(i),"subject","info"),null));
    handler.handleRequest(req,rsp);
  }
  assertQ("shouldn't find any",req("id:1"),"//result[@numFound=0]");
  assertEquals(0,tracker.getCommitCount());
  req.setContentStreams(toContentStreams(adoc("id","4","subject","info"),null));
  handler.handleRequest(req,rsp);
  assertTrue(softTrigger.waitForNewSearcher(10000));
  softTrigger.reset();
  assertQ("should find 5",req("*:*"),"//result[@numFound=5]");
  assertEquals(1,softTracker.getCommitCount());
  assertEquals(0,tracker.getCommitCount());
  req.setContentStreams(toContentStreams(adoc("id","5","subject","info"),null));
  handler.handleRequest(req,rsp);
  assertQ("should find one",req("id:4"),"//result[@numFound=1]");
  assertEquals(1,softTracker.getCommitCount());
  assertQ("should not find one",req("id:5"),"//result[@numFound=0]");
  assertEquals(1,softTracker.getCommitCount());
  for (int i=6; i < 10; i++) {
    req.setContentStreams(toContentStreams(adoc("id",Integer.toString(i),"subject","info"),null));
    handler.handleRequest(req,rsp);
  }
  req.close();
  assertTrue(softTrigger.waitForNewSearcher(30000));
  softTrigger.reset();
  assertTrue(trigger.waitForNewSearcher(10000));
  assertQ("should find 10",req("*:*"),"//result[@numFound=10]");
  assertEquals(2,softTracker.getCommitCount());
  assertEquals(1,tracker.getCommitCount());
}
