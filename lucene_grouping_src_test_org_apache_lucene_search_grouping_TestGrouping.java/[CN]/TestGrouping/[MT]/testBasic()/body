{
  String groupField="author";
  FieldType customType=new FieldType();
  customType.setStored(true);
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  Document doc=new Document();
  addGroupField(doc,groupField,"author1");
  doc.add(new TextField("content","random text",Field.Store.YES));
  doc.add(new Field("id","1",customType));
  w.addDocument(doc);
  doc=new Document();
  addGroupField(doc,groupField,"author1");
  doc.add(new TextField("content","some more random text",Field.Store.YES));
  doc.add(new Field("id","2",customType));
  w.addDocument(doc);
  doc=new Document();
  addGroupField(doc,groupField,"author1");
  doc.add(new TextField("content","some more random textual data",Field.Store.YES));
  doc.add(new Field("id","3",customType));
  w.addDocument(doc);
  doc=new Document();
  addGroupField(doc,groupField,"author2");
  doc.add(new TextField("content","some random text",Field.Store.YES));
  doc.add(new Field("id","4",customType));
  w.addDocument(doc);
  doc=new Document();
  addGroupField(doc,groupField,"author3");
  doc.add(new TextField("content","some more random text",Field.Store.YES));
  doc.add(new Field("id","5",customType));
  w.addDocument(doc);
  doc=new Document();
  addGroupField(doc,groupField,"author3");
  doc.add(new TextField("content","random",Field.Store.YES));
  doc.add(new Field("id","6",customType));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("content","random word stuck in alot of other text",Field.Store.YES));
  doc.add(new Field("id","6",customType));
  w.addDocument(doc);
  IndexSearcher indexSearcher=newSearcher(w.getReader());
  w.close();
  final Sort groupSort=Sort.RELEVANCE;
  final AbstractFirstPassGroupingCollector<?> c1=createRandomFirstPassCollector(groupField,groupSort,10);
  indexSearcher.search(new TermQuery(new Term("content","random")),c1);
  final AbstractSecondPassGroupingCollector<?> c2=createSecondPassCollector(c1,groupField,groupSort,Sort.RELEVANCE,0,5,true,true,true);
  indexSearcher.search(new TermQuery(new Term("content","random")),c2);
  final TopGroups<?> groups=c2.getTopGroups(0);
  assertFalse(Float.isNaN(groups.maxScore));
  assertEquals(7,groups.totalHitCount);
  assertEquals(7,groups.totalGroupedHitCount);
  assertEquals(4,groups.groups.length);
  GroupDocs<?> group=groups.groups[0];
  compareGroupValue("author3",group);
  assertEquals(2,group.scoreDocs.length);
  assertEquals(5,group.scoreDocs[0].doc);
  assertEquals(4,group.scoreDocs[1].doc);
  assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);
  group=groups.groups[1];
  compareGroupValue("author1",group);
  assertEquals(3,group.scoreDocs.length);
  assertEquals(0,group.scoreDocs[0].doc);
  assertEquals(1,group.scoreDocs[1].doc);
  assertEquals(2,group.scoreDocs[2].doc);
  assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);
  assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);
  group=groups.groups[2];
  compareGroupValue("author2",group);
  assertEquals(1,group.scoreDocs.length);
  assertEquals(3,group.scoreDocs[0].doc);
  group=groups.groups[3];
  compareGroupValue(null,group);
  assertEquals(1,group.scoreDocs.length);
  assertEquals(6,group.scoreDocs[0].doc);
  indexSearcher.getIndexReader().close();
  dir.close();
}
