{
  if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {
    boolean diskResident=random().nextBoolean();
    Collection<SearchGroup<T>> searchGroups=firstPassGroupingCollector.getTopGroups(groupOffset,fillSortFields);
    return DVSecondPassGroupingCollector.create(groupField,diskResident,Type.BYTES_VAR_SORTED,searchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields);
  }
 else   if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {
    Collection<SearchGroup<BytesRef>> searchGroups=firstPassGroupingCollector.getTopGroups(groupOffset,fillSortFields);
    return (AbstractSecondPassGroupingCollector)new TermSecondPassGroupingCollector(groupField,searchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields);
  }
 else {
    ValueSource vs=new BytesRefFieldSource(groupField);
    Collection<SearchGroup<MutableValue>> searchGroups=firstPassGroupingCollector.getTopGroups(groupOffset,fillSortFields);
    return (AbstractSecondPassGroupingCollector)new FunctionSecondPassGroupingCollector(searchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields,vs,new HashMap());
  }
}
