{
  Collections.shuffle(Arrays.asList(groupDocs),random());
  final Map<BytesRef,List<GroupDoc>> groupMap=new HashMap<>();
  final List<BytesRef> groupValues=new ArrayList<>();
  for (  GroupDoc groupDoc : groupDocs) {
    if (!groupMap.containsKey(groupDoc.group)) {
      groupValues.add(groupDoc.group);
      groupMap.put(groupDoc.group,new ArrayList<GroupDoc>());
    }
    groupMap.get(groupDoc.group).add(groupDoc);
  }
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  final List<List<Document>> updateDocs=new ArrayList<>();
  FieldType groupEndType=new FieldType(StringField.TYPE_NOT_STORED);
  groupEndType.setIndexOptions(IndexOptions.DOCS_ONLY);
  groupEndType.setOmitNorms(true);
  for (  BytesRef group : groupValues) {
    final List<Document> docs=new ArrayList<>();
    for (    GroupDoc groupValue : groupMap.get(group)) {
      Document doc=new Document();
      docs.add(doc);
      if (groupValue.group != null) {
        doc.add(newStringField("group",groupValue.group.utf8ToString(),Field.Store.YES));
      }
      doc.add(newStringField("sort1",groupValue.sort1.utf8ToString(),Field.Store.NO));
      doc.add(newStringField("sort2",groupValue.sort2.utf8ToString(),Field.Store.NO));
      doc.add(new IntField("id",groupValue.id,Field.Store.NO));
      doc.add(newTextField("content",groupValue.content,Field.Store.NO));
    }
    final Field groupEnd=newField("groupend","x",groupEndType);
    docs.get(docs.size() - 1).add(groupEnd);
    w.addDocuments(docs);
    if (group != null && random().nextInt(7) == 4) {
      updateDocs.add(docs);
    }
  }
  for (  List<Document> docs : updateDocs) {
    w.updateDocuments(new Term("group",docs.get(0).get("group")),docs);
  }
  final DirectoryReader r=w.getReader();
  w.shutdown();
  return r;
}
