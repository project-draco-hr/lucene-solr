{
  if (expected == null) {
    assertNull(actual);
    return;
  }
  assertNotNull(actual);
  assertEquals("expected.groups.length != actual.groups.length",expected.groups.length,actual.groups.length);
  assertEquals("expected.totalHitCount != actual.totalHitCount",expected.totalHitCount,actual.totalHitCount);
  assertEquals("expected.totalGroupedHitCount != actual.totalGroupedHitCount",expected.totalGroupedHitCount,actual.totalGroupedHitCount);
  if (expected.totalGroupCount != null && verifyTotalGroupCount) {
    assertEquals("expected.totalGroupCount != actual.totalGroupCount",expected.totalGroupCount,actual.totalGroupCount);
  }
  for (int groupIDX=0; groupIDX < expected.groups.length; groupIDX++) {
    if (VERBOSE) {
      System.out.println("  check groupIDX=" + groupIDX);
    }
    final GroupDocs<BytesRef> expectedGroup=expected.groups[groupIDX];
    final GroupDocs<BytesRef> actualGroup=actual.groups[groupIDX];
    if (verifyGroupValues) {
      if (idvBasedImplsUsed) {
        if (actualGroup.groupValue.length == 0) {
          assertNull(expectedGroup.groupValue);
        }
 else {
          assertEquals(expectedGroup.groupValue,actualGroup.groupValue);
        }
      }
 else {
        assertEquals(expectedGroup.groupValue,actualGroup.groupValue);
      }
    }
    if (verifySortValues) {
      assertArrayEquals(expectedGroup.groupSortValues,actualGroup.groupSortValues);
    }
    assertEquals(expectedGroup.totalHits,actualGroup.totalHits);
    final ScoreDoc[] expectedFDs=expectedGroup.scoreDocs;
    final ScoreDoc[] actualFDs=actualGroup.scoreDocs;
    assertEquals(expectedFDs.length,actualFDs.length);
    for (int docIDX=0; docIDX < expectedFDs.length; docIDX++) {
      final FieldDoc expectedFD=(FieldDoc)expectedFDs[docIDX];
      final FieldDoc actualFD=(FieldDoc)actualFDs[docIDX];
      assertEquals(expectedFD.doc,docIDtoID[actualFD.doc]);
      if (testScores) {
        assertEquals(expectedFD.score,actualFD.score,0.1);
      }
 else {
      }
      if (verifySortValues) {
        assertArrayEquals(expectedFD.fields,actualFD.fields);
      }
    }
  }
}
