{
  if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {
    boolean diskResident=random().nextBoolean();
    return DVSecondPassGroupingCollector.create(groupField,diskResident,Type.BYTES_VAR_SORTED,(Collection)searchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields);
  }
 else   if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {
    return new TermSecondPassGroupingCollector(groupField,searchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields);
  }
 else {
    ValueSource vs=new BytesRefFieldSource(groupField);
    List<SearchGroup<MutableValue>> mvalSearchGroups=new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());
    for (    SearchGroup<BytesRef> mergedTopGroup : searchGroups) {
      SearchGroup<MutableValue> sg=new SearchGroup<MutableValue>();
      MutableValueStr groupValue=new MutableValueStr();
      if (mergedTopGroup.groupValue != null) {
        groupValue.value=mergedTopGroup.groupValue;
      }
 else {
        groupValue.value=new BytesRef();
        groupValue.exists=false;
      }
      sg.groupValue=groupValue;
      sg.sortValues=mergedTopGroup.sortValues;
      mvalSearchGroups.add(sg);
    }
    return new FunctionSecondPassGroupingCollector(mvalSearchGroups,groupSort,sortWithinGroup,maxDocsPerGroup,getScores,getMaxScores,fillSortFields,vs,new HashMap<Object,Object>());
  }
}
