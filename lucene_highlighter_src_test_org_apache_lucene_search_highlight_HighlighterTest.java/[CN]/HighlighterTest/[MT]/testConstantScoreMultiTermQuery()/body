{
  numHighlights=0;
  query=new WildcardQuery(new Term(FIELD_NAME,"ken*"));
  ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
  searcher=newSearcher(reader);
  if (VERBOSE)   System.out.println("Searching for: " + query.toString(FIELD_NAME));
  hits=searcher.search(query,1000);
  for (int i=0; i < hits.totalHits; i++) {
    final StoredDocument doc=searcher.doc(hits.scoreDocs[i].doc);
    String text=doc.get(FIELD_NAME);
    TokenStream tokenStream=TokenSources.getAnyTokenStream(reader,hits.scoreDocs[i].doc,FIELD_NAME,doc,analyzer);
    int maxNumFragmentsRequired=2;
    String fragmentSeparator="...";
    QueryScorer scorer=new QueryScorer(query,HighlighterTest.FIELD_NAME);
    Highlighter highlighter=new Highlighter(this,scorer);
    highlighter.setTextFragmenter(new SimpleFragmenter(20));
    String result=highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,fragmentSeparator);
    if (VERBOSE)     System.out.println("\t" + result);
  }
  assertTrue("Failed to find correct number of highlights " + numHighlights + " found",numHighlights == 5);
  hits=searcher.search(query,1000);
  numHighlights=0;
  for (int i=0; i < hits.totalHits; i++) {
    final StoredDocument doc=searcher.doc(hits.scoreDocs[i].doc);
    String text=doc.get(FIELD_NAME);
    TokenStream tokenStream=TokenSources.getAnyTokenStream(reader,hits.scoreDocs[i].doc,FIELD_NAME,doc,analyzer);
    int maxNumFragmentsRequired=2;
    String fragmentSeparator="...";
    QueryScorer scorer=new QueryScorer(query,null);
    Highlighter highlighter=new Highlighter(this,scorer);
    highlighter.setTextFragmenter(new SimpleFragmenter(20));
    String result=highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,fragmentSeparator);
    if (VERBOSE)     System.out.println("\t" + result);
  }
  assertTrue("Failed to find correct number of highlights " + numHighlights + " found",numHighlights == 5);
  hits=searcher.search(query,1000);
  numHighlights=0;
  for (int i=0; i < hits.totalHits; i++) {
    final StoredDocument doc=searcher.doc(hits.scoreDocs[i].doc);
    String text=doc.get(FIELD_NAME);
    TokenStream tokenStream=TokenSources.getAnyTokenStream(reader,hits.scoreDocs[i].doc,FIELD_NAME,doc,analyzer);
    int maxNumFragmentsRequired=2;
    String fragmentSeparator="...";
    QueryScorer scorer=new QueryScorer(query,"random_field",HighlighterTest.FIELD_NAME);
    Highlighter highlighter=new Highlighter(this,scorer);
    highlighter.setTextFragmenter(new SimpleFragmenter(20));
    String result=highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,fragmentSeparator);
    if (VERBOSE)     System.out.println("\t" + result);
  }
  assertTrue("Failed to find correct number of highlights " + numHighlights + " found",numHighlights == 5);
}
