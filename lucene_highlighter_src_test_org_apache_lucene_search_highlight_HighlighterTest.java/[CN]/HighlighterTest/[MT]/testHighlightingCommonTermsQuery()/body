{
  CommonTermsQuery query=new CommonTermsQuery(Occur.MUST,Occur.SHOULD,3);
  query.add(new Term(FIELD_NAME,"this"));
  query.add(new Term(FIELD_NAME,"long"));
  query.add(new Term(FIELD_NAME,"very"));
  searcher=newSearcher(reader);
  TopDocs hits=searcher.search(query,10);
  assertEquals(2,hits.totalHits);
  QueryScorer scorer=new QueryScorer(query,FIELD_NAME);
  Highlighter highlighter=new Highlighter(scorer);
  StoredDocument doc=searcher.doc(hits.scoreDocs[0].doc);
  String storedField=doc.get(FIELD_NAME);
  TokenStream stream=TokenSources.getAnyTokenStream(searcher.getIndexReader(),hits.scoreDocs[0].doc,FIELD_NAME,doc,analyzer);
  Fragmenter fragmenter=new SimpleSpanFragmenter(scorer);
  highlighter.setTextFragmenter(fragmenter);
  String fragment=highlighter.getBestFragment(stream,storedField);
  assertEquals("Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot",fragment);
  doc=searcher.doc(hits.scoreDocs[1].doc);
  storedField=doc.get(FIELD_NAME);
  stream=TokenSources.getAnyTokenStream(searcher.getIndexReader(),hits.scoreDocs[1].doc,FIELD_NAME,doc,analyzer);
  highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));
  fragment=highlighter.getBestFragment(stream,storedField);
  assertEquals("This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>",fragment);
}
