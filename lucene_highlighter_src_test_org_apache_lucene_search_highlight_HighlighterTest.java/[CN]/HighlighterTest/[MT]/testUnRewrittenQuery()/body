{
  final TestHighlightRunner helper=new TestHighlightRunner(){
    @Override public void run() throws Exception {
      numHighlights=0;
      searcher=newSearcher(reader);
      Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,MockTokenFilter.ENGLISH_STOPSET);
      BooleanQuery query=new BooleanQuery();
      query.add(new WildcardQuery(new Term(FIELD_NAME,"jf?")),Occur.SHOULD);
      query.add(new WildcardQuery(new Term(FIELD_NAME,"kenned*")),Occur.SHOULD);
      if (VERBOSE)       System.out.println("Searching with primitive query");
      TopDocs hits=searcher.search(query,null,1000);
      int maxNumFragmentsRequired=3;
      for (int i=0; i < hits.totalHits; i++) {
        String text=searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);
        TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,text);
        Highlighter highlighter=getHighlighter(query,FIELD_NAME,HighlighterTest.this,false);
        highlighter.setTextFragmenter(new SimpleFragmenter(40));
        String highlightedText=highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,"...");
        if (VERBOSE)         System.out.println(highlightedText);
      }
      assertTrue("Failed to find correct number of highlights " + numHighlights + " found",numHighlights == 0);
    }
  }
;
  helper.start();
}
