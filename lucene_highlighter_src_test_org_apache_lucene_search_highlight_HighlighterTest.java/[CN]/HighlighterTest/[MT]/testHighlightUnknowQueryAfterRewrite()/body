{
  Query query=new Query(){
    @Override public Query rewrite(    IndexReader reader) throws IOException {
      CommonTermsQuery query=new CommonTermsQuery(Occur.MUST,Occur.SHOULD,3);
      query.add(new Term(FIELD_NAME,"this"));
      query.add(new Term(FIELD_NAME,"long"));
      query.add(new Term(FIELD_NAME,"very"));
      return query;
    }
    @Override public String toString(    String field){
      return null;
    }
    @Override public int hashCode(){
      return 31 * super.hashCode();
    }
    @Override public boolean equals(    Object obj){
      return super.equals(obj);
    }
  }
;
  searcher=newSearcher(reader);
  TopDocs hits=searcher.search(query,10);
  assertEquals(2,hits.totalHits);
  QueryScorer scorer=new QueryScorer(query,FIELD_NAME);
  Highlighter highlighter=new Highlighter(scorer);
  final int docId0=hits.scoreDocs[0].doc;
  Document doc=searcher.doc(docId0);
  String storedField=doc.get(FIELD_NAME);
  TokenStream stream=getAnyTokenStream(FIELD_NAME,docId0);
  Fragmenter fragmenter=new SimpleSpanFragmenter(scorer);
  highlighter.setTextFragmenter(fragmenter);
  String fragment=highlighter.getBestFragment(stream,storedField);
  assertEquals("Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot",fragment);
  final int docId1=hits.scoreDocs[1].doc;
  doc=searcher.doc(docId1);
  storedField=doc.get(FIELD_NAME);
  stream=getAnyTokenStream(FIELD_NAME,docId1);
  highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));
  fragment=highlighter.getBestFragment(stream,storedField);
  assertEquals("This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>",fragment);
}
