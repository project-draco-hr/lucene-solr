{
  Directory dir=newDirectory();
  String segment="_123";
  int chunk=1024;
  SegmentInfo si=newSegmentInfo(dir,"_123");
  byte[] segId=si.getId();
  createRandomFile(dir,segment + ".zero",0,segId);
  createRandomFile(dir,segment + ".one",1,segId);
  createRandomFile(dir,segment + ".ten",10,segId);
  createRandomFile(dir,segment + ".hundred",100,segId);
  createRandomFile(dir,segment + ".big1",chunk,segId);
  createRandomFile(dir,segment + ".big2",chunk - 1,segId);
  createRandomFile(dir,segment + ".big3",chunk + 1,segId);
  createRandomFile(dir,segment + ".big4",3 * chunk,segId);
  createRandomFile(dir,segment + ".big5",3 * chunk - 1,segId);
  createRandomFile(dir,segment + ".big6",3 * chunk + 1,segId);
  createRandomFile(dir,segment + ".big7",1000 * chunk,segId);
  List<String> files=new ArrayList<>();
  for (  String file : dir.listAll()) {
    if (file.startsWith(segment)) {
      files.add(file);
    }
  }
  si.setFiles(files);
  si.getCodec().compoundFormat().write(dir,si,IOContext.DEFAULT);
  Directory cfs=si.getCodec().compoundFormat().getCompoundReader(dir,si,IOContext.DEFAULT);
  for (  String file : files) {
    IndexInput check=dir.openInput(file,newIOContext(random()));
    IndexInput test=cfs.openInput(file,newIOContext(random()));
    assertSameStreams(file,check,test);
    assertSameSeekBehavior(file,check,test);
    test.close();
    check.close();
  }
  cfs.close();
  dir.close();
}
