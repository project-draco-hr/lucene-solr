{
  final double aX2X1d=aLon2 - aLon1;
  final double aY2Y1d=aLat2 - aLat1;
  final double bX2X1d=bLon2 - bLon1;
  final double bY2Y1d=bLat2 - bLat1;
  final double t1B=aX2X1d * (bLat2 - aLat1) - aY2Y1d * (bLon2 - aLon1);
  final double test1=(aX2X1d * (bLat1 - aLat1) - aY2Y1d * (bLon1 - aLon1)) * t1B;
  final double t2B=bX2X1d * (aLat2 - bLat1) - bY2Y1d * (aLon2 - bLon1);
  final double test2=(bX2X1d * (aLat1 - bLat1) - bY2Y1d * (aLon1 - bLon1)) * t2B;
  if (test1 < 0 && test2 < 0) {
    return true;
  }
  if (test1 == 0 || test2 == 0) {
    if (aLon1 == aLon2 || bLon1 == bLon2) {
      final double minAy=Math.min(aLat1,aLat2);
      final double maxAy=Math.max(aLat1,aLat2);
      final double minBy=Math.min(bLat1,bLat2);
      final double maxBy=Math.max(bLat1,bLat2);
      return !(minBy >= maxAy || maxBy <= minAy);
    }
    final double minAx=Math.min(aLon1,aLon2);
    final double maxAx=Math.max(aLon1,aLon2);
    final double minBx=Math.min(bLon1,bLon2);
    final double maxBx=Math.max(bLon1,bLon2);
    return !(minBx >= maxAx || maxBx <= minAx);
  }
  return false;
}
