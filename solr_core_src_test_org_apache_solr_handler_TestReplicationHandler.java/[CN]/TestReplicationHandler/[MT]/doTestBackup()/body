{
  String configFile="solrconfig-master1.xml";
  boolean addNumberToKeepInRequest=true;
  String backupKeepParamName=ReplicationHandler.NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM;
  if (random().nextBoolean()) {
    configFile="solrconfig-master1-keepOneBackup.xml";
    addNumberToKeepInRequest=false;
    backupKeepParamName=ReplicationHandler.NUMBER_BACKUPS_TO_KEEP_INIT_PARAM;
  }
  masterJetty.stop();
  master.copyConfigFile(CONF_DIR + configFile,"solrconfig.xml");
  masterJetty=createJetty(master);
  masterClient=createNewSolrServer(masterJetty.getLocalPort());
  nDocs--;
  masterClient.deleteByQuery("*:*");
  for (int i=0; i < nDocs; i++)   index(masterClient,"id",i,"name","name = " + i);
  masterClient.commit();
class BackupThread extends Thread {
    volatile String fail=null;
    final boolean addNumberToKeepInRequest;
    String backupKeepParamName;
    BackupThread(    boolean addNumberToKeepInRequest,    String backupKeepParamName){
      this.addNumberToKeepInRequest=addNumberToKeepInRequest;
      this.backupKeepParamName=backupKeepParamName;
    }
    @Override public void run(){
      String masterUrl="http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command="+ ReplicationHandler.CMD_BACKUP+ (addNumberToKeepInRequest ? "&" + backupKeepParamName + "=1" : "");
      URL url;
      InputStream stream=null;
      try {
        url=new URL(masterUrl);
        stream=url.openStream();
        stream.close();
      }
 catch (      Exception e) {
        fail=e.getMessage();
      }
 finally {
        IOUtils.closeQuietly(stream);
      }
    }
  }
  ;
class CheckStatus extends Thread {
    volatile String fail=null;
    volatile String response=null;
    volatile boolean success=false;
    volatile String backupTimestamp=null;
    final String lastBackupTimestamp;
    final Pattern p=Pattern.compile("<str name=\"snapshotCompletedAt\">(.*?)</str>");
    CheckStatus(    String lastBackupTimestamp){
      this.lastBackupTimestamp=lastBackupTimestamp;
    }
    @Override public void run(){
      String masterUrl="http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command="+ ReplicationHandler.CMD_DETAILS;
      URL url;
      InputStream stream=null;
      try {
        url=new URL(masterUrl);
        stream=url.openStream();
        response=IOUtils.toString(stream,"UTF-8");
        if (response.contains("<str name=\"status\">success</str>")) {
          Matcher m=p.matcher(response);
          if (!m.find()) {
            fail("could not find the completed timestamp in response.");
          }
          backupTimestamp=m.group(1);
          if (!backupTimestamp.equals(lastBackupTimestamp)) {
            success=true;
          }
        }
        stream.close();
      }
 catch (      Exception e) {
        fail=e.getMessage();
      }
 finally {
        IOUtils.closeQuietly(stream);
      }
    }
  }
  ;
  File[] snapDir=new File[2];
  String firstBackupTimestamp=null;
  for (int i=0; i < 2; i++) {
    BackupThread backupThread=new BackupThread(addNumberToKeepInRequest,backupKeepParamName);
    backupThread.start();
    File dataDir=new File(master.getDataDir());
    int waitCnt=0;
    CheckStatus checkStatus=new CheckStatus(firstBackupTimestamp);
    while (true) {
      checkStatus.run();
      if (checkStatus.fail != null) {
        fail(checkStatus.fail);
      }
      if (checkStatus.success) {
        if (i == 0) {
          firstBackupTimestamp=checkStatus.backupTimestamp;
          Thread.sleep(1000);
        }
        break;
      }
      Thread.sleep(200);
      if (waitCnt == 20) {
        fail("Backup success not detected:" + checkStatus.response);
      }
      waitCnt++;
    }
    if (backupThread.fail != null) {
      fail(backupThread.fail);
    }
    File[] files=dataDir.listFiles(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        if (name.startsWith("snapshot")) {
          return true;
        }
        return false;
      }
    }
);
    assertEquals(1,files.length);
    snapDir[i]=files[0];
    Directory dir=new SimpleFSDirectory(snapDir[i].getAbsoluteFile());
    IndexReader reader=DirectoryReader.open(dir);
    IndexSearcher searcher=new IndexSearcher(reader);
    TopDocs hits=searcher.search(new MatchAllDocsQuery(),1);
    assertEquals(nDocs,hits.totalHits);
    reader.close();
    dir.close();
  }
  if (snapDir[0].exists()) {
    fail("The first backup should have been cleaned up because " + backupKeepParamName + " was set to 1.");
  }
  for (int i=0; i < snapDir.length; i++) {
    AbstractSolrTestCase.recurseDelete(snapDir[i]);
  }
}
