{
  clearIndexWithReplication();
{
    NamedList<Object> details=getDetails(masterClient);
    assertEquals("master isMaster?","true",details.get("isMaster"));
    assertEquals("master isSlave?","false",details.get("isSlave"));
    assertNotNull("master has master section",details.get("master"));
  }
  for (int i=0; i < 3; i++) {
    NamedList<Object> details=getDetails(slaveClient);
    assertEquals("slave isMaster?","false",details.get("isMaster"));
    assertEquals("slave isSlave?","true",details.get("isSlave"));
    assertNotNull("slave has slave section",details.get("slave"));
    Object timesFailed=((NamedList)details.get("slave")).get(IndexFetcher.TIMES_FAILED);
    assertEquals("slave has fetch error count",null,timesFailed);
    if (3 != i) {
      index(masterClient,"id",i,"name","name = " + i);
      masterClient.commit();
      pullFromTo(masterJetty,slaveJetty);
    }
  }
  SolrInstance repeater=null;
  JettySolrRunner repeaterJetty=null;
  SolrClient repeaterClient=null;
  try {
    repeater=new SolrInstance(createTempDir("solr-instance").toFile(),"repeater",masterJetty.getLocalPort());
    repeater.setUp();
    repeaterJetty=createJetty(repeater);
    repeaterClient=createNewSolrClient(repeaterJetty.getLocalPort());
    NamedList<Object> details=getDetails(repeaterClient);
    assertEquals("repeater isMaster?","true",details.get("isMaster"));
    assertEquals("repeater isSlave?","true",details.get("isSlave"));
    assertNotNull("repeater has master section",details.get("master"));
    assertNotNull("repeater has slave section",details.get("slave"));
  }
  finally {
    try {
      if (repeaterJetty != null)       repeaterJetty.stop();
    }
 catch (    Exception e) {
    }
    if (repeaterClient != null)     repeaterClient.close();
  }
}
