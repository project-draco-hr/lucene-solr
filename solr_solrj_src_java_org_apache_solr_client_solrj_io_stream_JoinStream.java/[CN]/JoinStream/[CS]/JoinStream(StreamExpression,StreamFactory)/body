{
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  StreamExpressionNamedParameter onExpression=factory.getNamedOperand(expression,"on");
  if (expression.getParameters().size() != streamExpressions.size() + 1) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found",expression));
  }
  if (streamExpressions.size() < 2) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting at least two streams but found %d (must be PushBackStream types)",expression,streamExpressions.size()));
  }
  this.streams=new ArrayList<PushBackStream>();
  for (  StreamExpression streamExpression : streamExpressions) {
    this.streams.add(new PushBackStream(factory.constructStream(streamExpression)));
  }
  if (null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'on' parameter listing fields to join on but didn't find one",expression));
  }
  this.eq=factory.constructEqualitor(((StreamExpressionValue)onExpression.getParameter()).getValue(),FieldEqualitor.class);
}
