{
  String versionFieldName=versionField.getName();
  log.debug("Refreshing highest value of {} for {} version buckets from index",versionFieldName,buckets.length);
  long maxVersionInIndex=0L;
  if (versionField.indexed()) {
    LeafReader leafReader=SlowCompositeReaderWrapper.wrap(searcher.getIndexReader());
    Terms versionTerms=leafReader.terms(versionFieldName);
    Long max=(versionTerms != null) ? LegacyNumericUtils.getMaxLong(versionTerms) : null;
    if (max != null) {
      maxVersionInIndex=max.longValue();
      log.debug("Found MAX value {} from Terms for {} in index",maxVersionInIndex,versionFieldName);
    }
 else {
      log.debug("No terms found for {}, cannot seed version bucket highest value from index",versionFieldName);
    }
  }
 else {
    ValueSource vs=versionField.getType().getValueSource(versionField,null);
    Map funcContext=ValueSource.newContext(searcher);
    vs.createWeight(funcContext,searcher);
    for (    LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {
      int maxDoc=ctx.reader().maxDoc();
      FunctionValues fv=vs.getValues(funcContext,ctx);
      for (int doc=0; doc < maxDoc; doc++) {
        long v=fv.longVal(doc);
        maxVersionInIndex=Math.max(v,maxVersionInIndex);
      }
    }
  }
  return maxVersionInIndex;
}
