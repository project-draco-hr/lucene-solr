{
  IndexSchema schema=h.getCore().getLatestSchema();
  final String fieldName="not_in_schema";
  assertNull(schema.getFieldOrNull(fieldName));
  SolrInputDocument d=null;
  String chain="cascading-parsers-no-run-processor";
  Map<Boolean,String> booleans=new HashMap<>();
  booleans.put(true,"truE");
  booleans.put(false,"False");
  d=processAdd(chain,doc(f("id","341"),f(fieldName,booleans.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Boolean);
    booleans.remove(o);
  }
  assertTrue(booleans.isEmpty());
  Map<Integer,String> ints=new HashMap<>();
  ints.put(2,"2");
  ints.put(50928,"50928");
  ints.put(86942008,"86,942,008");
  d=processAdd(chain,doc(f("id","333"),f(fieldName,ints.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Integer);
    ints.remove(o);
  }
  assertTrue(ints.isEmpty());
  Map<Long,String> longs=new HashMap<>();
  longs.put(2L,"2");
  longs.put(50928L,"50928");
  longs.put(86942008987654L,"86,942,008,987,654");
  d=processAdd(chain,doc(f("id","342"),f(fieldName,longs.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Long);
    longs.remove(o);
  }
  assertTrue(longs.isEmpty());
  Map<Double,String> doubles=new HashMap<>();
  doubles.put(2.0,"2.");
  doubles.put(509.28,"509.28");
  doubles.put(86942.008,"86,942.008");
  d=processAdd(chain,doc(f("id","342"),f(fieldName,doubles.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Double);
    longs.remove(o);
  }
  DateTimeFormatter dateTimeFormatter=ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();
  Map<Date,String> dates=new HashMap<>();
  String[] dateStrings={"2020-05-13T18:47","1989-12-14","1682-07-22T18:33:00.000Z"};
  for (  String dateString : dateStrings) {
    dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(),dateString);
  }
  d=processAdd(chain,doc(f("id","343"),f(fieldName,dates.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Date);
    dates.remove(o);
  }
  assertTrue(dates.isEmpty());
  Map<Double,String> mixedLongsAndDoubles=new LinkedHashMap<>();
  mixedLongsAndDoubles.put(85.0,"85");
  mixedLongsAndDoubles.put(2.94423E-9,"2.94423E-9");
  mixedLongsAndDoubles.put(2894518.0,"2,894,518");
  mixedLongsAndDoubles.put(48794721.937,"48,794,721.937");
  d=processAdd(chain,doc(f("id","344"),f(fieldName,mixedLongsAndDoubles.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Double);
    mixedLongsAndDoubles.remove(o);
  }
  assertTrue(mixedLongsAndDoubles.isEmpty());
  Set<String> mixed=new HashSet<>();
  mixed.add("true");
  mixed.add("1682-07-22T18:33:00.000Z");
  mixed.add("2,894,518");
  mixed.add("308,393,131,379,900");
  mixed.add("48,794,721.937");
  d=processAdd(chain,doc(f("id","345"),f(fieldName,mixed)));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof String);
  }
  Map<Double,Object> mixedDoubles=new LinkedHashMap<>();
  mixedDoubles.put(85.0,"85");
  mixedDoubles.put(2.94423E-9,2.94423E-9);
  mixedDoubles.put(2894518.0,"2,894,518");
  mixedDoubles.put(48794721.937,"48,794,721.937");
  d=processAdd(chain,doc(f("id","3391"),f(fieldName,mixedDoubles.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Double);
    mixedDoubles.remove(o);
  }
  assertTrue(mixedDoubles.isEmpty());
  Map<Integer,Object> mixedInts=new LinkedHashMap<>();
  mixedInts.put(85,"85");
  mixedInts.put(294423,294423);
  mixedInts.put(-2894518,"-2,894,518");
  mixedInts.put(1879472193,"1,879,472,193");
  d=processAdd(chain,doc(f("id","3392"),f(fieldName,mixedInts.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Integer);
    mixedInts.remove(o);
  }
  assertTrue(mixedInts.isEmpty());
  Map<Long,Object> mixedLongs=new LinkedHashMap<>();
  mixedLongs.put(85L,"85");
  mixedLongs.put(42944233L,42944233L);
  mixedLongs.put(2894518L,"2,894,518");
  mixedLongs.put(48794721937L,"48,794,721,937");
  d=processAdd(chain,doc(f("id","3393"),f(fieldName,mixedLongs.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Long);
    mixedLongs.remove(o);
  }
  assertTrue(mixedLongs.isEmpty());
  Map<Boolean,Object> mixedBooleans=new LinkedHashMap<>();
  mixedBooleans.put(true,"true");
  mixedBooleans.put(false,false);
  mixedBooleans.put(false,"false");
  mixedBooleans.put(true,"true");
  d=processAdd(chain,doc(f("id","3394"),f(fieldName,mixedBooleans.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Boolean);
    mixedBooleans.remove(o);
  }
  assertTrue(mixedBooleans.isEmpty());
  dateTimeFormatter=ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();
  Map<Date,Object> mixedDates=new HashMap<>();
  dateStrings=new String[]{"2020-05-13T18:47","1989-12-14","1682-07-22T18:33:00.000Z"};
  for (  String dateString : dateStrings) {
    mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(),dateString);
  }
  Date extraDate=dateTimeFormatter.parseDateTime("2003-04-24").toDate();
  mixedDates.put(extraDate,extraDate);
  d=processAdd(chain,doc(f("id","3395"),f(fieldName,mixedDates.values())));
  assertNotNull(d);
  for (  Object o : d.getFieldValues(fieldName)) {
    assertTrue(o instanceof Date);
    mixedDates.remove(o);
  }
  assertTrue(mixedDates.isEmpty());
}
