{
  BytesRef ref=new BytesRef(new byte[]{1,2,3,4});
  for (int i=offset; i < offset + num; i++) {
    Document doc=new Document();
    doc.add(new Field("id",i + "",TextField.TYPE_STORED));
switch (valueType) {
case VAR_INTS:
      values[i]=random.nextInt();
    valField.setInt(values[i]);
  break;
case FIXED_INTS_16:
values[i]=random.nextInt(Short.MAX_VALUE);
valField.setInt((short)values[i],true);
break;
case FIXED_INTS_32:
values[i]=random.nextInt();
valField.setInt((int)values[i],true);
break;
case FIXED_INTS_64:
values[i]=random.nextLong();
valField.setInt(values[i],true);
break;
case FLOAT_64:
double nextDouble=random.nextDouble();
values[i]=Double.doubleToRawLongBits(nextDouble);
valField.setFloat(nextDouble);
break;
case FLOAT_32:
final float nextFloat=random.nextFloat();
values[i]=Double.doubleToRawLongBits(nextFloat);
valField.setFloat(nextFloat);
break;
case FIXED_INTS_8:
values[i]=(byte)i;
valField.setInt((byte)values[i],true);
break;
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
values[i]=random.nextLong();
ref.copy(values[i]);
valField.setBytes(ref,valueType);
break;
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
if (random.nextBoolean()) {
ref.copy(random.nextInt());
values[i]=asInt(ref);
}
 else {
ref.copy(random.nextLong());
values[i]=asLong(ref);
}
valField.setBytes(ref,valueType);
break;
default :
fail("unexpected value " + valueType);
}
doc.add(valField);
writer.addDocument(doc);
if (random.nextInt(10) == 0) {
writer.commit();
}
}
}
