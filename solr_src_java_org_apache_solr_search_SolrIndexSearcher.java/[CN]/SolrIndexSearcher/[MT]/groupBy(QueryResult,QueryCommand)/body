{
  DocListAndSet out=new DocListAndSet();
  qr.setDocListAndSet(out);
  DocSet filter=cmd.getFilter() != null ? cmd.getFilter() : getDocSet(cmd.getFilterList());
  int last=cmd.getOffset() + cmd.getLen();
  if (last < 0 || last > maxDoc())   last=maxDoc();
  boolean needScores=(cmd.getFlags() & GET_SCORES) != 0;
  Query query=QueryUtils.makeQueryable(cmd.getQuery());
  final Filter luceneFilter=filter == null ? null : filter.getTopFilter();
  Sort sort=cmd.getSort();
  if (sort == null)   sort=new Sort();
  List<TopGroupCollector> collectors=new ArrayList<TopGroupCollector>(cmd.groupCommands.size());
  for (  GroupCommand groupCommand : cmd.groupCommands) {
    if (groupCommand instanceof GroupCommandFunc) {
      GroupCommandFunc gc=(GroupCommandFunc)groupCommand;
      Map context=ValueSource.newContext();
      gc.groupBy.createWeight(context,this);
      TopGroupCollector collector;
      if (gc instanceof GroupSortCommand) {
        GroupSortCommand sortGc=(GroupSortCommand)gc;
        collector=new TopGroupSortCollector(gc.groupBy,context,sort,sortGc.sort,last);
      }
 else {
        collector=new TopGroupCollector(gc.groupBy,context,sort,last);
      }
      collectors.add(collector);
      gc.context=context;
      gc.collector=collector;
    }
  }
  search(query,luceneFilter,MultiCollector.wrap(collectors));
  List<Phase2GroupCollector> phase2Collectors=new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());
  for (  GroupCommand groupCommand : cmd.groupCommands) {
    if (groupCommand instanceof GroupCommandFunc) {
      GroupCommandFunc gc=(GroupCommandFunc)groupCommand;
      Sort collectorSort;
      if (gc instanceof GroupSortCommand) {
        collectorSort=((GroupSortCommand)gc).sort;
      }
 else {
        collectorSort=sort;
      }
      Phase2GroupCollector collector=new Phase2GroupCollector((TopGroupCollector)gc.collector,gc.groupBy,gc.context,collectorSort,gc.docsPerGroup,needScores);
      phase2Collectors.add(collector);
    }
  }
  search(query,luceneFilter,MultiCollector.wrap(phase2Collectors));
  NamedList grouped=new SimpleOrderedMap();
  for (int cmdnum=0; cmdnum < cmd.groupCommands.size(); cmdnum++) {
    GroupCommand groupCommand=cmd.groupCommands.get(cmdnum);
    GroupCommandFunc groupCommandFunc=(GroupCommandFunc)groupCommand;
    TopGroupCollector collector=collectors.get(cmdnum);
    Phase2GroupCollector collector2=phase2Collectors.get(cmdnum);
    if (collector.orderedGroups == null)     collector.buildSet();
    NamedList groupResult=new SimpleOrderedMap();
    grouped.add(groupCommand.key,groupResult);
    groupResult.add("matches",collector.getMatches());
    List groupList=new ArrayList();
    groupResult.add("groups",groupList);
    for (    SearchGroup group : collector.orderedGroups) {
      NamedList nl=new SimpleOrderedMap();
      groupList.add(nl);
      nl.add("groupValue",group.groupValue.toObject());
      SearchGroupDocs groupDocs=collector2.groupMap.get(group.groupValue);
      TopDocs topDocs=groupDocs.collector.topDocs(0,groupCommandFunc.docsPerGroup);
      int ids[]=new int[topDocs.scoreDocs.length];
      float[] scores=needScores ? new float[topDocs.scoreDocs.length] : null;
      for (int i=0; i < ids.length; i++) {
        ids[i]=topDocs.scoreDocs[i].doc;
        if (scores != null)         scores[i]=topDocs.scoreDocs[i].score;
      }
      DocSlice docs=new DocSlice(0,ids.length,ids,scores,topDocs.totalHits,topDocs.getMaxScore());
      nl.add("doclist",docs);
    }
    qr.groupedResults=grouped;
  }
}
