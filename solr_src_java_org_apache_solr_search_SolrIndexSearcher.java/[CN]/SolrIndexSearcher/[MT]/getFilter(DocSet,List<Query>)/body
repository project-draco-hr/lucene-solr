{
  Filter answer=setFilter == null ? null : setFilter.getTopFilter();
  if (queries == null || queries.size() == 0) {
    return answer;
  }
  if (answer == null && queries.size() == 1) {
    return getFilter(queries.get(0));
  }
  DocSet finalSet=null;
  int nDocSets=0;
  boolean[] neg=new boolean[queries.size()];
  DocSet[] sets=new DocSet[queries.size()];
  Query[] nocache=new Query[queries.size()];
  int smallestIndex=-1;
  int smallestCount=Integer.MAX_VALUE;
  for (  Query q : queries) {
    Query posQuery=QueryUtils.getAbs(q);
    sets[nDocSets]=getPositiveDocSet(posQuery);
    if (q == posQuery) {
      neg[nDocSets]=false;
      int sz=sets[nDocSets].size();
      if (sz < smallestCount) {
        smallestCount=sz;
        smallestIndex=nDocSets;
        finalSet=sets[nDocSets];
      }
    }
 else {
      neg[nDocSets]=true;
    }
    nDocSets++;
  }
  if (finalSet == null)   finalSet=getPositiveDocSet(matchAllDocsQuery);
  for (int i=0; i < sets.length; i++) {
    if (neg[i])     finalSet=finalSet.andNot(sets[i]);
  }
  for (int i=0; i < sets.length; i++) {
    if (!neg[i] && i != smallestIndex)     finalSet=finalSet.intersection(sets[i]);
  }
  return finalSet.getTopFilter();
}
