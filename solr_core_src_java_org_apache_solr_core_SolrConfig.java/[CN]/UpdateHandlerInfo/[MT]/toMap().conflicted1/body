{
  LinkedHashMap result=new LinkedHashMap();
  if (getZnodeVersion() > -1)   result.put("znodeVersion",getZnodeVersion());
  result.put("luceneMatchVersion",luceneMatchVersion);
  result.put("updateHandler",getUpdateHandlerInfo().toMap());
  Map m=new LinkedHashMap();
  result.put("query",m);
  m.put("useFilterForSortedQuery",useFilterForSortedQuery);
  m.put("queryResultWindowSize",queryResultWindowSize);
  m.put("queryResultMaxDocsCached",queryResultMaxDocsCached);
  m.put("enableLazyFieldLoading",enableLazyFieldLoading);
  m.put("maxBooleanClauses",booleanQueryMaxClauseCount);
  for (  SolrPluginInfo plugin : plugins) {
    List<PluginInfo> infos=getPluginInfos(plugin.clazz.getName());
    if (infos == null || infos.isEmpty())     continue;
    String tag=plugin.tag;
    tag=tag.replace("/","");
    if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {
      LinkedHashMap items=new LinkedHashMap();
      for (      PluginInfo info : infos)       items.put(info.name,info.toMap());
      result.put(tag,items);
    }
 else {
      if (plugin.options.contains(MULTI_OK)) {
        ArrayList<Map> l=new ArrayList<>();
        for (        PluginInfo info : infos)         l.add(info.toMap());
        result.put(tag,l);
      }
 else {
        result.put(tag,infos.get(0).toMap());
      }
    }
  }
  addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);
  if (jmxConfig != null)   result.put("jmx",jmxConfig.toMap());
  m=new LinkedHashMap();
  result.put("requestDispatcher",m);
  m.put("handleSelect",handleSelect);
  if (httpCachingConfig != null)   m.put("httpCaching",httpCachingConfig.toMap());
  m.put("requestParsers",ZkNodeProps.makeMap("multipartUploadLimitKB",multipartUploadLimitKB,"formUploadLimitKB",formUploadLimitKB,"addHttpRequestToContext",addHttpRequestToContext));
  if (indexConfig != null)   result.put("indexConfig",indexConfig.toMap());
  return result;
}
