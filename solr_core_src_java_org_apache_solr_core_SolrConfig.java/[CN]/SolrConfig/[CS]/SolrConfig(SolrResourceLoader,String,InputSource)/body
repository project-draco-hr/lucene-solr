{
  super(loader,name,is,"/config/");
  getOverlay();
  getRequestParams();
  initLibs();
  luceneMatchVersion=getLuceneVersion("luceneMatchVersion");
  String indexConfigPrefix;
  boolean hasDeprecatedIndexConfig=(getNode("indexDefaults",false) != null) || (getNode("mainIndex",false) != null);
  if (hasDeprecatedIndexConfig) {
    throw new SolrException(ErrorCode.FORBIDDEN,"<indexDefaults> and <mainIndex> configuration sections are discontinued. Use <indexConfig> instead.");
  }
 else {
    indexConfigPrefix="indexConfig";
  }
  assertWarnOrFail("The <nrtMode> config has been discontinued and NRT mode is always used by Solr." + " This config will be removed in future versions.",getNode(indexConfigPrefix + "/nrtMode",false) == null,true);
  assertWarnOrFail("Solr no longer supports forceful unlocking via the 'unlockOnStartup' option.  " + "This is no longer necessary for the default lockType except in situations where " + "it would be dangerous and should not be done.  For other lockTypes and/or "+ "directoryFactory options it may also be dangerous and users must resolve "+ "problematic locks manually.",null == getNode(indexConfigPrefix + "/unlockOnStartup",false),true);
  indexConfig=new SolrIndexConfig(this,"indexConfig",null);
  booleanQueryMaxClauseCount=getInt("query/maxBooleanClauses",BooleanQuery.getMaxClauseCount());
  log.info("Using Lucene MatchVersion: " + luceneMatchVersion);
  if (get("query/boolTofilterOptimizer",null) != null)   log.warn("solrconfig.xml: <boolTofilterOptimizer> is currently not implemented and has no effect.");
  if (get("query/HashDocSet",null) != null)   log.warn("solrconfig.xml: <HashDocSet> is deprecated and no longer recommended used.");
  useFilterForSortedQuery=getBool("query/useFilterForSortedQuery",false);
  queryResultWindowSize=Math.max(1,getInt("query/queryResultWindowSize",1));
  queryResultMaxDocsCached=getInt("query/queryResultMaxDocsCached",Integer.MAX_VALUE);
  enableLazyFieldLoading=getBool("query/enableLazyFieldLoading",false);
  useRangeVersionsForPeerSync=getBool("peerSync/useRangeVersions",true);
  filterCacheConfig=CacheConfig.getConfig(this,"query/filterCache");
  queryResultCacheConfig=CacheConfig.getConfig(this,"query/queryResultCache");
  documentCacheConfig=CacheConfig.getConfig(this,"query/documentCache");
  CacheConfig conf=CacheConfig.getConfig(this,"query/fieldValueCache");
  if (conf == null) {
    Map<String,String> args=new HashMap<>();
    args.put(NAME,"fieldValueCache");
    args.put("size","10000");
    args.put("initialSize","10");
    args.put("showItems","-1");
    conf=new CacheConfig(FastLRUCache.class,args,null);
  }
  fieldValueCacheConfig=conf;
  useColdSearcher=getBool("query/useColdSearcher",false);
  dataDir=get("dataDir",null);
  if (dataDir != null && dataDir.length() == 0)   dataDir=null;
  org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);
  hashSetInverseLoadFactor=1.0f / getFloat("//HashDocSet/@loadFactor",0.75f);
  hashDocSetMaxSize=getInt("//HashDocSet/@maxSize",3000);
  httpCachingConfig=new HttpCachingConfig(this);
  Node jmx=getNode("jmx",false);
  if (jmx != null) {
    jmxConfig=new JmxConfiguration(true,get("jmx/@agentId",null),get("jmx/@serviceUrl",null),get("jmx/@rootName",null));
  }
 else {
    jmxConfig=new JmxConfiguration(false,null,null,null);
  }
  maxWarmingSearchers=getInt("query/maxWarmingSearchers",Integer.MAX_VALUE);
  slowQueryThresholdMillis=getInt("query/slowQueryThresholdMillis",-1);
  for (  SolrPluginInfo plugin : plugins)   loadPluginInfo(plugin);
  Map<String,CacheConfig> userCacheConfigs=CacheConfig.getMultipleConfigs(this,"query/cache");
  List<PluginInfo> caches=getPluginInfos(SolrCache.class.getName());
  if (!caches.isEmpty()) {
    for (    PluginInfo c : caches) {
      userCacheConfigs.put(c.name,CacheConfig.getConfig(this,"cache",c.attributes,null));
    }
  }
  this.userCacheConfigs=Collections.unmodifiableMap(userCacheConfigs);
  updateHandlerInfo=loadUpdatehandlerInfo();
  multipartUploadLimitKB=getInt("requestDispatcher/requestParsers/@multipartUploadLimitInKB",2048);
  formUploadLimitKB=getInt("requestDispatcher/requestParsers/@formdataUploadLimitInKB",2048);
  enableRemoteStreams=getBool("requestDispatcher/requestParsers/@enableRemoteStreaming",false);
  handleSelect=getBool("requestDispatcher/@handleSelect",true);
  addHttpRequestToContext=getBool("requestDispatcher/requestParsers/@addHttpRequestToContext",false);
  List<PluginInfo> argsInfos=getPluginInfos(InitParams.class.getName());
  if (argsInfos != null) {
    Map<String,InitParams> argsMap=new HashMap<>();
    for (    PluginInfo p : argsInfos) {
      InitParams args=new InitParams(p);
      argsMap.put(args.name == null ? String.valueOf(args.hashCode()) : args.name,args);
    }
    this.initParams=Collections.unmodifiableMap(argsMap);
  }
  solrRequestParsers=new SolrRequestParsers(this);
  log.info("Loaded SolrConfig: " + name);
}
