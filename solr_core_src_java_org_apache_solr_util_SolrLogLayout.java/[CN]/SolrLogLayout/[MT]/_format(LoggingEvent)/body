{
  String message=(String)event.getMessage();
  StringBuilder sb=new StringBuilder(message.length() + 80);
  long now=event.timeStamp;
  long timeFromStart=now - startTime;
  long timeSinceLast=now - lastTime;
  lastTime=now;
  String shortClassName=getShortClassName(event.getLocationInformation().getClassName(),event.getLocationInformation().getMethodName());
  SolrRequestInfo requestInfo=SolrRequestInfo.getRequestInfo();
  SolrQueryRequest req=requestInfo == null ? null : requestInfo.getReq();
  SolrCore core=req == null ? null : req.getCore();
  ZkController zkController=null;
  CoreInfo info=null;
  if (core != null) {
    info=coreInfoMap.get(core.hashCode());
    if (info == null) {
      info=new CoreInfo();
      info.shortId="C" + Integer.toString(CoreInfo.maxCoreNum++);
      coreInfoMap.put(core.hashCode(),info);
      if (sb.length() == 0)       sb.append("ASYNC ");
      sb.append(" NEW_CORE " + info.shortId);
      sb.append(" name=" + core.getName());
      sb.append(" " + core);
    }
    if (zkController == null) {
      zkController=core.getCoreDescriptor().getCoreContainer().getZkController();
    }
    if (zkController != null) {
      if (info.url == null) {
        info.url=zkController.getBaseUrl() + "/" + core.getName();
        sb.append(" url=" + info.url + " node="+ zkController.getNodeName());
      }
      Map<String,Object> coreProps=getReplicaProps(zkController,core);
      if (info.coreProps == null || !coreProps.equals(info.coreProps)) {
        info.coreProps=coreProps;
        final String corePropsString="coll:" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + " core:"+ core.getName()+ " props:"+ coreProps;
        sb.append(" " + info.shortId + "_STATE="+ corePropsString);
      }
    }
  }
  if (sb.length() > 0)   sb.append('\n');
  sb.append(timeFromStart);
  appendThread(sb,event);
  if (info != null) {
    sb.append(' ').append(info.shortId);
  }
  if (zkController != null) {
    sb.append(" P").append(zkController.getHostPort());
  }
  if (shortClassName.length() > 0) {
    sb.append(' ').append(shortClassName);
  }
  if (event.getLevel() != Level.INFO) {
    sb.append(' ').append(event.getLevel());
  }
  sb.append(' ');
  appendMultiLineString(sb,message);
  ThrowableInformation thInfo=event.getThrowableInformation();
  if (thInfo != null) {
    Throwable th=event.getThrowableInformation().getThrowable();
    if (th != null) {
      sb.append(' ');
      String err=SolrException.toStr(th);
      String ignoredMsg=SolrException.doIgnore(th,err);
      if (ignoredMsg != null) {
        sb.append(ignoredMsg);
      }
 else {
        sb.append(err);
      }
    }
  }
  sb.append('\n');
  return sb.toString();
}
