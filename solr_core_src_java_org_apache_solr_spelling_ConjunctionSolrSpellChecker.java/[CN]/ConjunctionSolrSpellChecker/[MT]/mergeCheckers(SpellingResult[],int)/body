{
  Map<Token,Integer> combinedTokenFrequency=new HashMap<>();
  Map<Token,List<LinkedHashMap<String,Integer>>> allSuggestions=new LinkedHashMap<>();
  for (  SpellingResult result : results) {
    if (result.getTokenFrequency() != null) {
      combinedTokenFrequency.putAll(result.getTokenFrequency());
    }
    for (    Map.Entry<Token,LinkedHashMap<String,Integer>> entry : result.getSuggestions().entrySet()) {
      List<LinkedHashMap<String,Integer>> allForThisToken=allSuggestions.get(entry.getKey());
      if (allForThisToken == null) {
        allForThisToken=new ArrayList<>();
        allSuggestions.put(entry.getKey(),allForThisToken);
      }
      allForThisToken.add(entry.getValue());
    }
  }
  SpellingResult combinedResult=new SpellingResult();
  for (  Map.Entry<Token,List<LinkedHashMap<String,Integer>>> entry : allSuggestions.entrySet()) {
    Token original=entry.getKey();
    List<Iterator<Map.Entry<String,Integer>>> corrIters=new ArrayList<>(entry.getValue().size());
    for (    LinkedHashMap<String,Integer> corrections : entry.getValue()) {
      corrIters.add(corrections.entrySet().iterator());
    }
    int numberAdded=0;
    while (numberAdded < numSug) {
      boolean anyData=false;
      for (      Iterator<Map.Entry<String,Integer>> iter : corrIters) {
        if (iter.hasNext()) {
          anyData=true;
          Map.Entry<String,Integer> corr=iter.next();
          combinedResult.add(original,corr.getKey(),corr.getValue());
          Integer tokenFrequency=combinedTokenFrequency.get(original);
          if (tokenFrequency != null) {
            combinedResult.addFrequency(original,tokenFrequency);
          }
          if (++numberAdded == numSug) {
            break;
          }
        }
      }
      if (!anyData) {
        break;
      }
    }
  }
  return combinedResult;
}
