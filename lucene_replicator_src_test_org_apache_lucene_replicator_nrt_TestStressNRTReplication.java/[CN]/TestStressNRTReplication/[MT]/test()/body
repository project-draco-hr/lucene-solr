{
  Node.globalStartNS=System.nanoTime();
  message("change thread name from " + Thread.currentThread().getName());
  Thread.currentThread().setName("main");
  childTempDir=createTempDir("child");
  versionToTransLogLocation.put(0L,0L);
  versionToMarker.put(0L,0);
  int numNodes;
  if (NUM_NODES == null) {
    numNodes=TestUtil.nextInt(random(),2,10);
  }
 else {
    numNodes=NUM_NODES.intValue();
  }
  System.out.println("TEST: using " + numNodes + " nodes");
  transLogPath=createTempDir("NRTReplication").resolve("translog");
  transLog=new SimpleTransLog(transLogPath);
  indexPaths=new Path[numNodes];
  nodes=new NodeProcess[numNodes];
  nodeTimeStamps=new long[numNodes];
  Arrays.fill(nodeTimeStamps,Node.globalStartNS);
  starting=new boolean[numNodes];
  for (int i=0; i < numNodes; i++) {
    indexPaths[i]=createTempDir("index" + i);
  }
  Thread[] indexers=new Thread[TestUtil.nextInt(random(),1,3)];
  System.out.println("TEST: launch " + indexers.length + " indexer threads");
  for (int i=0; i < indexers.length; i++) {
    indexers[i]=new IndexThread();
    indexers[i].setName("indexer" + i);
    indexers[i].setDaemon(true);
    indexers[i].start();
  }
  Thread[] searchers=new Thread[TestUtil.nextInt(random(),1,3)];
  System.out.println("TEST: launch " + searchers.length + " searcher threads");
  for (int i=0; i < searchers.length; i++) {
    searchers[i]=new SearchThread();
    searchers[i].setName("searcher" + i);
    searchers[i].setDaemon(true);
    searchers[i].start();
  }
  Thread restarter=new RestartThread();
  restarter.setName("restarter");
  restarter.setDaemon(true);
  restarter.start();
  int runTimeSec;
  if (TEST_NIGHTLY) {
    runTimeSec=RANDOM_MULTIPLIER * TestUtil.nextInt(random(),120,240);
  }
 else {
    runTimeSec=RANDOM_MULTIPLIER * TestUtil.nextInt(random(),45,120);
  }
  System.out.println("TEST: will run for " + runTimeSec + " sec");
  long endTime=System.nanoTime() + runTimeSec * 1000000000L;
  sendReplicasToPrimary();
  while (failed.get() == false && System.nanoTime() < endTime) {
    Thread.sleep(TestUtil.nextInt(random(),Math.min(runTimeSec * 4,200),runTimeSec * 4));
    if (primary != null && random().nextBoolean()) {
      NodeProcess curPrimary=primary;
      if (curPrimary != null) {
        long nextTransLogLoc=transLog.getNextLocation();
        int markerUptoSav=markerUpto.get();
        message("top: now flush primary; at least marker count=" + markerUptoSav);
        long result;
        try {
          result=primary.flush(markerUptoSav);
        }
 catch (        Throwable t) {
          message("top: flush failed; skipping: " + t.getMessage());
          result=-1;
        }
        if (result > 0) {
          message("top: flush finished with changed; new primary version=" + result);
          lastPrimaryVersion=result;
          addTransLogLoc(lastPrimaryVersion,nextTransLogLoc);
          addVersionMarker(lastPrimaryVersion,markerUptoSav);
        }
      }
    }
    StringBuilder sb=new StringBuilder();
    int liveCount=0;
    for (int i=0; i < nodes.length; i++) {
      NodeProcess node=nodes[i];
      if (node != null) {
        if (sb.length() != 0) {
          sb.append(" ");
        }
        liveCount++;
        if (node.isPrimary) {
          sb.append('P');
        }
 else {
          sb.append('R');
        }
        sb.append(i);
      }
    }
    message("PG=" + (primary == null ? "X" : primaryGen) + " "+ liveCount+ " (of "+ nodes.length+ ") nodes running: "+ sb);
{
      NodeProcess node=nodes[random().nextInt(nodes.length)];
      if (node != null && node.nodeIsClosing.get() == false) {
        message("top: now commit node=" + node);
        node.commitAsync();
      }
    }
  }
  message("TEST: top: test done, now close");
  stop.set(true);
  for (  Thread thread : indexers) {
    thread.join();
  }
  for (  Thread thread : searchers) {
    thread.join();
  }
  restarter.join();
  System.out.println("TEST: top: now close replicas");
  List<Closeable> toClose=new ArrayList<>();
  for (  NodeProcess node : nodes) {
    if (node != primary && node != null) {
      toClose.add(node);
    }
  }
  IOUtils.close(toClose);
  IOUtils.close(primary);
  IOUtils.close(transLog);
  if (failed.get() == false) {
    message("TEST: top: now checkIndex");
    for (    Path path : indexPaths) {
      message("TEST: check " + path);
      MockDirectoryWrapper dir=newMockFSDirectory(path);
      dir.setCrossCheckTermVectorsOnClose(false);
      dir.close();
    }
  }
 else {
    message("TEST: failed; skip checkIndex");
  }
}
