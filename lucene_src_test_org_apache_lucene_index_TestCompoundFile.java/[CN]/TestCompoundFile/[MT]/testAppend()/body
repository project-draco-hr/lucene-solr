{
  Directory newDir=newDirectory();
  CompoundFileDirectory csw=newDir.createCompoundOutput("d.cfs",newIOContext(random));
  int size=5 + random.nextInt(128);
  for (int j=0; j < 2; j++) {
    IndexOutput os=csw.createOutput("seg" + j + "_foo.txt",newIOContext(random));
    for (int i=0; i < size; i++) {
      os.writeInt(i);
    }
    os.close();
    String[] listAll=newDir.listAll();
    assertEquals(1,listAll.length);
    assertEquals("d.cfs",listAll[0]);
  }
  createSequenceFile(dir,"d1",(byte)0,15);
  dir.copy(csw,"d1","d1",newIOContext(random));
  String[] listAll=newDir.listAll();
  assertEquals(1,listAll.length);
  assertEquals("d.cfs",listAll[0]);
  csw.close();
  CompoundFileDirectory csr=newDir.openCompoundInput("d.cfs",newIOContext(random));
  for (int j=0; j < 2; j++) {
    IndexInput openInput=csr.openInput("seg" + j + "_foo.txt",newIOContext(random));
    assertEquals(size * 4,openInput.length());
    for (int i=0; i < size; i++) {
      assertEquals(i,openInput.readInt());
    }
    openInput.close();
  }
  IndexInput expected=dir.openInput("d1",newIOContext(random));
  IndexInput actual=csr.openInput("d1",newIOContext(random));
  assertSameStreams("d1",expected,actual);
  assertSameSeekBehavior("d1",expected,actual);
  expected.close();
  actual.close();
  csr.close();
  newDir.close();
}
