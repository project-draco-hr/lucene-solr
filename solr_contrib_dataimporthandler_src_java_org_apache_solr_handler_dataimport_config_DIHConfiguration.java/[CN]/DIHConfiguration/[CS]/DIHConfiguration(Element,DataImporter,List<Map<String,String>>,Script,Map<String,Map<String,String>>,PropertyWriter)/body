{
  schema=di.getSchema();
  lowerNameVsSchemaField=null == schema ? Collections.<String,SchemaField>emptyMap() : loadSchemaFieldMap();
  this.deleteQuery=ConfigParseUtil.getStringAttribute(element,"deleteQuery",null);
  this.onImportStart=ConfigParseUtil.getStringAttribute(element,"onImportStart",null);
  this.onImportEnd=ConfigParseUtil.getStringAttribute(element,"onImportEnd",null);
  List<Entity> modEntities=new ArrayList<>();
  List<Element> l=ConfigParseUtil.getChildNodes(element,"entity");
  boolean docRootFound=false;
  for (  Element e : l) {
    Entity entity=new Entity(docRootFound,e,di,this,null);
    Map<String,EntityField> fields=gatherAllFields(di,entity);
    verifyWithSchema(fields);
    modEntities.add(entity);
  }
  this.entities=Collections.unmodifiableList(modEntities);
  if (functions == null) {
    functions=Collections.emptyList();
  }
  List<Map<String,String>> modFunc=new ArrayList<>(functions.size());
  for (  Map<String,String> f : functions) {
    modFunc.add(Collections.unmodifiableMap(f));
  }
  this.functions=Collections.unmodifiableList(modFunc);
  this.script=script;
  this.dataSources=Collections.unmodifiableMap(dataSources);
  this.propertyWriter=pw;
}
