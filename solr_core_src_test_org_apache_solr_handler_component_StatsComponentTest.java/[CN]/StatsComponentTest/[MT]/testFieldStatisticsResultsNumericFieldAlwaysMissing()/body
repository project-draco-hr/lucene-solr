{
  SolrCore core=h.getCore();
  assertU(adoc("id","1"));
  assertU(adoc("id","2"));
  assertU(commit());
  assertU(adoc("id","3"));
  assertU(adoc("id","4"));
  assertU(commit());
  Map<String,String> args=new HashMap<>();
  args.put(CommonParams.Q,"*:*");
  args.put(StatsParams.STATS,"true");
  args.put(StatsParams.STATS_FIELD,"active_i");
  args.put("indent","true");
  SolrQueryRequest req=new LocalSolrQueryRequest(core,new MapSolrParams(args));
  assertQ("test string statistics values",req,"//lst[@name='active_i']/long[@name='count'][.='0']","//lst[@name='active_i']/long[@name='missing'][.='4']","//lst[@name='active_i']/null[@name='min']","//lst[@name='active_i']/null[@name='max']","//lst[@name='active_i']/double[@name='sum'][.='0.0']","//lst[@name='active_i']/double[@name='sumOfSquares'][.='0.0']","//lst[@name='active_i']/double[@name='stddev'][.='0.0']","//lst[@name='active_i']/double[@name='mean'][.='NaN']","count(//lst[@name='active_i']/*)=8");
  assertQ("test cardinality of missing",req("q","*:*","stats","true","stats.field","{!cardinality=true}active_i"),"//lst[@name='active_i']/long[@name='cardinality'][.='0']");
}
