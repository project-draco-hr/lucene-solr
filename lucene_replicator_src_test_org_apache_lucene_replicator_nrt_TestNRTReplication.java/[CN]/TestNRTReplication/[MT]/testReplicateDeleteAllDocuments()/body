{
  Node.globalStartNS=System.nanoTime();
  childTempDir=createTempDir("child");
  message("change thread name from " + Thread.currentThread().getName());
  Thread.currentThread().setName("main");
  Path primaryPath=createTempDir("primary");
  NodeProcess primary=startNode(-1,0,primaryPath,true,-1);
  Path replicaPath=createTempDir("replica");
  NodeProcess replica=startNode(primary.tcpPort,1,replicaPath,false,-1);
  try (Connection c=new Connection(primary.tcpPort)){
    c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);
    c.out.writeVInt(1);
    c.out.writeVInt(replica.id);
    c.out.writeVInt(replica.tcpPort);
    c.flush();
    c.in.readByte();
  }
   LineFileDocs docs=new LineFileDocs(random());
  Connection primaryC=new Connection(primary.tcpPort);
  primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);
  for (int i=0; i < 10; i++) {
    Document doc=docs.nextDoc();
    primary.addOrUpdateDocument(primaryC,doc,false);
  }
  Connection replicaC=new Connection(replica.tcpPort);
  replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
  replicaC.flush();
  long version1=replicaC.in.readVLong();
  assertEquals(0L,version1);
  int hitCount=replicaC.in.readVInt();
  assertEquals(0,hitCount);
  long primaryVersion1=primary.flush();
  assertTrue(primaryVersion1 > 0);
  long version2;
  while (true) {
    replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
    replicaC.flush();
    version2=replicaC.in.readVLong();
    hitCount=replicaC.in.readVInt();
    if (hitCount == 10) {
      assertTrue(version2 > version1);
      break;
    }
    Thread.sleep(10);
  }
  if (random().nextBoolean()) {
    for (int id=0; id < 10; id++) {
      primary.deleteDocument(primaryC,Integer.toString(id));
    }
  }
 else {
    primary.deleteAllDocuments(primaryC);
  }
  replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
  replicaC.flush();
  long version3=replicaC.in.readVLong();
  assertEquals(version2,version3);
  hitCount=replicaC.in.readVInt();
  assertEquals(10,hitCount);
  long primaryVersion2=primary.flush();
  assertTrue(primaryVersion2 > primaryVersion1);
  long version4;
  while (true) {
    replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
    replicaC.flush();
    version4=replicaC.in.readVLong();
    hitCount=replicaC.in.readVInt();
    if (hitCount == 0) {
      assertTrue(version4 > version3);
      break;
    }
    Thread.sleep(10);
  }
  for (int i=0; i < 10; i++) {
    Document doc=docs.nextDoc();
    primary.addOrUpdateDocument(primaryC,doc,false);
  }
  long primaryVersion3=primary.flush();
  assertTrue(primaryVersion3 > primaryVersion2);
  while (true) {
    replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
    replicaC.flush();
    long version5=replicaC.in.readVLong();
    hitCount=replicaC.in.readVInt();
    if (hitCount == 10) {
      assertTrue(version5 > version4);
      break;
    }
    Thread.sleep(10);
  }
  replicaC.close();
  primaryC.close();
  replica.close();
  primary.close();
}
