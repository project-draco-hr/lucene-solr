{
  File file=new File(getWorkDir(),"one-line");
  PerfRunData runData=createPerfRunData(file,false,ThreadingDocMaker.class.getName());
  final WriteLineDocTask wldt=new WriteLineDocTask(runData);
  Thread[] threads=new Thread[10];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread("t" + i){
      @Override public void run(){
        try {
          wldt.doLogic();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
  for (  Thread t : threads)   t.start();
  for (  Thread t : threads)   t.join();
  wldt.close();
  Set<String> ids=new HashSet<String>();
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),"utf-8"));
  try {
    String line=br.readLine();
    assertHeaderLine(line);
    for (int i=0; i < threads.length; i++) {
      line=br.readLine();
      String[] parts=line.split(Character.toString(WriteLineDocTask.SEP));
      assertEquals(3,parts.length);
      String tname=parts[0].substring(parts[0].indexOf('_'));
      ids.add(tname);
      assertEquals(tname,parts[1].substring(parts[1].indexOf('_')));
      assertEquals(tname,parts[2].substring(parts[2].indexOf('_')));
    }
    assertNull(br.readLine());
    assertEquals(threads.length,ids.size());
  }
  finally {
    br.close();
  }
}
