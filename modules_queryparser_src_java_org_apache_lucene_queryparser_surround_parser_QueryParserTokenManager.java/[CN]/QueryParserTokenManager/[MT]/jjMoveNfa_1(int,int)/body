{
  int startsAt=0;
  jjnewStateCnt=38;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x7bffe8faffffd9ffL & l) != 0L) {
            if (kind > 22)             kind=22;
            jjCheckNAddStates(0,4);
          }
 else           if ((0x100002600L & l) != 0L) {
            if (kind > 7)             kind=7;
          }
 else           if (curChar == 34)           jjCheckNAddStates(5,7);
        if ((0x3fc000000000000L & l) != 0L)         jjCheckNAddStates(8,11);
 else         if (curChar == 49)         jjCheckNAddTwoStates(20,21);
      break;
case 19:
    if ((0x3fc000000000000L & l) != 0L)     jjCheckNAddStates(8,11);
  break;
case 20:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAdd(17);
break;
case 21:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAdd(18);
break;
case 22:
if (curChar == 49) jjCheckNAddTwoStates(20,21);
break;
case 23:
if (curChar == 34) jjCheckNAddStates(5,7);
break;
case 24:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(24,25);
break;
case 25:
if (curChar == 34) jjstateSet[jjnewStateCnt++]=26;
break;
case 26:
if (curChar == 42 && kind > 18) kind=18;
break;
case 27:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddStates(12,14);
break;
case 29:
if (curChar == 34) jjCheckNAddStates(12,14);
break;
case 30:
if (curChar == 34 && kind > 19) kind=19;
break;
case 31:
if ((0x7bffe8faffffd9ffL & l) == 0L) break;
if (kind > 22) kind=22;
jjCheckNAddStates(0,4);
break;
case 32:
if ((0x7bffe8faffffd9ffL & l) != 0L) jjCheckNAddTwoStates(32,33);
break;
case 33:
if (curChar == 42 && kind > 20) kind=20;
break;
case 34:
if ((0x7bffe8faffffd9ffL & l) != 0L) jjCheckNAddTwoStates(34,35);
break;
case 35:
if ((0x8000040000000000L & l) == 0L) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(35,36);
break;
case 36:
if ((0xfbffecfaffffd9ffL & l) == 0L) break;
if (kind > 21) kind=21;
jjCheckNAdd(36);
break;
case 37:
if ((0x7bffe8faffffd9ffL & l) == 0L) break;
if (kind > 22) kind=22;
jjCheckNAdd(37);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
if ((0xffffffffbfffffffL & l) != 0L) {
if (kind > 22) kind=22;
jjCheckNAddStates(0,4);
}
if ((0x400000004000L & l) != 0L) {
if (kind > 12) kind=12;
}
 else if ((0x80000000800000L & l) != 0L) {
if (kind > 11) kind=11;
}
 else if (curChar == 97) jjstateSet[jjnewStateCnt++]=9;
 else if (curChar == 65) jjstateSet[jjnewStateCnt++]=6;
 else if (curChar == 111) jjstateSet[jjnewStateCnt++]=3;
 else if (curChar == 79) jjstateSet[jjnewStateCnt++]=1;
if (curChar == 110) jjstateSet[jjnewStateCnt++]=15;
 else if (curChar == 78) jjstateSet[jjnewStateCnt++]=12;
break;
case 1:
if (curChar == 82 && kind > 8) kind=8;
break;
case 2:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=1;
break;
case 3:
if (curChar == 114 && kind > 8) kind=8;
break;
case 4:
if (curChar == 111) jjstateSet[jjnewStateCnt++]=3;
break;
case 5:
if (curChar == 68 && kind > 9) kind=9;
break;
case 6:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=5;
break;
case 7:
if (curChar == 65) jjstateSet[jjnewStateCnt++]=6;
break;
case 8:
if (curChar == 100 && kind > 9) kind=9;
break;
case 9:
if (curChar == 110) jjstateSet[jjnewStateCnt++]=8;
break;
case 10:
if (curChar == 97) jjstateSet[jjnewStateCnt++]=9;
break;
case 11:
if (curChar == 84 && kind > 10) kind=10;
break;
case 12:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=11;
break;
case 13:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=12;
break;
case 14:
if (curChar == 116 && kind > 10) kind=10;
break;
case 15:
if (curChar == 111) jjstateSet[jjnewStateCnt++]=14;
break;
case 16:
if (curChar == 110) jjstateSet[jjnewStateCnt++]=15;
break;
case 17:
if ((0x80000000800000L & l) != 0L && kind > 11) kind=11;
break;
case 18:
if ((0x400000004000L & l) != 0L && kind > 12) kind=12;
break;
case 24:
jjAddStates(15,16);
break;
case 27:
if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(12,14);
break;
case 28:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=29;
break;
case 29:
if (curChar == 92) jjCheckNAddStates(12,14);
break;
case 31:
if ((0xffffffffbfffffffL & l) == 0L) break;
if (kind > 22) kind=22;
jjCheckNAddStates(0,4);
break;
case 32:
if ((0xffffffffbfffffffL & l) != 0L) jjCheckNAddTwoStates(32,33);
break;
case 34:
if ((0xffffffffbfffffffL & l) != 0L) jjCheckNAddTwoStates(34,35);
break;
case 36:
if ((0xffffffffbfffffffL & l) == 0L) break;
if (kind > 21) kind=21;
jjstateSet[jjnewStateCnt++]=36;
break;
case 37:
if ((0xffffffffbfffffffL & l) == 0L) break;
if (kind > 22) kind=22;
jjCheckNAdd(37);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 22) kind=22;
jjCheckNAddStates(0,4);
break;
case 24:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(15,16);
break;
case 27:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(12,14);
break;
case 32:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(32,33);
break;
case 34:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(34,35);
break;
case 36:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 21) kind=21;
jjstateSet[jjnewStateCnt++]=36;
break;
case 37:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 22) kind=22;
jjCheckNAdd(37);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=38 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
