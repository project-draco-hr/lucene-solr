{
  String collectionName=factory.getValueOperand(expression,0);
  List<StreamExpressionNamedParameter> namedParams=factory.getNamedOperands(expression);
  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");
  if (expression.getParameters().size() != 1 + namedParams.size()) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - unknown operands found",expression));
  }
  if (null == collectionName) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));
  }
  if (0 == namedParams.size()) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'",expression));
  }
  Map<String,String> params=new HashMap<String,String>();
  for (  StreamExpressionNamedParameter namedParam : namedParams) {
    if (!namedParam.getName().equals("zkHost")) {
      params.put(namedParam.getName(),namedParam.getParameter().toString().trim());
    }
  }
  String fieldParam=params.get("field");
  if (fieldParam != null) {
    params.remove("field");
  }
 else {
    throw new IOException("field param cannot be null for FeaturesSelectionStream");
  }
  String outcomeParam=params.get("outcome");
  if (outcomeParam != null) {
    params.remove("outcome");
  }
 else {
    throw new IOException("outcome param cannot be null for FeaturesSelectionStream");
  }
  String featureSetParam=params.get("featureSet");
  if (featureSetParam != null) {
    params.remove("featureSet");
  }
 else {
    throw new IOException("featureSet param cannot be null for FeaturesSelectionStream");
  }
  String positiveLabelParam=params.get("positiveLabel");
  int positiveLabel=1;
  if (positiveLabelParam != null) {
    params.remove("positiveLabel");
    positiveLabel=Integer.parseInt(positiveLabelParam);
  }
  String numTermsParam=params.get("numTerms");
  int numTerms=1;
  if (numTermsParam != null) {
    numTerms=Integer.parseInt(numTermsParam);
    params.remove("numTerms");
  }
 else {
    throw new IOException("numTerms param cannot be null for FeaturesSelectionStream");
  }
  String zkHost=null;
  if (null == zkHostExpression) {
    zkHost=factory.getCollectionZkHost(collectionName);
  }
 else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {
    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
  }
  if (null == zkHost) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
  }
  init(collectionName,zkHost,params,fieldParam,outcomeParam,featureSetParam,positiveLabel,numTerms);
}
