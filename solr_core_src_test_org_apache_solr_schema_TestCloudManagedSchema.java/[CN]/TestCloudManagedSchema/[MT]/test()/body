{
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set(CoreAdminParams.ACTION,CoreAdminParams.CoreAdminAction.STATUS.toString());
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/cores");
  int which=r.nextInt(clients.size());
  HttpSolrClient client=(HttpSolrClient)clients.get(which);
  String previousBaseURL=client.getBaseURL();
  client.setBaseURL(previousBaseURL.substring(0,previousBaseURL.lastIndexOf("/")));
  NamedList namedListResponse=client.request(request);
  client.setBaseURL(previousBaseURL);
  NamedList status=(NamedList)namedListResponse.get("status");
  NamedList collectionStatus=(NamedList)status.get("collection1");
  String collectionSchema=(String)collectionStatus.get(CoreAdminParams.SCHEMA);
  assertEquals("Schema resource name differs from expected name","managed-schema",collectionSchema);
  SolrZkClient zkClient=new SolrZkClient(zkServer.getZkHost(),30000);
  try {
    String fileContent=getFileContentFromZooKeeper(zkClient,"/solr/configs/conf1/managed-schema");
    assertTrue("Managed schema is missing",fileContent.contains("DO NOT EDIT"));
    assertFileNotInZooKeeper(zkClient,"/solr/configs/conf1","schema.xml");
    fileContent=getFileContentFromZooKeeper(zkClient,"/solr/configs/conf1/schema.xml.bak");
    assertTrue("schema file doesn't contain '<schema'",fileContent.contains("<schema"));
  }
  finally {
    if (zkClient != null) {
      zkClient.close();
    }
  }
}
