{
  HashMap<String,String> args=new HashMap<String,String>();
  args.put("fl","id score");
  args.put("hl","true");
  args.put("hl.fl","t*");
  assertU(adoc("id","0","title","test","text","test","foo_s","test","foo_sI","test","weight","1.0"));
  assertU(commit());
  assertU(optimize());
  TestHarness.LocalRequestFactory lrf=h.getRequestFactory("standard",0,10,args);
  SolrQueryRequest request=lrf.makeRequest("test");
  SolrHighlighter highlighter=HighlightComponent.getHighlighter(h.getCore());
  List<String> highlightFieldNames=Arrays.asList(highlighter.getHighlightFields(null,request,new String[]{}));
  assertTrue("Expected to highlight on field \"title\"",highlightFieldNames.contains("title"));
  assertFalse("Expected to not highlight on field \"text\"",highlightFieldNames.contains("text"));
  assertFalse("Expected to not highlight on field \"weight\"",highlightFieldNames.contains("weight"));
  request.close();
  args.put("hl.fl","foo_*");
  lrf=h.getRequestFactory("standard",0,10,args);
  request=lrf.makeRequest("test");
  highlighter=HighlightComponent.getHighlighter(h.getCore());
  highlightFieldNames=Arrays.asList(highlighter.getHighlightFields(null,request,new String[]{}));
  assertEquals("Expected one field to highlight on",1,highlightFieldNames.size());
  assertEquals("Expected to highlight on field \"foo_s\"","foo_s",highlightFieldNames.get(0));
  request.close();
}
