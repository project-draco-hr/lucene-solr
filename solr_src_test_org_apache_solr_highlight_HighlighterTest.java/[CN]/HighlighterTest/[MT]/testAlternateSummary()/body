{
  assertU(adoc("tv_text","keyword is only here","t_text","a piece of text to be substituted","id","1","foo_t","hi"));
  assertU(commit());
  assertU(optimize());
  HashMap<String,String> args=new HashMap<String,String>();
  args.put("hl","true");
  args.put("hl.fragsize","0");
  args.put("hl.fl","t_text");
  TestHarness.LocalRequestFactory sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Alternate summarization",sumLRF.makeRequest("tv_text:keyword"),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='highlighting']/lst[@name='1' and count(*)=0]");
  args.put("hl.alternateField","foo_t");
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Alternate summarization",sumLRF.makeRequest("tv_text:keyword"),"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]","//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='hi']");
  args.put("hl.alternateField","t_text");
  args.put("hl.maxAlternateFieldLength","15");
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Alternate summarization",sumLRF.makeRequest("tv_text:keyword"),"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]","//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='a piece of text']");
}
