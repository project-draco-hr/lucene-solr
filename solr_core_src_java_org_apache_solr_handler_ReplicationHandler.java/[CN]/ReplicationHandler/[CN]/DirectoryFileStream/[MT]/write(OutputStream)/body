{
  String fileName=params.get(FILE);
  String cfileName=params.get(CONF_FILE_SHORT);
  String sOffset=params.get(OFFSET);
  String sLen=params.get(LEN);
  String compress=params.get(COMPRESSION);
  String sChecksum=params.get(CHECKSUM);
  String sGen=params.get(GENERATION);
  if (sGen != null)   indexGen=Long.parseLong(sGen);
  if (Boolean.parseBoolean(compress)) {
    fos=new FastOutputStream(new DeflaterOutputStream(out));
  }
 else {
    fos=new FastOutputStream(out);
  }
  int packetsWritten=0;
  IndexInput in=null;
  try {
    long offset=-1;
    int len=-1;
    boolean useChecksum=Boolean.parseBoolean(sChecksum);
    if (sOffset != null)     offset=Long.parseLong(sOffset);
    if (sLen != null)     len=Integer.parseInt(sLen);
    if (fileName == null && cfileName == null) {
      writeNothing();
    }
    RefCounted<SolrIndexSearcher> sref=core.getSearcher();
    Directory dir;
    try {
      SolrIndexSearcher searcher=sref.get();
      dir=searcher.getIndexReader().directory();
    }
  finally {
      sref.decref();
    }
    in=dir.openInput(fileName,IOContext.READONCE);
    if (offset != -1)     in.seek(offset);
    byte[] buf=new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];
    Checksum checksum=null;
    if (useChecksum)     checksum=new Adler32();
    long filelen=dir.fileLength(fileName);
    while (true) {
      offset=offset == -1 ? 0 : offset;
      int read=(int)Math.min(buf.length,filelen - offset);
      in.readBytes(buf,offset == -1 ? 0 : (int)offset,read);
      fos.writeInt((int)read);
      if (useChecksum) {
        checksum.reset();
        checksum.update(buf,0,read);
        fos.writeLong(checksum.getValue());
      }
      fos.write(buf,0,read);
      fos.flush();
      if (indexGen != null && (packetsWritten % 5 == 0)) {
        delPolicy.setReserveDuration(indexGen,reserveCommitDuration);
      }
      packetsWritten++;
      if (read != buf.length) {
        writeNothing();
        fos.close();
        break;
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("Exception while writing response for params: " + params,e);
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
}
