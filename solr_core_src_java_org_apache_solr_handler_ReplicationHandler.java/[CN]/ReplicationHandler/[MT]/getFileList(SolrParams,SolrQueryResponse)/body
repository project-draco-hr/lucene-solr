{
  String v=solrParams.get(GENERATION);
  if (v == null) {
    rsp.add("status","no index generation specified");
    return;
  }
  long gen=Long.parseLong(v);
  IndexCommit commit=core.getDeletionPolicy().getCommitPoint(gen);
  if (commit == null) {
    rsp.add("status","invalid index generation");
    return;
  }
  core.getDeletionPolicy().setReserveDuration(gen,reserveCommitDuration);
  List<Map<String,Object>> result=new ArrayList<>();
  Directory dir=null;
  try {
    dir=core.getDirectoryFactory().get(core.getNewIndexDir(),DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);
    SegmentInfos infos=SegmentInfos.readCommit(dir,commit.getSegmentsFileName());
    for (    SegmentCommitInfo commitInfo : infos) {
      for (      String file : commitInfo.files()) {
        Map<String,Object> fileMeta=new HashMap<>();
        fileMeta.put(NAME,file);
        fileMeta.put(SIZE,dir.fileLength(file));
        try (final IndexInput in=dir.openInput(file,IOContext.READONCE)){
          try {
            long checksum=CodecUtil.retrieveChecksum(in);
            fileMeta.put(CHECKSUM,checksum);
          }
 catch (          Exception e) {
            LOG.warn("Could not read checksum from index file: " + file,e);
          }
        }
         result.add(fileMeta);
      }
    }
    Map<String,Object> fileMeta=new HashMap<>();
    fileMeta.put(NAME,infos.getSegmentsFileName());
    fileMeta.put(SIZE,dir.fileLength(infos.getSegmentsFileName()));
    if (infos.getId() != null) {
      try (final IndexInput in=dir.openInput(infos.getSegmentsFileName(),IOContext.READONCE)){
        try {
          fileMeta.put(CHECKSUM,CodecUtil.retrieveChecksum(in));
        }
 catch (        Exception e) {
          LOG.warn("Could not read checksum from index file: " + infos.getSegmentsFileName(),e);
        }
      }
     }
    result.add(fileMeta);
  }
 catch (  IOException e) {
    rsp.add("status","unable to get file names for given index generation");
    rsp.add(EXCEPTION,e);
    LOG.error("Unable to get file names for indexCommit generation: " + gen,e);
  }
 finally {
    if (dir != null) {
      try {
        core.getDirectoryFactory().release(dir);
      }
 catch (      IOException e) {
        SolrException.log(LOG,"Could not release directory after fetching file list",e);
      }
    }
  }
  rsp.add(CMD_GET_FILE_LIST,result);
  if (core.getUpdateHandler().getUpdateLog() != null && core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog) {
    try {
      List<Map<String,Object>> tlogfiles=getTlogFileList(commit);
      LOG.info("Adding tlog files to list: " + tlogfiles);
      rsp.add(TLOG_FILES,tlogfiles);
    }
 catch (    IOException e) {
      rsp.add("status","unable to get tlog file names for given index generation");
      rsp.add(EXCEPTION,e);
      LOG.error("Unable to get tlog file names for indexCommit generation: " + gen,e);
    }
  }
  if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())   return;
  LOG.debug("Adding config files to list: " + includeConfFiles);
  rsp.add(CONF_FILES,getConfFileInfoFromCache(confFileNameAlias,confFileInfoCache));
}
