{
  String v=solrParams.get(GENERATION);
  if (v == null) {
    rsp.add("status","no index generation specified");
    return;
  }
  long gen=Long.parseLong(v);
  IndexCommit commit=core.getDeletionPolicy().getCommitPoint(gen);
  if (commit == null) {
    rsp.add("status","invalid index generation");
    return;
  }
  core.getDeletionPolicy().setReserveDuration(gen,reserveCommitDuration);
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  Directory dir=null;
  try {
    Collection<String> files=new HashSet<String>(commit.getFileNames());
    dir=core.getDirectoryFactory().get(core.getNewIndexDir(),null);
    try {
      for (      String fileName : files) {
        if (fileName.endsWith(".lock"))         continue;
        Map<String,Object> fileMeta=new HashMap<String,Object>();
        fileMeta.put(NAME,fileName);
        fileMeta.put(SIZE,dir.fileLength(fileName));
        result.add(fileMeta);
      }
    }
  finally {
      core.getDirectoryFactory().release(dir);
    }
  }
 catch (  IOException e) {
    rsp.add("status","unable to get file names for given index generation");
    rsp.add("exception",e);
    LOG.error("Unable to get file names for indexCommit generation: " + gen,e);
  }
  rsp.add(CMD_GET_FILE_LIST,result);
  if (confFileNameAlias.size() < 1 || core.getCoreDescriptor().getCoreContainer().isZooKeeperAware())   return;
  LOG.debug("Adding config files to list: " + includeConfFiles);
  rsp.add(CONF_FILES,getConfFileInfoFromCache(confFileNameAlias,confFileInfoCache));
}
