{
  NamedList<Object> details=new SimpleOrderedMap<>();
  NamedList<Object> master=new SimpleOrderedMap<>();
  NamedList<Object> slave=new SimpleOrderedMap<>();
  details.add("indexSize",NumberUtils.readableSize(getIndexSize()));
  details.add("indexPath",core.getIndexDir());
  details.add(CMD_SHOW_COMMITS,getCommits());
  details.add("isMaster",String.valueOf(isMaster));
  details.add("isSlave",String.valueOf(isSlave));
  CommitVersionInfo vInfo=getIndexVersion();
  details.add("indexVersion",null == vInfo ? 0 : vInfo.version);
  details.add(GENERATION,null == vInfo ? 0 : vInfo.generation);
  IndexCommit commit=indexCommitPoint;
  if (isMaster) {
    if (includeConfFiles != null)     master.add(CONF_FILES,includeConfFiles);
    master.add(REPLICATE_AFTER,getReplicateAfterStrings());
    master.add("replicationEnabled",String.valueOf(replicationEnabled.get()));
  }
  if (isMaster && commit != null) {
    CommitVersionInfo repCommitInfo=CommitVersionInfo.build(commit);
    master.add("replicableVersion",repCommitInfo.version);
    master.add("replicableGeneration",repCommitInfo.generation);
  }
  IndexFetcher fetcher=currentIndexFetcher;
  if (fetcher != null) {
    Properties props=loadReplicationProperties();
    if (showSlaveDetails) {
      try {
        NamedList nl=fetcher.getDetails();
        slave.add("masterDetails",nl.get(CMD_DETAILS));
      }
 catch (      Exception e) {
        LOG.warn("Exception while invoking 'details' method for replication on master ",e);
        slave.add(ERR_STATUS,"invalid_master");
      }
    }
    slave.add(MASTER_URL,fetcher.getMasterUrl());
    if (getPollInterval() != null) {
      slave.add(POLL_INTERVAL,getPollInterval());
    }
    Date nextScheduled=getNextScheduledExecTime();
    if (nextScheduled != null && !isPollingDisabled()) {
      slave.add(NEXT_EXECUTION_AT,nextScheduled.toString());
    }
 else     if (isPollingDisabled()) {
      slave.add(NEXT_EXECUTION_AT,"Polling disabled");
    }
    addVal(slave,IndexFetcher.INDEX_REPLICATED_AT,props,Date.class);
    addVal(slave,IndexFetcher.INDEX_REPLICATED_AT_LIST,props,List.class);
    addVal(slave,IndexFetcher.REPLICATION_FAILED_AT_LIST,props,List.class);
    addVal(slave,IndexFetcher.TIMES_INDEX_REPLICATED,props,Integer.class);
    addVal(slave,IndexFetcher.CONF_FILES_REPLICATED,props,Integer.class);
    addVal(slave,IndexFetcher.TIMES_CONFIG_REPLICATED,props,Integer.class);
    addVal(slave,IndexFetcher.CONF_FILES_REPLICATED_AT,props,Integer.class);
    addVal(slave,IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED,props,Long.class);
    addVal(slave,IndexFetcher.TIMES_FAILED,props,Integer.class);
    addVal(slave,IndexFetcher.REPLICATION_FAILED_AT,props,Date.class);
    addVal(slave,IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN,props,Long.class);
    slave.add("currentDate",new Date().toString());
    slave.add("isPollingDisabled",String.valueOf(isPollingDisabled()));
    boolean isReplicating=isReplicating();
    slave.add("isReplicating",String.valueOf(isReplicating));
    if (isReplicating) {
      try {
        long bytesToDownload=0;
        List<String> filesToDownload=new ArrayList<>();
        for (        Map<String,Object> file : fetcher.getFilesToDownload()) {
          filesToDownload.add((String)file.get(NAME));
          bytesToDownload+=(Long)file.get(SIZE);
        }
        for (        Map<String,Object> file : fetcher.getConfFilesToDownload()) {
          filesToDownload.add((String)file.get(NAME));
          bytesToDownload+=(Long)file.get(SIZE);
        }
        slave.add("filesToDownload",filesToDownload);
        slave.add("numFilesToDownload",String.valueOf(filesToDownload.size()));
        slave.add("bytesToDownload",NumberUtils.readableSize(bytesToDownload));
        long bytesDownloaded=0;
        List<String> filesDownloaded=new ArrayList<>();
        for (        Map<String,Object> file : fetcher.getFilesDownloaded()) {
          filesDownloaded.add((String)file.get(NAME));
          bytesDownloaded+=(Long)file.get(SIZE);
        }
        for (        Map<String,Object> file : fetcher.getConfFilesDownloaded()) {
          filesDownloaded.add((String)file.get(NAME));
          bytesDownloaded+=(Long)file.get(SIZE);
        }
        Map<String,Object> currentFile=fetcher.getCurrentFile();
        String currFile=null;
        long currFileSize=0, currFileSizeDownloaded=0;
        float percentDownloaded=0;
        if (currentFile != null) {
          currFile=(String)currentFile.get(NAME);
          currFileSize=(Long)currentFile.get(SIZE);
          if (currentFile.containsKey("bytesDownloaded")) {
            currFileSizeDownloaded=(Long)currentFile.get("bytesDownloaded");
            bytesDownloaded+=currFileSizeDownloaded;
            if (currFileSize > 0)             percentDownloaded=(currFileSizeDownloaded * 100) / currFileSize;
          }
        }
        slave.add("filesDownloaded",filesDownloaded);
        slave.add("numFilesDownloaded",String.valueOf(filesDownloaded.size()));
        long estimatedTimeRemaining=0;
        Date replicationStartTimeStamp=fetcher.getReplicationStartTimeStamp();
        if (replicationStartTimeStamp != null) {
          slave.add("replicationStartTime",replicationStartTimeStamp.toString());
        }
        long elapsed=fetcher.getReplicationTimeElapsed();
        slave.add("timeElapsed",String.valueOf(elapsed) + "s");
        if (bytesDownloaded > 0)         estimatedTimeRemaining=((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;
        float totalPercent=0;
        long downloadSpeed=0;
        if (bytesToDownload > 0)         totalPercent=(bytesDownloaded * 100) / bytesToDownload;
        if (elapsed > 0)         downloadSpeed=(bytesDownloaded / elapsed);
        if (currFile != null)         slave.add("currentFile",currFile);
        slave.add("currentFileSize",NumberUtils.readableSize(currFileSize));
        slave.add("currentFileSizeDownloaded",NumberUtils.readableSize(currFileSizeDownloaded));
        slave.add("currentFileSizePercent",String.valueOf(percentDownloaded));
        slave.add("bytesDownloaded",NumberUtils.readableSize(bytesDownloaded));
        slave.add("totalPercent",String.valueOf(totalPercent));
        slave.add("timeRemaining",String.valueOf(estimatedTimeRemaining) + "s");
        slave.add("downloadSpeed",NumberUtils.readableSize(downloadSpeed));
      }
 catch (      Exception e) {
        LOG.error("Exception while writing replication details: ",e);
      }
    }
  }
  if (isMaster)   details.add("master",master);
  if (slave.size() > 0)   details.add("slave",slave);
  NamedList snapshotStats=snapShootDetails;
  if (snapshotStats != null)   details.add(CMD_BACKUP,snapshotStats);
  return details;
}
