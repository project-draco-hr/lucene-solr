{
  if (watcher == null) {
    rsp.add("error","Logging Not Initalized");
    return;
  }
  rsp.add("watcher",watcher.getName());
  SolrParams params=req.getParams();
  if (params.get("threshold") != null) {
    watcher.setThreshold(params.get("threshold"));
  }
  if (params.get("test") != null) {
    log.trace("trace message");
    log.debug("debug message");
    log.info("info (with exception)",new RuntimeException("test"));
    log.warn("warn (with exception)",new RuntimeException("test"));
    log.error("error (with exception)",new RuntimeException("test"));
  }
  String[] set=params.getParams("set");
  if (set != null) {
    for (    String pair : set) {
      String[] split=pair.split(":");
      if (split.length != 2) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Invalid format, expected level:value, got " + pair);
      }
      String category=split[0];
      String level=split[1];
      watcher.setLogLevel(category,level);
    }
  }
  String since=req.getParams().get("since");
  if (since != null) {
    long time=-1;
    try {
      time=Long.parseLong(since);
    }
 catch (    Exception ex) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"invalid timestamp: " + since);
    }
    AtomicBoolean found=new AtomicBoolean(false);
    SolrDocumentList docs=watcher.getHistory(time,found);
    if (docs == null) {
      rsp.add("error","History not enabled");
      return;
    }
 else {
      SimpleOrderedMap<Object> info=new SimpleOrderedMap<>();
      if (time > 0) {
        info.add("since",time);
        info.add("found",found);
      }
 else {
        info.add("levels",watcher.getAllLevels());
      }
      info.add("last",watcher.getLastEvent());
      info.add("buffer",watcher.getHistorySize());
      info.add("threshold",watcher.getThreshold());
      rsp.add("info",info);
      rsp.add("history",docs);
    }
  }
 else {
    rsp.add("levels",watcher.getAllLevels());
    List<LoggerInfo> loggers=new ArrayList<>(watcher.getAllLoggers());
    Collections.sort(loggers);
    List<SimpleOrderedMap<?>> info=new ArrayList<>();
    for (    LoggerInfo wrap : loggers) {
      info.add(wrap.getInfo());
    }
    rsp.add("loggers",info);
  }
  rsp.setHttpCaching(false);
}
