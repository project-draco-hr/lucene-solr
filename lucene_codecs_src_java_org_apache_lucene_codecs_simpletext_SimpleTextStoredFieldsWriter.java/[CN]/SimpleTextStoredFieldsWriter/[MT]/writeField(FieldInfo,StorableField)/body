{
  write(FIELD);
  write(Integer.toString(info.number));
  newLine();
  write(NAME);
  write(field.name());
  newLine();
  write(TYPE);
  final Number n=field.numericValue();
  if (n != null) {
    if (n instanceof Byte || n instanceof Short || n instanceof Integer) {
      write(TYPE_INT);
      newLine();
      write(VALUE);
      write(Integer.toString(n.intValue()));
      newLine();
    }
 else     if (n instanceof Long) {
      write(TYPE_LONG);
      newLine();
      write(VALUE);
      write(Long.toString(n.longValue()));
      newLine();
    }
 else     if (n instanceof Float) {
      write(TYPE_FLOAT);
      newLine();
      write(VALUE);
      write(Float.toString(n.floatValue()));
      newLine();
    }
 else     if (n instanceof Double) {
      write(TYPE_DOUBLE);
      newLine();
      write(VALUE);
      write(Double.toString(n.doubleValue()));
      newLine();
    }
 else {
      throw new IllegalArgumentException("cannot store numeric type " + n.getClass());
    }
  }
 else {
    BytesRef bytes=field.binaryValue();
    if (bytes != null) {
      write(TYPE_BINARY);
      newLine();
      write(VALUE);
      write(bytes);
      newLine();
    }
 else     if (field.stringValue() == null) {
      throw new IllegalArgumentException("field " + field.name() + " is stored but does not have binaryValue, stringValue nor numericValue");
    }
 else {
      write(TYPE_STRING);
      newLine();
      write(VALUE);
      write(field.stringValue());
      newLine();
    }
  }
}
