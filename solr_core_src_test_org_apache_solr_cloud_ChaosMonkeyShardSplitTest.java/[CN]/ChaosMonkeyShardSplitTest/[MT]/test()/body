{
  waitForThingsToLevelOut(15);
  ClusterState clusterState=cloudClient.getZkStateReader().getClusterState();
  final DocRouter router=clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();
  Slice shard1=clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1);
  DocRouter.Range shard1Range=shard1.getRange() != null ? shard1.getRange() : router.fullRange();
  final List<DocRouter.Range> ranges=router.partitionRange(2,shard1Range);
  final int[] docCounts=new int[ranges.size()];
  int numReplicas=shard1.getReplicas().size();
  Thread indexThread=null;
  OverseerRestarter killer=null;
  Thread killerThread=null;
  final SolrClient solrClient=clients.get(0);
  try {
    del("*:*");
    for (int id=0; id < 100; id++) {
      indexAndUpdateCount(router,ranges,docCounts,String.valueOf(id),id);
    }
    commit();
    indexThread=new Thread(){
      @Override public void run(){
        int max=atLeast(401);
        for (int id=101; id < max; id++) {
          try {
            indexAndUpdateCount(router,ranges,docCounts,String.valueOf(id),id);
            Thread.sleep(atLeast(25));
          }
 catch (          Exception e) {
            log.error("Exception while adding doc",e);
          }
        }
      }
    }
;
    indexThread.start();
    CloudJettyRunner leaderJetty=shardToLeaderJetty.get("shard1");
    chaosMonkey.killJetty(leaderJetty);
    Thread.sleep(2000);
    waitForThingsToLevelOut(90);
    Thread.sleep(1000);
    checkShardConsistency(false,true);
    CloudJettyRunner deadJetty=leaderJetty;
    while (deadJetty == leaderJetty) {
      updateMappingsFromZk(this.jettys,this.clients);
      leaderJetty=shardToLeaderJetty.get("shard1");
    }
    ChaosMonkey.start(deadJetty.jetty);
    waitTillRecovered();
    killer=new OverseerRestarter(zkServer.getZkAddress());
    killerThread=new Thread(killer);
    killerThread.start();
    killCounter.incrementAndGet();
    splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD1,null,null);
    log.info("Layout after split: \n");
    printLayout();
  }
  finally {
    if (indexThread != null)     indexThread.join();
    if (solrClient != null)     solrClient.commit();
    if (killer != null) {
      killer.run=false;
      if (killerThread != null) {
        killerThread.join();
      }
    }
  }
  checkDocCountsAndShardStates(docCounts,numReplicas);
  waitForRecoveriesToFinish(true);
}
