{
  int iter=1000000;
  int arrsz=100000;
  int ret=0;
  int num=0;
  String test="b100";
  String clazz="NoClass";
  for (int argnum=0; argnum < args.length; argnum++) {
    String arg=args[argnum];
    if ("-t".equals(arg)) {
      test=args[++argnum];
    }
    if ("-i".equals(arg)) {
      iter=Integer.parseInt(args[++argnum]);
    }
    if ("-a".equals(arg)) {
      arrsz=Integer.parseInt(args[++argnum]);
    }
    if ("-c".equals(arg)) {
      clazz=args[++argnum];
    }
    if ("-r".equals(arg)) {
      rng.setSeed(Long.parseLong(args[++argnum]));
    }
    ;
    if ("-n".equals(arg)) {
      num=Integer.parseInt(args[++argnum]);
    }
    ;
  }
  Class cls=null;
  try {
    cls=Class.forName(clazz);
  }
 catch (  Exception e) {
    cls=Class.forName("solr.util.test." + clazz);
  }
  Converter conv=(Converter)cls.newInstance();
  long startTime=System.currentTimeMillis();
  if ("ispecial".equals(test)) {
    for (int i=0; i < iter; i++) {
      Integer i1=getSpecial();
      Integer i2=getSpecial();
      test(i1,i2,conv);
    }
  }
 else   if ("lspecial".equals(test)) {
    for (int i=0; i < iter; i++) {
      Long f1=getLongSpecial();
      Long f2=getLongSpecial();
      test(f1,f2,conv);
    }
  }
 else   if ("fspecial".equals(test)) {
    for (int i=0; i < iter; i++) {
      Float f1=getFloatSpecial();
      Float f2=getFloatSpecial();
      test(f1,f2,conv);
    }
  }
 else   if ("dspecial".equals(test)) {
    for (int i=0; i < iter; i++) {
      Double f1=getDoubleSpecial();
      Double f2=getDoubleSpecial();
      test(f1,f2,conv);
    }
  }
 else   if ("10kout".equals(test)) {
    String n=Integer.toString(num);
    char[] arr=new char[n.length()];
    char[] arr2=new char[n.length() + 1];
    n.getChars(0,n.length(),arr,0);
    for (int i=0; i < iter; i++) {
      ret+=BCDUtils.base10toBase100SortableInt(arr,0,arr.length,arr2,arr2.length);
    }
  }
 else   if ("internal".equals(test) || "external".equals(test)) {
    int min=-1000000;
    int max=1000000;
    String[] arr=new String[arrsz];
    String[] internal=new String[arrsz];
    if ("external".equals(test)) {
      for (int i=0; i < arrsz; i++) {
        int val=rng.nextInt();
        arr[i]=Integer.toString(rng.nextInt());
        internal[i]=conv.toInternal(arr[i]);
      }
      for (int i=0; i < iter; i++) {
        int slot=i % arrsz;
        arr[slot]=conv.toExternal(internal[slot]);
        ret+=arr[slot].length();
      }
    }
 else {
      for (int i=0; i < arrsz; i++) {
        int val=rng.nextInt();
        arr[i]=Integer.toString(rng.nextInt());
      }
      for (int i=0; i < iter; i++) {
        int slot=i % arrsz;
        internal[slot]=conv.toInternal(arr[slot]);
        ret+=internal[slot].length();
      }
    }
  }
 else   if ("itest".equals(test) || "ltest".equals(test) || "ftest".equals(test)) {
    long internalLen=0;
    long externalLen=0;
    for (int i=0; i < iter; i++) {
      Comparable n1=null, n2=null;
      if ("itest".equals(test)) {
        Integer i1=rng.nextInt();
        Integer i2=rng.nextInt();
        if (i < 10000) {
          i1=(i1 % 250) - 125;
          i2=(i2 % 250) - 125;
        }
 else         if (i < 500000) {
          i1=(i1 % 25000) - 12500;
          i2=(i2 % 25000) - 12500;
        }
        n1=i1;
        n2=i2;
      }
 else       if ("ltest".equals(test)) {
        Long i1=rng.nextLong();
        Long i2=rng.nextLong();
        if (i < 10000) {
          i1=(long)(i1 % 250) - 125;
          i2=(long)(i2 % 250) - 125;
        }
 else         if (i < 500000) {
          i1=(long)(i1 % 25000) - 12500;
          i2=(long)(i2 % 25000) - 12500;
        }
        n1=i1;
        n2=i2;
      }
 else       if ("ftest".equals(test)) {
        Float i1;
        Float i2;
        if (i < 10000) {
          i1=(float)(rng.nextInt() % 250) - 125;
          i2=(float)(rng.nextInt() % 250) - 125;
        }
 else         if (i < 300000) {
          i1=(float)(rng.nextInt() % 2500) - 1250;
          i2=(float)(rng.nextInt() % 2500) - 1250;
        }
 else         if (i < 500000) {
          i1=rng.nextFloat() / rng.nextFloat();
          i2=rng.nextFloat() / rng.nextFloat();
        }
 else {
          i1=Float.intBitsToFloat(rng.nextInt());
          i2=Float.intBitsToFloat(rng.nextInt());
        }
        n1=i1;
        n2=i2;
      }
      String s1=n1.toString();
      String s2=n2.toString();
      String v1=conv.toInternal(s1);
      String v2=conv.toInternal(s2);
      String out1=conv.toExternal(v1);
      String out2=conv.toExternal(v2);
      externalLen+=s1.length();
      internalLen+=v1.length();
      int c1=n1.compareTo(n2);
      int c2=v1.compareTo(v2);
      if (c1 == 0 && !(c2 == 0) || c1 < 0 && !(c2 < 0) || c1 > 0 && !(c2 > 0) || !out1.equals(s1) || !out2.equals(s2)) {
        System.out.println("Comparison error:" + s1 + ","+ s2);
        System.out.print("v1=");
        for (int ii=0; ii < v1.length(); ii++) {
          System.out.print(" " + (int)v1.charAt(ii));
        }
        System.out.print("\nv2=");
        for (int ii=0; ii < v2.length(); ii++) {
          System.out.print(" " + (int)v2.charAt(ii));
        }
        System.out.println("\nout1='" + out1 + "', out2='"+ out2+ "'");
      }
    }
  }
  long endTime=System.currentTimeMillis();
  System.out.println("time=" + (endTime - startTime));
  System.out.println("ret=" + ret);
}
