{
  return new Weight(FixedScoreQuery.this){
    @Override public float getValueForNormalization(){
      return 1.0f;
    }
    @Override public void normalize(    float queryNorm,    float topLevelBoost){
    }
    @Override public Scorer scorer(    final LeafReaderContext context,    Bits acceptDocs) throws IOException {
      return new Scorer(null){
        int docID=-1;
        @Override public int docID(){
          return docID;
        }
        @Override public int freq(){
          return 1;
        }
        @Override public int nextPosition() throws IOException {
          return -1;
        }
        @Override public int startOffset() throws IOException {
          return -1;
        }
        @Override public int endOffset() throws IOException {
          return -1;
        }
        @Override public BytesRef getPayload() throws IOException {
          return null;
        }
        @Override public long cost(){
          return 1;
        }
        @Override public int nextDoc(){
          docID++;
          if (docID >= context.reader().maxDoc()) {
            return NO_MORE_DOCS;
          }
          return docID;
        }
        @Override public int advance(        int target){
          docID=target;
          return docID;
        }
        @Override public float score() throws IOException {
          int num=idToNum[Integer.parseInt(context.reader().document(docID).get("id"))];
          if (reverse) {
            return num;
          }
 else {
            return -num;
          }
        }
      }
;
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      return null;
    }
  }
;
}
