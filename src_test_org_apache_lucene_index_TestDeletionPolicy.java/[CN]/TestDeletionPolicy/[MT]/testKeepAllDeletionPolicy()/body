{
  for (int pass=0; pass < 4; pass++) {
    boolean autoCommit=pass < 2;
    boolean useCompoundFile=(pass % 2) > 0;
    KeepAllDeletionPolicy policy=new KeepAllDeletionPolicy();
    Directory dir=new RAMDirectory();
    IndexWriter writer=new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy);
    writer.setUseCompoundFile(useCompoundFile);
    for (int i=0; i < 107; i++) {
      addDoc(writer);
    }
    writer.close();
    writer=new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy);
    writer.setUseCompoundFile(useCompoundFile);
    writer.optimize();
    writer.close();
    assertEquals(2,policy.numOnInit);
    if (autoCommit) {
      assertTrue(policy.numOnCommit > 2);
    }
 else {
      assertEquals(2,policy.numOnCommit);
    }
    long gen=SegmentInfos.getCurrentSegmentGeneration(dir);
    while (gen > 0) {
      IndexReader reader=IndexReader.open(dir);
      reader.close();
      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      gen--;
      if (gen > 0) {
        int preCount=dir.list().length;
        writer=new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,policy);
        writer.close();
        int postCount=dir.list().length;
        assertTrue(postCount < preCount);
      }
    }
    dir.close();
  }
}
