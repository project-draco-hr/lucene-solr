{
  super();
  this.blockSize=blockSize;
  docOut=state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockPackedPostingsFormat.DOC_EXTENSION),state.context);
  IndexOutput posOut=null;
  IndexOutput payOut=null;
  boolean success=false;
  try {
    CodecUtil.writeHeader(docOut,DOC_CODEC,VERSION_CURRENT);
    if (state.fieldInfos.hasProx()) {
      posDeltaBuffer=new long[blockSize];
      posDeltaLBuffer=LongBuffer.wrap(posDeltaBuffer);
      posOut=state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockPackedPostingsFormat.POS_EXTENSION),state.context);
      CodecUtil.writeHeader(posOut,POS_CODEC,VERSION_CURRENT);
      if (state.fieldInfos.hasPayloads()) {
        payloadBytes=new byte[128];
        payloadLengthBuffer=new long[blockSize];
        payloadLengthLBuffer=LongBuffer.wrap(payloadLengthBuffer);
      }
 else {
        payloadBytes=null;
        payloadLengthBuffer=null;
        payloadLengthLBuffer=null;
      }
      if (state.fieldInfos.hasOffsets()) {
        offsetStartDeltaBuffer=new long[blockSize];
        offsetLengthBuffer=new long[blockSize];
        offsetStartDeltaLBuffer=LongBuffer.wrap(offsetStartDeltaBuffer);
        offsetLengthLBuffer=LongBuffer.wrap(offsetLengthBuffer);
      }
 else {
        offsetStartDeltaBuffer=null;
        offsetLengthBuffer=null;
        offsetStartDeltaLBuffer=null;
        offsetLengthLBuffer=null;
      }
      if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {
        payOut=state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockPackedPostingsFormat.PAY_EXTENSION),state.context);
        CodecUtil.writeHeader(payOut,PAY_CODEC,VERSION_CURRENT);
      }
    }
 else {
      posDeltaBuffer=null;
      payloadLengthBuffer=null;
      offsetStartDeltaBuffer=null;
      offsetLengthBuffer=null;
      payloadBytes=null;
      posDeltaLBuffer=null;
      payloadLengthLBuffer=null;
      offsetStartDeltaLBuffer=null;
      offsetLengthLBuffer=null;
    }
    this.payOut=payOut;
    this.posOut=posOut;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(docOut,posOut,payOut);
    }
  }
  docDeltaBuffer=new long[blockSize];
  freqBuffer=new long[blockSize];
  docDeltaLBuffer=LongBuffer.wrap(docDeltaBuffer);
  freqLBuffer=LongBuffer.wrap(freqBuffer);
  skipWriter=new BlockPackedSkipWriter(blockSize,maxSkipLevels,state.segmentInfo.getDocCount(),docOut,posOut,payOut);
  encoded=new byte[blockSize * 4];
  encodedBuffer=ByteBuffer.wrap(encoded).asLongBuffer();
}
