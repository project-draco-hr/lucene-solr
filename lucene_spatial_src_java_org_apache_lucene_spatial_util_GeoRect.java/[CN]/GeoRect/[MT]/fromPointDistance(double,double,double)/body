{
  checkLatitude(centerLat);
  checkLongitude(centerLon);
  final double radLat=toRadians(centerLat);
  final double radLon=toRadians(centerLon);
  double radDistance=(radiusMeters + 7E-2) / EARTH_MEAN_RADIUS_METERS;
  double minLat=radLat - radDistance;
  double maxLat=radLat + radDistance;
  double minLon;
  double maxLon;
  if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {
    double deltaLon=asin(sloppySin(radDistance) / cos(radLat));
    minLon=radLon - deltaLon;
    if (minLon < MIN_LON_RADIANS) {
      minLon+=2d * PI;
    }
    maxLon=radLon + deltaLon;
    if (maxLon > MAX_LON_RADIANS) {
      maxLon-=2d * PI;
    }
  }
 else {
    minLat=max(minLat,MIN_LAT_RADIANS);
    maxLat=min(maxLat,MAX_LAT_RADIANS);
    minLon=MIN_LON_RADIANS;
    maxLon=MAX_LON_RADIANS;
  }
  return new GeoRect(toDegrees(minLat),toDegrees(maxLat),toDegrees(minLon),toDegrees(maxLon));
}
