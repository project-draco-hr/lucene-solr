{
  final Query expectedCacheKey=new TermQuery(new Term("foo","bar"));
  final BooleanQuery.Builder query=new BooleanQuery.Builder();
  query.add(new BoostQuery(expectedCacheKey,42f),Occur.MUST);
  final LRUQueryCache queryCache=new LRUQueryCache(1000000,10000000);
  Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  Document doc=new Document();
  doc.add(new StringField("foo","bar",Store.YES));
  w.addDocument(doc);
  w.commit();
  final IndexReader reader=w.getReader();
  final IndexSearcher searcher=newSearcher(reader);
  w.close();
  final QueryCachingPolicy policy=new QueryCachingPolicy(){
    @Override public boolean shouldCache(    Query query,    LeafReaderContext context) throws IOException {
      assertEquals(expectedCacheKey,query);
      return true;
    }
    @Override public void onUse(    Query query){
      assertEquals(expectedCacheKey,query);
    }
  }
;
  searcher.setQueryCache(queryCache);
  searcher.setQueryCachingPolicy(policy);
  searcher.search(query.build(),new TotalHitCountCollector());
  reader.close();
  dir.close();
}
