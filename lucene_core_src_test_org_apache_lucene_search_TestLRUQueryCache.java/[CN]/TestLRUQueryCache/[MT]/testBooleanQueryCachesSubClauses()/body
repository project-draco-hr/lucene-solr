{
  Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  Document doc=new Document();
  doc.add(new StringField("foo","bar",Store.YES));
  doc.add(new StringField("foo","quux",Store.YES));
  w.addDocument(doc);
  w.commit();
  final IndexReader reader=w.getReader();
  final IndexSearcher searcher=newSearcher(reader);
  w.close();
  final LRUQueryCache queryCache=new LRUQueryCache(1000000,10000000);
  searcher.setQueryCache(queryCache);
  searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  TermQuery should=new TermQuery(new Term("foo","baz"));
  TermQuery must=new TermQuery(new Term("foo","bar"));
  TermQuery filter=new TermQuery(new Term("foo","quux"));
  TermQuery mustNot=new TermQuery(new Term("foo","foo"));
  bq.add(should,Occur.SHOULD);
  bq.add(must,Occur.MUST);
  bq.add(filter,Occur.FILTER);
  bq.add(mustNot,Occur.MUST_NOT);
  BooleanQuery.Builder bq2=new BooleanQuery.Builder();
  bq2.add(should,Occur.SHOULD);
  bq2.add(must,Occur.FILTER);
  bq2.add(filter,Occur.FILTER);
  bq2.add(mustNot,Occur.MUST_NOT);
  assertEquals(Collections.emptySet(),new HashSet<>(queryCache.cachedQueries()));
  searcher.search(bq.build(),1);
  assertEquals(new HashSet<>(Arrays.asList(filter,mustNot)),new HashSet<>(queryCache.cachedQueries()));
  queryCache.clear();
  assertEquals(Collections.emptySet(),new HashSet<>(queryCache.cachedQueries()));
  searcher.search(new ConstantScoreQuery(bq.build()),1);
  assertEquals(new HashSet<>(Arrays.asList(bq2.build(),should,must,filter,mustNot)),new HashSet<>(queryCache.cachedQueries()));
  reader.close();
  dir.close();
}
