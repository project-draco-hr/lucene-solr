{
  Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  Document doc=new Document();
  TextField f=new TextField("foo","foo",Store.NO);
  doc.add(f);
  w.addDocument(doc);
  IndexReader reader=w.getReader();
  final int maxSize=TestUtil.nextInt(random(),1,10000);
  final long maxRamBytesUsed=TestUtil.nextLong(random(),1,5000000);
  final LRUQueryCache queryCache=new LRUQueryCache(maxSize,maxRamBytesUsed);
  IndexSearcher uncachedSearcher=null;
  IndexSearcher cachedSearcher=null;
  final int iters=atLeast(20000);
  for (int i=0; i < iters; ++i) {
    if (i == 0 || random().nextInt(100) == 1) {
      reader.close();
      f.setStringValue(RandomPicks.randomFrom(random(),Arrays.asList("foo","bar","bar baz")));
      w.addDocument(doc);
      if (random().nextBoolean()) {
        w.deleteDocuments(buildRandomQuery(0));
      }
      reader=w.getReader();
      uncachedSearcher=newSearcher(reader);
      uncachedSearcher.setQueryCache(null);
      cachedSearcher=newSearcher(reader);
      cachedSearcher.setQueryCache(queryCache);
      cachedSearcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);
    }
    final Query q=buildRandomQuery(0);
    assertEquals(uncachedSearcher.count(q),cachedSearcher.count(q));
    if (rarely()) {
      queryCache.assertConsistent();
    }
  }
  queryCache.assertConsistent();
  w.close();
  reader.close();
  dir.close();
  queryCache.assertConsistent();
}
