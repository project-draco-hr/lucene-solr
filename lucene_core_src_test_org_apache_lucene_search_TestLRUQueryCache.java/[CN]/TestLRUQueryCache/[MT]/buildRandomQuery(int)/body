{
  if (level == 10) {
    return new MatchAllDocsQuery();
  }
switch (random().nextInt(6)) {
case 0:
    return new TermQuery(randomTerm());
case 1:
  BooleanQuery bq=new BooleanQuery();
final int numClauses=TestUtil.nextInt(random(),1,3);
int numShould=0;
for (int i=0; i < numClauses; ++i) {
final Occur occur=RandomPicks.randomFrom(random(),Occur.values());
bq.add(buildRandomQuery(level + 1),occur);
if (occur == Occur.SHOULD) {
numShould++;
}
}
bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(),0,numShould));
return bq;
case 2:
Term t1=randomTerm();
Term t2=randomTerm();
PhraseQuery pq=new PhraseQuery(random().nextInt(2),t1.field(),t1.bytes(),t2.bytes());
return pq;
case 3:
return new MatchAllDocsQuery();
case 4:
return new ConstantScoreQuery(buildRandomQuery(level + 1));
case 5:
DisjunctionMaxQuery dmq=new DisjunctionMaxQuery(random().nextFloat());
final int numQueries=TestUtil.nextInt(random(),1,3);
for (int i=0; i < numQueries; ++i) {
dmq.add(buildRandomQuery(level + 1));
}
return dmq;
default :
throw new AssertionError();
}
}
