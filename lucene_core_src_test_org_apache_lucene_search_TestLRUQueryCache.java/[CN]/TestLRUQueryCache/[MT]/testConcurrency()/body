{
  final LRUQueryCache queryCache=new LRUQueryCache(1 + random().nextInt(20),1 + random().nextInt(10000));
  Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final SearcherFactory searcherFactory=new SearcherFactory(){
    @Override public IndexSearcher newSearcher(    IndexReader reader,    IndexReader previous) throws IOException {
      IndexSearcher searcher=new IndexSearcher(reader);
      searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);
      searcher.setQueryCache(queryCache);
      return searcher;
    }
  }
;
  final boolean applyDeletes=random().nextBoolean();
  final SearcherManager mgr=new SearcherManager(w.w,applyDeletes,searcherFactory);
  final AtomicBoolean indexing=new AtomicBoolean(true);
  final AtomicReference<Throwable> error=new AtomicReference<>();
  final int numDocs=atLeast(10000);
  Thread[] threads=new Thread[3];
  threads[0]=new Thread(){
    public void run(){
      Document doc=new Document();
      StringField f=new StringField("color","",Store.NO);
      doc.add(f);
      for (int i=0; indexing.get() && i < numDocs; ++i) {
        f.setStringValue(RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow"}));
        try {
          w.addDocument(doc);
          if ((i & 63) == 0) {
            mgr.maybeRefresh();
            if (rarely()) {
              queryCache.clear();
            }
            if (rarely()) {
              final String color=RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow"});
              w.deleteDocuments(new Term("color",color));
            }
          }
        }
 catch (        Throwable t) {
          error.compareAndSet(null,t);
          break;
        }
      }
      indexing.set(false);
    }
  }
;
  for (int i=1; i < threads.length; ++i) {
    threads[i]=new Thread(){
      @Override public void run(){
        while (indexing.get()) {
          try {
            final IndexSearcher searcher=mgr.acquire();
            try {
              final String value=RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow","green"});
              final Query q=new TermQuery(new Term("color",value));
              TotalHitCountCollector collector=new TotalHitCountCollector();
              searcher.search(q,collector);
              final int totalHits1=collector.getTotalHits();
              final int totalHits2=searcher.search(q,1).totalHits;
              assertEquals(totalHits2,totalHits1);
            }
  finally {
              mgr.release(searcher);
            }
          }
 catch (          Throwable t) {
            error.compareAndSet(null,t);
          }
        }
      }
    }
;
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  if (error.get() != null) {
    throw error.get();
  }
  queryCache.assertConsistent();
  mgr.close();
  w.close();
  dir.close();
  queryCache.assertConsistent();
}
