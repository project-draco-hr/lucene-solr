{
  boolean isJava7=true;
  try {
    Class.forName("java.lang.AutoCloseable");
  }
 catch (  ClassNotFoundException cnfe) {
    isJava7=false;
  }
  if (!isJava7) {
    System.err.println("WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.");
  }
  try {
    final TestException t=new TestException();
    IOUtils.closeSafely(t,new BrokenCloseable(1),new BrokenCloseable(2));
  }
 catch (  TestException e1) {
    assertEquals("BASE-EXCEPTION",e1.getMessage());
    final StringWriter sw=new StringWriter();
    final PrintWriter pw=new PrintWriter(sw);
    e1.printStackTrace(pw);
    pw.flush();
    final String trace=sw.toString();
    if (VERBOSE) {
      System.out.println("TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:");
      System.out.println(trace);
    }
    if (isJava7) {
      assertTrue("Stack trace does not contain first suppressed Exception: " + trace,trace.contains("java.io.IOException: TEST-IO-EXCEPTION-1"));
      assertTrue("Stack trace does not contain second suppressed Exception: " + trace,trace.contains("java.io.IOException: TEST-IO-EXCEPTION-2"));
    }
  }
catch (  IOException e2) {
    fail("IOException should not be thrown here");
  }
  try {
    IOUtils.closeSafely((TestException)null,new BrokenCloseable(1),new BrokenCloseable(2));
  }
 catch (  TestException e1) {
    fail("TestException should not be thrown here");
  }
catch (  IOException e2) {
    assertEquals("TEST-IO-EXCEPTION-1",e2.getMessage());
    final StringWriter sw=new StringWriter();
    final PrintWriter pw=new PrintWriter(sw);
    e2.printStackTrace(pw);
    pw.flush();
    final String trace=sw.toString();
    if (VERBOSE) {
      System.out.println("TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:");
      System.out.println(trace);
    }
    if (isJava7) {
      assertTrue("Stack trace does not contain suppressed Exception: " + trace,trace.contains("java.io.IOException: TEST-IO-EXCEPTION-2"));
    }
  }
}
