{
  String defaultCollection=null;
  String defaultZkhost=null;
  CoreContainer coreContainer=core.getCoreDescriptor().getCoreContainer();
  this.coreName=core.getName();
  if (coreContainer.isZooKeeperAware()) {
    defaultCollection=core.getCoreDescriptor().getCollectionName();
    defaultZkhost=core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();
    streamFactory.withCollectionZkHost(defaultCollection,defaultZkhost);
    streamFactory.withDefaultZkHost(defaultZkhost);
  }
  streamFactory.withFunctionName("search",CloudSolrStream.class).withFunctionName("merge",MergeStream.class).withFunctionName("unique",UniqueStream.class).withFunctionName("top",RankStream.class).withFunctionName("group",GroupOperation.class).withFunctionName("reduce",ReducerStream.class).withFunctionName("parallel",ParallelStream.class).withFunctionName("rollup",RollupStream.class).withFunctionName("stats",StatsStream.class).withFunctionName("innerJoin",InnerJoinStream.class).withFunctionName("leftOuterJoin",LeftOuterJoinStream.class).withFunctionName("hashJoin",HashJoinStream.class).withFunctionName("outerHashJoin",OuterHashJoinStream.class).withFunctionName("facet",FacetStream.class).withFunctionName("update",UpdateStream.class).withFunctionName("jdbc",JDBCStream.class).withFunctionName("intersect",IntersectStream.class).withFunctionName("complement",ComplementStream.class).withFunctionName("min",MinMetric.class).withFunctionName("max",MaxMetric.class).withFunctionName("avg",MeanMetric.class).withFunctionName("sum",SumMetric.class).withFunctionName("count",CountMetric.class).withFunctionName("replace",ReplaceOperation.class).withFunctionName("concat",ConcatOperation.class).withFunctionName("group",GroupOperation.class).withFunctionName("distinct",DistinctOperation.class);
  Object functionMappingsObj=initArgs.get("streamFunctions");
  if (null != functionMappingsObj) {
    NamedList<?> functionMappings=(NamedList<?>)functionMappingsObj;
    for (    Entry<String,?> functionMapping : functionMappings) {
      Class<?> clazz=core.getResourceLoader().findClass((String)functionMapping.getValue(),Expressible.class);
      streamFactory.withFunctionName(functionMapping.getKey(),clazz);
    }
  }
  core.addCloseHook(new CloseHook(){
    @Override public void preClose(    SolrCore core){
    }
    @Override public void postClose(    SolrCore core){
      clientCache.close();
    }
  }
);
}
