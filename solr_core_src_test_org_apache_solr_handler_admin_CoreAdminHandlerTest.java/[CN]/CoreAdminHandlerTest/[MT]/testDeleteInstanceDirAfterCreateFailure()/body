{
  File solrHomeDirectory=new File(initCoreDataDir,getClass().getName() + "-corex-" + System.nanoTime());
  solrHomeDirectory.mkdirs();
  copySolrHomeToTemp(solrHomeDirectory,"corex");
  File corex=new File(solrHomeDirectory,"corex");
  FileUtils.write(new File(corex,"core.properties"),"",StandardCharsets.UTF_8);
  JettySolrRunner runner=new JettySolrRunner(solrHomeDirectory.getAbsolutePath(),buildJettyConfig("/solr"));
  runner.start();
  try (HttpSolrClient client=getHttpSolrClient(runner.getBaseUrl() + "/corex")){
    client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
    client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id","123");
    client.add(doc);
    client.commit();
  }
   Path dataDir=null;
  try (HttpSolrClient client=getHttpSolrClient(runner.getBaseUrl().toString())){
    CoreStatus status=CoreAdminRequest.getCoreStatus("corex",true,client);
    String dataDirectory=status.getDataDirectory();
    dataDir=Paths.get(dataDirectory);
    assertTrue(Files.exists(dataDir));
  }
   File subHome=new File(solrHomeDirectory,"corex" + File.separator + "conf");
  String top=SolrTestCaseJ4.TEST_HOME() + "/collection1/conf";
  FileUtils.copyFile(new File(top,"bad-error-solrconfig.xml"),new File(subHome,"solrconfig.xml"));
  try (HttpSolrClient client=getHttpSolrClient(runner.getBaseUrl().toString())){
    client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
    client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
    try {
      CoreAdminRequest.reloadCore("corex",client);
    }
 catch (    Exception e) {
    }
    CoreAdminRequest.Unload req=new CoreAdminRequest.Unload(false);
    req.setDeleteDataDir(true);
    req.setDeleteInstanceDir(false);
    req.setCoreName("corex");
    req.process(client);
  }
   runner.stop();
  assertTrue("The data directory was not cleaned up on unload after a failed core reload",Files.notExists(dataDir));
}
