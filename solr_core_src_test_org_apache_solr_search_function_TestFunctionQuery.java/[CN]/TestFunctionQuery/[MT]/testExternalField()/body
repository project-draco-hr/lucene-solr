{
  String field="foo_extf";
  float[] ids={100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};
  createIndex(null,ids);
  makeExternalFile(field,"54321=543210\n0=-999\n25=250");
  singleTest(field,"\0",54321,543210,0,-999,25,250,100,1);
  Object orig=FileFloatSource.onlyForTesting;
  singleTest(field,"log(\0)");
  assertTrue(orig == FileFloatSource.onlyForTesting);
  singleTest(field,"sqrt(\0)");
  assertTrue(orig == FileFloatSource.onlyForTesting);
  makeExternalFile(field,"0=1");
  assertU(h.query("/reloadCache",lrf.makeRequest("","")));
  singleTest(field,"sqrt(\0)");
  assertTrue(orig != FileFloatSource.onlyForTesting);
  Random r=random();
  for (int i=0; i < 10; i++) {
    int len=r.nextInt(ids.length + 1);
    boolean sorted=r.nextBoolean();
    for (int j=0; j < ids.length; j++) {
      int other=r.nextInt(ids.length);
      float v=ids[0];
      ids[0]=ids[other];
      ids[other]=v;
    }
    if (sorted) {
      Arrays.sort(ids,0,len);
    }
    float[] vals=new float[len];
    for (int j=0; j < len; j++) {
      vals[j]=r.nextInt(200) - 100;
    }
    StringBuilder sb=new StringBuilder();
    for (int j=0; j < len; j++) {
      sb.append("" + ids[j] + "="+ vals[j]+ "\n");
    }
    makeExternalFile(field,sb.toString());
    assertU(h.query("/reloadCache",lrf.makeRequest("","")));
    float[] answers=new float[ids.length * 2];
    for (int j=0; j < len; j++) {
      answers[j * 2]=ids[j];
      answers[j * 2 + 1]=vals[j];
    }
    for (int j=len; j < ids.length; j++) {
      answers[j * 2]=ids[j];
      answers[j * 2 + 1]=1;
    }
    singleTest(field,"\0",answers);
  }
  FieldCache.DEFAULT.purgeAllCaches();
}
