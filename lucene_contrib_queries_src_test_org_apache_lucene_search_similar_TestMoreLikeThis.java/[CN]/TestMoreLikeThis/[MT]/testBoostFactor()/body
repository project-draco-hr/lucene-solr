{
  Map<String,Float> originalValues=getOriginalValues();
  MoreLikeThis mlt=new MoreLikeThis(reader);
  mlt.setAnalyzer(new MockAnalyzer(random,MockTokenizer.WHITESPACE,false));
  mlt.setMinDocFreq(1);
  mlt.setMinTermFreq(1);
  mlt.setMinWordLen(1);
  mlt.setFieldNames(new String[]{"text"});
  mlt.setBoost(true);
  float boostFactor=5;
  mlt.setBoostFactor(boostFactor);
  BooleanQuery query=(BooleanQuery)mlt.like(new StringReader("lucene release"));
  List<BooleanClause> clauses=query.clauses();
  assertEquals("Expected " + originalValues.size() + " clauses.",originalValues.size(),clauses.size());
  for (int i=0; i < clauses.size(); i++) {
    BooleanClause clause=clauses.get(i);
    TermQuery tq=(TermQuery)clause.getQuery();
    Float termBoost=originalValues.get(tq.getTerm().text());
    assertNotNull("Expected term " + tq.getTerm().text(),termBoost);
    float totalBoost=termBoost.floatValue() * boostFactor;
    assertEquals("Expected boost of " + totalBoost + " for term '"+ tq.getTerm().text()+ "' got "+ tq.getBoost(),totalBoost,tq.getBoost(),0.0001);
  }
}
