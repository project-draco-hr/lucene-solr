{
  CompactLabelToOrdinal l2o=new CompactLabelToOrdinal();
  l2o.loadFactor=loadFactor;
  l2o.hashArrays=new HashArray[numHashArrays];
  DataInputStream dis=null;
  try {
    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
    l2o.counter=dis.readInt();
    l2o.capacity=determineCapacity((int)Math.pow(2,l2o.hashArrays.length),l2o.counter);
    l2o.init();
    l2o.labelRepository=CharBlockArray.open(dis);
    l2o.collisionMap=new CollisionMap(l2o.labelRepository);
    int cid=0;
    int offset=1;
    int lastStartOffset=offset;
    while (offset < l2o.labelRepository.length()) {
      int ncomponents=l2o.labelRepository.charAt(offset++);
      int hash=ncomponents;
      if (ncomponents != 0) {
        int usedchars=0;
        for (int i=0; i < ncomponents; i++) {
          usedchars=l2o.labelRepository.charAt(offset++);
          hash=hash * 31 + usedchars;
        }
        for (int i=0; i < usedchars; i++) {
          hash=hash * 31 + l2o.labelRepository.charAt(offset++);
        }
      }
      hash=hash ^ ((hash >>> 20) ^ (hash >>> 12));
      hash=hash ^ (hash >>> 7) ^ (hash >>> 4);
      l2o.addLabelOffset(hash,cid,lastStartOffset);
      cid++;
      lastStartOffset=offset;
    }
  }
 catch (  ClassNotFoundException cnfe) {
    throw new IOException("Invalid file format. Cannot deserialize.");
  }
 finally {
    if (dis != null) {
      dis.close();
    }
  }
  l2o.threshold=(int)(l2o.loadFactor * l2o.capacity);
  return l2o;
}
