{
  MockRAMDirectory.Failure failure=new MockRAMDirectory.Failure(){
    boolean sawMaybe=false;
    boolean failed=false;
    public MockRAMDirectory.Failure reset(){
      sawMaybe=false;
      failed=false;
      return this;
    }
    public void eval(    MockRAMDirectory dir) throws IOException {
      if (sawMaybe && !failed) {
        boolean seen=false;
        StackTraceElement[] trace=new Exception().getStackTrace();
        for (int i=0; i < trace.length; i++) {
          if ("applyDeletes".equals(trace[i].getMethodName())) {
            seen=true;
            break;
          }
        }
        if (!seen) {
          failed=true;
          throw new IOException("fail after applyDeletes");
        }
      }
      if (!failed) {
        StackTraceElement[] trace=new Exception().getStackTrace();
        for (int i=0; i < trace.length; i++) {
          if ("applyDeletes".equals(trace[i].getMethodName())) {
            sawMaybe=true;
            break;
          }
        }
      }
    }
  }
;
  String[] keywords={"1","2"};
  String[] unindexed={"Netherlands","Italy"};
  String[] unstored={"Amsterdam has lots of bridges","Venice has lots of canals"};
  String[] text={"Amsterdam","Venice"};
  for (int pass=0; pass < 2; pass++) {
    boolean autoCommit=(0 == pass);
    MockRAMDirectory dir=new MockRAMDirectory();
    IndexWriter modifier=new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true);
    modifier.setUseCompoundFile(true);
    modifier.setMaxBufferedDeleteTerms(2);
    dir.failOn(failure.reset());
    for (int i=0; i < keywords.length; i++) {
      Document doc=new Document();
      doc.add(new Field("id",keywords[i],Field.Store.YES,Field.Index.UN_TOKENIZED));
      doc.add(new Field("country",unindexed[i],Field.Store.YES,Field.Index.NO));
      doc.add(new Field("contents",unstored[i],Field.Store.NO,Field.Index.TOKENIZED));
      doc.add(new Field("city",text[i],Field.Store.YES,Field.Index.TOKENIZED));
      modifier.addDocument(doc);
    }
    modifier.optimize();
    if (!autoCommit) {
      modifier.close();
    }
    Term term=new Term("city","Amsterdam");
    int hitCount=getHitCount(dir,term);
    assertEquals(1,hitCount);
    if (!autoCommit) {
      modifier=new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer());
      modifier.setUseCompoundFile(true);
    }
    modifier.deleteDocuments(term);
    Document doc=new Document();
    modifier.addDocument(doc);
    boolean failed=false;
    try {
      modifier.flush();
    }
 catch (    IOException ioe) {
      failed=true;
    }
    assertTrue(failed);
    if (!autoCommit) {
      modifier.close();
    }
 else {
      modifier.flush();
    }
    hitCount=getHitCount(dir,term);
    assertEquals(autoCommit ? 1 : 0,hitCount);
    if (autoCommit) {
      modifier.close();
    }
    dir.close();
  }
}
