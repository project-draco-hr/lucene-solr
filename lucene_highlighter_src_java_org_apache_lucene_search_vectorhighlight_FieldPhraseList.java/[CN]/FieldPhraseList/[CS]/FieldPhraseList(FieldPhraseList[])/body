{
  @SuppressWarnings({"rawtypes","unchecked"}) Iterator<WeightedPhraseInfo>[] allInfos=new Iterator[toMerge.length];
  int index=0;
  for (  FieldPhraseList fplToMerge : toMerge) {
    allInfos[index++]=fplToMerge.phraseList.iterator();
  }
  MergedIterator<WeightedPhraseInfo> itr=new MergedIterator<WeightedPhraseInfo>(false,allInfos);
  phraseList=new LinkedList<WeightedPhraseInfo>();
  if (!itr.hasNext()) {
    return;
  }
  List<WeightedPhraseInfo> work=new ArrayList<WeightedPhraseInfo>();
  WeightedPhraseInfo first=itr.next();
  work.add(first);
  int workEndOffset=first.getEndOffset();
  while (itr.hasNext()) {
    WeightedPhraseInfo current=itr.next();
    if (current.getStartOffset() <= workEndOffset) {
      workEndOffset=Math.max(workEndOffset,current.getEndOffset());
      work.add(current);
    }
 else {
      if (work.size() == 1) {
        phraseList.add(work.get(0));
        work.set(0,current);
      }
 else {
        phraseList.add(new WeightedPhraseInfo(work));
        work.clear();
        work.add(current);
      }
      workEndOffset=current.getEndOffset();
    }
  }
  if (work.size() == 1) {
    phraseList.add(work.get(0));
  }
 else {
    phraseList.add(new WeightedPhraseInfo(work));
    work.clear();
  }
}
