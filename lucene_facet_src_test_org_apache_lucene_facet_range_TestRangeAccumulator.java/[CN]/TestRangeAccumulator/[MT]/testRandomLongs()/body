{
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  int numDocs=atLeast(1000);
  long[] values=new long[numDocs];
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    long v=random().nextLong();
    values[i]=v;
    doc.add(new NumericDocValuesField("field",v));
    doc.add(new LongField("field",v,Field.Store.NO));
    w.addDocument(doc);
  }
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r);
  int numIters=atLeast(10);
  for (int iter=0; iter < numIters; iter++) {
    if (VERBOSE) {
      System.out.println("TEST: iter=" + iter);
    }
    int numRange=_TestUtil.nextInt(random(),1,5);
    LongRange[] ranges=new LongRange[numRange];
    int[] expectedCounts=new int[numRange];
    for (int rangeID=0; rangeID < numRange; rangeID++) {
      long min=random().nextLong();
      long max=random().nextLong();
      if (min > max) {
        long x=min;
        min=max;
        max=x;
      }
      boolean minIncl=random().nextBoolean();
      boolean maxIncl=random().nextBoolean();
      ranges[rangeID]=new LongRange("r" + rangeID,min,minIncl,max,maxIncl);
      for (int i=0; i < numDocs; i++) {
        boolean accept=true;
        if (minIncl) {
          accept&=values[i] >= min;
        }
 else {
          accept&=values[i] > min;
        }
        if (maxIncl) {
          accept&=values[i] <= max;
        }
 else {
          accept&=values[i] < max;
        }
        if (accept) {
          expectedCounts[rangeID]++;
        }
      }
    }
    FacetSearchParams fsp=new FacetSearchParams(new RangeFacetRequest<LongRange>("field",ranges));
    FacetsCollector fc=FacetsCollector.create(new RangeAccumulator(fsp,r));
    s.search(new MatchAllDocsQuery(),fc);
    List<FacetResult> results=fc.getFacetResults();
    assertEquals(1,results.size());
    List<FacetResultNode> nodes=results.get(0).getFacetResultNode().subResults;
    assertEquals(numRange,nodes.size());
    for (int rangeID=0; rangeID < numRange; rangeID++) {
      if (VERBOSE) {
        System.out.println("  range " + rangeID + " expectedCount="+ expectedCounts[rangeID]);
      }
      FacetResultNode subNode=nodes.get(rangeID);
      assertEquals("field/r" + rangeID,subNode.label.toString('/'));
      assertEquals(expectedCounts[rangeID],(int)subNode.value);
      LongRange range=(LongRange)((RangeFacetRequest)results.get(0).getFacetRequest()).ranges[rangeID];
      DrillDownQuery ddq=new DrillDownQuery(FacetIndexingParams.DEFAULT);
      ddq.add("field",NumericRangeQuery.newLongRange("field",range.min,range.max,range.minInclusive,range.maxInclusive));
      assertEquals(expectedCounts[rangeID],s.search(ddq,10).totalHits);
    }
  }
  r.close();
  dir.close();
}
