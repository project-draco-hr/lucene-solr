{
  String fieldName="*_replace";
  Map<String,Object> fieldAttributes=new LinkedHashMap<>();
  fieldAttributes.put("name",fieldName);
  fieldAttributes.put("type","string");
  fieldAttributes.put("stored",false);
  fieldAttributes.put("indexed",true);
  SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest=new SchemaRequest.AddDynamicField(fieldAttributes);
  SchemaResponse.UpdateResponse addFieldResponse=addDFieldUpdateSchemaRequest.process(getSolrClient());
  assertValidSchemaResponse(addFieldResponse);
  Map<String,Object> replaceFieldAttributes=new LinkedHashMap<>(fieldAttributes);
  replaceFieldAttributes.put("stored",true);
  replaceFieldAttributes.put("indexed",false);
  SchemaRequest.ReplaceDynamicField replaceFieldRequest=new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);
  SchemaResponse.UpdateResponse replaceFieldResponse=replaceFieldRequest.process(getSolrClient());
  assertValidSchemaResponse(replaceFieldResponse);
  SchemaRequest.DynamicField dynamicFieldSchemaRequest=new SchemaRequest.DynamicField(fieldName);
  SchemaResponse.DynamicFieldResponse newFieldResponse=dynamicFieldSchemaRequest.process(getSolrClient());
  assertValidSchemaResponse(newFieldResponse);
  Map<String,Object> newFieldAttributes=newFieldResponse.getDynamicField();
  assertThat(fieldName,is(equalTo(newFieldAttributes.get("name"))));
  assertThat("string",is(equalTo(newFieldAttributes.get("type"))));
  assertThat(true,is(equalTo(newFieldAttributes.get("stored"))));
  assertThat(false,is(equalTo(newFieldAttributes.get("indexed"))));
}
