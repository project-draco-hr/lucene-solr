{
  FieldTypeDefinition fieldTypeDefinition=new FieldTypeDefinition();
  Map<String,Object> fieldTypeAttributes=new LinkedHashMap<>();
  String fieldTypeName="fullClassNames";
  fieldTypeAttributes.put("name",fieldTypeName);
  fieldTypeAttributes.put("class","org.apache.solr.schema.TextField");
  fieldTypeDefinition.setAttributes(fieldTypeAttributes);
  AnalyzerDefinition analyzerDefinition=new AnalyzerDefinition();
  Map<String,Object> charFilterAttributes=new LinkedHashMap<>();
  charFilterAttributes.put("class","solr.PatternReplaceCharFilterFactory");
  charFilterAttributes.put("replacement","$1$1");
  charFilterAttributes.put("pattern","([a-zA-Z])\\\\1+");
  analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));
  Map<String,Object> tokenizerAttributes=new LinkedHashMap<>();
  tokenizerAttributes.put("class","solr.WhitespaceTokenizerFactory");
  analyzerDefinition.setTokenizer(tokenizerAttributes);
  fieldTypeDefinition.setAnalyzer(analyzerDefinition);
  Map<String,Object> similarityAttributes=new LinkedHashMap<>();
  similarityAttributes.put("class","org.apache.lucene.misc.SweetSpotSimilarity");
  fieldTypeDefinition.setSimilarity(similarityAttributes);
  SchemaRequest.AddFieldType addFieldTypeRequest=new SchemaRequest.AddFieldType(fieldTypeDefinition);
  SchemaResponse.UpdateResponse addFieldTypeResponse=addFieldTypeRequest.process(getSolrClient());
  assertValidSchemaResponse(addFieldTypeResponse);
  SchemaRequest.FieldType fieldTypeRequest=new SchemaRequest.FieldType(fieldTypeName);
  SchemaResponse.FieldTypeResponse newFieldTypeResponse=fieldTypeRequest.process(getSolrClient());
  assertValidSchemaResponse(newFieldTypeResponse);
  FieldTypeRepresentation newFieldTypeRepresentation=newFieldTypeResponse.getFieldType();
  assertThat(fieldTypeName,is(equalTo(newFieldTypeRepresentation.getAttributes().get("name"))));
  assertThat(similarityAttributes.get("class"),is(equalTo(newFieldTypeRepresentation.getSimilarity().get("class"))));
}
