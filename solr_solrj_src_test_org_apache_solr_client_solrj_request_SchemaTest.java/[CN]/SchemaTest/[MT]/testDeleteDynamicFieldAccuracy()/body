{
  String dynamicFieldName="*_del";
  Map<String,Object> fieldAttributes=new LinkedHashMap<>();
  fieldAttributes.put("name",dynamicFieldName);
  fieldAttributes.put("type","string");
  SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest=new SchemaRequest.AddDynamicField(fieldAttributes);
  SchemaResponse.UpdateResponse addDynamicFieldResponse=addFieldUpdateSchemaRequest.process(getSolrClient());
  assertValidSchemaResponse(addDynamicFieldResponse);
  SchemaRequest.DynamicField dynamicFieldSchemaRequest=new SchemaRequest.DynamicField(dynamicFieldName);
  SchemaResponse.DynamicFieldResponse initialDFieldResponse=dynamicFieldSchemaRequest.process(getSolrClient());
  assertValidSchemaResponse(initialDFieldResponse);
  Map<String,Object> fieldAttributesResponse=initialDFieldResponse.getDynamicField();
  assertThat(dynamicFieldName,is(equalTo(fieldAttributesResponse.get("name"))));
  SchemaRequest.DeleteDynamicField deleteFieldRequest=new SchemaRequest.DeleteDynamicField(dynamicFieldName);
  SchemaResponse.UpdateResponse deleteDynamicFieldResponse=deleteFieldRequest.process(getSolrClient());
  assertValidSchemaResponse(deleteDynamicFieldResponse);
  try {
    dynamicFieldSchemaRequest.process(getSolrClient());
    fail(String.format(Locale.ROOT,"after removal, the dynamic field %s shouldn't be anymore available over Schema API",dynamicFieldName));
  }
 catch (  SolrException e) {
  }
}
