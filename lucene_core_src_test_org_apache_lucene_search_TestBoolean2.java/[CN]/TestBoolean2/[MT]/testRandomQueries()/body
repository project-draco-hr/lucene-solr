{
  String[] vals={"w1","w2","w3","w4","w5","xx","yy","zzz"};
  int tot=0;
  BooleanQuery q1=null;
  try {
    int num=atLeast(20);
    for (int i=0; i < num; i++) {
      int level=random().nextInt(3);
      q1=randBoolQuery(new Random(random().nextLong()),random().nextBoolean(),level,field,vals,null).build();
      Sort sort=Sort.INDEXORDER;
      QueryUtils.check(random(),q1,searcher);
      try {
        searcher.setSimilarity(bigSearcher.getSimilarity(true));
        QueryUtils.check(random(),q1,searcher);
      }
  finally {
        searcher.setSimilarity(new DefaultSimilarity());
      }
      TopFieldCollector collector=TopFieldCollector.create(sort,1000,false,true,true);
      searcher.search(q1,collector);
      ScoreDoc[] hits1=collector.topDocs().scoreDocs;
      collector=TopFieldCollector.create(sort,1000,false,true,true);
      searcher.search(q1,collector);
      ScoreDoc[] hits2=collector.topDocs().scoreDocs;
      tot+=hits2.length;
      CheckHits.checkEqual(q1,hits1,hits2);
      BooleanQuery.Builder q3=new BooleanQuery.Builder();
      q3.add(q1,BooleanClause.Occur.SHOULD);
      q3.add(new PrefixQuery(new Term("field2","b")),BooleanClause.Occur.SHOULD);
      TopDocs hits4=bigSearcher.search(q3.build(),1);
      assertEquals(mulFactor * collector.totalHits + NUM_EXTRA_DOCS / 2,hits4.totalHits);
    }
  }
 catch (  Exception e) {
    System.out.println("failed query: " + q1);
    throw e;
  }
}
