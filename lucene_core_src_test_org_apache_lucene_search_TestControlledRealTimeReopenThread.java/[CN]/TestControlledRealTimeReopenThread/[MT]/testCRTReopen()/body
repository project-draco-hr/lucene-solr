{
  int maxStaleSecs=20;
  String s="        abcdefghijklmnopqrstuvwxyz     ";
  char[] chars=s.toCharArray();
  StringBuilder builder=new StringBuilder(2048);
  for (int i=0; i < 2048; i++) {
    builder.append(chars[random().nextInt(chars.length)]);
  }
  String content=builder.toString();
  final SnapshotDeletionPolicy sdp=new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
  final Directory dir=new NRTCachingDirectory(newFSDirectory(createTempDir("nrt")),5,128);
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_46,new MockAnalyzer(random()));
  config.setIndexDeletionPolicy(sdp);
  config.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
  final IndexWriter iw=new IndexWriter(dir,config);
  SearcherManager sm=new SearcherManager(iw,true,new SearcherFactory());
  final TrackingIndexWriter tiw=new TrackingIndexWriter(iw);
  ControlledRealTimeReopenThread<IndexSearcher> controlledRealTimeReopenThread=new ControlledRealTimeReopenThread<>(tiw,sm,maxStaleSecs,0);
  controlledRealTimeReopenThread.setDaemon(true);
  controlledRealTimeReopenThread.start();
  List<Thread> commitThreads=new ArrayList<>();
  for (int i=0; i < 500; i++) {
    if (i > 0 && i % 50 == 0) {
      Thread commitThread=new Thread(new Runnable(){
        @Override public void run(){
          try {
            iw.commit();
            IndexCommit ic=sdp.snapshot();
            for (            String name : ic.getFileNames()) {
              assertTrue(slowFileExists(dir,name));
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      commitThread.start();
      commitThreads.add(commitThread);
    }
    Document d=new Document();
    d.add(new TextField("count",i + "",Field.Store.NO));
    d.add(new TextField("content",content,Field.Store.YES));
    long start=System.currentTimeMillis();
    long l=tiw.addDocument(d);
    controlledRealTimeReopenThread.waitForGeneration(l);
    long wait=System.currentTimeMillis() - start;
    assertTrue("waited too long for generation " + wait,wait < (maxStaleSecs * 1000));
    IndexSearcher searcher=sm.acquire();
    TopDocs td=searcher.search(new TermQuery(new Term("count",i + "")),10);
    sm.release(searcher);
    assertEquals(1,td.totalHits);
  }
  for (  Thread commitThread : commitThreads) {
    commitThread.join();
  }
  controlledRealTimeReopenThread.close();
  sm.close();
  iw.close();
  dir.close();
}
