{
  final double minReopenSec=0.01 + 0.05 * random().nextDouble();
  final double maxReopenSec=minReopenSec * (1.0 + 10 * random().nextDouble());
  if (VERBOSE) {
    System.out.println("TEST: make SearcherManager maxReopenSec=" + maxReopenSec + " minReopenSec="+ minReopenSec);
  }
  genWriter=new TrackingIndexWriter(writer);
  final SearcherFactory sf=new SearcherFactory(){
    @Override public IndexSearcher newSearcher(    IndexReader r) throws IOException {
      TestControlledRealTimeReopenThread.this.warmCalled=true;
      IndexSearcher s=new IndexSearcher(r,es);
      s.search(new TermQuery(new Term("body","united")),10);
      return s;
    }
  }
;
  nrtNoDeletes=new SearcherManager(writer,false,sf);
  nrtDeletes=new SearcherManager(writer,true,sf);
  nrtDeletesThread=new ControlledRealTimeReopenThread<IndexSearcher>(genWriter,nrtDeletes,maxReopenSec,minReopenSec);
  nrtDeletesThread.setName("NRTDeletes Reopen Thread");
  nrtDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority() + 2,Thread.MAX_PRIORITY));
  nrtDeletesThread.setDaemon(true);
  nrtDeletesThread.start();
  nrtNoDeletesThread=new ControlledRealTimeReopenThread<IndexSearcher>(genWriter,nrtNoDeletes,maxReopenSec,minReopenSec);
  nrtNoDeletesThread.setName("NRTNoDeletes Reopen Thread");
  nrtNoDeletesThread.setPriority(Math.min(Thread.currentThread().getPriority() + 2,Thread.MAX_PRIORITY));
  nrtNoDeletesThread.setDaemon(true);
  nrtNoDeletesThread.start();
}
