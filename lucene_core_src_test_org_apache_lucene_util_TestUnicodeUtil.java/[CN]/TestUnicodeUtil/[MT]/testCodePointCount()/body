{
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0x80,'z','z','z'));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xc0 - 1,'z','z','z'));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xf8,'z','z','z'));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xfc,'z','z','z'));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xc2));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xe2));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xe2,0x82));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xf0));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xf0,0xa4));
  assertcodePointCountThrowsAssertionOn(asByteArray('z',0xf0,0xa4,0xad));
  assertEquals(0,UnicodeUtil.codePointCount(new BytesRef(asByteArray())));
  assertEquals(3,UnicodeUtil.codePointCount(new BytesRef(asByteArray('z','z','z'))));
  assertEquals(2,UnicodeUtil.codePointCount(new BytesRef(asByteArray('z',0xc2,0xa2))));
  assertEquals(2,UnicodeUtil.codePointCount(new BytesRef(asByteArray('z',0xe2,0x82,0xac))));
  assertEquals(2,UnicodeUtil.codePointCount(new BytesRef(asByteArray('z',0xf0,0xa4,0xad,0xa2))));
  int num=atLeast(50000);
  for (int i=0; i < num; i++) {
    final String s=TestUtil.randomUnicodeString(random());
    final byte[] utf8=new byte[s.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR];
    final int utf8Len=UnicodeUtil.UTF16toUTF8(s,0,s.length(),utf8);
    assertEquals(s.codePointCount(0,s.length()),UnicodeUtil.codePointCount(new BytesRef(utf8,0,utf8Len)));
  }
}
