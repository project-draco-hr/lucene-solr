{
  final int[] codePoints={Character.toCodePoint(Character.MIN_HIGH_SURROGATE,Character.MAX_LOW_SURROGATE),Character.toCodePoint(Character.MAX_HIGH_SURROGATE,Character.MIN_LOW_SURROGATE),Character.MAX_HIGH_SURROGATE,'A',-1};
  final String cpString="" + Character.MIN_HIGH_SURROGATE + Character.MAX_LOW_SURROGATE+ Character.MAX_HIGH_SURROGATE+ Character.MIN_LOW_SURROGATE+ Character.MAX_HIGH_SURROGATE+ 'A';
  final int[][] tests={{0,1,0,2},{0,2,0,4},{1,1,2,2},{1,2,2,3},{1,3,2,4},{2,2,4,2},{2,3,0,-1},{4,5,0,-1},{3,-1,0,-1}};
  for (int i=0; i < tests.length; ++i) {
    int[] t=tests[i];
    int s=t[0];
    int c=t[1];
    int rs=t[2];
    int rc=t[3];
    try {
      String str=UnicodeUtil.newString(codePoints,s,c);
      assertFalse(rc == -1);
      assertEquals(cpString.substring(rs,rs + rc),str);
      continue;
    }
 catch (    IndexOutOfBoundsException|IllegalArgumentException e1) {
    }
    assertTrue(rc == -1);
  }
}
