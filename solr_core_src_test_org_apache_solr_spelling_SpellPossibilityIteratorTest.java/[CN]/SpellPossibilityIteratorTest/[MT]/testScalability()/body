{
  Map<Token,LinkedHashMap<String,Integer>> lotsaSuggestions=new LinkedHashMap<Token,LinkedHashMap<String,Integer>>();
  lotsaSuggestions.put(TOKEN_AYE,AYE);
  lotsaSuggestions.put(TOKEN_BEE,BEE);
  lotsaSuggestions.put(TOKEN_CEE,CEE);
  lotsaSuggestions.put(new Token("AYE1",0,3),AYE);
  lotsaSuggestions.put(new Token("BEE1",4,7),BEE);
  lotsaSuggestions.put(new Token("CEE1",8,11),CEE);
  lotsaSuggestions.put(new Token("AYE2",0,3),AYE);
  lotsaSuggestions.put(new Token("BEE2",4,7),BEE);
  lotsaSuggestions.put(new Token("CEE2",8,11),CEE);
  lotsaSuggestions.put(new Token("AYE3",0,3),AYE);
  lotsaSuggestions.put(new Token("BEE3",4,7),BEE);
  lotsaSuggestions.put(new Token("CEE3",8,11),CEE);
  lotsaSuggestions.put(new Token("AYE4",0,3),AYE);
  lotsaSuggestions.put(new Token("BEE4",4,7),BEE);
  lotsaSuggestions.put(new Token("CEE4",8,11),CEE);
  PossibilityIterator iter=new PossibilityIterator(lotsaSuggestions,1000,10000,false);
  int count=0;
  while (iter.hasNext()) {
    PossibilityIterator.RankedSpellPossibility rsp=iter.next();
    count++;
  }
  assertTrue(count == 1000);
  lotsaSuggestions.put(new Token("AYE_BEE1",0,7),AYE_BEE);
  lotsaSuggestions.put(new Token("AYE_BEE2",0,7),AYE_BEE);
  lotsaSuggestions.put(new Token("AYE_BEE3",0,7),AYE_BEE);
  lotsaSuggestions.put(new Token("AYE_BEE4",0,7),AYE_BEE);
  iter=new PossibilityIterator(lotsaSuggestions,1000,10000,true);
  count=0;
  while (iter.hasNext()) {
    PossibilityIterator.RankedSpellPossibility rsp=iter.next();
    count++;
  }
  assertTrue(count < 100);
}
