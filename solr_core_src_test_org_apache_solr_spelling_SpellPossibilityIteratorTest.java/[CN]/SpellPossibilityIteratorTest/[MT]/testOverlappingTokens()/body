{
  Map<Token,LinkedHashMap<String,Integer>> overlappingSuggestions=new LinkedHashMap<>();
  overlappingSuggestions.put(TOKEN_AYE,AYE);
  overlappingSuggestions.put(TOKEN_BEE,BEE);
  overlappingSuggestions.put(TOKEN_AYE_BEE,AYE_BEE);
  overlappingSuggestions.put(TOKEN_CEE,CEE);
  PossibilityIterator iter=new PossibilityIterator(overlappingSuggestions,Integer.MAX_VALUE,Integer.MAX_VALUE,true);
  int aCount=0;
  int abCount=0;
  Set<PossibilityIterator.RankedSpellPossibility> dupChecker=new HashSet<>();
  while (iter.hasNext()) {
    PossibilityIterator.RankedSpellPossibility rsp=iter.next();
    Token a=null;
    Token b=null;
    Token ab=null;
    Token c=null;
    for (    SpellCheckCorrection scc : rsp.corrections) {
      if (scc.getOriginal().equals(TOKEN_AYE)) {
        a=scc.getOriginal();
      }
 else       if (scc.getOriginal().equals(TOKEN_BEE)) {
        b=scc.getOriginal();
      }
 else       if (scc.getOriginal().equals(TOKEN_AYE_BEE)) {
        ab=scc.getOriginal();
      }
 else       if (scc.getOriginal().equals(TOKEN_CEE)) {
        c=scc.getOriginal();
      }
      if (ab != null) {
        abCount++;
      }
 else {
        aCount++;
      }
    }
    assertTrue(c != null);
    assertTrue(ab != null || (a != null && b != null));
    assertTrue(ab == null || (a == null && b == null));
    assertTrue(dupChecker.add(rsp));
  }
  assertTrue(aCount == 2160);
  assertTrue(abCount == 180);
}
