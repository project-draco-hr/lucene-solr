{
  if (subDocUpto != 0) {
    processGroup();
  }
  if (groupOffset >= groupQueue.size()) {
    return null;
  }
  int totalGroupedHitCount=0;
  final FakeScorer fakeScorer=new FakeScorer();
  float maxScore=Float.MIN_VALUE;
  @SuppressWarnings({"unchecked","rawtypes"}) final GroupDocs<Object>[] groups=new GroupDocs[groupQueue.size() - groupOffset];
  for (int downTo=groupQueue.size() - groupOffset - 1; downTo >= 0; downTo--) {
    final OneGroup og=groupQueue.pop();
    final TopDocsCollector<?> collector;
    if (withinGroupSort == null) {
      if (!needsScores) {
        throw new IllegalArgumentException("cannot sort by relevance within group: needsScores=false");
      }
      collector=TopScoreDocCollector.create(maxDocsPerGroup,true);
    }
 else {
      collector=TopFieldCollector.create(withinGroupSort,maxDocsPerGroup,fillSortFields,needsScores,needsScores,true);
    }
    collector.setScorer(fakeScorer);
    collector.setNextReader(og.readerContext);
    for (int docIDX=0; docIDX < og.count; docIDX++) {
      final int doc=og.docs[docIDX];
      fakeScorer.doc=doc;
      if (needsScores) {
        fakeScorer.score=og.scores[docIDX];
      }
      collector.collect(doc);
    }
    totalGroupedHitCount+=og.count;
    final Object[] groupSortValues;
    if (fillSortFields) {
      groupSortValues=new Comparable<?>[comparators.length];
      for (int sortFieldIDX=0; sortFieldIDX < comparators.length; sortFieldIDX++) {
        groupSortValues[sortFieldIDX]=comparators[sortFieldIDX].value(og.comparatorSlot);
      }
    }
 else {
      groupSortValues=null;
    }
    final TopDocs topDocs=collector.topDocs(withinGroupOffset,maxDocsPerGroup);
    groups[downTo]=new GroupDocs<>(Float.NaN,topDocs.getMaxScore(),og.count,topDocs.scoreDocs,null,groupSortValues);
    maxScore=Math.max(maxScore,topDocs.getMaxScore());
  }
  return new TopGroups<>(new TopGroups<>(groupSort.getSort(),withinGroupSort == null ? null : withinGroupSort.getSort(),totalHitCount,totalGroupedHitCount,groups,maxScore),totalGroupCount);
}
