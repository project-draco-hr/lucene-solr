{
  infos.version=input.readLong();
  infos.counter=input.readInt();
  Lucene3xSegmentInfoReader reader=new Lucene3xSegmentInfoReader();
  for (int i=input.readInt(); i > 0; i--) {
    SegmentInfoPerCommit siPerCommit=reader.readSegmentInfo(null,directory,format,input);
    SegmentInfo si=siPerCommit.info;
    if (si.getVersion() == null) {
      Directory dir=directory;
      if (si.getDocStoreOffset() != -1) {
        if (si.getDocStoreIsCompoundFile()) {
          dir=new CompoundFileDirectory(dir,IndexFileNames.segmentFileName(si.getDocStoreSegment(),"",Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION),IOContext.READONCE,false);
        }
      }
 else       if (si.getUseCompoundFile()) {
        dir=new CompoundFileDirectory(dir,IndexFileNames.segmentFileName(si.name,"",IndexFileNames.COMPOUND_FILE_EXTENSION),IOContext.READONCE,false);
      }
      try {
        Lucene3xStoredFieldsReader.checkCodeVersion(dir,si.getDocStoreSegment());
      }
  finally {
        if (dir != directory)         dir.close();
      }
      si.setVersion("3.0");
    }
 else     if (si.getVersion().equals("2.x")) {
      throw new IndexFormatTooOldException("segment " + si.name + " in resource "+ input,si.getVersion());
    }
    infos.add(siPerCommit);
  }
  infos.userData=input.readStringStringMap();
}
