{
  if (!remainingTokens.isEmpty()) {
    return remainingTokens.removeFirst();
  }
  Token t=input.next(in);
  if (t != null && t.termLength() > 0) {
    if (inject) {
      remainingTokens.addLast(t);
    }
    boolean isPhonetic=false;
    String v=new String(t.termBuffer(),0,t.termLength());
    String primaryPhoneticValue=encoder.doubleMetaphone(v);
    if (primaryPhoneticValue.length() > 0) {
      Token token=(Token)t.clone();
      if (inject) {
        token.setPositionIncrement(0);
      }
      token.setType(TOKEN_TYPE);
      token.setTermBuffer(primaryPhoneticValue);
      remainingTokens.addLast(token);
      isPhonetic=true;
    }
    String alternatePhoneticValue=encoder.doubleMetaphone(v,true);
    if (alternatePhoneticValue.length() > 0 && !primaryPhoneticValue.equals(alternatePhoneticValue)) {
      Token token=(Token)t.clone();
      token.setPositionIncrement(0);
      token.setType(TOKEN_TYPE);
      token.setTermBuffer(alternatePhoneticValue);
      remainingTokens.addLast(token);
      isPhonetic=true;
    }
    if (!isPhonetic) {
      t=next(in);
      if (t != null) {
        t.setPositionIncrement(t.getPositionIncrement() + 1);
      }
      return t;
    }
  }
  return remainingTokens.isEmpty() ? null : remainingTokens.removeFirst();
}
