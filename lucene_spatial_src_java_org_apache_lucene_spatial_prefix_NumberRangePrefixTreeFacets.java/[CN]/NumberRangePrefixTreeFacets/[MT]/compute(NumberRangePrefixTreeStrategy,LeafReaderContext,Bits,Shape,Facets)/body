{
  final NumberRangePrefixTree tree=strategy.getGrid();
  final int scanLevel=tree.getMaxLevels();
  new AbstractVisitingPrefixTreeFilter(queryShape,strategy.getFieldName(),tree,facets.detailLevel,scanLevel){
    @Override public DocIdSet getDocIdSet(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      return new VisitorTemplate(context,acceptDocs,!strategy.pointsOnly){
        Facets.FacetParentVal parentFacet;
        @Override protected void start() throws IOException {
        }
        @Override protected DocIdSet finish() throws IOException {
          return null;
        }
        @Override protected boolean visit(        Cell cell) throws IOException {
          if (cell.getLevel() == facets.detailLevel) {
            int count=countDocsAtThisTermInSet(acceptDocs);
            if (count > 0) {
              if (parentFacet.childCounts == null) {
                parentFacet.childCounts=new int[parentFacet.childCountsLen];
              }
              UnitNRShape unitShape=(UnitNRShape)cell.getShape();
              parentFacet.childCounts[unitShape.getValAtLevel(cell.getLevel())]+=count;
            }
            return false;
          }
          parentFacet=null;
          if (cell.getLevel() == facets.detailLevel - 1) {
            if (!hasDocsAtThisTermInSet(acceptDocs)) {
              return false;
            }
            UnitNRShape unitShape=(UnitNRShape)cell.getShape();
            UnitNRShape key=unitShape.clone();
            parentFacet=facets.parents.get(key);
            if (parentFacet == null) {
              parentFacet=new Facets.FacetParentVal();
              parentFacet.childCountsLen=tree.getNumSubCells(unitShape);
              facets.parents.put(key,parentFacet);
            }
          }
          return true;
        }
        @Override protected void visitLeaf(        Cell cell) throws IOException {
          final int levelsToGo=facets.detailLevel - cell.getLevel();
          if (levelsToGo <= 0) {
            return;
          }
          int count=countDocsAtThisTermInSet(acceptDocs);
          if (count == 0) {
            return;
          }
          if (levelsToGo == 1) {
            parentFacet.parentLeaves+=count;
          }
 else {
            facets.topLeaves+=count;
          }
        }
        @Override protected void visitScanned(        Cell cell) throws IOException {
          if (queryShape.relate(cell.getShape()).intersects()) {
            if (cell.isLeaf()) {
              visitLeaf(cell);
            }
 else {
              visit(cell);
            }
          }
        }
        private int countDocsAtThisTermInSet(        Bits actualBaseDocs) throws IOException {
          if (actualBaseDocs == null) {
            return termsEnum.docFreq();
          }
          int count=0;
          docsEnum=termsEnum.docs(actualBaseDocs,docsEnum,DocsEnum.FLAG_NONE);
          while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
            count++;
          }
          return count;
        }
        private boolean hasDocsAtThisTermInSet(        Bits actualBaseDocs) throws IOException {
          if (actualBaseDocs == null) {
            return true;
          }
          docsEnum=termsEnum.docs(actualBaseDocs,docsEnum,DocsEnum.FLAG_NONE);
          return (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
        }
      }
.getDocIdSet();
    }
  }
.getDocIdSet(context,acceptDocs);
  return facets;
}
