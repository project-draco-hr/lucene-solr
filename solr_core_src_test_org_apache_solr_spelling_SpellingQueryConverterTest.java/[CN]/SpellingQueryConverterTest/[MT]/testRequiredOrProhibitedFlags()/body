{
  SpellingQueryConverter converter=new SpellingQueryConverter();
  converter.init(new NamedList());
  converter.setAnalyzer(new WhitespaceAnalyzer());
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa bbb ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 should be optional",!hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));
    assertTrue("token 2 should be optional",!hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));
    assertTrue("token 3 should be optional",!hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("+aaa bbb -ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 should be required",hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));
    assertTrue("token 2 should be optional",!hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));
    assertTrue("token 3 should be prohibited",!hasRequiredFlag(tokens.get(2)) && hasProhibitedFlag(tokens.get(2)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa AND bbb ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 2 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 3 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa OR bbb OR ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 2 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 3 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa AND bbb NOT ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 2 precedes n.b.o.",hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 3 doesn't precede n.b.o.",!hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa NOT bbb AND ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 precedes n.b.o.",hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 2 precedes n.b.o.",hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 3 doesn't precedes n.b.o.",!hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));
  }
{
    List<Token> tokens=new ArrayList<>(converter.convert("aaa AND NOT bbb AND ccc"));
    assertTrue("Should have 3 tokens",tokens != null && tokens.size() == 3);
    assertTrue("token 1 precedes n.b.o.",hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 2 precedes n.b.o.",hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));
    assertTrue("token 3 doesn't precedes n.b.o.",!hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));
  }
}
