{
  SpellingQueryConverter converter=new SpellingQueryConverter();
  converter.init(new NamedList());
  converter.setAnalyzer(new WhitespaceAnalyzer());
  String original="field_with_underscore:value_with_underscore";
  Collection<Token> tokens=converter.convert(original);
  assertTrue("tokens is null and it shouldn't be",tokens != null);
  assertEquals("tokens Size: " + tokens.size() + " is not 1",1,tokens.size());
  assertTrue("Token offsets do not match",isOffsetCorrect(original,tokens));
  original="field_with_digits123:value_with_digits123";
  tokens=converter.convert(original);
  assertTrue("tokens is null and it shouldn't be",tokens != null);
  assertEquals("tokens Size: " + tokens.size() + " is not 1",1,tokens.size());
  assertTrue("Token offsets do not match",isOffsetCorrect(original,tokens));
  original="field-with-hyphens:value-with-hyphens";
  tokens=converter.convert(original);
  assertTrue("tokens is null and it shouldn't be",tokens != null);
  assertEquals("tokens Size: " + tokens.size() + " is not 1",1,tokens.size());
  assertTrue("Token offsets do not match",isOffsetCorrect(original,tokens));
  original="foo:bar^5.0";
  tokens=converter.convert(original);
  assertTrue("tokens is null and it shouldn't be",tokens != null);
  assertEquals("tokens Size: " + tokens.size() + " is not 1",1,tokens.size());
  assertTrue("Token offsets do not match",isOffsetCorrect(original,tokens));
}
