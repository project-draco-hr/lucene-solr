{
  super(toArray(src));
  boolean hasVectors=false;
  boolean hasProx=false;
  boolean hasPayloads=false;
  boolean hasOffsets=false;
  boolean hasFreq=false;
  boolean hasNorms=false;
  boolean hasDocValues=false;
  boolean hasPointValues=false;
  this.filteredNames=new HashSet<>(filterFields);
  this.filtered=new ArrayList<>(filterFields.size());
  for (  FieldInfo fi : src) {
    if (filterFields.contains(fi.name)) {
      this.filtered.add(fi);
      hasVectors|=fi.hasVectors();
      hasProx|=fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
      hasFreq|=fi.getIndexOptions() != IndexOptions.DOCS;
      hasOffsets|=fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
      hasNorms|=fi.hasNorms();
      hasDocValues|=fi.getDocValuesType() != DocValuesType.NONE;
      hasPayloads|=fi.hasPayloads();
      hasPointValues|=(fi.getPointDimensionCount() != 0);
    }
  }
  this.filteredHasVectors=hasVectors;
  this.filteredHasProx=hasProx;
  this.filteredHasPayloads=hasPayloads;
  this.filteredHasOffsets=hasOffsets;
  this.filteredHasFreq=hasFreq;
  this.filteredHasNorms=hasNorms;
  this.filteredHasDocValues=hasDocValues;
  this.filteredHasPointValues=hasPointValues;
}
