{
  final int alphabetSize=_TestUtil.nextInt(random,2,7);
  final int docLen=atLeast(3000);
  final String document=getRandomString('a',alphabetSize,docLen);
  if (VERBOSE) {
    System.out.println("TEST: doc=" + document);
  }
  final int numSyn=atLeast(5);
  final Map<String,OneSyn> synMap=new HashMap<String,OneSyn>();
  final List<OneSyn> syns=new ArrayList<OneSyn>();
  final boolean dedup=random.nextBoolean();
  if (VERBOSE) {
    System.out.println("  dedup=" + dedup);
  }
  b=new SynonymMap.Builder(dedup);
  for (int synIDX=0; synIDX < numSyn; synIDX++) {
    final String synIn=getRandomString('a',alphabetSize,_TestUtil.nextInt(random,1,5)).trim();
    OneSyn s=synMap.get(synIn);
    if (s == null) {
      s=new OneSyn();
      s.in=synIn;
      syns.add(s);
      s.out=new ArrayList<String>();
      synMap.put(synIn,s);
      s.keepOrig=random.nextBoolean();
    }
    final String synOut=getRandomString('0',10,_TestUtil.nextInt(random,1,5)).trim();
    s.out.add(synOut);
    add(synIn,synOut,s.keepOrig);
    if (VERBOSE) {
      System.out.println("  syns[" + synIDX + "] = "+ s.in+ " -> "+ s.out+ " keepOrig="+ s.keepOrig);
    }
  }
  tokensIn=new MockTokenizer(new StringReader("a"),MockTokenizer.WHITESPACE,true);
  tokensIn.reset();
  assertTrue(tokensIn.incrementToken());
  assertFalse(tokensIn.incrementToken());
  tokensIn.end();
  tokensIn.close();
  tokensOut=new SynonymFilter(tokensIn,b.build(),true);
  termAtt=tokensOut.addAttribute(CharTermAttribute.class);
  posIncrAtt=tokensOut.addAttribute(PositionIncrementAttribute.class);
  posLenAtt=tokensOut.addAttribute(PositionLengthAttribute.class);
  offsetAtt=tokensOut.addAttribute(OffsetAttribute.class);
  if (dedup) {
    pruneDups(syns);
  }
  final String expected=slowSynMatcher(document,syns,5);
  if (VERBOSE) {
    System.out.println("TEST: expected=" + expected);
  }
  verify(document,expected);
}
