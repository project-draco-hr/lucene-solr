{
  b=new SynonymMap.Builder(true);
  add("a","foo",true);
  add("a b","bar fee",true);
  add("b c","dog collar",true);
  add("c d","dog harness holder extras",true);
  add("m c e","dog barks loudly",false);
  add("e f","foo bar",false);
  add("e f","baz bee",false);
  add("z","boo",false);
  add("y","bee",true);
  tokensIn=new MockTokenizer(new StringReader("a"),MockTokenizer.WHITESPACE,true);
  tokensIn.reset();
  assertTrue(tokensIn.incrementToken());
  assertFalse(tokensIn.incrementToken());
  tokensIn.end();
  tokensIn.close();
  tokensOut=new SynonymFilter(tokensIn,b.build(),true);
  termAtt=tokensOut.addAttribute(CharTermAttribute.class);
  posIncrAtt=tokensOut.addAttribute(PositionIncrementAttribute.class);
  offsetAtt=tokensOut.addAttribute(OffsetAttribute.class);
  verify("a b c","a/bar b/fee c");
  verify("x a b c d","x a/bar b/fee c/dog d/harness holder extras");
  verify("a b a","a/bar b/fee a/foo");
  verify("c d c d","c/dog d/harness c/holder/dog d/extras/harness holder extras");
  verify("e f","foo/baz bar/bee");
  verify("a m c e x","a/foo dog barks loudly x");
  verify("c d m c e x","c/dog d/harness m/holder/dog c/extras/barks loudly x");
  assertTrue(tokensOut.getCaptureCount() > 0);
  verify("p q r s t","p q r s t");
  assertEquals(0,tokensOut.getCaptureCount());
  verify("p q z y t","p q boo y/bee t");
  assertEquals(0,tokensOut.getCaptureCount());
}
