{
  String collectionName="testCreateShardRepFactor";
  HashMap<String,List<Integer>> collectionInfos=new HashMap<>();
  CloudSolrClient client=null;
  try {
    client=createCloudClient(null);
    Map<String,Object> props=ZkNodeProps.makeMap(REPLICATION_FACTOR,1,MAX_SHARDS_PER_NODE,5,NUM_SLICES,2,"shards","a,b","router.name","implicit");
    createCollection(collectionInfos,collectionName,props,client);
  }
  finally {
    if (client != null)     client.shutdown();
  }
  ZkStateReader zkStateReader=getCommonCloudSolrClient().getZkStateReader();
  waitForRecoveriesToFinish(collectionName,zkStateReader,false);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATESHARD.toString());
  params.set("collection",collectionName);
  params.set("shard","x");
  SolrRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  SolrClient server=createNewSolrClient("",getBaseUrl((HttpSolrClient)clients.get(0)));
  server.request(request);
  server.shutdown();
  waitForRecoveriesToFinish(collectionName,zkStateReader,false);
  int replicaCount=0;
  int attempts=0;
  while (true) {
    if (attempts > 30)     fail("Not enough active replicas in the shard 'x'");
    zkStateReader.updateClusterState(true);
    attempts++;
    replicaCount=zkStateReader.getClusterState().getSlice(collectionName,"x").getReplicas().size();
    if (replicaCount >= 1)     break;
    Thread.sleep(500);
  }
  assertEquals("CREATESHARD API created more than replicationFactor number of replicas",1,replicaCount);
}
