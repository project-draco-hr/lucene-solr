{
  String collectionName="routeFieldColl";
  int numShards=4;
  int replicationFactor=2;
  int maxShardsPerNode=(((numShards * replicationFactor) / getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
  HashMap<String,List<Integer>> collectionInfos=new HashMap<>();
  CloudSolrServer client=null;
  String shard_fld="shard_s";
  try {
    client=createCloudClient(null);
    Map<String,Object> props=ZkNodeProps.makeMap(REPLICATION_FACTOR,replicationFactor,MAX_SHARDS_PER_NODE,maxShardsPerNode,NUM_SLICES,numShards,"router.field",shard_fld);
    createCollection(collectionInfos,collectionName,props,client);
  }
  finally {
    if (client != null)     client.shutdown();
  }
  List<Integer> list=collectionInfos.get(collectionName);
  checkForCollection(collectionName,list,null);
  String url=getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(),collectionName);
  HttpSolrServer collectionClient=new HttpSolrServer(url);
  waitForNon403or404or503(collectionClient);
  collectionClient.shutdown();
  collectionClient=new HttpSolrServer(url);
  collectionClient.add(getDoc(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall",shard_fld,"a"));
  collectionClient.add(getDoc(id,7,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls",shard_fld,"a"));
  collectionClient.add(getDoc(id,8,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled",shard_fld,"a"));
  collectionClient.commit();
  assertEquals(3,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  assertEquals(3,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"a")).getResults().getNumFound());
  collectionClient.deleteByQuery("*:*");
  collectionClient.commit();
  collectionClient.add(getDoc(id,100,shard_fld,"b!doc1"));
  collectionClient.commit();
  assertEquals(1,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"b!")).getResults().getNumFound());
  collectionClient.shutdown();
}
