{
  String COLL_PREFIX="implicitcoll";
  Map<String,List<Integer>> collectionInfos=new HashMap<>();
  int replicationFactor=TestUtil.nextInt(random(),0,3) + 2;
  int cnt=random().nextInt(6) + 1;
  for (int i=0; i < cnt; i++) {
    int numShards=3;
    int maxShardsPerNode=((((numShards + 1) * replicationFactor) / getCommonCloudSolrClient().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
    CloudSolrClient client=null;
    try {
      if (i == 0) {
        client=createCloudClient(null);
      }
 else       if (i == 1) {
        client=createCloudClient(COLL_PREFIX + i);
      }
      Map<String,Object> props=ZkNodeProps.makeMap("router.name",ImplicitDocRouter.NAME,REPLICATION_FACTOR,replicationFactor,MAX_SHARDS_PER_NODE,maxShardsPerNode,SHARDS_PROP,"a,b,c");
      createCollection(collectionInfos,COLL_PREFIX + i,props,client);
    }
  finally {
      if (client != null)       client.shutdown();
    }
  }
  Set<Entry<String,List<Integer>>> collectionInfosEntrySet=collectionInfos.entrySet();
  for (  Entry<String,List<Integer>> entry : collectionInfosEntrySet) {
    String collection=entry.getKey();
    List<Integer> list=entry.getValue();
    checkForCollection(collection,list,null);
    String url=getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(),collection);
    HttpSolrClient collectionClient=new HttpSolrClient(url);
    waitForNon403or404or503(collectionClient);
    collectionClient.shutdown();
  }
  ZkStateReader zkStateReader=getCommonCloudSolrClient().getZkStateReader();
  for (int j=0; j < cnt; j++) {
    waitForRecoveriesToFinish(COLL_PREFIX + j,zkStateReader,false);
  }
  ClusterState clusterState=zkStateReader.getClusterState();
  DocCollection coll=clusterState.getCollection(COLL_PREFIX + 0);
  assertEquals("implicit",((Map)coll.get(ROUTER)).get("name"));
  assertNotNull(coll.getStr(REPLICATION_FACTOR));
  assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));
  assertNull("A shard of a Collection configured with implicit router must have null range",coll.getSlice("a").getRange());
  List<String> collectionNameList=new ArrayList<>();
  collectionNameList.addAll(collectionInfos.keySet());
  log.info("Collections created : " + collectionNameList);
  String collectionName=collectionNameList.get(random().nextInt(collectionNameList.size()));
  String url=getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(),collectionName);
  HttpSolrClient collectionClient=new HttpSolrClient(url);
  collectionClient.add(getDoc(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall",_ROUTE_,"a"));
  collectionClient.add(getDoc(id,7,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls",_ROUTE_,"a"));
  collectionClient.add(getDoc(id,8,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled",_ROUTE_,"a"));
  collectionClient.commit();
  assertEquals(3,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  assertEquals(0,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"b")).getResults().getNumFound());
  assertEquals(3,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"a")).getResults().getNumFound());
  collectionClient.deleteByQuery("*:*");
  collectionClient.commit(true,true);
  assertEquals(0,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  UpdateRequest up=new UpdateRequest();
  up.setParam(_ROUTE_,"c");
  up.setParam("commit","true");
  up.add(getDoc(id,9,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall"));
  up.add(getDoc(id,10,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls"));
  up.add(getDoc(id,11,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled"));
  collectionClient.request(up);
  assertEquals(3,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  assertEquals(0,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"a")).getResults().getNumFound());
  assertEquals(3,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"c")).getResults().getNumFound());
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATESHARD.toString());
  params.set("collection",collectionName);
  params.set("shard","x");
  SolrRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  createNewSolrClient("",getBaseUrl((HttpSolrClient)clients.get(0))).request(request);
  waitForCollection(zkStateReader,collectionName,4);
  int attempts=0;
  while (true) {
    if (attempts > 30)     fail("Not enough active replicas in the shard 'x'");
    attempts++;
    int activeReplicaCount=0;
    for (    Replica x : zkStateReader.getClusterState().getCollection(collectionName).getSlice("x").getReplicas()) {
      if ("active".equals(x.getStr("state")))       activeReplicaCount++;
    }
    Thread.sleep(500);
    if (activeReplicaCount >= replicationFactor)     break;
  }
  log.info(zkStateReader.getClusterState().toString());
  collectionClient.add(getDoc(id,66,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall",_ROUTE_,"x"));
  collectionClient.commit();
  assertEquals(1,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"x")).getResults().getNumFound());
  int numShards=4;
  replicationFactor=TestUtil.nextInt(random(),0,3) + 2;
  int maxShardsPerNode=(((numShards * replicationFactor) / getCommonCloudSolrClient().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
  CloudSolrClient client=null;
  String shard_fld="shard_s";
  try {
    client=createCloudClient(null);
    Map<String,Object> props=ZkNodeProps.makeMap("router.name",ImplicitDocRouter.NAME,REPLICATION_FACTOR,replicationFactor,MAX_SHARDS_PER_NODE,maxShardsPerNode,SHARDS_PROP,"a,b,c,d","router.field",shard_fld);
    collectionName=COLL_PREFIX + "withShardField";
    createCollection(collectionInfos,collectionName,props,client);
  }
  finally {
    if (client != null)     client.shutdown();
  }
  List<Integer> list=collectionInfos.get(collectionName);
  checkForCollection(collectionName,list,null);
  url=getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(),collectionName);
  collectionClient.shutdown();
  collectionClient=new HttpSolrClient(url);
  waitForNon403or404or503(collectionClient);
  collectionClient.shutdown();
  collectionClient=new HttpSolrClient(url);
  collectionClient.add(getDoc(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall",shard_fld,"a"));
  collectionClient.add(getDoc(id,7,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls",shard_fld,"a"));
  collectionClient.add(getDoc(id,8,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled",shard_fld,"a"));
  collectionClient.commit();
  assertEquals(3,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  assertEquals(0,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"b")).getResults().getNumFound());
  assertEquals(3,collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"a")).getResults().getNumFound());
  collectionClient.shutdown();
}
