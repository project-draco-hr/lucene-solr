{
  Reader data=null;
  try {
    final List<Map<String,Object>> rows=new ArrayList<Map<String,Object>>();
    data=dataSource.getData(s);
    if (xslTransformer != null) {
      try {
        SimpleCharArrayReader caw=new SimpleCharArrayReader();
        xslTransformer.transform(new StreamSource(data),new StreamResult(caw));
        data=caw.getReader();
      }
 catch (      TransformerException e) {
        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Exception in applying XSL Transformeation",e);
      }
    }
    final List<Map<String,Object>> solrDocs=new ArrayList<Map<String,Object>>();
    final boolean useSolrAddXml=Boolean.parseBoolean(context.getEntityAttribute(USE_SOLR_ADD_SCHEMA));
    xpathReader.streamRecords(data,new XPathRecordReader.Handler(){
      @SuppressWarnings("unchecked") public void handle(      Map<String,Object> record,      String xpath){
        if (useSolrAddXml) {
          List<String> names=(List<String>)record.get("name");
          List<String> values=(List<String>)record.get("value");
          Map<String,Object> row=new HashMap<String,Object>();
          for (int i=0; i < names.size(); i++) {
            if (row.containsKey(names.get(i))) {
              Object existing=row.get(names.get(i));
              if (existing instanceof List) {
                List list=(List)existing;
                list.add(values.get(i));
              }
 else {
                List list=new ArrayList();
                list.add(existing);
                list.add(values.get(i));
                row.put(names.get(i),list);
              }
            }
 else {
              row.put(names.get(i),values.get(i));
            }
          }
          solrDocs.add(row);
        }
 else {
          record.put(XPATH_FIELD_NAME,xpath);
          rows.add(record);
        }
      }
    }
);
    if (useSolrAddXml) {
      rowIterator=solrDocs.iterator();
    }
 else {
      rowIterator=rows.iterator();
    }
  }
  finally {
    try {
      data.close();
    }
 catch (    Exception e) {
    }
  }
}
