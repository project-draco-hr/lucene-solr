{
  assumeTrue("Requires sparse norms support",codecSupportsSparsity());
  final Random r=random();
  final int N=TestUtil.nextInt(r,2,15);
  final long[] commonValues=new long[N];
  for (int j=0; j < N; ++j) {
    commonValues[j]=TestUtil.nextLong(r,Byte.MIN_VALUE,Byte.MAX_VALUE);
  }
  final int numOtherValues=TestUtil.nextInt(r,2,256 - N);
  final long[] otherValues=new long[numOtherValues];
  for (int j=0; j < numOtherValues; ++j) {
    otherValues[j]=TestUtil.nextLong(r,Byte.MIN_VALUE,Byte.MAX_VALUE);
  }
  doTestNormsVersusDocValues(random().nextDouble(),new LongSupplier(){
    @Override public long getAsLong(){
      return r.nextInt(100) == 0 ? otherValues[r.nextInt(numOtherValues - 1)] : commonValues[r.nextInt(N - 1)];
    }
  }
);
}
