{
  assumeTrue("Requires sparse norms support",codecSupportsSparsity());
  int iterations=atLeast(1);
  final Random r=random();
  for (int i=0; i < iterations; i++) {
    doTestNormsVersusDocValues(random().nextDouble(),new LongProducer(){
      @Override long next(){
        int thingToDo=r.nextInt(3);
switch (thingToDo) {
case 0:
          return Long.MIN_VALUE;
case 1:
        return Long.MAX_VALUE;
default :
      return TestUtil.nextLong(r,Long.MIN_VALUE,Long.MAX_VALUE);
  }
}
}
);
}
}
