{
  assumeTrue("Requires sparse norms support",codecSupportsSparsity());
  final int iterations=atLeast(1);
  final Random r=random();
  for (int i=0; i < iterations; ++i) {
    for (int n=2; n < 16; ++n) {
      final int N=n;
      final long[] commonValues=new long[N];
      for (int j=0; j < N; ++j) {
        commonValues[j]=TestUtil.nextLong(r,Byte.MIN_VALUE,Byte.MAX_VALUE);
      }
      final int numOtherValues=TestUtil.nextInt(r,2,256 - N);
      final long[] otherValues=new long[numOtherValues];
      for (int j=0; j < numOtherValues; ++j) {
        otherValues[j]=TestUtil.nextLong(r,Byte.MIN_VALUE,Byte.MAX_VALUE);
      }
      doTestNormsVersusDocValues(random().nextDouble(),new LongSupplier(){
        @Override public long getAsLong(){
          return r.nextInt(100) == 0 ? otherValues[r.nextInt(numOtherValues - 1)] : commonValues[r.nextInt(N - 1)];
        }
      }
);
    }
  }
}
