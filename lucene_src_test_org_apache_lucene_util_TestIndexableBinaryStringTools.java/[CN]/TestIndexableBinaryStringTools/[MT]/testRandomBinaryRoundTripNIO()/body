{
  Random random=newRandom();
  byte[] binary=new byte[MAX_RANDOM_BINARY_LENGTH];
  ByteBuffer binaryBuf=ByteBuffer.wrap(binary);
  char[] encoded=new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];
  CharBuffer encodedBuf=CharBuffer.wrap(encoded);
  byte[] decoded=new byte[MAX_RANDOM_BINARY_LENGTH];
  ByteBuffer decodedBuf=ByteBuffer.wrap(decoded);
  for (int testNum=0; testNum < NUM_RANDOM_TESTS; ++testNum) {
    int numBytes=random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1;
    binaryBuf.limit(numBytes);
    for (int byteNum=0; byteNum < numBytes; ++byteNum) {
      binary[byteNum]=(byte)random.nextInt(0x100);
    }
    IndexableBinaryStringTools.encode(binaryBuf,encodedBuf);
    IndexableBinaryStringTools.decode(encodedBuf,decodedBuf);
    assertEquals("Test #" + (testNum + 1) + ": Round trip decode/decode returned different results:"+ System.getProperty("line.separator")+ "  original: "+ binaryDumpNIO(binaryBuf)+ System.getProperty("line.separator")+ "encodedBuf: "+ charArrayDumpNIO(encodedBuf)+ System.getProperty("line.separator")+ "decodedBuf: "+ binaryDumpNIO(decodedBuf),binaryBuf,decodedBuf);
  }
}
