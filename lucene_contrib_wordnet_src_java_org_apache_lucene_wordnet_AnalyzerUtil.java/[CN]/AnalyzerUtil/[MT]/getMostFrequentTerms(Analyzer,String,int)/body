{
  if (analyzer == null)   throw new IllegalArgumentException("analyzer must not be null");
  if (text == null)   throw new IllegalArgumentException("text must not be null");
  if (limit <= 0)   limit=Integer.MAX_VALUE;
  HashMap<String,MutableInteger> map=new HashMap<String,MutableInteger>();
  TokenStream stream=analyzer.tokenStream("",new StringReader(text));
  TermAttribute termAtt=stream.addAttribute(TermAttribute.class);
  try {
    while (stream.incrementToken()) {
      MutableInteger freq=map.get(termAtt.term());
      if (freq == null) {
        freq=new MutableInteger(1);
        map.put(termAtt.term(),freq);
      }
 else {
        freq.setValue(freq.intValue() + 1);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      stream.close();
    }
 catch (    IOException e2) {
      throw new RuntimeException(e2);
    }
  }
  Map.Entry<String,MutableInteger>[] entries=new Map.Entry[map.size()];
  map.entrySet().toArray(entries);
  Arrays.sort(entries,new Comparator<Map.Entry<String,MutableInteger>>(){
    public int compare(    Map.Entry<String,MutableInteger> e1,    Map.Entry<String,MutableInteger> e2){
      int f1=e1.getValue().intValue();
      int f2=e2.getValue().intValue();
      if (f2 - f1 != 0)       return f2 - f1;
      String s1=e1.getKey();
      String s2=e2.getKey();
      return s1.compareTo(s2);
    }
  }
);
  int size=Math.min(limit,entries.length);
  String[] pairs=new String[size];
  for (int i=0; i < size; i++) {
    pairs[i]=entries[i].getValue() + ":" + entries[i].getKey();
  }
  return pairs;
}
