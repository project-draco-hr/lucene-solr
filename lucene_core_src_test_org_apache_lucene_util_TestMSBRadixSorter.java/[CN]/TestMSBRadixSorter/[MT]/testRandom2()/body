{
  int letterCount=TestUtil.nextInt(random(),2,10);
  int substringCount=TestUtil.nextInt(random(),2,10);
  Set<BytesRef> substringsSet=new HashSet<>();
  int stringCount=atLeast(10000);
  while (substringsSet.size() < substringCount) {
    int length=TestUtil.nextInt(random(),2,10);
    byte[] bytes=new byte[length];
    for (int i=0; i < length; i++) {
      bytes[i]=(byte)random().nextInt(letterCount);
    }
    BytesRef br=new BytesRef(bytes);
    substringsSet.add(br);
  }
  BytesRef[] substrings=substringsSet.toArray(new BytesRef[substringsSet.size()]);
  double[] chance=new double[substrings.length];
  double sum=0.0;
  for (int i=0; i < substrings.length; i++) {
    chance[i]=random().nextDouble();
    sum+=chance[i];
  }
  double accum=0.0;
  for (int i=0; i < substrings.length; i++) {
    accum+=chance[i] / sum;
    chance[i]=accum;
  }
  Set<BytesRef> stringsSet=new HashSet<>();
  int iters=0;
  while (stringsSet.size() < stringCount && iters < stringCount * 5) {
    int count=TestUtil.nextInt(random(),1,5);
    BytesRefBuilder b=new BytesRefBuilder();
    for (int i=0; i < count; i++) {
      double v=random().nextDouble();
      accum=0.0;
      for (int j=0; j < substrings.length; j++) {
        accum+=chance[j];
        if (accum >= v) {
          b.append(substrings[j]);
          break;
        }
      }
    }
    BytesRef br=b.toBytesRef();
    stringsSet.add(br);
    iters++;
  }
  test(stringsSet.toArray(new BytesRef[stringsSet.size()]),stringsSet.size());
}
