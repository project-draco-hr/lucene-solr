{
  Directory dir=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(5));
  LogByteSizeMergePolicy lmp=new LogByteSizeMergePolicy(writer);
  lmp.setUseCompoundFile(false);
  lmp.setUseCompoundDocStore(false);
  lmp.setMergeFactor(100);
  writer.setMergePolicy(lmp);
  Document doc=new Document();
  doc.add(new Field("content","aaa bbb ccc ddd eee fff ggg hhh iii",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
  for (int i=0; i < 60; i++)   writer.addDocument(doc);
  Document doc2=new Document();
  doc2.add(new Field("content","aaa bbb ccc ddd eee fff ggg hhh iii",Field.Store.YES,Field.Index.NO));
  doc2.add(new Field("content","aaa bbb ccc ddd eee fff ggg hhh iii",Field.Store.YES,Field.Index.NO));
  doc2.add(new Field("content","aaa bbb ccc ddd eee fff ggg hhh iii",Field.Store.YES,Field.Index.NO));
  doc2.add(new Field("content","aaa bbb ccc ddd eee fff ggg hhh iii",Field.Store.YES,Field.Index.NO));
  for (int i=0; i < 10; i++)   writer.addDocument(doc2);
  writer.close();
  Directory dir2=new MockRAMDirectory();
  writer=new IndexWriter(dir2,new IndexWriterConfig(TEST_VERSION_CURRENT).setMergeScheduler(new SerialMergeScheduler()));
  lmp=new LogByteSizeMergePolicy(writer);
  lmp.setMinMergeMB(0.0001);
  lmp.setUseCompoundFile(false);
  lmp.setUseCompoundDocStore(false);
  lmp.setMergeFactor(4);
  writer.setMergePolicy(lmp);
  writer.addIndexesNoOptimize(new Directory[]{dir});
  writer.close();
  dir.close();
  dir2.close();
}
