{
  final CodecProvider cp=CodecProvider.getDefault();
  savedDefaultCodec=CodecProvider.getDefaultCodec();
  String codec=TEST_CODEC;
  final boolean codecHasParam;
  int codecParam=0;
  if (codec.equals("random")) {
    codec=pickRandomCodec(seedRnd);
    codecHasParam=false;
  }
 else {
    Matcher m=codecWithParam.matcher(codec);
    if (m.matches()) {
      codecHasParam=true;
      codec=m.group(1);
      codecParam=Integer.parseInt(m.group(2));
    }
 else {
      codecHasParam=false;
    }
  }
  CodecProvider.setDefaultCodec(codec);
  if (codec.equals("PreFlex")) {
    swapCodec(new PreFlexRWCodec());
  }
  swapCodec(new MockSepCodec());
  swapCodec(new PulsingCodec(codecHasParam && "Pulsing".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd,1,20)));
  swapCodec(new MockFixedIntBlockCodec(codecHasParam && "MockFixedIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd,1,2000)));
  swapCodec(new MockVariableIntBlockCodec(codecHasParam && "MockVariableIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd,1,127)));
  return cp.lookup(codec);
}
