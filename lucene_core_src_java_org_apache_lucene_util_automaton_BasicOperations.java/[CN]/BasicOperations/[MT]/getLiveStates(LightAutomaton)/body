{
  int numStates=a.getNumStates();
  BitSet liveSet=new BitSet(numStates);
  for (  int state : a.getAcceptStates()) {
    liveSet.set(state);
  }
  @SuppressWarnings({"rawtypes","unchecked"}) Set<Integer> map[]=new Set[numStates];
  for (int i=0; i < numStates; i++) {
    map[i]=new HashSet<>();
  }
  LightAutomaton.Transition t=new LightAutomaton.Transition();
  for (int s=0; s < numStates; s++) {
    int numTransitions=a.initTransition(s,t);
    for (int i=0; i < numTransitions; i++) {
      a.getNextTransition(t);
      map[t.dest].add(s);
    }
  }
  LinkedList<Integer> worklist=new LinkedList<>(a.getAcceptStates());
  while (worklist.isEmpty() == false) {
    int s=worklist.removeFirst();
    for (    int p : map[s]) {
      if (liveSet.get(p) == false) {
        liveSet.set(p);
        worklist.add(p);
      }
    }
  }
  return liveSet;
}
