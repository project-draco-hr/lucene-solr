{
  LightAutomaton.Builder builder=new LightAutomaton.Builder();
  Transition t=new Transition();
  int numStates=a.getNumStates();
  for (int s=0; s < numStates; s++) {
    builder.createState();
  }
  for (int s=0; s < numStates; s++) {
    int count=a.initTransition(s,t);
    for (int i=0; i < count; i++) {
      a.getNextTransition(t);
      builder.addTransition(t.dest,s,t.min,t.max);
    }
  }
  LightAutomaton a2=builder.finish();
  LinkedList<Integer> workList=new LinkedList<>();
  BitSet live=new BitSet(numStates);
  for (  int s : a.getAcceptStates()) {
    live.set(s);
    workList.add(s);
  }
  while (workList.isEmpty() == false) {
    int s=workList.removeFirst();
    int count=a2.initTransition(s,t);
    for (int i=0; i < count; i++) {
      a2.getNextTransition(t);
      if (live.get(t.dest) == false) {
        live.set(t.dest);
        workList.add(t.dest);
      }
    }
  }
  return live;
}
