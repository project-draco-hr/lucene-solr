{
  if (row == null)   return null;
  if (transformers == null)   loadTransformers();
  if (transformers == Collections.EMPTY_LIST)   return row;
  Map<String,Object> transformedRow=row;
  List<Map<String,Object>> rows=null;
  boolean stopTransform=checkStopTransform(row);
  VariableResolver resolver=(VariableResolver)context.getVariableResolver();
  for (  Transformer t : transformers) {
    if (stopTransform)     break;
    try {
      if (rows != null) {
        List<Map<String,Object>> tmpRows=new ArrayList<>();
        for (        Map<String,Object> map : rows) {
          resolver.addNamespace(entityName,map);
          Object o=t.transformRow(map,context);
          if (o == null)           continue;
          if (o instanceof Map) {
            Map oMap=(Map)o;
            stopTransform=checkStopTransform(oMap);
            tmpRows.add((Map)o);
          }
 else           if (o instanceof List) {
            tmpRows.addAll((List)o);
          }
 else {
            log.error("Transformer must return Map<String, Object> or a List<Map<String, Object>>");
          }
        }
        rows=tmpRows;
      }
 else {
        resolver.addNamespace(entityName,transformedRow);
        Object o=t.transformRow(transformedRow,context);
        if (o == null)         return null;
        if (o instanceof Map) {
          Map oMap=(Map)o;
          stopTransform=checkStopTransform(oMap);
          transformedRow=(Map)o;
        }
 else         if (o instanceof List) {
          rows=(List)o;
        }
 else {
          log.error("Transformer must return Map<String, Object> or a List<Map<String, Object>>");
        }
      }
    }
 catch (    Exception e) {
      log.warn("transformer threw error",e);
      if (ABORT.equals(onError)) {
        wrapAndThrow(SEVERE,e);
      }
 else       if (SKIP.equals(onError)) {
        wrapAndThrow(DataImportHandlerException.SKIP,e);
      }
    }
  }
  if (rows == null) {
    return transformedRow;
  }
 else {
    rowcache=rows;
    return getFromRowCache();
  }
}
