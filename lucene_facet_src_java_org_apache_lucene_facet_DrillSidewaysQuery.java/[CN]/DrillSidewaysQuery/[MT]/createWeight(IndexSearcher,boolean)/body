{
  final Weight baseWeight=baseQuery.createWeight(searcher,needsScores);
  final Weight[] drillDowns=new Weight[drillDownQueries.length];
  for (int dim=0; dim < drillDownQueries.length; dim++) {
    drillDowns[dim]=searcher.createNormalizedWeight(drillDownQueries[dim],false);
  }
  return new Weight(DrillSidewaysQuery.this){
    @Override public void extractTerms(    Set<Term> terms){
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      return baseWeight.explain(context,doc);
    }
    @Override public float getValueForNormalization() throws IOException {
      return baseWeight.getValueForNormalization();
    }
    @Override public void normalize(    float norm,    float boost){
      baseWeight.normalize(norm,boost);
    }
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public BulkScorer bulkScorer(    LeafReaderContext context) throws IOException {
      Scorer baseScorer=baseWeight.scorer(context);
      DrillSidewaysScorer.DocsAndCost[] dims=new DrillSidewaysScorer.DocsAndCost[drillDowns.length];
      int nullCount=0;
      for (int dim=0; dim < dims.length; dim++) {
        Scorer scorer=drillDowns[dim].scorer(context);
        if (scorer == null) {
          nullCount++;
          scorer=new ConstantScoreScorer(drillDowns[dim],0f,DocIdSetIterator.empty());
        }
        dims[dim]=new DrillSidewaysScorer.DocsAndCost(scorer,drillSidewaysCollectors[dim]);
      }
      if (nullCount > 1) {
        return null;
      }
      Arrays.sort(dims,new Comparator<DrillSidewaysScorer.DocsAndCost>(){
        @Override public int compare(        DocsAndCost o1,        DocsAndCost o2){
          return Long.compare(o1.approximation.cost(),o2.approximation.cost());
        }
      }
);
      if (baseScorer == null) {
        return null;
      }
      return new DrillSidewaysScorer(context,baseScorer,drillDownCollector,dims,scoreSubDocsAtOnce);
    }
  }
;
}
