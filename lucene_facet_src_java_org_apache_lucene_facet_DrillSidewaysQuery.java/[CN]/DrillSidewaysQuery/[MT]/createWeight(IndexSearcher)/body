{
  final Weight baseWeight=baseQuery.createWeight(searcher);
  final Object[] drillDowns=new Object[drillDownQueries.length];
  for (int dim=0; dim < drillDownQueries.length; dim++) {
    Query query=drillDownQueries[dim];
    Filter filter=DrillDownQuery.getFilter(query);
    if (filter != null) {
      drillDowns[dim]=filter;
    }
 else {
      drillDowns[dim]=searcher.rewrite(query).createWeight(searcher);
    }
  }
  return new Weight(){
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      return baseWeight.explain(context,doc);
    }
    @Override public Query getQuery(){
      return baseQuery;
    }
    @Override public float getValueForNormalization() throws IOException {
      return baseWeight.getValueForNormalization();
    }
    @Override public void normalize(    float norm,    float topLevelBoost){
      baseWeight.normalize(norm,topLevelBoost);
    }
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs,    boolean needsScores) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public BulkScorer bulkScorer(    LeafReaderContext context,    Bits acceptDocs,    boolean needsScores) throws IOException {
      Scorer baseScorer=baseWeight.scorer(context,acceptDocs,needsScores);
      DrillSidewaysScorer.DocsAndCost[] dims=new DrillSidewaysScorer.DocsAndCost[drillDowns.length];
      int nullCount=0;
      for (int dim=0; dim < dims.length; dim++) {
        dims[dim]=new DrillSidewaysScorer.DocsAndCost();
        dims[dim].sidewaysCollector=drillSidewaysCollectors[dim];
        if (drillDowns[dim] instanceof Filter) {
          DocIdSet dis=((Filter)drillDowns[dim]).getDocIdSet(context,null);
          if (dis == null) {
            continue;
          }
          Bits bits=dis.bits();
          if (bits != null) {
            dims[dim].bits=bits;
          }
 else {
            DocIdSetIterator disi=dis.iterator();
            if (disi == null) {
              nullCount++;
              continue;
            }
            dims[dim].disi=disi;
          }
        }
 else {
          DocIdSetIterator disi=((Weight)drillDowns[dim]).scorer(context,null,needsScores);
          if (disi == null) {
            nullCount++;
            continue;
          }
          dims[dim].disi=disi;
        }
      }
      if (nullCount > 1) {
        return null;
      }
      Arrays.sort(dims);
      if (baseScorer == null) {
        return null;
      }
      return new DrillSidewaysScorer(context,baseScorer,drillDownCollector,dims,scoreSubDocsAtOnce);
    }
  }
;
}
