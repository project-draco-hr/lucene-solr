{
  State oldState=state;
  state=State.INITIAL;
  Throwable problem=null;
  try {
    if (!testsFailed) {
      assertTrue("ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!",oldState == State.INITIAL || oldState == State.TEARDOWN);
    }
  }
 catch (  Throwable t) {
    if (problem == null)     problem=t;
  }
  if (!"false".equals(TEST_CLEAN_THREADS)) {
    int rogueThreads=threadCleanup("test class");
    if (rogueThreads > 0) {
      System.err.println("RESOURCE LEAK: test class left " + rogueThreads + " thread(s) running");
    }
  }
  String codecDescription=Codec.getDefault().toString();
  Codec.setDefault(savedCodec);
  Locale.setDefault(savedLocale);
  TimeZone.setDefault(savedTimeZone);
  System.clearProperty("solr.solr.home");
  System.clearProperty("solr.data.dir");
  try {
    if (!testsFailed) {
      checkResourcesAfterClass();
    }
  }
 catch (  Throwable t) {
    if (problem == null)     problem=t;
  }
  stores=null;
  try {
    if (!testsFailed) {
      clearTempDirectoriesAfterClass();
    }
  }
 catch (  Throwable t) {
    if (problem == null)     problem=t;
  }
  if (problem != null) {
    reportPartialFailureInfo();
  }
  if (VERBOSE || testsFailed || problem != null) {
    printDebuggingInformation(codecDescription);
  }
  random.setSeed(0L);
  random.initialized=false;
  if (problem != null) {
    throw new RuntimeException(problem);
  }
}
