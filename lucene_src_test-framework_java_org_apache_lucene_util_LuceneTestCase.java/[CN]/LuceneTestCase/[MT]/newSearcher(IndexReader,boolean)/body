{
  if (random.nextBoolean()) {
    if (maybeWrap && rarely()) {
      r=new SlowMultiReaderWrapper(r);
    }
    IndexSearcher ret=random.nextBoolean() ? new AssertingIndexSearcher(random,r) : new AssertingIndexSearcher(random,r.getTopReaderContext());
    ret.setSimilarityProvider(similarityProvider);
    return ret;
  }
 else {
    int threads=0;
    final ExecutorService ex=(random.nextBoolean()) ? null : Executors.newFixedThreadPool(threads=_TestUtil.nextInt(random,1,8),new NamedThreadFactory("LuceneTestCase"));
    if (ex != null) {
      if (VERBOSE) {
        System.out.println("NOTE: newSearcher using ExecutorService with " + threads + " threads");
      }
      final IndexReader r0=r;
      r.addReaderFinishedListener(new ReaderFinishedListener(){
        @Override public void finished(        IndexReader reader){
          if (reader == r0) {
            shutdownExecutorService(ex);
          }
        }
      }
);
    }
    IndexSearcher ret=random.nextBoolean() ? new AssertingIndexSearcher(random,r,ex) : new AssertingIndexSearcher(random,r.getTopReaderContext(),ex);
    ret.setSimilarityProvider(similarityProvider);
    return ret;
  }
}
