{
  int timeout=req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS,-1);
  long startTime=System.nanoTime();
  long endTime=timeout > 0 ? System.nanoTime() + (timeout * 1000 * 1000) : Long.MAX_VALUE;
  SolrCore core=req.getCore();
  while (System.nanoTime() < endTime) {
    managedIndexSchema=getFreshManagedSchema();
    for (    CommandOperation op : operations) {
      OpType opType=OpType.get(op.name);
      if (opType != null) {
        opType.perform(op,this);
      }
 else {
        op.addError("No such operation : " + op.name);
      }
    }
    List errs=CommandOperation.captureErrors(operations);
    if (!errs.isEmpty())     return errs;
    SolrResourceLoader loader=req.getCore().getResourceLoader();
    if (loader instanceof ZkSolrResourceLoader) {
      ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;
      StringWriter sw=new StringWriter();
      try {
        managedIndexSchema.persist(sw);
      }
 catch (      IOException e) {
        log.info("race condition ");
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"unable to serialize schema");
      }
      try {
        ZkController.persistConfigResourceToZooKeeper(zkLoader,managedIndexSchema.getSchemaZkVersion(),managedIndexSchema.getResourceName(),sw.toString().getBytes(StandardCharsets.UTF_8),true);
        return Collections.emptyList();
      }
 catch (      ZkController.ResourceModifiedInZkException e) {
        log.info("Race condition schema modified by another node");
      }
catch (      Exception e) {
        String s="Exception persisting schema";
        log.warn(s,e);
        return singletonList(s + e.getMessage());
      }
    }
 else {
      try {
        managedIndexSchema.persistManagedSchema(false);
        core.setLatestSchema(managedIndexSchema);
        waitForOtherReplicasToUpdate(timeout,startTime);
        return Collections.emptyList();
      }
 catch (      ManagedIndexSchema.SchemaChangedInZkException e) {
        String s="Failed to update schema because schema is modified";
        log.warn(s,e);
      }
catch (      Exception e) {
        String s="Exception persisting schema";
        log.warn(s,e);
        return singletonList(s + e.getMessage());
      }
    }
  }
  return singletonList("Unable to persist schema");
}
