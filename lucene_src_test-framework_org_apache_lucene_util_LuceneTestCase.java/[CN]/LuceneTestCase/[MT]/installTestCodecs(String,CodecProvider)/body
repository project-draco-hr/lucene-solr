{
  savedDefaultCodec=cp.getDefaultFieldCodec();
  final boolean codecHasParam;
  int codecParam=0;
  if (codec.equals("randomPerField")) {
    codec="Standard";
    codecHasParam=false;
  }
 else   if (codec.equals("random")) {
    codec=pickRandomCodec(random);
    codecHasParam=false;
  }
 else {
    Matcher m=codecWithParam.matcher(codec);
    if (m.matches()) {
      codecHasParam=true;
      codec=m.group(1);
      codecParam=Integer.parseInt(m.group(2));
    }
 else {
      codecHasParam=false;
    }
  }
  cp.setDefaultFieldCodec(codec);
  if (codec.equals("PreFlex")) {
    swapCodec(new PreFlexRWCodec(),cp);
  }
  swapCodec(new MockSepCodec(),cp);
  swapCodec(new PulsingCodec(codecHasParam && "Pulsing".equals(codec) ? codecParam : 1 + random.nextInt(20)),cp);
  swapCodec(new MockFixedIntBlockCodec(codecHasParam && "MockFixedIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random,1,2000)),cp);
  swapCodec(new MockVariableIntBlockCodec(codecHasParam && "MockVariableIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random,1,127)),cp);
  swapCodec(new MockRandomCodec(random),cp);
  return cp.lookup(codec);
}
