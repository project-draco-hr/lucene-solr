{
  String tqZNode="/taskqueue/test";
  String requestId="foo";
  String nonExistentRequestId="bar";
  OverseerTaskQueue tq=makeDistributedQueue(tqZNode);
  final Map<String,Object> props=new HashMap<>();
  props.put(CommonParams.NAME,"coll1");
  props.put(OverseerCollectionMessageHandler.COLL_CONF,"myconf");
  props.put(OverseerCollectionMessageHandler.NUM_SLICES,1);
  props.put(ZkStateReader.REPLICATION_FACTOR,3);
  props.put(CommonAdminParams.ASYNC,requestId);
  tq.offer(Utils.toJSON(props));
  assertTrue("Task queue should contain task with requestid " + requestId,tq.containsTaskWithRequestId(CommonAdminParams.ASYNC,requestId));
  assertFalse("Task queue should not contain task with requestid " + nonExistentRequestId,tq.containsTaskWithRequestId(CommonAdminParams.ASYNC,nonExistentRequestId));
  String watchID=tq.createResponseNode();
  String requestId2="baz";
  props.put(CommonAdminParams.ASYNC,requestId2);
  tq.createRequestNode(Utils.toJSON(props),watchID);
  List<OverseerTaskQueue.QueueEvent> queueEvents=tq.peekTopN(2,Collections.emptySet(),1000);
  OverseerTaskQueue.QueueEvent requestId2Event=null;
  for (  OverseerTaskQueue.QueueEvent queueEvent : queueEvents) {
    Map<String,Object> eventProps=(Map<String,Object>)Utils.fromJSON(queueEvent.getBytes());
    if (requestId2.equals(eventProps.get(CommonAdminParams.ASYNC))) {
      requestId2Event=queueEvent;
      break;
    }
  }
  assertNotNull("Didn't find event with requestid " + requestId2,requestId2Event);
  requestId2Event.setBytes(SolrResponse.serializable(new SolrResponseBase()));
  tq.remove(requestId2Event);
  assertTrue("Task queue should contain task with requestid " + requestId,tq.containsTaskWithRequestId(CommonAdminParams.ASYNC,requestId));
}
