{
  return new Values(valsArr(sources,fcontext,readerContext)){
    final int upto=valsArr.length - 1;
    private FunctionValues get(    int doc){
      for (int i=0; i < upto; i++) {
        FunctionValues vals=valsArr[i];
        if (vals.exists(doc)) {
          return vals;
        }
      }
      return valsArr[upto];
    }
    @Override public byte byteVal(    int doc){
      return get(doc).byteVal(doc);
    }
    @Override public short shortVal(    int doc){
      return get(doc).shortVal(doc);
    }
    @Override public float floatVal(    int doc){
      return get(doc).floatVal(doc);
    }
    @Override public int intVal(    int doc){
      return get(doc).intVal(doc);
    }
    @Override public long longVal(    int doc){
      return get(doc).longVal(doc);
    }
    @Override public double doubleVal(    int doc){
      return get(doc).doubleVal(doc);
    }
    @Override public String strVal(    int doc){
      return get(doc).strVal(doc);
    }
    @Override public boolean boolVal(    int doc){
      return get(doc).boolVal(doc);
    }
    @Override public boolean bytesVal(    int doc,    BytesRef target){
      return get(doc).bytesVal(doc,target);
    }
    @Override public Object objectVal(    int doc){
      return get(doc).objectVal(doc);
    }
    @Override public boolean exists(    int doc){
      for (      FunctionValues vals : valsArr) {
        if (vals.exists(doc)) {
          return true;
        }
      }
      return false;
    }
    @Override public ValueFiller getValueFiller(){
      return super.getValueFiller();
    }
  }
;
}
