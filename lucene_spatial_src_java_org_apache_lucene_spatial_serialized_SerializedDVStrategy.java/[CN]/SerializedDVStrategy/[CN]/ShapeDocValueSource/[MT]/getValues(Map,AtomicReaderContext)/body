{
  final BinaryDocValues docValues=readerContext.reader().getBinaryDocValues(fieldName);
  return new FunctionValues(){
    int bytesRefDoc=-1;
    BytesRef bytesRef=new BytesRef();
    boolean fillBytes(    int doc){
      if (bytesRefDoc != doc) {
        bytesRef.copyBytes(docValues.get(doc));
        bytesRefDoc=doc;
      }
      return bytesRef.length != 0;
    }
    @Override public boolean exists(    int doc){
      return fillBytes(doc);
    }
    @Override public boolean bytesVal(    int doc,    BytesRef target){
      if (fillBytes(doc)) {
        target.bytes=bytesRef.bytes;
        target.offset=bytesRef.offset;
        target.length=bytesRef.length;
        return true;
      }
 else {
        target.length=0;
        return false;
      }
    }
    @Override public Object objectVal(    int docId){
      if (!fillBytes(docId))       return null;
      DataInputStream dataInput=new DataInputStream(new ByteArrayInputStream(bytesRef.bytes,bytesRef.offset,bytesRef.length));
      try {
        return binaryCodec.readShape(dataInput);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public Explanation explain(    int doc){
      return new Explanation(Float.NaN,toString(doc));
    }
    @Override public String toString(    int doc){
      return description() + "=" + objectVal(doc);
    }
  }
;
}
