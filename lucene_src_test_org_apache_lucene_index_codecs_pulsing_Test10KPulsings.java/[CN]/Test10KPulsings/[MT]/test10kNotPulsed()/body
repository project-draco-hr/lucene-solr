{
  int freqCutoff=_TestUtil.nextInt(random,1,10);
  Codec cp=_TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(freqCutoff));
  File f=_TestUtil.getTempDir("10knotpulsed");
  MockDirectoryWrapper dir=newFSDirectory(f);
  dir.setCheckIndexOnClose(false);
  RandomIndexWriter iw=new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setCodec(cp));
  Document document=new Document();
  FieldType ft=new FieldType(TextField.TYPE_STORED);
switch (_TestUtil.nextInt(random,0,2)) {
case 0:
    ft.setIndexOptions(IndexOptions.DOCS_ONLY);
  break;
case 1:
ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);
break;
default :
ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
break;
}
Field field=newField("field","",ft);
document.add(field);
NumberFormat df=new DecimalFormat("00000",new DecimalFormatSymbols(Locale.ENGLISH));
final int freq=freqCutoff + 1;
for (int i=0; i < 10050; i++) {
StringBuilder sb=new StringBuilder();
for (int j=0; j < freq; j++) {
sb.append(df.format(i));
sb.append(' ');
}
field.setValue(sb.toString());
iw.addDocument(document);
}
IndexReader ir=iw.getReader();
iw.close();
TermsEnum te=MultiFields.getTerms(ir,"field").iterator();
DocsEnum de=null;
for (int i=0; i < 10050; i++) {
String expected=df.format(i);
assertEquals(expected,te.next().utf8ToString());
de=te.docs(null,de);
assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
assertEquals(DocIdSetIterator.NO_MORE_DOCS,de.nextDoc());
}
ir.close();
_TestUtil.checkIndex(dir);
dir.close();
}
