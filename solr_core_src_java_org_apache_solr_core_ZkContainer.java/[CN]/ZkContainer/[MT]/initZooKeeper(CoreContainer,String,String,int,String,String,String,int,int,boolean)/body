{
  ZkController zkController=null;
  String zookeeperHost;
  if (zkHost == null) {
    zookeeperHost=System.getProperty("zkHost");
  }
 else {
    zookeeperHost=zkHost;
  }
  String zkRun=System.getProperty("zkRun");
  if (zkRun == null && zookeeperHost == null)   return;
  if (null == solrHostPort) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"'hostPort' must be configured to run SolrCloud");
  }
  if (null == hostContext) {
    throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"'hostContext' must be configured to run SolrCloud");
  }
  System.setProperty("zookeeper.jmx.log4j.disable","true");
  if (zkRun != null) {
    String zkDataHome=System.getProperty("zkServerDataDir",solrHome + "zoo_data");
    String zkConfHome=System.getProperty("zkServerConfDir",solrHome);
    zkServer=new SolrZkServer(stripChroot(zkRun),stripChroot(zookeeperHost),zkDataHome,zkConfHome,solrHostPort);
    zkServer.parseConfig();
    zkServer.start();
    if (zookeeperHost == null) {
      zookeeperHost=zkServer.getClientString();
    }
  }
  int zkClientConnectTimeout=30000;
  if (zookeeperHost != null) {
    try {
      if (zkRun != null && zkServer.getServers().size() > 1) {
        zkClientConnectTimeout=24 * 60 * 60* 1000;
        log.info("Zookeeper client=" + zookeeperHost + "  Waiting for a quorum.");
      }
 else {
        log.info("Zookeeper client=" + zookeeperHost);
      }
      String confDir=System.getProperty("bootstrap_confdir");
      boolean boostrapConf=Boolean.getBoolean("bootstrap_conf");
      if (!ZkController.checkChrootPath(zookeeperHost,(confDir != null) || boostrapConf || zkRunOnly)) {
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"A chroot was specified in ZkHost but the znode doesn't exist. " + zookeeperHost);
      }
      zkController=new ZkController(cc,zookeeperHost,zkClientTimeout,zkClientConnectTimeout,host,solrHostPort,hostContext,leaderVoteWait,leaderConflictResolveWait,genericCoreNodeNames,new CurrentCoreDescriptorProvider(){
        @Override public List<CoreDescriptor> getCurrentDescriptors(){
          List<CoreDescriptor> descriptors=new ArrayList<>(cc.getCoreNames().size());
          Collection<SolrCore> cores=cc.getCores();
          for (          SolrCore core : cores) {
            descriptors.add(core.getCoreDescriptor());
          }
          return descriptors;
        }
      }
);
      if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {
        Thread.sleep(10000);
      }
      if (confDir != null) {
        Path configPath=Paths.get(confDir);
        if (!Files.isDirectory(configPath))         throw new IllegalArgumentException("bootstrap_confdir must be a directory of configuration files");
        String confName=System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP,"configuration1");
        ZkConfigManager configManager=new ZkConfigManager(zkController.getZkClient());
        configManager.uploadConfigDir(configPath,confName);
      }
      if (boostrapConf) {
        ZkController.bootstrapConf(zkController.getZkClient(),cc,solrHome);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      log.error("",e);
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
catch (    TimeoutException e) {
      log.error("Could not connect to ZooKeeper",e);
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
catch (    IOException|KeeperException e) {
      log.error("",e);
      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
    }
  }
  this.zkController=zkController;
}
