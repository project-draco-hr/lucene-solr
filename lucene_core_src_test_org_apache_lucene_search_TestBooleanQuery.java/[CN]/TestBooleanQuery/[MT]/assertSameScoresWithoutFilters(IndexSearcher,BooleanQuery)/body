{
  final BooleanQuery.Builder bq2Builder=new BooleanQuery.Builder();
  for (  BooleanClause c : bq) {
    if (c.getOccur() != Occur.FILTER) {
      bq2Builder.add(c);
    }
  }
  bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());
  BooleanQuery bq2=bq2Builder.build();
  final AtomicBoolean matched=new AtomicBoolean();
  searcher.search(bq,new SimpleCollector(){
    int docBase;
    Scorer scorer;
    @Override protected void doSetNextReader(    LeafReaderContext context) throws IOException {
      super.doSetNextReader(context);
      docBase=context.docBase;
    }
    @Override public boolean needsScores(){
      return true;
    }
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      final float actualScore=scorer.score();
      final float expectedScore=searcher.explain(bq2,docBase + doc).getValue();
      assertEquals(expectedScore,actualScore,10e-5);
      matched.set(true);
    }
  }
);
  assertTrue(matched.get());
}
