{
  TermQuery[] queries=new TermQuery[]{new TermQuery(new Term("foo","bar")),new TermQuery(new Term("foo","baz"))};
  for (int iter=0; iter < 10; ++iter) {
    List<BooleanClause> clauses=new ArrayList<>();
    final int numClauses=random().nextInt(20);
    for (int i=0; i < numClauses; ++i) {
      Query query=RandomPicks.randomFrom(random(),queries);
      if (random().nextBoolean()) {
        query=new BoostQuery(query,random().nextFloat());
      }
      Occur occur=RandomPicks.randomFrom(random(),Occur.values());
      clauses.add(new BooleanClause(query,occur));
    }
    final int minShouldMatch=random().nextInt(5);
    BooleanQuery.Builder bq1Builder=new BooleanQuery.Builder();
    bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);
    for (    BooleanClause clause : clauses) {
      bq1Builder.add(clause);
    }
    final BooleanQuery bq1=bq1Builder.build();
    Collections.shuffle(clauses,random());
    BooleanQuery.Builder bq2Builder=new BooleanQuery.Builder();
    bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);
    for (    BooleanClause clause : clauses) {
      bq2Builder.add(clause);
    }
    final BooleanQuery bq2=bq2Builder.build();
    QueryUtils.checkEqual(bq1,bq2);
  }
}
