{
  String segFileName=IndexFileNames.segmentFileName(si.name,"",SimpleTextSegmentInfoFormat.SI_EXTENSION);
  try (IndexOutput output=dir.createOutput(segFileName,ioContext)){
    si.addFile(segFileName);
    BytesRefBuilder scratch=new BytesRefBuilder();
    SimpleTextUtil.write(output,SI_VERSION);
    SimpleTextUtil.write(output,si.getVersion().toString(),scratch);
    SimpleTextUtil.writeNewline(output);
    SimpleTextUtil.write(output,SI_DOCCOUNT);
    SimpleTextUtil.write(output,Integer.toString(si.maxDoc()),scratch);
    SimpleTextUtil.writeNewline(output);
    SimpleTextUtil.write(output,SI_USECOMPOUND);
    SimpleTextUtil.write(output,Boolean.toString(si.getUseCompoundFile()),scratch);
    SimpleTextUtil.writeNewline(output);
    Map<String,String> diagnostics=si.getDiagnostics();
    int numDiagnostics=diagnostics == null ? 0 : diagnostics.size();
    SimpleTextUtil.write(output,SI_NUM_DIAG);
    SimpleTextUtil.write(output,Integer.toString(numDiagnostics),scratch);
    SimpleTextUtil.writeNewline(output);
    if (numDiagnostics > 0) {
      for (      Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {
        SimpleTextUtil.write(output,SI_DIAG_KEY);
        SimpleTextUtil.write(output,diagEntry.getKey(),scratch);
        SimpleTextUtil.writeNewline(output);
        SimpleTextUtil.write(output,SI_DIAG_VALUE);
        SimpleTextUtil.write(output,diagEntry.getValue(),scratch);
        SimpleTextUtil.writeNewline(output);
      }
    }
    Map<String,String> attributes=si.getAttributes();
    SimpleTextUtil.write(output,SI_NUM_ATT);
    SimpleTextUtil.write(output,Integer.toString(attributes.size()),scratch);
    SimpleTextUtil.writeNewline(output);
    for (    Map.Entry<String,String> attEntry : attributes.entrySet()) {
      SimpleTextUtil.write(output,SI_ATT_KEY);
      SimpleTextUtil.write(output,attEntry.getKey(),scratch);
      SimpleTextUtil.writeNewline(output);
      SimpleTextUtil.write(output,SI_ATT_VALUE);
      SimpleTextUtil.write(output,attEntry.getValue(),scratch);
      SimpleTextUtil.writeNewline(output);
    }
    Set<String> files=si.files();
    int numFiles=files == null ? 0 : files.size();
    SimpleTextUtil.write(output,SI_NUM_FILES);
    SimpleTextUtil.write(output,Integer.toString(numFiles),scratch);
    SimpleTextUtil.writeNewline(output);
    if (numFiles > 0) {
      for (      String fileName : files) {
        SimpleTextUtil.write(output,SI_FILE);
        SimpleTextUtil.write(output,fileName,scratch);
        SimpleTextUtil.writeNewline(output);
      }
    }
    SimpleTextUtil.write(output,SI_ID);
    SimpleTextUtil.write(output,new BytesRef(si.getId()));
    SimpleTextUtil.writeNewline(output);
    Sort indexSort=si.getIndexSort();
    SimpleTextUtil.write(output,SI_SORT);
    final int numSortFields=indexSort == null ? 0 : indexSort.getSort().length;
    SimpleTextUtil.write(output,Integer.toString(numSortFields),scratch);
    SimpleTextUtil.writeNewline(output);
    for (int i=0; i < numSortFields; ++i) {
      final SortField sortField=indexSort.getSort()[i];
      SimpleTextUtil.write(output,SI_SORT_FIELD);
      SimpleTextUtil.write(output,sortField.getField(),scratch);
      SimpleTextUtil.writeNewline(output);
      SimpleTextUtil.write(output,SI_SORT_TYPE);
      final String sortType;
switch (sortField.getType()) {
case STRING:
        sortType="string";
      break;
case LONG:
    sortType="long";
  break;
case INT:
sortType="int";
break;
case DOUBLE:
sortType="double";
break;
case FLOAT:
sortType="float";
break;
default :
throw new IllegalStateException("Unexpected sort type: " + sortField.getType());
}
SimpleTextUtil.write(output,sortType,scratch);
SimpleTextUtil.writeNewline(output);
SimpleTextUtil.write(output,SI_SORT_REVERSE);
SimpleTextUtil.write(output,Boolean.toString(sortField.getReverse()),scratch);
SimpleTextUtil.writeNewline(output);
SimpleTextUtil.write(output,SI_SORT_MISSING);
final Object missingValue=sortField.getMissingValue();
final String missing;
if (missingValue == null) {
missing="null";
}
 else if (missingValue == SortField.STRING_FIRST) {
missing="first";
}
 else if (missingValue == SortField.STRING_LAST) {
missing="last";
}
 else {
missing=missingValue.toString();
}
SimpleTextUtil.write(output,missing,scratch);
SimpleTextUtil.writeNewline(output);
}
SimpleTextUtil.writeChecksum(output,scratch);
}
 }
