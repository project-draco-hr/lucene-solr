{
  boolean ordered=true;
  int slop=1;
  final Similarity sim=new DefaultSimilarity(){
    @Override public float sloppyFreq(    int distance){
      return 0.0f;
    }
  }
;
  final Similarity oldSim=searcher.getSimilarity();
  Scorer spanScorer;
  try {
    searcher.setSimilarity(sim);
    SpanNearQuery snq=new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery("t1"),makeSpanTermQuery("t2")},slop,ordered);
    spanScorer=snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())),ScorerContext.def());
  }
  finally {
    searcher.setSimilarity(oldSim);
  }
  assertTrue("first doc",spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertEquals("first doc number",spanScorer.docID(),11);
  float score=spanScorer.score();
  assertTrue("first doc score should be zero, " + score,score == 0.0f);
  assertTrue("no second doc",spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);
}
