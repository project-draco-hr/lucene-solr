{
  SpanNearQuery snq;
  snq=new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery("u1"),makeSpanTermQuery("u2")},0,false);
  Spans spans=snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",4,spans.doc());
  assertEquals("start",1,spans.start());
  assertEquals("end",3,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",5,spans.doc());
  assertEquals("start",2,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",8,spans.doc());
  assertEquals("start",2,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",9,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",2,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",10,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",2,spans.end());
  assertTrue("Has next and it shouldn't: " + spans.doc(),spans.next() == false);
  SpanNearQuery u1u2=new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery("u1"),makeSpanTermQuery("u2")},0,false);
  snq=new SpanNearQuery(new SpanQuery[]{u1u2,makeSpanTermQuery("u2")},1,false);
  spans=snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",4,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",3,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",4,spans.doc());
  assertEquals("start",1,spans.start());
  assertEquals("end",3,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",5,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",5,spans.doc());
  assertEquals("start",2,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",8,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",8,spans.doc());
  assertEquals("start",2,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",9,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",2,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",9,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",4,spans.end());
  assertTrue("Does not have next and it should",spans.next());
  assertEquals("doc",10,spans.doc());
  assertEquals("start",0,spans.start());
  assertEquals("end",2,spans.end());
  assertTrue("Has next and it shouldn't",spans.next() == false);
}
