{
  MockRAMDirectory indexStore=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(indexStore,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()));
  add("blueberry pie",writer);
  add("blueberry strudel",writer);
  add("blueberry pizza",writer);
  add("blueberry chewing gum",writer);
  add("bluebird pizza",writer);
  add("bluebird foobar pizza",writer);
  add("piccadilly circus",writer);
  writer.optimize();
  writer.close();
  IndexSearcher searcher=new IndexSearcher(indexStore,true);
  MultiPhraseQuery query1=new MultiPhraseQuery();
  MultiPhraseQuery query2=new MultiPhraseQuery();
  query1.add(new Term("body","blueberry"));
  query2.add(new Term("body","strawberry"));
  LinkedList<Term> termsWithPrefix=new LinkedList<Term>();
  IndexReader ir=IndexReader.open(indexStore,true);
  String prefix="pi";
  TermsEnum te=MultiFields.getFields(ir).terms("body").iterator();
  te.seek(new BytesRef(prefix));
  do {
    String s=te.term().utf8ToString();
    if (s.startsWith(prefix)) {
      termsWithPrefix.add(new Term("body",s));
    }
 else {
      break;
    }
  }
 while (te.next() != null);
  query1.add(termsWithPrefix.toArray(new Term[0]));
  assertEquals("body:\"blueberry (piccadilly pie pizza)\"",query1.toString());
  query2.add(termsWithPrefix.toArray(new Term[0]));
  assertEquals("body:\"strawberry (piccadilly pie pizza)\"",query2.toString());
  ScoreDoc[] result;
  result=searcher.search(query1,null,1000).scoreDocs;
  assertEquals(2,result.length);
  result=searcher.search(query2,null,1000).scoreDocs;
  assertEquals(0,result.length);
  MultiPhraseQuery query3=new MultiPhraseQuery();
  termsWithPrefix.clear();
  prefix="blue";
  te.seek(new BytesRef(prefix));
  do {
    if (te.term().utf8ToString().startsWith(prefix)) {
      termsWithPrefix.add(new Term("body",te.term().utf8ToString()));
    }
  }
 while (te.next() != null);
  ir.close();
  query3.add(termsWithPrefix.toArray(new Term[0]));
  query3.add(new Term("body","pizza"));
  result=searcher.search(query3,null,1000).scoreDocs;
  assertEquals(2,result.length);
  assertEquals("body:\"(blueberry bluebird) pizza\"",query3.toString());
  query3.setSlop(1);
  result=searcher.search(query3,null,1000).scoreDocs;
  searcher.explain(query3,0);
  assertEquals(3,result.length);
  MultiPhraseQuery query4=new MultiPhraseQuery();
  try {
    query4.add(new Term("field1","foo"));
    query4.add(new Term("field2","foobar"));
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  searcher.close();
  indexStore.close();
}
