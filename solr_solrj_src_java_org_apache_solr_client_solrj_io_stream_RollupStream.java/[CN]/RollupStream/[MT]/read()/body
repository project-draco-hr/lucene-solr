{
  while (true) {
    Tuple tuple=tupleStream.read();
    if (tuple.EOF) {
      if (!finished) {
        Map map=new HashMap();
        for (        Metric metric : currentMetrics) {
          map.put(metric.getName(),metric.getValue());
        }
        for (int i=0; i < buckets.length; i++) {
          map.put(buckets[i].toString(),currentKey.getParts()[i].toString());
        }
        Tuple t=new Tuple(map);
        tupleStream.pushBack(tuple);
        finished=true;
        return t;
      }
 else {
        return tuple;
      }
    }
    String[] bucketValues=new String[buckets.length];
    for (int i=0; i < buckets.length; i++) {
      bucketValues[i]=buckets[i].getBucketValue(tuple);
    }
    HashKey hashKey=new HashKey(bucketValues);
    if (hashKey.equals(currentKey)) {
      for (      Metric bucketMetric : currentMetrics) {
        bucketMetric.update(tuple);
      }
    }
 else {
      Tuple t=null;
      if (currentMetrics != null) {
        Map map=new HashMap();
        for (        Metric metric : currentMetrics) {
          map.put(metric.getName(),metric.getValue());
        }
        for (int i=0; i < buckets.length; i++) {
          map.put(buckets[i].toString(),currentKey.getParts()[i].toString());
        }
        t=new Tuple(map);
      }
      currentMetrics=new Metric[metrics.length];
      currentKey=hashKey;
      for (int i=0; i < metrics.length; i++) {
        Metric bucketMetric=metrics[i].newInstance();
        bucketMetric.update(tuple);
        currentMetrics[i]=bucketMetric;
      }
      if (t != null) {
        return t;
      }
    }
  }
}
