{
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  List<StreamExpression> metricExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,Metric.class);
  StreamExpressionNamedParameter overExpression=factory.getNamedOperand(expression,"over");
  if (expression.getParameters().size() != streamExpressions.size() + metricExpressions.size() + 1) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found",expression));
  }
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression,streamExpressions.size()));
  }
  if (0 == metricExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting at least 1 metric but found %d",expression,metricExpressions.size()));
  }
  if (null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'over' parameter listing fields to rollup by but didn't find one",expression));
  }
  Metric[] metrics=new Metric[metricExpressions.size()];
  for (int idx=0; idx < metricExpressions.size(); ++idx) {
    metrics[idx]=factory.constructMetric(metricExpressions.get(idx));
  }
  StreamEqualitor streamEqualitor=factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(),FieldEqualitor.class);
  List<FieldEqualitor> flattenedEqualitors=flattenEqualitor(streamEqualitor);
  Bucket[] buckets=new Bucket[flattenedEqualitors.size()];
  for (int idx=0; idx < flattenedEqualitors.size(); ++idx) {
    buckets[idx]=new Bucket(flattenedEqualitors.get(idx).getLeftFieldName());
  }
  init(factory.constructStream(streamExpressions.get(0)),buckets,metrics);
}
