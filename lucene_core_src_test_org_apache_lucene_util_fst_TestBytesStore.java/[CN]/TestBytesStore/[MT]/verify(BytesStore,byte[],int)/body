{
  assertEquals(totalLength,bytes.getPosition());
  if (totalLength == 0) {
    return;
  }
  if (VERBOSE) {
    System.out.println("  verify...");
  }
  byte[] actual=new byte[totalLength];
  if (random().nextBoolean()) {
    if (VERBOSE) {
      System.out.println("    bulk: reversed");
    }
    FST.BytesReader r=bytes.getReverseReader();
    assertTrue(r.reversed());
    r.setPosition(totalLength - 1);
    r.readBytes(actual,0,actual.length);
    int start=0;
    int end=totalLength - 1;
    while (start < end) {
      byte b=actual[start];
      actual[start]=actual[end];
      actual[end]=b;
      start++;
      end--;
    }
  }
 else {
    if (VERBOSE) {
      System.out.println("    bulk: forward");
    }
    FST.BytesReader r=bytes.getForwardReader();
    assertFalse(r.reversed());
    r.readBytes(actual,0,actual.length);
  }
  for (int i=0; i < totalLength; i++) {
    assertEquals("byte @ index=" + i,expected[i],actual[i]);
  }
  FST.BytesReader r;
  boolean reversed=random().nextBoolean();
  if (reversed) {
    if (VERBOSE) {
      System.out.println("    ops: reversed");
    }
    r=bytes.getReverseReader();
  }
 else {
    if (VERBOSE) {
      System.out.println("    ops: forward");
    }
    r=bytes.getForwardReader();
  }
  if (totalLength > 1) {
    int numOps=_TestUtil.nextInt(random(),100,200);
    for (int op=0; op < numOps; op++) {
      int numBytes=random().nextInt(Math.min(1000,totalLength - 1));
      int pos;
      if (reversed) {
        pos=_TestUtil.nextInt(random(),numBytes,totalLength - 1);
      }
 else {
        pos=random().nextInt(totalLength - numBytes);
      }
      if (VERBOSE) {
        System.out.println("    op iter=" + op + " reversed="+ reversed+ " numBytes="+ numBytes+ " pos="+ pos);
      }
      byte[] temp=new byte[numBytes];
      r.setPosition(pos);
      assertEquals(pos,r.getPosition());
      r.readBytes(temp,0,temp.length);
      for (int i=0; i < numBytes; i++) {
        byte expectedByte;
        if (reversed) {
          expectedByte=expected[pos - i];
        }
 else {
          expectedByte=expected[pos + i];
        }
        assertEquals("byte @ index=" + i,expectedByte,temp[i]);
      }
      int left;
      int expectedPos;
      if (reversed) {
        expectedPos=pos - numBytes;
        left=(int)r.getPosition();
      }
 else {
        expectedPos=pos + numBytes;
        left=(int)(totalLength - r.getPosition());
      }
      assertEquals(expectedPos,r.getPosition());
      if (left > 4) {
        int skipBytes=random().nextInt(left - 4);
        int expectedInt=0;
        if (reversed) {
          expectedPos-=skipBytes;
          expectedInt|=(expected[expectedPos--] & 0xFF) << 24;
          expectedInt|=(expected[expectedPos--] & 0xFF) << 16;
          expectedInt|=(expected[expectedPos--] & 0xFF) << 8;
          expectedInt|=(expected[expectedPos--] & 0xFF);
        }
 else {
          expectedPos+=skipBytes;
          expectedInt|=(expected[expectedPos++] & 0xFF) << 24;
          expectedInt|=(expected[expectedPos++] & 0xFF) << 16;
          expectedInt|=(expected[expectedPos++] & 0xFF) << 8;
          expectedInt|=(expected[expectedPos++] & 0xFF);
        }
        if (VERBOSE) {
          System.out.println("    skip numBytes=" + skipBytes);
          System.out.println("    readInt");
        }
        r.skipBytes(skipBytes);
        assertEquals(expectedInt,r.readInt());
      }
    }
  }
}
