{
  final int iters=atLeast(10);
  final int maxBytes=TEST_NIGHTLY ? 200000 : 20000;
  for (int iter=0; iter < iters; iter++) {
    final int numBytes=TestUtil.nextInt(random(),1,maxBytes);
    final byte[] expected=new byte[numBytes];
    final int blockBits=TestUtil.nextInt(random(),8,15);
    final BytesStore bytes=new BytesStore(blockBits);
    if (VERBOSE) {
      System.out.println("TEST: iter=" + iter + " numBytes="+ numBytes+ " blockBits="+ blockBits);
    }
    int pos=0;
    while (pos < numBytes) {
      int op=random().nextInt(8);
      if (VERBOSE) {
        System.out.println("  cycle pos=" + pos);
      }
switch (op) {
case 0:
{
          byte b=(byte)random().nextInt(256);
          if (VERBOSE) {
            System.out.println("    writeByte b=" + b);
          }
          expected[pos++]=b;
          bytes.writeByte(b);
        }
      break;
case 1:
{
      int len=random().nextInt(Math.min(numBytes - pos,100));
      byte[] temp=new byte[len];
      random().nextBytes(temp);
      if (VERBOSE) {
        System.out.println("    writeBytes len=" + len + " bytes="+ Arrays.toString(temp));
      }
      System.arraycopy(temp,0,expected,pos,temp.length);
      bytes.writeBytes(temp,0,temp.length);
      pos+=len;
    }
  break;
case 2:
{
  if (pos > 4) {
    int x=random().nextInt();
    int randomPos=random().nextInt(pos - 4);
    if (VERBOSE) {
      System.out.println("    abs writeInt pos=" + randomPos + " x="+ x);
    }
    bytes.writeInt(randomPos,x);
    expected[randomPos++]=(byte)(x >> 24);
    expected[randomPos++]=(byte)(x >> 16);
    expected[randomPos++]=(byte)(x >> 8);
    expected[randomPos++]=(byte)x;
  }
}
break;
case 3:
{
if (pos > 1) {
int len=TestUtil.nextInt(random(),2,Math.min(100,pos));
int start;
if (len == pos) {
  start=0;
}
 else {
  start=random().nextInt(pos - len);
}
int end=start + len - 1;
if (VERBOSE) {
  System.out.println("    reverse start=" + start + " end="+ end+ " len="+ len+ " pos="+ pos);
}
bytes.reverse(start,end);
while (start <= end) {
  byte b=expected[end];
  expected[end]=expected[start];
  expected[start]=b;
  start++;
  end--;
}
}
}
break;
case 4:
{
if (pos > 2) {
int randomPos=random().nextInt(pos - 1);
int len=TestUtil.nextInt(random(),1,Math.min(pos - randomPos - 1,100));
byte[] temp=new byte[len];
random().nextBytes(temp);
if (VERBOSE) {
System.out.println("    abs writeBytes pos=" + randomPos + " len="+ len+ " bytes="+ Arrays.toString(temp));
}
System.arraycopy(temp,0,expected,randomPos,temp.length);
bytes.writeBytes(randomPos,temp,0,temp.length);
}
}
break;
case 5:
{
if (pos > 1) {
int src=random().nextInt(pos - 1);
int dest=TestUtil.nextInt(random(),src + 1,pos - 1);
int len=TestUtil.nextInt(random(),1,Math.min(300,pos - dest));
if (VERBOSE) {
System.out.println("    copyBytes src=" + src + " dest="+ dest+ " len="+ len);
}
System.arraycopy(expected,src,expected,dest,len);
bytes.copyBytes(src,dest,len);
}
}
break;
case 6:
{
int len=random().nextInt(Math.min(100,numBytes - pos));
if (VERBOSE) {
System.out.println("    skip len=" + len);
}
pos+=len;
bytes.skipBytes(len);
if (len > 0) {
byte[] zeros=new byte[len];
bytes.writeBytes(pos - len,zeros,0,len);
}
}
break;
case 7:
{
if (pos > 0) {
int dest=random().nextInt(pos);
byte b=(byte)random().nextInt(256);
expected[dest]=b;
bytes.writeByte(dest,b);
}
break;
}
}
assertEquals(pos,bytes.getPosition());
if (pos > 0 && random().nextInt(50) == 17) {
int len=TestUtil.nextInt(random(),1,Math.min(pos,100));
bytes.truncate(pos - len);
pos-=len;
Arrays.fill(expected,pos,pos + len,(byte)0);
if (VERBOSE) {
System.out.println("    truncate len=" + len + " newPos="+ pos);
}
}
if ((pos > 0 && random().nextInt(200) == 17)) {
verify(bytes,expected,pos);
}
}
BytesStore bytesToVerify;
if (random().nextBoolean()) {
if (VERBOSE) {
System.out.println("TEST: save/load final bytes");
}
Directory dir=newDirectory();
IndexOutput out=dir.createOutput("bytes",IOContext.DEFAULT);
bytes.writeTo(out);
out.close();
IndexInput in=dir.openInput("bytes",IOContext.DEFAULT);
bytesToVerify=new BytesStore(in,numBytes,TestUtil.nextInt(random(),256,Integer.MAX_VALUE));
in.close();
dir.close();
}
 else {
bytesToVerify=bytes;
}
verify(bytesToVerify,expected,numBytes);
}
}
