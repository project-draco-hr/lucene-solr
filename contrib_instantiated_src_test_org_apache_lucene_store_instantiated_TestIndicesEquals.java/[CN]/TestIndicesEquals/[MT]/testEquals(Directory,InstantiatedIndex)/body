{
  IndexReader aprioriReader=IndexReader.open(aprioriIndex);
  IndexReader testReader=testIndex.indexReaderFactory();
  assertEquals(aprioriReader.numDocs(),testReader.numDocs());
  for (  Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {
    byte[] aprioriNorms=aprioriReader.norms((String)field);
    byte[] testNorms=testReader.norms((String)field);
    assertEquals(aprioriNorms.length,testNorms.length);
    for (int i=0; i < aprioriNorms.length; i++) {
      assertEquals("norms does not equals for field " + field + " in document "+ i,aprioriNorms[i],testNorms[i]);
    }
    aprioriNorms=new byte[aprioriReader.maxDoc()];
    aprioriReader.norms((String)field,aprioriNorms,0);
    testNorms=new byte[testReader.maxDoc()];
    testReader.norms((String)field,testNorms,0);
    assertEquals(aprioriNorms.length,testNorms.length);
    for (int i=0; i < aprioriNorms.length; i++) {
      assertEquals("norms does not equals for field " + field + " in document "+ i,aprioriNorms[i],testNorms[i]);
    }
  }
  for (int docIndex=0; docIndex < aprioriReader.numDocs(); docIndex++) {
    assertEquals(aprioriReader.isDeleted(docIndex),testReader.isDeleted(docIndex));
  }
  TermEnum aprioriTermEnum=aprioriReader.terms();
  TermEnum testTermEnum=testReader.terms();
  while (true) {
    if (!aprioriTermEnum.next()) {
      assertFalse(testTermEnum.next());
      break;
    }
    assertTrue(testTermEnum.next());
    assertEquals(aprioriTermEnum.term(),testTermEnum.term());
    assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());
    TermDocs aprioriTermDocsSeeker=aprioriReader.termDocs(aprioriTermEnum.term());
    TermDocs testTermDocsSeeker=testReader.termDocs(testTermEnum.term());
    while (aprioriTermDocsSeeker.next()) {
      assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));
      assertEquals(aprioriTermDocsSeeker.doc(),testTermDocsSeeker.doc());
    }
    aprioriTermDocsSeeker.close();
    testTermDocsSeeker.close();
    assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()),testReader.docFreq(testTermEnum.term()));
    TermDocs aprioriTermDocs=aprioriReader.termDocs(aprioriTermEnum.term());
    TermDocs testTermDocs=testReader.termDocs(testTermEnum.term());
    while (true) {
      if (!aprioriTermDocs.next()) {
        assertFalse(testTermDocs.next());
        break;
      }
      assertTrue(testTermDocs.next());
      assertEquals(aprioriTermDocs.doc(),testTermDocs.doc());
      assertEquals(aprioriTermDocs.freq(),testTermDocs.freq());
    }
    aprioriTermDocs.close();
    testTermDocs.close();
    TermPositions testTermPositions=testReader.termPositions(testTermEnum.term());
    TermPositions aprioriTermPositions=aprioriReader.termPositions(aprioriTermEnum.term());
    if (aprioriTermPositions != null) {
      for (int docIndex=0; docIndex < aprioriReader.maxDoc(); docIndex++) {
        boolean hasNext=aprioriTermPositions.next();
        if (hasNext) {
          assertTrue(testTermPositions.next());
          assertEquals(aprioriTermPositions.freq(),testTermPositions.freq());
          for (int termPositionIndex=0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {
            int aprioriPos=aprioriTermPositions.nextPosition();
            int testPos=testTermPositions.nextPosition();
            if (aprioriPos != testPos) {
              assertEquals(aprioriPos,testPos);
            }
            assertEquals(aprioriTermPositions.isPayloadAvailable(),testTermPositions.isPayloadAvailable());
            if (aprioriTermPositions.isPayloadAvailable()) {
              assertEquals(aprioriTermPositions.getPayloadLength(),testTermPositions.getPayloadLength());
              byte[] aprioriPayloads=aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()],0);
              byte[] testPayloads=testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()],0);
              for (int i=0; i < aprioriPayloads.length; i++) {
                assertEquals(aprioriPayloads[i],testPayloads[i]);
              }
            }
          }
        }
      }
      aprioriTermPositions.close();
      testTermPositions.close();
    }
  }
  aprioriTermEnum=aprioriReader.terms();
  TermEnum aprioriTermEnumSeeker=aprioriReader.terms();
  TermEnum testTermEnumSeeker=testReader.terms();
  while (aprioriTermEnum.next()) {
    if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {
      assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));
      assertEquals(aprioriTermEnumSeeker.term(),testTermEnumSeeker.term());
    }
 else {
      assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));
    }
  }
  aprioriTermEnum.close();
  aprioriTermEnumSeeker.close();
  testTermEnumSeeker.close();
  aprioriTermEnumSeeker=aprioriReader.terms();
  testTermEnumSeeker=testReader.terms();
  aprioriTermEnum=aprioriReader.terms();
  aprioriTermEnum.next();
  Term nonExistingTerm=new Term(aprioriTermEnum.term().field(),"bzzzzoo993djdj380sdf");
  aprioriTermEnum.close();
  assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm),testTermEnumSeeker.skipTo(nonExistingTerm));
  assertEquals(aprioriTermEnumSeeker.term(),testTermEnumSeeker.term());
  aprioriTermEnumSeeker.close();
  testTermEnumSeeker.close();
  for (int documentNumber=0; documentNumber < aprioriReader.numDocs(); documentNumber++) {
    if (documentNumber > 0) {
      assertNotNull(aprioriReader.getTermFreqVector(documentNumber,"b0"));
      assertNull(aprioriReader.getTermFreqVector(documentNumber,"b1"));
      assertNotNull(testReader.getTermFreqVector(documentNumber,"b0"));
      assertNull(testReader.getTermFreqVector(documentNumber,"b1"));
    }
    TermFreqVector[] aprioriFreqVectors=aprioriReader.getTermFreqVectors(documentNumber);
    TermFreqVector[] testFreqVectors=testReader.getTermFreqVectors(documentNumber);
    if (aprioriFreqVectors != null && testFreqVectors != null) {
      Arrays.sort(aprioriFreqVectors,new Comparator<TermFreqVector>(){
        public int compare(        TermFreqVector termFreqVector,        TermFreqVector termFreqVector1){
          return termFreqVector.getField().compareTo(termFreqVector1.getField());
        }
      }
);
      Arrays.sort(testFreqVectors,new Comparator<TermFreqVector>(){
        public int compare(        TermFreqVector termFreqVector,        TermFreqVector termFreqVector1){
          return termFreqVector.getField().compareTo(termFreqVector1.getField());
        }
      }
);
      assertEquals("document " + documentNumber + " vectors does not match",aprioriFreqVectors.length,testFreqVectors.length);
      for (int freqVectorIndex=0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {
        assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(),testFreqVectors[freqVectorIndex].getTermFrequencies()));
        assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(),testFreqVectors[freqVectorIndex].getTerms()));
        if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {
          TermPositionVector aprioriTermPositionVector=(TermPositionVector)aprioriFreqVectors[freqVectorIndex];
          TermPositionVector testTermPositionVector=(TermPositionVector)testFreqVectors[freqVectorIndex];
          for (int positionVectorIndex=0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++) {
            if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {
              assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex),testTermPositionVector.getOffsets(positionVectorIndex)));
            }
            if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {
              assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex),testTermPositionVector.getTermPositions(positionVectorIndex)));
            }
          }
        }
      }
    }
  }
  aprioriTermEnum.close();
  testTermEnum.close();
  aprioriReader.close();
  testReader.close();
}
