{
  assertEquals("id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\n",h.query(req("q","id:1","wt","csv","fl","id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt")));
  assertEquals("1,0.0,hi\n",h.query(req("q","id:1^0","wt","csv","csv.header","false","fl","id,score,foo_s")));
  assertEquals("2,\"hi,there\"\n",h.query(req("q","id:2","wt","csv","csv.header","false","fl","id,v_ss")));
  assertEquals("2|\"hi|there\"\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.separator","|","fl","id,v_ss")));
  assertEquals("2,hi|there\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.mv.separator","|","fl","id,v_ss")));
  assertEquals("2,hi|there,nice:output\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.mv.separator","|","f.v2_ss.csv.separator",":","fl","id,v_ss,v2_ss")));
  String result=h.query(req("q","*:*","wt","csv","csv.header","true","fl","*,score"));
  for (  String field : "id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score".split(",")) {
    assertTrue(result.indexOf(field) >= 0);
  }
  assertEquals("2,,hi|there\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.mv.separator","|","fl","id,foo_s,v_ss")));
  assertEquals("2,NULL,hi|there\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.mv.separator","|","csv.null","NULL","fl","id,foo_s,v_ss")));
  assertEquals("2,\"hi,there\"\r\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.newline","\r\n","fl","id,v_ss")));
  assertEquals("2,'hi,there'\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.encapsulator","'","fl","id,v_ss")));
  assertEquals("2,hi\\,there\n",h.query(req("q","id:2","wt","csv","csv.header","false","csv.escape","\\","fl","id,v_ss")));
  assertEquals("1,,hi\n2,\"hi,there\",\n",h.query(req("q","id:[1 TO 2]","wt","csv","csv.header","false","fl","id,v_ss,foo_s")));
  assertEquals("id,foo_b,foo_d,foo_s,foo_f,foo_i,foo_dt,foo_l,v_ss,v2_ss\n",h.query(req("q","id:3","wt","csv","csv.header","true","fl","*","rows","0")));
  SolrDocument d=new SolrDocument();
  SolrDocument d1=d;
  d.addField("id","1");
  d.addField("foo_i",-1);
  d.addField("foo_s","hi");
  d.addField("foo_l","12345678987654321L");
  d.addField("foo_b",false);
  d.addField("foo_f",1.414f);
  d.addField("foo_d",-1.0E300);
  d.addField("foo_dt",DateUtil.parseDate("2000-01-02T03:04:05Z"));
  d.addField("score","2.718");
  d=new SolrDocument();
  SolrDocument d2=d;
  d.addField("id","2");
  d.addField("v_ss","hi");
  d.addField("v_ss","there");
  d.addField("v2_ss","nice");
  d.addField("v2_ss","output");
  d.addField("score","89.83");
  d.addField("shouldbeunstored","foo");
  SolrDocumentList sdl=new SolrDocumentList();
  sdl.add(d1);
  sdl.add(d2);
  SolrQueryRequest req=req("q","*:*");
  SolrQueryResponse rsp=new SolrQueryResponse();
  rsp.add("response",sdl);
  QueryResponseWriter w=new CSVResponseWriter();
  rsp.setReturnFields(new ReturnFields("id,foo_s",req));
  StringWriter buf=new StringWriter();
  w.write(buf,req,rsp);
  assertEquals("id,foo_s\n1,hi\n2,\n",buf.toString());
  rsp.setReturnFields(new ReturnFields("id,score,foo_s",req));
  buf=new StringWriter();
  w.write(buf,req,rsp);
  assertEquals("id,score,foo_s\n1,2.718,hi\n2,89.83,\n",buf.toString());
  rsp.setReturnFields(new ReturnFields("*",req));
  buf=new StringWriter();
  w.write(buf,req,rsp);
  assertEquals("id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\n" + "1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\n" + "2,,,,,,,,\"hi,there\",\"nice,output\"\n",buf.toString());
  rsp.setReturnFields(new ReturnFields("*,score",req));
  buf=new StringWriter();
  w.write(buf,req,rsp);
  String s=buf.toString();
  assertTrue(s.indexOf("score") >= 0 && s.indexOf("2.718") > 0 && s.indexOf("89.83") > 0);
  req.close();
}
