{
  Evaluator dateFormatEval=new DateFormatEvaluator();
  ContextImpl context=new ContextImpl(null,resolver,null,Context.FULL_DUMP,Collections.<String,Object>emptyMap(),null,null);
  Locale rootLocale=Locale.ROOT;
  Locale defaultLocale=Locale.getDefault();
  TimeZone defaultTz=TimeZone.getDefault();
{
    SimpleDateFormat sdfDate=new SimpleDateFormat("yyyy-MM-dd HH",rootLocale);
    String sdf=sdfDate.format(twoDaysAgo(rootLocale,defaultTz));
    String dfe=dateFormatEval.evaluate("'NOW-2DAYS','yyyy-MM-dd HH'",context);
    assertEquals(sdf,dfe);
  }
{
    SimpleDateFormat sdfDate=new SimpleDateFormat("yyyy-MM-dd HH",defaultLocale);
    String sdf=sdfDate.format(twoDaysAgo(defaultLocale,TimeZone.getDefault()));
    String dfe=dateFormatEval.evaluate("'NOW-2DAYS','yyyy-MM-dd HH','" + defaultLocale + "'",context);
    assertEquals(sdf,dfe);
    for (    String tzStr : TimeZone.getAvailableIDs()) {
      TimeZone tz=TimeZone.getTimeZone(tzStr);
      sdfDate.setTimeZone(tz);
      sdf=sdfDate.format(twoDaysAgo(defaultLocale,tz));
      dfe=dateFormatEval.evaluate("'NOW-2DAYS','yyyy-MM-dd HH','" + defaultLocale + "','"+ tzStr+ "'",context);
      assertEquals(sdf,dfe);
    }
  }
  Date d=new Date();
  Map<String,Object> map=new HashMap<>();
  map.put("key",d);
  resolver.addNamespace("A",map);
  assertEquals(new SimpleDateFormat("yyyy-MM-dd HH:mm",rootLocale).format(d),dateFormatEval.evaluate("A.key, 'yyyy-MM-dd HH:mm'",context));
  assertEquals(new SimpleDateFormat("yyyy-MM-dd HH:mm",defaultLocale).format(d),dateFormatEval.evaluate("A.key, 'yyyy-MM-dd HH:mm','" + defaultLocale + "'",context));
  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm",defaultLocale);
  for (  String tzStr : TimeZone.getAvailableIDs()) {
    TimeZone tz=TimeZone.getTimeZone(tzStr);
    sdf.setTimeZone(tz);
    assertEquals(sdf.format(d),dateFormatEval.evaluate("A.key, 'yyyy-MM-dd HH:mm','" + defaultLocale + "', '"+ tzStr+ "'",context));
  }
}
