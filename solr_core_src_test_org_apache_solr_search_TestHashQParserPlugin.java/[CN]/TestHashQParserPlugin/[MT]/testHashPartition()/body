{
  Random random=random();
  HashSet<String> set=new HashSet();
  for (int i=0; i < 50; i++) {
    int v=random.nextInt(1000000);
    String val=Integer.toString(v);
    if (!set.contains(val)) {
      set.add(val);
      String[] doc={"id",val,"a_s",val,"a_i",val,"a_l",val};
      assertU(adoc(doc));
      if (i % 10 == 0)       assertU(commit());
    }
  }
  assertU(commit());
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=0 workers=3 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_s");
  params.add("rows","50");
  HashSet set1=new HashSet();
  String response=h.query(req(params));
  Iterator<String> it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set1.add(s);
    }
  }
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=1 workers=3 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_s");
  params.add("rows","50");
  HashSet set2=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set2.add(s);
    }
  }
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=2 workers=3 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_s");
  params.add("rows","50");
  HashSet set3=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set3.add(s);
    }
  }
  assert(set1.size() > 0);
  assert(set2.size() > 0);
  assert(set3.size() > 0);
  assert(set1.size() + set2.size() + set3.size() == set.size());
  assertNoOverLap(set1,set2);
  assertNoOverLap(set1,set3);
  assertNoOverLap(set2,set3);
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=0 workers=2 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_i");
  params.add("rows","50");
  set1=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set1.add(s);
    }
  }
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=1 workers=2 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_i");
  params.add("rows","50");
  set2=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set2.add(s);
    }
  }
  assert(set1.size() > 0);
  assert(set2.size() > 0);
  assert(set1.size() + set2.size() == set.size());
  assertNoOverLap(set1,set2);
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=0 workers=2 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_s,a_i,a_l");
  params.add("rows","50");
  set1=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set1.add(s);
    }
  }
  params=new ModifiableSolrParams();
  params.add("q","*:*");
  params.add("fq","{!hash worker=1 workers=2 cost=" + getCost(random) + "}");
  params.add("partitionKeys","a_s,a_i,a_l");
  params.add("rows","50");
  set2=new HashSet();
  response=h.query(req(params));
  it=set.iterator();
  while (it.hasNext()) {
    String s=it.next();
    String results=h.validateXPath(response,"*[count(//int[@name='id'][.='" + s + "'])=1]");
    if (results == null) {
      set2.add(s);
    }
  }
  assert(set1.size() > 0);
  assert(set2.size() > 0);
  assert(set1.size() + set2.size() == set.size());
  assertNoOverLap(set1,set2);
}
