{
  final SimpleDVProducer producer=new SimpleTextDocValuesReader(state,"dat");
  return new SimpleDVProducer(){
    @Override public NumericDocValues getNumeric(    FieldInfo field) throws IOException {
      NumericDocValues valuesIn=producer.getNumeric(field);
      final int maxDoc=valuesIn.size();
      final long minValue=valuesIn.minValue();
      final long maxValue=valuesIn.maxValue();
      final long[] values=new long[maxDoc];
      for (int docID=0; docID < maxDoc; docID++) {
        values[docID]=valuesIn.get(docID);
      }
      return new NumericDocValues(){
        @Override public long get(        int docID){
          return values[docID];
        }
        @Override public int size(){
          return maxDoc;
        }
        @Override public long minValue(){
          return minValue;
        }
        @Override public long maxValue(){
          return maxValue;
        }
      }
;
    }
    @Override public BinaryDocValues getBinary(    FieldInfo field) throws IOException {
      BinaryDocValues valuesIn=producer.getBinary(field);
      final int maxDoc=valuesIn.size();
      final int maxLength=valuesIn.maxLength();
      final boolean fixedLength=valuesIn.isFixedLength();
      final byte[][] values=new byte[maxDoc][];
      BytesRef scratch=new BytesRef();
      for (int docID=0; docID < maxDoc; docID++) {
        valuesIn.get(docID,scratch);
        values[docID]=new byte[scratch.length];
        System.arraycopy(scratch.bytes,scratch.offset,values[docID],0,scratch.length);
      }
      return new BinaryDocValues(){
        @Override public void get(        int docID,        BytesRef result){
          result.bytes=values[docID];
          result.offset=0;
          result.length=result.bytes.length;
        }
        @Override public int size(){
          return maxDoc;
        }
        @Override public boolean isFixedLength(){
          return fixedLength;
        }
        @Override public int maxLength(){
          return maxLength;
        }
      }
;
    }
    public SortedDocValues getSorted(    FieldInfo field) throws IOException {
      SortedDocValues valuesIn=producer.getSorted(field);
      final int maxDoc=valuesIn.size();
      final int maxLength=valuesIn.maxLength();
      final boolean fixedLength=valuesIn.isFixedLength();
      final int valueCount=valuesIn.getValueCount();
      final byte[][] values=new byte[valueCount][];
      BytesRef scratch=new BytesRef();
      for (int ord=0; ord < values.length; ord++) {
        valuesIn.lookupOrd(ord,scratch);
        values[ord]=new byte[scratch.length];
        System.arraycopy(scratch.bytes,scratch.offset,values[ord],0,scratch.length);
      }
      final int[] docToOrd=new int[maxDoc];
      for (int docID=0; docID < maxDoc; docID++) {
        docToOrd[docID]=valuesIn.getOrd(docID);
      }
      return new SortedDocValues(){
        @Override public int getOrd(        int docID){
          return docToOrd[docID];
        }
        @Override public void lookupOrd(        int ord,        BytesRef result){
          result.bytes=values[ord];
          result.offset=0;
          result.length=result.bytes.length;
        }
        @Override public int getValueCount(){
          return valueCount;
        }
        @Override public int size(){
          return maxDoc;
        }
        @Override public boolean isFixedLength(){
          return fixedLength;
        }
        @Override public int maxLength(){
          return maxLength;
        }
      }
;
    }
    @Override public void close() throws IOException {
      producer.close();
    }
  }
;
}
