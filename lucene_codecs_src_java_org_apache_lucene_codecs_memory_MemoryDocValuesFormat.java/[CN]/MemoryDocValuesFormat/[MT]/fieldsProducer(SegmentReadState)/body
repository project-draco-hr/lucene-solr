{
  final int maxDoc=state.segmentInfo.getDocCount();
  final SimpleDVProducer producer=new SimpleTextDocValuesReader(state,"dat");
  return new SimpleDVProducer(){
    @Override public NumericDocValues getNumeric(    FieldInfo field) throws IOException {
      NumericDocValues valuesIn=producer.getNumeric(field);
      long minValue=Long.MAX_VALUE;
      long maxValue=Long.MIN_VALUE;
      for (int docID=0; docID < maxDoc; docID++) {
        long v=valuesIn.get(docID);
        minValue=Math.min(minValue,v);
        maxValue=Math.max(maxValue,v);
      }
      final long delta=maxValue - minValue;
      final int bitsRequired=delta < 0 ? 64 : PackedInts.bitsRequired(delta);
      final PackedInts.Mutable values=PackedInts.getMutable(maxDoc,bitsRequired,PackedInts.COMPACT);
      for (int docID=0; docID < maxDoc; docID++) {
        values.set(docID,valuesIn.get(docID) - minValue);
      }
      final long finalMinValue=minValue;
      return new NumericDocValues(){
        @Override public long get(        int docID){
          return finalMinValue + values.get(docID);
        }
      }
;
    }
    @Override public BinaryDocValues getBinary(    FieldInfo field) throws IOException {
      BinaryDocValues valuesIn=producer.getBinary(field);
      final byte[][] values=new byte[maxDoc][];
      BytesRef scratch=new BytesRef();
      for (int docID=0; docID < maxDoc; docID++) {
        valuesIn.get(docID,scratch);
        values[docID]=new byte[scratch.length];
        System.arraycopy(scratch.bytes,scratch.offset,values[docID],0,scratch.length);
      }
      return new BinaryDocValues(){
        @Override public void get(        int docID,        BytesRef result){
          result.bytes=values[docID];
          result.offset=0;
          result.length=result.bytes.length;
        }
      }
;
    }
    @Override public SortedDocValues getSorted(    FieldInfo field) throws IOException {
      SortedDocValues valuesIn=producer.getSorted(field);
      final int valueCount=valuesIn.getValueCount();
      final byte[][] values=new byte[valueCount][];
      BytesRef scratch=new BytesRef();
      for (int ord=0; ord < values.length; ord++) {
        valuesIn.lookupOrd(ord,scratch);
        values[ord]=new byte[scratch.length];
        System.arraycopy(scratch.bytes,scratch.offset,values[ord],0,scratch.length);
      }
      final int[] docToOrd=new int[maxDoc];
      for (int docID=0; docID < maxDoc; docID++) {
        docToOrd[docID]=valuesIn.getOrd(docID);
      }
      return new SortedDocValues(){
        @Override public int getOrd(        int docID){
          return docToOrd[docID];
        }
        @Override public void lookupOrd(        int ord,        BytesRef result){
          result.bytes=values[ord];
          result.offset=0;
          result.length=result.bytes.length;
        }
        @Override public int getValueCount(){
          return valueCount;
        }
      }
;
    }
    @Override public void close() throws IOException {
      producer.close();
    }
  }
;
}
