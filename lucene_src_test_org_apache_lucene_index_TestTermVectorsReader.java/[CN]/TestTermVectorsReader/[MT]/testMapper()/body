{
  TermVectorsReader reader=new TermVectorsReader(dir,seg,fieldInfos);
  SortedTermVectorMapper mapper=new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());
  reader.get(0,mapper);
  SortedSet<TermVectorEntry> set=mapper.getTermVectorEntrySet();
  assertTrue("set is null and it shouldn't be",set != null);
  assertTrue("set Size: " + set.size() + " is not: "+ 4,set.size() == 4);
  for (Iterator<TermVectorEntry> iterator=set.iterator(); iterator.hasNext(); ) {
    TermVectorEntry tve=iterator.next();
    assertTrue("tve is null and it shouldn't be",tve != null);
    assertTrue("tve.getOffsets() is null and it shouldn't be",tve.getOffsets() != null);
    assertTrue("tve.getPositions() is null and it shouldn't be",tve.getPositions() != null);
  }
  mapper=new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());
  reader.get(1,mapper);
  set=mapper.getTermVectorEntrySet();
  assertTrue("set is null and it shouldn't be",set != null);
  assertTrue("set Size: " + set.size() + " is not: "+ 4,set.size() == 4);
  for (Iterator<TermVectorEntry> iterator=set.iterator(); iterator.hasNext(); ) {
    TermVectorEntry tve=iterator.next();
    assertTrue("tve is null and it shouldn't be",tve != null);
    assertTrue("tve.getOffsets() is null and it shouldn't be",tve.getOffsets() != null);
    assertTrue("tve.getPositions() is null and it shouldn't be",tve.getPositions() != null);
  }
  FieldSortedTermVectorMapper fsMapper=new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());
  reader.get(0,fsMapper);
  Map<String,SortedSet<TermVectorEntry>> map=fsMapper.getFieldToTerms();
  assertTrue("map Size: " + map.size() + " is not: "+ testFields.length,map.size() == testFields.length);
  for (  Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {
    SortedSet<TermVectorEntry> sortedSet=entry.getValue();
    assertTrue("sortedSet Size: " + sortedSet.size() + " is not: "+ 4,sortedSet.size() == 4);
    for (    final TermVectorEntry tve : sortedSet) {
      assertTrue("tve is null and it shouldn't be",tve != null);
      assertTrue("tve is null and it shouldn't be",tve != null);
      String field=tve.getField();
      if (field.equals(testFields[0])) {
        assertTrue("tve.getOffsets() is null and it shouldn't be",tve.getOffsets() != null);
        assertTrue("tve.getPositions() is null and it shouldn't be",tve.getPositions() != null);
      }
 else       if (field.equals(testFields[1])) {
        assertTrue("tve.getOffsets() is not null and it shouldn't be",tve.getOffsets() == null);
        assertTrue("tve.getPositions() is not null and it shouldn't be",tve.getPositions() == null);
      }
    }
  }
  fsMapper=new FieldSortedTermVectorMapper(true,true,new TermVectorEntryFreqSortedComparator());
  reader.get(0,fsMapper);
  map=fsMapper.getFieldToTerms();
  assertTrue("map Size: " + map.size() + " is not: "+ testFields.length,map.size() == testFields.length);
  for (  final Map.Entry<String,SortedSet<TermVectorEntry>> entry : map.entrySet()) {
    SortedSet<TermVectorEntry> sortedSet=entry.getValue();
    assertTrue("sortedSet Size: " + sortedSet.size() + " is not: "+ 4,sortedSet.size() == 4);
    for (    final TermVectorEntry tve : sortedSet) {
      assertTrue("tve is null and it shouldn't be",tve != null);
      assertTrue("tve is null and it shouldn't be",tve != null);
      String field=tve.getField();
      if (field.equals(testFields[0])) {
        assertTrue("tve.getOffsets() is null and it shouldn't be",tve.getOffsets() == null);
        assertTrue("tve.getPositions() is null and it shouldn't be",tve.getPositions() == null);
      }
 else       if (field.equals(testFields[1])) {
        assertTrue("tve.getOffsets() is not null and it shouldn't be",tve.getOffsets() == null);
        assertTrue("tve.getPositions() is not null and it shouldn't be",tve.getPositions() == null);
      }
    }
  }
  IndexReader ir=IndexReader.open(dir,true);
  DocNumAwareMapper docNumAwareMapper=new DocNumAwareMapper();
  assertEquals(-1,docNumAwareMapper.getDocumentNumber());
  ir.getTermFreqVector(0,docNumAwareMapper);
  assertEquals(0,docNumAwareMapper.getDocumentNumber());
  docNumAwareMapper.setDocumentNumber(-1);
  ir.getTermFreqVector(1,docNumAwareMapper);
  assertEquals(1,docNumAwareMapper.getDocumentNumber());
  docNumAwareMapper.setDocumentNumber(-1);
  ir.getTermFreqVector(0,"f1",docNumAwareMapper);
  assertEquals(0,docNumAwareMapper.getDocumentNumber());
  docNumAwareMapper.setDocumentNumber(-1);
  ir.getTermFreqVector(1,"f2",docNumAwareMapper);
  assertEquals(1,docNumAwareMapper.getDocumentNumber());
  docNumAwareMapper.setDocumentNumber(-1);
  ir.getTermFreqVector(0,"f1",docNumAwareMapper);
  assertEquals(0,docNumAwareMapper.getDocumentNumber());
  ir.close();
  reader.close();
}
