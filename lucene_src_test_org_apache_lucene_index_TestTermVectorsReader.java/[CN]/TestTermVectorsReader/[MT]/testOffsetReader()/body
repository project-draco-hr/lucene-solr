{
  TermVectorsReader reader=Codec.getDefault().termVectorsFormat().vectorsReader(dir,seg,fieldInfos,newIOContext(random));
  Terms vector=reader.get(0).terms(testFields[0]);
  assertNotNull(vector);
  TermsEnum termsEnum=vector.iterator(null);
  assertNotNull(termsEnum);
  assertEquals(testTerms.length,vector.getUniqueTermCount());
  DocsAndPositionsEnum dpEnum=null;
  for (int i=0; i < testTerms.length; i++) {
    final BytesRef text=termsEnum.next();
    assertNotNull(text);
    String term=text.utf8ToString();
    assertEquals(testTerms[i],term);
    dpEnum=termsEnum.docsAndPositions(null,dpEnum);
    assertNotNull(dpEnum);
    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);
    assertEquals(dpEnum.freq(),positions[i].length);
    for (int j=0; j < positions[i].length; j++) {
      assertEquals(positions[i][j],dpEnum.nextPosition());
    }
    assertEquals(DocsEnum.NO_MORE_DOCS,dpEnum.nextDoc());
    dpEnum=termsEnum.docsAndPositions(null,dpEnum);
    assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);
    final OffsetAttribute offsetAtt=dpEnum.attributes().getAttribute(OffsetAttribute.class);
    assertNotNull(offsetAtt);
    assertNotNull(dpEnum);
    assertEquals(dpEnum.freq(),positions[i].length);
    for (int j=0; j < positions[i].length; j++) {
      assertEquals(positions[i][j],dpEnum.nextPosition());
      assertEquals(j * 10,offsetAtt.startOffset());
      assertEquals(j * 10 + testTerms[i].length(),offsetAtt.endOffset());
    }
    assertEquals(DocsEnum.NO_MORE_DOCS,dpEnum.nextDoc());
  }
  reader.close();
}
