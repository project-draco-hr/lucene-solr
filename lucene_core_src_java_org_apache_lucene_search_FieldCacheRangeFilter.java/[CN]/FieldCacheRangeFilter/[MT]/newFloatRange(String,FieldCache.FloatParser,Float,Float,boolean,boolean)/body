{
  return new FieldCacheRangeFilter<Float>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      final float inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        float f=lowerVal.floatValue();
        if (!includeUpper && f > 0.0f && Float.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveLowerPoint=NumericUtils.sortableIntToFloat(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Float.NEGATIVE_INFINITY;
      }
      if (upperVal != null) {
        float f=upperVal.floatValue();
        if (!includeUpper && f < 0.0f && Float.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveUpperPoint=NumericUtils.sortableIntToFloat(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Float.POSITIVE_INFINITY;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return DocIdSet.EMPTY_DOCIDSET;
      final FieldCache.Floats values=FieldCache.DEFAULT.getFloats(context.reader(),field,(FieldCache.FloatParser)parser,false);
      return new FieldCacheDocIdSet(context.reader().maxDoc(),acceptDocs){
        @Override protected boolean matchDoc(        int doc){
          final float value=values.get(doc);
          return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
