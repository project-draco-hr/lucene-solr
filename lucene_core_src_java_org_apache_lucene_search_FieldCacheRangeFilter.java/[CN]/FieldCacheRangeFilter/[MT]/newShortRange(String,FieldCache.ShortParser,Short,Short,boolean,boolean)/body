{
  return new FieldCacheRangeFilter<Short>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      final short inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        short i=lowerVal.shortValue();
        if (!includeLower && i == Short.MAX_VALUE)         return null;
        inclusiveLowerPoint=(short)(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Short.MIN_VALUE;
      }
      if (upperVal != null) {
        short i=upperVal.shortValue();
        if (!includeUpper && i == Short.MIN_VALUE)         return null;
        inclusiveUpperPoint=(short)(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Short.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final FieldCache.Shorts values=FieldCache.DEFAULT.getShorts(context.reader(),field,(FieldCache.ShortParser)parser,false);
      return new FieldCacheDocIdSet(context.reader().maxDoc(),acceptDocs){
        @Override protected boolean matchDoc(        int doc){
          final short value=values.get(doc);
          return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
