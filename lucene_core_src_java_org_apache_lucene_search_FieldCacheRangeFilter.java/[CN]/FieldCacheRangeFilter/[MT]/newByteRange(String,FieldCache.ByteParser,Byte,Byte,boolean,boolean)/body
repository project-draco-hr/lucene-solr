{
  return new FieldCacheRangeFilter<Byte>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      final byte inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        final byte i=lowerVal.byteValue();
        if (!includeLower && i == Byte.MAX_VALUE)         return DocIdSet.EMPTY_DOCIDSET;
        inclusiveLowerPoint=(byte)(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Byte.MIN_VALUE;
      }
      if (upperVal != null) {
        final byte i=upperVal.byteValue();
        if (!includeUpper && i == Byte.MIN_VALUE)         return DocIdSet.EMPTY_DOCIDSET;
        inclusiveUpperPoint=(byte)(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Byte.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return DocIdSet.EMPTY_DOCIDSET;
      final FieldCache.Bytes values=FieldCache.DEFAULT.getBytes(context.reader(),field,(FieldCache.ByteParser)parser,false);
      return new FieldCacheDocIdSet(context.reader().maxDoc(),acceptDocs){
        @Override protected boolean matchDoc(        int doc){
          final byte value=values.get(doc);
          return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
