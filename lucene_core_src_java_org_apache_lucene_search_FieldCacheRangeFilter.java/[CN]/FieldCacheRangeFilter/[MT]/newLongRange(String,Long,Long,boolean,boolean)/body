{
  return new FieldCacheRangeFilter<Long>(field,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      final long inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        long i=lowerVal.longValue();
        if (!includeLower && i == Long.MAX_VALUE)         return null;
        inclusiveLowerPoint=includeLower ? i : (i + 1L);
      }
 else {
        inclusiveLowerPoint=Long.MIN_VALUE;
      }
      if (upperVal != null) {
        long i=upperVal.longValue();
        if (!includeUpper && i == Long.MIN_VALUE)         return null;
        inclusiveUpperPoint=includeUpper ? i : (i - 1L);
      }
 else {
        inclusiveUpperPoint=Long.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final NumericDocValues values=DocValues.getNumeric(context.reader(),field);
      return new FieldCacheDocIdSet(context.reader().maxDoc(),acceptDocs){
        @Override protected boolean matchDoc(        int doc){
          final long value=values.get(doc);
          return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
