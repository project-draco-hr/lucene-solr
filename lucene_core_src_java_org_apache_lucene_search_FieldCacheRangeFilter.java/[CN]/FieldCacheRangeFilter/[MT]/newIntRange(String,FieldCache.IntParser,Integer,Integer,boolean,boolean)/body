{
  return new FieldCacheRangeFilter<Integer>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    Bits acceptDocs) throws IOException {
      final int inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        int i=lowerVal.intValue();
        if (!includeLower && i == Integer.MAX_VALUE)         return DocIdSet.EMPTY_DOCIDSET;
        inclusiveLowerPoint=includeLower ? i : (i + 1);
      }
 else {
        inclusiveLowerPoint=Integer.MIN_VALUE;
      }
      if (upperVal != null) {
        int i=upperVal.intValue();
        if (!includeUpper && i == Integer.MIN_VALUE)         return DocIdSet.EMPTY_DOCIDSET;
        inclusiveUpperPoint=includeUpper ? i : (i - 1);
      }
 else {
        inclusiveUpperPoint=Integer.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return DocIdSet.EMPTY_DOCIDSET;
      final int[] values=FieldCache.DEFAULT.getInts(context.reader(),field,(FieldCache.IntParser)parser,false);
      return new FieldCacheDocIdSet(context.reader().maxDoc(),acceptDocs){
        @Override protected boolean matchDoc(        int doc){
          return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
