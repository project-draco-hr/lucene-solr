{
  this.term=null;
  int start=input.readVInt();
  int length=input.readVInt();
  int totalLength=start + length;
  if (bytes.bytes.length < totalLength) {
    bytes.grow(totalLength);
  }
  if (dirty) {
    UnicodeUtil.UTF16toUTF8(text.result,0,text.length,bytes);
    bytes.length=totalLength;
    input.readBytes(bytes.bytes,start,length);
    UnicodeUtil.UTF8toUTF16(bytes.bytes,0,totalLength,text);
    dirty=false;
  }
 else {
    bytes.length=totalLength;
    input.readBytes(bytes.bytes,start,length);
    UnicodeUtil.UTF8toUTF16(bytes.bytes,start,length,text);
  }
  while (true) {
    newSuffixStart=text.offsets[start];
    if (newSuffixStart != -1) {
      break;
    }
    if (--start == 0) {
      newSuffixStart=0;
      break;
    }
  }
  this.field=fieldInfos.fieldName(input.readVInt());
}
