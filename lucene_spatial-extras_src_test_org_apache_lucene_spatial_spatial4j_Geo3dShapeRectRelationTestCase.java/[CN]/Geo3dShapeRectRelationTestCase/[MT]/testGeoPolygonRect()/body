{
  new Geo3dRectIntersectionTestHelper(ctx){
    @Override protected Geo3dShape generateRandomShape(    Point nearP){
      final Point centerPoint=randomPoint();
      final int maxDistance=random().nextInt(160) + 20;
      final Circle pointZone=ctx.makeCircle(centerPoint,maxDistance);
      final int vertexCount=random().nextInt(3) + 3;
      while (true) {
        final List<GeoPoint> geoPoints=new ArrayList<>();
        while (geoPoints.size() < vertexCount) {
          final Point point=randomPointIn(pointZone);
          final GeoPoint gPt=new GeoPoint(planetModel,point.getY() * DEGREES_TO_RADIANS,point.getX() * DEGREES_TO_RADIANS);
          geoPoints.add(gPt);
        }
        try {
          final GeoShape shape=GeoPolygonFactory.makeGeoPolygon(planetModel,geoPoints);
          if (shape == null) {
            continue;
          }
          return new Geo3dShape(planetModel,shape,ctx);
        }
 catch (        IllegalArgumentException e) {
          continue;
        }
      }
    }
    @Override protected Point randomPointInEmptyShape(    Geo3dShape shape){
      throw new IllegalStateException("unexpected; need to finish test code");
    }
    @Override protected int getWithinMinimum(    int laps){
      return 1;
    }
  }
.testRelateWithRectangle();
}
