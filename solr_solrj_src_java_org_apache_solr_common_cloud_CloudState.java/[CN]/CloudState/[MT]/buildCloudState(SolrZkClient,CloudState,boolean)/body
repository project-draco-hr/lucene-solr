{
  Map<String,Map<String,Slice>> collectionStates;
  if (!onlyLiveNodes) {
    List<String> collections=zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE,null);
    collectionStates=new HashMap<String,Map<String,Slice>>();
    for (    String collection : collections) {
      String shardIdPaths=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection+ ZkStateReader.SHARDS_ZKNODE;
      List<String> shardIdNames;
      try {
        shardIdNames=zkClient.getChildren(shardIdPaths,null);
      }
 catch (      KeeperException.NoNodeException e) {
        continue;
      }
      Map<String,Slice> slices=new HashMap<String,Slice>();
      for (      String shardIdZkPath : shardIdNames) {
        Slice oldSlice=null;
        if (oldCloudState.getCollectionStates().containsKey(collection) && oldCloudState.getCollectionStates().get(collection).containsKey(shardIdZkPath)) {
          oldSlice=oldCloudState.getCollectionStates().get(collection).get(shardIdZkPath);
        }
        Map<String,ZkNodeProps> shardsMap=readShards(zkClient,shardIdPaths + "/" + shardIdZkPath,oldSlice);
        Slice slice=new Slice(shardIdZkPath,shardsMap);
        slices.put(shardIdZkPath,slice);
      }
      collectionStates.put(collection,slices);
    }
  }
 else {
    collectionStates=oldCloudState.getCollectionStates();
  }
  CloudState cloudInfo=new CloudState(getLiveNodes(zkClient),collectionStates);
  return cloudInfo;
}
