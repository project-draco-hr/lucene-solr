{
  SynonymMap map=new SynonymMap();
  boolean orig=true;
  boolean merge=true;
  map.add(strings("a b"),tokens("ab"),orig,merge);
  map.add(strings("a c"),tokens("ac"),orig,merge);
  map.add(strings("a"),tokens("aa"),orig,merge);
  map.add(strings("b"),tokens("bb"),orig,merge);
  map.add(strings("z x c v"),tokens("zxcv"),orig,merge);
  map.add(strings("x c"),tokens("xc"),orig,merge);
  assertTokEqual(getTokList(map,"$",false),tokens("$"));
  assertTokEqual(getTokList(map,"a",false),tokens("a/aa"));
  assertTokEqual(getTokList(map,"a",false),tokens("a/aa"));
  assertTokEqual(getTokList(map,"$ a",false),tokens("$ a/aa"));
  assertTokEqual(getTokList(map,"a $",false),tokens("a/aa $"));
  assertTokEqual(getTokList(map,"$ a !",false),tokens("$ a/aa !"));
  assertTokEqual(getTokList(map,"a a",false),tokens("a/aa a/aa"));
  assertTokEqual(getTokList(map,"b",false),tokens("b/bb"));
  assertTokEqual(getTokList(map,"z x c v",false),tokens("z/zxcv x c v"));
  assertTokEqual(getTokList(map,"z x c $",false),tokens("z x/xc c $"));
  map.add(strings("zoo zoo"),tokens("zoo"),orig,merge);
  assertTokEqual(getTokList(map,"zoo zoo $ zoo",false),tokens("zoo/zoo zoo/zoo $ zoo/zoo"));
  map.add(strings("zoo"),tokens("zoo zoo"),orig,merge);
  assertTokEqual(getTokList(map,"zoo zoo $ zoo",false),tokens("zoo/zoo zoo $ zoo/zoo zoo"));
}
