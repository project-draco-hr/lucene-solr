{
  final int off=readerContext.docBase;
  final AtomicReader r;
  Object o=context.get("searcher");
  if (o instanceof SolrIndexSearcher) {
    r=((SolrIndexSearcher)o).getAtomicReader();
  }
 else {
    IndexReader topReader=ReaderUtil.getTopLevelContext(readerContext).reader();
    r=SlowCompositeReaderWrapper.wrap(topReader);
  }
  final SortedDocValues sindex=SortedSetSelector.wrap(DocValues.getSortedSet(r,field),SortedSetSelector.Type.MIN);
  return new IntDocValues(this){
    protected String toTerm(    String readableValue){
      return readableValue;
    }
    @Override public int intVal(    int doc){
      return sindex.getOrd(doc + off);
    }
    @Override public int ordVal(    int doc){
      return sindex.getOrd(doc + off);
    }
    @Override public int numOrd(){
      return sindex.getValueCount();
    }
    @Override public boolean exists(    int doc){
      return sindex.getOrd(doc + off) != 0;
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueInt mval=new MutableValueInt();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=sindex.getOrd(doc);
          mval.exists=mval.value != 0;
        }
      }
;
    }
  }
;
}
