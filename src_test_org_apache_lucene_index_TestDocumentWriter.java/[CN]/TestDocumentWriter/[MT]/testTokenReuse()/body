{
  Analyzer analyzer=new Analyzer(){
    @Override public TokenStream tokenStream(    String fieldName,    Reader reader){
      return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT,reader)){
        boolean first=true;
        AttributeSource.State state;
        @Override public boolean incrementToken() throws IOException {
          if (state != null) {
            restoreState(state);
            payloadAtt.setPayload(null);
            posIncrAtt.setPositionIncrement(0);
            termAtt.setTermBuffer(new char[]{'b'},0,1);
            state=null;
            return true;
          }
          boolean hasNext=input.incrementToken();
          if (!hasNext)           return false;
          if (Character.isDigit(termAtt.termBuffer()[0])) {
            posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');
          }
          if (first) {
            payloadAtt.setPayload(new Payload(new byte[]{100}));
            first=false;
          }
          state=captureState();
          return true;
        }
        TermAttribute termAtt=addAttribute(TermAttribute.class);
        PayloadAttribute payloadAtt=addAttribute(PayloadAttribute.class);
        PositionIncrementAttribute posIncrAtt=addAttribute(PositionIncrementAttribute.class);
      }
;
    }
  }
;
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,analyzer));
  Document doc=new Document();
  doc.add(new Field("f1","a 5 a a",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(doc);
  writer.commit();
  SegmentInfo info=writer.newestSegment();
  writer.close();
  SegmentReader reader=SegmentReader.get(true,info,IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
  TermPositions termPositions=reader.termPositions(new Term("f1","a"));
  assertTrue(termPositions.next());
  int freq=termPositions.freq();
  assertEquals(3,freq);
  assertEquals(0,termPositions.nextPosition());
  assertEquals(true,termPositions.isPayloadAvailable());
  assertEquals(6,termPositions.nextPosition());
  assertEquals(false,termPositions.isPayloadAvailable());
  assertEquals(7,termPositions.nextPosition());
  assertEquals(false,termPositions.isPayloadAvailable());
}
