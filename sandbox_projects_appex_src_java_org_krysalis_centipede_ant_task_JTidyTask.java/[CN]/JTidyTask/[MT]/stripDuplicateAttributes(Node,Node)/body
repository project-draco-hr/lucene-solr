{
switch (node.getNodeType()) {
case Node.DOCUMENT_NODE:
{
      Document doc=(Document)node;
      Node child=doc.getFirstChild();
      while (child != null) {
        stripDuplicateAttributes(child,node);
        child=child.getNextSibling();
      }
      break;
    }
case Node.ELEMENT_NODE:
{
    Element elt=(Element)node;
    NamedNodeMap attrs=elt.getAttributes();
    ArrayList nodesToRemove=new ArrayList();
    int nodesToRemoveNum=0;
    for (int i=0; i < attrs.getLength(); i++) {
      Node a=attrs.item(i);
      for (int j=0; j < attrs.getLength(); j++) {
        Node b=attrs.item(j);
        if ((i != j) && (a.getNodeName().equals(b.getNodeName()))) {
          nodesToRemove.add(b);
          nodesToRemoveNum++;
        }
      }
    }
    for (int i=0; i < nodesToRemoveNum; i++) {
      org.w3c.dom.Attr nodeToDelete=(org.w3c.dom.Attr)nodesToRemove.get(i);
      org.w3c.dom.Element nodeToDeleteParent=(org.w3c.dom.Element)node;
      nodeToDeleteParent.removeAttributeNode(nodeToDelete);
    }
    nodesToRemove.clear();
    Node child=elt.getFirstChild();
    while (child != null) {
      stripDuplicateAttributes(child,node);
      child=child.getNextSibling();
    }
    break;
  }
default :
break;
}
}
