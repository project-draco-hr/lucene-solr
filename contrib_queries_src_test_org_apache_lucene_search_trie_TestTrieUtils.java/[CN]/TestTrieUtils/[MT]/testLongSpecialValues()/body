{
  long[] vals=new long[]{Long.MIN_VALUE,Long.MIN_VALUE + 1,Long.MIN_VALUE + 2,-5003400000000L,-4000L,-3000L,-2000L,-1000L,-1L,0L,1L,10L,300L,50006789999999999L,Long.MAX_VALUE - 2,Long.MAX_VALUE - 1,Long.MAX_VALUE};
  String[] prefixVals=new String[vals.length];
  for (int i=0; i < vals.length; i++) {
    prefixVals[i]=TrieUtils.longToPrefixCoded(vals[i]);
    assertEquals("forward and back conversion should generate same long",vals[i],TrieUtils.prefixCodedToLong(prefixVals[i]));
    try {
      TrieUtils.prefixCodedToInt(prefixVals[i]);
      fail("decoding a prefix coded long value as int should fail");
    }
 catch (    NumberFormatException e) {
    }
  }
  for (int i=1; i < prefixVals.length; i++) {
    assertTrue("check sort order",prefixVals[i - 1].compareTo(prefixVals[i]) < 0);
  }
  for (int i=0; i < vals.length; i++) {
    for (int j=0; j < 64; j++) {
      long prefixVal=TrieUtils.prefixCodedToLong(TrieUtils.longToPrefixCoded(vals[i],j));
      long mask=(1L << j) - 1L;
      assertEquals("difference between prefix val and original value for " + vals[i] + " with shift="+ j,vals[i] & mask,vals[i] - prefixVal);
    }
  }
}
