{
  super.setUp();
  counter=Counter.newCounter(true);
  counterThread=new TimerThread(counter);
  counterThread.start();
  final String docText[]={"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero","one blah three","one foo three multiOne","one foobar three multiThree","blueberry pancakes","blueberry pie","blueberry strudel","blueberry pizza"};
  directory=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  for (int i=0; i < N_DOCS; i++) {
    add(docText[i % docText.length],iw);
  }
  reader=iw.getReader();
  iw.close();
  searcher=newSearcher(reader);
  BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
  booleanQuery.add(new TermQuery(new Term(FIELD_NAME,"one")),BooleanClause.Occur.SHOULD);
  for (int i=1; i < docText.length; i++) {
    String[] docTextParts=docText[i].split("\\s+");
    for (    String docTextPart : docTextParts) {
      booleanQuery.add(new TermQuery(new Term(FIELD_NAME,docTextPart)),BooleanClause.Occur.SHOULD);
    }
  }
  query=booleanQuery.build();
  searcher.search(query,1000);
}
