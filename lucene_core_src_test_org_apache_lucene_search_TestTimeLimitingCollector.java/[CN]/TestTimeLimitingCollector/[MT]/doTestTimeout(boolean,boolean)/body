{
  MyHitCollector myHc=new MyHitCollector();
  myHc.setSlowDown(SLOW_DOWN);
  Collector tlCollector=createTimedCollector(myHc,TIME_ALLOWED,greedy);
  TimeExceededException timoutException=null;
  try {
    search(tlCollector);
  }
 catch (  TimeExceededException x) {
    timoutException=x;
  }
catch (  Exception e) {
    assertTrue("Unexpected exception: " + e,false);
  }
  assertNotNull("Timeout expected!",timoutException);
  int exceptionDoc=timoutException.getLastDocCollected();
  int lastCollected=myHc.getLastDocCollected();
  assertTrue("doc collected at timeout must be > 0! or == -1 but was: " + exceptionDoc,exceptionDoc == -1 || exceptionDoc > 0);
  if (greedy) {
    assertTrue("greedy=" + greedy + " exceptionDoc="+ exceptionDoc+ " != lastCollected="+ lastCollected,exceptionDoc == lastCollected);
    assertTrue("greedy, but no hits found!",myHc.hitCount() > 0);
  }
 else {
    assertTrue("greedy=" + greedy + " exceptionDoc="+ exceptionDoc+ " not > lastCollected="+ lastCollected,exceptionDoc > lastCollected);
  }
  assertEquals(timoutException.getTimeAllowed(),TIME_ALLOWED);
  assertTrue("elapsed=" + timoutException.getTimeElapsed() + " <= (allowed-resolution)="+ (TIME_ALLOWED - counterThread.getResolution()),timoutException.getTimeElapsed() > TIME_ALLOWED - counterThread.getResolution());
  if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {
    System.out.println("Informative: timeout exceeded (no action required: most probably just " + " because the test machine is slower than usual):  " + "lastDoc=" + exceptionDoc + " ,&& allowed="+ timoutException.getTimeAllowed()+ " ,&& elapsed="+ timoutException.getTimeElapsed()+ " >= "+ maxTimeStr(multiThreaded));
  }
}
