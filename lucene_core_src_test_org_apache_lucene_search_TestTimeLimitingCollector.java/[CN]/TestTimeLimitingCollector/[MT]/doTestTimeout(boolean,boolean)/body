{
  MyHitCollector myHc=new MyHitCollector();
  myHc.setSlowDown(SLOW_DOWN);
  Collector tlCollector=createTimedCollector(myHc,TIME_ALLOWED,greedy);
  TimeExceededException timeoutException=null;
  try {
    search(tlCollector);
  }
 catch (  TimeExceededException x) {
    timeoutException=x;
  }
catch (  Exception e) {
    assertTrue("Unexpected exception: " + e,false);
  }
  assertNotNull("Timeout expected!",timeoutException);
  int exceptionDoc=timeoutException.getLastDocCollected();
  int lastCollected=myHc.getLastDocCollected();
  if (exceptionDoc != -1) {
    assertTrue("doc collected at timeout must be > 0! or == -1 but was: " + exceptionDoc,exceptionDoc > 0);
    if (greedy) {
      assertTrue("greedy=" + greedy + " exceptionDoc="+ exceptionDoc+ " != lastCollected="+ lastCollected,exceptionDoc == lastCollected);
      assertTrue("greedy, but no hits found!",myHc.hitCount() > 0);
    }
 else {
      assertTrue("greedy=" + greedy + " exceptionDoc="+ exceptionDoc+ " not > lastCollected="+ lastCollected,exceptionDoc > lastCollected);
    }
  }
  assertEquals(timeoutException.getTimeAllowed(),TIME_ALLOWED);
  assertTrue("elapsed=" + timeoutException.getTimeElapsed() + " <= (allowed-resolution)="+ (TIME_ALLOWED - counterThread.getResolution()),timeoutException.getTimeElapsed() > TIME_ALLOWED - counterThread.getResolution());
  if (timeoutException.getTimeElapsed() > maxTime(multiThreaded)) {
    System.out.println("Informative: timeout exceeded (no action required: most probably just " + " because the test machine is slower than usual):  " + "lastDoc=" + exceptionDoc + " ,&& allowed="+ timeoutException.getTimeAllowed()+ " ,&& elapsed="+ timeoutException.getTimeElapsed()+ " >= "+ maxTimeStr(multiThreaded));
  }
}
