{
  context.checkIfIamLeaderFired();
  final String holdElectionPath=context.electionPath + ELECTION_NODE;
  List<String> seqs=zkClient.getChildren(holdElectionPath,null,true);
  sortSeqs(seqs);
  String leaderSeqNodeName=context.leaderSeqPath.substring(context.leaderSeqPath.lastIndexOf('/') + 1);
  if (!seqs.contains(leaderSeqNodeName)) {
    log.warn("Our node is no longer in line to be leader");
    return;
  }
  String prefix=zkClient.getSolrZooKeeper().getSessionId() + "-" + context.id;
  Iterator<String> it=seqs.iterator();
  while (it.hasNext()) {
    String elec=it.next();
    if (!elec.equals(leaderSeqNodeName) && elec.startsWith(prefix)) {
      try {
        String toDelete=holdElectionPath + "/" + elec;
        log.warn("Deleting duplicate registration: {}",toDelete);
        zkClient.delete(toDelete,-1,true);
      }
 catch (      KeeperException.NoNodeException e) {
      }
      it.remove();
    }
  }
  if (leaderSeqNodeName.equals(seqs.get(0))) {
    try {
      runIamLeaderProcess(context,replacement);
    }
 catch (    KeeperException.NodeExistsException e) {
      log.error("node exists",e);
      retryElection(context,false);
      return;
    }
  }
 else {
    String toWatch=seqs.get(0);
    for (    String node : seqs) {
      if (leaderSeqNodeName.equals(node)) {
        break;
      }
      toWatch=node;
    }
    try {
      String watchedNode=holdElectionPath + "/" + toWatch;
      zkClient.getData(watchedNode,watcher=new ElectionWatcher(context.leaderSeqPath,watchedNode,getSeq(context.leaderSeqPath),context),null,true);
      log.info("Watching path {} to know if I could be the leader",watchedNode);
    }
 catch (    KeeperException.SessionExpiredException e) {
      throw e;
    }
catch (    KeeperException.NoNodeException e) {
      checkIfIamLeader(context,true);
    }
catch (    KeeperException e) {
      log.warn("Failed setting watch",e);
      checkIfIamLeader(context,true);
    }
  }
}
