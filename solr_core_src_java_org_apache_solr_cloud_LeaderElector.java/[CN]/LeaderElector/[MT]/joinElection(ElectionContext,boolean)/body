{
  context.joinedElectionFired();
  final String shardsElectZkPath=context.electionPath + LeaderElector.ELECTION_NODE;
  long sessionId=zkClient.getSolrZooKeeper().getSessionId();
  String id=sessionId + "-" + context.id;
  String leaderSeqPath=null;
  boolean cont=true;
  int tries=0;
  while (cont) {
    try {
      leaderSeqPath=zkClient.create(shardsElectZkPath + "/" + id+ "-n_",null,CreateMode.EPHEMERAL_SEQUENTIAL,false);
      context.leaderSeqPath=leaderSeqPath;
      cont=false;
    }
 catch (    ConnectionLossException e) {
      List<String> entries=zkClient.getChildren(shardsElectZkPath,null,true);
      boolean foundId=false;
      for (      String entry : entries) {
        String nodeId=getNodeId(entry);
        if (id.equals(nodeId)) {
          foundId=true;
          break;
        }
      }
      if (!foundId) {
        cont=true;
        if (tries++ > 20) {
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
        }
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e2) {
          Thread.currentThread().interrupt();
        }
      }
    }
catch (    KeeperException.NoNodeException e) {
      if (tries++ > 20) {
        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
      }
      cont=true;
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e2) {
        Thread.currentThread().interrupt();
      }
    }
  }
  int seq=getSeq(leaderSeqPath);
  checkIfIamLeader(seq,context,replacement);
  return seq;
}
