{
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  waitForThingsToLevelOut(15);
  del("*:*");
  List<CloudJettyRunner> skipServers=new ArrayList<CloudJettyRunner>();
  int docId=0;
  indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"to come to the aid of their country.");
  indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"old haven was blue.");
  skipServers.add(shardToJetty.get("shard1").get(1));
  indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"but the song was fancy.");
  skipServers.add(shardToJetty.get("shard1").get(2));
  indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"under the moon and over the lake");
  commit();
  waitForRecoveriesToFinish(false);
  String shardFailMessage=checkShardConsistency("shard1",true,false);
  assertNotNull(shardFailMessage);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.SYNCSHARD.toString());
  params.set("collection","collection1");
  params.set("shard","shard1");
  SolrRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  String baseUrl=((HttpSolrServer)shardToJetty.get("shard1").get(2).client.solrClient).getBaseURL();
  baseUrl=baseUrl.substring(0,baseUrl.length() - "collection1".length());
  HttpSolrServer baseServer=new HttpSolrServer(baseUrl);
  baseServer.setConnectionTimeout(15000);
  baseServer.setSoTimeout(30000);
  baseServer.request(request);
  waitForThingsToLevelOut(15);
  checkShardConsistency(false,true);
  long cloudClientDocs=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  assertEquals(4,cloudClientDocs);
  CloudJettyRunner leaderJetty=shardToLeaderJetty.get("shard1");
  skipServers=getRandomOtherJetty(leaderJetty,null);
  indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"to come to the aid of their country.");
  Set<CloudJettyRunner> jetties=new HashSet<CloudJettyRunner>();
  jetties.addAll(shardToJetty.get("shard1"));
  jetties.remove(leaderJetty);
  assertEquals(shardCount - 1,jetties.size());
  chaosMonkey.killJetty(leaderJetty);
  Thread.sleep(2000);
  waitForThingsToLevelOut(90);
  Thread.sleep(1000);
  checkShardConsistency(false,true);
  cloudClientDocs=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  assertEquals(5,cloudClientDocs);
  CloudJettyRunner deadJetty=leaderJetty;
  while (deadJetty == leaderJetty) {
    updateMappingsFromZk(this.jettys,this.clients);
    leaderJetty=shardToLeaderJetty.get("shard1");
  }
  ChaosMonkey.start(deadJetty.jetty);
  waitTillRecovered();
  skipServers=getRandomOtherJetty(leaderJetty,deadJetty);
  skipServers.addAll(getRandomOtherJetty(leaderJetty,deadJetty));
  assertEquals(2,skipServers.size());
  for (int i=0; i < 300; i++) {
    indexDoc(skipServers,id,docId++,i1,50,tlong,50,t1,"to come to the aid of their country.");
  }
  commit();
  Thread.sleep(1000);
  waitForRecoveriesToFinish(false);
  shardFailMessage=waitTillInconsistent();
  assertNotNull("Test Setup Failure: shard1 should have just been set up to be inconsistent - but it's still consistent. Leader:" + leaderJetty.url + " Dead Guy:"+ deadJetty.url+ "skip list:"+ skipServers,shardFailMessage);
  jetties=new HashSet<CloudJettyRunner>();
  jetties.addAll(shardToJetty.get("shard1"));
  jetties.remove(leaderJetty);
  assertEquals(shardCount - 1,jetties.size());
  chaosMonkey.killJetty(leaderJetty);
  Thread.sleep(3000);
  waitForThingsToLevelOut(90);
  Thread.sleep(2000);
  waitForRecoveriesToFinish(false);
  checkShardConsistency(true,true);
}
