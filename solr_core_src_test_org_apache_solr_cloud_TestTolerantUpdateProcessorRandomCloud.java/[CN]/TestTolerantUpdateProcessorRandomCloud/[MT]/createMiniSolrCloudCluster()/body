{
  final String configName="solrCloudCollectionConfig";
  final File configDir=new File(TEST_HOME() + File.separator + "collection1"+ File.separator+ "conf");
  final int numShards=TestUtil.nextInt(random(),2,TEST_NIGHTLY ? 5 : 3);
  final int repFactor=TestUtil.nextInt(random(),2,TEST_NIGHTLY ? 5 : 3);
  final int numServers=1 + (numShards * repFactor);
  log.info("Configuring cluster: servers={}, shards={}, repfactor={}",numServers,numShards,repFactor);
  configureCluster(numServers).addConfig(configName,configDir.toPath()).configure();
  TestTolerantUpdateProcessorCloud.assertSpinLoopAllJettyAreRunning(cluster);
  Map<String,String> collectionProperties=new HashMap<>();
  collectionProperties.put("config","solrconfig-distrib-update-processor-chains.xml");
  collectionProperties.put("schema","schema15.xml");
  assertNotNull(cluster.createCollection(COLLECTION_NAME,numShards,repFactor,configName,null,null,collectionProperties));
  CLOUD_CLIENT=cluster.getSolrClient();
  CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);
  NODE_CLIENTS=new ArrayList<SolrClient>(numServers);
  for (  JettySolrRunner jetty : cluster.getJettySolrRunners()) {
    URL jettyURL=jetty.getBaseUrl();
    NODE_CLIENTS.add(new HttpSolrClient(jettyURL.toString() + "/" + COLLECTION_NAME+ "/"));
  }
  assertEquals(numServers,NODE_CLIENTS.size());
  ZkStateReader zkStateReader=CLOUD_CLIENT.getZkStateReader();
  AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION_NAME,zkStateReader,true,true,330);
}
