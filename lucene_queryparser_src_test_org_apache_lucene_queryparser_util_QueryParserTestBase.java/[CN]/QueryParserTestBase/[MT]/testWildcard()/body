{
  assertQueryEquals("term*",null,"term*");
  assertQueryEquals("term*^2",null,"term*^2.0");
  assertQueryEquals("term~",null,"term~2");
  assertQueryEquals("term~1",null,"term~1");
  assertQueryEquals("term~0.7",null,"term~1");
  assertQueryEquals("term~^3",null,"term~2^3.0");
  assertQueryEquals("term^3~",null,"term~2^3.0");
  assertQueryEquals("term*germ",null,"term*germ");
  assertQueryEquals("term*germ^3",null,"term*germ^3.0");
  assertTrue(getQuery("term*",null) instanceof PrefixQuery);
  assertTrue(getQuery("term*^2",null) instanceof PrefixQuery);
  assertTrue(getQuery("term~",null) instanceof FuzzyQuery);
  assertTrue(getQuery("term~0.7",null) instanceof FuzzyQuery);
  FuzzyQuery fq=(FuzzyQuery)getQuery("term~0.7",null);
  assertEquals(1,fq.getMaxEdits());
  assertEquals(FuzzyQuery.defaultPrefixLength,fq.getPrefixLength());
  fq=(FuzzyQuery)getQuery("term~",null);
  assertEquals(2,fq.getMaxEdits());
  assertEquals(FuzzyQuery.defaultPrefixLength,fq.getPrefixLength());
  assertParseException("term~1.1");
  assertTrue(getQuery("term*germ",null) instanceof WildcardQuery);
  assertWildcardQueryEquals("Term*",true,"term*");
  assertWildcardQueryEquals("term*",true,"term*");
  assertWildcardQueryEquals("Term*",true,"term*");
  assertWildcardQueryEquals("TERM*",true,"term*");
  assertWildcardQueryEquals("term*",false,"term*");
  assertWildcardQueryEquals("Term*",false,"Term*");
  assertWildcardQueryEquals("TERM*",false,"TERM*");
  assertWildcardQueryEquals("Te?m","te?m");
  assertWildcardQueryEquals("te?m",true,"te?m");
  assertWildcardQueryEquals("Te?m",true,"te?m");
  assertWildcardQueryEquals("TE?M",true,"te?m");
  assertWildcardQueryEquals("Te?m*gerM",true,"te?m*germ");
  assertWildcardQueryEquals("te?m",false,"te?m");
  assertWildcardQueryEquals("Te?m",false,"Te?m");
  assertWildcardQueryEquals("TE?M",false,"TE?M");
  assertWildcardQueryEquals("Te?m*gerM",false,"Te?m*gerM");
  assertWildcardQueryEquals("Term~","term~2");
  assertWildcardQueryEquals("Term~",true,"term~2");
  assertWildcardQueryEquals("Term~",false,"Term~2");
  assertWildcardQueryEquals("[A TO C]","[a TO c]");
  assertWildcardQueryEquals("[A TO C]",true,"[a TO c]");
  assertWildcardQueryEquals("[A TO C]",false,"[A TO C]");
  try {
    assertWildcardQueryEquals("*Term",true,"*term");
    fail();
  }
 catch (  ParseException pe) {
  }
  try {
    assertWildcardQueryEquals("?Term",true,"?term");
    fail();
  }
 catch (  ParseException pe) {
  }
  assertWildcardQueryEquals("*Term",true,"*term",true);
  assertWildcardQueryEquals("?Term",true,"?term",true);
}
