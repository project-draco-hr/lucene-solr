{
  assertQueryEquals("term term^3.0 term",qpAnalyzer,"term (term)^3.0 term");
  assertQueryEquals("term stop^3.0 term",qpAnalyzer,"term term");
  assertQueryEquals("term term term",qpAnalyzer,"term term term");
  assertQueryEquals("term +stop term",qpAnalyzer,"term term");
  assertQueryEquals("term -stop term",qpAnalyzer,"term term");
  assertQueryEquals("drop AND (stop) AND roll",qpAnalyzer,"+drop +roll");
  assertQueryEquals("term +(stop) term",qpAnalyzer,"term term");
  assertQueryEquals("term -(stop) term",qpAnalyzer,"term term");
  assertQueryEquals("drop AND stop AND roll",qpAnalyzer,"+drop +roll");
  assertQueryEquals("term AND NOT phrase term",qpAnalyzer,"+term -(phrase1 phrase2) term");
  assertQueryEquals("stop^3",qpAnalyzer,"");
  assertQueryEquals("stop",qpAnalyzer,"");
  assertQueryEquals("(stop)^3",qpAnalyzer,"");
  assertQueryEquals("((stop))^3",qpAnalyzer,"");
  assertQueryEquals("(stop^3)",qpAnalyzer,"");
  assertQueryEquals("((stop)^3)",qpAnalyzer,"");
  assertQueryEquals("(stop)",qpAnalyzer,"");
  assertQueryEquals("((stop))",qpAnalyzer,"");
  assertTrue(getQuery("term term term",qpAnalyzer) instanceof BooleanQuery);
  assertTrue(getQuery("term +stop",qpAnalyzer) instanceof TermQuery);
  CommonQueryParserConfiguration cqpc=getParserConfig(qpAnalyzer);
  setDefaultOperatorAND(cqpc);
  assertQueryEquals(cqpc,"field","phrase","+phrase1 +phrase2");
}
