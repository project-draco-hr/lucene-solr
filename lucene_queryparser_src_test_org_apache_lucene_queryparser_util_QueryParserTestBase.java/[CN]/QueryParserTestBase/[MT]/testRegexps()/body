{
  CommonQueryParserConfiguration qp=getParserConfig(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false));
  RegexpQuery q=new RegexpQuery(new Term("field","[a-z][123]"));
  assertEquals(q,getQuery("/[a-z][123]/",qp));
  qp.setLowercaseExpandedTerms(true);
  assertEquals(q,getQuery("/[A-Z][123]/",qp));
  q.setBoost(0.5f);
  assertEquals(q,getQuery("/[A-Z][123]/^0.5",qp));
  qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
  q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
  assertTrue(getQuery("/[A-Z][123]/^0.5",qp) instanceof RegexpQuery);
  assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((RegexpQuery)getQuery("/[A-Z][123]/^0.5",qp)).getRewriteMethod());
  assertEquals(q,getQuery("/[A-Z][123]/^0.5",qp));
  qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
  Query escaped=new RegexpQuery(new Term("field","[a-z]\\/[123]"));
  assertEquals(escaped,getQuery("/[a-z]\\/[123]/",qp));
  Query escaped2=new RegexpQuery(new Term("field","[a-z]\\*[123]"));
  assertEquals(escaped2,getQuery("/[a-z]\\*[123]/",qp));
  BooleanQuery complex=new BooleanQuery();
  complex.add(new RegexpQuery(new Term("field","[a-z]\\/[123]")),Occur.MUST);
  complex.add(new TermQuery(new Term("path","/etc/init.d/")),Occur.MUST);
  complex.add(new TermQuery(new Term("field","/etc/init[.]d/lucene/")),Occur.SHOULD);
  assertEquals(complex,getQuery("/[a-z]\\/[123]/ AND path:\"/etc/init.d/\" OR \"/etc\\/init\\[.\\]d/lucene/\" ",qp));
  Query re=new RegexpQuery(new Term("field","http.*"));
  assertEquals(re,getQuery("field:/http.*/",qp));
  assertEquals(re,getQuery("/http.*/",qp));
  re=new RegexpQuery(new Term("field","http~0.5"));
  assertEquals(re,getQuery("field:/http~0.5/",qp));
  assertEquals(re,getQuery("/http~0.5/",qp));
  re=new RegexpQuery(new Term("field","boo"));
  assertEquals(re,getQuery("field:/boo/",qp));
  assertEquals(re,getQuery("/boo/",qp));
  assertEquals(new TermQuery(new Term("field","/boo/")),getQuery("\"/boo/\"",qp));
  assertEquals(new TermQuery(new Term("field","/boo/")),getQuery("\\/boo\\/",qp));
  BooleanQuery two=new BooleanQuery();
  two.add(new RegexpQuery(new Term("field","foo")),Occur.SHOULD);
  two.add(new RegexpQuery(new Term("field","bar")),Occur.SHOULD);
  assertEquals(two,getQuery("field:/foo/ field:/bar/",qp));
  assertEquals(two,getQuery("/foo/ /bar/",qp));
}
