{
  assertQueryEquals("[ a TO z]",null,"[a TO z]");
  assertQueryEquals("[ a TO z}",null,"[a TO z}");
  assertQueryEquals("{ a TO z]",null,"{a TO z]");
  assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE,((TermRangeQuery)getQuery("[ a TO z]")).getRewriteMethod());
  CommonQueryParserConfiguration qp=getParserConfig(new MockAnalyzer(random(),MockTokenizer.SIMPLE,true));
  qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
  assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)getQuery("[ a TO z]",qp)).getRewriteMethod());
  assertQueryEquals("[ a TO * ]",null,"[a TO *]");
  assertQueryEquals("[ * TO z ]",null,"[* TO z]");
  assertQueryEquals("[ * TO * ]",null,"[* TO *]");
  assertQueryEquals("{ a TO z ]",null,"{a TO z]");
  assertQueryEquals("[ a TO z }",null,"[a TO z}");
  assertQueryEquals("{ a TO * ]",null,"{a TO *]");
  assertQueryEquals("[ * TO z }",null,"[* TO z}");
  assertQueryEquals("[ a TO z ]",null,"[a TO z]");
  assertQueryEquals("{ a TO z}",null,"{a TO z}");
  assertQueryEquals("{ a TO z }",null,"{a TO z}");
  assertQueryEquals("{ a TO z }^2.0",null,"{a TO z}^2.0");
  assertQueryEquals("[ a TO z] OR bar",null,"[a TO z] bar");
  assertQueryEquals("[ a TO z] AND bar",null,"+[a TO z] +bar");
  assertQueryEquals("( bar blar { a TO z}) ",null,"bar blar {a TO z}");
  assertQueryEquals("gack ( bar blar { a TO z}) ",null,"gack (bar blar {a TO z})");
  assertQueryEquals("[* TO Z]",null,"[* TO z]");
  assertQueryEquals("[A TO *]",null,"[a TO *]");
  assertQueryEquals("[* TO *]",null,"[* TO *]");
}
