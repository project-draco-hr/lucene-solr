{
  Directory directory=newDirectory();
  Analyzer analyzer=new MockAnalyzer(random);
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer);
  final MergePolicy mp=conf.getMergePolicy();
  if (mp instanceof LogMergePolicy) {
    ((LogMergePolicy)mp).setUseCompoundFile(useCompoundFiles);
  }
  IndexWriter writer=new IndexWriter(directory,conf);
  if (VERBOSE) {
    System.out.println("TEST: now build index MAX_DOCS=" + MAX_DOCS);
    writer.setInfoStream(System.out);
  }
  for (int j=0; j < MAX_DOCS; j++) {
    Document d=new Document();
    d.add(newField(PRIORITY_FIELD,HIGH_PRIORITY,Field.Store.YES,Field.Index.ANALYZED));
    d.add(newField(ID_FIELD,Integer.toString(j),Field.Store.YES,Field.Index.ANALYZED));
    writer.addDocument(d);
  }
  writer.close();
  IndexSearcher searcher=new IndexSearcher(directory,true);
  Query query=new TermQuery(new Term(PRIORITY_FIELD,HIGH_PRIORITY));
  out.println("Query: " + query.toString(PRIORITY_FIELD));
  if (VERBOSE) {
    System.out.println("TEST: search query=" + query);
  }
  final Sort sort=new Sort(new SortField[]{SortField.FIELD_SCORE,new SortField(ID_FIELD,SortField.Type.INT)});
  ScoreDoc[] hits=searcher.search(query,null,MAX_DOCS,sort).scoreDocs;
  printHits(out,hits,searcher);
  checkHits(hits,MAX_DOCS,searcher);
  searcher.close();
  searcher=new IndexSearcher(directory,true);
  hits=null;
  BooleanQuery booleanQuery=new BooleanQuery();
  booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD,HIGH_PRIORITY)),BooleanClause.Occur.SHOULD);
  booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD,MED_PRIORITY)),BooleanClause.Occur.SHOULD);
  out.println("Query: " + booleanQuery.toString(PRIORITY_FIELD));
  hits=searcher.search(booleanQuery,null,MAX_DOCS,sort).scoreDocs;
  printHits(out,hits,searcher);
  checkHits(hits,MAX_DOCS,searcher);
  searcher.close();
  directory.close();
}
