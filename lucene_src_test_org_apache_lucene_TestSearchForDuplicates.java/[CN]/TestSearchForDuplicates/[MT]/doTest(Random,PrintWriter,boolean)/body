{
  Directory directory=newDirectory();
  Analyzer analyzer=new MockAnalyzer();
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer);
  LogMergePolicy lmp=(LogMergePolicy)conf.getMergePolicy();
  lmp.setUseCompoundFile(useCompoundFiles);
  lmp.setUseCompoundDocStore(useCompoundFiles);
  IndexWriter writer=new IndexWriter(directory,conf);
  final int MAX_DOCS=225;
  for (int j=0; j < MAX_DOCS; j++) {
    Document d=new Document();
    d.add(new Field(PRIORITY_FIELD,HIGH_PRIORITY,Field.Store.YES,Field.Index.ANALYZED));
    d.add(new Field(ID_FIELD,Integer.toString(j),Field.Store.YES,Field.Index.ANALYZED));
    writer.addDocument(d);
  }
  writer.close();
  Searcher searcher=new IndexSearcher(directory,true);
  QueryParser parser=new QueryParser(TEST_VERSION_CURRENT,PRIORITY_FIELD,analyzer);
  Query query=parser.parse(HIGH_PRIORITY);
  out.println("Query: " + query.toString(PRIORITY_FIELD));
  ScoreDoc[] hits=searcher.search(query,null,MAX_DOCS).scoreDocs;
  printHits(out,hits,searcher);
  checkHits(hits,MAX_DOCS,searcher);
  searcher.close();
  searcher=new IndexSearcher(directory,true);
  hits=null;
  parser=new QueryParser(TEST_VERSION_CURRENT,PRIORITY_FIELD,analyzer);
  query=parser.parse(HIGH_PRIORITY + " OR " + MED_PRIORITY);
  out.println("Query: " + query.toString(PRIORITY_FIELD));
  hits=searcher.search(query,null,MAX_DOCS).scoreDocs;
  printHits(out,hits,searcher);
  checkHits(hits,MAX_DOCS,searcher);
  searcher.close();
  directory.close();
}
