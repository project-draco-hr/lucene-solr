{
  DeleteUpdateCommand deleteCmd=new DeleteUpdateCommand(req);
  SolrParams params=req.getParams();
  deleteCmd.commitWithin=params.getInt(UpdateParams.COMMIT_WITHIN,-1);
  for (int i=0; i < parser.getAttributeCount(); i++) {
    String attrName=parser.getAttributeLocalName(i);
    String attrVal=parser.getAttributeValue(i);
    if ("fromPending".equals(attrName)) {
    }
 else     if ("fromCommitted".equals(attrName)) {
    }
 else     if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {
      deleteCmd.commitWithin=Integer.parseInt(attrVal);
    }
 else {
      log.warn("XML element <delete> has invalid XML attr: " + attrName);
    }
  }
  StringBuilder text=new StringBuilder();
  while (true) {
    int event=parser.next();
switch (event) {
case XMLStreamConstants.START_ELEMENT:
      String mode=parser.getLocalName();
    if (!("id".equals(mode) || "query".equals(mode))) {
      String msg="XML element <delete> has invalid XML child element: " + mode;
      log.warn(msg);
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);
    }
  text.setLength(0);
if ("id".equals(mode)) {
  for (int i=0; i < parser.getAttributeCount(); i++) {
    String attrName=parser.getAttributeLocalName(i);
    String attrVal=parser.getAttributeValue(i);
    if (UpdateRequestHandler.VERSION.equals(attrName)) {
      deleteCmd.setVersion(Long.parseLong(attrVal));
    }
  }
}
break;
case XMLStreamConstants.END_ELEMENT:
String currTag=parser.getLocalName();
if ("id".equals(currTag)) {
deleteCmd.setId(text.toString());
}
 else if ("query".equals(currTag)) {
deleteCmd.setQuery(text.toString());
}
 else if ("delete".equals(currTag)) {
return;
}
 else {
String msg="XML element <delete> has invalid XML (closing) child element: " + currTag;
log.warn(msg);
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);
}
processor.processDelete(deleteCmd);
deleteCmd.clear();
break;
case XMLStreamConstants.SPACE:
case XMLStreamConstants.CDATA:
case XMLStreamConstants.CHARACTERS:
text.append(parser.getText());
break;
}
}
}
