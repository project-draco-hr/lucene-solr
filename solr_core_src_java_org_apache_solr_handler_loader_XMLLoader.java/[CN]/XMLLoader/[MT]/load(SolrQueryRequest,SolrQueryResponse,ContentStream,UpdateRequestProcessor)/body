{
  final String charset=ContentStreamBase.getCharsetFromContentType(stream.getContentType());
  InputStream is=null;
  XMLStreamReader parser=null;
  String tr=req.getParams().get(CommonParams.TR,null);
  if (tr != null) {
    Transformer t=getTransformer(tr,req);
    final DOMResult result=new DOMResult();
    try {
      is=stream.getStream();
      final InputSource isrc=new InputSource(is);
      isrc.setEncoding(charset);
      final SAXSource source=new SAXSource(isrc);
      t.transform(source,result);
    }
 catch (    TransformerException te) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,te.getMessage(),te);
    }
 finally {
      IOUtils.closeQuietly(is);
    }
    try {
      parser=inputFactory.createXMLStreamReader(new DOMSource(result.getNode()));
      this.processUpdate(req,processor,parser);
    }
 catch (    XMLStreamException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);
    }
 finally {
      if (parser != null)       parser.close();
    }
  }
 else {
    try {
      is=stream.getStream();
      if (UpdateRequestHandler.log.isTraceEnabled()) {
        final byte[] body=IOUtils.toByteArray(is);
        UpdateRequestHandler.log.trace("body",new String(body,(charset == null) ? ContentStreamBase.DEFAULT_CHARSET : charset));
        IOUtils.closeQuietly(is);
        is=new ByteArrayInputStream(body);
      }
      parser=(charset == null) ? inputFactory.createXMLStreamReader(is) : inputFactory.createXMLStreamReader(is,charset);
      this.processUpdate(req,processor,parser);
    }
 catch (    XMLStreamException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e.getMessage(),e);
    }
 finally {
      if (parser != null)       parser.close();
      IOUtils.closeQuietly(is);
    }
  }
}
