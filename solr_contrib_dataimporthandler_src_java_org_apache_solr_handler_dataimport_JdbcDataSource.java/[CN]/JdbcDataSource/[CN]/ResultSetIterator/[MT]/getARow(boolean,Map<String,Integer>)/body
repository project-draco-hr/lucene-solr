{
  if (getResultSet() == null)   return null;
  Map<String,Object> result=new HashMap<>();
  for (  String colName : getColNames()) {
    try {
      if (!convertType) {
        Object value=getResultSet().getObject(colName);
        if (value instanceof BigDecimal || value instanceof BigInteger) {
          result.put(colName,value.toString());
        }
 else {
          result.put(colName,value);
        }
        continue;
      }
      Integer type=fieldNameVsType.get(colName);
      if (type == null)       type=Types.VARCHAR;
switch (type) {
case Types.INTEGER:
        result.put(colName,getResultSet().getInt(colName));
      break;
case Types.FLOAT:
    result.put(colName,getResultSet().getFloat(colName));
  break;
case Types.BIGINT:
result.put(colName,getResultSet().getLong(colName));
break;
case Types.DOUBLE:
result.put(colName,getResultSet().getDouble(colName));
break;
case Types.DATE:
result.put(colName,getResultSet().getTimestamp(colName));
break;
case Types.BOOLEAN:
result.put(colName,getResultSet().getBoolean(colName));
break;
case Types.BLOB:
result.put(colName,getResultSet().getBytes(colName));
break;
default :
result.put(colName,getResultSet().getString(colName));
break;
}
}
 catch (SQLException e) {
logError("Error reading data ",e);
wrapAndThrow(SEVERE,e,"Error reading data from database");
}
}
return result;
}
