{
  resolveVariables(context,initProps);
  final String jndiName=initProps.getProperty(JNDI_NAME);
  final String url=initProps.getProperty(URL);
  final String driver=initProps.getProperty(DRIVER);
  if (url == null && jndiName == null)   throw new DataImportHandlerException(SEVERE,"JDBC URL or JNDI name has to be specified");
  if (driver != null) {
    try {
      DocBuilder.loadClass(driver,context.getSolrCore());
    }
 catch (    ClassNotFoundException e) {
      wrapAndThrow(SEVERE,e,"Could not load driver: " + driver);
    }
  }
 else {
    if (jndiName == null) {
      throw new DataImportHandlerException(SEVERE,"One of driver or jndiName must be specified in the data source");
    }
  }
  String s=initProps.getProperty("maxRows");
  if (s != null) {
    maxRows=Integer.parseInt(s);
  }
  return factory=new Callable<Connection>(){
    @Override public Connection call() throws Exception {
      LOG.info("Creating a connection for entity " + context.getEntityAttribute(DataImporter.NAME) + " with URL: "+ url);
      long start=System.currentTimeMillis();
      Connection c=null;
      if (jndiName != null) {
        c=getFromJndi(initProps,jndiName);
      }
 else       if (url != null) {
        try {
          c=DriverManager.getConnection(url,initProps);
        }
 catch (        SQLException e) {
          Driver d=(Driver)DocBuilder.loadClass(driver,context.getSolrCore()).newInstance();
          c=d.connect(url,initProps);
        }
      }
      if (c != null) {
        try {
          initializeConnection(c,initProps);
        }
 catch (        SQLException e) {
          try {
            c.close();
          }
 catch (          SQLException e2) {
            LOG.warn("Exception closing connection during cleanup",e2);
          }
          throw new DataImportHandlerException(SEVERE,"Exception initializing SQL connection",e);
        }
      }
      LOG.info("Time taken for getConnection(): " + (System.currentTimeMillis() - start));
      return c;
    }
    private void initializeConnection(    Connection c,    final Properties initProps) throws SQLException {
      if (Boolean.parseBoolean(initProps.getProperty("readOnly"))) {
        c.setReadOnly(true);
        c.setAutoCommit(true);
        c.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
        c.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
      }
      if (!Boolean.parseBoolean(initProps.getProperty("autoCommit"))) {
        c.setAutoCommit(false);
      }
      String transactionIsolation=initProps.getProperty("transactionIsolation");
      if ("TRANSACTION_READ_UNCOMMITTED".equals(transactionIsolation)) {
        c.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
      }
 else       if ("TRANSACTION_READ_COMMITTED".equals(transactionIsolation)) {
        c.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
      }
 else       if ("TRANSACTION_REPEATABLE_READ".equals(transactionIsolation)) {
        c.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
      }
 else       if ("TRANSACTION_SERIALIZABLE".equals(transactionIsolation)) {
        c.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
      }
 else       if ("TRANSACTION_NONE".equals(transactionIsolation)) {
        c.setTransactionIsolation(Connection.TRANSACTION_NONE);
      }
      String holdability=initProps.getProperty("holdability");
      if ("CLOSE_CURSORS_AT_COMMIT".equals(holdability)) {
        c.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
      }
 else       if ("HOLD_CURSORS_OVER_COMMIT".equals(holdability)) {
        c.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
      }
    }
    private Connection getFromJndi(    final Properties initProps,    final String jndiName) throws NamingException, SQLException {
      Connection c=null;
      InitialContext ctx=new InitialContext();
      Object jndival=ctx.lookup(jndiName);
      if (jndival instanceof javax.sql.DataSource) {
        javax.sql.DataSource dataSource=(javax.sql.DataSource)jndival;
        String user=(String)initProps.get("user");
        String pass=(String)initProps.get("password");
        if (user == null || user.trim().equals("")) {
          c=dataSource.getConnection();
        }
 else {
          c=dataSource.getConnection(user,pass);
        }
      }
 else {
        throw new DataImportHandlerException(SEVERE,"the jndi name : '" + jndiName + "' is not a valid javax.sql.DataSource");
      }
      return c;
    }
  }
;
}
