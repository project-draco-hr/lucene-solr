{
  for (  Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {
    String indexFieldName=ent.getKey();
    IntsRef ordinals=new IntsRef(32);
    for (    FacetField facetField : ent.getValue()) {
      FacetsConfig.DimConfig ft=config.getDimConfig(facetField.dim);
      if (facetField.path.length > 1 && ft.hierarchical == false) {
        throw new IllegalArgumentException("dimension \"" + facetField.dim + "\" is not hierarchical yet has "+ facetField.path.length+ " components");
      }
      FacetLabel cp=FacetLabel.create(facetField.dim,facetField.path);
      int ordinal=taxoWriter.addCategory(cp);
      ordinals.ints[ordinals.length++]=ordinal;
      if (ft.hierarchical && ft.multiValued) {
        int parent=taxoWriter.getParent(ordinal);
        while (parent > 0) {
          if (ordinals.ints.length == ordinals.length) {
            ordinals.grow(ordinals.length + 1);
          }
          ordinals.ints[ordinals.length++]=parent;
          parent=taxoWriter.getParent(parent);
        }
      }
      for (int i=2; i <= cp.length; i++) {
        addedIndexedFields.add(new StringField(indexFieldName,pathToString(cp.components,i),Field.Store.NO));
      }
    }
    addedStoredFields.add(new BinaryDocValuesField(indexFieldName,dedupAndEncode(ordinals)));
  }
}
