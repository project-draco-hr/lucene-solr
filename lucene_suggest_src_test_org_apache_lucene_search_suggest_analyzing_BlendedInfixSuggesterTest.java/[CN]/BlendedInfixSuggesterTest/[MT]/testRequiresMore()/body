{
  BytesRef lake=new BytesRef("lake");
  BytesRef star=new BytesRef("star");
  BytesRef ret=new BytesRef("ret");
  Input keys[]=new Input[]{new Input("top of the lake",15,lake),new Input("star wars: episode v - the empire strikes back",12,star),new Input("the returned",10,ret)};
  File tempDir=_TestUtil.getTempDir("BlendedInfixSuggesterTest");
  Analyzer a=new StandardAnalyzer(TEST_VERSION_CURRENT,CharArraySet.EMPTY_SET);
  BlendedInfixSuggester suggester=new BlendedInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,1){
    @Override protected Directory getDirectory(    File path){
      return newFSDirectory(path);
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  long w0=getInResults(suggester,"the",ret,2);
  assertTrue(w0 < 1);
  long w1=getInResults(suggester,"the",ret,3);
  assertTrue(w1 > 1);
  suggester.close();
  suggester=new BlendedInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,2){
    @Override protected Directory getDirectory(    File path){
      return newFSDirectory(path);
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  long w2=getInResults(suggester,"the",ret,2);
  assertTrue(w2 > 1);
  long w3=getInResults(suggester,"the",star,2);
  assertTrue(w3 < 1);
  suggester.close();
}
