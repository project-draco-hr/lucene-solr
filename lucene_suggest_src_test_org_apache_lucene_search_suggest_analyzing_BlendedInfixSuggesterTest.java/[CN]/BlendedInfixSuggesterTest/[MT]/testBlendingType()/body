{
  BytesRef pl=new BytesRef("lake");
  long w=20;
  Input keys[]=new Input[]{new Input("top of the lake",w,pl)};
  File tempDir=_TestUtil.getTempDir("BlendedInfixSuggesterTest");
  Analyzer a=new StandardAnalyzer(TEST_VERSION_CURRENT,CharArraySet.EMPTY_SET);
  BlendedInfixSuggester suggester=new BlendedInfixSuggester(TEST_VERSION_CURRENT,tempDir,a){
    @Override protected Directory getDirectory(    File path){
      return newFSDirectory(path);
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  assertEquals(w,getInResults(suggester,"top",pl,1));
  assertEquals((int)(w * (1 - 0.10 * 2)),getInResults(suggester,"the",pl,1));
  assertEquals((int)(w * (1 - 0.10 * 3)),getInResults(suggester,"lake",pl,1));
  suggester.close();
  suggester=new BlendedInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,1){
    @Override protected Directory getDirectory(    File path){
      return newFSDirectory(path);
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  assertEquals(w,getInResults(suggester,"top",pl,1));
  assertEquals((int)(w * 1 / (1 + 2)),getInResults(suggester,"the",pl,1));
  assertEquals((int)(w * 1 / (1 + 3)),getInResults(suggester,"lake",pl,1));
  suggester.close();
}
