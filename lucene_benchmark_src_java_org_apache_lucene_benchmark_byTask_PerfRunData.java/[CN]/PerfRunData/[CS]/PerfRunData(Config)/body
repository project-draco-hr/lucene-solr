{
  this.config=config;
  analyzer=NewAnalyzerTask.createAnalyzer(config.get("analyzer","org.apache.lucene.analysis.standard.StandardAnalyzer"));
  String sourceClass=config.get("content.source","org.apache.lucene.benchmark.byTask.feeds.SingleDocSource");
  contentSource=Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();
  contentSource.setConfig(config);
  docMaker=Class.forName(config.get("doc.maker","org.apache.lucene.benchmark.byTask.feeds.DocMaker")).asSubclass(DocMaker.class).newInstance();
  docMaker.setConfig(config,contentSource);
  facetSource=Class.forName(config.get("facet.source","org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource")).asSubclass(FacetSource.class).newInstance();
  facetSource.setConfig(config);
  readTaskQueryMaker=new HashMap<Class<? extends ReadTask>,QueryMaker>();
  qmkrClass=Class.forName(config.get("query.maker","org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker")).asSubclass(QueryMaker.class);
  reinit(false);
  points=new Points(config);
  if (Boolean.valueOf(config.get("log.queries","false")).booleanValue()) {
    System.out.println("------------> queries:");
    System.out.println(getQueryMaker(new SearchTask(this)).printQueries());
  }
}
