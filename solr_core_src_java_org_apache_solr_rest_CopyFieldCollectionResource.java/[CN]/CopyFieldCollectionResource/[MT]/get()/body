{
  try {
    final List<SimpleOrderedMap<Object>> props=new ArrayList<SimpleOrderedMap<Object>>();
    SortedMap<String,List<CopyField>> sortedCopyFields=new TreeMap<String,List<CopyField>>(getSchema().getCopyFieldsMap());
    for (    List<CopyField> copyFields : sortedCopyFields.values()) {
      Collections.sort(copyFields,new Comparator<CopyField>(){
        @Override public int compare(        CopyField cf1,        CopyField cf2){
          return cf1.getDestination().getName().compareTo(cf2.getDestination().getName());
        }
      }
);
      for (      CopyField copyField : copyFields) {
        final String source=copyField.getSource().getName();
        final String destination=copyField.getDestination().getName();
        if ((null == sourceFields || sourceFields.contains(source)) && (null == destinationFields || destinationFields.contains(destination))) {
          SimpleOrderedMap<Object> copyFieldProps=new SimpleOrderedMap<Object>();
          copyFieldProps.add(SOURCE,source);
          copyFieldProps.add(DESTINATION,destination);
          if (0 != copyField.getMaxChars()) {
            copyFieldProps.add(MAX_CHARS,copyField.getMaxChars());
          }
          props.add(copyFieldProps);
        }
      }
    }
    for (    IndexSchema.DynamicCopy dynamicCopy : getSchema().getDynamicCopyFields()) {
      final String source=dynamicCopy.getRegex();
      final String destination=dynamicCopy.getDestFieldName();
      if ((null == sourceFields || sourceFields.contains(source)) && (null == destinationFields || destinationFields.contains(destination))) {
        SimpleOrderedMap<Object> dynamicCopyProps=new SimpleOrderedMap<Object>();
        dynamicCopyProps.add(SOURCE,dynamicCopy.getRegex());
        IndexSchema.DynamicField sourceDynamicBase=dynamicCopy.getSourceDynamicBase();
        if (null != sourceDynamicBase) {
          dynamicCopyProps.add(SOURCE_DYNAMIC_BASE,sourceDynamicBase.getRegex());
        }
        dynamicCopyProps.add(DESTINATION,dynamicCopy.getDestFieldName());
        IndexSchema.DynamicField destDynamicBase=dynamicCopy.getDestDynamicBase();
        if (null != destDynamicBase) {
          dynamicCopyProps.add(DESTINATION_DYNAMIC_BASE,destDynamicBase.getRegex());
        }
        if (0 != dynamicCopy.getMaxChars()) {
          dynamicCopyProps.add(MAX_CHARS,dynamicCopy.getMaxChars());
        }
        props.add(dynamicCopyProps);
      }
    }
    getSolrResponse().add(SchemaRestApi.COPY_FIELDS,props);
  }
 catch (  Exception e) {
    getSolrResponse().setException(e);
  }
  handlePostExecution(log);
  return new SolrOutputRepresentation();
}
