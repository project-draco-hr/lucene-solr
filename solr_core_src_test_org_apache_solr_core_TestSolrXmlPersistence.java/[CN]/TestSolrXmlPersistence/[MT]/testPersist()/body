{
  String defXml=FileUtils.readFileToString(new File(SolrTestCaseJ4.TEST_HOME(),"solr.xml"),Charsets.UTF_8.toString());
  final CoreContainer cores=init(defXml,"collection1");
  SolrXMLCoresLocator.NonPersistingLocator locator=(SolrXMLCoresLocator.NonPersistingLocator)cores.getCoresLocator();
  String instDir;
  try (SolrCore template=cores.getCore("collection1")){
    assertNotNull(template);
    instDir=template.getCoreDescriptor().getRawInstanceDir();
  }
   final File instDirFile=new File(cores.getSolrHome(),instDir);
  assertTrue("instDir doesn't exist: " + instDir,instDirFile.exists());
  TestHarness.validateXPath(locator.xml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "' and @transient='false' and @loadOnStartup='true' ]","1=count(/solr/cores/core)");
  final File dataXfile=new File(solrHomeDirectory,"dataX");
  final String dataX=dataXfile.getAbsolutePath();
  assertTrue("dataXfile mkdirs failed: " + dataX,dataXfile.mkdirs());
  final File instYfile=new File(solrHomeDirectory,"instY");
  FileUtils.copyDirectory(instDirFile,instYfile);
  final String instY=instYfile.getAbsolutePath() + "/";
  final CoreDescriptor xd=buildCoreDescriptor(cores,"X",instDir).withDataDir(dataX).build();
  final CoreDescriptor yd=new CoreDescriptor(cores,"Y",instY);
  SolrCore x=null;
  SolrCore y=null;
  try {
    x=cores.create(xd);
    y=cores.create(yd);
    cores.register(x,false);
    cores.register(y,false);
    assertEquals("cores not added?",3,cores.getCoreNames().size());
    TestHarness.validateXPath(locator.xml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1']","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "']","/solr/cores/core[@name='X' and @instanceDir='" + instDir + "' and @dataDir='"+ dataX+ "']","/solr/cores/core[@name='Y' and @instanceDir='" + instY + "']","3=count(/solr/cores/core)");
    TestHarness.validateXPath(locator.xml,"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]");
    assertNotNull("removing X returned null",cores.remove("X"));
    TestHarness.validateXPath(locator.xml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1']","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "']","/solr/cores/core[@name='Y' and @instanceDir='" + instY + "']","2=count(/solr/cores/core)");
  }
  finally {
    if (x != null) {
      try {
        x.close();
      }
 catch (      Exception e) {
        log.error("",e);
      }
    }
    cores.shutdown();
  }
}
