{
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  StreamExpressionNamedParameter hashStreamExpression=factory.getNamedOperand(expression,"hashed");
  StreamExpressionNamedParameter onExpression=factory.getNamedOperand(expression,"on");
  if (expression.getParameters().size() != streamExpressions.size() + 2) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found",expression));
  }
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting two streams but found %d",expression,streamExpressions.size()));
  }
  if (null == hashStreamExpression || !(hashStreamExpression.getParameter() instanceof StreamExpression)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'hashed' parameter containing the stream to hash but didn't find one",expression));
  }
  if (null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'on' parameter listing fields to hash on but didn't find one",expression));
  }
  String hashOnValue=((StreamExpressionValue)onExpression.getParameter()).getValue();
  String[] parts=hashOnValue.split(",");
  List<String> hashOn=new ArrayList<String>(parts.length);
  for (  String part : parts) {
    hashOn.add(part.trim());
  }
  init(factory.constructStream(streamExpressions.get(0)),factory.constructStream((StreamExpression)hashStreamExpression.getParameter()),hashOn);
}
