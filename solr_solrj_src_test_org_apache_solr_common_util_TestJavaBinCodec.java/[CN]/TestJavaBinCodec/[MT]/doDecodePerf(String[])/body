{
  int arg=0;
  int nThreads=Integer.parseInt(args[arg++]);
  int nBuffers=Integer.parseInt(args[arg++]);
  final long iter=Long.parseLong(args[arg++]);
  int cacheSz=Integer.parseInt(args[arg++]);
  Random r=new Random(0);
  final byte[][] buffers=new byte[nBuffers][];
  for (int bufnum=0; bufnum < nBuffers; bufnum++) {
    SolrDocument sdoc=new SolrDocument();
    sdoc.put("id","my_id_" + bufnum);
    sdoc.put("author",str(r,10 + r.nextInt(10)));
    sdoc.put("address",str(r,20 + r.nextInt(20)));
    sdoc.put("license",str(r,10));
    sdoc.put("title",str(r,5 + r.nextInt(10)));
    sdoc.put("modified_dt",r.nextInt(1000000));
    sdoc.put("creation_dt",r.nextInt(1000000));
    sdoc.put("birthdate_dt",r.nextInt(1000000));
    sdoc.put("clean",r.nextBoolean());
    sdoc.put("dirty",r.nextBoolean());
    sdoc.put("employed",r.nextBoolean());
    sdoc.put("priority",r.nextInt(100));
    sdoc.put("dependents",r.nextInt(6));
    sdoc.put("level",r.nextInt(101));
    sdoc.put("education_level",r.nextInt(10));
    sdoc.put("state","S" + r.nextInt(50));
    sdoc.put("country","Country" + r.nextInt(20));
    sdoc.put("some_boolean","" + r.nextBoolean());
    sdoc.put("another_boolean","" + r.nextBoolean());
    JavaBinCodec javabin=new JavaBinCodec();
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    javabin.marshal(sdoc,os);
    os.toByteArray();
    buffers[bufnum]=os.toByteArray();
  }
  int ret=0;
  long start=System.currentTimeMillis();
  ConcurrentLRUCache underlyingCache=cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz - cacheSz / 10,cacheSz,cacheSz / 10,false,true,null) : null;
  final JavaBinCodec.StringCache stringCache=underlyingCache == null ? null : new JavaBinCodec.StringCache(underlyingCache);
  if (nThreads <= 0) {
    ret+=doDecode(buffers,iter,stringCache);
  }
 else {
    runInThreads(nThreads,new Runnable(){
      @Override public void run(){
        try {
          doDecode(buffers,iter,stringCache);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
  long end=System.currentTimeMillis();
  long n=iter * Math.max(1,nThreads);
  System.out.println("ret=" + ret + " THROUGHPUT="+ (n * 1000 / (end - start)));
  if (underlyingCache != null)   System.out.println("cache: hits=" + underlyingCache.getStats().getCumulativeHits() + " lookups="+ underlyingCache.getStats().getCumulativeLookups()+ " size="+ underlyingCache.getStats().getCurrentSize());
}
