{
  Map<String,Object> m=ZkNodeProps.makeMap("key1","val1","key2","val2");
  ByteArrayOutputStream os1=new ByteArrayOutputStream();
  new JavaBinCodec().marshal(m,os1);
  Map m1=(Map)new JavaBinCodec().unmarshal(new ByteArrayInputStream(os1.toByteArray()));
  ByteArrayOutputStream os2=new ByteArrayOutputStream();
  new JavaBinCodec().marshal(m,os2);
  Map m2=(Map)new JavaBinCodec().unmarshal(new ByteArrayInputStream(os2.toByteArray()));
  List l1=new ArrayList<>(m1.keySet());
  List l2=new ArrayList<>(m2.keySet());
  assertTrue(l1.get(0).equals(l2.get(0)));
  assertFalse(l1.get(0) == l2.get(0));
  assertTrue(l1.get(1).equals(l2.get(1)));
  assertFalse(l1.get(1) == l2.get(1));
  JavaBinCodec.StringCache stringCache=new JavaBinCodec.StringCache(new Cache<JavaBinCodec.StringBytes,String>(){
    private HashMap<JavaBinCodec.StringBytes,String> cache=new HashMap<>();
    @Override public String put(    JavaBinCodec.StringBytes key,    String val){
      return cache.put(key,val);
    }
    @Override public String get(    JavaBinCodec.StringBytes key){
      return cache.get(key);
    }
    @Override public String remove(    JavaBinCodec.StringBytes key){
      return cache.remove(key);
    }
    @Override public void clear(){
      cache.clear();
    }
  }
);
  m1=(Map)new JavaBinCodec(null,stringCache).unmarshal(new ByteArrayInputStream(os1.toByteArray()));
  m2=(Map)new JavaBinCodec(null,stringCache).unmarshal(new ByteArrayInputStream(os2.toByteArray()));
  l1=new ArrayList<>(m1.keySet());
  l2=new ArrayList<>(m2.keySet());
  assertTrue(l1.get(0).equals(l2.get(0)));
  assertTrue(l1.get(0) == l2.get(0));
  assertTrue(l1.get(1).equals(l2.get(1)));
  assertTrue(l1.get(1) == l2.get(1));
}
