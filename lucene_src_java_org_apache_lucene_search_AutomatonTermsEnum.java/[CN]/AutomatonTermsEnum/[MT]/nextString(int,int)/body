{
  int c=0;
  if (position < seekBytesRef.length) {
    c=seekBytesRef.bytes[position] & 0xff;
    c=incrementUTF16(c);
    if (c == -1)     return false;
  }
  seekBytesRef.length=position;
  visited[state]=curGen;
  Transition transitions[]=allTransitions[state];
  for (int i=0; i < transitions.length; i++) {
    Transition transition=transitions[i];
    if (compareToUTF16(transition.getMax(),c) >= 0) {
      int nextChar=compareToUTF16(c,transition.getMin()) > 0 ? c : transition.getMin();
      seekBytesRef.grow(seekBytesRef.length + 1);
      seekBytesRef.length++;
      seekBytesRef.bytes[seekBytesRef.length - 1]=(byte)nextChar;
      state=transition.getDest().getNumber();
      while (visited[state] != curGen && !runAutomaton.isAccept(state)) {
        visited[state]=curGen;
        transition=allTransitions[state][0];
        state=transition.getDest().getNumber();
        if (!finite && !linear && visited[state] == curGen) {
          linear=true;
          infinitePosition=seekBytesRef.length;
        }
        seekBytesRef.grow(seekBytesRef.length + 1);
        seekBytesRef.length++;
        seekBytesRef.bytes[seekBytesRef.length - 1]=(byte)transition.getMin();
      }
      return true;
    }
  }
  return false;
}
