{
  char c=0;
  if (position < utf16.length) {
    c=utf16.result[position];
    if (c == '\uFFFF')     return false;
 else     c++;
  }
  utf16.setLength(position);
  visited[state]=curGen;
  Transition transitions[]=allTransitions[state];
  for (int i=0; i < transitions.length; i++) {
    Transition transition=transitions[i];
    if (transition.getMax() >= c) {
      char nextChar=(char)Math.max(c,transition.getMin());
      utf16.setLength(utf16.length + 1);
      utf16.result[utf16.length - 1]=nextChar;
      state=transition.getDest().getNumber();
      while (visited[state] != curGen && !runAutomaton.isAccept(state)) {
        visited[state]=curGen;
        transition=allTransitions[state][0];
        state=transition.getDest().getNumber();
        if (!finite && !linear && visited[state] == curGen) {
          linear=true;
          infinitePosition=utf16.length;
        }
        utf16.setLength(utf16.length + 1);
        utf16.result[utf16.length - 1]=transition.getMin();
      }
      return true;
    }
  }
  return false;
}
