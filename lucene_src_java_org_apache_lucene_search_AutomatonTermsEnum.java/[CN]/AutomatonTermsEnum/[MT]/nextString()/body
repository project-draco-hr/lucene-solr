{
  int state;
  int pos=0;
  savedStates.grow(seekBytesRef.length + 1);
  final int[] states=savedStates.ints;
  states[0]=runAutomaton.getInitialState();
  while (true) {
    curGen++;
    linear=false;
    for (state=states[pos]; pos < seekBytesRef.length; pos++) {
      visited[state]=curGen;
      int nextState=runAutomaton.step(state,seekBytesRef.bytes[pos] & 0xff);
      if (nextState == -1)       break;
      states[pos + 1]=nextState;
      if (!finite && !linear && visited[nextState] == curGen) {
        linear=true;
        infinitePosition=pos;
      }
      state=nextState;
    }
    if (nextString(state,pos)) {
      return true;
    }
 else {
      if ((pos=backtrack(pos)) < 0)       return false;
      final int newState=runAutomaton.step(states[pos],seekBytesRef.bytes[pos] & 0xff);
      if (newState >= 0 && runAutomaton.isAccept(newState))       return true;
      if (!finite)       pos=0;
    }
  }
}
