{
  final CategoryPath dummyCP=new CategoryPath("a");
  final FacetRequest dummyFR=new CountFacetRequest(dummyCP,10);
  assertNotNull("only CountFacetRequests should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP,10))));
  FacetRequest cfr=new CountFacetRequest(dummyCP,10);
  cfr.setDepth(2);
  assertNotNull("only depth 1 should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));
  cfr=new CountFacetRequest(dummyCP,10);
  cfr.setSortOrder(SortOrder.ASCENDING);
  assertNotNull("only SortOrder.DESCENDING should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));
  cfr=new CountFacetRequest(dummyCP,10);
  cfr.setSortBy(SortBy.ORDINAL);
  assertNotNull("only SortBy.VALUE should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));
  cfr=new CountFacetRequest(dummyCP,10);
  cfr.setNumLabel(2);
  assertNotNull("numToLabel should not be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));
  FacetIndexingParams fip=new FacetIndexingParams(){
    @Override public CategoryListParams getCategoryListParams(    CategoryPath category){
      return new CategoryListParams();
    }
  }
;
  assertNotNull("only one CLP should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(fip,dummyFR,new CountFacetRequest(new CategoryPath("moo"),10))));
  fip=new FacetIndexingParams(new CategoryListParams("moo")){
    final CategoryListParams clp=new CategoryListParams(){
      @Override public IntEncoder createEncoder(){
        return new VInt8IntEncoder();
      }
    }
;
    @Override public List<CategoryListParams> getAllCategoryListParams(){
      return Collections.singletonList(clp);
    }
    @Override public CategoryListParams getCategoryListParams(    CategoryPath category){
      return clp;
    }
  }
;
  assertNotNull("only DGapVIntEncoder should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(fip,dummyFR)));
  fip=new FacetIndexingParams(new CategoryListParams("moo")){
    @Override public int getPartitionSize(){
      return 2;
    }
  }
;
  assertNotNull("partitions should be allowed",CountingFacetsCollector.assertParams(new FacetSearchParams(fip,dummyFR)));
}
