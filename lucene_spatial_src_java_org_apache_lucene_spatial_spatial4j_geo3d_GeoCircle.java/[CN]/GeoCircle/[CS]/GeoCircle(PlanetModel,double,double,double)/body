{
  super(planetModel);
  if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)   throw new IllegalArgumentException("Latitude out of bounds");
  if (lon < -Math.PI || lon > Math.PI)   throw new IllegalArgumentException("Longitude out of bounds");
  if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)   throw new IllegalArgumentException("Cutoff angle out of bounds");
  final double cosAngle=Math.cos(cutoffAngle);
  this.center=new GeoPoint(planetModel,lat,lon);
  final double magnitude=center.magnitude();
  this.cutoffAngle=cutoffAngle;
  this.circlePlane=new SidedPlane(center,center.normalize(),-cosAngle * magnitude);
  if (cutoffAngle == Math.PI)   this.edgePoints=new GeoPoint[0];
 else {
    Plane verticalPlane=Plane.constructNormalizedVerticalPlane(this.center.x,this.center.y);
    if (verticalPlane == null) {
      verticalPlane=new Plane(1.0,0.0);
    }
    final GeoPoint edgePoint=this.circlePlane.getSampleIntersectionPoint(planetModel,verticalPlane);
    if (edgePoint == null) {
      throw new RuntimeException("Could not find edge point for circle at lat=" + lat + " lon="+ lon+ " cutoffAngle="+ cutoffAngle+ " planetModel="+ planetModel);
    }
    this.edgePoints=new GeoPoint[]{edgePoint};
  }
}
