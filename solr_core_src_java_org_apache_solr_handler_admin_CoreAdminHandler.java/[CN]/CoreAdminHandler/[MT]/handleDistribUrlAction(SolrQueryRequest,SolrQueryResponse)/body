{
  SolrParams params=req.getParams();
  final ModifiableSolrParams newParams=new ModifiableSolrParams(params);
  newParams.remove("action");
  SolrParams required=params.required();
  final String subAction=required.get("subAction");
  String collection=required.get("collection");
  SolrCore core=req.getCore();
  ZkController zkController=core.getCoreDescriptor().getCoreContainer().getZkController();
  CloudState cloudState=zkController.getCloudState();
  Map<String,Slice> slices=cloudState.getCollectionStates().get(collection);
  for (  Map.Entry<String,Slice> entry : slices.entrySet()) {
    Slice slice=entry.getValue();
    Map<String,ZkNodeProps> shards=slice.getShards();
    Set<Map.Entry<String,ZkNodeProps>> shardEntries=shards.entrySet();
    for (    Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {
      final ZkNodeProps node=shardEntry.getValue();
      if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {
        CommonsHttpSolrServer server=new CommonsHttpSolrServer(node.get(ZkStateReader.BASE_URL_PROP));
        server.request(new CoreAdminRequest(){
{
            action=CoreAdminAction.valueOf(subAction);
            setCoreName(node.get(ZkStateReader.CORE_NAME_PROP));
          }
          @Override public SolrParams getParams(){
            SolrParams superParams=super.getParams();
            newParams.add(superParams);
            return newParams;
          }
        }
);
      }
    }
  }
}
