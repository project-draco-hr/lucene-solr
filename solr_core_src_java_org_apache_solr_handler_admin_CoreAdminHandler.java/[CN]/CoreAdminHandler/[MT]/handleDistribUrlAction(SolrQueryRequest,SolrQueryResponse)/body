{
  SolrParams params=req.getParams();
  final ModifiableSolrParams newParams=new ModifiableSolrParams(params);
  newParams.remove("action");
  SolrParams required=params.required();
  final String subAction=required.get("subAction");
  String collection=required.get("collection");
  newParams.set(CoreAdminParams.ACTION,subAction);
  SolrCore core=req.getCore();
  ZkController zkController=core.getCoreDescriptor().getCoreContainer().getZkController();
  CloudState cloudState=zkController.getCloudState();
  Map<String,Slice> slices=cloudState.getCollectionStates().get(collection);
  for (  Map.Entry<String,Slice> entry : slices.entrySet()) {
    Slice slice=entry.getValue();
    Map<String,ZkNodeProps> shards=slice.getShards();
    Set<Map.Entry<String,ZkNodeProps>> shardEntries=shards.entrySet();
    for (    Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {
      final ZkNodeProps node=shardEntry.getValue();
      if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {
        newParams.set(CoreAdminParams.CORE,node.get(ZkStateReader.CORE_NAME_PROP));
        String replica=node.get(ZkStateReader.BASE_URL_PROP) + "/admin/cores";
        ShardRequest sreq=new ShardRequest();
        sreq.purpose=1;
        if (replica.startsWith("http://"))         replica=replica.substring(7);
        sreq.shards=new String[]{replica};
        sreq.actualShards=sreq.shards;
        sreq.params=newParams;
        shardHandler.submit(sreq,replica,sreq.params);
      }
    }
  }
  ShardResponse srsp;
  do {
    srsp=shardHandler.takeCompletedOrError();
    Throwable e=srsp.getException();
    if (e != null) {
      log.error("Error talking to shard: " + srsp.getShard(),e);
    }
  }
 while (srsp != null);
}
