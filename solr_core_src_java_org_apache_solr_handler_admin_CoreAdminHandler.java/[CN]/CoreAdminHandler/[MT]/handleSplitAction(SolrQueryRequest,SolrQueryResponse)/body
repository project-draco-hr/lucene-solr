{
  SolrParams params=adminReq.getParams();
  List<DocRouter.Range> ranges=null;
  String[] pathsArr=params.getParams("path");
  String rangesStr=params.get(CoreAdminParams.RANGES);
  if (rangesStr != null) {
    String[] rangesArr=rangesStr.split(",");
    if (rangesArr.length == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"There must be at least one range specified to split an index");
    }
 else {
      ranges=new ArrayList<>(rangesArr.length);
      for (      String r : rangesArr) {
        try {
          ranges.add(DocRouter.DEFAULT.fromString(r));
        }
 catch (        Exception e) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"Exception parsing hexadecimal hash range: " + r,e);
        }
      }
    }
  }
  String splitKey=params.get("split.key");
  String[] newCoreNames=params.getParams("targetCore");
  String cname=params.get(CoreAdminParams.CORE,"");
  if ((pathsArr == null || pathsArr.length == 0) && (newCoreNames == null || newCoreNames.length == 0)) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Either path or targetCore param must be specified");
  }
  log.info("Invoked split action for core: " + cname);
  SolrCore core=coreContainer.getCore(cname);
  SolrQueryRequest req=new LocalSolrQueryRequest(core,params);
  List<SolrCore> newCores=null;
  try {
    List<String> paths=null;
    int partitions=pathsArr != null ? pathsArr.length : newCoreNames.length;
    DocRouter router=null;
    String routeFieldName=null;
    if (coreContainer.isZooKeeperAware()) {
      ClusterState clusterState=coreContainer.getZkController().getClusterState();
      String collectionName=req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();
      DocCollection collection=clusterState.getCollection(collectionName);
      String sliceName=req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();
      Slice slice=clusterState.getSlice(collectionName,sliceName);
      router=collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;
      if (ranges == null) {
        DocRouter.Range currentRange=slice.getRange();
        ranges=currentRange != null ? router.partitionRange(partitions,currentRange) : null;
      }
      Object routerObj=collection.get(DOC_ROUTER);
      if (routerObj != null && routerObj instanceof Map) {
        Map routerProps=(Map)routerObj;
        routeFieldName=(String)routerProps.get("field");
      }
    }
    if (pathsArr == null) {
      newCores=new ArrayList<>(partitions);
      for (      String newCoreName : newCoreNames) {
        SolrCore newcore=coreContainer.getCore(newCoreName);
        if (newcore != null) {
          newCores.add(newcore);
        }
 else {
          throw new SolrException(ErrorCode.BAD_REQUEST,"Core with core name " + newCoreName + " expected but doesn't exist.");
        }
      }
    }
 else {
      paths=Arrays.asList(pathsArr);
    }
    SplitIndexCommand cmd=new SplitIndexCommand(req,paths,newCores,ranges,router,routeFieldName,splitKey);
    core.getUpdateHandler().split(cmd);
  }
 catch (  Exception e) {
    log.error("ERROR executing split:",e);
    throw new RuntimeException(e);
  }
 finally {
    if (req != null)     req.close();
    if (core != null)     core.close();
    if (newCores != null) {
      for (      SolrCore newCore : newCores) {
        newCore.close();
      }
    }
  }
}
