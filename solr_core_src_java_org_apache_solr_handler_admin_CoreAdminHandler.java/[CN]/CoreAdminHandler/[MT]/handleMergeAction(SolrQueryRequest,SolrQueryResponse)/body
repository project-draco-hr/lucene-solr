{
  SolrParams params=req.getParams();
  String cname=params.required().get(CoreAdminParams.CORE);
  SolrCore core=coreContainer.getCore(cname);
  SolrQueryRequest wrappedReq=null;
  List<SolrCore> sourceCores=Lists.newArrayList();
  List<RefCounted<SolrIndexSearcher>> searchers=Lists.newArrayList();
  List<DirectoryReader> readersToBeClosed=Lists.newArrayList();
  List<Directory> dirsToBeReleased=Lists.newArrayList();
  if (core != null) {
    try {
      String[] dirNames=params.getParams(CoreAdminParams.INDEX_DIR);
      if (dirNames == null || dirNames.length == 0) {
        String[] sources=params.getParams("srcCore");
        if (sources == null || sources.length == 0)         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"At least one indexDir or srcCore must be specified");
        for (int i=0; i < sources.length; i++) {
          String source=sources[i];
          SolrCore srcCore=coreContainer.getCore(source);
          if (srcCore == null)           throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Core: " + source + " does not exist");
          sourceCores.add(srcCore);
        }
      }
 else {
        DirectoryFactory dirFactory=core.getDirectoryFactory();
        for (int i=0; i < dirNames.length; i++) {
          Directory dir=dirFactory.get(dirNames[i],DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);
          dirsToBeReleased.add(dir);
          readersToBeClosed.add(DirectoryReader.open(dir));
        }
      }
      List<DirectoryReader> readers=null;
      if (readersToBeClosed.size() > 0) {
        readers=readersToBeClosed;
      }
 else {
        readers=Lists.newArrayList();
        for (        SolrCore solrCore : sourceCores) {
          RefCounted<SolrIndexSearcher> searcher=solrCore.getSearcher();
          searchers.add(searcher);
          readers.add(searcher.get().getIndexReader());
        }
      }
      UpdateRequestProcessorChain processorChain=core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));
      wrappedReq=new LocalSolrQueryRequest(core,req.getParams());
      UpdateRequestProcessor processor=processorChain.createProcessor(wrappedReq,rsp);
      processor.processMergeIndexes(new MergeIndexesCommand(readers,req));
    }
 catch (    Exception e) {
      log.error("ERROR executing merge:",e);
      throw e;
    }
 finally {
      for (      RefCounted<SolrIndexSearcher> searcher : searchers) {
        if (searcher != null)         searcher.decref();
      }
      for (      SolrCore solrCore : sourceCores) {
        if (solrCore != null)         solrCore.close();
      }
      IOUtils.closeWhileHandlingException(readersToBeClosed);
      for (      Directory dir : dirsToBeReleased) {
        DirectoryFactory dirFactory=core.getDirectoryFactory();
        dirFactory.release(dir);
      }
      if (wrappedReq != null)       wrappedReq.close();
      core.close();
    }
  }
}
