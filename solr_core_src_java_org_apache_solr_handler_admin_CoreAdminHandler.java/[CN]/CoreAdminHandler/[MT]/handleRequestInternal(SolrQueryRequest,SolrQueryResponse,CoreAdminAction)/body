{
  if (action != null) {
switch (action) {
case CREATE:
{
        this.handleCreateAction(req,rsp);
        break;
      }
case RENAME:
{
      this.handleRenameAction(req,rsp);
      break;
    }
case UNLOAD:
{
    this.handleUnloadAction(req,rsp);
    break;
  }
case STATUS:
{
  this.handleStatusAction(req,rsp);
  break;
}
case PERSIST:
{
this.handlePersistAction(req,rsp);
break;
}
case RELOAD:
{
this.handleReloadAction(req,rsp);
break;
}
case SWAP:
{
this.handleSwapAction(req,rsp);
break;
}
case MERGEINDEXES:
{
this.handleMergeAction(req,rsp);
break;
}
case SPLIT:
{
this.handleSplitAction(req,rsp);
break;
}
case PREPRECOVERY:
{
this.handleWaitForStateAction(req,rsp);
break;
}
case REQUESTRECOVERY:
{
this.handleRequestRecoveryAction(req,rsp);
break;
}
case REQUESTSYNCSHARD:
{
this.handleRequestSyncAction(req,rsp);
break;
}
case REQUESTAPPLYUPDATES:
{
this.handleRequestApplyUpdatesAction(req,rsp);
break;
}
case REQUESTBUFFERUPDATES:
{
this.handleRequestBufferUpdatesAction(req,rsp);
break;
}
case REQUESTSTATUS:
{
this.handleRequestActionStatus(req,rsp);
break;
}
case OVERSEEROP:
{
ZkController zkController=coreContainer.getZkController();
if (zkController != null) {
String op=req.getParams().get("op");
String electionNode=req.getParams().get("electionNode");
if (electionNode != null) {
zkController.rejoinOverseerElection(electionNode,"rejoinAtHead".equals(op));
}
 else {
log.info("electionNode is required param");
}
}
break;
}
default :
{
this.handleCustomAction(req,rsp);
break;
}
case LOAD:
break;
case REJOINLEADERELECTION:
ZkController zkController=coreContainer.getZkController();
if (zkController != null) {
zkController.rejoinShardLeaderElection(req.getParams());
}
 else {
log.warn("zkController is null in CoreAdminHandler.handleRequestInternal:REJOINLEADERELCTIONS. No action taken.");
}
break;
case INVOKE:
handleInvoke(req,rsp);
break;
}
}
rsp.setHttpCaching(false);
}
