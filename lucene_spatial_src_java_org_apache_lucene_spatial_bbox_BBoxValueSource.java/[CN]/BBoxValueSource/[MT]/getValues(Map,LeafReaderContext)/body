{
  LeafReader reader=readerContext.reader();
  final NumericDocValues minX=DocValues.getNumeric(reader,strategy.field_minX);
  final NumericDocValues minY=DocValues.getNumeric(reader,strategy.field_minY);
  final NumericDocValues maxX=DocValues.getNumeric(reader,strategy.field_maxX);
  final NumericDocValues maxY=DocValues.getNumeric(reader,strategy.field_maxY);
  final Bits validBits=DocValues.getDocsWithField(reader,strategy.field_minX);
  final Rectangle rect=strategy.getSpatialContext().makeRectangle(0,0,0,0);
  return new FunctionValues(){
    @Override public Object objectVal(    int doc){
      if (!validBits.get(doc)) {
        return null;
      }
 else {
        rect.reset(Double.longBitsToDouble(minX.get(doc)),Double.longBitsToDouble(maxX.get(doc)),Double.longBitsToDouble(minY.get(doc)),Double.longBitsToDouble(maxY.get(doc)));
        return rect;
      }
    }
    @Override public String strVal(    int doc){
      Object v=objectVal(doc);
      return v == null ? null : v.toString();
    }
    @Override public boolean exists(    int doc){
      return validBits.get(doc);
    }
    @Override public Explanation explain(    int doc){
      return new Explanation(Float.NaN,toString(doc));
    }
    @Override public String toString(    int doc){
      return description() + '=' + strVal(doc);
    }
  }
;
}
