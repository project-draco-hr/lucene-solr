{
  IndexReader reader=signedIndexReader;
  IndexSearcher search=newSearcher(reader);
  int numDocs=reader.numDocs();
  int medId=((maxId - minId) / 2);
  Integer minIdO=Integer.valueOf(minId);
  Integer maxIdO=Integer.valueOf(maxId);
  Integer medIdO=Integer.valueOf(medId);
  assertEquals("num of docs",numDocs,1 + maxId - minId);
  ScoreDoc[] result;
  Query q=new TermQuery(new Term("body","body"));
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,maxIdO,T,T),numDocs).scoreDocs;
  assertEquals("find all",numDocs,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,maxIdO,T,F),numDocs).scoreDocs;
  assertEquals("all but last",numDocs - 1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,maxIdO,F,T),numDocs).scoreDocs;
  assertEquals("all but first",numDocs - 1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,maxIdO,F,F),numDocs).scoreDocs;
  assertEquals("all but ends",numDocs - 2,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",medIdO,maxIdO,T,T),numDocs).scoreDocs;
  assertEquals("med and up",1 + maxId - medId,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,medIdO,T,T),numDocs).scoreDocs;
  assertEquals("up to med",1 + medId - minId,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",null,null,T,T),numDocs).scoreDocs;
  assertEquals("find all",numDocs,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,null,T,F),numDocs).scoreDocs;
  assertEquals("min and up",numDocs,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",null,maxIdO,F,T),numDocs).scoreDocs;
  assertEquals("max and down",numDocs,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,null,F,F),numDocs).scoreDocs;
  assertEquals("not min, but up",numDocs - 1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",null,maxIdO,F,F),numDocs).scoreDocs;
  assertEquals("not max, but down",numDocs - 1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",medIdO,maxIdO,T,F),numDocs).scoreDocs;
  assertEquals("med and up, not max",maxId - medId,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,medIdO,F,T),numDocs).scoreDocs;
  assertEquals("not min, up to med",medId - minId,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,minIdO,F,F),numDocs).scoreDocs;
  assertEquals("min,min,F,F",0,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",medIdO,medIdO,F,F),numDocs).scoreDocs;
  assertEquals("med,med,F,F",0,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",maxIdO,maxIdO,F,F),numDocs).scoreDocs;
  assertEquals("max,max,F,F",0,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",minIdO,minIdO,T,T),numDocs).scoreDocs;
  assertEquals("min,min,T,T",1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",null,minIdO,F,T),numDocs).scoreDocs;
  assertEquals("nul,min,F,T",1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",maxIdO,maxIdO,T,T),numDocs).scoreDocs;
  assertEquals("max,max,T,T",1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",maxIdO,null,T,F),numDocs).scoreDocs;
  assertEquals("max,nul,T,T",1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",medIdO,medIdO,T,T),numDocs).scoreDocs;
  assertEquals("med,med,T,T",1,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",Integer.valueOf(Integer.MAX_VALUE),null,F,F),numDocs).scoreDocs;
  assertEquals("overflow special case",0,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",null,Integer.valueOf(Integer.MIN_VALUE),F,F),numDocs).scoreDocs;
  assertEquals("overflow special case",0,result.length);
  result=search.search(q,DocValuesRangeFilter.newIntRange("id_int",maxIdO,minIdO,T,T),numDocs).scoreDocs;
  assertEquals("inverse range",0,result.length);
}
