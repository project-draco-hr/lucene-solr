{
  SolrQueryRequest req=req();
  try {
    Random rand=random();
    boolean validate=validateResponses;
    ModifiableSolrParams params=params("facet","true","wt","json","indent","true","omitHeader","true");
    params.add("q","*:*");
    params.add("rows","0");
    SchemaField sf=req.getSchema().getField(ftype.fname);
    boolean multiValued=sf.getType().multiValuedFieldCache();
    int offset=0;
    if (rand.nextInt(100) < 20) {
      if (rand.nextBoolean()) {
        offset=rand.nextInt(100) < 10 ? rand.nextInt(indexSize * 2) : rand.nextInt(indexSize / 3 + 1);
      }
      params.add("facet.offset",Integer.toString(offset));
    }
    int limit=100;
    if (rand.nextInt(100) < 20) {
      if (rand.nextBoolean()) {
        limit=rand.nextInt(100) < 10 ? rand.nextInt(indexSize / 2 + 1) : rand.nextInt(indexSize * 2);
      }
      params.add("facet.limit",Integer.toString(limit));
    }
    if (rand.nextBoolean()) {
      params.add("facet.sort",rand.nextBoolean() ? "index" : "count");
    }
    if ((ftype.vals instanceof SVal) && rand.nextInt(100) < 20) {
      String prefix=ftype.createValue().toString();
      if (rand.nextInt(100) < 5)       prefix=TestUtil.randomUnicodeString(rand);
 else       if (rand.nextInt(100) < 10)       prefix=Character.toString((char)rand.nextInt(256));
 else       if (prefix.length() > 0)       prefix=prefix.substring(0,rand.nextInt(prefix.length()));
      params.add("facet.prefix",prefix);
    }
    if (rand.nextInt(100) < 10) {
      params.add("facet.mincount",Integer.toString(rand.nextInt(5)));
    }
    if (rand.nextInt(100) < 20) {
      params.add("facet.missing","true");
    }
    if (rand.nextBoolean()) {
      params.add("facet.enum.cache.minDf","" + rand.nextInt(indexSize));
    }
    String key=ftype.fname;
    String facet_field=ftype.fname;
    if (random().nextBoolean()) {
      key="alternate_key";
      facet_field="{!key=" + key + "}"+ ftype.fname;
    }
    params.set("facet.field",facet_field);
    List<String> methods=multiValued ? multiValuedMethods : singleValuedMethods;
    List<String> responses=new ArrayList<>(methods.size());
    for (    String method : methods) {
      for (      boolean exists : new boolean[]{false,true}) {
        if (method != null) {
          params.set("facet.method",method);
        }
 else {
          params.remove("facet.method");
        }
        params.set("facet.exists","" + exists);
        if (!exists && rand.nextBoolean()) {
          params.remove("facet.exists");
        }
        if (params.getInt("facet.limit",100) != 0) {
          if (exists && params.getInt("facet.mincount",0) > 1) {
            assertQEx("no mincount on facet.exists",rand.nextBoolean() ? "facet.exists" : "facet.mincount",req(params),ErrorCode.BAD_REQUEST);
            continue;
          }
          final boolean notEnum=method != null && !method.equals("enum");
          final boolean trieField=trieFields.matcher(ftype.fname).matches();
          if ((notEnum || trieField) && exists) {
            assertQEx("facet.exists only when enum or ommitted","facet.exists",req(params),ErrorCode.BAD_REQUEST);
            continue;
          }
        }
        String strResponse=h.query(req(params));
        responses.add(strResponse);
        if (responses.size() > 1) {
          validateResponse(responses.get(0),strResponse,params,method,methods);
        }
      }
    }
  }
  finally {
    req.close();
  }
}
