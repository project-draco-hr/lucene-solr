{
  NamedList lst=new SimpleOrderedMap();
  lst.add("commits",commitCommands.get());
  if (commitTracker.getDocsUpperBound() > 0) {
    lst.add("autocommit maxDocs",commitTracker.getDocsUpperBound());
  }
  if (commitTracker.getTimeUpperBound() > 0) {
    lst.add("autocommit maxTime","" + commitTracker.getTimeUpperBound() + "ms");
  }
  lst.add("autocommits",commitTracker.getCommitCount());
  if (softCommitTracker.getDocsUpperBound() > 0) {
    lst.add("soft autocommit maxDocs",softCommitTracker.getDocsUpperBound());
  }
  if (softCommitTracker.getTimeUpperBound() > 0) {
    lst.add("soft autocommit maxTime","" + softCommitTracker.getTimeUpperBound() + "ms");
  }
  lst.add("soft autocommits",softCommitTracker.getCommitCount());
  lst.add("optimizes",optimizeCommands.get());
  lst.add("rollbacks",rollbackCommands.get());
  lst.add("expungeDeletes",expungeDeleteCommands.get());
  lst.add("docsPending",numDocsPending.get());
  lst.add("adds",addCommands.get());
  lst.add("deletesById",deleteByIdCommands.get());
  lst.add("deletesByQuery",deleteByQueryCommands.get());
  lst.add("errors",numErrors.get());
  lst.add("cumulative_adds",addCommandsCumulative.get());
  lst.add("cumulative_deletesById",deleteByIdCommandsCumulative.get());
  lst.add("cumulative_deletesByQuery",deleteByQueryCommandsCumulative.get());
  lst.add("cumulative_errors",numErrorsCumulative.get());
  if (this.ulog != null) {
    lst.add("transaction_logs_total_size",ulog.getTotalLogsSize());
    lst.add("transaction_logs_total_number",ulog.getTotalLogsNumber());
  }
  return lst;
}
