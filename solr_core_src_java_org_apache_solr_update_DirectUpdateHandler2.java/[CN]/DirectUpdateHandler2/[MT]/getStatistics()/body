{
  NamedList lst=new SimpleOrderedMap();
  lst.add("commits",commitCommands.get());
  if (commitTracker.docsUpperBound > 0) {
    lst.add("autocommit maxDocs",commitTracker.docsUpperBound);
  }
  if (commitTracker.timeUpperBound > 0) {
    lst.add("autocommit maxTime","" + commitTracker.timeUpperBound + "ms");
  }
  lst.add("autocommits",commitTracker.autoCommitCount);
  if (softCommitTracker.docsUpperBound > 0) {
    lst.add("soft autocommit maxDocs",softCommitTracker.docsUpperBound);
  }
  if (softCommitTracker.timeUpperBound > 0) {
    lst.add("soft autocommit maxTime","" + softCommitTracker.timeUpperBound + "ms");
  }
  lst.add("soft autocommits",softCommitTracker.autoCommitCount);
  lst.add("optimizes",optimizeCommands.get());
  lst.add("rollbacks",rollbackCommands.get());
  lst.add("expungeDeletes",expungeDeleteCommands.get());
  lst.add("docsPending",numDocsPending.get());
  lst.add("adds",addCommands.get());
  lst.add("deletesById",deleteByIdCommands.get());
  lst.add("deletesByQuery",deleteByQueryCommands.get());
  lst.add("errors",numErrors.get());
  lst.add("cumulative_adds",addCommandsCumulative.get());
  lst.add("cumulative_deletesById",deleteByIdCommandsCumulative.get());
  lst.add("cumulative_deletesByQuery",deleteByQueryCommandsCumulative.get());
  lst.add("cumulative_errors",numErrorsCumulative.get());
  return lst;
}
