{
  if (cmd.prepareCommit) {
    prepareCommit(cmd);
    return;
  }
  IndexWriter writer=solrCoreState.getIndexWriter(core);
  if (cmd.optimize) {
    optimizeCommands.incrementAndGet();
  }
 else {
    commitCommands.incrementAndGet();
    if (cmd.expungeDeletes)     expungeDeleteCommands.incrementAndGet();
  }
  Future[] waitSearcher=null;
  if (cmd.waitSearcher) {
    waitSearcher=new Future[1];
  }
  boolean error=true;
  try {
    if (!cmd.softCommit) {
      commitLock.lock();
    }
    log.info("start " + cmd);
    if (cmd.optimize) {
      writer.forceMerge(cmd.maxOptimizeSegments);
    }
 else     if (cmd.expungeDeletes) {
      writer.forceMergeDeletes();
    }
    if (!cmd.softCommit) {
synchronized (this) {
        ulog.preCommit(cmd);
      }
      writer.commit();
      numDocsPending.set(0);
      callPostCommitCallbacks();
    }
 else {
      callPostSoftCommitCallbacks();
    }
    if (cmd.optimize) {
      callPostOptimizeCallbacks();
    }
    if (cmd.softCommit) {
synchronized (this) {
        ulog.preSoftCommit(cmd);
        core.getSearcher(true,false,waitSearcher,true);
        ulog.postSoftCommit(cmd);
      }
    }
 else {
synchronized (this) {
        ulog.preSoftCommit(cmd);
        core.getSearcher(true,false,waitSearcher);
        ulog.postSoftCommit(cmd);
      }
      ulog.postCommit(cmd);
    }
    if (cmd.softCommit) {
      softCommitTracker.didCommit();
    }
 else {
      commitTracker.didCommit();
    }
    log.info("end_commit_flush");
    error=false;
  }
  finally {
    if (!cmd.softCommit) {
      commitLock.unlock();
    }
    addCommands.set(0);
    deleteByIdCommands.set(0);
    deleteByQueryCommands.set(0);
    if (error)     numErrors.incrementAndGet();
  }
  if (waitSearcher != null && waitSearcher[0] != null) {
    try {
      waitSearcher[0].get();
    }
 catch (    InterruptedException e) {
      SolrException.log(log,e);
    }
catch (    ExecutionException e) {
      SolrException.log(log,e);
    }
  }
}
