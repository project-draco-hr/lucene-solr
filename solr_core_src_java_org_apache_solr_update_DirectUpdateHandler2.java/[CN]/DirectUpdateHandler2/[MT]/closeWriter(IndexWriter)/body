{
  boolean clearRequestInfo=false;
  commitLock.lock();
  try {
    SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());
    SolrQueryResponse rsp=new SolrQueryResponse();
    if (SolrRequestInfo.getRequestInfo() == null) {
      clearRequestInfo=true;
      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));
    }
    if (!commitOnClose) {
      if (writer != null) {
        writer.rollback();
      }
      if (ulog != null)       ulog.close(false);
      return;
    }
    boolean tryToCommit=writer != null && ulog != null && ulog.hasUncommittedChanges() && ulog.getState() == UpdateLog.State.ACTIVE;
    try {
      if (tryToCommit) {
        CommitUpdateCommand cmd=new CommitUpdateCommand(req,false);
        cmd.openSearcher=false;
        cmd.waitSearcher=false;
        cmd.softCommit=false;
synchronized (solrCoreState) {
          ulog.preCommit(cmd);
        }
        final Map<String,String> commitData=new HashMap<String,String>();
        commitData.put(SolrIndexWriter.COMMIT_TIME_MSEC_KEY,String.valueOf(System.currentTimeMillis()));
        writer.commit(commitData);
synchronized (solrCoreState) {
          ulog.postCommit(cmd);
        }
      }
    }
 catch (    Throwable th) {
      log.error("Error in final commit",th);
    }
    try {
      if (ulog != null)       ulog.close(false);
    }
 catch (    Throwable th) {
      log.error("Error closing log files",th);
    }
    if (writer != null)     writer.close();
  }
  finally {
    commitLock.unlock();
    if (clearRequestInfo)     SolrRequestInfo.clearRequestInfo();
  }
}
