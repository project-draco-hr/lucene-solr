{
  for (int i=0; i < paddLines; i++) {
    logger.println();
  }
  if (title != null && title.trim().length() > 0) {
    logger.println(title);
  }
  prefix=prefix == null ? "" : prefix;
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(3);
  nf.setMinimumFractionDigits(3);
  nf.setGroupingUsed(true);
  int M=19;
  logger.println(prefix + format("Search Seconds: ",M) + fracFormat(nf.format((double)searchTime / 1000)));
  logger.println(prefix + format("DocName Seconds: ",M) + fracFormat(nf.format((double)docNamesExtractTime / 1000)));
  logger.println(prefix + format("Num Points: ",M) + fracFormat(nf.format(numPoints)));
  logger.println(prefix + format("Num Good Points: ",M) + fracFormat(nf.format(numGoodPoints)));
  logger.println(prefix + format("Max Good Points: ",M) + fracFormat(nf.format(maxGoodPoints)));
  logger.println(prefix + format("Average Precision: ",M) + fracFormat(nf.format(getAvp())));
  logger.println(prefix + format("Recall: ",M) + fracFormat(nf.format(getRecall())));
  for (int i=1; i < (int)numPoints && i < pAt.length; i++) {
    logger.println(prefix + format("Precision At " + i + ": ",M) + fracFormat(nf.format(getPrecisionAt(i))));
  }
  for (int i=0; i < paddLines; i++) {
    logger.println();
  }
}
