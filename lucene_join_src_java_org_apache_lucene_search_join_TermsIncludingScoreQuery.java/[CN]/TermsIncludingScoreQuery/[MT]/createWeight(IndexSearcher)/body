{
  final Weight originalWeight=originalQuery.createWeight(searcher);
  return new Weight(){
    private TermsEnum segmentTermsEnum;
    @Override public Explanation explain(    AtomicReaderContext context,    int doc) throws IOException {
      SVInnerScorer scorer=(SVInnerScorer)scorer(context,false,false,context.reader().getLiveDocs());
      if (scorer != null) {
        if (scorer.advanceForExplainOnly(doc) == doc) {
          return scorer.explain();
        }
      }
      return new ComplexExplanation(false,0.0f,"Not a match");
    }
    @Override public boolean scoresDocsOutOfOrder(){
      return true;
    }
    @Override public Query getQuery(){
      return TermsIncludingScoreQuery.this;
    }
    @Override public float getValueForNormalization() throws IOException {
      return originalWeight.getValueForNormalization() * TermsIncludingScoreQuery.this.getBoost() * TermsIncludingScoreQuery.this.getBoost();
    }
    @Override public void normalize(    float norm,    float topLevelBoost){
      originalWeight.normalize(norm,topLevelBoost * TermsIncludingScoreQuery.this.getBoost());
    }
    @Override public Scorer scorer(    AtomicReaderContext context,    boolean scoreDocsInOrder,    boolean topScorer,    Bits acceptDocs) throws IOException {
      Terms terms=context.reader().terms(field);
      if (terms == null) {
        return null;
      }
      final long cost=context.reader().maxDoc() * terms.size();
      segmentTermsEnum=terms.iterator(segmentTermsEnum);
      if (scoreDocsInOrder) {
        if (multipleValuesPerDocument) {
          return new MVInOrderScorer(this,acceptDocs,segmentTermsEnum,context.reader().maxDoc(),cost);
        }
 else {
          return new SVInOrderScorer(this,acceptDocs,segmentTermsEnum,context.reader().maxDoc(),cost);
        }
      }
 else       if (multipleValuesPerDocument) {
        return new MVInnerScorer(this,acceptDocs,segmentTermsEnum,context.reader().maxDoc(),cost);
      }
 else {
        return new SVInnerScorer(this,acceptDocs,segmentTermsEnum,cost);
      }
    }
  }
;
}
