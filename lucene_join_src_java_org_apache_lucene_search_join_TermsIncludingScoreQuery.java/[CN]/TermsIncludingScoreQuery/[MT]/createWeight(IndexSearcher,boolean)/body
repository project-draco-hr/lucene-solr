{
  final Weight originalWeight=originalQuery.createWeight(searcher,needsScores);
  return new Weight(TermsIncludingScoreQuery.this){
    @Override public void extractTerms(    Set<Term> terms){
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      Terms terms=context.reader().terms(field);
      if (terms != null) {
        TermsEnum segmentTermsEnum=terms.iterator();
        BytesRef spare=new BytesRef();
        PostingsEnum postingsEnum=null;
        for (int i=0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {
          if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i],spare))) {
            postingsEnum=segmentTermsEnum.postings(null,postingsEnum,PostingsEnum.NONE);
            if (postingsEnum.advance(doc) == doc) {
              final float score=TermsIncludingScoreQuery.this.scores[ords[i]];
              return Explanation.match(score,"Score based on join value " + segmentTermsEnum.term().utf8ToString());
            }
          }
        }
      }
      return Explanation.noMatch("Not a match");
    }
    @Override public float getValueForNormalization() throws IOException {
      return originalWeight.getValueForNormalization() * TermsIncludingScoreQuery.this.getBoost() * TermsIncludingScoreQuery.this.getBoost();
    }
    @Override public void normalize(    float norm,    float topLevelBoost){
      originalWeight.normalize(norm,topLevelBoost * TermsIncludingScoreQuery.this.getBoost());
    }
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      Terms terms=context.reader().terms(field);
      if (terms == null) {
        return null;
      }
      final long cost=context.reader().maxDoc() * terms.size();
      TermsEnum segmentTermsEnum=terms.iterator();
      if (multipleValuesPerDocument) {
        return new MVInOrderScorer(this,acceptDocs,segmentTermsEnum,context.reader().maxDoc(),cost);
      }
 else {
        return new SVInOrderScorer(this,acceptDocs,segmentTermsEnum,context.reader().maxDoc(),cost);
      }
    }
  }
;
}
