{
  final Map<String,TermsEnum> tes=new HashMap<String,TermsEnum>();
  if (VERBOSE) {
    System.out.println("\nTEST: top now seek");
  }
  for (int iter=0; iter < 100 * _TestUtil.getRandomMultiplier(); iter++) {
    int spot=r.nextInt(fieldTerms.size());
    Term term=fieldTerms.get(spot);
    String field=term.field();
    if (VERBOSE) {
      System.out.println("TEST: exist seek field=" + field + " term="+ UnicodeUtil.toHexString(term.text()));
    }
    TermsEnum te=tes.get(field);
    if (te == null) {
      te=MultiFields.getTerms(reader,field).iterator();
      tes.put(field,te);
    }
    if (VERBOSE) {
      System.out.println("  done get enum");
    }
    assertEquals(TermsEnum.SeekStatus.FOUND,te.seek(term.bytes()));
    int ct=_TestUtil.nextInt(r,5,100);
    for (int i=0; i < ct; i++) {
      if (VERBOSE) {
        System.out.println("TEST: now next()");
      }
      if (1 + spot + i >= fieldTerms.size()) {
        break;
      }
      term=fieldTerms.get(1 + spot + i);
      if (term.field() != field) {
        assertNull(te.next());
        break;
      }
 else {
        BytesRef t=te.next();
        if (VERBOSE) {
          System.out.println("  got term=" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));
          System.out.println("       exp=" + UnicodeUtil.toHexString(term.text().toString()));
        }
        assertEquals(term.bytes(),t);
      }
    }
  }
}
