{
  Directory dir=new MockRAMDirectory();
  Codec codec=new PreFlexCodec();
  Random r=newRandom();
  FieldInfos fieldInfos=new FieldInfos();
  List<FieldAndText> fieldTerms=new ArrayList<FieldAndText>();
  SegmentInfo si=makePreFlexSegment(r,"_0",dir,fieldInfos,codec,fieldTerms);
  int uniqueTermCount=si.docCount;
  FieldsProducer fields=codec.fieldsProducer(new SegmentReadState(dir,si,fieldInfos,1024,1));
  assertNotNull(fields);
  if (DEBUG) {
    System.out.println("\nTEST: now enum");
  }
  FieldsEnum fieldsEnum=fields.iterator();
  String field;
  UnicodeUtil.UTF16Result utf16=new UnicodeUtil.UTF16Result();
  int termCount=0;
  while ((field=fieldsEnum.next()) != null) {
    TermsEnum termsEnum=fieldsEnum.terms();
    BytesRef text;
    BytesRef lastText=null;
    while ((text=termsEnum.next()) != null) {
      UnicodeUtil.UTF8toUTF16(text.bytes,text.offset,text.length,utf16);
      if (DEBUG) {
        System.out.println("got term=" + field + ":"+ UnicodeUtil.toHexString(new String(utf16.result,0,utf16.length)));
        System.out.println();
      }
      if (lastText == null) {
        lastText=new BytesRef(text);
      }
 else {
        assertTrue(lastText.compareTo(text) < 0);
        lastText.copy(text);
      }
      assertEquals(fieldTerms.get(termCount).field,field);
      assertEquals(fieldTerms.get(termCount).text,text);
      termCount++;
    }
    if (DEBUG) {
      System.out.println("  no more terms for field=" + field);
    }
  }
  assertEquals(uniqueTermCount,termCount);
  fields.close();
}
