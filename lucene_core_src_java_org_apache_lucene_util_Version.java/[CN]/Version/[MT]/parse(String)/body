{
  StrictStringTokenizer tokens=new StrictStringTokenizer(version,'.');
  if (tokens.hasMoreTokens() == false) {
    throw new ParseException("Version is not in form major.minor.bugfix(.prerelease) (got: " + version + ")",0);
  }
  int major;
  String token=tokens.nextToken();
  try {
    major=Integer.parseInt(token);
  }
 catch (  NumberFormatException nfe) {
    ParseException p=new ParseException("Failed to parse major version from \"" + token + "\" (got: "+ version+ ")",0);
    p.initCause(nfe);
    throw p;
  }
  if (tokens.hasMoreTokens() == false) {
    throw new ParseException("Version is not in form major.minor.bugfix(.prerelease) (got: " + version + ")",0);
  }
  int minor;
  token=tokens.nextToken();
  try {
    minor=Integer.parseInt(token);
  }
 catch (  NumberFormatException nfe) {
    ParseException p=new ParseException("Failed to parse minor version from \"" + token + "\" (got: "+ version+ ")",0);
    p.initCause(nfe);
    throw p;
  }
  int bugfix=0;
  int prerelease=0;
  if (tokens.hasMoreTokens()) {
    token=tokens.nextToken();
    try {
      bugfix=Integer.parseInt(token);
    }
 catch (    NumberFormatException nfe) {
      ParseException p=new ParseException("Failed to parse bugfix version from \"" + token + "\" (got: "+ version+ ")",0);
      p.initCause(nfe);
      throw p;
    }
    if (tokens.hasMoreTokens()) {
      token=tokens.nextToken();
      try {
        prerelease=Integer.parseInt(token);
      }
 catch (      NumberFormatException nfe) {
        ParseException p=new ParseException("Failed to parse prerelease version from \"" + token + "\" (got: "+ version+ ")",0);
        p.initCause(nfe);
        throw p;
      }
      if (prerelease == 0) {
        throw new ParseException("Invalid value " + prerelease + " for prerelease; should be 1 or 2 (got: "+ version+ ")",0);
      }
      if (tokens.hasMoreTokens()) {
        throw new ParseException("Version is not in form major.minor.bugfix(.prerelease) (got: " + version + ")",0);
      }
    }
  }
  try {
    return new Version(major,minor,bugfix,prerelease);
  }
 catch (  IllegalArgumentException iae) {
    ParseException pe=new ParseException("failed to parse version string \"" + version + "\": "+ iae.getMessage(),0);
    pe.initCause(iae);
    throw pe;
  }
}
