{
  CloudSolrServer client=createCloudClient(null);
  String collectionName="checkStateVerCol";
  createCollection(collectionName,client,2,2);
  waitForRecoveriesToFinish(collectionName,false);
  SolrZkClient zk=client.getZkStateReader().getZkClient();
  DocCollection coll=client.getZkStateReader().getClusterState().getCollection(collectionName);
  Replica r=coll.getSlices().iterator().next().getReplicas().iterator().next();
  HttpSolrServer httpSolrServer=new HttpSolrServer(r.getStr(ZkStateReader.BASE_URL_PROP) + "/" + collectionName);
  SolrQuery q=new SolrQuery().setQuery("*:*");
  log.info("should work query, result {}",httpSolrServer.query(q));
  q.setParam(CloudSolrServer.STATE_VERSION,collectionName + ":" + coll.getVersion());
  log.info("2nd query , result {}",httpSolrServer.query(q));
  q.setParam(CloudSolrServer.STATE_VERSION,collectionName + ":" + (coll.getVersion() - 1));
  HttpSolrServer.RemoteSolrException sse=null;
  try {
    httpSolrServer.query(q);
    log.info("expected query error");
  }
 catch (  HttpSolrServer.RemoteSolrException e) {
    sse=e;
  }
  assertNotNull(sse);
  assertEquals(" Error code should be ",sse.code(),SolrException.ErrorCode.INVALID_STATE.code);
  Set<String> allNodesOfColl=new HashSet<>();
  for (  Slice slice : coll.getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      allNodesOfColl.add(replica.getStr(ZkStateReader.BASE_URL_PROP));
    }
  }
  String theNode=null;
  for (  String s : client.getZkStateReader().getClusterState().getLiveNodes()) {
    String n=client.getZkStateReader().getBaseUrlForNodeName(s);
    if (!allNodesOfColl.contains(s)) {
      theNode=n;
      break;
    }
  }
  log.info("thenode which does not serve this collection{} ",theNode);
  assertNotNull(theNode);
  httpSolrServer=new HttpSolrServer(theNode + "/" + collectionName);
  q.setParam(CloudSolrServer.STATE_VERSION,collectionName + ":" + coll.getVersion());
  try {
    httpSolrServer.query(q);
    log.info("error was expected");
  }
 catch (  HttpSolrServer.RemoteSolrException e) {
    sse=e;
  }
  assertNotNull(sse);
  assertEquals(" Error code should be ",sse.code(),SolrException.ErrorCode.INVALID_STATE.code);
  client.shutdown();
}
