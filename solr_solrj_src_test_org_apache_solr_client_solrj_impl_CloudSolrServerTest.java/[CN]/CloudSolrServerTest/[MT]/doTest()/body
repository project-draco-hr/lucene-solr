{
  assertNotNull(cloudClient);
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  waitForThingsToLevelOut(30);
  del("*:*");
  commit();
  SolrInputDocument doc1=new SolrInputDocument();
  doc1.addField(id,"0");
  doc1.addField("a_t","hello1");
  SolrInputDocument doc2=new SolrInputDocument();
  doc2.addField(id,"2");
  doc2.addField("a_t","hello2");
  UpdateRequest request=new UpdateRequest();
  request.add(doc1);
  request.add(doc2);
  request.setAction(AbstractUpdateRequest.ACTION.COMMIT,false,false);
  NamedList response=cloudClient.request(request);
  CloudSolrServer.RouteResponse rr=(CloudSolrServer.RouteResponse)response;
  Map<String,LBHttpSolrServer.Req> routes=rr.getRoutes();
  Iterator<Map.Entry<String,LBHttpSolrServer.Req>> it=routes.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,LBHttpSolrServer.Req> entry=it.next();
    String url=entry.getKey();
    UpdateRequest updateRequest=(UpdateRequest)entry.getValue().getRequest();
    SolrInputDocument doc=updateRequest.getDocuments().get(0);
    String id=doc.getField("id").getValue().toString();
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add("q","id:" + id);
    params.add("distrib","false");
    QueryRequest queryRequest=new QueryRequest(params);
    HttpSolrServer solrServer=new HttpSolrServer(url);
    QueryResponse queryResponse=queryRequest.process(solrServer);
    SolrDocumentList docList=queryResponse.getResults();
    assertTrue(docList.getNumFound() == 1);
  }
  UpdateRequest delRequest=new UpdateRequest();
  delRequest.deleteById("0");
  delRequest.deleteById("2");
  delRequest.setAction(AbstractUpdateRequest.ACTION.COMMIT,false,false);
  cloudClient.request(delRequest);
  ModifiableSolrParams qParams=new ModifiableSolrParams();
  qParams.add("q","*:*");
  QueryRequest qRequest=new QueryRequest(qParams);
  QueryResponse qResponse=qRequest.process(cloudClient);
  SolrDocumentList docs=qResponse.getResults();
  assertTrue(docs.getNumFound() == 0);
  CloudSolrServer threadedClient=null;
  try {
    threadedClient=new CloudSolrServer(zkServer.getZkAddress());
    threadedClient.setParallelUpdates(true);
    threadedClient.setDefaultCollection("collection1");
    response=threadedClient.request(request);
    rr=(CloudSolrServer.RouteResponse)response;
    routes=rr.getRoutes();
    it=routes.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<String,LBHttpSolrServer.Req> entry=it.next();
      String url=entry.getKey();
      UpdateRequest updateRequest=(UpdateRequest)entry.getValue().getRequest();
      SolrInputDocument doc=updateRequest.getDocuments().get(0);
      String id=doc.getField("id").getValue().toString();
      ModifiableSolrParams params=new ModifiableSolrParams();
      params.add("q","id:" + id);
      params.add("distrib","false");
      QueryRequest queryRequest=new QueryRequest(params);
      HttpSolrServer solrServer=new HttpSolrServer(url);
      QueryResponse queryResponse=queryRequest.process(solrServer);
      SolrDocumentList docList=queryResponse.getResults();
      assertTrue(docList.getNumFound() == 1);
    }
  }
  finally {
    threadedClient.shutdown();
  }
  ClusterState clusterState=cloudClient.getZkStateReader().getClusterState();
  DocCollection col=clusterState.getCollection(DEFAULT_COLLECTION);
  Map<String,Long> requestCountsMap=Maps.newHashMap();
  for (  Slice slice : col.getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      requestCountsMap.put(baseURL,getNumRequests(new HttpSolrServer(baseURL)));
    }
  }
  DocRouter router=col.getRouter();
  Collection<Slice> expectedSlices=router.getSearchSlicesSingle("0",null,col);
  Set<String> expectedBaseURLs=Sets.newHashSet();
  for (  Slice expectedSlice : expectedSlices) {
    for (    Replica replica : expectedSlice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      expectedBaseURLs.add(baseURL);
    }
  }
  assertTrue("expected urls is not fewer than all urls! expected=" + expectedBaseURLs + "; all="+ requestCountsMap.keySet(),expectedBaseURLs.size() < requestCountsMap.size());
  int n;
  if (TEST_NIGHTLY) {
    n=random().nextInt(999) + 2;
  }
 else {
    n=random().nextInt(9) + 2;
  }
  List<String> sameShardRoutes=Lists.newArrayList();
  sameShardRoutes.add("0");
  for (int i=1; i < n; i++) {
    String shardKey=Integer.toString(i);
    Collection<Slice> slices=router.getSearchSlicesSingle(shardKey,null,col);
    if (expectedSlices.equals(slices)) {
      sameShardRoutes.add(shardKey);
    }
  }
  assertTrue(sameShardRoutes.size() > 1);
  for (int i=0; i < n; i++) {
    ModifiableSolrParams solrParams=new ModifiableSolrParams();
    solrParams.set(CommonParams.Q,"*:*");
    solrParams.set(ShardParams._ROUTE_,sameShardRoutes.get(random().nextInt(sameShardRoutes.size())));
    cloudClient.query(solrParams);
  }
  int increaseFromExpectedUrls=0;
  int increaseFromUnexpectedUrls=0;
  Map<String,Long> numRequestsToUnexpectedUrls=Maps.newHashMap();
  for (  Slice slice : col.getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      Long prevNumRequests=requestCountsMap.get(baseURL);
      Long curNumRequests=getNumRequests(new HttpSolrServer(baseURL));
      long delta=curNumRequests - prevNumRequests;
      if (expectedBaseURLs.contains(baseURL)) {
        increaseFromExpectedUrls+=delta;
      }
 else {
        increaseFromUnexpectedUrls+=delta;
        numRequestsToUnexpectedUrls.put(baseURL,delta);
      }
    }
  }
  assertEquals("Unexpected number of requests to expected URLs",n,increaseFromExpectedUrls);
  assertEquals("Unexpected number of requests to unexpected URLs: " + numRequestsToUnexpectedUrls,0,increaseFromUnexpectedUrls);
  del("*:*");
  commit();
}
