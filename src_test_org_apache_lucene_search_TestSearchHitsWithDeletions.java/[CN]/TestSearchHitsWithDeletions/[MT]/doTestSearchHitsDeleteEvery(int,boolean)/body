{
  boolean intermittent=k < 0;
  log("Test search hits with " + (intermittent ? "intermittent deletions." : "deletions of every " + k + " hit."));
  IndexSearcher searcher=new IndexSearcher(directory);
  IndexReader reader=searcher.getIndexReader();
  Query q=new TermQuery(new Term(TEXT_FIELD,"text"));
  Hits hits=searcher.search(q);
  log("Got " + hits.length() + " results");
  assertEquals("must match all " + N + " docs, not only "+ hits.length()+ " docs!",N,hits.length());
  if (deleteInFront) {
    log("deleting hits that was not yet retrieved!");
    reader.deleteDocument(reader.maxDoc() - 1);
    reader.deleteDocument(reader.maxDoc() - 2);
    reader.deleteDocument(reader.maxDoc() - 3);
  }
  try {
    for (int i=0; i < hits.length(); i++) {
      int id=hits.id(i);
      assertEquals("Hit " + i + " has doc id "+ hits.id(i)+ " instead of "+ i,i,hits.id(i));
      if ((intermittent && (i == 50 || i == 250 || i == 950)) || (!intermittent && (k < 2 || (i > 0 && i % k == 0)))) {
        Document doc=hits.doc(id);
        log("Deleting hit " + i + " - doc "+ doc+ " with id "+ id);
        reader.deleteDocument(id);
      }
      if (intermittent) {
        if (i == 150 || i == 450 || i == 1650) {
          assertTrue("Hit " + i + ": hits should have checked for deletions in last call to getMoreDocs()",hits.debugCheckedForDeletions);
        }
 else         if (i == 50 || i == 250 || i == 850) {
          assertFalse("Hit " + i + ": hits should have NOT checked for deletions in last call to getMoreDocs()",hits.debugCheckedForDeletions);
        }
      }
    }
  }
 catch (  ConcurrentModificationException e) {
    assertTrue(e.getMessage() + " not expected unless deleting hits that were not yet seen!",deleteInFront);
  }
  searcher.close();
}
