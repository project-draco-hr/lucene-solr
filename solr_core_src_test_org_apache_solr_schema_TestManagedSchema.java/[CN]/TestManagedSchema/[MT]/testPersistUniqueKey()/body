{
  assertSchemaResource(collection,"managed-schema");
  deleteCore();
  File managedSchemaFile=new File(tmpConfDir,"managed-schema");
  assertTrue(managedSchemaFile.delete());
  System.setProperty("managed.schema.mutable","true");
  initCore("solrconfig-managed-schema.xml","schema-one-field-no-dynamic-field-unique-key.xml",tmpSolrHome.getPath());
  assertTrue(managedSchemaFile.exists());
  String managedSchemaContents=FileUtils.readFileToString(managedSchemaFile,"UTF-8");
  assertFalse(managedSchemaContents.contains("\"new_field\""));
  Map<String,Object> options=new HashMap<>();
  options.put("stored","false");
  IndexSchema oldSchema=h.getCore().getLatestSchema();
  assertEquals("str",oldSchema.getUniqueKeyField().getName());
  String fieldName="new_field";
  String fieldType="string";
  SchemaField newField=oldSchema.newField(fieldName,fieldType,options);
  IndexSchema newSchema=oldSchema.addField(newField);
  assertEquals("str",newSchema.getUniqueKeyField().getName());
  h.getCore().setLatestSchema(newSchema);
  log.info("####close harness");
  h.close();
  log.info("####close harness end");
  initCore();
  assertTrue(managedSchemaFile.exists());
  FileInputStream stream=new FileInputStream(managedSchemaFile);
  managedSchemaContents=IOUtils.toString(stream,"UTF-8");
  stream.close();
  assertTrue(managedSchemaContents.contains("<field name=\"new_field\" type=\"string\" stored=\"false\"/>"));
  IndexSchema newNewSchema=h.getCore().getLatestSchema();
  assertNotNull(newNewSchema.getUniqueKeyField());
  assertEquals("str",newNewSchema.getUniqueKeyField().getName());
}
