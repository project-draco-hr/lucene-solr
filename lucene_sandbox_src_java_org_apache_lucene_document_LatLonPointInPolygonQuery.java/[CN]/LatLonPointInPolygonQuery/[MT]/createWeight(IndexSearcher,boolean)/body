{
  final GeoRect box=GeoRect.fromPolygon(polygons);
  final byte minLat[]=new byte[Integer.BYTES];
  final byte maxLat[]=new byte[Integer.BYTES];
  final byte minLon[]=new byte[Integer.BYTES];
  final byte maxLon[]=new byte[Integer.BYTES];
  NumericUtils.intToSortableBytes(LatLonPoint.encodeLatitude(box.minLat),minLat,0);
  NumericUtils.intToSortableBytes(LatLonPoint.encodeLatitude(box.maxLat),maxLat,0);
  NumericUtils.intToSortableBytes(LatLonPoint.encodeLongitude(box.minLon),minLon,0);
  NumericUtils.intToSortableBytes(LatLonPoint.encodeLongitude(box.maxLon),maxLon,0);
  float cumulativeCost=0;
  for (  Polygon polygon : polygons) {
    cumulativeCost+=20 * (polygon.getPolyLats().length + polygon.getHoles().length);
  }
  final float matchCost=cumulativeCost;
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      LeafReader reader=context.reader();
      PointValues values=reader.getPointValues();
      if (values == null) {
        return null;
      }
      FieldInfo fieldInfo=reader.getFieldInfos().fieldInfo(field);
      if (fieldInfo == null) {
        return null;
      }
      LatLonPoint.checkCompatible(fieldInfo);
      DocIdSetBuilder result=new DocIdSetBuilder(reader.maxDoc());
      final BitSet preApproved;
      if (values.getDocCount(field) * 100L < reader.maxDoc()) {
        preApproved=new SparseFixedBitSet(reader.maxDoc());
      }
 else {
        preApproved=new FixedBitSet(reader.maxDoc());
      }
      values.intersect(field,new IntersectVisitor(){
        @Override public void visit(        int docID){
          result.add(docID);
          preApproved.set(docID);
        }
        @Override public void visit(        int docID,        byte[] packedValue){
          if (StringHelper.compare(Integer.BYTES,packedValue,0,maxLat,0) > 0 || StringHelper.compare(Integer.BYTES,packedValue,0,minLat,0) < 0 || StringHelper.compare(Integer.BYTES,packedValue,Integer.BYTES,maxLon,0) > 0 || StringHelper.compare(Integer.BYTES,packedValue,Integer.BYTES,minLon,0) < 0) {
            return;
          }
          result.add(docID);
        }
        @Override public Relation compare(        byte[] minPackedValue,        byte[] maxPackedValue){
          if (StringHelper.compare(Integer.BYTES,minPackedValue,0,maxLat,0) > 0 || StringHelper.compare(Integer.BYTES,maxPackedValue,0,minLat,0) < 0 || StringHelper.compare(Integer.BYTES,minPackedValue,Integer.BYTES,maxLon,0) > 0 || StringHelper.compare(Integer.BYTES,maxPackedValue,Integer.BYTES,minLon,0) < 0) {
            return Relation.CELL_OUTSIDE_QUERY;
          }
          double cellMinLat=LatLonPoint.decodeLatitude(minPackedValue,0);
          double cellMinLon=LatLonPoint.decodeLongitude(minPackedValue,Integer.BYTES);
          double cellMaxLat=LatLonPoint.decodeLatitude(maxPackedValue,0);
          double cellMaxLon=LatLonPoint.decodeLongitude(maxPackedValue,Integer.BYTES);
          if (Polygon.contains(polygons,cellMinLat,cellMaxLat,cellMinLon,cellMaxLon)) {
            return Relation.CELL_INSIDE_QUERY;
          }
 else           if (Polygon.crosses(polygons,cellMinLat,cellMaxLat,cellMinLon,cellMaxLon)) {
            return Relation.CELL_CROSSES_QUERY;
          }
 else {
            return Relation.CELL_OUTSIDE_QUERY;
          }
        }
      }
);
      DocIdSet set=result.build();
      final DocIdSetIterator disi=set.iterator();
      if (disi == null) {
        return null;
      }
      SortedNumericDocValues docValues=DocValues.getSortedNumeric(reader,field);
      TwoPhaseIterator iterator=new TwoPhaseIterator(disi){
        @Override public boolean matches() throws IOException {
          int docId=disi.docID();
          if (preApproved.get(docId)) {
            return true;
          }
 else {
            docValues.setDocument(docId);
            int count=docValues.count();
            for (int i=0; i < count; i++) {
              long encoded=docValues.valueAt(i);
              double docLatitude=LatLonPoint.decodeLatitude((int)(encoded >> 32));
              double docLongitude=LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));
              if (Polygon.contains(polygons,docLatitude,docLongitude)) {
                return true;
              }
            }
            return false;
          }
        }
        @Override public float matchCost(){
          return matchCost;
        }
      }
;
      return new ConstantScoreScorer(this,score(),iterator);
    }
  }
;
}
