{
  final Rectangle box=Rectangle.fromPolygon(polygons);
  final byte minLat[]=new byte[Integer.BYTES];
  final byte maxLat[]=new byte[Integer.BYTES];
  final byte minLon[]=new byte[Integer.BYTES];
  final byte maxLon[]=new byte[Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(box.minLat),minLat,0);
  NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat),maxLat,0);
  NumericUtils.intToSortableBytes(encodeLongitude(box.minLon),minLon,0);
  NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon),maxLon,0);
  final LatLonGrid grid=new LatLonGrid(encodeLatitude(box.minLat),encodeLatitude(box.maxLat),encodeLongitude(box.minLon),encodeLongitude(box.maxLon),polygons);
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      LeafReader reader=context.reader();
      PointValues values=reader.getPointValues();
      if (values == null) {
        return null;
      }
      FieldInfo fieldInfo=reader.getFieldInfos().fieldInfo(field);
      if (fieldInfo == null) {
        return null;
      }
      LatLonPoint.checkCompatible(fieldInfo);
      DocIdSetBuilder result=new DocIdSetBuilder(reader.maxDoc());
      values.intersect(field,new IntersectVisitor(){
        @Override public void visit(        int docID){
          result.add(docID);
        }
        @Override public void visit(        int docID,        byte[] packedValue){
          if (StringHelper.compare(Integer.BYTES,packedValue,0,maxLat,0) > 0 || StringHelper.compare(Integer.BYTES,packedValue,0,minLat,0) < 0 || StringHelper.compare(Integer.BYTES,packedValue,Integer.BYTES,maxLon,0) > 0 || StringHelper.compare(Integer.BYTES,packedValue,Integer.BYTES,minLon,0) < 0) {
            return;
          }
          if (grid.contains(NumericUtils.sortableBytesToInt(packedValue,0),NumericUtils.sortableBytesToInt(packedValue,Integer.BYTES))) {
            result.add(docID);
          }
        }
        @Override public Relation compare(        byte[] minPackedValue,        byte[] maxPackedValue){
          if (StringHelper.compare(Integer.BYTES,minPackedValue,0,maxLat,0) > 0 || StringHelper.compare(Integer.BYTES,maxPackedValue,0,minLat,0) < 0 || StringHelper.compare(Integer.BYTES,minPackedValue,Integer.BYTES,maxLon,0) > 0 || StringHelper.compare(Integer.BYTES,maxPackedValue,Integer.BYTES,minLon,0) < 0) {
            return Relation.CELL_OUTSIDE_QUERY;
          }
          double cellMinLat=decodeLatitude(minPackedValue,0);
          double cellMinLon=decodeLongitude(minPackedValue,Integer.BYTES);
          double cellMaxLat=decodeLatitude(maxPackedValue,0);
          double cellMaxLon=decodeLongitude(maxPackedValue,Integer.BYTES);
          return Polygon.relate(polygons,cellMinLat,cellMaxLat,cellMinLon,cellMaxLon);
        }
      }
);
      DocIdSet set=result.build();
      final DocIdSetIterator disi=set.iterator();
      if (disi == null) {
        return null;
      }
      return new ConstantScoreScorer(this,score(),disi);
    }
  }
;
}
