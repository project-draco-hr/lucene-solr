{
  SolrParams params=rb.req.getParams();
  if (!params.getBool(COMPONENT_NAME,false)) {
    return;
  }
  NamedList termVectors=new NamedList();
  rb.rsp.add(TERM_VECTORS,termVectors);
  boolean termFreq=params.getBool(TermVectorParams.TF,false);
  boolean positions=params.getBool(TermVectorParams.POSITIONS,false);
  boolean offsets=params.getBool(TermVectorParams.OFFSETS,false);
  boolean idf=params.getBool(TermVectorParams.IDF,false);
  boolean tfIdf=params.getBool(TermVectorParams.TF_IDF,false);
  boolean all=params.getBool(TermVectorParams.ALL,false);
  if (all == true) {
    termFreq=true;
    positions=true;
    offsets=true;
    idf=true;
    tfIdf=true;
  }
  String[] fields=params.getParams(TermVectorParams.FIELDS);
  if (fields == null) {
    fields=params.getParams(CommonParams.FL);
  }
  DocListAndSet listAndSet=rb.getResults();
  List<Integer> docIds=getInts(params.getParams(TermVectorParams.DOC_IDS));
  Iterator<Integer> iter;
  if (docIds != null && docIds.isEmpty() == false) {
    iter=docIds.iterator();
  }
 else {
    DocList list=listAndSet.docList;
    iter=list.iterator();
  }
  SolrCore core=rb.req.getCore();
  RefCounted<SolrIndexSearcher> searcher=core.getSearcher();
  try {
    IndexReader reader=searcher.get().getReader();
    TVMapper mapper=new TVMapper(fields,reader,termFreq,positions,offsets,idf,tfIdf);
    IndexSchema schema=core.getSchema();
    String uniqFieldName=schema.getUniqueKeyField().getName();
    SetBasedFieldSelector fieldSelector=new SetBasedFieldSelector(Collections.singleton(uniqFieldName),Collections.emptySet());
    while (iter.hasNext()) {
      Integer docId=iter.next();
      NamedList docNL=new NamedList();
      termVectors.add("doc-" + docId,docNL);
      mapper.docNL=docNL;
      Document document=reader.document(docId,fieldSelector);
      String uniqId=document.get(uniqFieldName);
      docNL.add("uniqueKey",uniqId);
      reader.getTermFreqVector(docId,mapper);
    }
    termVectors.add("uniqueKeyFieldName",uniqFieldName);
  }
  finally {
    searcher.decref();
  }
}
