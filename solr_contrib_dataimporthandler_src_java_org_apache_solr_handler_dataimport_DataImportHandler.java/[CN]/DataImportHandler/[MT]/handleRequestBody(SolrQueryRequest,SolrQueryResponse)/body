{
  rsp.setHttpCaching(false);
  ContentStream contentStream=null;
  Iterable<ContentStream> streams=req.getContentStreams();
  if (streams != null) {
    for (    ContentStream stream : streams) {
      contentStream=stream;
      break;
    }
  }
  SolrParams params=req.getParams();
  RequestInfo requestParams=new RequestInfo(getParamsMap(params),contentStream);
  String command=requestParams.getCommand();
  if (DataImporter.SHOW_CONF_CMD.equals(command)) {
    ModifiableSolrParams rawParams=new ModifiableSolrParams(req.getParams());
    rawParams.set(CommonParams.WT,"raw");
    req.setParams(rawParams);
    String dataConfigFile=defaults.get("config");
    ContentStreamBase content=new ContentStreamBase.StringStream(SolrWriter.getResourceAsString(req.getCore().getResourceLoader().openResource(dataConfigFile)));
    rsp.add(RawResponseWriter.CONTENT,content);
    return;
  }
  rsp.add("initArgs",initArgs);
  String message="";
  if (command != null)   rsp.add("command",command);
  if (requestParams.isDebug() && (importer == null || !importer.isBusy())) {
    importer=null;
    if (requestParams.getDataConfig() != null) {
      try {
        processConfiguration((NamedList)initArgs.get("defaults"));
        importer=new DataImporter(new InputSource(new StringReader(requestParams.getDataConfig())),req.getCore(),dataSources,coreScopeSession,myName);
      }
 catch (      RuntimeException e) {
        rsp.add("exception",DebugLogger.getStacktraceString(e));
        importer=null;
        return;
      }
    }
 else {
      inform(req.getCore());
    }
    message=DataImporter.MSG.CONFIG_RELOADED;
  }
  if (importer == null) {
    rsp.add("status",DataImporter.MSG.NO_INIT);
    return;
  }
  if (command != null && DataImporter.ABORT_CMD.equals(command)) {
    importer.runCmd(requestParams,null);
  }
 else   if (importer.isBusy()) {
    message=DataImporter.MSG.CMD_RUNNING;
  }
 else   if (command != null) {
    if (DataImporter.FULL_IMPORT_CMD.equals(command) || DataImporter.DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {
      UpdateRequestProcessorChain processorChain=req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));
      UpdateRequestProcessor processor=processorChain.createProcessor(req,rsp);
      SolrResourceLoader loader=req.getCore().getResourceLoader();
      SolrWriter sw=getSolrWriter(processor,loader,requestParams,req);
      if (requestParams.isDebug()) {
        if (debugEnabled) {
          importer.runCmd(requestParams,sw);
          rsp.add("mode","debug");
          rsp.add("documents",requestParams.getDebugInfo().debugDocuments);
          if (requestParams.getDebugInfo().debugVerboseOutput != null) {
            rsp.add("verbose-output",requestParams.getDebugInfo().debugVerboseOutput);
          }
        }
 else {
          message=DataImporter.MSG.DEBUG_NOT_ENABLED;
        }
      }
 else {
        if (requestParams.getContentStream() == null && !requestParams.isSyncMode()) {
          importer.runAsync(requestParams,sw);
        }
 else {
          importer.runCmd(requestParams,sw);
        }
      }
    }
 else     if (DataImporter.RELOAD_CONF_CMD.equals(command)) {
      importer=null;
      inform(req.getCore());
      message=DataImporter.MSG.CONFIG_RELOADED;
    }
  }
  rsp.add("status",importer.isBusy() ? "busy" : "idle");
  rsp.add("importResponse",message);
  rsp.add("statusMessages",importer.getStatusMessages());
  RequestHandlerUtils.addExperimentalFormatWarning(rsp);
}
