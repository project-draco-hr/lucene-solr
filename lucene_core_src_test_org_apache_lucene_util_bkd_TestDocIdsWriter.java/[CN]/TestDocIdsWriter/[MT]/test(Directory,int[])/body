{
  final long len;
  try (IndexOutput out=dir.createOutput("tmp",IOContext.DEFAULT)){
    DocIdsWriter.writeDocIds(ints,0,ints.length,out);
    len=out.getFilePointer();
    if (random().nextBoolean()) {
      out.writeLong(0);
    }
  }
   try (IndexInput in=dir.openInput("tmp",IOContext.READONCE)){
    int[] read=new int[ints.length];
    DocIdsWriter.readInts(in,ints.length,read);
    assertArrayEquals(ints,read);
    assertEquals(len,in.getFilePointer());
  }
   try (IndexInput in=dir.openInput("tmp",IOContext.READONCE)){
    int[] read=new int[ints.length];
    DocIdsWriter.readInts(in,ints.length,new IntersectVisitor(){
      int i=0;
      @Override public void visit(      int docID) throws IOException {
        read[i++]=docID;
      }
      @Override public void visit(      int docID,      byte[] packedValue) throws IOException {
        throw new UnsupportedOperationException();
      }
      @Override public Relation compare(      byte[] minPackedValue,      byte[] maxPackedValue){
        throw new UnsupportedOperationException();
      }
    }
);
    assertArrayEquals(ints,read);
    assertEquals(len,in.getFilePointer());
  }
   dir.deleteFile("tmp");
}
