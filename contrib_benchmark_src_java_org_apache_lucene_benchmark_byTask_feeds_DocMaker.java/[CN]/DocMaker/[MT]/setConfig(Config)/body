{
  this.config=config;
  try {
    String sourceClass=config.get("content.source","org.apache.lucene.benchmark.byTask.feeds.SingleDocSource");
    source=(ContentSource)Class.forName(sourceClass).newInstance();
    source.setConfig(config);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  boolean stored=config.get("doc.stored",false);
  boolean tokenized=config.get("doc.tokenized",true);
  boolean norms=config.get("doc.tokenized.norms",false);
  boolean bodyNorms=config.get("doc.body.tokenized.norms",true);
  boolean termVec=config.get("doc.term.vector",false);
  storeVal=(stored ? Field.Store.YES : Field.Store.NO);
  if (tokenized) {
    indexVal=norms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;
    bodyIndexVal=bodyNorms ? Index.ANALYZED : Index.ANALYZED_NO_NORMS;
  }
 else {
    indexVal=norms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;
    bodyIndexVal=bodyNorms ? Index.NOT_ANALYZED : Index.NOT_ANALYZED_NO_NORMS;
  }
  boolean termVecPositions=config.get("doc.term.vector.positions",false);
  boolean termVecOffsets=config.get("doc.term.vector.offsets",false);
  if (termVecPositions && termVecOffsets) {
    termVecVal=TermVector.WITH_POSITIONS_OFFSETS;
  }
 else   if (termVecPositions) {
    termVecVal=TermVector.WITH_POSITIONS;
  }
 else   if (termVecOffsets) {
    termVecVal=TermVector.WITH_OFFSETS;
  }
 else   if (termVec) {
    termVecVal=TermVector.YES;
  }
 else {
    termVecVal=TermVector.NO;
  }
  storeBytes=config.get("doc.store.body.bytes",false);
  reuseFields=config.get("doc.reuse.fields",true);
  if (!reuseFields) {
    localDocState=new DocState(false,storeVal,indexVal,bodyIndexVal,termVecVal);
  }
 else {
    docState=new ThreadLocal();
  }
  indexProperties=config.get("doc.index.props",false);
}
