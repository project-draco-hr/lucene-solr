{
  final Weight weight=query.createWeight(searcher,needsScores);
  return new Weight(RandomApproximationQuery.this){
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      return weight.explain(context,doc);
    }
    @Override public float getValueForNormalization() throws IOException {
      return weight.getValueForNormalization();
    }
    @Override public void normalize(    float norm,    float topLevelBoost){
      weight.normalize(norm,topLevelBoost);
    }
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      final Scorer scorer=weight.scorer(context,acceptDocs);
      if (scorer == null) {
        return null;
      }
      final RandomTwoPhaseView twoPhaseView=new RandomTwoPhaseView(random,scorer);
      return new Scorer(this){
        @Override public TwoPhaseDocIdSetIterator asTwoPhaseIterator(){
          return twoPhaseView;
        }
        @Override public float score() throws IOException {
          return scorer.score();
        }
        @Override public int freq() throws IOException {
          return scorer.freq();
        }
        @Override public int nextPosition() throws IOException {
          return scorer.nextPosition();
        }
        @Override public int startOffset() throws IOException {
          return scorer.startOffset();
        }
        @Override public int endOffset() throws IOException {
          return scorer.endOffset();
        }
        @Override public BytesRef getPayload() throws IOException {
          return scorer.getPayload();
        }
        @Override public int docID(){
          return scorer.docID();
        }
        @Override public int nextDoc() throws IOException {
          return scorer.nextDoc();
        }
        @Override public int advance(        int target) throws IOException {
          return scorer.advance(target);
        }
        @Override public long cost(){
          return scorer.cost();
        }
      }
;
    }
  }
;
}
