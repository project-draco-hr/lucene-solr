{
  solrParams=SolrParams.wrapDefaults(localParams,params);
  minShouldMatch=DisMaxQParser.parseMinShouldMatch(req.getSchema(),solrParams);
  userFields=new UserFields(U.parseFieldBoosts(solrParams.getParams(DMP.UF)));
  try {
    queryFields=DisMaxQParser.parseQueryFields(req.getSchema(),solrParams);
  }
 catch (  SyntaxError e) {
    throw new RuntimeException();
  }
  int pslop[]=new int[4];
  pslop[0]=solrParams.getInt(DisMaxParams.PS,0);
  pslop[2]=solrParams.getInt(DisMaxParams.PS2,pslop[0]);
  pslop[3]=solrParams.getInt(DisMaxParams.PS3,pslop[0]);
  List<FieldParams> phraseFields=U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF),0,pslop[0]);
  List<FieldParams> phraseFields2=U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF2),2,pslop[2]);
  List<FieldParams> phraseFields3=U.parseFieldBoostsAndSlop(solrParams.getParams(DMP.PF3),3,pslop[3]);
  allPhraseFields=new ArrayList<FieldParams>(phraseFields.size() + phraseFields2.size() + phraseFields3.size());
  allPhraseFields.addAll(phraseFields);
  allPhraseFields.addAll(phraseFields2);
  allPhraseFields.addAll(phraseFields3);
  tiebreaker=solrParams.getFloat(DisMaxParams.TIE,0.0f);
  qslop=solrParams.getInt(DisMaxParams.QS,0);
  stopwords=solrParams.getBool(DMP.STOPWORDS,true);
  altQ=solrParams.get(DisMaxParams.ALTQ);
  lowercaseOperators=solrParams.getBool(DMP.LOWERCASE_OPS,true);
  boostParams=solrParams.getParams(DisMaxParams.BQ);
  boostFuncs=solrParams.getParams(DisMaxParams.BF);
  multBoosts=solrParams.getParams(DMP.MULT_BOOST);
}
