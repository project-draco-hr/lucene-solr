{
  try {
switch (type) {
case FIELD:
case PHRASE:
      Query query=super.getFieldQuery(field,val,type == QType.PHRASE);
    if (query instanceof BooleanQuery) {
      BooleanQuery bq=(BooleanQuery)query;
      if (!bq.isCoordDisabled()) {
        query=SolrPluginUtils.setMinShouldMatch(bq,minShouldMatch,false);
      }
    }
  if (query instanceof PhraseQuery) {
    PhraseQuery pq=(PhraseQuery)query;
    if (minClauseSize > 1 && pq.getTerms().length < minClauseSize)     return null;
    PhraseQuery.Builder builder=new PhraseQuery.Builder();
    Term[] terms=pq.getTerms();
    int[] positions=pq.getPositions();
    for (int i=0; i < terms.length; ++i) {
      builder.add(terms[i],positions[i]);
    }
    builder.setSlop(slop);
    query=builder.build();
  }
 else   if (query instanceof MultiPhraseQuery) {
    MultiPhraseQuery pq=(MultiPhraseQuery)query;
    if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize)     return null;
    ((MultiPhraseQuery)query).setSlop(slop);
  }
 else   if (minClauseSize > 1) {
    return null;
  }
return query;
case PREFIX:
return super.getPrefixQuery(field,val);
case WILDCARD:
return super.getWildcardQuery(field,val);
case FUZZY:
return super.getFuzzyQuery(field,val,flt);
case RANGE:
return super.getRangeQuery(field,val,val2,bool,bool2);
}
return null;
}
 catch (Exception e) {
return null;
}
}
