{
  FieldType ft=parser.getReq().getSchema().getFieldType(fieldName);
  Analyzer qa=ft.getQueryAnalyzer();
  if (!(qa instanceof TokenizerChain)) {
    return qa;
  }
  TokenizerChain tcq=(TokenizerChain)qa;
  Analyzer ia=ft.getIndexAnalyzer();
  if (ia == qa || !(ia instanceof TokenizerChain)) {
    return qa;
  }
  TokenizerChain tci=(TokenizerChain)ia;
  for (  TokenFilterFactory tf : tci.getTokenFilterFactories()) {
    if (tf instanceof StopFilterFactory) {
      return qa;
    }
  }
  int stopIdx=-1;
  TokenFilterFactory[] facs=tcq.getTokenFilterFactories();
  for (int i=0; i < facs.length; i++) {
    TokenFilterFactory tf=facs[i];
    if (tf instanceof StopFilterFactory) {
      stopIdx=i;
      break;
    }
  }
  if (stopIdx == -1) {
    return qa;
  }
  TokenFilterFactory[] newtf=new TokenFilterFactory[facs.length - 1];
  for (int i=0, j=0; i < facs.length; i++) {
    if (i == stopIdx)     continue;
    newtf[j++]=facs[i];
  }
  TokenizerChain newa=new TokenizerChain(tcq.getTokenizerFactory(),newtf);
  newa.setPositionIncrementGap(tcq.getPositionIncrementGap(fieldName));
  return newa;
}
