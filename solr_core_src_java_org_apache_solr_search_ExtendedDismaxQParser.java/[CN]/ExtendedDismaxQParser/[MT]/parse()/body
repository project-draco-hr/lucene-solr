{
  parsed=true;
  BooleanQuery.Builder query=new BooleanQuery.Builder();
  query.setDisableCoord(true);
  parsedUserQuery=null;
  String userQuery=getString();
  altUserQuery=null;
  if (userQuery == null || userQuery.trim().length() == 0) {
    if (config.altQ != null) {
      QParser altQParser=subQuery(config.altQ,null);
      altUserQuery=altQParser.getQuery();
      query.add(altUserQuery,BooleanClause.Occur.MUST);
    }
 else {
      return null;
    }
  }
 else {
    ExtendedSolrQueryParser up=createEdismaxQueryParser(this,IMPOSSIBLE_FIELD_NAME);
    up.addAlias(IMPOSSIBLE_FIELD_NAME,config.tiebreaker,config.queryFields);
    addAliasesFromRequest(up,config.tiebreaker);
    up.setPhraseSlop(config.qslop);
    up.setAllowLeadingWildcard(true);
    List<Clause> clauses=splitIntoClauses(userQuery,false);
    String mainUserQuery=rebuildUserQuery(clauses,config.lowercaseOperators);
    up.minShouldMatch=config.minShouldMatch;
    parsedUserQuery=parseOriginalQuery(up,mainUserQuery,clauses,config);
    if (parsedUserQuery == null) {
      parsedUserQuery=parseEscapedQuery(up,escapeUserQuery(clauses),config);
    }
    query.add(parsedUserQuery,BooleanClause.Occur.MUST);
    addPhraseFieldQueries(query,clauses,config);
  }
  boostQueries=getBoostQueries();
  for (  Query f : boostQueries) {
    query.add(f,BooleanClause.Occur.SHOULD);
  }
  List<Query> boostFunctions=getBoostFunctions();
  for (  Query f : boostFunctions) {
    query.add(f,BooleanClause.Occur.SHOULD);
  }
  Query topQuery=query.build();
  List<ValueSource> boosts=getMultiplicativeBoosts();
  if (boosts.size() > 1) {
    ValueSource prod=new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));
    topQuery=new BoostedQuery(topQuery,prod);
  }
 else   if (boosts.size() == 1) {
    topQuery=new BoostedQuery(topQuery,boosts.get(0));
  }
  return topQuery;
}
