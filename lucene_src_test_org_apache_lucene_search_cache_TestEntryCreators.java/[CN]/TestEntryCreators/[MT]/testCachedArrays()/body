{
  FieldCache cache=FieldCache.DEFAULT;
  CachedArray last=null;
  CachedArray justbits=null;
  String field;
  for (  NumberTypeTester tester : typeTests) {
    justbits=getWithReflection(cache,tester,CachedArrayCreator.OPTION_CACHE_BITS);
    assertNull("should not get values : " + tester,justbits.getRawArray());
    assertNotNull("should get bits : " + tester,justbits.valid);
    last=getWithReflection(cache,tester,CachedArrayCreator.CACHE_VALUES_AND_BITS);
    assertEquals("should use same cached object : " + tester,justbits,last);
    assertNull("Validate=false shoudl not regenerate : " + tester,justbits.getRawArray());
    last=getWithReflection(cache,tester,CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE);
    assertEquals("should use same cached object : " + tester,justbits,last);
    assertNotNull("Validate=true should add the Array : " + tester,justbits.getRawArray());
    checkCachedArrayValuesAndBits(tester,last);
  }
  cache.purgeAllCaches();
  int flags=CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;
  field="theRandomInt";
  last=cache.getInts(reader,field,new IntValuesCreator(field,FieldCache.DEFAULT_INT_PARSER,flags));
  checkCachedArrayValuesAndBits(typeTests[2],last);
  try {
    cache.getInts(reader,field,new IntValuesCreator(field,FieldCache.NUMERIC_UTILS_INT_PARSER,flags));
    fail("Should fail if you ask for the same type with a different parser : " + field);
  }
 catch (  Exception ex) {
  }
  field="theRandomLong";
  last=cache.getLongs(reader,field,new LongValuesCreator(field,FieldCache.DEFAULT_LONG_PARSER,flags));
  checkCachedArrayValuesAndBits(typeTests[3],last);
  try {
    cache.getLongs(reader,field,new LongValuesCreator(field,FieldCache.NUMERIC_UTILS_LONG_PARSER,flags));
    fail("Should fail if you ask for the same type with a different parser : " + field);
  }
 catch (  Exception ex) {
  }
  field="theRandomFloat";
  last=cache.getFloats(reader,field,new FloatValuesCreator(field,FieldCache.DEFAULT_FLOAT_PARSER,flags));
  checkCachedArrayValuesAndBits(typeTests[4],last);
  try {
    cache.getFloats(reader,field,new FloatValuesCreator(field,FieldCache.NUMERIC_UTILS_FLOAT_PARSER,flags));
    fail("Should fail if you ask for the same type with a different parser : " + field);
  }
 catch (  Exception ex) {
  }
  field="theRandomDouble";
  last=cache.getDoubles(reader,field,new DoubleValuesCreator(field,FieldCache.DEFAULT_DOUBLE_PARSER,flags));
  checkCachedArrayValuesAndBits(typeTests[5],last);
  try {
    cache.getDoubles(reader,field,new DoubleValuesCreator(field,FieldCache.NUMERIC_UTILS_DOUBLE_PARSER,flags));
    fail("Should fail if you ask for the same type with a different parser : " + field);
  }
 catch (  Exception ex) {
  }
}
