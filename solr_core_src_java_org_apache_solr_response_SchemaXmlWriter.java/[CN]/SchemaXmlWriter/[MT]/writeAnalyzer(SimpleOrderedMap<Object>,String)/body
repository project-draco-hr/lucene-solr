{
  openStartTag(FieldType.ANALYZER);
  if (null != analyzerType) {
    writeAttr(FieldType.TYPE,analyzerType);
  }
  List<SimpleOrderedMap<Object>> charFilterPropertiesList=null;
  SimpleOrderedMap<Object> tokenizerProperties=null;
  List<SimpleOrderedMap<Object>> filterPropertiesList=null;
  for (int i=0; i < analyzerProperties.size(); ++i) {
    String name=analyzerProperties.getName(i);
    if (name.equals(FieldType.CHAR_FILTERS)) {
      charFilterPropertiesList=(List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);
    }
 else     if (name.equals(FieldType.TOKENIZER)) {
      tokenizerProperties=(SimpleOrderedMap<Object>)analyzerProperties.getVal(i);
    }
 else     if (name.equals(FieldType.FILTERS)) {
      filterPropertiesList=(List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);
    }
 else     if (name.equals(FieldType.CLASS_NAME)) {
      if (!"solr.TokenizerChain".equals(analyzerProperties.getVal(i))) {
        writeAttr(name,analyzerProperties.getVal(i).toString());
      }
    }
  }
  boolean isEmptyTag=null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;
  if (isEmptyTag) {
    closeStartTag(true);
  }
 else {
    closeStartTag(false);
    incLevel();
    if (null != charFilterPropertiesList) {
      for (      SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {
        openStartTag(FieldType.CHAR_FILTER);
        for (int i=0; i < charFilterProperties.size(); ++i) {
          writeAttr(charFilterProperties.getName(i),charFilterProperties.getVal(i).toString());
        }
        closeStartTag(true);
      }
    }
    if (null != tokenizerProperties) {
      openStartTag(FieldType.TOKENIZER);
      for (int i=0; i < tokenizerProperties.size(); ++i) {
        writeAttr(tokenizerProperties.getName(i),tokenizerProperties.getVal(i).toString());
      }
      closeStartTag(true);
    }
    if (null != filterPropertiesList) {
      for (      SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {
        openStartTag(FieldType.FILTER);
        for (int i=0; i < filterProperties.size(); ++i) {
          writeAttr(filterProperties.getName(i),filterProperties.getVal(i).toString());
        }
        closeStartTag(true);
      }
    }
    decLevel();
    endTag(FieldType.ANALYZER);
  }
}
