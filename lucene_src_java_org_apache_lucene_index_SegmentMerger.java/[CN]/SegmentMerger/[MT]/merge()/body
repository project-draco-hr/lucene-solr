{
  final int numReaders=mergeState.readers.size();
  mergeState.docMaps=new int[numReaders][];
  mergeState.docBase=new int[numReaders];
  mergeState.dirPayloadProcessor=new PayloadProcessorProvider.DirPayloadProcessor[numReaders];
  mergeState.currentPayloadProcessor=new PayloadProcessorProvider.PayloadProcessor[numReaders];
  mergeFieldInfos();
  setMatchingSegmentReaders();
  mergeState.mergedDocCount=mergeFields();
  final SegmentWriteState segmentWriteState=new SegmentWriteState(mergeState.infoStream,directory,segment,mergeState.fieldInfos,mergeState.mergedDocCount,termIndexInterval,codec,null,context);
  mergeTerms(segmentWriteState);
  mergePerDoc(segmentWriteState);
  mergeNorms();
  if (mergeState.fieldInfos.hasVectors()) {
    mergeVectors(segmentWriteState);
  }
  mergeState.fieldInfos.write(directory,segment + "." + IndexFileNames.FIELD_INFOS_EXTENSION);
  return mergeState;
}
