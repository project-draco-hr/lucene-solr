{
  Map<FieldInfo,TypePromoter> docValuesTypes=new HashMap<FieldInfo,TypePromoter>();
  Map<FieldInfo,TypePromoter> normValuesTypes=new HashMap<FieldInfo,TypePromoter>();
  for (  MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {
    final AtomicIndexReader reader=readerAndLiveDocs.reader;
    FieldInfos readerFieldInfos=reader.getFieldInfos();
    for (    FieldInfo fi : readerFieldInfos) {
      FieldInfo merged=mergeState.fieldInfos.add(fi);
      if (fi.hasDocValues()) {
        TypePromoter previous=docValuesTypes.get(merged);
        docValuesTypes.put(merged,mergeDocValuesType(previous,reader.docValues(fi.name)));
      }
      if (fi.normsPresent()) {
        TypePromoter previous=normValuesTypes.get(merged);
        normValuesTypes.put(merged,mergeDocValuesType(previous,reader.normValues(fi.name)));
      }
    }
  }
  updatePromoted(normValuesTypes,true);
  updatePromoted(docValuesTypes,false);
}
