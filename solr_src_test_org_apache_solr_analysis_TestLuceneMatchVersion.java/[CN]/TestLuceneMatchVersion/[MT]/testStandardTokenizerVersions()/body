{
  assertEquals(DEFAULT_VERSION,solrConfig.luceneMatchVersion);
  final IndexSchema schema=h.getCore().getSchema();
  FieldType type=schema.getFieldType("textDefault");
  TokenizerChain ana=(TokenizerChain)type.getAnalyzer();
  assertEquals(DEFAULT_VERSION,((BaseTokenizerFactory)ana.getTokenizerFactory()).luceneMatchVersion);
  assertEquals(DEFAULT_VERSION,((BaseTokenFilterFactory)ana.getTokenFilterFactories()[2]).luceneMatchVersion);
  type=schema.getFieldType("text30");
  ana=(TokenizerChain)type.getAnalyzer();
  assertEquals(Version.LUCENE_30,((BaseTokenizerFactory)ana.getTokenizerFactory()).luceneMatchVersion);
  assertEquals(Version.LUCENE_31,((BaseTokenFilterFactory)ana.getTokenFilterFactories()[2]).luceneMatchVersion);
  final Field matchVersionField=StandardAnalyzer.class.getSuperclass().getDeclaredField("matchVersion");
  matchVersionField.setAccessible(true);
  type=schema.getFieldType("textStandardAnalyzerDefault");
  Analyzer ana1=type.getAnalyzer();
  assertTrue(ana1 instanceof StandardAnalyzer);
  assertEquals(DEFAULT_VERSION,matchVersionField.get(ana1));
  type=schema.getFieldType("textStandardAnalyzer30");
  ana1=type.getAnalyzer();
  assertTrue(ana1 instanceof StandardAnalyzer);
  assertEquals(Version.LUCENE_30,matchVersionField.get(ana1));
}
