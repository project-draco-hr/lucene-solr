{
  Random random=new Random(random().nextLong());
  final LineFileDocs docs=new LineFileDocs(random,true);
  final Directory d=newDirectory();
  MockAnalyzer analyzer=new MockAnalyzer(random());
  analyzer.setMaxTokenLength(TestUtil.nextInt(random(),1,IndexWriter.MAX_TERM_LENGTH));
  final RandomIndexWriter w=new RandomIndexWriter(random(),d,analyzer);
  final int numDocs=atLeast(10);
  for (int docCount=0; docCount < numDocs; docCount++) {
    w.addDocument(docs.nextDoc());
  }
  final IndexReader r=w.getReader();
  w.close();
  final List<BytesRef> terms=new ArrayList<>();
  final TermsEnum termsEnum=MultiFields.getTerms(r,"body").iterator();
  BytesRef term;
  while ((term=termsEnum.next()) != null) {
    terms.add(BytesRef.deepCopyOf(term));
  }
  if (VERBOSE) {
    System.out.println("TEST: " + terms.size() + " terms");
  }
  int upto=-1;
  final int iters=atLeast(200);
  for (int iter=0; iter < iters; iter++) {
    final boolean isEnd;
    if (upto != -1 && random().nextBoolean()) {
      if (VERBOSE) {
        System.out.println("TEST: iter next");
      }
      isEnd=termsEnum.next() == null;
      upto++;
      if (isEnd) {
        if (VERBOSE) {
          System.out.println("  end");
        }
        assertEquals(upto,terms.size());
        upto=-1;
      }
 else {
        if (VERBOSE) {
          System.out.println("  got term=" + termsEnum.term().utf8ToString() + " expected="+ terms.get(upto).utf8ToString());
        }
        assertTrue(upto < terms.size());
        assertEquals(terms.get(upto),termsEnum.term());
      }
    }
 else {
      final BytesRef target;
      final String exists;
      if (random().nextBoolean()) {
        if (random().nextBoolean()) {
          target=new BytesRef(TestUtil.randomSimpleString(random()));
        }
 else {
          target=new BytesRef(TestUtil.randomRealisticUnicodeString(random()));
        }
        exists="likely not";
      }
 else {
        target=terms.get(random().nextInt(terms.size()));
        exists="yes";
      }
      upto=Collections.binarySearch(terms,target);
      if (random().nextBoolean()) {
        if (VERBOSE) {
          System.out.println("TEST: iter seekCeil target=" + target.utf8ToString() + " exists="+ exists);
        }
        final TermsEnum.SeekStatus status=termsEnum.seekCeil(target);
        if (VERBOSE) {
          System.out.println("  got " + status);
        }
        if (upto < 0) {
          upto=-(upto + 1);
          if (upto >= terms.size()) {
            assertEquals(TermsEnum.SeekStatus.END,status);
            upto=-1;
          }
 else {
            assertEquals(TermsEnum.SeekStatus.NOT_FOUND,status);
            assertEquals(terms.get(upto),termsEnum.term());
          }
        }
 else {
          assertEquals(TermsEnum.SeekStatus.FOUND,status);
          assertEquals(terms.get(upto),termsEnum.term());
        }
      }
 else {
        if (VERBOSE) {
          System.out.println("TEST: iter seekExact target=" + target.utf8ToString() + " exists="+ exists);
        }
        final boolean result=termsEnum.seekExact(target);
        if (VERBOSE) {
          System.out.println("  got " + result);
        }
        if (upto < 0) {
          assertFalse(result);
          upto=-1;
        }
 else {
          assertTrue(result);
          assertEquals(target,termsEnum.term());
        }
      }
    }
  }
  r.close();
  d.close();
  docs.close();
}
