{
  Directory d=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),d);
  Set<String> terms=new HashSet<String>();
  String prefix=TestUtil.randomSimpleString(random(),1,20);
  int numTerms=atLeast(1000);
  if (VERBOSE) {
    System.out.println("TEST: " + numTerms + " terms; prefix="+ prefix);
  }
  while (terms.size() < numTerms) {
    terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(),1,20));
  }
  for (  String term : terms) {
    Document doc=new Document();
    doc.add(newStringField("id",term,Field.Store.YES));
    w.addDocument(doc);
  }
  IndexReader r=w.getReader();
  if (VERBOSE) {
    System.out.println("\nTEST: reader=" + r);
  }
  TermsEnum termsEnum=MultiFields.getTerms(r,"id").iterator(null);
  DocsEnum docsEnum=null;
  PerThreadPKLookup pkLookup=new PerThreadPKLookup(r,"id");
  int iters=atLeast(numTerms * 3);
  List<String> termsList=new ArrayList<>(terms);
  for (int iter=0; iter < iters; iter++) {
    String term;
    boolean shouldExist;
    if (random().nextBoolean()) {
      term=termsList.get(random().nextInt(terms.size()));
      shouldExist=true;
    }
 else {
      term=prefix + TestUtil.randomSimpleString(random(),1,20);
      shouldExist=terms.contains(term);
    }
    if (VERBOSE) {
      System.out.println("\nTEST: try term=" + term);
      System.out.println("  shouldExist?=" + shouldExist);
    }
    BytesRef termBytesRef=new BytesRef(term);
    boolean actualResult=termsEnum.seekExact(termBytesRef);
    assertEquals(shouldExist,actualResult);
    if (shouldExist) {
      docsEnum=termsEnum.docs(null,docsEnum,0);
      int docID=docsEnum.nextDoc();
      assertTrue(docID != DocsEnum.NO_MORE_DOCS);
      assertEquals(docID,pkLookup.lookup(termBytesRef));
      StoredDocument doc=r.document(docID);
      assertEquals(term,doc.get("id"));
      if (random().nextInt(7) == 1) {
        termsEnum.next();
      }
    }
 else {
      assertEquals(-1,pkLookup.lookup(termBytesRef));
    }
    if (random().nextInt(7) == 1) {
      TermsEnum.SeekStatus status=termsEnum.seekCeil(termBytesRef);
      if (shouldExist) {
        assertEquals(TermsEnum.SeekStatus.FOUND,status);
      }
 else {
        assertNotSame(TermsEnum.SeekStatus.FOUND,status);
      }
    }
  }
  r.close();
  w.close();
  d.close();
}
