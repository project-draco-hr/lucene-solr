{
  final String[] terms=new String[_TestUtil.nextInt(random(),1,atLeast(1000))];
  final Set<String> seen=new HashSet<String>();
  final boolean allowEmptyString=random().nextBoolean();
  if (random().nextInt(10) == 7 && terms.length > 2) {
    final int numTermsSamePrefix=random().nextInt(terms.length / 2);
    if (numTermsSamePrefix > 0) {
      String prefix;
      while (true) {
        prefix=getRandomString();
        if (prefix.length() < 5) {
          continue;
        }
 else {
          break;
        }
      }
      while (seen.size() < numTermsSamePrefix) {
        final String t=prefix + getRandomString();
        if (!seen.contains(t)) {
          terms[seen.size()]=t;
          seen.add(t);
        }
      }
    }
  }
  while (seen.size() < terms.length) {
    final String t=getRandomString();
    if (!seen.contains(t) && (allowEmptyString || t.length() != 0)) {
      terms[seen.size()]=t;
      seen.add(t);
    }
  }
  r=makeIndex(terms);
  testRandomSeeks(r,terms);
  close();
}
