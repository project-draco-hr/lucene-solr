{
  StringBuilder collation=new StringBuilder(origQuery);
  int offset=0;
  String corr="";
  for (int i=0; i < corrections.size(); i++) {
    SpellCheckCorrection correction=corrections.get(i);
    Token tok=correction.getOriginal();
    if (tok.getPositionIncrement() == 0)     continue;
    corr=correction.getCorrection();
    boolean addParenthesis=false;
    Character requiredOrProhibited=null;
    int indexOfSpace=corr.indexOf(' ');
    StringBuilder corrSb=new StringBuilder(corr);
    int bump=1;
    while (indexOfSpace > -1 && indexOfSpace < corr.length() - 1) {
      addParenthesis=true;
      char previousChar=tok.startOffset() > 0 ? origQuery.charAt(tok.startOffset() - 1) : ' ';
      if (previousChar == '-' || previousChar == '+') {
        corrSb.insert(indexOfSpace + bump,previousChar);
        if (requiredOrProhibited == null) {
          requiredOrProhibited=previousChar;
        }
        bump++;
      }
 else       if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {
        corrSb.insert(indexOfSpace + bump,"AND ");
        bump+=4;
      }
      indexOfSpace=correction.getCorrection().indexOf(' ',indexOfSpace + bump);
    }
    int oneForReqOrProhib=0;
    if (addParenthesis) {
      if (requiredOrProhibited != null) {
        corrSb.insert(0,requiredOrProhibited);
        oneForReqOrProhib++;
      }
      corrSb.insert(0,'(');
      corrSb.append(')');
    }
    corr=corrSb.toString();
    int startIndex=tok.startOffset() + offset - oneForReqOrProhib;
    int endIndex=tok.endOffset() + offset;
    collation.replace(startIndex,endIndex,corr);
    offset+=corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());
  }
  return collation.toString();
}
