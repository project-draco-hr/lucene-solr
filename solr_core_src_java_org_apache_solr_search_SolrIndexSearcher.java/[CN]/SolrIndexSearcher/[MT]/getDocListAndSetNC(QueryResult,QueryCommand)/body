{
  int len=cmd.getSupersetMaxDoc();
  int last=len;
  if (last < 0 || last > maxDoc())   last=maxDoc();
  final int lastDocRequested=last;
  int nDocsReturned;
  int totalHits;
  float maxScore;
  int[] ids;
  float[] scores;
  DocSet set;
  boolean needScores=(cmd.getFlags() & GET_SCORES) != 0;
  int maxDoc=maxDoc();
  int smallSetSize=maxDoc >> 6;
  ProcessedFilter pf=getProcessedFilter(cmd.getFilter(),cmd.getFilterList());
  Query query=QueryUtils.makeQueryable(cmd.getQuery());
  if (pf.filter != null) {
    query=new FilteredQuery(query,pf.filter);
  }
  if (lastDocRequested <= 0) {
    final float[] topscore=new float[]{Float.NEGATIVE_INFINITY};
    Collector collector;
    final DocSetCollector setCollector=new DocSetCollector(smallSetSize,maxDoc);
    if (!needScores) {
      collector=setCollector;
    }
 else {
      final Collector topScoreCollector=new SimpleCollector(){
        Scorer scorer;
        @Override public void setScorer(        Scorer scorer) throws IOException {
          this.scorer=scorer;
        }
        @Override public void collect(        int doc) throws IOException {
          float score=scorer.score();
          if (score > topscore[0])           topscore[0]=score;
        }
        @Override public boolean needsScores(){
          return true;
        }
      }
;
      collector=MultiCollector.wrap(setCollector,topScoreCollector);
    }
    buildAndRunCollectorChain(qr,query,collector,cmd,pf.postFilter);
    set=setCollector.getDocSet();
    nDocsReturned=0;
    ids=new int[nDocsReturned];
    scores=new float[nDocsReturned];
    totalHits=set.size();
    maxScore=totalHits > 0 ? topscore[0] : 0.0f;
    qr.setNextCursorMark(cmd.getCursorMark());
  }
 else {
    final TopDocsCollector topCollector=buildTopDocsCollector(len,cmd);
    DocSetCollector setCollector=new DocSetCollector(maxDoc >> 6,maxDoc);
    Collector collector=MultiCollector.wrap(topCollector,setCollector);
    buildAndRunCollectorChain(qr,query,collector,cmd,pf.postFilter);
    set=setCollector.getDocSet();
    totalHits=topCollector.getTotalHits();
    assert(totalHits == set.size());
    TopDocs topDocs=topCollector.topDocs(0,len);
    populateNextCursorMarkFromTopDocs(qr,cmd,topDocs);
    maxScore=totalHits > 0 ? topDocs.getMaxScore() : 0.0f;
    nDocsReturned=topDocs.scoreDocs.length;
    ids=new int[nDocsReturned];
    scores=(cmd.getFlags() & GET_SCORES) != 0 ? new float[nDocsReturned] : null;
    for (int i=0; i < nDocsReturned; i++) {
      ScoreDoc scoreDoc=topDocs.scoreDocs[i];
      ids[i]=scoreDoc.doc;
      if (scores != null)       scores[i]=scoreDoc.score;
    }
  }
  int sliceLen=Math.min(lastDocRequested,nDocsReturned);
  if (sliceLen < 0)   sliceLen=0;
  qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));
  qr.setDocSet(set);
  return pf.filter == null && pf.postFilter == null ? qr.getDocSet() : null;
}
