{
  int largestPossible=deState.termsEnum.docFreq();
  boolean useCache=filterCache != null && largestPossible >= deState.minSetSizeCached;
  TermQuery key=null;
  if (useCache) {
    key=new TermQuery(new Term(deState.fieldName,BytesRef.deepCopyOf(deState.termsEnum.term())));
    DocSet result=filterCache.get(key);
    if (result != null)     return result;
  }
  int smallSetSize=maxDoc() >> 6;
  int scratchSize=Math.min(smallSetSize,largestPossible);
  if (deState.scratch == null || deState.scratch.length < scratchSize)   deState.scratch=new int[scratchSize];
  final int[] docs=deState.scratch;
  int upto=0;
  int bitsSet=0;
  FixedBitSet fbs=null;
  PostingsEnum postingsEnum=deState.termsEnum.postings(deState.liveDocs,deState.postingsEnum,PostingsEnum.NONE);
  if (deState.postingsEnum == null) {
    deState.postingsEnum=postingsEnum;
  }
  if (postingsEnum instanceof MultiPostingsEnum) {
    MultiPostingsEnum.EnumWithSlice[] subs=((MultiPostingsEnum)postingsEnum).getSubs();
    int numSubs=((MultiPostingsEnum)postingsEnum).getNumSubs();
    for (int subindex=0; subindex < numSubs; subindex++) {
      MultiPostingsEnum.EnumWithSlice sub=subs[subindex];
      if (sub.postingsEnum == null)       continue;
      int base=sub.slice.start;
      int docid;
      if (largestPossible > docs.length) {
        if (fbs == null)         fbs=new FixedBitSet(maxDoc());
        while ((docid=sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
          fbs.set(docid + base);
          bitsSet++;
        }
      }
 else {
        while ((docid=sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
          docs[upto++]=docid + base;
        }
      }
    }
  }
 else {
    int docid;
    if (largestPossible > docs.length) {
      if (fbs == null)       fbs=new FixedBitSet(maxDoc());
      while ((docid=postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        fbs.set(docid);
        bitsSet++;
      }
    }
 else {
      while ((docid=postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        docs[upto++]=docid;
      }
    }
  }
  DocSet result;
  if (fbs != null) {
    for (int i=0; i < upto; i++) {
      fbs.set(docs[i]);
    }
    bitsSet+=upto;
    result=new BitDocSet(fbs,bitsSet);
  }
 else {
    result=upto == 0 ? DocSet.EMPTY : new SortedIntDocSet(Arrays.copyOf(docs,upto));
  }
  if (useCache) {
    filterCache.put(key,result);
  }
  return result;
}
