{
  EarlyTerminatingSortingCollector earlyTerminatingSortingCollector=null;
  if (cmd.getSegmentTerminateEarly()) {
    final Sort cmdSort=cmd.getSort();
    final int cmdLen=cmd.getLen();
    final Sort mergeSort=core.getSolrCoreState().getMergePolicySort();
    if (cmdSort == null || cmdLen <= 0 || mergeSort == null || !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort,mergeSort)) {
      log.warn("unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}",cmdSort,cmdLen,mergeSort);
    }
 else {
      collector=earlyTerminatingSortingCollector=new EarlyTerminatingSortingCollector(collector,cmdSort,cmd.getLen(),mergeSort);
    }
  }
  final boolean terminateEarly=cmd.getTerminateEarly();
  if (terminateEarly) {
    collector=new EarlyTerminatingCollector(collector,cmd.getLen());
  }
  final long timeAllowed=cmd.getTimeAllowed();
  if (timeAllowed > 0) {
    collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),timeAllowed);
  }
  if (postFilter != null) {
    postFilter.setLastDelegate(collector);
    collector=postFilter;
  }
  try {
    super.search(query,collector);
  }
 catch (  TimeLimitingCollector.TimeExceededException|ExitableDirectoryReader.ExitingReaderException x) {
    log.warn("Query: [{}]; {}",query,x.getMessage());
    qr.setPartialResults(true);
  }
catch (  EarlyTerminatingCollectorException etce) {
    if (collector instanceof DelegatingCollector) {
      ((DelegatingCollector)collector).finish();
    }
    throw etce;
  }
 finally {
    if (earlyTerminatingSortingCollector != null) {
      qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());
    }
  }
  if (collector instanceof DelegatingCollector) {
    ((DelegatingCollector)collector).finish();
  }
}
