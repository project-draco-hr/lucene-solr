{
  super(wrapReader(core,r));
  this.path=path;
  this.directoryFactory=directoryFactory;
  this.reader=(DirectoryReader)super.readerContext.reader();
  this.rawReader=r;
  this.leafReader=SlowCompositeReaderWrapper.wrap(this.reader);
  this.core=core;
  this.schema=schema;
  this.name="Searcher@" + Integer.toHexString(hashCode()) + "["+ core.getName()+ "]"+ (name != null ? " " + name : "");
  log.info("Opening [{}]",this.name);
  if (directoryFactory.searchersReserveCommitPoints()) {
    core.getDeletionPolicy().saveCommitPoint(reader.getIndexCommit().getGeneration());
  }
  if (reserveDirectory) {
    directoryFactory.incRef(getIndexReader().directory());
    this.releaseDirectory=true;
  }
  this.closeReader=closeReader;
  setSimilarity(schema.getSimilarity());
  final SolrConfig solrConfig=core.getSolrConfig();
  this.queryResultWindowSize=solrConfig.queryResultWindowSize;
  this.queryResultMaxDocsCached=solrConfig.queryResultMaxDocsCached;
  this.useFilterForSortedQuery=solrConfig.useFilterForSortedQuery;
  this.enableLazyFieldLoading=solrConfig.enableLazyFieldLoading;
  this.cachingEnabled=enableCache;
  if (cachingEnabled) {
    final ArrayList<SolrCache> clist=new ArrayList<>();
    fieldValueCache=solrConfig.fieldValueCacheConfig == null ? null : solrConfig.fieldValueCacheConfig.newInstance();
    if (fieldValueCache != null)     clist.add(fieldValueCache);
    filterCache=solrConfig.filterCacheConfig == null ? null : solrConfig.filterCacheConfig.newInstance();
    if (filterCache != null)     clist.add(filterCache);
    queryResultCache=solrConfig.queryResultCacheConfig == null ? null : solrConfig.queryResultCacheConfig.newInstance();
    if (queryResultCache != null)     clist.add(queryResultCache);
    documentCache=solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();
    if (documentCache != null)     clist.add(documentCache);
    if (solrConfig.userCacheConfigs == null) {
      cacheMap=NO_GENERIC_CACHES;
    }
 else {
      cacheMap=new HashMap<>(solrConfig.userCacheConfigs.length);
      for (      CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {
        SolrCache cache=null;
        if (userCacheConfig != null)         cache=userCacheConfig.newInstance();
        if (cache != null) {
          cacheMap.put(cache.name(),cache);
          clist.add(cache);
        }
      }
    }
    cacheList=clist.toArray(new SolrCache[clist.size()]);
  }
 else {
    this.filterCache=null;
    this.queryResultCache=null;
    this.documentCache=null;
    this.fieldValueCache=null;
    this.cacheMap=NO_GENERIC_CACHES;
    this.cacheList=NO_CACHES;
  }
  final Set<String> nonStoredDVsUsedAsStored=new HashSet<>();
  final Set<String> allNonStoredDVs=new HashSet<>();
  final Set<String> nonStoredDVsWithoutCopyTargets=new HashSet<>();
  this.fieldInfos=leafReader.getFieldInfos();
  for (  FieldInfo fieldInfo : fieldInfos) {
    final SchemaField schemaField=schema.getFieldOrNull(fieldInfo.name);
    if (schemaField != null && !schemaField.stored() && schemaField.hasDocValues()) {
      if (schemaField.useDocValuesAsStored()) {
        nonStoredDVsUsedAsStored.add(fieldInfo.name);
      }
      allNonStoredDVs.add(fieldInfo.name);
      if (!schema.isCopyFieldTarget(schemaField)) {
        nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);
      }
    }
  }
  this.nonStoredDVsUsedAsStored=Collections.unmodifiableSet(nonStoredDVsUsedAsStored);
  this.allNonStoredDVs=Collections.unmodifiableSet(allNonStoredDVs);
  this.nonStoredDVsWithoutCopyTargets=Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);
  setQueryCache(null);
  numOpens.incrementAndGet();
}
