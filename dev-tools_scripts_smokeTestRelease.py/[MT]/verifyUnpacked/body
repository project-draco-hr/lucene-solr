def verifyUnpacked(project, artifact, unpackPath, version):
    os.chdir(unpackPath)
    isSrc = (artifact.find('-src') != (-1))
    l = os.listdir(unpackPath)
    textFiles = ['LICENSE', 'NOTICE', 'README']
    if (project == 'lucene'):
        textFiles.extend(('JRE_VERSION_MIGRATION', 'CHANGES'))
        if isSrc:
            textFiles.append('BUILD')
    for fileName in textFiles:
        fileName += '.txt'
        if (fileName not in l):
            raise RuntimeError(('file "%s" is missing from artifact %s' % (fileName, artifact)))
        l.remove(fileName)
    if (not isSrc):
        if (project == 'lucene'):
            expectedJARs = (('lucene-core-%s' % version), ('lucene-core-%s-javadoc' % version), ('lucene-test-framework-%s' % version), ('lucene-test-framework-%s-javadoc' % version))
        else:
            expectedJARs = ()
        for fileName in expectedJARs:
            fileName += '.jar'
            if (fileName not in l):
                raise RuntimeError(('%s: file "%s" is missing from artifact %s' % (project, fileName, artifact)))
            l.remove(fileName)
    if (project == 'lucene'):
        extras = ('lib', 'docs', 'contrib')
        if isSrc:
            extras += ('build.xml', 'index.html', 'common-build.xml', 'core', 'backwards', 'test-framework', 'tools', 'site')
    else:
        extras = ()
    for e in extras:
        if (e not in l):
            raise RuntimeError(('%s: %s missing from artifact %s' % (project, e, artifact)))
        l.remove(e)
    if (project == 'lucene'):
        if (len(l) > 0):
            raise RuntimeError(('%s: unexpected files/dirs in artifact %s: %s' % (project, artifact, l)))
    if isSrc:
        if (project == 'lucene'):
            print '    run tests w/ Java 5...'
            run(('export JAVA_HOME=%s; ant test' % JAVA5_HOME), ('%s/test.log' % unpackPath))
            run(('export JAVA_HOME=%s; ant jar' % JAVA5_HOME), ('%s/compile.log' % unpackPath))
            testDemo(isSrc, version)
            print '    generate javadocs w/ Java 5...'
            run(('export JAVA_HOME=%s; ant javadocs' % JAVA5_HOME), ('%s/javadocs.log' % unpackPath))
            if checkJavaDocs.checkPackageSummaries('build/docs/api'):
                raise RuntimeError('javadoc summaries failed')
        else:
            print '    run tests w/ Java 6...'
            run(('export JAVA_HOME=%s; ant test' % JAVA6_HOME), ('%s/test.log' % unpackPath))
            print '    generate javadocs w/ Java 6...'
            os.chdir('lucene')
            run(('export JAVA_HOME=%s; ant javadocs' % JAVA6_HOME), ('%s/javadocs.log' % unpackPath))
            os.chdir(unpackPath)
            os.chdir('solr')
            run(('export JAVA_HOME=%s; ant javadocs' % JAVA6_HOME), ('%s/javadocs.log' % unpackPath))
            os.chdir(unpackPath)
            print '    run tests w/ Java 7...'
            run(('export JAVA_HOME=%s; ant test' % JAVA7_HOME), ('%s/test.log' % unpackPath))
            print '    generate javadocs w/ Java 7...'
            os.chdir('lucene')
            run(('export JAVA_HOME=%s; ant javadocs' % JAVA7_HOME), ('%s/javadocs.log' % unpackPath))
            os.chdir(unpackPath)
            os.chdir('solr')
            run(('export JAVA_HOME=%s; ant javadocs' % JAVA7_HOME), ('%s/javadocs.log' % unpackPath))
            os.chdir(unpackPath)
    elif (project == 'lucene'):
        testDemo(isSrc, version)
    testChangesText('.', version, project)
    if ((project == 'lucene') and (not isSrc)):
        print "    check Lucene's javadoc JAR"
        unpackJavadocsJar(('%s/lucene-core-%s-javadoc.jar' % (unpackPath, version)), unpackPath)
