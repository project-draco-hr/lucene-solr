def checkSigs(project, urlString, version, tmpDir, isSigned):
    print '  test basics...'
    ents = getDirEntries(urlString)
    artifact = None
    keysURL = None
    changesURL = None
    mavenURL = None
    expectedSigs = []
    if isSigned:
        expectedSigs.append('asc')
    expectedSigs.extend(['md5', 'sha1'])
    artifacts = []
    for (text, subURL) in ents:
        if (text == 'KEYS'):
            keysURL = subURL
        elif (text == 'maven/'):
            mavenURL = subURL
        elif text.startswith('changes'):
            if (text not in ('changes/', ('changes-%s/' % version))):
                raise RuntimeError(('%s: found %s vs expected changes-%s/' % (project, text, version)))
            changesURL = subURL
        elif (artifact == None):
            artifact = text
            artifactURL = subURL
            if (project == 'solr'):
                expected = ('apache-solr-%s' % version)
            else:
                expected = ('lucene-%s' % version)
            if (not artifact.startswith(expected)):
                raise RuntimeError(('%s: unknown artifact %s: expected prefix %s' % (project, text, expected)))
            sigs = []
        elif text.startswith((artifact + '.')):
            sigs.append(text[(len(artifact) + 1):])
        else:
            if (sigs != expectedSigs):
                raise RuntimeError(('%s: artifact %s has wrong sigs: expected %s but got %s' % (project, artifact, expectedSigs, sigs)))
            artifacts.append((artifact, artifactURL))
            artifact = text
            artifactURL = subURL
            sigs = []
    if (sigs != []):
        artifacts.append((artifact, artifactURL))
        if (sigs != expectedSigs):
            raise RuntimeError(('%s: artifact %s has wrong sigs: expected %s but got %s' % (project, artifact, expectedSigs, sigs)))
    if (project == 'lucene'):
        expected = [('lucene-%s-src.tgz' % version), ('lucene-%s.tgz' % version), ('lucene-%s.zip' % version)]
    else:
        expected = [('apache-solr-%s-src.tgz' % version), ('apache-solr-%s.tgz' % version), ('apache-solr-%s.zip' % version)]
    actual = [x[0] for x in artifacts]
    if (expected != actual):
        raise RuntimeError(('%s: wrong artifacts: expected %s but got %s' % (project, expected, actual)))
    if (keysURL is None):
        raise RuntimeError(('%s is missing KEYS' % project))
    print '  get KEYS'
    download(('%s.KEYS' % project), keysURL, tmpDir)
    keysFile = ('%s/%s.KEYS' % (tmpDir, project))
    gpgHomeDir = ('%s/%s.gpg' % (tmpDir, project))
    if os.path.exists(gpgHomeDir):
        shutil.rmtree(gpgHomeDir)
    os.makedirs(gpgHomeDir, 448)
    run(('gpg --homedir %s --import %s' % (gpgHomeDir, keysFile)), ('%s/%s.gpg.import.log 2>&1' % (tmpDir, project)))
    if (mavenURL is None):
        raise RuntimeError(('%s is missing maven' % project))
    if (project == 'lucene'):
        if (changesURL is None):
            raise RuntimeError(('%s is missing changes-%s' % (project, version)))
        testChanges(project, version, changesURL)
    for (artifact, urlString) in artifacts:
        print ('  download %s...' % artifact)
        download(artifact, urlString, tmpDir)
        verifyDigests(artifact, urlString, tmpDir)
        if isSigned:
            print '    verify sig'
            download((artifact + '.asc'), (urlString + '.asc'), tmpDir)
            sigFile = ('%s/%s.asc' % (tmpDir, artifact))
            artifactFile = ('%s/%s' % (tmpDir, artifact))
            logFile = ('%s/%s.%s.gpg.verify.log' % (tmpDir, project, artifact))
            run(('gpg --homedir %s --verify %s %s' % (gpgHomeDir, sigFile, artifactFile)), logFile)
            f = open(logFile, 'rb')
            for line in f.readlines():
                if ((line.lower().find('warning') != (-1)) and (line.find('WARNING: This key is not certified with a trusted signature') == (-1))):
                    print ('      GPG: %s' % line.strip())
            f.close()
            run(('gpg --import %s' % keysFile), ('%s/%s.gpg.trust.import.log 2>&1' % (tmpDir, project)))
            print '    verify trust'
            logFile = ('%s/%s.%s.gpg.trust.log' % (tmpDir, project, artifact))
            run(('gpg --verify %s %s' % (sigFile, artifactFile)), logFile)
            f = open(logFile, 'rb')
            for line in f.readlines():
                if (line.lower().find('warning') != (-1)):
                    print ('      GPG: %s' % line.strip())
            f.close()
