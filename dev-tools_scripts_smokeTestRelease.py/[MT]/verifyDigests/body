def verifyDigests(artifact, urlString, tmpDir):
    print '    verify md5/sha1 digests'
    (md5Expected, t) = load((urlString + '.md5')).strip().split()
    if (t != ('*' + artifact)):
        raise RuntimeError(('MD5 %s.md5 lists artifact %s but expected *%s' % (urlString, t, artifact)))
    (sha1Expected, t) = load((urlString + '.sha1')).strip().split()
    if (t != ('*' + artifact)):
        raise RuntimeError(('SHA1 %s.sha1 lists artifact %s but expected *%s' % (urlString, t, artifact)))
    m = hashlib.md5()
    s = hashlib.sha1()
    f = open(('%s/%s' % (tmpDir, artifact)))
    while True:
        x = f.read(65536)
        if (x == ''):
            break
        m.update(x)
        s.update(x)
    f.close()
    md5Actual = m.hexdigest()
    sha1Actual = s.hexdigest()
    if (md5Actual != md5Expected):
        raise RuntimeError(('MD5 digest mismatch for %s: expected %s but got %s' % (artifact, md5Expected, md5Actual)))
    if (sha1Actual != sha1Expected):
        raise RuntimeError(('SHA1 digest mismatch for %s: expected %s but got %s' % (artifact, sha1Expected, sha1Actual)))
