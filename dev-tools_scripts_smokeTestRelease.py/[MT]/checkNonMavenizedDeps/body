def checkNonMavenizedDeps(nonMavenizedDependencies, POMtemplates, artifacts, tmpDir, version, releaseBranchSvnURL):
    '\n  - check for non-mavenized dependencies listed in the grandfather POM template\n  - nonMavenizedDependencies is populated with a map from non-mavenized dependency\n    artifact path to the original jar path\n  '
    namespace = '{http://maven.apache.org/POM/4.0.0}'
    xpathProfile = '{0}profiles/{0}profile'.format(namespace)
    xpathPlugin = '{0}build/{0}plugins/{0}plugin'.format(namespace)
    xpathExecution = '{0}executions/{0}execution'.format(namespace)
    xpathResourceDir = '{0}configuration/{0}resources/{0}resource/{0}directory'.format(namespace)
    treeRoot = ET.parse(POMtemplates['grandfather'][0]).getroot()
    for profile in treeRoot.findall(xpathProfile):
        pomDirs = []
        profileId = profile.find(('%sid' % namespace))
        if ((profileId is not None) and (profileId.text == 'bootstrap')):
            plugins = profile.findall(xpathPlugin)
            for plugin in plugins:
                artifactId = plugin.find(('%sartifactId' % namespace)).text.strip()
                if (artifactId == 'maven-resources-plugin'):
                    for config in plugin.findall(xpathExecution):
                        pomDirs.append(config.find(xpathResourceDir).text.strip())
            for plugin in plugins:
                artifactId = plugin.find(('%sartifactId' % namespace)).text.strip()
                if (artifactId == 'maven-install-plugin'):
                    for execution in plugin.findall(xpathExecution):
                        (groupId, artifactId, file, pomFile) = ('', '', '', '')
                        for child in execution.find(('%sconfiguration' % namespace)).getchildren():
                            text = child.text.strip()
                            if (child.tag == ('%sgroupId' % namespace)):
                                groupId = (text if (text != '${project.groupId}') else 'org.apache.lucene')
                            elif (child.tag == ('%sartifactId' % namespace)):
                                artifactId = text
                            elif (child.tag == ('%sfile' % namespace)):
                                file = text
                            elif (child.tag == ('%spomFile' % namespace)):
                                pomFile = text
                        if (groupId in ('org.apache.lucene', 'org.apache.solr')):
                            depJar = ('%s/maven/%s/%s/%s/%s-%s.jar' % (tmpDir, groupId.replace('.', '/'), artifactId, version, artifactId, version))
                            if ((depJar not in artifacts['lucene']) and (depJar not in artifacts['solr'])):
                                raise RuntimeError(('Missing non-mavenized dependency %s' % depJar))
                            nonMavenizedDependencies[depJar] = file
                        elif pomFile:
                            pomFile = pomFile.split('/')[(-1)]
                            doc2 = None
                            workingCopy = os.path.abspath(('%s/../..' % sys.path[0]))
                            for pomDir in pomDirs:
                                if (releaseBranchSvnURL is None):
                                    pomPath = ('%s/%s/%s' % (workingCopy, pomDir, pomFile))
                                    if os.path.exists(pomPath):
                                        doc2 = ET.XML(open(pomPath).read())
                                        break
                                else:
                                    entries = getDirEntries(('%s/%s' % (releaseBranchSvnURL, pomDir)))
                                    for (text, subURL) in entries:
                                        if (text == pomFile):
                                            doc2 = ET.XML(load(subURL))
                                            break
                                    if (doc2 is not None):
                                        break
                            (groupId2, artifactId2, packaging2, POMversion) = getPOMcoordinate(doc2)
                            depJar = ('%s/maven/%s/%s/%s/%s-%s.jar' % (tmpDir, groupId2.replace('.', '/'), artifactId2, version, artifactId2, version))
                            if ((depJar not in artifacts['lucene']) and (depJar not in artifacts['solr'])):
                                raise RuntimeError(('Missing non-mavenized dependency %s' % depJar))
                            nonMavenizedDependencies[depJar] = file
