def verifyMavenSigs(baseURL, tmpDir, artifacts):
    'Verify Maven artifact signatures'
    for project in ('lucene', 'solr'):
        keysFile = ('%s/%s.KEYS' % (tmpDir, project))
        if (not os.path.exists(keysFile)):
            keysURL = ('%s/%s/KEYS' % (baseURL, project))
            download(('%s.KEYS' % project), keysURL, tmpDir, quiet=True)
        gpgHomeDir = ('%s/%s.gpg' % (tmpDir, project))
        if os.path.exists(gpgHomeDir):
            shutil.rmtree(gpgHomeDir)
        os.makedirs(gpgHomeDir, 448)
        run(('gpg --homedir %s --import %s' % (gpgHomeDir, keysFile)), ('%s/%s.gpg.import.log' % (tmpDir, project)))
        reArtifacts = re.compile('\\.(?:pom|[jw]ar)$')
        for artifactFile in [a for a in artifacts[project] if reArtifacts.search(a)]:
            artifact = os.path.basename(artifactFile)
            sigFile = ('%s.asc' % artifactFile)
            logFile = ('%s/%s.%s.gpg.verify.log' % (tmpDir, project, artifact))
            run(('gpg --homedir %s --verify %s %s' % (gpgHomeDir, sigFile, artifactFile)), logFile)
            f = open(logFile, 'rb')
            for line in f.readlines():
                if ((line.lower().find('warning') != (-1)) and (line.find('WARNING: This key is not certified with a trusted signature') == (-1)) and (line.find('WARNING: using insecure memory') == (-1))):
                    print ('      GPG: %s' % line.strip())
            f.close()
            run(('gpg --import %s' % keysFile), ('%s/%s.gpg.trust.import.log' % (tmpDir, project)))
            logFile = ('%s/%s.%s.gpg.trust.log' % (tmpDir, project, artifact))
            run(('gpg --verify %s %s' % (sigFile, artifactFile)), logFile)
            f = open(logFile, 'rb')
            for line in f.readlines():
                if ((line.lower().find('warning') != (-1)) and (line.find('WARNING: This key is not certified with a trusted signature') == (-1)) and (line.find('WARNING: using insecure memory') == (-1))):
                    print ('      GPG: %s' % line.strip())
            f.close()
            sys.stdout.write('.')
    print 
