{
  HttpRequestBase method=null;
  InputStream is=null;
  SolrParams params=request.getParams();
  Collection<ContentStream> streams=requestWriter.getContentStreams(request);
  String path=requestWriter.getPath(request);
  if (path == null || !path.startsWith("/")) {
    path=DEFAULT_PATH;
  }
  ResponseParser parser=request.getResponseParser();
  if (parser == null) {
    parser=this.parser;
  }
  ModifiableSolrParams wparams=new ModifiableSolrParams(params);
  if (parser != null) {
    wparams.set(CommonParams.WT,parser.getWriterType());
    wparams.set(CommonParams.VERSION,parser.getVersion());
  }
  if (invariantParams != null) {
    wparams.add(invariantParams);
  }
  int tries=maxRetries + 1;
  try {
    while (tries-- > 0) {
      try {
        if (SolrRequest.METHOD.GET == request.getMethod()) {
          if (streams != null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"GET can't send streams!");
          }
          method=new HttpGet(baseUrl + path + ClientUtils.toQueryString(wparams,false));
        }
 else         if (SolrRequest.METHOD.POST == request.getMethod()) {
          String url=baseUrl + path;
          boolean hasNullStreamName=false;
          if (streams != null) {
            for (            ContentStream cs : streams) {
              if (cs.getName() == null) {
                hasNullStreamName=true;
                break;
              }
            }
          }
          boolean isMultipart=(this.useMultiPartPost || (streams != null && streams.size() > 1)) && !hasNullStreamName;
          ModifiableSolrParams queryParams=new ModifiableSolrParams();
          for (          String param : this.queryParams) {
            String[] value=wparams.getParams(param);
            if (value != null) {
              for (              String v : value) {
                queryParams.add(param,v);
              }
              wparams.remove(param);
            }
          }
          LinkedList<NameValuePair> postParams=new LinkedList<>();
          if (streams == null || isMultipart) {
            HttpPost post=new HttpPost(url + ClientUtils.toQueryString(queryParams,false));
            post.setHeader("Content-Charset","UTF-8");
            if (!isMultipart) {
              post.addHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
            }
            List<FormBodyPart> parts=new LinkedList<>();
            Iterator<String> iter=wparams.getParameterNamesIterator();
            while (iter.hasNext()) {
              String p=iter.next();
              String[] vals=wparams.getParams(p);
              if (vals != null) {
                for (                String v : vals) {
                  if (isMultipart) {
                    parts.add(new FormBodyPart(p,new StringBody(v,Charset.forName("UTF-8"))));
                  }
 else {
                    postParams.add(new BasicNameValuePair(p,v));
                  }
                }
              }
            }
            if (isMultipart && streams != null) {
              for (              ContentStream content : streams) {
                String contentType=content.getContentType();
                if (contentType == null) {
                  contentType=BinaryResponseParser.BINARY_CONTENT_TYPE;
                }
                String name=content.getName();
                if (name == null) {
                  name="";
                }
                parts.add(new FormBodyPart(name,new InputStreamBody(content.getStream(),contentType,content.getName())));
              }
            }
            if (parts.size() > 0) {
              MultipartEntity entity=new MultipartEntity(HttpMultipartMode.STRICT);
              for (              FormBodyPart p : parts) {
                entity.addPart(p);
              }
              post.setEntity(entity);
            }
 else {
              post.setEntity(new UrlEncodedFormEntity(postParams,"UTF-8"));
            }
            method=post;
          }
 else {
            String pstr=ClientUtils.toQueryString(wparams,false);
            HttpPost post=new HttpPost(url + pstr);
            final ContentStream[] contentStream=new ContentStream[1];
            for (            ContentStream content : streams) {
              contentStream[0]=content;
              break;
            }
            if (contentStream[0] instanceof RequestWriter.LazyContentStream) {
              post.setEntity(new InputStreamEntity(contentStream[0].getStream(),-1){
                @Override public Header getContentType(){
                  return new BasicHeader("Content-Type",contentStream[0].getContentType());
                }
                @Override public boolean isRepeatable(){
                  return false;
                }
              }
);
            }
 else {
              post.setEntity(new InputStreamEntity(contentStream[0].getStream(),-1){
                @Override public Header getContentType(){
                  return new BasicHeader("Content-Type",contentStream[0].getContentType());
                }
                @Override public boolean isRepeatable(){
                  return false;
                }
              }
);
            }
            method=post;
          }
        }
 else {
          throw new SolrServerException("Unsupported method: " + request.getMethod());
        }
      }
 catch (      NoHttpResponseException r) {
        method=null;
        if (is != null) {
          is.close();
        }
        if (tries < 1) {
          throw r;
        }
      }
    }
  }
 catch (  IOException ex) {
    throw new SolrServerException("error reading streams",ex);
  }
  return method;
}
