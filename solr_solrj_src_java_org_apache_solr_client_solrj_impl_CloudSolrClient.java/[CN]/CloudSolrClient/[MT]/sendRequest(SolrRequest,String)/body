{
  connect();
  ClusterState clusterState=zkStateReader.getClusterState();
  boolean sendToLeaders=false;
  List<String> replicas=null;
  if (request instanceof IsUpdateRequest) {
    if (request instanceof UpdateRequest) {
      NamedList<Object> response=directUpdate((AbstractUpdateRequest)request,collection,clusterState);
      if (response != null) {
        return response;
      }
    }
    sendToLeaders=true;
    replicas=new ArrayList<>();
  }
  SolrParams reqParams=request.getParams();
  if (reqParams == null) {
    reqParams=new ModifiableSolrParams();
  }
  List<String> theUrlList=new ArrayList<>();
  if (request.getPath().equals("/admin/collections") || request.getPath().equals("/admin/cores")) {
    Set<String> liveNodes=clusterState.getLiveNodes();
    for (    String liveNode : liveNodes) {
      theUrlList.add(zkStateReader.getBaseUrlForNodeName(liveNode));
    }
  }
 else {
    if (collection == null) {
      throw new SolrServerException("No collection param specified on request and no default collection has been set.");
    }
    Set<String> collectionNames=getCollectionNames(clusterState,collection);
    if (collectionNames.size() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Could not find collection: " + collection);
    }
    String shardKeys=reqParams.get(ShardParams._ROUTE_);
    Map<String,Slice> slices=new HashMap<>();
    for (    String collectionName : collectionNames) {
      DocCollection col=getDocCollection(clusterState,collectionName,null);
      Collection<Slice> routeSlices=col.getRouter().getSearchSlices(shardKeys,reqParams,col);
      ClientUtils.addSlices(slices,collectionName,routeSlices,true);
    }
    Set<String> liveNodes=clusterState.getLiveNodes();
    List<String> leaderUrlList=null;
    List<String> urlList=null;
    List<String> replicasList=null;
    Map<String,ZkNodeProps> nodes=new HashMap<>();
    List<String> urlList2=new ArrayList<>();
    for (    Slice slice : slices.values()) {
      for (      ZkNodeProps nodeProps : slice.getReplicasMap().values()) {
        ZkCoreNodeProps coreNodeProps=new ZkCoreNodeProps(nodeProps);
        String node=coreNodeProps.getNodeName();
        if (!liveNodes.contains(coreNodeProps.getNodeName()) || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE))         continue;
        if (nodes.put(node,nodeProps) == null) {
          if (!sendToLeaders || coreNodeProps.isLeader()) {
            String url;
            if (reqParams.get(UpdateParams.COLLECTION) == null) {
              url=ZkCoreNodeProps.getCoreUrl(nodeProps.getStr(ZkStateReader.BASE_URL_PROP),collection);
            }
 else {
              url=coreNodeProps.getCoreUrl();
            }
            urlList2.add(url);
          }
 else {
            String url;
            if (reqParams.get(UpdateParams.COLLECTION) == null) {
              url=ZkCoreNodeProps.getCoreUrl(nodeProps.getStr(ZkStateReader.BASE_URL_PROP),collection);
            }
 else {
              url=coreNodeProps.getCoreUrl();
            }
            replicas.add(url);
          }
        }
      }
    }
    if (sendToLeaders) {
      leaderUrlList=urlList2;
      replicasList=replicas;
    }
 else {
      urlList=urlList2;
    }
    if (sendToLeaders) {
      theUrlList=new ArrayList<>(leaderUrlList.size());
      theUrlList.addAll(leaderUrlList);
    }
 else {
      theUrlList=new ArrayList<>(urlList.size());
      theUrlList.addAll(urlList);
    }
    if (theUrlList.isEmpty()) {
      for (      String s : collectionNames) {
        if (s != null)         collectionStateCache.remove(s);
      }
      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,"Not enough nodes to handle the request");
    }
    Collections.shuffle(theUrlList,rand);
    if (sendToLeaders) {
      ArrayList<String> theReplicas=new ArrayList<>(replicasList.size());
      theReplicas.addAll(replicasList);
      Collections.shuffle(theReplicas,rand);
      theUrlList.addAll(theReplicas);
    }
  }
  LBHttpSolrClient.Req req=new LBHttpSolrClient.Req(request,theUrlList);
  LBHttpSolrClient.Rsp rsp=lbClient.request(req);
  return rsp.getResponse();
}
