{
  connect();
  String stateVerParam=null;
  List<DocCollection> requestedCollections=null;
  if (collection != null && !request.getPath().startsWith("/admin")) {
    Set<String> requestedCollectionNames=getCollectionNames(getZkStateReader().getClusterState(),collection);
    StringBuilder stateVerParamBuilder=null;
    for (    String requestedCollection : requestedCollectionNames) {
      DocCollection coll=getDocCollection(getZkStateReader().getClusterState(),requestedCollection,null);
      int collVer=coll.getZNodeVersion();
      if (coll.getStateFormat() > 1) {
        if (requestedCollections == null)         requestedCollections=new ArrayList<>(requestedCollectionNames.size());
        requestedCollections.add(coll);
        if (stateVerParamBuilder == null) {
          stateVerParamBuilder=new StringBuilder();
        }
 else {
          stateVerParamBuilder.append("|");
        }
        stateVerParamBuilder.append(coll.getName()).append(":").append(collVer);
      }
    }
    if (stateVerParamBuilder != null) {
      stateVerParam=stateVerParamBuilder.toString();
    }
  }
  if (request.getParams() instanceof ModifiableSolrParams) {
    ModifiableSolrParams params=(ModifiableSolrParams)request.getParams();
    if (stateVerParam != null) {
      params.set(STATE_VERSION,stateVerParam);
    }
 else {
      params.remove(STATE_VERSION);
    }
  }
  NamedList<Object> resp=null;
  try {
    resp=sendRequest(request);
    Object o=resp.get(STATE_VERSION,resp.size() - 1);
    if (o != null && o instanceof Map) {
      Map invalidStates=(Map)o;
      for (      Object invalidEntries : invalidStates.entrySet()) {
        Map.Entry e=(Map.Entry)invalidEntries;
        getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(),(Integer)e.getValue());
      }
    }
  }
 catch (  Exception exc) {
    Throwable rootCause=SolrException.getRootCause(exc);
    if (collection == null || request.getPath().startsWith("/admin")) {
      if (exc instanceof SolrServerException) {
        throw (SolrServerException)exc;
      }
 else       if (exc instanceof IOException) {
        throw (IOException)exc;
      }
 else       if (exc instanceof RuntimeException) {
        throw (RuntimeException)exc;
      }
 else {
        throw new SolrServerException(rootCause);
      }
    }
    int errorCode=(rootCause instanceof SolrException) ? ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;
    log.error("Request to collection {} failed due to (" + errorCode + ") {}, retry? "+ retryCount,collection,rootCause.toString());
    boolean wasCommError=(rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException|| rootCause instanceof SocketException);
    boolean stateWasStale=false;
    if (retryCount < MAX_STALE_RETRIES && requestedCollections != null && !requestedCollections.isEmpty() && SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE) {
      stateWasStale=true;
      for (      DocCollection ext : requestedCollections) {
        collectionStateCache.remove(ext.getName());
      }
    }
    if (retryCount < MAX_STALE_RETRIES && !stateWasStale && requestedCollections != null && !requestedCollections.isEmpty() && wasCommError) {
      for (      DocCollection ext : requestedCollections) {
        DocCollection latestStateFromZk=getDocCollection(zkStateReader.getClusterState(),ext.getName(),null);
        if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {
          stateWasStale=true;
          collectionStateCache.put(ext.getName(),new ExpiringCachedDocCollection(latestStateFromZk));
        }
      }
    }
    if (requestedCollections != null) {
      requestedCollections.clear();
    }
    if (stateWasStale) {
      log.warn("Re-trying request to  collection(s) " + collection + " after stale state error from server.");
      resp=requestWithRetryOnStaleState(request,retryCount + 1,collection);
    }
 else {
      if (exc instanceof SolrServerException) {
        throw (SolrServerException)exc;
      }
 else       if (exc instanceof IOException) {
        throw (IOException)exc;
      }
 else {
        throw new SolrServerException(rootCause);
      }
    }
  }
  return resp;
}
