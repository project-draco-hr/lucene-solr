{
  for (  CommandOperation op : ops) {
switch (op.name) {
case SET:
case UPDATE:
{
        Map<String,Object> map=op.getDataMap();
        if (op.hasError())         break;
        for (        Map.Entry<String,Object> entry : map.entrySet()) {
          Map val;
          String key=entry.getKey();
          if (isNullOrEmpty(key)) {
            op.addError("null key ");
            continue;
          }
          key=key.trim();
          String err=validateName(key);
          if (err != null) {
            op.addError(err);
            continue;
          }
          try {
            val=(Map)entry.getValue();
          }
 catch (          Exception e1) {
            op.addError("invalid params for key : " + key);
            continue;
          }
          if (val.containsKey("")) {
            op.addError("Empty keys are not allowed in params");
            continue;
          }
          RequestParams.ParamSet old=params.getParams(key);
          if (op.name.equals(UPDATE)) {
            if (old == null) {
              op.addError(formatString("unknown paramset {} cannot update ",key));
              continue;
            }
            params=params.setParams(key,old.update(val));
          }
 else {
            Long version=old == null ? 0 : old.getVersion() + 1;
            params=params.setParams(key,RequestParams.createParamSet(val,version));
          }
        }
        break;
      }
case "delete":
{
      List<String> name=op.getStrs(CommandOperation.ROOT_OBJ);
      if (op.hasError())       break;
      for (      String s : name) {
        if (params.getParams(s) == null) {
          op.addError(formatString("can't delete . No such params ''{0}'' exist",s));
        }
        params=params.setParams(s,null);
      }
    }
}
}
List errs=CommandOperation.captureErrors(ops);
if (!errs.isEmpty()) {
resp.add(CommandOperation.ERR_MSGS,errs);
return;
}
SolrResourceLoader loader=req.getCore().getResourceLoader();
if (loader instanceof ZkSolrResourceLoader) {
ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;
if (ops.isEmpty()) {
  ZkController.touchConfDir(zkLoader);
}
 else {
  log.debug("persisting params data : {}",Utils.toJSONString(params.toMap(new LinkedHashMap<>())));
  int latestVersion=ZkController.persistConfigResourceToZooKeeper(zkLoader,params.getZnodeVersion(),RequestParams.RESOURCE,params.toByteArray(),true);
  log.debug("persisted to version : {} ",latestVersion);
  waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),RequestParams.NAME,latestVersion,30);
}
}
 else {
SolrResourceLoader.persistConfLocally(loader,RequestParams.RESOURCE,params.toByteArray());
req.getCore().getSolrConfig().refreshRequestParams();
}
}
