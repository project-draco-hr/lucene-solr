{
  for (  CommandOperation op : ops) {
switch (op.name) {
case SET_PROPERTY:
      overlay=applySetProp(op,overlay);
    break;
case UNSET_PROPERTY:
  overlay=applyUnset(op,overlay);
break;
case SET_USER_PROPERTY:
overlay=applySetUserProp(op,overlay);
break;
case UNSET_USER_PROPERTY:
overlay=applyUnsetUserProp(op,overlay);
break;
default :
{
List<String> pcs=StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT),'-');
if (pcs.size() != 2) {
op.addError(formatString("Unknown operation ''{0}'' ",op.name));
}
 else {
String prefix=pcs.get(0);
String name=pcs.get(1);
if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {
SolrConfig.SolrPluginInfo info=namedPlugins.get(name);
if ("delete".equals(prefix)) {
overlay=deleteNamedComponent(op,overlay,info.getCleanTag());
}
 else {
overlay=updateNamedPlugin(info,op,overlay,prefix.equals("create") || prefix.equals("add"));
}
}
 else {
op.addError(formatString("Unknown operation ''{0}'' ",op.name));
}
}
}
}
}
List errs=CommandOperation.captureErrors(ops);
if (!errs.isEmpty()) {
log.info("Failed to run commands errors are {}",StrUtils.join(errs,','));
resp.add(CommandOperation.ERR_MSGS,errs);
return;
}
SolrResourceLoader loader=req.getCore().getResourceLoader();
if (loader instanceof ZkSolrResourceLoader) {
ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader)loader,overlay.getZnodeVersion(),ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);
log.info("Executed config commands successfully and persited to ZK {}",ops);
}
 else {
SolrResourceLoader.persistConfLocally(loader,ConfigOverlay.RESOURCE_NAME,overlay.toByteArray());
req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());
log.info("Executed config commands successfully and persited to File System {}",ops);
}
}
