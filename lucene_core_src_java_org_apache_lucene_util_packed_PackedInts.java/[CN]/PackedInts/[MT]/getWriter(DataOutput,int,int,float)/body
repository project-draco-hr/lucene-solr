{
  acceptableOverheadRatio=Math.max(COMPACT,acceptableOverheadRatio);
  acceptableOverheadRatio=Math.min(FASTEST,acceptableOverheadRatio);
  float acceptableOverheadPerValue=acceptableOverheadRatio * bitsPerValue;
  int maxBitsPerValue=bitsPerValue + (int)acceptableOverheadPerValue;
  if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {
    return getWriterByFormat(out,valueCount,8,PACKED);
  }
 else   if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {
    return getWriterByFormat(out,valueCount,16,PACKED);
  }
 else   if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {
    return getWriterByFormat(out,valueCount,32,PACKED);
  }
 else   if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {
    return getWriterByFormat(out,valueCount,64,PACKED);
  }
 else   if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {
    return getWriterByFormat(out,valueCount,24,PACKED);
  }
 else   if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {
    return getWriterByFormat(out,valueCount,48,PACKED);
  }
 else {
    for (int bpv=bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {
      if (Packed64SingleBlock.isSupported(bpv)) {
        float overhead=Packed64SingleBlock.overheadPerValue(bpv);
        float acceptableOverhead=acceptableOverheadPerValue + bitsPerValue - bpv;
        if (overhead <= acceptableOverhead) {
          return getWriterByFormat(out,valueCount,bpv,PACKED_SINGLE_BLOCK);
        }
      }
    }
    return getWriterByFormat(out,valueCount,bitsPerValue,PACKED);
  }
}
