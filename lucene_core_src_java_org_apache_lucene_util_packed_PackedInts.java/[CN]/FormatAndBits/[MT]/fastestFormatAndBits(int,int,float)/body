{
  if (valueCount == -1) {
    valueCount=Integer.MAX_VALUE;
  }
  acceptableOverheadRatio=Math.max(COMPACT,acceptableOverheadRatio);
  acceptableOverheadRatio=Math.min(FASTEST,acceptableOverheadRatio);
  float acceptableOverheadPerValue=acceptableOverheadRatio * bitsPerValue;
  int maxBitsPerValue=bitsPerValue + (int)acceptableOverheadPerValue;
  int actualBitsPerValue=-1;
  Format format=Format.PACKED;
  if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {
    actualBitsPerValue=8;
  }
 else   if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {
    actualBitsPerValue=16;
  }
 else   if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {
    actualBitsPerValue=32;
  }
 else   if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {
    actualBitsPerValue=64;
  }
 else   if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {
    actualBitsPerValue=24;
  }
 else   if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {
    actualBitsPerValue=48;
  }
 else {
    for (int bpv=bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {
      if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {
        float overhead=Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);
        float acceptableOverhead=acceptableOverheadPerValue + bitsPerValue - bpv;
        if (overhead <= acceptableOverhead) {
          actualBitsPerValue=bpv;
          format=Format.PACKED_SINGLE_BLOCK;
          break;
        }
      }
    }
    if (actualBitsPerValue < 0) {
      actualBitsPerValue=bitsPerValue;
    }
  }
  return new FormatAndBits(format,actualBitsPerValue);
}
