{
  if (to - from < INSERTION_SORT_THRESHOLD) {
    insertionSort(from,to);
    return;
  }
 else   if (--maxDepth < 0) {
    heapSort(from,to);
    return;
  }
  final int mid=(from + to) >>> 1;
  if (compare(from,mid) > 0) {
    swap(from,mid);
  }
  if (compare(mid,to - 1) > 0) {
    swap(mid,to - 1);
    if (compare(from,mid) > 0) {
      swap(from,mid);
    }
  }
  int left=from + 1;
  int right=to - 2;
  setPivot(mid);
  for (; ; ) {
    while (comparePivot(right) < 0) {
      --right;
    }
    while (left < right && comparePivot(left) >= 0) {
      ++left;
    }
    if (left < right) {
      swap(left,right);
      --right;
    }
 else {
      break;
    }
  }
  quicksort(from,left + 1,maxDepth);
  quicksort(left + 1,to,maxDepth);
}
