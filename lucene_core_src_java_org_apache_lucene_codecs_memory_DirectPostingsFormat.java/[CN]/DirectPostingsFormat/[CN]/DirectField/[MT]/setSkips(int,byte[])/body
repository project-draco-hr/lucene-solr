{
  final int termLength=termOffsets[termOrd + 1] - termOffsets[termOrd];
  if (sameCounts.length < termLength) {
    sameCounts=ArrayUtil.grow(sameCounts,termLength);
  }
  if (termOrd > 0) {
    final int lastTermLength=termOffsets[termOrd] - termOffsets[termOrd - 1];
    final int limit=Math.min(termLength,lastTermLength);
    int lastTermOffset=termOffsets[termOrd - 1];
    int termOffset=termOffsets[termOrd];
    int i=0;
    for (; i < limit; i++) {
      if (termBytes[lastTermOffset++] == termBytes[termOffset++]) {
        sameCounts[i]++;
      }
 else {
        for (; i < limit; i++) {
          if (sameCounts[i] >= minSkipCount) {
            saveSkip(termOrd,sameCounts[i]);
          }
          sameCounts[i]=1;
        }
        break;
      }
    }
    for (; i < lastTermLength; i++) {
      if (sameCounts[i] >= minSkipCount) {
        saveSkip(termOrd,sameCounts[i]);
      }
      sameCounts[i]=0;
    }
    for (int j=limit; j < termLength; j++) {
      sameCounts[j]=1;
    }
  }
 else {
    for (int i=0; i < termLength; i++) {
      sameCounts[i]++;
    }
  }
}
