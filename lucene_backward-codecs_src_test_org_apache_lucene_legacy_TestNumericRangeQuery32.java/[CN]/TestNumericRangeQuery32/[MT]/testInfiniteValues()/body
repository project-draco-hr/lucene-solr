{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())));
  Document doc=new Document();
  doc.add(new LegacyFloatField("float",Float.NEGATIVE_INFINITY,Field.Store.NO));
  doc.add(new LegacyIntField("int",Integer.MIN_VALUE,Field.Store.NO));
  writer.addDocument(doc);
  doc=new Document();
  doc.add(new LegacyFloatField("float",Float.POSITIVE_INFINITY,Field.Store.NO));
  doc.add(new LegacyIntField("int",Integer.MAX_VALUE,Field.Store.NO));
  writer.addDocument(doc);
  doc=new Document();
  doc.add(new LegacyFloatField("float",0.0f,Field.Store.NO));
  doc.add(new LegacyIntField("int",0,Field.Store.NO));
  writer.addDocument(doc);
  for (  float f : TestLegacyNumericUtils.FLOAT_NANs) {
    doc=new Document();
    doc.add(new LegacyFloatField("float",f,Field.Store.NO));
    writer.addDocument(doc);
  }
  writer.close();
  IndexReader r=DirectoryReader.open(dir);
  IndexSearcher s=newSearcher(r);
  Query q=LegacyNumericRangeQuery.newIntRange("int",null,null,true,true);
  TopDocs topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newIntRange("int",null,null,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newIntRange("int",Integer.MIN_VALUE,Integer.MAX_VALUE,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newIntRange("int",Integer.MIN_VALUE,Integer.MAX_VALUE,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",1,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newFloatRange("float",null,null,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newFloatRange("float",null,null,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newFloatRange("float",Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newFloatRange("float",Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",1,topDocs.scoreDocs.length);
  q=LegacyNumericRangeQuery.newFloatRange("float",Float.NaN,Float.NaN,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",TestLegacyNumericUtils.FLOAT_NANs.length,topDocs.scoreDocs.length);
  r.close();
  dir.close();
}
