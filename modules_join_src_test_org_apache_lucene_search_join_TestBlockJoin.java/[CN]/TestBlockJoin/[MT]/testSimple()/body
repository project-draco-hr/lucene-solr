{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random,dir);
  final List<Document> docs=new ArrayList<Document>();
  docs.add(makeJob("java",2007));
  docs.add(makeJob("python",2010));
  docs.add(makeResume("Lisa","United Kingdom"));
  w.addDocuments(docs);
  docs.clear();
  docs.add(makeJob("ruby",2005));
  docs.add(makeJob("java",2006));
  docs.add(makeResume("Frank","United States"));
  w.addDocuments(docs);
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r);
  Filter parentsFilter=new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term("docType","resume"))));
  BooleanQuery childQuery=new BooleanQuery();
  childQuery.add(new BooleanClause(new TermQuery(new Term("skill","java")),Occur.MUST));
  childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange("year",2006,2011,true,true),Occur.MUST));
  Query parentQuery=new TermQuery(new Term("country","United Kingdom"));
  BlockJoinQuery childJoinQuery=new BlockJoinQuery(childQuery,parentsFilter,BlockJoinQuery.ScoreMode.Avg);
  BooleanQuery fullQuery=new BooleanQuery();
  fullQuery.add(new BooleanClause(parentQuery,Occur.MUST));
  fullQuery.add(new BooleanClause(childJoinQuery,Occur.MUST));
  BlockJoinCollector c=new BlockJoinCollector(Sort.RELEVANCE,1,true,false);
  s.search(fullQuery,c);
  TopGroups<Integer> results=c.getTopGroups(childJoinQuery,null,0,10,0,true);
  assertEquals(1,results.totalGroupedHitCount);
  assertEquals(1,results.groups.length);
  final GroupDocs<Integer> group=results.groups[0];
  assertEquals(1,group.totalHits);
  Document childDoc=s.doc(group.scoreDocs[0].doc);
  assertEquals("java",childDoc.get("skill"));
  assertNotNull(group.groupValue);
  Document parentDoc=s.doc(group.groupValue);
  assertEquals("Lisa",parentDoc.get("name"));
  r.close();
  dir.close();
}
