{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  int termCountT=0, termCountC=0;
  for (int i=0; i < 10 * _TestUtil.getRandomMultiplier(); i++) {
    int lower=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    int upper=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      int a=lower;
      lower=upper;
      upper=a;
    }
    final BytesRef lowerBytes=new BytesRef(NumericUtils.BUF_SIZE_INT), upperBytes=new BytesRef(NumericUtils.BUF_SIZE_INT);
    NumericUtils.intToPrefixCoded(lower,0,lowerBytes);
    NumericUtils.intToPrefixCoded(upper,0,upperBytes);
    final String lowerString=lowerBytes.utf8ToString(), upperString=upperBytes.utf8ToString();
    NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,true,true);
    TermRangeQuery cq=new TermRangeQuery(field,lowerString,upperString,true,true);
    TopDocs tTopDocs=searcher.search(tq,1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,false,false);
    cq=new TermRangeQuery(field,lowerString,upperString,false,false);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,false,true);
    cq=new TermRangeQuery(field,lowerString,upperString,false,true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,true,false);
    cq=new TermRangeQuery(field,lowerString,upperString,true,false);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
  }
  if (precisionStep == Integer.MAX_VALUE) {
    assertEquals("Total number of terms should be equal for unlimited precStep",termCountT,termCountC);
  }
 else   if (VERBOSE) {
    System.out.println("Average number of terms during random search on '" + field + "':");
    System.out.println(" Trie query: " + (((double)termCountT) / (10 * 4)));
    System.out.println(" Classical query: " + (((double)termCountC) / (10 * 4)));
  }
}
