{
  final Random rnd=newRandom();
  String field="ascfield" + precisionStep;
  int num=10 * RANDOM_MULTIPLIER;
  for (int i=0; i < num; i++) {
    int lower=(int)(rnd.nextDouble() * noDocs - noDocs / 2);
    int upper=(int)(rnd.nextDouble() * noDocs - noDocs / 2);
    if (lower > upper) {
      int a=lower;
      lower=upper;
      upper=a;
    }
    Query tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,true,true);
    TopDocs tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to inclusive range length",upper - lower + 1,tTopDocs.totalHits);
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,false,false);
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to exclusive range length",Math.max(upper - lower - 1,0),tTopDocs.totalHits);
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,false,true);
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to half exclusive range length",upper - lower,tTopDocs.totalHits);
    tq=NumericRangeQuery.newIntRange(field,precisionStep,lower,upper,true,false);
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to half exclusive range length",upper - lower,tTopDocs.totalHits);
  }
}
