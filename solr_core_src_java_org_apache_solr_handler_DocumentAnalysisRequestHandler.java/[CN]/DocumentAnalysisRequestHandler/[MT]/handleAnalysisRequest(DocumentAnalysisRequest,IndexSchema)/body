{
  SchemaField uniqueKeyField=schema.getUniqueKeyField();
  NamedList<Object> result=new SimpleOrderedMap<>();
  for (  SolrInputDocument document : request.getDocuments()) {
    NamedList<NamedList> theTokens=new SimpleOrderedMap<>();
    result.add(document.getFieldValue(uniqueKeyField.getName()).toString(),theTokens);
    for (    String name : document.getFieldNames()) {
      SchemaField field=schema.getField(name);
      if (!field.indexed()) {
        continue;
      }
      NamedList<Object> fieldTokens=new SimpleOrderedMap<>();
      theTokens.add(name,fieldTokens);
      FieldType fieldType=schema.getFieldType(name);
      final String queryValue=request.getQuery();
      Set<BytesRef> termsToMatch;
      try {
        termsToMatch=(queryValue != null && request.isShowMatch()) ? getQueryTokenSet(queryValue,fieldType.getQueryAnalyzer()) : EMPTY_BYTES_SET;
      }
 catch (      Exception e) {
        termsToMatch=EMPTY_BYTES_SET;
      }
      if (request.getQuery() != null) {
        try {
          AnalysisContext analysisContext=new AnalysisContext(fieldType,fieldType.getQueryAnalyzer(),EMPTY_BYTES_SET);
          fieldTokens.add("query",analyzeValue(request.getQuery(),analysisContext));
        }
 catch (        Exception e) {
        }
      }
      Analyzer analyzer=fieldType.getIndexAnalyzer();
      AnalysisContext analysisContext=new AnalysisContext(fieldType,analyzer,termsToMatch);
      Collection<Object> fieldValues=document.getFieldValues(name);
      NamedList<NamedList<? extends Object>> indexTokens=new SimpleOrderedMap<>();
      for (      Object fieldValue : fieldValues) {
        indexTokens.add(String.valueOf(fieldValue),analyzeValue(fieldValue.toString(),analysisContext));
      }
      fieldTokens.add("index",indexTokens);
    }
  }
  return result;
}
