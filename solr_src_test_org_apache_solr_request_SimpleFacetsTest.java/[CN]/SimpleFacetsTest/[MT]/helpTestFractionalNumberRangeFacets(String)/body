{
  final String f=fieldName;
  final String pre="//lst[@name='facet_ranges']/lst[@name='" + f + "']/lst[@name='counts']";
  final String meta=pre + "/../";
  assertQ(f + ": checking counts for lower",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","10","facet.range.end","50","facet.range.gap","10","facet.range.other","all","facet.range.include","lower"),"*[count(" + pre + "/int)=4]",pre + "/int[@name='10.0'][.='1'  ]",pre + "/int[@name='20.0'][.='3'  ]",pre + "/int[@name='30.0'][.='2'  ]",pre + "/int[@name='40.0'][.='0'  ]",meta + "/int[@name='before' ][.='0']",meta + "/int[@name='after'  ][.='0']",meta + "/int[@name='between'][.='6']");
  assertQ(f + ":checking counts for upper",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","10","facet.range.end","50","facet.range.gap","10","facet.range.other","all","facet.range.include","upper"),"*[count(" + pre + "/int)=4]",pre + "/int[@name='10.0'][.='2'  ]",pre + "/int[@name='20.0'][.='3'  ]",pre + "/int[@name='30.0'][.='1'  ]",pre + "/int[@name='40.0'][.='0'  ]",meta + "/int[@name='before' ][.='0']",meta + "/int[@name='after'  ][.='0']",meta + "/int[@name='between'][.='6']");
  assertQ(f + ":checking counts for lower & upper",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","10","facet.range.end","50","facet.range.gap","10","facet.range.other","all","facet.range.include","upper","facet.range.include","lower"),"*[count(" + pre + "/int)=4]",pre + "/int[@name='10.0'][.='2'  ]",pre + "/int[@name='20.0'][.='4'  ]",pre + "/int[@name='30.0'][.='2'  ]",pre + "/int[@name='40.0'][.='0'  ]",meta + "/int[@name='before' ][.='0']",meta + "/int[@name='after'  ][.='0']",meta + "/int[@name='between'][.='6']");
  assertQ(f + ": checking counts for upper & edge",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","20","facet.range.end","50","facet.range.gap","10","facet.range.other","all","facet.range.include","upper","facet.range.include","edge"),"*[count(" + pre + "/int)=3]",pre + "/int[@name='20.0'][.='4'  ]",pre + "/int[@name='30.0'][.='1'  ]",pre + "/int[@name='40.0'][.='0'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='0']",meta + "/int[@name='between'][.='5']");
  assertQ(f + ": checking counts for upper & outer",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","10","facet.range.end","30","facet.range.gap","10","facet.range.other","all","facet.range.include","upper","facet.range.include","outer"),"*[count(" + pre + "/int)=2]",pre + "/int[@name='10.0'][.='2'  ]",pre + "/int[@name='20.0'][.='3'  ]",meta + "/int[@name='before' ][.='0']",meta + "/int[@name='after'  ][.='2']",meta + "/int[@name='between'][.='5']");
  assertQ(f + ": checking counts for lower & edge",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","10","facet.range.end","30","facet.range.gap","10","facet.range.other","all","facet.range.include","lower","facet.range.include","edge"),"*[count(" + pre + "/int)=2]",pre + "/int[@name='10.0'][.='1'  ]",pre + "/int[@name='20.0'][.='4'  ]",meta + "/int[@name='before' ][.='0']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='5']");
  assertQ(f + ": checking counts for lower & outer",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","20","facet.range.end","40","facet.range.gap","10","facet.range.other","all","facet.range.include","lower","facet.range.include","outer"),"*[count(" + pre + "/int)=2]",pre + "/int[@name='20.0'][.='3'  ]",pre + "/int[@name='30.0'][.='2'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='0']",meta + "/int[@name='between'][.='5']");
  assertQ(f + ": checking counts for lower & edge & outer",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","20","facet.range.end","35.3","facet.range.gap","10","facet.range.other","all","facet.range.hardend","true","facet.range.include","lower","facet.range.include","edge","facet.range.include","outer"),"*[count(" + pre + "/int)=2]",pre + "/int[@name='20.0'][.='3'  ]",pre + "/int[@name='30.0'][.='2'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='5']");
  assertQ(f + ": checking counts for include all",req("q","*:*","rows","0","facet","true","facet.range",f,"facet.range.start","20","facet.range.end","35.3","facet.range.gap","10","facet.range.other","all","facet.range.hardend","true","facet.range.include","all"),"*[count(" + pre + "/int)=2]",pre + "/int[@name='20.0'][.='4'  ]",pre + "/int[@name='30.0'][.='2'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='5']");
}
