{
  String pre="//lst[@name='" + f + "']";
  String notc="id:[* TO *] -" + f + ":C";
  assertQ("check counts for unlimited facet",req(params,"q","id:[* TO *]","indent","true","facet","true","facet.field",f),"*[count(//lst[@name='facet_fields']/lst/int)=7]",pre + "/int[@name='G'][.='5']",pre + "/int[@name='E'][.='3']",pre + "/int[@name='C'][.='2']",pre + "/int[@name='A'][.='1']",pre + "/int[@name='B'][.='1']",pre + "/int[@name='D'][.='1']",pre + "/int[@name='F'][.='1']");
  assertQ("check counts for facet with generous limit",req(params,"q","id:[* TO *]","facet","true","facet.limit","100","facet.field",f),"*[count(//lst[@name='facet_fields']/lst/int)=7]",pre + "/int[1][@name='G'][.='5']",pre + "/int[2][@name='E'][.='3']",pre + "/int[3][@name='C'][.='2']",pre + "/int[@name='A'][.='1']",pre + "/int[@name='B'][.='1']",pre + "/int[@name='D'][.='1']",pre + "/int[@name='F'][.='1']");
  assertQ("check counts for limited facet",req(params,"q","id:[* TO *]","facet","true","facet.limit","2","facet.field",f),"*[count(//lst[@name='facet_fields']/lst/int)=2]",pre + "/int[1][@name='G'][.='5']",pre + "/int[2][@name='E'][.='3']");
  assertQ("check offset",req(params,"q","id:[* TO *]","facet","true","facet.offset","1","facet.limit","1","facet.field",f),"*[count(//lst[@name='facet_fields']/lst/int)=1]",pre + "/int[1][@name='E'][.='3']");
  assertQ("test sorted facet paging with zero (don't count in limit)",req(params,"q","id:[* TO *]","fq",notc,"facet","true","facet.field",f,"facet.mincount","1","facet.offset","0","facet.limit","6"),"*[count(//lst[@name='facet_fields']/lst/int)=6]",pre + "/int[1][@name='G'][.='5']",pre + "/int[2][@name='E'][.='3']",pre + "/int[3][@name='A'][.='1']",pre + "/int[4][@name='B'][.='1']",pre + "/int[5][@name='D'][.='1']",pre + "/int[6][@name='F'][.='1']");
  assertQ("test sorted facet paging with zero (test offset correctness)",req(params,"q","id:[* TO *]","fq",notc,"facet","true","facet.field",f,"facet.mincount","1","facet.offset","3","facet.limit","2","facet.sort","count"),"*[count(//lst[@name='facet_fields']/lst/int)=2]",pre + "/int[1][@name='B'][.='1']",pre + "/int[2][@name='D'][.='1']");
  assertQ("test facet unsorted paging",req(params,"q","id:[* TO *]","fq",notc,"facet","true","facet.field",f,"facet.mincount","1","facet.offset","0","facet.limit","6","facet.sort","index"),"*[count(//lst[@name='facet_fields']/lst/int)=6]",pre + "/int[1][@name='A'][.='1']",pre + "/int[2][@name='B'][.='1']",pre + "/int[3][@name='D'][.='1']",pre + "/int[4][@name='E'][.='3']",pre + "/int[5][@name='F'][.='1']",pre + "/int[6][@name='G'][.='5']");
  assertQ("test facet unsorted paging",req(params,"q","id:[* TO *]","fq",notc,"facet","true","facet.field",f,"facet.mincount","1","facet.offset","3","facet.limit","2","facet.sort","index"),"*[count(//lst[@name='facet_fields']/lst/int)=2]",pre + "/int[1][@name='E'][.='3']",pre + "/int[2][@name='F'][.='1']");
  assertQ("test facet unsorted paging, mincount=2",req(params,"q","id:[* TO *]","fq",notc,"facet","true","facet.field",f,"facet.mincount","2","facet.offset","1","facet.limit","2","facet.sort","index"),"*[count(//lst[@name='facet_fields']/lst/int)=1]",pre + "/int[1][@name='G'][.='5']");
}
