{
  final String fileName=IndexFileNames.segmentFileName(segment,"",Lucene40SegmentInfoFormat.SI_EXTENSION);
  final IndexInput input=dir.openInput(fileName,context);
  boolean success=false;
  try {
    CodecUtil.checkHeader(input,Lucene40SegmentInfoFormat.CODEC_NAME,Lucene40SegmentInfoFormat.VERSION_START,Lucene40SegmentInfoFormat.VERSION_CURRENT);
    final Version version;
    try {
      version=Version.parse(input.readString());
    }
 catch (    ParseException pe) {
      throw new CorruptIndexException("unable to parse version string: " + pe.getMessage(),input,pe);
    }
    final int docCount=input.readInt();
    if (docCount < 0) {
      throw new CorruptIndexException("invalid docCount: " + docCount,input);
    }
    final boolean isCompoundFile=input.readByte() == SegmentInfo.YES;
    final Map<String,String> diagnostics=input.readStringStringMap();
    input.readStringStringMap();
    final Set<String> files=input.readStringSet();
    CodecUtil.checkEOF(input);
    final SegmentInfo si=new SegmentInfo(dir,version,segment,docCount,isCompoundFile,null,diagnostics);
    si.setFiles(files);
    success=true;
    return si;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(input);
    }
 else {
      input.close();
    }
  }
}
