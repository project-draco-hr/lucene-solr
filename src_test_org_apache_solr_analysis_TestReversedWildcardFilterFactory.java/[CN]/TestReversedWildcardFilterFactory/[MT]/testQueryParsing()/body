{
  SolrQueryParser parserOne=new SolrQueryParser(schema,"one");
  assertTrue(parserOne.getAllowLeadingWildcard());
  SolrQueryParser parserTwo=new SolrQueryParser(schema,"two");
  assertTrue(parserTwo.getAllowLeadingWildcard());
  SolrQueryParser parserThree=new SolrQueryParser(schema,"three");
  assertTrue(parserThree.getAllowLeadingWildcard());
  String text="one +two *hree f*ur fiv* *si\uD834\uDD1Ex";
  String expectedOne="one:one +one:two one:\u0001eerh* one:\u0001ru*f one:fiv* one:\u0001x\uD834\uDD1Eis*";
  String expectedTwo="two:one +two:two two:\u0001eerh* two:\u0001ru*f two:fiv* two:\u0001x\uD834\uDD1Eis*";
  String expectedThree="three:one +three:two three:*hree three:f*ur three:fiv* three:*si\uD834\uDD1Ex";
  Query q=parserOne.parse(text);
  assertEquals(expectedOne,q.toString());
  q=parserTwo.parse(text);
  assertEquals(expectedTwo,q.toString());
  q=parserThree.parse(text);
  assertEquals(expectedThree,q.toString());
  String condText="*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee " + "short*token ver*longtoken";
  String expected="two:\u0001eerh* two:\u0001eer*t two:\u0001ee*ht " + "two:thr*e " + "two:\u0001eerh? two:\u0001eer?t "+ "two:th?ee "+ "two:th?*ee "+ "two:short*token "+ "two:\u0001nekotgnol*rev";
  q=parserTwo.parse(condText);
  assertEquals(expected,q.toString());
}
