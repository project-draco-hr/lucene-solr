{
  ResponseBuilder rb=new ResponseBuilder();
  rb.req=req;
  rb.rsp=rsp;
  rb.components=components;
  rb.setDebug(req.getParams().getBool(CommonParams.DEBUG_QUERY,false));
  final RTimer timer=rb.isDebug() ? new RTimer() : null;
  if (timer == null) {
    for (    SearchComponent c : components) {
      c.prepare(rb);
    }
  }
 else {
    RTimer subt=timer.sub("prepare");
    for (    SearchComponent c : components) {
      rb.setTimer(subt.sub(c.getName()));
      c.prepare(rb);
      rb.getTimer().stop();
    }
    subt.stop();
  }
  if (rb.shards == null) {
    if (!rb.isDebug()) {
      for (      SearchComponent c : components) {
        c.process(rb);
      }
    }
 else {
      RTimer subt=timer.sub("process");
      for (      SearchComponent c : components) {
        rb.setTimer(subt.sub(c.getName()));
        c.process(rb);
        rb.getTimer().stop();
      }
      subt.stop();
      timer.stop();
      if (rb.getDebugInfo() == null) {
        rb.setDebugInfo(new SimpleOrderedMap<Object>());
      }
      rb.getDebugInfo().add("timing",timer.asNamedList());
    }
  }
 else {
    HttpCommComponent comm=new HttpCommComponent();
    if (rb.outgoing == null) {
      rb.outgoing=new LinkedList<ShardRequest>();
    }
    rb.finished=new ArrayList<ShardRequest>();
    int nextStage=0;
    do {
      rb.stage=nextStage;
      nextStage=ResponseBuilder.STAGE_DONE;
      for (      SearchComponent c : components) {
        nextStage=Math.min(nextStage,c.distributedProcess(rb));
      }
      while (rb.outgoing.size() > 0) {
        while (rb.outgoing.size() > 0) {
          ShardRequest sreq=rb.outgoing.remove(0);
          sreq.actualShards=sreq.shards;
          if (sreq.actualShards == ShardRequest.ALL_SHARDS) {
            sreq.actualShards=rb.shards;
          }
          sreq.responses=new ArrayList<ShardResponse>();
          for (          String shard : sreq.actualShards) {
            ModifiableSolrParams params=new ModifiableSolrParams(sreq.params);
            params.remove(ShardParams.SHARDS);
            params.remove("indent");
            params.remove(CommonParams.HEADER_ECHO_PARAMS);
            params.set(ShardParams.IS_SHARD,true);
            String shardHandler=req.getParams().get(ShardParams.SHARDS_QT);
            if (shardHandler == null) {
              params.remove(CommonParams.QT);
            }
 else {
              params.set(CommonParams.QT,shardHandler);
            }
            comm.submit(sreq,shard,params);
          }
        }
        while (rb.outgoing.size() == 0) {
          ShardResponse srsp=comm.takeCompletedOrError();
          if (srsp == null)           break;
          if (srsp.getException() != null) {
            comm.cancelAll();
            if (srsp.getException() instanceof SolrException) {
              throw (SolrException)srsp.getException();
            }
 else {
              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,srsp.getException());
            }
          }
          rb.finished.add(srsp.getShardRequest());
          for (          SearchComponent c : components) {
            c.handleResponses(rb,srsp.getShardRequest());
          }
        }
      }
      for (      SearchComponent c : components) {
        c.finishStage(rb);
      }
    }
 while (nextStage != Integer.MAX_VALUE);
  }
}
