{
  Analyzer a=new WhitespaceAnalyzer(Version.LUCENE_CURRENT);
  assertQueryEquals("a\\-b:c",a,"a-b:c");
  assertQueryEquals("a\\+b:c",a,"a+b:c");
  assertQueryEquals("a\\:b:c",a,"a:b:c");
  assertQueryEquals("a\\\\b:c",a,"a\\b:c");
  assertQueryEquals("a:b\\-c",a,"a:b-c");
  assertQueryEquals("a:b\\+c",a,"a:b+c");
  assertQueryEquals("a:b\\:c",a,"a:b:c");
  assertQueryEquals("a:b\\\\c",a,"a:b\\c");
  assertQueryEquals("a:b\\-c*",a,"a:b-c*");
  assertQueryEquals("a:b\\+c*",a,"a:b+c*");
  assertQueryEquals("a:b\\:c*",a,"a:b:c*");
  assertQueryEquals("a:b\\\\c*",a,"a:b\\c*");
  assertQueryEquals("a:b\\-?c",a,"a:b-?c");
  assertQueryEquals("a:b\\+?c",a,"a:b+?c");
  assertQueryEquals("a:b\\:?c",a,"a:b:?c");
  assertQueryEquals("a:b\\\\?c",a,"a:b\\?c");
  assertQueryEquals("a:b\\-c~",a,"a:b-c~0.5");
  assertQueryEquals("a:b\\+c~",a,"a:b+c~0.5");
  assertQueryEquals("a:b\\:c~",a,"a:b:c~0.5");
  assertQueryEquals("a:b\\\\c~",a,"a:b\\c~0.5");
  assertQueryEquals("[ a\\- TO a\\+ ]",null,"[a- TO a+]");
  assertQueryEquals("[ a\\: TO a\\~ ]",null,"[a: TO a~]");
  assertQueryEquals("[ a\\\\ TO a\\* ]",null,"[a\\ TO a*]");
}
