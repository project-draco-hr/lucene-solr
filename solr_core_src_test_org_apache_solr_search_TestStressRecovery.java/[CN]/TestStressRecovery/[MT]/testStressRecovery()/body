{
  assumeFalse("FIXME: This test is horribly slow sometimes on Windows!",Constants.WINDOWS);
  clearIndex();
  assertU(commit());
  final int commitPercent=5 + random().nextInt(10);
  final int softCommitPercent=30 + random().nextInt(75);
  final int deletePercent=4 + random().nextInt(25);
  final int deleteByQueryPercent=random().nextInt(5);
  final int ndocs=5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));
  int nWriteThreads=2 + random().nextInt(10);
  final int maxConcurrentCommits=nWriteThreads;
  final int percentRealtimeQuery=75;
  final int percentGetLatestVersions=random().nextInt(4);
  final AtomicLong operations=new AtomicLong(atLeast(100));
  int nReadThreads=2 + random().nextInt(10);
  initModel(ndocs);
  final AtomicInteger numCommitting=new AtomicInteger();
  List<Thread> threads=new ArrayList<Thread>();
  final AtomicLong testVersion=new AtomicLong(0);
  final UpdateHandler uHandler=h.getCore().getUpdateHandler();
  final UpdateLog uLog=uHandler.getUpdateLog();
  final VersionInfo vInfo=uLog.getVersionInfo();
  final Object stateChangeLock=new Object();
  this.visibleModel=model;
  final Semaphore[] writePermissions=new Semaphore[nWriteThreads];
  for (int i=0; i < nWriteThreads; i++)   writePermissions[i]=new Semaphore(Integer.MAX_VALUE,false);
  final Semaphore readPermission=new Semaphore(Integer.MAX_VALUE,false);
  for (int i=0; i < nWriteThreads; i++) {
    final int threadNum=i;
    Thread thread=new Thread("WRITER" + i){
      Random rand=new Random(random().nextInt());
      Semaphore writePermission=writePermissions[threadNum];
      @Override public void run(){
        try {
          while (operations.get() > 0) {
            writePermission.acquire();
            int oper=rand.nextInt(10);
            if (oper < commitPercent) {
              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {
                Map<Integer,DocInfo> newCommittedModel;
                long version;
synchronized (globalLock) {
                  newCommittedModel=new HashMap<Integer,DocInfo>(model);
                  version=snapshotCount++;
                }
synchronized (stateChangeLock) {
                  if (uLog.getState() != UpdateLog.State.ACTIVE)                   version=-1;
                  if (rand.nextInt(100) < softCommitPercent) {
                    verbose("softCommit start");
                    assertU(TestHarness.commit("softCommit","true"));
                    verbose("softCommit end");
                  }
 else {
                    verbose("hardCommit start");
                    assertU(commit());
                    verbose("hardCommit end");
                  }
                }
synchronized (globalLock) {
                  if (version >= committedModelClock) {
                    if (VERBOSE) {
                      verbose("installing new committedModel version=" + committedModelClock);
                    }
                    committedModel=newCommittedModel;
                    committedModelClock=version;
                  }
                }
              }
              numCommitting.decrementAndGet();
              continue;
            }
            int id;
            if (rand.nextBoolean()) {
              id=rand.nextInt(ndocs);
            }
 else {
              id=lastId;
            }
            boolean before=rand.nextBoolean();
            if (before) {
              lastId=id;
            }
            DocInfo info=model.get(id);
            long val=info.val;
            long nextVal=Math.abs(val) + 1;
            long version=testVersion.incrementAndGet();
            if (rand.nextBoolean())             Thread.yield();
            if (oper < commitPercent + deletePercent) {
              verbose("deleting id",id,"val=",nextVal,"version",version);
              Long returnedVersion=deleteAndGetVersion(Integer.toString(id),params("_version_",Long.toString(-version),DISTRIB_UPDATE_PARAM,FROM_LEADER));
              if (returnedVersion != null) {
                assertEquals(-version,returnedVersion.longValue());
              }
synchronized (model) {
                DocInfo currInfo=model.get(id);
                if (Math.abs(version) > Math.abs(currInfo.version)) {
                  model.put(id,new DocInfo(version,-nextVal));
                }
              }
              verbose("deleting id",id,"val=",nextVal,"version",version,"DONE");
            }
 else             if (oper < commitPercent + deletePercent + deleteByQueryPercent) {
              verbose("deleteByQuery id",id,"val=",nextVal,"version",version);
              Long returnedVersion=deleteByQueryAndGetVersion("id:" + Integer.toString(id),params("_version_",Long.toString(-version),DISTRIB_UPDATE_PARAM,FROM_LEADER));
              if (returnedVersion != null) {
                assertEquals(-version,returnedVersion.longValue());
              }
synchronized (model) {
                DocInfo currInfo=model.get(id);
                if (Math.abs(version) > Math.abs(currInfo.version)) {
                  model.put(id,new DocInfo(version,-nextVal));
                }
              }
              verbose("deleteByQuery id",id,"val=",nextVal,"version",version,"DONE");
            }
 else {
              verbose("adding id",id,"val=",nextVal,"version",version);
              Long returnedVersion=addAndGetVersion(sdoc("id",Integer.toString(id),field,Long.toString(nextVal),"_version_",Long.toString(version)),params(DISTRIB_UPDATE_PARAM,FROM_LEADER));
              if (returnedVersion != null) {
                assertEquals(version,returnedVersion.longValue());
              }
synchronized (model) {
                DocInfo currInfo=model.get(id);
                if (version > currInfo.version) {
                  model.put(id,new DocInfo(version,nextVal));
                }
              }
              if (VERBOSE) {
                verbose("adding id",id,"val=",nextVal,"version",version,"DONE");
              }
            }
            if (!before) {
              lastId=id;
            }
          }
        }
 catch (        Throwable e) {
          operations.set(-1L);
          throw new RuntimeException(e);
        }
      }
    }
;
    threads.add(thread);
  }
  for (int i=0; i < nReadThreads; i++) {
    Thread thread=new Thread("READER" + i){
      Random rand=new Random(random().nextInt());
      @Override public void run(){
        try {
          while (operations.get() > 0) {
            readPermission.tryAcquire(10,TimeUnit.MILLISECONDS);
            int id=rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);
            boolean realTime=rand.nextInt(100) < percentRealtimeQuery;
            DocInfo info;
            if (realTime) {
              info=visibleModel.get(id);
            }
 else {
synchronized (globalLock) {
                info=committedModel.get(id);
              }
            }
            if (VERBOSE) {
              verbose("querying id",id);
            }
            SolrQueryRequest sreq;
            if (realTime) {
              sreq=req("wt","json","qt","/get","ids",Integer.toString(id));
            }
 else {
              sreq=req("wt","json","q","id:" + Integer.toString(id),"omitHeader","true");
            }
            String response=h.query(sreq);
            Map rsp=(Map)ObjectBuilder.fromJSON(response);
            List doclist=(List)(((Map)rsp.get("response")).get("docs"));
            if (doclist.size() == 0) {
            }
 else {
              assertEquals(1,doclist.size());
              long foundVal=(Long)(((Map)doclist.get(0)).get(field));
              long foundVer=(Long)(((Map)doclist.get(0)).get("_version_"));
              if (foundVer < Math.abs(info.version) || (foundVer == info.version && foundVal != info.val)) {
                verbose("ERROR, id=",id,"found=",response,"model",info);
                assertTrue(false);
              }
            }
          }
          if (rand.nextInt(100) < percentGetLatestVersions) {
            getLatestVersions();
          }
        }
 catch (        Throwable e) {
          operations.set(-1L);
          throw new RuntimeException(e);
        }
      }
    }
;
    threads.add(thread);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  int bufferedAddsApplied=0;
  do {
    assertTrue(uLog.getState() == UpdateLog.State.ACTIVE);
    visibleModel=new ConcurrentHashMap<Integer,DocInfo>(model);
synchronized (stateChangeLock) {
      uLog.bufferUpdates();
    }
    assertTrue(uLog.getState() == UpdateLog.State.BUFFERING);
    if (random().nextBoolean())     Thread.sleep(random().nextInt(10) + 1);
    Future<UpdateLog.RecoveryInfo> recoveryInfoF=uLog.applyBufferedUpdates();
    if (recoveryInfoF != null) {
      UpdateLog.RecoveryInfo recInfo=null;
      int writeThreadNumber=0;
      while (recInfo == null) {
        try {
          recInfo=recoveryInfoF.get(random().nextInt(100 / nWriteThreads),TimeUnit.MILLISECONDS);
        }
 catch (        TimeoutException e) {
          verbose("Operation",operations.get(),"Draining permits for write thread",writeThreadNumber);
          writePermissions[writeThreadNumber++].drainPermits();
          if (writeThreadNumber >= nWriteThreads) {
            writeThreadNumber--;
            writePermissions[writeThreadNumber].release(random().nextInt(2) + 1);
          }
          readPermission.drainPermits();
        }
      }
      bufferedAddsApplied+=recInfo.adds;
    }
    for (    Semaphore writePerm : writePermissions) {
      int neededPermits=Integer.MAX_VALUE - writePerm.availablePermits();
      if (neededPermits > 0)       writePerm.release(neededPermits);
    }
    visibleModel=model;
    int neededPermits=Integer.MAX_VALUE - readPermission.availablePermits();
    if (neededPermits > 0)     readPermission.release(neededPermits);
    verbose("ROUND=",operations.get());
  }
 while (operations.decrementAndGet() > 0);
  verbose("bufferedAddsApplied=",bufferedAddsApplied);
  for (  Thread thread : threads) {
    thread.join();
  }
}
