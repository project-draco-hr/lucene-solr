{
  int size=bits.cardinality();
  BitSet result=new BitSet(size);
  HashMap<String,Double> cdistance=new HashMap<String,Double>(size);
  if (distances == null) {
    distances=new HashMap<Integer,Double>();
  }
  long start=System.currentTimeMillis();
  String[] latIndex=FieldCache.DEFAULT.getStrings(reader,latField);
  String[] lngIndex=FieldCache.DEFAULT.getStrings(reader,lngField);
  int i=bits.nextSetBit(0);
  while (i >= 0) {
    double x, y;
    String sx=latIndex[i];
    String sy=lngIndex[i];
    x=NumberUtils.SortableStr2double(sx);
    y=NumberUtils.SortableStr2double(sy);
    String ck=new Double(x).toString() + "," + new Double(y).toString();
    Double cachedDistance=cdistance.get(ck);
    double d;
    if (cachedDistance != null) {
      d=cachedDistance.doubleValue();
    }
 else {
      d=DistanceUtils.getInstance().getDistanceMi(lat,lng,x,y);
      cdistance.put(ck,d);
    }
    if (d < distance) {
      result.set(i);
      int did=i + nextOffset;
      distances.put(did,d);
    }
    i=bits.nextSetBit(i + 1);
  }
  long end=System.currentTimeMillis();
  nextOffset+=reader.maxDoc();
  log.fine("Time taken : " + (end - start) + ", results : "+ distances.size()+ ", cached : "+ cdistance.size()+ ", incoming size: "+ size+ ", nextOffset: "+ nextOffset);
  cdistance=null;
  return result;
}
