{
  int maxdocs=reader.maxDoc();
  BitSet bits=new BitSet(maxdocs);
  setPrecision(maxdocs);
  WeakHashMap<String,Double> cdistance=new WeakHashMap<String,Double>(maxdocs);
  long start=System.currentTimeMillis();
  String[] latIndex=FieldCache.DEFAULT.getStrings(reader,latField);
  String[] lngIndex=FieldCache.DEFAULT.getStrings(reader,lngField);
  distances=new HashMap<Integer,Double>(maxdocs);
  if (distances == null) {
    distances=new HashMap<Integer,Double>();
  }
  TermDocs td=reader.termDocs(null);
  while (td.next()) {
    int doc=td.doc();
    String sx=latIndex[doc];
    String sy=lngIndex[doc];
    double x=NumberUtils.SortableStr2double(sx);
    double y=NumberUtils.SortableStr2double(sy);
    String ck=new Double(x).toString() + "," + new Double(y).toString();
    Double cachedDistance=cdistance.get(ck);
    double d;
    if (cachedDistance != null) {
      d=cachedDistance.doubleValue();
    }
 else {
      d=DistanceUtils.getInstance().getDistanceMi(lat,lng,x,y);
      cdistance.put(ck,d);
    }
    if (d < distance) {
      bits.set(doc);
      distances.put(doc + nextOffset,d);
    }
  }
  int size=bits.cardinality();
  nextOffset+=reader.maxDoc();
  long end=System.currentTimeMillis();
  log.fine("Bits 1: Time taken : " + (end - start) + ", results : "+ distances.size()+ ", cached : "+ cdistance.size()+ ", incoming size: "+ size+ ", nextOffset: "+ nextOffset);
  return bits;
}
