{
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs,    float score) throws IOException {
      final Bits docsWithField=context.reader().getDocsWithField(field);
      if (docsWithField == null || docsWithField instanceof MatchNoBits) {
        return null;
      }
      final DocIdSetIterator approximation=DocIdSetIterator.all(context.reader().maxDoc());
      final TwoPhaseDocIdSetIterator twoPhaseIterator=new TwoPhaseDocIdSetIterator(){
        @Override public boolean matches() throws IOException {
          final int doc=approximation.docID();
          if (acceptDocs != null && acceptDocs.get(doc) == false) {
            return false;
          }
          if (docsWithField.get(doc) == false) {
            return false;
          }
          return true;
        }
        @Override public DocIdSetIterator approximation(){
          return approximation;
        }
      }
;
      final DocIdSetIterator disi=TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);
      return new Scorer(this){
        @Override public TwoPhaseDocIdSetIterator asTwoPhaseIterator(){
          return twoPhaseIterator;
        }
        @Override public int nextDoc() throws IOException {
          return disi.nextDoc();
        }
        @Override public int docID(){
          return disi.docID();
        }
        @Override public long cost(){
          return disi.cost();
        }
        @Override public int advance(        int target) throws IOException {
          return disi.advance(target);
        }
        @Override public int freq() throws IOException {
          return 1;
        }
        @Override public float score() throws IOException {
          return score;
        }
      }
;
    }
  }
;
}
