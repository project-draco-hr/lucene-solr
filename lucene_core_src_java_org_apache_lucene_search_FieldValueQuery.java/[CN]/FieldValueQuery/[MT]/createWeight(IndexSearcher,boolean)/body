{
  return new Weight(this){
    private float queryNorm;
    private float queryWeight;
    @Override public float getValueForNormalization() throws IOException {
      queryWeight=getBoost();
      return queryWeight * queryWeight;
    }
    @Override public void normalize(    float norm,    float topLevelBoost){
      queryNorm=norm * topLevelBoost;
      queryWeight*=queryNorm;
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      final Scorer s=scorer(context,context.reader().getLiveDocs());
      final boolean exists=(s != null && s.advance(doc) == doc);
      final ComplexExplanation result=new ComplexExplanation();
      if (exists) {
        result.setDescription(FieldValueQuery.this.toString() + ", product of:");
        result.setValue(queryWeight);
        result.setMatch(Boolean.TRUE);
        result.addDetail(new Explanation(getBoost(),"boost"));
        result.addDetail(new Explanation(queryNorm,"queryNorm"));
      }
 else {
        result.setDescription(FieldValueQuery.this.toString() + " doesn't match id " + doc);
        result.setValue(0);
        result.setMatch(Boolean.FALSE);
      }
      return result;
    }
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      final Bits docsWithField=context.reader().getDocsWithField(field);
      if (docsWithField == null || docsWithField instanceof MatchNoBits) {
        return null;
      }
      final DocIdSetIterator approximation=DocIdSetIterator.all(context.reader().maxDoc());
      final TwoPhaseDocIdSetIterator twoPhaseIterator=new TwoPhaseDocIdSetIterator(){
        @Override public boolean matches() throws IOException {
          final int doc=approximation.docID();
          if (acceptDocs != null && acceptDocs.get(doc) == false) {
            return false;
          }
          if (docsWithField.get(doc) == false) {
            return false;
          }
          return true;
        }
        @Override public DocIdSetIterator approximation(){
          return approximation;
        }
      }
;
      final DocIdSetIterator disi=TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);
      return new Scorer(this){
        @Override public TwoPhaseDocIdSetIterator asTwoPhaseIterator(){
          return twoPhaseIterator;
        }
        @Override public int nextDoc() throws IOException {
          return disi.nextDoc();
        }
        @Override public int docID(){
          return disi.docID();
        }
        @Override public long cost(){
          return disi.cost();
        }
        @Override public int advance(        int target) throws IOException {
          return disi.advance(target);
        }
        @Override public int startOffset() throws IOException {
          return -1;
        }
        @Override public int nextPosition() throws IOException {
          return -1;
        }
        @Override public BytesRef getPayload() throws IOException {
          return null;
        }
        @Override public int freq() throws IOException {
          return 1;
        }
        @Override public int endOffset() throws IOException {
          return -1;
        }
        @Override public float score() throws IOException {
          return queryWeight;
        }
      }
;
    }
  }
;
}
