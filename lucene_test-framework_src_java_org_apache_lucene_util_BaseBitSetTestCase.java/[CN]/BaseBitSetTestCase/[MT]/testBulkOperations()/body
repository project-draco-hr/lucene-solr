{
  final int numBits=1 + random().nextInt(100000);
  BitSet set1=new JavaUtilBitSet(randomSet(numBits,0),numBits);
  T set2=copyOf(set1,numBits);
  final int iters=10 + random().nextInt(100);
  for (int i=0; i < iters; ++i) {
    float percentSet2=(float)Math.pow(random().nextDouble(),2);
    if (random().nextBoolean()) {
      percentSet2=1 - percentSet2;
    }
    BitSet bulkSet=new JavaUtilBitSet(randomSet(numBits,percentSet2),numBits);
    final DocIdSet bulkSetCopy=randomCopy(bulkSet,numBits);
    if (bulkSetCopy.iterator() == null) {
      continue;
    }
switch (random().nextInt(3)) {
case 0:
      set1.or(bulkSetCopy.iterator());
    set2.or(bulkSetCopy.iterator());
  break;
case 1:
set1.and(bulkSetCopy.iterator());
set2.and(bulkSetCopy.iterator());
break;
default :
set1.andNot(bulkSetCopy.iterator());
set2.andNot(bulkSetCopy.iterator());
break;
}
assertEquals(set1,set2,numBits);
}
}
