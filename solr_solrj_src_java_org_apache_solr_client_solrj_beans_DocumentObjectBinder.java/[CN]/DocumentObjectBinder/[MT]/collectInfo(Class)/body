{
  List<DocField> fields=new ArrayList<>();
  Class superClazz=clazz;
  List<AccessibleObject> members=new ArrayList<>();
  while (superClazz != null && superClazz != Object.class) {
    members.addAll(Arrays.asList(superClazz.getDeclaredFields()));
    members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));
    superClazz=superClazz.getSuperclass();
  }
  boolean childFieldFound=false;
  for (  AccessibleObject member : members) {
    if (member.isAnnotationPresent(Field.class)) {
      member.setAccessible(true);
      DocField df=new DocField(member);
      if (df.child != null) {
        if (childFieldFound)         throw new BindingException(clazz.getName() + " cannot have more than one Field with child=true");
        childFieldFound=true;
      }
      fields.add(df);
    }
  }
  return fields;
}
