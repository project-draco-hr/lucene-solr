{
  return new AbstractList<List<Integer>>(){
    @Override public List<Integer> get(    final int rowIdx){
      boolean hasNonZero=false;
      int y=rows - rowIdx - 1;
      for (int c=0; c < columns; c++) {
        if (counts[c * rows + y] > 0) {
          hasNonZero=true;
          break;
        }
      }
      if (!hasNonZero) {
        return null;
      }
      return new AbstractList<Integer>(){
        @Override public Integer get(        int columnIdx){
          return counts[columnIdx * rows + y];
        }
        @Override public int size(){
          return columns;
        }
      }
;
    }
    @Override public int size(){
      return rows;
    }
  }
;
}
