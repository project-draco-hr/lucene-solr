{
  Outputs<CharsRef> outputs=CharSequenceOutputs.getSingleton();
  Builder<CharsRef> builder=new Builder<>(FST.INPUT_TYPE.BYTE2,outputs);
  IntsRef scratchInts=new IntsRef();
  Util.toUTF16("a",scratchInts);
  builder.add(scratchInts,new CharsRef("b"));
  Util.toUTF16("ab",scratchInts);
  builder.add(scratchInts,new CharsRef("c"));
  Util.toUTF16("c",scratchInts);
  builder.add(scratchInts,new CharsRef("de"));
  Util.toUTF16("def",scratchInts);
  builder.add(scratchInts,new CharsRef("gh"));
  FST<CharsRef> fst=builder.finish();
  StringBuilder sb=new StringBuilder("atestanother");
  Dictionary.applyMappings(fst,sb);
  assertEquals("btestbnother",sb.toString());
  sb=new StringBuilder("abtestanother");
  Dictionary.applyMappings(fst,sb);
  assertEquals("ctestbnother",sb.toString());
  sb=new StringBuilder("atestabnother");
  Dictionary.applyMappings(fst,sb);
  assertEquals("btestcnother",sb.toString());
  sb=new StringBuilder("abtestabnother");
  Dictionary.applyMappings(fst,sb);
  assertEquals("ctestcnother",sb.toString());
  sb=new StringBuilder("abtestabcnother");
  Dictionary.applyMappings(fst,sb);
  assertEquals("ctestcdenother",sb.toString());
  sb=new StringBuilder("defdefdefc");
  Dictionary.applyMappings(fst,sb);
  assertEquals("ghghghde",sb.toString());
}
