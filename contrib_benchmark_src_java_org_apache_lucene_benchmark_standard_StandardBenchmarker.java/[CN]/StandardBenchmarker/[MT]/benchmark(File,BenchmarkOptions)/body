{
  StandardOptions options=(StandardOptions)opts;
  workingDir.mkdirs();
  File sourceDir=getSourceDirectory(workingDir);
  sourceDir.mkdirs();
  File indexDir=new File(workingDir,INDEX_DIR);
  indexDir.mkdirs();
  Analyzer a=new StandardAnalyzer();
  List queryList=new ArrayList(20);
  queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));
  queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries("body")));
  Query[] qs=createQueries(queryList,a);
  QueryData[] qds=QueryData.getAll(qs);
  TestData[] params=TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir},new Analyzer[]{a});
  System.out.println("Testing " + params.length + " different permutations.");
  for (int i=0; i < params.length; i++) {
    try {
      reset(indexDir);
      params[i].setDirectory(FSDirectory.getDirectory(indexDir));
      params[i].setQueries(qds);
      System.out.println(params[i]);
      runBenchmark(params[i],options);
      System.out.println(params[i].showRunData(params[i].getId()));
      params[i].getDirectory().close();
      System.runFinalization();
      System.gc();
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println("EXCEPTION: " + e.getMessage());
    }
  }
  return params;
}
