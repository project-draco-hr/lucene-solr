{
  Directory d=newDirectory();
  IndexWriter w=new IndexWriter(d,cfg);
  final int numValues=179 + random.nextInt(151);
  final List<Values> numVariantList=new ArrayList<Values>(NUMERICS);
  Collections.shuffle(numVariantList,random);
  for (  Values val : numVariantList) {
    OpenBitSet deleted=indexValues(w,numValues,val,numVariantList,withDeletions,7);
    List<Closeable> closeables=new ArrayList<Closeable>();
    IndexReader r=IndexReader.open(w);
    final int numRemainingValues=(int)(numValues - deleted.cardinality());
    final int base=r.numDocs() - numRemainingValues;
switch (val) {
case PACKED_INTS:
{
        DocValues intsReader=getDocValues(r,val.name());
        assertNotNull(intsReader);
        Source ints=getSource(intsReader);
        MissingValues missing=ints.getMissing();
        for (int i=0; i < base; i++) {
          long value=ints.getInt(i);
          assertEquals("index " + i,missing.longValue,value);
        }
        ValuesEnum intsEnum=getValuesEnum(intsReader);
        assertTrue(intsEnum.advance(0) >= base);
        intsEnum=getValuesEnum(intsReader);
        LongsRef enumRef=intsEnum.getInt();
        int expected=0;
        for (int i=base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals("advance failed at index: " + i + " of "+ r.numDocs()+ " docs",i,intsEnum.advance(i));
          assertEquals(expected,enumRef.get());
          assertEquals(expected,ints.getInt(i));
        }
      }
    break;
case SIMPLE_FLOAT_4BYTE:
case SIMPLE_FLOAT_8BYTE:
{
    DocValues floatReader=getDocValues(r,val.name());
    assertNotNull(floatReader);
    Source floats=getSource(floatReader);
    MissingValues missing=floats.getMissing();
    for (int i=0; i < base; i++) {
      double value=floats.getFloat(i);
      assertEquals(" floats failed for doc: " + i + " base: "+ base,missing.doubleValue,value,0.0d);
    }
    ValuesEnum floatEnum=getValuesEnum(floatReader);
    assertTrue(floatEnum.advance(0) >= base);
    floatEnum=getValuesEnum(floatReader);
    FloatsRef enumRef=floatEnum.getFloat();
    int expected=0;
    for (int i=base; i < r.numDocs(); i++, expected++) {
      while (deleted.get(expected)) {
        expected++;
      }
      assertEquals("advance failed at index: " + i + " of "+ r.numDocs()+ " docs base:"+ base,i,floatEnum.advance(i));
      assertEquals("index " + i,2.0 * expected,enumRef.get(),0.00001);
      assertEquals("index " + i,2.0 * expected,floats.getFloat(i),0.00001);
    }
  }
break;
default :
fail("unexpected value " + val);
}
closeables.add(r);
for (Closeable toClose : closeables) {
toClose.close();
}
}
w.close();
d.close();
}
