{
  Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer tokenizer=new LetterTokenizer(TEST_VERSION_CURRENT,reader){
        @Override protected int normalize(        int c){
          if (c <= 0xffff) {
            return 0x1043C;
          }
 else {
            return c;
          }
        }
      }
;
      return new TokenStreamComponents(tokenizer,tokenizer);
    }
  }
;
  int num=10000 * RANDOM_MULTIPLIER;
  for (int i=0; i < num; i++) {
    String s=_TestUtil.randomUnicodeString(random);
    TokenStream ts=analyzer.tokenStream("foo",new StringReader(s));
    ts.reset();
    OffsetAttribute offsetAtt=ts.addAttribute(OffsetAttribute.class);
    while (ts.incrementToken()) {
      String highlightedText=s.substring(offsetAtt.startOffset(),offsetAtt.endOffset());
      for (int j=0, cp=0; j < highlightedText.length(); j+=Character.charCount(cp)) {
        cp=highlightedText.codePointAt(j);
        assertTrue("non-letter:" + Integer.toHexString(cp),Character.isLetter(cp));
      }
    }
    ts.end();
    ts.close();
  }
  checkRandomData(random,analyzer,num);
}
