{
  ValueType[] values=ValueType.values();
  ValueType type=values[random.nextInt(values.length)];
  String name="random_" + type.name() + ""+ docValuesFieldPrefix;
  if ("PreFlex".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)   return;
  IndexDocValuesField docValuesField=new IndexDocValuesField(name);
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
    final String randomUnicodeString=_TestUtil.randomUnicodeString(random,fixedBytesLength);
  BytesRef fixedRef=new BytesRef(randomUnicodeString);
if (fixedRef.length > fixedBytesLength) {
  fixedRef=new BytesRef(fixedRef.bytes,0,fixedBytesLength);
}
 else {
  fixedRef.grow(fixedBytesLength);
  fixedRef.length=fixedBytesLength;
}
docValuesField.setBytes(fixedRef,type);
break;
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
BytesRef ref=new BytesRef(_TestUtil.randomUnicodeString(random,200));
docValuesField.setBytes(ref,type);
break;
case FLOAT_32:
docValuesField.setFloat(random.nextFloat());
break;
case FLOAT_64:
docValuesField.setFloat(random.nextDouble());
break;
case INTS:
docValuesField.setInt(random.nextInt());
break;
default :
throw new IllegalArgumentException("no such type: " + type);
}
doc.add(docValuesField);
}
