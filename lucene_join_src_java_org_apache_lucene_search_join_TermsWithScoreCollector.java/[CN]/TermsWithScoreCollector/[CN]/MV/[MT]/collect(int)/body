{
  reuse=fromDocTermOrds.lookup(doc,reuse);
  int[] buffer=new int[5];
  int chunk;
  do {
    chunk=reuse.read(buffer);
    if (chunk == 0) {
      return;
    }
    for (int idx=0; idx < chunk; idx++) {
      int key=buffer[idx];
      docTermsEnum.seekExact((long)key);
      int ord=collectedTerms.add(docTermsEnum.term());
      if (ord < 0) {
        ord=-ord - 1;
      }
 else {
        if (ord >= scoreSums.length) {
          scoreSums=ArrayUtil.grow(scoreSums);
        }
      }
      final float current=scorer.score();
      final float existing=scoreSums[ord];
      if (Float.compare(existing,0.0f) == 0) {
        scoreSums[ord]=current;
      }
 else {
switch (scoreMode) {
case Total:
          scoreSums[ord]=existing + current;
        break;
case Max:
      if (current > existing) {
        scoreSums[ord]=current;
      }
  }
}
}
}
 while (chunk >= buffer.length);
}
