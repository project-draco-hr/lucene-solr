{
  DirectSolrSpellChecker checker=new DirectSolrSpellChecker();
  NamedList spellchecker=new NamedList();
  spellchecker.add("classname",DirectSolrSpellChecker.class.getName());
  spellchecker.add(DirectSolrSpellChecker.FIELD,"teststop");
  spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH,2);
  SolrCore core=h.getCore();
  checker.init(spellchecker,core);
  RefCounted<SolrIndexSearcher> searcher=core.getSearcher();
  Collection<Token> tokens=queryConverter.convert("fob");
  SpellingOptions spellOpts=new SpellingOptions(tokens,searcher.get().getIndexReader());
  SpellingResult result=checker.getSuggestions(spellOpts);
  assertTrue("result is null and it shouldn't be",result != null);
  Map<String,Integer> suggestions=result.get(tokens.iterator().next());
  Map.Entry<String,Integer> entry=suggestions.entrySet().iterator().next();
  assertTrue(entry.getKey() + " is not equal to " + "foo",entry.getKey().equals("foo") == true);
  assertFalse(entry.getValue() + " equals: " + SpellingResult.NO_FREQUENCY_INFO,entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);
  spellOpts.tokens=queryConverter.convert("super");
  result=checker.getSuggestions(spellOpts);
  assertTrue("result is null and it shouldn't be",result != null);
  suggestions=result.get(tokens.iterator().next());
  assertTrue("suggestions is not null and it should be",suggestions == null);
  searcher.decref();
}
