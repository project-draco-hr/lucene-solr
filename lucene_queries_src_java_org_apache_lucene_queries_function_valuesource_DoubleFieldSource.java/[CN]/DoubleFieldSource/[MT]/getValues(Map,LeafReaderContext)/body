{
  final NumericDocValues values=DocValues.getNumeric(readerContext.reader(),field);
  return new DoubleDocValues(this){
    int lastDocID;
    private double getValueForDoc(    int doc) throws IOException {
      if (doc < lastDocID) {
        throw new IllegalArgumentException("docs were sent out-of-order: lastDocID=" + lastDocID + " vs docID="+ doc);
      }
      lastDocID=doc;
      int curDocID=values.docID();
      if (doc > curDocID) {
        curDocID=values.advance(doc);
      }
      if (doc == curDocID) {
        return Double.longBitsToDouble(values.longValue());
      }
 else {
        return 0.0;
      }
    }
    @Override public double doubleVal(    int doc) throws IOException {
      return getValueForDoc(doc);
    }
    @Override public boolean exists(    int doc) throws IOException {
      getValueForDoc(doc);
      return doc == values.docID();
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueDouble mval=new MutableValueDouble();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc) throws IOException {
          mval.value=getValueForDoc(doc);
          mval.exists=exists(doc);
        }
      }
;
    }
  }
;
}
