{
  final FieldCache.Doubles arr=cache.getDoubles(readerContext.reader(),field,parser,true);
  final Bits valid=cache.getDocsWithField(readerContext.reader(),field);
  return new DoubleDocValues(this){
    @Override public double doubleVal(    int doc){
      return arr.get(doc);
    }
    @Override public boolean exists(    int doc){
      return arr.get(doc) != 0 || valid.get(doc);
    }
    @Override public ValueSourceScorer getRangeScorer(    IndexReader reader,    String lowerVal,    String upperVal,    boolean includeLower,    boolean includeUpper){
      double lower, upper;
      if (lowerVal == null) {
        lower=Double.NEGATIVE_INFINITY;
      }
 else {
        lower=Double.parseDouble(lowerVal);
      }
      if (upperVal == null) {
        upper=Double.POSITIVE_INFINITY;
      }
 else {
        upper=Double.parseDouble(upperVal);
      }
      final double l=lower;
      final double u=upper;
      if (includeLower && includeUpper) {
        return new ValueSourceScorer(reader,this){
          @Override public boolean matchesValue(          int doc){
            double docVal=doubleVal(doc);
            return docVal >= l && docVal <= u;
          }
        }
;
      }
 else       if (includeLower && !includeUpper) {
        return new ValueSourceScorer(reader,this){
          @Override public boolean matchesValue(          int doc){
            double docVal=doubleVal(doc);
            return docVal >= l && docVal < u;
          }
        }
;
      }
 else       if (!includeLower && includeUpper) {
        return new ValueSourceScorer(reader,this){
          @Override public boolean matchesValue(          int doc){
            double docVal=doubleVal(doc);
            return docVal > l && docVal <= u;
          }
        }
;
      }
 else {
        return new ValueSourceScorer(reader,this){
          @Override public boolean matchesValue(          int doc){
            double docVal=doubleVal(doc);
            return docVal > l && docVal < u;
          }
        }
;
      }
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueDouble mval=new MutableValueDouble();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=arr.get(doc);
          mval.exists=mval.value != 0 || valid.get(doc);
        }
      }
;
    }
  }
;
}
