{
  final List<String> methodsExpectedNotOverriden=new ArrayList<>(14);
  methodsExpectedNotOverriden.add("writeResponse");
  methodsExpectedNotOverriden.add("writeKey");
  methodsExpectedNotOverriden.add("writeNamedListAsMapMangled");
  methodsExpectedNotOverriden.add("writeNamedListAsMapWithDups");
  methodsExpectedNotOverriden.add("writeNamedListAsArrMap");
  methodsExpectedNotOverriden.add("writeNamedListAsArrArr");
  methodsExpectedNotOverriden.add("writeNamedListAsFlat");
  methodsExpectedNotOverriden.add("writeEndDocumentList");
  methodsExpectedNotOverriden.add("writeMapOpener");
  methodsExpectedNotOverriden.add("writeMapSeparator");
  methodsExpectedNotOverriden.add("writeMapCloser");
  methodsExpectedNotOverriden.add("writeArrayOpener");
  methodsExpectedNotOverriden.add("writeArraySeparator");
  methodsExpectedNotOverriden.add("writeArrayCloser");
  final Class<?> subClass=ArrayOfNamedValuePairJSONWriter.class;
  final Class<?> superClass=subClass.getSuperclass();
  for (  final Method superClassMethod : superClass.getDeclaredMethods()) {
    final String methodName=superClassMethod.getName();
    if (!methodName.startsWith("write"))     continue;
    final int modifiers=superClassMethod.getModifiers();
    if (Modifier.isFinal(modifiers))     continue;
    if (Modifier.isStatic(modifiers))     continue;
    if (Modifier.isPrivate(modifiers))     continue;
    final boolean expectOverriden=!methodsExpectedNotOverriden.contains(methodName);
    try {
      final Method subClassMethod=subClass.getDeclaredMethod(superClassMethod.getName(),superClassMethod.getParameterTypes());
      if (expectOverriden) {
        assertEquals("getReturnType() difference",superClassMethod.getReturnType(),subClassMethod.getReturnType());
      }
 else {
        fail(subClass + " must not override '" + superClassMethod+ "'");
      }
    }
 catch (    NoSuchMethodException e) {
      if (expectOverriden) {
        fail(subClass + " needs to override '" + superClassMethod+ "'");
      }
 else {
        assertTrue(methodName + " not found in remaining " + methodsExpectedNotOverriden,methodsExpectedNotOverriden.remove(methodName));
      }
    }
  }
  assertTrue("methodsExpected NotOverriden but NotFound instead: " + methodsExpectedNotOverriden,methodsExpectedNotOverriden.isEmpty());
}
