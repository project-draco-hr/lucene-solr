{
  List<BytesRef> terms=new ArrayList<BytesRef>();
  String text=DOMUtils.getNonBlankTextOrFail(e);
  String fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  try {
    TokenStream ts=analyzer.tokenStream(fieldName,text);
    TermToBytesRefAttribute termAtt=ts.addAttribute(TermToBytesRefAttribute.class);
    BytesRef bytes=termAtt.getBytesRef();
    ts.reset();
    while (ts.incrementToken()) {
      termAtt.fillBytesRef();
      terms.add(BytesRef.deepCopyOf(bytes));
    }
    ts.end();
    ts.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Error constructing terms from index:" + ioe);
  }
  return new TermsFilter(fieldName,terms);
}
