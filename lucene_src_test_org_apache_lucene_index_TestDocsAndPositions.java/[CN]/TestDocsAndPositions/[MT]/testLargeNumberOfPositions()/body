{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,usePayload)));
  int howMany=1000;
  for (int i=0; i < 39; i++) {
    Document doc=new Document();
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < howMany; j++) {
      if (j % 2 == 0) {
        builder.append("even ");
      }
 else {
        builder.append("odd ");
      }
    }
    doc.add(newField(fieldName,builder.toString(),Field.Store.YES,Field.Index.ANALYZED));
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  for (int i=0; i < 39 * RANDOM_MULTIPLIER; i++) {
    BytesRef bytes=new BytesRef("even");
    ReaderContext topReaderContext=reader.getTopReaderContext();
    AtomicReaderContext[] leaves=ReaderUtil.leaves(topReaderContext);
    for (    AtomicReaderContext atomicReaderContext : leaves) {
      DocsAndPositionsEnum docsAndPosEnum=getDocsAndPositions(atomicReaderContext.reader,bytes,null);
      assertNotNull(docsAndPosEnum);
      int initDoc=0;
      int maxDoc=atomicReaderContext.reader.maxDoc();
      if (random.nextBoolean()) {
        initDoc=docsAndPosEnum.nextDoc();
      }
 else {
        initDoc=docsAndPosEnum.advance(random.nextInt(maxDoc));
      }
      String msg="Iteration: " + i + " initDoc: "+ initDoc+ " payloads: "+ usePayload;
      assertEquals(howMany / 2,docsAndPosEnum.freq());
      for (int j=0; j < howMany; j+=2) {
        assertEquals("position missmatch index: " + j + " with freq: "+ docsAndPosEnum.freq()+ " -- "+ msg,j,docsAndPosEnum.nextPosition());
      }
    }
  }
  reader.close();
  dir.close();
}
