{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,usePayload)).setMergePolicy(newLogMergePolicy()));
  int numDocs=131;
  int max=1051;
  int term=random.nextInt(max);
  Integer[][] positionsInDoc=new Integer[numDocs][];
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    ArrayList<Integer> positions=new ArrayList<Integer>();
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < 3049; j++) {
      int nextInt=random.nextInt(max);
      builder.append(nextInt).append(" ");
      if (nextInt == term) {
        positions.add(Integer.valueOf(j));
      }
    }
    if (positions.size() == 0) {
      builder.append(term);
      positions.add(3049);
    }
    doc.add(newField(fieldName,builder.toString(),Field.Store.YES,Field.Index.ANALYZED));
    positionsInDoc[i]=positions.toArray(new Integer[0]);
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  for (int i=0; i < 39 * RANDOM_MULTIPLIER; i++) {
    BytesRef bytes=new BytesRef("" + term);
    ReaderContext topReaderContext=reader.getTopReaderContext();
    AtomicReaderContext[] leaves=ReaderUtil.leaves(topReaderContext);
    for (    AtomicReaderContext atomicReaderContext : leaves) {
      DocsAndPositionsEnum docsAndPosEnum=getDocsAndPositions(atomicReaderContext.reader,bytes,null);
      assertNotNull(docsAndPosEnum);
      int initDoc=0;
      int maxDoc=atomicReaderContext.reader.maxDoc();
      if (random.nextBoolean()) {
        initDoc=docsAndPosEnum.nextDoc();
      }
 else {
        initDoc=docsAndPosEnum.advance(random.nextInt(maxDoc));
      }
      do {
        int docID=docsAndPosEnum.docID();
        if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {
          break;
        }
        Integer[] pos=positionsInDoc[atomicReaderContext.docBase + docID];
        assertEquals(pos.length,docsAndPosEnum.freq());
        final int howMany=random.nextInt(20) == 0 ? pos.length - random.nextInt(pos.length) : pos.length;
        for (int j=0; j < howMany; j++) {
          assertEquals("iteration: " + i + " initDoc: "+ initDoc+ " doc: "+ docID+ " base: "+ atomicReaderContext.docBase+ " positions: "+ Arrays.toString(pos)+ " usePayloads: "+ usePayload,pos[j].intValue(),docsAndPosEnum.nextPosition());
        }
        if (random.nextInt(10) == 0) {
          docsAndPosEnum.advance(docID + 1 + random.nextInt((maxDoc - docID)));
        }
      }
 while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);
    }
  }
  reader.close();
  dir.close();
}
