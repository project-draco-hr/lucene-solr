{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,dir,new MockAnalyzer(random,MockTokenizer.SIMPLE,true));
  Document doc=new Document();
  FieldType ft=new FieldType(TextField.TYPE_STORED);
  ft.setStoreTermVectors(true);
  ft.setStoreTermVectorOffsets(true);
  ft.setStoreTermVectorPositions(true);
  doc.add(newField("c","some content here",ft));
  doc.add(newField("a","some content here",ft));
  doc.add(newField("b","some content here",ft));
  doc.add(newField("x","some content here",ft));
  writer.addDocument(doc);
  IndexReader reader=writer.getReader();
  writer.close();
  Fields v=reader.getTermVectors(0);
  assertEquals(4,v.size());
  String[] expectedFields=new String[]{"a","b","c","x"};
  int[] expectedPositions=new int[]{1,2,0};
  FieldsEnum fieldsEnum=v.iterator();
  for (int i=0; i < expectedFields.length; i++) {
    assertEquals(expectedFields[i],fieldsEnum.next());
    assertEquals(3,v.terms(expectedFields[i]).size());
    DocsAndPositionsEnum dpEnum=null;
    Terms terms=fieldsEnum.terms();
    assertNotNull(terms);
    TermsEnum termsEnum=terms.iterator(null);
    assertEquals("content",termsEnum.next().utf8ToString());
    dpEnum=termsEnum.docsAndPositions(null,dpEnum,false);
    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
    assertEquals(1,dpEnum.freq());
    assertEquals(expectedPositions[0],dpEnum.nextPosition());
    assertEquals("here",termsEnum.next().utf8ToString());
    dpEnum=termsEnum.docsAndPositions(null,dpEnum,false);
    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
    assertEquals(1,dpEnum.freq());
    assertEquals(expectedPositions[1],dpEnum.nextPosition());
    assertEquals("some",termsEnum.next().utf8ToString());
    dpEnum=termsEnum.docsAndPositions(null,dpEnum,false);
    assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
    assertEquals(1,dpEnum.freq());
    assertEquals(expectedPositions[2],dpEnum.nextPosition());
    assertNull(termsEnum.next());
  }
  reader.close();
  dir.close();
}
