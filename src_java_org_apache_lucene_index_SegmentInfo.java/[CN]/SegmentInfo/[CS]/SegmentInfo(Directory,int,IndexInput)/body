{
  this.dir=dir;
  name=input.readString();
  docCount=input.readInt();
  if (format <= SegmentInfos.FORMAT_LOCKLESS) {
    delGen=input.readLong();
    if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {
      docStoreOffset=input.readInt();
      if (docStoreOffset != -1) {
        docStoreSegment=input.readString();
        docStoreIsCompoundFile=(1 == input.readByte());
      }
 else {
        docStoreSegment=name;
        docStoreIsCompoundFile=false;
      }
    }
 else {
      docStoreOffset=-1;
      docStoreSegment=name;
      docStoreIsCompoundFile=false;
    }
    if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {
      hasSingleNormFile=(1 == input.readByte());
    }
 else {
      hasSingleNormFile=false;
    }
    int numNormGen=input.readInt();
    if (numNormGen == NO) {
      normGen=null;
    }
 else {
      normGen=new long[numNormGen];
      for (int j=0; j < numNormGen; j++) {
        normGen[j]=input.readLong();
      }
    }
    isCompoundFile=input.readByte();
    preLockless=(isCompoundFile == CHECK_DIR);
  }
 else {
    delGen=CHECK_DIR;
    normGen=null;
    isCompoundFile=CHECK_DIR;
    preLockless=true;
    hasSingleNormFile=false;
    docStoreOffset=-1;
    docStoreIsCompoundFile=false;
    docStoreSegment=null;
  }
}
