{
  final SolrIndexSearcher searcher=req.getSearcher();
  final IndexSchema schema=searcher.getSchema();
  final SchemaField schemaField=schema.getFieldOrNull(fieldName);
  if (schemaField != null && ((schemaField.getType() instanceof org.apache.solr.schema.TrieField) || (schemaField.getType() instanceof org.apache.solr.schema.TrieDateField)))   return;
  SolrParams params=req.getParams();
  boolean preserveMulti=params.getFieldBool(fieldName,HighlightParams.PRESERVE_MULTI,false);
  List<StorableField> allFields=doc.getFields();
  if (allFields != null && allFields.size() == 0)   return;
  TokenStream tstream=null;
  int numFragments=getMaxSnippets(fieldName,params);
  boolean mergeContiguousFragments=isMergeContiguousFragments(fieldName,params);
  String[] summaries=null;
  List<TextFragment> frags=new ArrayList<>();
  TermOffsetsTokenStream tots=null;
  TokenStream tvStream=TokenSources.getTokenStreamWithOffsets(searcher.getIndexReader(),docId,fieldName);
  if (tvStream != null) {
    tots=new TermOffsetsTokenStream(tvStream);
  }
  int mvToExamine=Integer.parseInt(req.getParams().get(HighlightParams.MAX_MULTIVALUED_TO_EXAMINE,Integer.toString(Integer.MAX_VALUE)));
  int mvToMatch=Integer.parseInt(req.getParams().get(HighlightParams.MAX_MULTIVALUED_TO_MATCH,Integer.toString(Integer.MAX_VALUE)));
  for (  StorableField thisField : allFields) {
    if (mvToExamine <= 0 || mvToMatch <= 0)     break;
    if (!thisField.name().equals(fieldName))     continue;
    --mvToExamine;
    String thisText=thisField.stringValue();
    if (tots != null) {
      tstream=tots.getMultiValuedTokenStream(thisText.length());
    }
 else {
      tstream=createAnalyzerTStream(schema,fieldName,thisText);
    }
    int maxCharsToAnalyze=params.getFieldInt(fieldName,HighlightParams.MAX_CHARS,Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);
    Highlighter highlighter;
    if (Boolean.valueOf(req.getParams().get(HighlightParams.USE_PHRASE_HIGHLIGHTER,"true"))) {
      if (maxCharsToAnalyze < 0) {
        tstream=new CachingTokenFilter(tstream);
      }
 else {
        tstream=new CachingTokenFilter(new OffsetLimitTokenFilter(tstream,maxCharsToAnalyze));
      }
      highlighter=getPhraseHighlighter(query,fieldName,req,(CachingTokenFilter)tstream);
      tstream.reset();
    }
 else {
      highlighter=getHighlighter(query,fieldName,req);
    }
    if (maxCharsToAnalyze < 0) {
      highlighter.setMaxDocCharsToAnalyze(thisText.length());
    }
 else {
      highlighter.setMaxDocCharsToAnalyze(maxCharsToAnalyze);
    }
    try {
      TextFragment[] bestTextFragments=highlighter.getBestTextFragments(tstream,thisText,mergeContiguousFragments,numFragments);
      for (int k=0; k < bestTextFragments.length; k++) {
        if (preserveMulti) {
          if (bestTextFragments[k] != null) {
            frags.add(bestTextFragments[k]);
            --mvToMatch;
          }
        }
 else {
          if ((bestTextFragments[k] != null) && (bestTextFragments[k].getScore() > 0)) {
            frags.add(bestTextFragments[k]);
            --mvToMatch;
          }
        }
      }
    }
 catch (    InvalidTokenOffsetsException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
    }
  }
  if (!preserveMulti) {
    Collections.sort(frags,new Comparator<TextFragment>(){
      @Override public int compare(      TextFragment arg0,      TextFragment arg1){
        return Math.round(arg1.getScore() - arg0.getScore());
      }
    }
);
  }
  if (frags.size() > 0) {
    ArrayList<String> fragTexts=new ArrayList<>();
    for (    TextFragment fragment : frags) {
      if (preserveMulti) {
        if (fragment != null) {
          fragTexts.add(fragment.toString());
        }
      }
 else {
        if ((fragment != null) && (fragment.getScore() > 0)) {
          fragTexts.add(fragment.toString());
        }
      }
      if (fragTexts.size() >= numFragments && !preserveMulti)       break;
    }
    summaries=fragTexts.toArray(new String[0]);
    if (summaries.length > 0)     docSummaries.add(fieldName,summaries);
  }
  if (summaries == null || summaries.length == 0) {
    alternateField(docSummaries,params,doc,fieldName);
  }
}
