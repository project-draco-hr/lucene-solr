{
  final SolrIndexSearcher searcher=req.getSearcher();
  final IndexSchema schema=searcher.getSchema();
  final SolrParams params=req.getParams();
  final SchemaField schemaField=schema.getFieldOrNull(fieldName);
  if (schemaField != null && schemaField.getType() instanceof org.apache.solr.schema.TrieField)   return;
  final int mvToExamine=req.getParams().getFieldInt(fieldName,HighlightParams.MAX_MULTIVALUED_TO_EXAMINE,schemaField.multiValued() ? Integer.MAX_VALUE : 1);
  int mvToMatch=req.getParams().getFieldInt(fieldName,HighlightParams.MAX_MULTIVALUED_TO_MATCH,Integer.MAX_VALUE);
  if (mvToExamine <= 0 || mvToMatch <= 0) {
    return;
  }
  int maxCharsToAnalyze=params.getFieldInt(fieldName,HighlightParams.MAX_CHARS,Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);
  if (maxCharsToAnalyze < 0) {
    maxCharsToAnalyze=Integer.MAX_VALUE;
  }
  List<String> fieldValues=getFieldValues(req,doc,fieldName,mvToExamine,maxCharsToAnalyze);
  if (fieldValues.isEmpty()) {
    return;
  }
  boolean preserveMulti=params.getFieldBool(fieldName,HighlightParams.PRESERVE_MULTI,false);
  int numFragments=getMaxSnippets(fieldName,params);
  boolean mergeContiguousFragments=isMergeContiguousFragments(fieldName,params);
  List<TextFragment> frags=new ArrayList<>();
  final TokenStream tvStream=TokenSources.getTokenStreamWithOffsets(searcher.getIndexReader(),docId,fieldName);
  final OffsetWindowTokenFilter tvWindowStream;
  if (tvStream != null && fieldValues.size() > 1) {
    tvWindowStream=new OffsetWindowTokenFilter(tvStream);
  }
 else {
    tvWindowStream=null;
  }
  for (  String thisText : fieldValues) {
    if (mvToMatch <= 0 || maxCharsToAnalyze <= 0) {
      break;
    }
    TokenStream tstream;
    if (tvWindowStream != null) {
      tstream=tvWindowStream.advanceToNextWindowOfLength(thisText.length());
    }
 else     if (tvStream != null) {
      tstream=tvStream;
    }
 else {
      tstream=createAnalyzerTStream(schema,fieldName,thisText);
    }
    Highlighter highlighter;
    if (req.getParams().getFieldBool(fieldName,HighlightParams.USE_PHRASE_HIGHLIGHTER,true)) {
      final TokenStream tempTokenStream;
      if (tstream != tvStream) {
        if (maxCharsToAnalyze >= thisText.length()) {
          tempTokenStream=new CachingTokenFilter(tstream);
        }
 else {
          tempTokenStream=new CachingTokenFilter(new OffsetLimitTokenFilter(tstream,maxCharsToAnalyze));
        }
      }
 else {
        tempTokenStream=tstream;
      }
      highlighter=getPhraseHighlighter(query,fieldName,req,tempTokenStream);
      if (tempTokenStream instanceof CachingTokenFilter && ((CachingTokenFilter)tempTokenStream).isCached()) {
        tstream=tempTokenStream;
      }
    }
 else {
      highlighter=getHighlighter(query,fieldName,req);
    }
    highlighter.setMaxDocCharsToAnalyze(maxCharsToAnalyze);
    maxCharsToAnalyze-=thisText.length();
    try {
      TextFragment[] bestTextFragments=highlighter.getBestTextFragments(tstream,thisText,mergeContiguousFragments,numFragments);
      for (      TextFragment bestTextFragment : bestTextFragments) {
        if (bestTextFragment == null)         continue;
        if (bestTextFragment.getScore() > 0 || preserveMulti) {
          frags.add(bestTextFragment);
          if (bestTextFragment.getScore() > 0)           --mvToMatch;
        }
      }
    }
 catch (    InvalidTokenOffsetsException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
    }
  }
  if (frags.size() > 0) {
    if (!preserveMulti) {
      Collections.sort(frags,new Comparator<TextFragment>(){
        @Override public int compare(        TextFragment arg0,        TextFragment arg1){
          return Float.compare(arg1.getScore(),arg0.getScore());
        }
      }
);
    }
    if (frags.size() > numFragments && !preserveMulti) {
      frags=frags.subList(0,numFragments);
    }
    docSummaries.add(fieldName,getResponseForFragments(frags,req));
  }
 else {
    alternateField(docSummaries,params,doc,fieldName);
  }
}
