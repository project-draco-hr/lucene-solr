{
  FieldType ft=(FieldType)loader.newInstance(className);
  ft.setTypeName(name);
  String expression="./analyzer[@type='query']";
  Node anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
  Analyzer queryAnalyzer=readAnalyzer(anode);
  expression="./analyzer[@type='multiterm']";
  anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
  Analyzer multiAnalyzer=readAnalyzer(anode);
  expression="./analyzer[not(@type)] | ./analyzer[@type='index']";
  anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
  Analyzer analyzer=readAnalyzer(anode);
  expression="./similarity";
  anode=(Node)xpath.evaluate(expression,node,XPathConstants.NODE);
  Similarity similarity=IndexSchema.readSimilarity(loader,anode);
  if (queryAnalyzer == null)   queryAnalyzer=analyzer;
  if (analyzer == null)   analyzer=queryAnalyzer;
  if (multiAnalyzer == null) {
    Boolean legacyMatch=!schema.getDefaultLuceneMatchVersion().onOrAfter(Version.LUCENE_36);
    legacyMatch=(DOMUtil.getAttr(node,"legacyMultiTerm",null) == null) ? legacyMatch : Boolean.parseBoolean(DOMUtil.getAttr(node,"legacyMultiTerm",null));
    multiAnalyzer=constructMultiTermAnalyzer(queryAnalyzer,legacyMatch);
  }
  if (analyzer != null) {
    ft.setAnalyzer(analyzer);
    ft.setQueryAnalyzer(queryAnalyzer);
    ft.setMultiTermAnalyzer(multiAnalyzer);
  }
  if (similarity != null) {
    ft.setSimilarity(similarity);
  }
  if (ft instanceof SchemaAware) {
    schemaAware.add((SchemaAware)ft);
  }
  return ft;
}
