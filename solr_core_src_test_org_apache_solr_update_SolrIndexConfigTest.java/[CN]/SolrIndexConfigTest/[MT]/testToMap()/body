{
  final String solrConfigFileName=(random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);
  SolrConfig solrConfig=new SolrConfig(instanceDir,solrConfigFileName,null);
  SolrIndexConfig solrIndexConfig=new SolrIndexConfig(solrConfig,null,null);
  assertNotNull(solrIndexConfig);
  assertNotNull(solrIndexConfig.mergePolicyInfo);
  if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {
    assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);
  }
 else {
    assertNull(solrIndexConfig.mergedSegmentWarmerInfo);
  }
  assertNotNull(solrIndexConfig.mergeSchedulerInfo);
  Map<String,Object> m=solrIndexConfig.toMap();
  int mSizeExpected=0;
  ++mSizeExpected;
  assertTrue(m.get("useCompoundFile") instanceof Boolean);
  ++mSizeExpected;
  assertTrue(m.get("maxBufferedDocs") instanceof Integer);
  ++mSizeExpected;
  assertTrue(m.get("maxMergeDocs") instanceof Integer);
  ++mSizeExpected;
  assertTrue(m.get("maxIndexingThreads") instanceof Integer);
  ++mSizeExpected;
  assertTrue(m.get("mergeFactor") instanceof Integer);
  ++mSizeExpected;
  assertTrue(m.get("ramBufferSizeMB") instanceof Double);
  ++mSizeExpected;
  assertTrue(m.get("writeLockTimeout") instanceof Integer);
  ++mSizeExpected;
  assertTrue(m.get("lockType") instanceof String);
{
    final String lockType=(String)m.get("lockType");
    assertTrue(SolrIndexConfig.LOCK_TYPE_SIMPLE.equals(lockType) || SolrIndexConfig.LOCK_TYPE_NATIVE.equals(lockType) || SolrIndexConfig.LOCK_TYPE_SINGLE.equals(lockType)|| SolrIndexConfig.LOCK_TYPE_NONE.equals(lockType));
  }
  ++mSizeExpected;
  assertTrue(m.get("infoStreamEnabled") instanceof Boolean);
{
    assertFalse(Boolean.valueOf(m.get("infoStreamEnabled").toString()).booleanValue());
  }
  ++mSizeExpected;
  assertTrue(m.get("mergeScheduler") instanceof Map);
  ++mSizeExpected;
  assertTrue(m.get("mergePolicy") instanceof Map);
  if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {
    ++mSizeExpected;
    assertTrue(m.get("mergedSegmentWarmer") instanceof Map);
  }
 else {
    assertNull(m.get("mergedSegmentWarmer"));
  }
  assertEquals(mSizeExpected,m.size());
}
