{
  if (fieldType().indexOptions() == IndexOptions.NONE) {
    return null;
  }
  final LegacyFieldType fieldType=(LegacyFieldType)fieldType();
  final LegacyNumericType numericType=fieldType.numericType();
  if (numericType != null) {
    if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {
      reuse=new LegacyNumericTokenStream(fieldType.numericPrecisionStep());
    }
    final LegacyNumericTokenStream nts=(LegacyNumericTokenStream)reuse;
    final Number val=(Number)fieldsData;
switch (numericType) {
case INT:
      nts.setIntValue(val.intValue());
    break;
case LONG:
  nts.setLongValue(val.longValue());
break;
case FLOAT:
nts.setFloatValue(val.floatValue());
break;
case DOUBLE:
nts.setDoubleValue(val.doubleValue());
break;
default :
throw new AssertionError("Should never get here");
}
return reuse;
}
return super.tokenStream(analyzer,reuse);
}
