{
  final SimScorer sub=sim.simScorer(stats,context);
  final NumericDocValues values=DocValues.getNumeric(context.reader(),scoreValueField);
  return new SimScorer(){
    @Override public float score(    int doc,    float freq) throws IOException {
      if (doc != values.docID()) {
        values.advance(doc);
      }
      if (doc == values.docID()) {
        return Float.intBitsToFloat((int)values.longValue());
      }
 else {
        return 0f;
      }
    }
    @Override public float computeSlopFactor(    int distance){
      return sub.computeSlopFactor(distance);
    }
    @Override public float computePayloadFactor(    int doc,    int start,    int end,    BytesRef payload){
      return sub.computePayloadFactor(doc,start,end,payload);
    }
    @Override public Explanation explain(    int doc,    Explanation freq) throws IOException {
      return Explanation.match(score(doc,0f),"indexDocValue(" + scoreValueField + ")");
    }
  }
;
}
