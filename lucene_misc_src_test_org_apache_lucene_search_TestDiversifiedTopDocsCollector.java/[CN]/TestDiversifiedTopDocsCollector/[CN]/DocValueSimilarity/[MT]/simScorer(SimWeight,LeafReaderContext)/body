{
  final SimScorer sub=sim.simScorer(stats,context);
  final NumericDocValues values=DocValues.getNumeric(context.reader(),scoreValueField);
  return new SimScorer(){
    @Override public float score(    int doc,    float freq){
      return Float.intBitsToFloat((int)values.get(doc));
    }
    @Override public float computeSlopFactor(    int distance){
      return sub.computeSlopFactor(distance);
    }
    @Override public float computePayloadFactor(    int doc,    int start,    int end,    BytesRef payload){
      return sub.computePayloadFactor(doc,start,end,payload);
    }
    @Override public Explanation explain(    int doc,    Explanation freq){
      return new Explanation(Float.intBitsToFloat((int)values.get(doc)),"indexDocValue(" + scoreValueField + ")");
    }
  }
;
}
