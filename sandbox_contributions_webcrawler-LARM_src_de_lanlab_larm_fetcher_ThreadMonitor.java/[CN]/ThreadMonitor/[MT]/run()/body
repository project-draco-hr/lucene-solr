{
  int nothingReadCount=0;
  long lastPeriodBytesRead=-1;
  long monitorRunCount=0;
  long startTime=System.currentTimeMillis();
  log("time;overallBytesRead;overallTasksRun;urlsQueued;urlsWaiting;isWorkingOnMessage;urlsScopeFiltered;urlsVisitedFiltered;urlsREFiltered;memUsed;memFree;totalMem;nrHosts;visitedSize;visitedStringSize;urlLengthFiltered");
  while (true) {
    try {
      try {
        thread.sleep(sampleDelta);
      }
 catch (      InterruptedException e) {
        return;
      }
      Iterator threadIterator=threadPool.getThreadIterator();
      int i=0;
      StringBuffer bytesReadString=new StringBuffer(200);
      StringBuffer rawBytesReadString=new StringBuffer(200);
      StringBuffer tasksRunString=new StringBuffer(200);
      long overallBytesRead=0;
      long overallTasksRun=0;
      long now=System.currentTimeMillis();
      boolean finished=false;
      boolean allThreadsIdle=true;
      StringBuffer sb=new StringBuffer(500);
      while (threadIterator.hasNext()) {
        FetcherThread thread=(FetcherThread)threadIterator.next();
        long totalBytesRead=thread.getTotalBytesRead();
        overallBytesRead+=totalBytesRead;
        bytesReadString.append(formatBytes(totalBytesRead)).append("; ");
        rawBytesReadString.append(totalBytesRead).append("; ");
        long tasksRun=thread.getTotalTasksRun();
        overallTasksRun+=tasksRun;
        tasksRunString.append(tasksRun).append("; ");
        State state=thread.getTaskState();
        sb.setLength(0);
        System.out.println(sb + "[" + thread.getThreadNumber()+ "] "+ state.getState()+ " for "+ (now - state.getStateSince())+ " ms "+ (state.getInfo() != null ? "(" + state.getInfo() + ")" : ""));
        if (!(state.getState().equals(FetcherThread.STATE_IDLE))) {
          allThreadsIdle=false;
        }
        if (((state.equals(FetcherTask.FT_CONNECTING)) || (state.equals(FetcherTask.FT_GETTING)) || (state.equals(FetcherTask.FT_READING))|| (state.equals(FetcherTask.FT_CLOSING))) && ((now - state.getStateSince()) > 160000)) {
          System.out.println("****Restarting Thread " + thread.getThreadNumber());
          threadPool.restartThread(thread.getThreadNumber());
          break;
        }
      }
      lastPeriodBytesRead=overallBytesRead;
      sb.setLength(0);
      addSample(new Sample(overallBytesRead,overallTasksRun,System.currentTimeMillis()));
      int nrHosts=((FetcherTaskQueue)threadPool.getTaskQueue()).getNumHosts();
      int visitedSize=urlVisitedFilter.size();
      int visitedStringSize=urlVisitedFilter.getStringSize();
      double bytesPerSecond=getAverageBytesRead();
      double docsPerSecond=getAverageDocsRead();
      sb.setLength(0);
      System.out.println(sb + "\nBytes total:          " + formatBytes(overallBytesRead)+ "  ("+ formatBytes((long)(((double)overallBytesRead) * 1000 / (System.currentTimeMillis() - startTime)))+ " per second since start)"+ "\nBytes per Second:     "+ formatBytes((int)bytesPerSecond)+ " (50 secs)"+ "\nDocs per Second:      "+ docsPerSecond+ "\nBytes per Thread:     "+ bytesReadString);
      double docsPerSecondTotal=((double)overallTasksRun) * 1000 / (System.currentTimeMillis() - startTime);
      sb.setLength(0);
      System.out.println(sb + "Docs read total:      " + overallTasksRun+ "    Docs/s: "+ fractionFormat.format(docsPerSecondTotal)+ "\nDocs p.thread:        "+ tasksRunString);
      long memUsed=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
      long memFree=Runtime.getRuntime().freeMemory();
      long totalMem=Runtime.getRuntime().totalMemory();
      sb.setLength(0);
      System.out.println(sb + "Mem used:             " + formatBytes(memUsed)+ ", free: "+ formatBytes(memFree)+ "     total VM: "+ totalMem);
      int urlsQueued=messageHandler.getQueued();
      int urlsWaiting=threadPool.getQueueSize();
      boolean isWorkingOnMessage=messageHandler.isWorkingOnMessage();
      int urlsScopeFiltered=urlScopeFilter.getFiltered();
      int urlsVisitedFiltered=urlVisitedFilter.getFiltered();
      int urlsREFiltered=reFilter.getFiltered();
      int urlLengthFiltered=urlLengthFilter.getFiltered();
      sb.setLength(0);
      System.out.println(sb + "URLs queued:          " + urlsQueued+ "     waiting: "+ urlsWaiting);
      sb.setLength(0);
      System.out.println(sb + "Message is being processed: " + isWorkingOnMessage);
      sb.setLength(0);
      System.out.println(sb + "URLs Filtered: length: " + urlLengthFiltered+ "      scope: "+ urlsScopeFiltered+ "     visited: "+ urlsVisitedFiltered+ "      robot.txt: "+ urlsREFiltered);
      sb.setLength(0);
      System.out.println(sb + "Visited size: " + visitedSize+ "; String Size in VisitedFilter: "+ visitedStringSize+ "; Number of Hosts: "+ nrHosts+ "; hosts in Host Manager: "+ hostManager.getSize()+ "\n");
      sb.setLength(0);
      log(sb + "" + now+ ";"+ overallBytesRead+ ";"+ overallTasksRun+ ";"+ urlsQueued+ ";"+ urlsWaiting+ ";"+ isWorkingOnMessage+ ";"+ urlsScopeFiltered+ ";"+ urlsVisitedFiltered+ ";"+ urlsREFiltered+ ";"+ memUsed+ ";"+ memFree+ ";"+ totalMem+ ";"+ nrHosts+ ";"+ visitedSize+ ";"+ visitedStringSize+ ";"+ rawBytesReadString+ ";"+ urlLengthFiltered);
      if (!isWorkingOnMessage && (urlsQueued == 0) && (urlsWaiting == 0)&& allThreadsIdle) {
        nothingReadCount++;
        if (nothingReadCount > 3) {
          SimpleLoggerManager.getInstance().flush();
          System.exit(0);
        }
      }
 else {
        nothingReadCount=0;
      }
      this.setChanged();
      this.notifyObservers();
      monitorRunCount++;
      if (monitorRunCount % 6 == 0) {
        System.runFinalization();
      }
      if (monitorRunCount % 2 == 0) {
        System.gc();
        SimpleLoggerManager.getInstance().flush();
      }
    }
 catch (    Exception e) {
      System.out.println("Monitor: Exception: " + e.getClass().getName());
      e.printStackTrace();
    }
  }
}
