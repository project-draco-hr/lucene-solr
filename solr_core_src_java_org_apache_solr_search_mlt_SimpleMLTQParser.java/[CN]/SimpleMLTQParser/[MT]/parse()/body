{
  String defaultField=req.getSchema().getUniqueKeyField().getName();
  String uniqueValue=localParams.get(QueryParsing.V);
  String[] qf=localParams.getParams("qf");
  SolrIndexSearcher searcher=req.getSearcher();
  Query docIdQuery=createIdQuery(defaultField,uniqueValue);
  Map<String,Float> boostFields=new HashMap<>();
  try {
    TopDocs td=searcher.search(docIdQuery,1);
    if (td.totalHits != 1)     throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error completing MLT request. Could not fetch " + "document with id [" + uniqueValue + "]");
    ScoreDoc[] scoreDocs=td.scoreDocs;
    MoreLikeThis mlt=new MoreLikeThis(req.getSearcher().getIndexReader());
    if (localParams.getInt("mintf") != null)     mlt.setMinTermFreq(localParams.getInt("mintf"));
    if (localParams.getInt("mindf") != null)     mlt.setMinDocFreq(localParams.getInt("mindf"));
    if (localParams.get("minwl") != null)     mlt.setMinWordLen(localParams.getInt("minwl"));
    if (localParams.get("maxwl") != null)     mlt.setMaxWordLen(localParams.getInt("maxwl"));
    if (localParams.get("maxqt") != null)     mlt.setMaxQueryTerms(localParams.getInt("maxqt"));
    if (localParams.get("maxntp") != null)     mlt.setMaxNumTokensParsed(localParams.getInt("maxntp"));
    if (localParams.get("maxdf") != null) {
      mlt.setMaxDocFreq(localParams.getInt("maxdf"));
    }
    if (localParams.get("boost") != null) {
      mlt.setBoost(localParams.getBool("boost"));
      boostFields=SolrPluginUtils.parseFieldBoosts(qf);
    }
    ArrayList<String> fields=new ArrayList<>();
    if (qf != null) {
      for (      String fieldName : qf) {
        if (!StringUtils.isEmpty(fieldName)) {
          String[] strings=splitList.split(fieldName);
          for (          String string : strings) {
            if (!StringUtils.isEmpty(string)) {
              fields.add(string);
            }
          }
        }
      }
    }
 else {
      Map<String,SchemaField> fieldNames=req.getSearcher().getSchema().getFields();
      for (      String fieldName : fieldNames.keySet()) {
        if (fieldNames.get(fieldName).indexed() && fieldNames.get(fieldName).stored())         if (fieldNames.get(fieldName).getType().getNumericType() == null)         fields.add(fieldName);
      }
    }
    if (fields.size() < 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis requires at least one similarity field: qf");
    }
    mlt.setFieldNames(fields.toArray(new String[fields.size()]));
    mlt.setAnalyzer(req.getSchema().getIndexAnalyzer());
    Query rawMLTQuery=mlt.like(scoreDocs[0].doc);
    BooleanQuery boostedMLTQuery=(BooleanQuery)rawMLTQuery;
    if (boostFields.size() > 0) {
      BooleanQuery.Builder newQ=new BooleanQuery.Builder();
      newQ.setDisableCoord(boostedMLTQuery.isCoordDisabled());
      newQ.setMinimumNumberShouldMatch(boostedMLTQuery.getMinimumNumberShouldMatch());
      for (      BooleanClause clause : boostedMLTQuery) {
        Query q=clause.getQuery();
        float originalBoost=1f;
        if (q instanceof BoostQuery) {
          BoostQuery bq=(BoostQuery)q;
          q=bq.getQuery();
          originalBoost=bq.getBoost();
        }
        Float fieldBoost=boostFields.get(((TermQuery)q).getTerm().field());
        q=((fieldBoost != null) ? new BoostQuery(q,fieldBoost * originalBoost) : clause.getQuery());
        newQ.add(q,clause.getOccur());
      }
      boostedMLTQuery=newQ.build();
    }
    BooleanQuery.Builder realMLTQuery=new BooleanQuery.Builder();
    realMLTQuery.setDisableCoord(true);
    realMLTQuery.add(boostedMLTQuery,BooleanClause.Occur.MUST);
    realMLTQuery.add(docIdQuery,BooleanClause.Occur.MUST_NOT);
    return realMLTQuery.build();
  }
 catch (  IOException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error completing MLT request" + e.getMessage());
  }
}
