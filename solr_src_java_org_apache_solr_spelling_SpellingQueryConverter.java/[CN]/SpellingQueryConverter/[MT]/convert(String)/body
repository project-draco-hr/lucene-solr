{
  if (original == null) {
    return Collections.emptyList();
  }
  Collection<Token> result=new ArrayList<Token>();
  Matcher matcher=QUERY_REGEX.matcher(original);
  TokenStream stream;
  while (matcher.find()) {
    String word=matcher.group(0);
    if (word.equals("AND") == false && word.equals("OR") == false) {
      try {
        stream=analyzer.reusableTokenStream("",new StringReader(word));
        TermAttribute termAtt=(TermAttribute)stream.addAttribute(TermAttribute.class);
        FlagsAttribute flagsAtt=(FlagsAttribute)stream.addAttribute(FlagsAttribute.class);
        TypeAttribute typeAtt=(TypeAttribute)stream.addAttribute(TypeAttribute.class);
        PayloadAttribute payloadAtt=(PayloadAttribute)stream.addAttribute(PayloadAttribute.class);
        PositionIncrementAttribute posIncAtt=(PositionIncrementAttribute)stream.addAttribute(PositionIncrementAttribute.class);
        stream.reset();
        while (stream.incrementToken()) {
          Token token=new Token();
          token.setTermBuffer(termAtt.termBuffer(),0,termAtt.termLength());
          token.setStartOffset(matcher.start());
          token.setEndOffset(matcher.end());
          token.setFlags(flagsAtt.getFlags());
          token.setType(typeAtt.type());
          token.setPayload(payloadAtt.getPayload());
          token.setPositionIncrement(posIncAtt.getPositionIncrement());
          result.add(token);
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return result;
}
