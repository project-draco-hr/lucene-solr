{
  String[] randomValues=new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];
  for (int i=0; i < randomValues.length; i++) {
    String randomValue;
    do {
      randomValue=TestUtil.randomSimpleString(random());
    }
 while ("".equals(randomValue));
    randomValues[i]=randomValue;
  }
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  FieldType customType=new FieldType(TextField.TYPE_STORED);
  customType.setStoreTermVectors(true);
  customType.setStoreTermVectorOffsets(true);
  customType.setStoreTermVectorPositions(true);
  int numDocs=randomValues.length * 5;
  int numFields=2 + random().nextInt(5);
  int numTerms=2 + random().nextInt(3);
  List<Doc> docs=new ArrayList<Doc>(numDocs);
  List<Document> documents=new ArrayList<Document>(numDocs);
  Map<String,Set<Integer>> valueToDocId=new HashMap<String,Set<Integer>>();
  for (int i=0; i < numDocs; i++) {
    Document document=new Document();
    String[][] fields=new String[numFields][numTerms];
    for (int j=0; j < numFields; j++) {
      String[] fieldValues=new String[numTerms];
      fieldValues[0]=getRandomValue(randomValues,valueToDocId,i);
      StringBuilder builder=new StringBuilder(fieldValues[0]);
      for (int k=1; k < numTerms; k++) {
        fieldValues[k]=getRandomValue(randomValues,valueToDocId,i);
        builder.append(' ').append(fieldValues[k]);
      }
      document.add(new Field(F,builder.toString(),customType));
      fields[j]=fieldValues;
    }
    docs.add(new Doc(fields));
    documents.add(document);
  }
  writer.addDocuments(documents);
  writer.close();
  IndexReader reader=DirectoryReader.open(dir);
  try {
    int highlightIters=1 + random().nextInt(120 * RANDOM_MULTIPLIER);
    for (int highlightIter=0; highlightIter < highlightIters; highlightIter++) {
      String queryTerm=randomValues[random().nextInt(randomValues.length)];
      int randomHit=valueToDocId.get(queryTerm).iterator().next();
      List<StringBuilder> builders=new ArrayList<StringBuilder>();
      for (      String[] fieldValues : docs.get(randomHit).fieldValues) {
        StringBuilder builder=new StringBuilder();
        boolean hit=false;
        for (int i=0; i < fieldValues.length; i++) {
          if (queryTerm.equals(fieldValues[i])) {
            builder.append("<b>").append(queryTerm).append("</b>");
            hit=true;
          }
 else {
            builder.append(fieldValues[i]);
          }
          if (i != fieldValues.length - 1) {
            builder.append(' ');
          }
        }
        if (hit) {
          builders.add(builder);
        }
      }
      FieldQuery fq=new FieldQuery(tq(queryTerm),true,true);
      FieldTermStack stack=new FieldTermStack(reader,randomHit,F,fq);
      FieldPhraseList fpl=new FieldPhraseList(stack,fq);
      SimpleFragListBuilder sflb=new SimpleFragListBuilder(100);
      FieldFragList ffl=sflb.createFieldFragList(fpl,300);
      SimpleFragmentsBuilder sfb=new SimpleFragmentsBuilder();
      sfb.setDiscreteMultiValueHighlighting(true);
      String[] actualFragments=sfb.createFragments(reader,randomHit,F,ffl,numFields);
      assertEquals(builders.size(),actualFragments.length);
      for (int i=0; i < actualFragments.length; i++) {
        assertEquals(builders.get(i).toString(),actualFragments[i]);
      }
    }
  }
  finally {
    reader.close();
    dir.close();
  }
}
