{
  final FST.Arc<T> startArc=fst.getFirstArc(new FST.Arc<T>());
  final List<FST.Arc<T>> queue=new ArrayList<FST.Arc<T>>();
  queue.add(startArc);
  final Set<Integer> seen=new HashSet<Integer>();
  seen.add(startArc.target);
  out.println("digraph FST {");
  out.println("  rankdir = LR;");
  out.println("  " + startArc.target + " [label=\"\" shape=circle];");
  out.println("  initial [shape=point color=white label=\"\"];");
  out.println("  initial -> " + startArc.target);
  final T NO_OUTPUT=fst.outputs.getNoOutput();
  while (queue.size() != 0) {
    FST.Arc<T> arc=queue.get(queue.size() - 1);
    queue.remove(queue.size() - 1);
    if (fst.targetHasArcs(arc)) {
      final int node=arc.target;
      fst.readFirstTargetArc(arc,arc);
      while (true) {
        if (!seen.contains(arc.target)) {
          final String shape;
          if (arc.target == -1) {
            shape="doublecircle";
          }
 else {
            shape="circle";
          }
          out.println("  " + arc.target + " [shape="+ shape+ "];");
          seen.add(arc.target);
          queue.add(new FST.Arc<T>().copyFrom(arc));
        }
        String outs;
        if (arc.output != NO_OUTPUT) {
          outs="/" + fst.outputs.outputToString(arc.output);
        }
 else {
          outs="";
        }
        final char cl;
        if (arc.label == FST.END_LABEL) {
          cl='~';
        }
 else {
          cl=(char)arc.label;
        }
        out.println("  " + node + " -> "+ arc.target+ " [label=\""+ cl+ outs+ "\"]");
        if (arc.isLast()) {
          break;
        }
 else {
          fst.readNextArc(arc);
        }
      }
    }
  }
  out.println("}");
}
