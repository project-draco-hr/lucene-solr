{
  if (endIndex <= startIndex)   return;
  int oldlen=wlen;
  ensureCapacity(endIndex);
  int startWord=(int)(startIndex >> 6);
  int endWord=(int)(endIndex >> 6);
  long startmask=-1L << startIndex;
  long endmask=(endIndex & 0x3c) == 0 ? 0 : -1L >>> (64 - endIndex);
  if (this.wlen <= endWord) {
    this.wlen=endWord;
    if (endmask != 0)     this.wlen++;
  }
  if (startWord == endWord) {
    bits[startWord]^=(startmask & endmask);
    return;
  }
  bits[startWord]^=startmask;
  int middle=Math.min(oldlen,endWord);
  for (int i=startWord + 1; i < middle; i++) {
    bits[i]=~bits[i];
  }
  if (endWord > middle) {
    Arrays.fill(bits,middle,endWord,-1L);
  }
  if (endmask != 0) {
    bits[endWord]^=endmask;
  }
}
