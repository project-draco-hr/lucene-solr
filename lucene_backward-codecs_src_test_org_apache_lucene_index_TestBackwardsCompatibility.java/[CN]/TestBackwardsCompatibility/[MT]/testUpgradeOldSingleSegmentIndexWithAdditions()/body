{
  for (  String name : oldSingleSegmentNames) {
    if (VERBOSE) {
      System.out.println("testUpgradeOldSingleSegmentIndexWithAdditions: index=" + name);
    }
    Directory dir=newDirectory(oldIndexDirs.get(name));
    if (dir instanceof MockDirectoryWrapper) {
      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);
    }
    assertEquals("Original index must be single segment",1,getNumberOfSegments(dir));
    int id=40;
    RAMDirectory ramDir=new RAMDirectory();
    for (int i=0; i < 3; i++) {
      MergePolicy mp=random().nextBoolean() ? newLogMergePolicy() : newTieredMergePolicy();
      IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(mp);
      IndexWriter w=new IndexWriter(ramDir,iwc);
      for (int j=0; j < RANDOM_MULTIPLIER * random().nextInt(30); j++) {
        addDoc(w,id++);
      }
      try {
        w.commit();
      }
  finally {
        w.close();
      }
    }
    MergePolicy mp=random().nextBoolean() ? newLogMergePolicy() : newTieredMergePolicy();
    IndexWriterConfig iwc=new IndexWriterConfig(null).setMergePolicy(mp);
    IndexWriter w=new IndexWriter(dir,iwc);
    w.addIndexes(ramDir);
    try {
      w.commit();
    }
  finally {
      w.close();
    }
    final int origSegCount=getNumberOfSegments(dir);
    assertEquals(1,DirectoryReader.listCommits(dir).size());
    newIndexUpgrader(dir).upgrade();
    final int segCount=checkAllSegmentsUpgraded(dir);
    assertEquals("Index must still contain the same number of segments, as only one segment was upgraded and nothing else merged",origSegCount,segCount);
    dir.close();
  }
}
