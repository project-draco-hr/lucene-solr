{
  Pattern constantPattern=Pattern.compile("LUCENE_(\\d+)_(\\d+)_(\\d+)(_ALPHA|_BETA)?");
  List<String> expectedVersions=new ArrayList<>();
  for (  java.lang.reflect.Field field : Version.class.getDeclaredFields()) {
    if (Modifier.isStatic(field.getModifiers()) && field.getType() == Version.class) {
      Version v=(Version)field.get(Version.class);
      if (v.equals(Version.LATEST))       continue;
      Matcher constant=constantPattern.matcher(field.getName());
      if (constant.matches() == false)       continue;
      expectedVersions.add(v.toString() + "-cfs");
    }
  }
  Version lastPrevMajorVersion=null;
  for (  java.lang.reflect.Field field : Version.class.getDeclaredFields()) {
    if (Modifier.isStatic(field.getModifiers()) && field.getType() == Version.class) {
      Version v=(Version)field.get(Version.class);
      Matcher constant=constantPattern.matcher(field.getName());
      if (constant.matches() == false)       continue;
      if (v.major == Version.LATEST.major - 1 && (lastPrevMajorVersion == null || v.onOrAfter(lastPrevMajorVersion))) {
        lastPrevMajorVersion=v;
      }
    }
  }
  assertNotNull(lastPrevMajorVersion);
  expectedVersions.remove(lastPrevMajorVersion.toString() + "-cfs");
  Collections.sort(expectedVersions);
  List<String> testedVersions=new ArrayList<>();
  for (  String testedVersion : oldNames) {
    if (testedVersion.endsWith("-cfs") == false)     continue;
    testedVersions.add(testedVersion);
  }
  Collections.sort(testedVersions);
  int i=0;
  int j=0;
  List<String> missingFiles=new ArrayList<>();
  List<String> extraFiles=new ArrayList<>();
  while (i < expectedVersions.size() && j < testedVersions.size()) {
    String expectedVersion=expectedVersions.get(i);
    String testedVersion=testedVersions.get(j);
    int compare=expectedVersion.compareTo(testedVersion);
    if (compare == 0) {
      ++i;
      ++j;
    }
 else     if (compare < 0) {
      missingFiles.add(expectedVersion);
      ++i;
    }
 else {
      extraFiles.add(testedVersion);
      ++j;
    }
  }
  while (i < expectedVersions.size()) {
    missingFiles.add(expectedVersions.get(i));
    ++i;
  }
  while (j < testedVersions.size()) {
    missingFiles.add(testedVersions.get(j));
    ++j;
  }
  if (missingFiles.size() <= 1 && extraFiles.isEmpty()) {
    return;
  }
  StringBuffer msg=new StringBuffer();
  if (missingFiles.size() > 1) {
    msg.append("Missing backcompat test files:\n");
    for (    String missingFile : missingFiles) {
      msg.append("  " + missingFile + "\n");
    }
  }
  if (extraFiles.isEmpty() == false) {
    msg.append("Extra backcompat test files:\n");
    for (    String extraFile : extraFiles) {
      msg.append("  " + extraFile + "\n");
    }
  }
  fail(msg.toString());
}
