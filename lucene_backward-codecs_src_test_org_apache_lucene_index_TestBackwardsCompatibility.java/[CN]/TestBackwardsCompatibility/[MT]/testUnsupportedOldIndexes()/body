{
  for (int i=0; i < unsupportedNames.length; i++) {
    if (VERBOSE) {
      System.out.println("TEST: index " + unsupportedNames[i]);
    }
    Path oldIndexDir=createTempDir(unsupportedNames[i]);
    TestUtil.unzip(getDataPath("unsupported." + unsupportedNames[i] + ".zip"),oldIndexDir);
    BaseDirectoryWrapper dir=newFSDirectory(oldIndexDir);
    dir.setCheckIndexOnClose(false);
    IndexReader reader=null;
    IndexWriter writer=null;
    try {
      reader=DirectoryReader.open(dir);
      fail("DirectoryReader.open should not pass for " + unsupportedNames[i]);
    }
 catch (    IndexFormatTooOldException e) {
    }
 finally {
      if (reader != null)       reader.close();
      reader=null;
    }
    try {
      writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setCommitOnClose(false));
      fail("IndexWriter creation should not pass for " + unsupportedNames[i]);
    }
 catch (    IndexFormatTooOldException e) {
      if (VERBOSE) {
        System.out.println("TEST: got expected exc:");
        e.printStackTrace(System.out);
      }
      assertTrue("got exc message: " + e.getMessage(),e.getMessage().indexOf("path=\"") != -1);
    }
 finally {
      if (writer != null) {
        try {
          writer.commit();
        }
  finally {
          writer.close();
        }
      }
      writer=null;
    }
    ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);
    CheckIndex checker=new CheckIndex(dir);
    checker.setInfoStream(new PrintStream(bos,false,IOUtils.UTF_8));
    CheckIndex.Status indexStatus=checker.checkIndex();
    assertFalse(indexStatus.clean);
    assertTrue(bos.toString(IOUtils.UTF_8).contains(IndexFormatTooOldException.class.getName()));
    dir.close();
    IOUtils.rm(oldIndexDir);
  }
}
