{
  IndexReader reader=DirectoryReader.open(dir);
  IndexSearcher searcher=newSearcher(reader);
  TestUtil.checkIndex(dir);
  final boolean is40Index=MultiFields.getMergedFieldInfos(reader).fieldInfo("content5") != null;
  final boolean is42Index=MultiFields.getMergedFieldInfos(reader).fieldInfo("dvSortedSet") != null;
  final boolean is49Index=MultiFields.getMergedFieldInfos(reader).fieldInfo("dvSortedNumeric") != null;
  final boolean hasPoints=MultiFields.getMergedFieldInfos(reader).fieldInfo("intPoint1d") != null;
  assert is40Index;
  final Bits liveDocs=MultiFields.getLiveDocs(reader);
  for (int i=0; i < 35; i++) {
    if (liveDocs.get(i)) {
      Document d=reader.document(i);
      List<IndexableField> fields=d.getFields();
      boolean isProxDoc=d.getField("content3") == null;
      if (isProxDoc) {
        final int numFields=is40Index ? 7 : 5;
        assertEquals(numFields,fields.size());
        IndexableField f=d.getField("id");
        assertEquals("" + i,f.stringValue());
        f=d.getField("utf8");
        assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd",f.stringValue());
        f=d.getField("autf8");
        assertEquals("Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd",f.stringValue());
        f=d.getField("content2");
        assertEquals("here is more content with aaa aaa aaa",f.stringValue());
        f=d.getField("fie\u2C77ld");
        assertEquals("field with non-ascii name",f.stringValue());
      }
      Fields tfvFields=reader.getTermVectors(i);
      assertNotNull("i=" + i,tfvFields);
      Terms tfv=tfvFields.terms("utf8");
      assertNotNull("docID=" + i + " index="+ oldName,tfv);
    }
 else {
      assertEquals(7,i);
    }
  }
  if (is40Index) {
    NumericDocValues dvByte=MultiDocValues.getNumericValues(reader,"dvByte");
    BinaryDocValues dvBytesDerefFixed=MultiDocValues.getBinaryValues(reader,"dvBytesDerefFixed");
    BinaryDocValues dvBytesDerefVar=MultiDocValues.getBinaryValues(reader,"dvBytesDerefVar");
    SortedDocValues dvBytesSortedFixed=MultiDocValues.getSortedValues(reader,"dvBytesSortedFixed");
    SortedDocValues dvBytesSortedVar=MultiDocValues.getSortedValues(reader,"dvBytesSortedVar");
    BinaryDocValues dvBytesStraightFixed=MultiDocValues.getBinaryValues(reader,"dvBytesStraightFixed");
    BinaryDocValues dvBytesStraightVar=MultiDocValues.getBinaryValues(reader,"dvBytesStraightVar");
    NumericDocValues dvDouble=MultiDocValues.getNumericValues(reader,"dvDouble");
    NumericDocValues dvFloat=MultiDocValues.getNumericValues(reader,"dvFloat");
    NumericDocValues dvInt=MultiDocValues.getNumericValues(reader,"dvInt");
    NumericDocValues dvLong=MultiDocValues.getNumericValues(reader,"dvLong");
    NumericDocValues dvPacked=MultiDocValues.getNumericValues(reader,"dvPacked");
    NumericDocValues dvShort=MultiDocValues.getNumericValues(reader,"dvShort");
    SortedSetDocValues dvSortedSet=null;
    if (is42Index) {
      dvSortedSet=MultiDocValues.getSortedSetValues(reader,"dvSortedSet");
    }
    SortedNumericDocValues dvSortedNumeric=null;
    if (is49Index) {
      dvSortedNumeric=MultiDocValues.getSortedNumericValues(reader,"dvSortedNumeric");
    }
    for (int i=0; i < 35; i++) {
      int id=Integer.parseInt(reader.document(i).get("id"));
      assertEquals(i,dvByte.nextDoc());
      assertEquals(id,dvByte.longValue());
      byte bytes[]=new byte[]{(byte)(id >>> 24),(byte)(id >>> 16),(byte)(id >>> 8),(byte)id};
      BytesRef expectedRef=new BytesRef(bytes);
      assertEquals(i,dvBytesDerefFixed.nextDoc());
      BytesRef term=dvBytesDerefFixed.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvBytesDerefVar.nextDoc());
      term=dvBytesDerefVar.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvBytesSortedFixed.nextDoc());
      term=dvBytesSortedFixed.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvBytesSortedVar.nextDoc());
      term=dvBytesSortedVar.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvBytesStraightFixed.nextDoc());
      term=dvBytesStraightFixed.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvBytesStraightVar.nextDoc());
      term=dvBytesStraightVar.binaryValue();
      assertEquals(expectedRef,term);
      assertEquals(i,dvDouble.nextDoc());
      assertEquals((double)id,Double.longBitsToDouble(dvDouble.longValue()),0D);
      assertEquals(i,dvFloat.nextDoc());
      assertEquals((float)id,Float.intBitsToFloat((int)dvFloat.longValue()),0F);
      assertEquals(i,dvInt.nextDoc());
      assertEquals(id,dvInt.longValue());
      assertEquals(i,dvLong.nextDoc());
      assertEquals(id,dvLong.longValue());
      assertEquals(i,dvPacked.nextDoc());
      assertEquals(id,dvPacked.longValue());
      assertEquals(i,dvShort.nextDoc());
      assertEquals(id,dvShort.longValue());
      if (is42Index) {
        assertEquals(i,dvSortedSet.nextDoc());
        long ord=dvSortedSet.nextOrd();
        assertEquals(SortedSetDocValues.NO_MORE_ORDS,dvSortedSet.nextOrd());
        term=dvSortedSet.lookupOrd(ord);
        assertEquals(expectedRef,term);
      }
      if (is49Index) {
        assertEquals(i,dvSortedNumeric.nextDoc());
        assertEquals(1,dvSortedNumeric.docValueCount());
        assertEquals(id,dvSortedNumeric.nextValue());
      }
    }
  }
  ScoreDoc[] hits=searcher.search(new TermQuery(new Term(new String("content"),"aaa")),1000).scoreDocs;
  Document d=searcher.getIndexReader().document(hits[0].doc);
  assertEquals("didn't get the right document first","0",d.get("id"));
  doTestHits(hits,34,searcher.getIndexReader());
  if (is40Index) {
    hits=searcher.search(new TermQuery(new Term(new String("content5"),"aaa")),1000).scoreDocs;
    doTestHits(hits,34,searcher.getIndexReader());
    hits=searcher.search(new TermQuery(new Term(new String("content6"),"aaa")),1000).scoreDocs;
    doTestHits(hits,34,searcher.getIndexReader());
  }
  hits=searcher.search(new TermQuery(new Term("utf8","\u0000")),1000).scoreDocs;
  assertEquals(34,hits.length);
  hits=searcher.search(new TermQuery(new Term(new String("utf8"),"lu\uD834\uDD1Ece\uD834\uDD60ne")),1000).scoreDocs;
  assertEquals(34,hits.length);
  hits=searcher.search(new TermQuery(new Term("utf8","ab\ud917\udc17cd")),1000).scoreDocs;
  assertEquals(34,hits.length);
  if (hasPoints) {
    doTestHits(searcher.search(IntPoint.newRangeQuery("intPoint1d",0,34),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(IntPoint.newRangeQuery("intPoint2d",new int[]{0,0},new int[]{34,68}),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(FloatPoint.newRangeQuery("floatPoint1d",0f,34f),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(FloatPoint.newRangeQuery("floatPoint2d",new float[]{0f,0f},new float[]{34f,68f}),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(LongPoint.newRangeQuery("longPoint1d",0,34),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(LongPoint.newRangeQuery("longPoint2d",new long[]{0,0},new long[]{34,68}),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(DoublePoint.newRangeQuery("doublePoint1d",0.0,34.0),1000).scoreDocs,34,searcher.getIndexReader());
    doTestHits(searcher.search(DoublePoint.newRangeQuery("doublePoint2d",new double[]{0.0,0.0},new double[]{34.0,68.0}),1000).scoreDocs,34,searcher.getIndexReader());
    byte[] bytes1=new byte[4];
    byte[] bytes2=new byte[]{0,0,0,(byte)34};
    doTestHits(searcher.search(BinaryPoint.newRangeQuery("binaryPoint1d",bytes1,bytes2),1000).scoreDocs,34,searcher.getIndexReader());
    byte[] bytes3=new byte[]{0,0,0,(byte)68};
    doTestHits(searcher.search(BinaryPoint.newRangeQuery("binaryPoint2d",new byte[][]{bytes1,bytes1},new byte[][]{bytes2,bytes3}),1000).scoreDocs,34,searcher.getIndexReader());
  }
  reader.close();
}
