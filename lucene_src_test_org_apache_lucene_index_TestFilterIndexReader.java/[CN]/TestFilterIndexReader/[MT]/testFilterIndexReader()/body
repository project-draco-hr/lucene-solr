{
  Random random=newRandom();
  RAMDirectory directory=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()));
  Document d1=new Document();
  d1.add(new Field("default","one two",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(d1);
  Document d2=new Document();
  d2.add(new Field("default","one three",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(d2);
  Document d3=new Document();
  d3.add(new Field("default","two four",Field.Store.YES,Field.Index.ANALYZED));
  writer.addDocument(d3);
  writer.close();
  RAMDirectory target=new MockRAMDirectory();
  writer=new IndexWriter(target,newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()));
  IndexReader reader=new TestReader(IndexReader.open(directory,true));
  writer.addIndexes(reader);
  writer.close();
  reader.close();
  reader=IndexReader.open(target,true);
  assertTrue(reader.isOptimized());
  TermsEnum terms=MultiFields.getTerms(reader,"default").iterator();
  while (terms.next() != null) {
    assertTrue(terms.term().utf8ToString().indexOf('e') != -1);
  }
  assertEquals(TermsEnum.SeekStatus.FOUND,terms.seek(new BytesRef("one")));
  DocsAndPositionsEnum positions=terms.docsAndPositions(MultiFields.getDeletedDocs(reader),null);
  while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {
    assertTrue((positions.docID() % 2) == 1);
  }
  reader.close();
  directory.close();
}
