{
  log("#hits = " + h1.size());
  assertEquals("queries should have same #hits",h1.size(),h2customNeutral.size());
  assertEquals("queries should have same #hits",h1.size(),h3CustomMul.size());
  assertEquals("queries should have same #hits",h1.size(),h4CustomAdd.size());
  assertEquals("queries should have same #hits",h1.size(),h5CustomMulAdd.size());
  QueryUtils.check(random(),q1,s,rarely());
  QueryUtils.check(random(),q2,s,rarely());
  QueryUtils.check(random(),q3,s,rarely());
  QueryUtils.check(random(),q4,s,rarely());
  QueryUtils.check(random(),q5,s,rarely());
  for (  final Integer doc : h1.keySet()) {
    log("doc = " + doc);
    float fieldScore=expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));
    log("fieldScore = " + fieldScore);
    assertTrue("fieldScore should not be 0",fieldScore > 0);
    float score1=h1.get(doc);
    logResult("score1=",s,q1,doc,score1);
    float score2=h2customNeutral.get(doc);
    logResult("score2=",s,q2,doc,score2);
    assertEquals("same score (just boosted) for neutral",boost * score1,score2,CheckHits.explainToleranceDelta(boost * score1,score2));
    float score3=h3CustomMul.get(doc);
    logResult("score3=",s,q3,doc,score3);
    assertEquals("new score for custom mul",boost * fieldScore * score1,score3,CheckHits.explainToleranceDelta(boost * fieldScore * score1,score3));
    float score4=h4CustomAdd.get(doc);
    logResult("score4=",s,q4,doc,score4);
    assertEquals("new score for custom add",boost * (fieldScore + score1),score4,CheckHits.explainToleranceDelta(boost * (fieldScore + score1),score4));
    float score5=h5CustomMulAdd.get(doc);
    logResult("score5=",s,q5,doc,score5);
    assertEquals("new score for custom mul add",boost * fieldScore * (score1 + fieldScore),score5,CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore),score5));
  }
}
