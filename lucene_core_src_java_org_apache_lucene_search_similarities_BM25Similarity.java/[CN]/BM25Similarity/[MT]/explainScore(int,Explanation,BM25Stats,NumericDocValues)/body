{
  Explanation result=new Explanation();
  result.setDescription("score(doc=" + doc + ",freq="+ freq+ "), product of:");
  Explanation boostExpl=new Explanation(stats.queryBoost * stats.topLevelBoost,"boost");
  if (boostExpl.getValue() != 1.0f)   result.addDetail(boostExpl);
  result.addDetail(stats.idf);
  Explanation tfNormExpl=new Explanation();
  tfNormExpl.setDescription("tfNorm, computed from:");
  tfNormExpl.addDetail(freq);
  tfNormExpl.addDetail(new Explanation(k1,"parameter k1"));
  if (norms == null) {
    tfNormExpl.addDetail(new Explanation(0,"parameter b (norms omitted for field)"));
    tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));
  }
 else {
    float doclen=decodeNormValue((byte)norms.get(doc));
    tfNormExpl.addDetail(new Explanation(b,"parameter b"));
    tfNormExpl.addDetail(new Explanation(stats.avgdl,"avgFieldLength"));
    tfNormExpl.addDetail(new Explanation(doclen,"fieldLength"));
    tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen / stats.avgdl)));
  }
  result.addDetail(tfNormExpl);
  result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());
  return result;
}
