{
  Map<String,Object> propMap=Utils.makeMap(Overseer.QUEUE_OPERATION,CollectionParams.CollectionAction.CREATE.toLower(),ZkStateReader.REPLICATION_FACTOR,replicationFactor.toString(),"name",COLLECTION_NAME,"collection.configName",CONFIG_NAME,OverseerCollectionMessageHandler.NUM_SLICES,numberOfSlices.toString(),ZkStateReader.MAX_SHARDS_PER_NODE,maxShardsPerNode.toString());
  if (sendCreateNodeList) {
    propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,(createNodeList != null) ? StrUtils.join(createNodeList,',') : null);
    if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {
      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE,createNodeSetShuffle);
    }
  }
  ZkNodeProps props=new ZkNodeProps(propMap);
  QueueEvent qe=new QueueEvent("id",Utils.toJSON(props),null){
    @Override public void setBytes(    byte[] bytes){
      lastProcessMessageResult=SolrResponse.deserialize(bytes);
    }
  }
;
  queue.add(qe);
}
