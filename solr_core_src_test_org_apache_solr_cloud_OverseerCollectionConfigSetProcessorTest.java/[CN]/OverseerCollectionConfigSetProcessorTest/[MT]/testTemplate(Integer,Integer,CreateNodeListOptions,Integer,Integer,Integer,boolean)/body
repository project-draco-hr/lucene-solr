{
  assertTrue("Wrong usage of testTemplate. numberOfNodesToCreateOn " + numberOfNodesToCreateOn + " is not allowed to be higher than numberOfNodes "+ numberOfNodes,numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());
  assertTrue("Wrong usage of testTemplage. createNodeListOption has to be " + CreateNodeListOptions.SEND + " when numberOfNodes and numberOfNodesToCreateOn are unequal",((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));
  Set<String> liveNodes=commonMocks(numberOfNodes);
  List<String> createNodeList=new ArrayList<>();
  int i=0;
  for (  String node : liveNodes) {
    if (i++ < numberOfNodesToCreateOn) {
      createNodeList.add(node);
    }
  }
  if (random().nextBoolean())   Collections.shuffle(createNodeList,OverseerCollectionMessageHandler.RANDOM);
  List<SubmitCapture> submitCaptures=null;
  if (collectionExceptedToBeCreated) {
    submitCaptures=mockShardHandlerForCreateJob(numberOfSlices,replicationFactor);
  }
  replay(workQueueMock);
  replay(solrZkClientMock);
  replay(zkStateReaderMock);
  replay(clusterStateMock);
  replay(shardHandlerFactoryMock);
  replay(shardHandlerMock);
  log.info("clusterstate " + clusterStateMock.hashCode());
  startComponentUnderTest();
  final List<String> createNodeListToSend=((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);
  final boolean sendCreateNodeList=(createNodeListOption != CreateNodeListOptions.DONT_SEND);
  final boolean dontShuffleCreateNodeSet=(createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();
  issueCreateJob(numberOfSlices,replicationFactor,maxShardsPerNode,createNodeListToSend,sendCreateNodeList,!dontShuffleCreateNodeSet);
  waitForEmptyQueue(10000);
  if (collectionExceptedToBeCreated) {
    assertNotNull(lastProcessMessageResult.getResponse().toString(),lastProcessMessageResult);
  }
  verify(shardHandlerFactoryMock);
  verify(shardHandlerMock);
  if (collectionExceptedToBeCreated) {
    verifySubmitCaptures(submitCaptures,numberOfSlices,replicationFactor,createNodeList,dontShuffleCreateNodeSet);
  }
}
