{
  if (!input.incrementToken()) {
    return false;
  }
  int startOffset=0;
  int endOffset=0;
  int posLen=0;
  if (posIncAtt != null) {
    pos+=posIncAtt.getPositionIncrement();
    if (pos == -1) {
      throw new IllegalStateException("first posInc must be > 0");
    }
  }
  if (offsetAtt != null) {
    startOffset=offsetAtt.startOffset();
    endOffset=offsetAtt.endOffset();
    if (startOffset < 0) {
      throw new IllegalStateException(name + ": startOffset=" + startOffset+ " is < 0");
    }
    if (endOffset < 0) {
      throw new IllegalStateException(name + ": endOffset=" + endOffset+ " is < 0");
    }
    if (endOffset < startOffset) {
      throw new IllegalStateException(name + ": startOffset=" + startOffset+ " is > endOffset="+ endOffset+ " pos="+ pos+ "; token="+ termAtt);
    }
  }
  posLen=posLenAtt == null ? 1 : posLenAtt.getPositionLength();
  if (offsetAtt != null && posIncAtt != null) {
    if (!posToStartOffset.containsKey(pos)) {
      posToStartOffset.put(pos,startOffset);
    }
 else {
      final int oldStartOffset=posToStartOffset.get(pos);
      if (oldStartOffset != startOffset) {
        throw new IllegalStateException(name + ": inconsistent startOffset at pos=" + pos+ ": "+ oldStartOffset+ " vs "+ startOffset+ "; token="+ termAtt);
      }
    }
    final int endPos=pos + posLen;
    if (!posToEndOffset.containsKey(endPos)) {
      posToEndOffset.put(endPos,endOffset);
    }
 else {
      final int oldEndOffset=posToEndOffset.get(endPos);
      if (oldEndOffset != endOffset) {
        throw new IllegalStateException(name + ": inconsistent endOffset at pos=" + endPos+ ": "+ oldEndOffset+ " vs "+ endOffset+ "; token="+ termAtt);
      }
    }
  }
  return true;
}
