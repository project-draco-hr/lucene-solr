{
  if (!input.incrementToken()) {
    return false;
  }
  if (posIncAtt != null && offsetAtt != null) {
    pos+=posIncAtt.getPositionIncrement();
    if (pos == -1) {
      throw new IllegalStateException("first posInc must be > 0");
    }
    final int startOffset=offsetAtt.startOffset();
    final int endOffset=offsetAtt.endOffset();
    final int posLen=posLenAtt == null ? 1 : posLenAtt.getPositionLength();
    if (!posToStartOffset.containsKey(pos)) {
      posToStartOffset.put(pos,startOffset);
      System.out.println("  + s " + pos + " -> "+ startOffset);
    }
 else {
      System.out.println("  + vs " + pos + " -> "+ startOffset);
      final int oldStartOffset=posToStartOffset.get(pos);
      if (oldStartOffset != startOffset) {
        throw new IllegalStateException(name + ": inconsistent startOffset as pos=" + pos+ ": "+ oldStartOffset+ " vs "+ startOffset+ "; token="+ termAtt);
      }
    }
    final int endPos=pos + posLen;
    if (!posToEndOffset.containsKey(endPos)) {
      posToEndOffset.put(endPos,endOffset);
      System.out.println("  + e " + endPos + " -> "+ endOffset);
    }
 else {
      System.out.println("  + ve " + endPos + " -> "+ endOffset);
      final int oldEndOffset=posToEndOffset.get(endPos);
      if (oldEndOffset != endOffset) {
        throw new IllegalStateException(name + ": inconsistent endOffset as pos=" + endPos+ ": "+ oldEndOffset+ " vs "+ endOffset+ "; token="+ termAtt);
      }
    }
  }
  return true;
}
