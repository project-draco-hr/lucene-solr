{
  final int frontier=1 << Lucene70DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;
  for (int maxDoc=frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {
    final Directory dir=newDirectory();
    IndexWriter w=new IndexWriter(dir,newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));
    RAMFile buffer=new RAMFile();
    RAMOutputStream out=new RAMOutputStream(buffer,false);
    Document doc=new Document();
    SortedNumericDocValuesField field1=new SortedNumericDocValuesField("snum",0L);
    doc.add(field1);
    SortedNumericDocValuesField field2=new SortedNumericDocValuesField("snum",0L);
    doc.add(field2);
    for (int i=0; i < maxDoc; ++i) {
      long s1=random().nextInt(100);
      long s2=random().nextInt(100);
      field1.setLongValue(s1);
      field2.setLongValue(s2);
      w.addDocument(doc);
      out.writeVLong(Math.min(s1,s2));
      out.writeVLong(Math.max(s1,s2));
    }
    out.close();
    w.forceMerge(1);
    DirectoryReader r=DirectoryReader.open(w);
    w.close();
    LeafReader sr=getOnlyLeafReader(r);
    assertEquals(maxDoc,sr.maxDoc());
    SortedNumericDocValues values=sr.getSortedNumericDocValues("snum");
    assertNotNull(values);
    RAMInputStream in=new RAMInputStream("",buffer);
    for (int i=0; i < maxDoc; ++i) {
      assertEquals(i,values.nextDoc());
      assertEquals(2,values.docValueCount());
      assertEquals(in.readVLong(),values.nextValue());
      assertEquals(in.readVLong(),values.nextValue());
    }
    r.close();
    dir.close();
  }
}
