{
  Analyzer analyzer=context.getAnalyzer();
  if (!TokenizerChain.class.isInstance(analyzer)) {
    try (TokenStream tokenStream=analyzer.tokenStream(context.getFieldName(),value)){
      NamedList<List<NamedList>> namedList=new NamedList<>();
      namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(analyzeTokenStream(tokenStream),context));
      return namedList;
    }
 catch (    IOException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
    }
  }
  TokenizerChain tokenizerChain=(TokenizerChain)analyzer;
  CharFilterFactory[] cfiltfacs=tokenizerChain.getCharFilterFactories();
  TokenizerFactory tfac=tokenizerChain.getTokenizerFactory();
  TokenFilterFactory[] filtfacs=tokenizerChain.getTokenFilterFactories();
  NamedList<Object> namedList=new NamedList<>();
  if (cfiltfacs != null) {
    String source=value;
    for (    CharFilterFactory cfiltfac : cfiltfacs) {
      Reader reader=new StringReader(source);
      reader=cfiltfac.create(reader);
      source=writeCharStream(namedList,reader);
    }
  }
  TokenStream tokenStream=tfac.create();
  try {
    ((Tokenizer)tokenStream).setReader(tokenizerChain.initReader(null,new StringReader(value)));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  List<AttributeSource> tokens=analyzeTokenStream(tokenStream);
  namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(tokens,context));
  ListBasedTokenStream listBasedTokenStream=new ListBasedTokenStream(tokens);
  for (  TokenFilterFactory tokenFilterFactory : filtfacs) {
    for (    final AttributeSource tok : tokens) {
      tok.getAttribute(TokenTrackingAttribute.class).freezeStage();
    }
    tokenStream=tokenFilterFactory.create(listBasedTokenStream);
    tokens=analyzeTokenStream(tokenStream);
    namedList.add(tokenStream.getClass().getName(),convertTokensToNamedLists(tokens,context));
    listBasedTokenStream=new ListBasedTokenStream(tokens);
  }
  return namedList;
}
