{
  TermsEnum termEnum=terms.iterator(null);
  TermsEnum memTermEnum=memTerms.iterator(null);
  while (termEnum.next() != null) {
    assertNotNull(memTermEnum.next());
    assertThat(termEnum.totalTermFreq(),equalTo(memTermEnum.totalTermFreq()));
    DocsAndPositionsEnum docsPosEnum=termEnum.docsAndPositions(null,null,0);
    DocsAndPositionsEnum memDocsPosEnum=memTermEnum.docsAndPositions(null,null,0);
    String currentTerm=termEnum.term().utf8ToString();
    assertThat("Token mismatch for field: " + field_name,currentTerm,equalTo(memTermEnum.term().utf8ToString()));
    docsPosEnum.nextDoc();
    memDocsPosEnum.nextDoc();
    int freq=docsPosEnum.freq();
    assertThat(freq,equalTo(memDocsPosEnum.freq()));
    for (int i=0; i < freq; i++) {
      String failDesc=" (field:" + field_name + " term:"+ currentTerm+ ")";
      int memPos=memDocsPosEnum.nextPosition();
      int pos=docsPosEnum.nextPosition();
      assertThat("Position test failed" + failDesc,memPos,equalTo(pos));
      assertThat("Start offset test failed" + failDesc,memDocsPosEnum.startOffset(),equalTo(docsPosEnum.startOffset()));
      assertThat("End offset test failed" + failDesc,memDocsPosEnum.endOffset(),equalTo(docsPosEnum.endOffset()));
      assertThat("Missing payload test failed" + failDesc,docsPosEnum.getPayload(),equalTo(null));
    }
  }
  assertNull("Still some tokens not processed",memTermEnum.next());
}
