{
  TempPostingsWriterBase docsWriter=null;
  TempPostingsWriterBase pulsingWriterInner=null;
  TempPostingsWriterBase pulsingWriter=null;
  boolean success=false;
  try {
    docsWriter=new TempPostingsWriter(state);
    pulsingWriterInner=new TempPulsingPostingsWriter(state,2,docsWriter);
    pulsingWriter=new TempPulsingPostingsWriter(state,1,pulsingWriterInner);
    FieldsConsumer ret=new TempBlockTreeTermsWriter(state,pulsingWriter,TempBlockTreeTermsWriter.DEFAULT_MIN_BLOCK_SIZE,TempBlockTreeTermsWriter.DEFAULT_MAX_BLOCK_SIZE);
    success=true;
    return ret;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(docsWriter,pulsingWriterInner,pulsingWriter);
    }
  }
}
