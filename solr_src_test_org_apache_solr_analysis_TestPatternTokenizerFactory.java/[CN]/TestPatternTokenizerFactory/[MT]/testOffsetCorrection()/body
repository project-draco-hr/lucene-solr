{
  final String INPUT="G&uuml;nther G&uuml;nther is here";
  MappingCharFilterFactory cfFactory=new MappingCharFilterFactory();
  List<String> mappingRules=new ArrayList<String>();
  mappingRules.add("\"&uuml;\" => \"??\"");
  NormalizeCharMap normMap=new NormalizeCharMap();
  cfFactory.parseRules(mappingRules,normMap);
  CharStream charStream=new MappingCharFilter(normMap,CharReader.get(new StringReader(INPUT)));
  Map<String,String> args=new HashMap<String,String>();
  args.put(PatternTokenizerFactory.PATTERN,"[,;/\\s]+");
  PatternTokenizerFactory tokFactory=new PatternTokenizerFactory();
  tokFactory.init(args);
  TokenStream stream=tokFactory.create(charStream);
  assertTokenStreamContents(stream,new String[]{"G??nther","G??nther","is","here"},new int[]{0,13,26,29},new int[]{12,25,28,33});
  charStream=new MappingCharFilter(normMap,CharReader.get(new StringReader(INPUT)));
  args.put(PatternTokenizerFactory.PATTERN,"G??nther");
  args.put(PatternTokenizerFactory.GROUP,"0");
  tokFactory=new PatternTokenizerFactory();
  tokFactory.init(args);
  stream=tokFactory.create(charStream);
  assertTokenStreamContents(stream,new String[]{"G??nther","G??nther"},new int[]{0,13},new int[]{12,25});
}
