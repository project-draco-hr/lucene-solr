{
  BitSet a0=null;
  LongBitSet b0=null;
  for (int i=0; i < iter; i++) {
    int sz=_TestUtil.nextInt(random(),2,maxSize);
    BitSet a=new BitSet(sz);
    LongBitSet b=new LongBitSet(sz);
    if (sz > 0) {
      int nOper=random().nextInt(sz);
      for (int j=0; j < nOper; j++) {
        int idx;
        idx=random().nextInt(sz);
        a.set(idx);
        b.set(idx);
        idx=random().nextInt(sz);
        a.clear(idx);
        b.clear(idx);
        idx=random().nextInt(sz);
        a.flip(idx);
        b.flip(idx,idx + 1);
        idx=random().nextInt(sz);
        a.flip(idx);
        b.flip(idx,idx + 1);
        boolean val2=b.get(idx);
        boolean val=b.getAndSet(idx);
        assertTrue(val2 == val);
        assertTrue(b.get(idx));
        if (!val)         b.clear(idx);
        assertTrue(b.get(idx) == val);
      }
    }
    doGet(a,b);
    int fromIndex, toIndex;
    fromIndex=random().nextInt(sz / 2);
    toIndex=fromIndex + random().nextInt(sz - fromIndex);
    BitSet aa=(BitSet)a.clone();
    aa.flip(fromIndex,toIndex);
    LongBitSet bb=b.clone();
    bb.flip(fromIndex,toIndex);
    fromIndex=random().nextInt(sz / 2);
    toIndex=fromIndex + random().nextInt(sz - fromIndex);
    aa=(BitSet)a.clone();
    aa.clear(fromIndex,toIndex);
    bb=b.clone();
    bb.clear(fromIndex,toIndex);
    doNextSetBit(aa,bb);
    doPrevSetBit(aa,bb);
    fromIndex=random().nextInt(sz / 2);
    toIndex=fromIndex + random().nextInt(sz - fromIndex);
    aa=(BitSet)a.clone();
    aa.set(fromIndex,toIndex);
    bb=b.clone();
    bb.set(fromIndex,toIndex);
    doNextSetBit(aa,bb);
    doPrevSetBit(aa,bb);
    if (b0 != null && b0.length() <= b.length()) {
      assertEquals(a.cardinality(),b.cardinality());
      BitSet a_and=(BitSet)a.clone();
      a_and.and(a0);
      BitSet a_or=(BitSet)a.clone();
      a_or.or(a0);
      BitSet a_xor=(BitSet)a.clone();
      a_xor.xor(a0);
      BitSet a_andn=(BitSet)a.clone();
      a_andn.andNot(a0);
      LongBitSet b_and=b.clone();
      assertEquals(b,b_and);
      b_and.and(b0);
      LongBitSet b_or=b.clone();
      b_or.or(b0);
      LongBitSet b_xor=b.clone();
      b_xor.xor(b0);
      LongBitSet b_andn=b.clone();
      b_andn.andNot(b0);
      assertEquals(a0.cardinality(),b0.cardinality());
      assertEquals(a_or.cardinality(),b_or.cardinality());
      assertEquals(a_and.cardinality(),b_and.cardinality());
      assertEquals(a_or.cardinality(),b_or.cardinality());
      assertEquals(a_xor.cardinality(),b_xor.cardinality());
      assertEquals(a_andn.cardinality(),b_andn.cardinality());
    }
    a0=a;
    b0=b;
  }
}
