{
  Scorer[] valSrcScorers=new Scorer[valSrcWeights.length];
  for (int i=0; i < valSrcScorers.length; i++) {
    valSrcScorers[i]=valSrcWeights[i].scorer(reader,true,false);
  }
  Explanation subQueryExpl=subQueryWeight.explain(reader,doc);
  if (!subQueryExpl.isMatch()) {
    return subQueryExpl;
  }
  Explanation[] valSrcExpls=new Explanation[valSrcScorers.length];
  for (int i=0; i < valSrcScorers.length; i++) {
    valSrcExpls[i]=valSrcScorers[i].explain(doc);
  }
  Explanation customExp=customExplain(doc,subQueryExpl,valSrcExpls);
  float sc=getValue() * customExp.getValue();
  Explanation res=new ComplexExplanation(true,sc,CustomScoreQuery.this.toString() + ", product of:");
  res.addDetail(customExp);
  res.addDetail(new Explanation(getValue(),"queryBoost"));
  return res;
}
