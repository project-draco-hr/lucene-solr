{
  try {
    if (fieldName == null)     throw new IllegalArgumentException("fieldName must not be null");
    if (stream == null)     throw new IllegalArgumentException("token stream must not be null");
    if (boost <= 0.0f)     throw new IllegalArgumentException("boost factor must be greater than 0.0");
    int numTokens=0;
    int numOverlapTokens=0;
    int pos=-1;
    final BytesRefHash terms;
    final SliceByteStartArray sliceArray;
    Info info=null;
    long sumTotalTermFreq=0;
    if ((info=fields.get(fieldName)) != null) {
      numTokens=info.numTokens;
      numOverlapTokens=info.numOverlapTokens;
      pos=info.lastPosition + positionIncrementGap;
      terms=info.terms;
      boost*=info.boost;
      sliceArray=info.sliceArray;
      sumTotalTermFreq=info.sumTotalTermFreq;
    }
 else {
      sliceArray=new SliceByteStartArray(BytesRefHash.DEFAULT_CAPACITY);
      terms=new BytesRefHash(byteBlockPool,BytesRefHash.DEFAULT_CAPACITY,sliceArray);
    }
    if (!fieldInfos.containsKey(fieldName)) {
      fieldInfos.put(fieldName,new FieldInfo(fieldName,true,fieldInfos.size(),false,false,false,this.storeOffsets ? IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS,null,null,null));
    }
    TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);
    PositionIncrementAttribute posIncrAttribute=stream.addAttribute(PositionIncrementAttribute.class);
    OffsetAttribute offsetAtt=stream.addAttribute(OffsetAttribute.class);
    BytesRef ref=termAtt.getBytesRef();
    stream.reset();
    while (stream.incrementToken()) {
      termAtt.fillBytesRef();
      numTokens++;
      final int posIncr=posIncrAttribute.getPositionIncrement();
      if (posIncr == 0)       numOverlapTokens++;
      pos+=posIncr;
      int ord=terms.add(ref);
      if (ord < 0) {
        ord=(-ord) - 1;
        postingsWriter.reset(sliceArray.end[ord]);
      }
 else {
        sliceArray.start[ord]=postingsWriter.startNewSlice();
      }
      sliceArray.freq[ord]++;
      sumTotalTermFreq++;
      if (!storeOffsets) {
        postingsWriter.writeInt(pos);
      }
 else {
        postingsWriter.writeInt(pos);
        postingsWriter.writeInt(offsetAtt.startOffset());
        postingsWriter.writeInt(offsetAtt.endOffset());
      }
      sliceArray.end[ord]=postingsWriter.getCurrentOffset();
    }
    stream.end();
    if (numTokens > 0) {
      fields.put(fieldName,new Info(terms,sliceArray,numTokens,numOverlapTokens,boost,pos,sumTotalTermFreq));
      sortedFields=null;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e2) {
      throw new RuntimeException(e2);
    }
  }
}
