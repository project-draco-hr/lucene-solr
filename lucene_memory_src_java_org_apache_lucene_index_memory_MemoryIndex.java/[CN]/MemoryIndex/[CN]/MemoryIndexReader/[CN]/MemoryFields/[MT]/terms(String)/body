{
  int i=Arrays.binarySearch(sortedFields,field,termComparator);
  if (i < 0) {
    return null;
  }
 else {
    final Info info=getInfo(i);
    info.sortTerms();
    return new Terms(){
      @Override public TermsEnum iterator(      TermsEnum reuse){
        return new MemoryTermsEnum(info);
      }
      @Override public long size(){
        return info.terms.size();
      }
      @Override public long getSumTotalTermFreq(){
        return info.getSumTotalTermFreq();
      }
      @Override public long getSumDocFreq(){
        return info.terms.size();
      }
      @Override public int getDocCount(){
        return info.terms.size() > 0 ? 1 : 0;
      }
      @Override public boolean hasFreqs(){
        return true;
      }
      @Override public boolean hasOffsets(){
        return storeOffsets;
      }
      @Override public boolean hasPositions(){
        return true;
      }
      @Override public boolean hasPayloads(){
        return false;
      }
    }
;
  }
}
