{
  String leaderBaseUrl=leaderprops.get(ZkStateReader.BASE_URL_PROP);
  ZkCoreNodeProps leaderCNodeProps=new ZkCoreNodeProps(leaderprops);
  String leaderUrl=leaderCNodeProps.getCoreUrl();
  log.info("Attempting to replicate from " + leaderUrl + ". core="+ coreName);
  if (!leaderBaseUrl.equals(baseUrl)) {
    commitOnLeader(leaderUrl);
    SolrRequestHandler handler=core.getRequestHandler(REPLICATION_HANDLER);
    if (handler instanceof LazyRequestHandlerWrapper) {
      handler=((LazyRequestHandlerWrapper)handler).getWrappedHandler();
    }
    ReplicationHandler replicationHandler=(ReplicationHandler)handler;
    if (replicationHandler == null) {
      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Skipping recovery, no " + REPLICATION_HANDLER + " handler found");
    }
    ModifiableSolrParams solrParams=new ModifiableSolrParams();
    solrParams.set(ReplicationHandler.MASTER_URL,leaderUrl);
    if (isClosed())     retries=INTERRUPTED;
    boolean success=replicationHandler.doFetch(solrParams,true);
    if (!success) {
      throw new SolrException(ErrorCode.SERVER_ERROR,"Replication for recovery failed.");
    }
  }
}
