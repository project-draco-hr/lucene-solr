{
  boolean replayed=false;
  boolean succesfulRecovery=false;
  while (!succesfulRecovery && !close && !isInterrupted()) {
    UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
    if (ulog == null)     return;
    ulog.bufferUpdates();
    replayed=false;
    CloudDescriptor cloudDesc=core.getCoreDescriptor().getCloudDescriptor();
    try {
      zkController.publish(core,ZkStateReader.RECOVERING);
      ZkNodeProps leaderprops=zkStateReader.getLeaderProps(cloudDesc.getCollectionName(),cloudDesc.getShardId());
      replicate(zkController.getNodeName(),core,coreZkNodeName,leaderprops,ZkCoreNodeProps.getCoreUrl(baseUrl,coreName));
      replay(ulog);
      replayed=true;
      zkController.publishAsActive(baseUrl,core.getCoreDescriptor(),coreZkNodeName,coreName);
      succesfulRecovery=true;
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      log.warn("Recovery was interrupted",e);
      retries=INTERRUPTED;
    }
catch (    Throwable t) {
      SolrException.log(log,"Error while trying to recover",t);
    }
 finally {
      if (!replayed) {
        try {
          ulog.dropBufferedUpdates();
        }
 catch (        Throwable t) {
          SolrException.log(log,"",t);
        }
      }
    }
    if (!succesfulRecovery) {
      try {
        SolrException.log(log,"Recovery failed - trying again...");
        retries++;
        if (retries >= MAX_RETRIES) {
          if (retries == INTERRUPTED) {
          }
 else {
            recoveryFailed(core,zkController,baseUrl,coreZkNodeName,core.getCoreDescriptor());
          }
          break;
        }
      }
 catch (      Exception e) {
        SolrException.log(log,"",e);
      }
      try {
        Thread.sleep(Math.min(START_TIMEOUT * retries,60000));
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        log.warn("Recovery was interrupted",e);
        retries=INTERRUPTED;
      }
    }
    log.info("Finished recovery process");
  }
}
