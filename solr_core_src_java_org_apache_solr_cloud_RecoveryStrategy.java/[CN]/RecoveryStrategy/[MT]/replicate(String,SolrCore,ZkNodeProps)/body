{
  ZkCoreNodeProps leaderCNodeProps=new ZkCoreNodeProps(leaderprops);
  String leaderUrl=leaderCNodeProps.getCoreUrl();
  log.info("Attempting to replicate from " + leaderUrl + ". core="+ coreName);
  commitOnLeader(leaderUrl);
  SolrRequestHandler handler=core.getRequestHandler(REPLICATION_HANDLER);
  if (handler instanceof LazyRequestHandlerWrapper) {
    handler=((LazyRequestHandlerWrapper)handler).getWrappedHandler();
  }
  ReplicationHandler replicationHandler=(ReplicationHandler)handler;
  if (replicationHandler == null) {
    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Skipping recovery, no " + REPLICATION_HANDLER + " handler found");
  }
  ModifiableSolrParams solrParams=new ModifiableSolrParams();
  solrParams.set(ReplicationHandler.MASTER_URL,leaderUrl);
  if (isClosed())   retries=INTERRUPTED;
  boolean success=replicationHandler.doFetch(solrParams,false);
  if (!success) {
    throw new SolrException(ErrorCode.SERVER_ERROR,"Replication for recovery failed.");
  }
  if (Boolean.getBoolean("solr.cloud.debug")) {
    try {
      RefCounted<SolrIndexSearcher> searchHolder=core.getNewestSearcher(false);
      SolrIndexSearcher searcher=searchHolder.get();
      try {
        System.err.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + " replicated " + searcher.search(new MatchAllDocsQuery(),1).totalHits+ " from "+ leaderUrl+ " gen:"+ core.getDeletionPolicy().getLatestCommit().getGeneration()+ " data:"+ core.getDataDir());
      }
  finally {
        searchHolder.decref();
      }
    }
 catch (    Exception e) {
      throw new SolrException(ErrorCode.SERVER_ERROR,null,e);
    }
  }
}
