{
  CloudSolrServer client=createCloudClient(null);
  try {
    client.connect();
    try {
      doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"property","preferredLeader");
    }
 catch (    SolrException se) {
      assertTrue("Should have seen missing required parameter 'collection' error",se.getMessage().contains("Missing required parameter: collection"));
    }
    doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"collection",COLLECTION_NAME,"property","preferredLeader");
    verifyUniqueAcrossCollection(client,COLLECTION_NAME,"property.preferredleader");
    doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"collection",COLLECTION_NAME,"property","property.newunique","shardUnique","true");
    verifyUniqueAcrossCollection(client,COLLECTION_NAME,"property.newunique");
    try {
      doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"collection",COLLECTION_NAME,"property","whatever","shardUnique","false");
      fail("Should have thrown an exception here.");
    }
 catch (    SolrException se) {
      assertTrue("Should have gotten a specific error message here",se.getMessage().contains("Balancing properties amongst replicas in a slice requires that the " + "property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'"));
    }
    Map<String,Slice> slices=client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();
    List<String> sliceList=new ArrayList<>(slices.keySet());
    String c1_s1=sliceList.get(0);
    List<String> replicasList=new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());
    String c1_s1_r1=replicasList.get(0);
    String c1_s1_r2=replicasList.get(1);
    addProperty(client,"action",CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),"collection",COLLECTION_NAME,"shard",c1_s1,"replica",c1_s1_r1,"property","bogus1","property.value","true");
    addProperty(client,"action",CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),"collection",COLLECTION_NAME,"shard",c1_s1,"replica",c1_s1_r2,"property","property.bogus1","property.value","whatever");
    try {
      doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"collection",COLLECTION_NAME,"property","bogus1","shardUnique","false");
      fail("Should have thrown parameter error here");
    }
 catch (    SolrException se) {
      assertTrue("Should have caught specific exception ",se.getMessage().contains("Balancing properties amongst replicas in a slice requires that the property be " + "pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'"));
    }
    doPropertyAction(client,"action",CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),"collection",COLLECTION_NAME,"property","property.bogus1","shardUnique","true");
    verifyPropertyVal(client,COLLECTION_NAME,c1_s1_r1,"property.bogus1","true");
    verifyPropertyVal(client,COLLECTION_NAME,c1_s1_r2,"property.bogus1","whatever");
    doPropertyAction(client,"action",CollectionParams.CollectionAction.REBALANCELEADERS.toString(),"collection",COLLECTION_NAME);
    verifyLeaderAssignment(client,COLLECTION_NAME);
  }
  finally {
    client.shutdown();
  }
}
