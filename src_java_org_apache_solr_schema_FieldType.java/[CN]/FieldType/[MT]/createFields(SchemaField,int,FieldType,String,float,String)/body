{
  int n=field.indexed() ? externalVals.length : 0;
  n+=field.stored() ? 1 : 0;
  if (delegatedType == null) {
    delegatedType=field.getType();
  }
  Field[] results=new Field[n];
  if (externalVals.length > 0) {
    if (field.indexed()) {
      String name=field.getName() + "_";
      String suffix=POLY_FIELD_SEPARATOR + delegatedType.typeName;
      int len=name.length();
      StringBuilder bldr=new StringBuilder(len + 3 + suffix.length());
      bldr.append(name);
      for (int j=0; j < externalVals.length; j++) {
        bldr.append(j).append(suffix);
        SchemaField sf=SchemaField.create(bldr.toString(),delegatedType,props,null);
        results[j]=delegatedType.createField(sf,externalVals[j],boost);
        bldr.setLength(len);
      }
    }
    Field.TermVector fieldTermVec=getFieldTermVec(field,storageVal);
    if (field.stored() || fieldTermVec.equals(Field.TermVector.YES) || fieldTermVec.equals(Field.TermVector.WITH_OFFSETS)|| fieldTermVec.equals(Field.TermVector.WITH_POSITIONS)|| fieldTermVec.equals(Field.TermVector.WITH_POSITIONS_OFFSETS)) {
      results[results.length - 1]=createField(field.getName(),storageVal,getFieldStore(field,storageVal),Field.Index.NO,fieldTermVec,field.omitNorms(),field.omitTf(),boost);
    }
  }
  return results;
}
