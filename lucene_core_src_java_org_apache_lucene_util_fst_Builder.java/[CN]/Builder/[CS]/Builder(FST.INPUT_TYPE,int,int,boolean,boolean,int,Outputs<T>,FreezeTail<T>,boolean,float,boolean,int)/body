{
  this.minSuffixCount1=minSuffixCount1;
  this.minSuffixCount2=minSuffixCount2;
  this.freezeTail=freezeTail;
  this.doShareNonSingletonNodes=doShareNonSingletonNodes;
  this.shareMaxTailLength=shareMaxTailLength;
  this.doPackFST=doPackFST;
  this.acceptableOverheadRatio=acceptableOverheadRatio;
  fst=new FST<T>(inputType,outputs,doPackFST,acceptableOverheadRatio,allowArrayArcs,bytesPageBits);
  if (doShareSuffix) {
    dedupHash=new NodeHash<T>(fst,fst.bytes.getReverseReader(false));
  }
 else {
    dedupHash=null;
  }
  NO_OUTPUT=outputs.getNoOutput();
  @SuppressWarnings({"rawtypes","unchecked"}) final UnCompiledNode<T>[] f=(UnCompiledNode<T>[])new UnCompiledNode[10];
  frontier=f;
  for (int idx=0; idx < frontier.length; idx++) {
    frontier[idx]=new UnCompiledNode<T>(this,idx);
  }
}
