{
  TermsEnum leftEnum=null;
  TermsEnum rightEnum=null;
  int numTests=atLeast(20);
  Random random=random();
  HashSet<BytesRef> tests=new HashSet<BytesRef>();
  int numPasses=0;
  while (numPasses < 10 && tests.size() < numTests) {
    leftEnum=leftTerms.iterator(leftEnum);
    BytesRef term=null;
    while ((term=leftEnum.next()) != null) {
      int code=random.nextInt(10);
      if (code == 0) {
        tests.add(BytesRef.deepCopyOf(term));
      }
 else       if (code == 1) {
        term=BytesRef.deepCopyOf(term);
        if (term.length > 0) {
          term.length=random.nextInt(term.length);
        }
      }
 else       if (code == 2) {
        byte newbytes[]=new byte[term.length + 5];
        System.arraycopy(term.bytes,term.offset,newbytes,5,term.length);
        tests.add(new BytesRef(newbytes,5,term.length));
      }
    }
    numPasses++;
  }
  ArrayList<BytesRef> shuffledTests=new ArrayList<BytesRef>(tests);
  Collections.shuffle(shuffledTests,random);
  for (  BytesRef b : shuffledTests) {
    leftEnum=leftTerms.iterator(leftEnum);
    rightEnum=rightTerms.iterator(rightEnum);
    assertEquals(leftEnum.seekExact(b),rightEnum.seekExact(b));
    assertEquals(leftEnum.seekExact(b),rightEnum.seekExact(b));
    SeekStatus leftStatus;
    SeekStatus rightStatus;
    leftStatus=leftEnum.seekCeil(b);
    rightStatus=rightEnum.seekCeil(b);
    assertEquals(leftStatus,rightStatus);
    if (leftStatus != SeekStatus.END) {
      assertEquals(leftEnum.term(),rightEnum.term());
    }
    leftStatus=leftEnum.seekCeil(b);
    rightStatus=rightEnum.seekCeil(b);
    assertEquals(leftStatus,rightStatus);
    if (leftStatus != SeekStatus.END) {
      assertEquals(leftEnum.term(),rightEnum.term());
    }
  }
}
