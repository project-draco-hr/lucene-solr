{
  Directory dir=newDirectory();
  Directory taxoDir=newDirectory();
  Random random=random();
  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);
  RandomIndexWriter writer=new RandomIndexWriter(random,dir);
  FacetsConfig config=new FacetsConfig();
  final int numCategories=10;
  int numDocs=atLeast(10000);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    doc.add(new StringField("EvenOdd",(i % 2 == 0) ? "even" : "odd",Store.NO));
    doc.add(new FacetField("iMod10",Integer.toString(i % numCategories)));
    writer.addDocument(config.build(taxoWriter,doc));
  }
  writer.forceMerge(CHI_SQUARE_VALUES.length - 1);
  IndexSearcher searcher=newSearcher(writer.getReader());
  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoWriter);
  IOUtils.close(writer,taxoWriter);
  RandomSamplingFacetsCollector collectRandomZeroResults=new RandomSamplingFacetsCollector(numDocs / 10,random.nextLong());
  searcher.search(new TermQuery(new Term("EvenOdd","NeverMatches")),collectRandomZeroResults);
  assertNotNull(collectRandomZeroResults.getMatchingDocs());
  for (  MatchingDocs doc : collectRandomZeroResults.getMatchingDocs()) {
    assertEquals(0,doc.totalHits);
  }
  TermQuery query=new TermQuery(new Term("EvenOdd","even"));
  RandomSamplingFacetsCollector random10Percent=new RandomSamplingFacetsCollector(numDocs / 10,random.nextLong());
  FacetsCollector fc=new FacetsCollector();
  searcher.search(query,MultiCollector.wrap(fc,random10Percent));
  final List<MatchingDocs> matchingDocs=random10Percent.getMatchingDocs();
  int totalSampledDocs=0, totalHits=0;
  int[] numSampledDocs=new int[matchingDocs.size()];
  for (int i=0; i < numSampledDocs.length; i++) {
    MatchingDocs md=matchingDocs.get(i);
    final DocIdSetIterator iter=md.bits.iterator();
    while (iter.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)     ++numSampledDocs[i];
    totalSampledDocs+=numSampledDocs[i];
    totalHits+=md.totalHits;
  }
  float chi_square=0;
  for (int i=0; i < numSampledDocs.length; i++) {
    MatchingDocs md=matchingDocs.get(i);
    float ei=(float)md.totalHits / totalHits;
    if (ei > 0.0f) {
      float oi=(float)numSampledDocs[i] / totalSampledDocs;
      chi_square+=(Math.pow(ei - oi,2) / ei);
    }
  }
  assertTrue("chisquare not statistically significant enough: " + chi_square,chi_square < CHI_SQUARE_VALUES[numSampledDocs.length]);
  final FastTaxonomyFacetCounts random10FacetCounts=new FastTaxonomyFacetCounts(taxoReader,config,random10Percent);
  final FacetResult random10Result=random10FacetCounts.getTopChildren(10,"iMod10");
  final FacetResult amortized10Result=random10Percent.amortizeFacetCounts(random10Result,config,searcher);
  for (int i=0; i < amortized10Result.labelValues.length; i++) {
    LabelAndValue amortized=amortized10Result.labelValues[i];
    LabelAndValue sampled=random10Result.labelValues[i];
    assertEquals(amortized.value.floatValue(),Math.min(5 * sampled.value.floatValue(),numDocs / 10.f),1.0);
  }
  IOUtils.close(searcher.getIndexReader(),taxoReader,dir,taxoDir);
}
