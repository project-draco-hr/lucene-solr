{
  Directory dir=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec("Standard")));
  Document doc=new Document();
  doc.add(new Field("field","a b c d e f g h i j k l m n o p q r s t u v w x y z",Field.Store.NO,Field.Index.ANALYZED));
  doc.add(new Field("number","0 1 2 3 4 5 6 7 8 9",Field.Store.NO,Field.Index.ANALYZED));
  writer.addDocument(doc);
  writer.addDocument(doc);
  writer.close();
  IndexReader r=IndexReader.open(dir,null,true,-1);
  try {
    r.docFreq(new Term("field","f"));
    fail("did not hit expected exception");
  }
 catch (  IllegalStateException ise) {
  }
  assertEquals(-1,((SegmentReader)r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());
  writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec("Standard")));
  writer.addDocument(doc);
  writer.close();
  IndexReader r2=r.reopen();
  r.close();
  IndexReader[] subReaders=r2.getSequentialSubReaders();
  assertEquals(2,subReaders.length);
  for (int i=0; i < 2; i++) {
    try {
      subReaders[i].docFreq(new Term("field","f"));
      fail("did not hit expected exception");
    }
 catch (    IllegalStateException ise) {
    }
  }
}
