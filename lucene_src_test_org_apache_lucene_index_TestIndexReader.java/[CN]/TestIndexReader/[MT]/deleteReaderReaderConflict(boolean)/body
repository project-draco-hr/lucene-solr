{
  Directory dir=newDirectory();
  Term searchTerm1=new Term("content","aaa");
  Term searchTerm2=new Term("content","bbb");
  Term searchTerm3=new Term("content","ccc");
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.CREATE));
  for (int i=0; i < 100; i++) {
    addDoc(writer,searchTerm1.text());
    addDoc(writer,searchTerm2.text());
    addDoc(writer,searchTerm3.text());
  }
  if (optimize)   writer.optimize();
  writer.close();
  IndexReader reader1=IndexReader.open(dir,false);
  assertEquals("first opened",100,reader1.docFreq(searchTerm1));
  assertEquals("first opened",100,reader1.docFreq(searchTerm2));
  assertEquals("first opened",100,reader1.docFreq(searchTerm3));
  assertTermDocsCount("first opened",reader1,searchTerm1,100);
  assertTermDocsCount("first opened",reader1,searchTerm2,100);
  assertTermDocsCount("first opened",reader1,searchTerm3,100);
  IndexReader reader2=IndexReader.open(dir,false);
  assertEquals("first opened",100,reader2.docFreq(searchTerm1));
  assertEquals("first opened",100,reader2.docFreq(searchTerm2));
  assertEquals("first opened",100,reader2.docFreq(searchTerm3));
  assertTermDocsCount("first opened",reader2,searchTerm1,100);
  assertTermDocsCount("first opened",reader2,searchTerm2,100);
  assertTermDocsCount("first opened",reader2,searchTerm3,100);
  reader2.deleteDocuments(searchTerm1);
  assertEquals("after delete 1",100,reader2.docFreq(searchTerm1));
  assertEquals("after delete 1",100,reader2.docFreq(searchTerm2));
  assertEquals("after delete 1",100,reader2.docFreq(searchTerm3));
  assertTermDocsCount("after delete 1",reader2,searchTerm1,0);
  assertTermDocsCount("after delete 1",reader2,searchTerm2,100);
  assertTermDocsCount("after delete 1",reader2,searchTerm3,100);
  reader2.close();
  assertEquals("after delete 1",100,reader1.docFreq(searchTerm1));
  assertEquals("after delete 1",100,reader1.docFreq(searchTerm2));
  assertEquals("after delete 1",100,reader1.docFreq(searchTerm3));
  assertTermDocsCount("after delete 1",reader1,searchTerm1,100);
  assertTermDocsCount("after delete 1",reader1,searchTerm2,100);
  assertTermDocsCount("after delete 1",reader1,searchTerm3,100);
  try {
    reader1.deleteDocuments(searchTerm2);
    fail("Delete allowed from a stale index reader");
  }
 catch (  IOException e) {
  }
  reader1.close();
  reader1=IndexReader.open(dir,false);
  assertEquals("reopened",100,reader1.docFreq(searchTerm1));
  assertEquals("reopened",100,reader1.docFreq(searchTerm2));
  assertEquals("reopened",100,reader1.docFreq(searchTerm3));
  assertTermDocsCount("reopened",reader1,searchTerm1,0);
  assertTermDocsCount("reopened",reader1,searchTerm2,100);
  assertTermDocsCount("reopened",reader1,searchTerm3,100);
  reader1.deleteDocuments(searchTerm2);
  assertEquals("deleted 2",100,reader1.docFreq(searchTerm1));
  assertEquals("deleted 2",100,reader1.docFreq(searchTerm2));
  assertEquals("deleted 2",100,reader1.docFreq(searchTerm3));
  assertTermDocsCount("deleted 2",reader1,searchTerm1,0);
  assertTermDocsCount("deleted 2",reader1,searchTerm2,0);
  assertTermDocsCount("deleted 2",reader1,searchTerm3,100);
  reader1.close();
  reader2=IndexReader.open(dir,false);
  assertEquals("reopened 2",100,reader2.docFreq(searchTerm1));
  assertEquals("reopened 2",100,reader2.docFreq(searchTerm2));
  assertEquals("reopened 2",100,reader2.docFreq(searchTerm3));
  assertTermDocsCount("reopened 2",reader2,searchTerm1,0);
  assertTermDocsCount("reopened 2",reader2,searchTerm2,0);
  assertTermDocsCount("reopened 2",reader2,searchTerm3,100);
  reader2.close();
  dir.close();
}
