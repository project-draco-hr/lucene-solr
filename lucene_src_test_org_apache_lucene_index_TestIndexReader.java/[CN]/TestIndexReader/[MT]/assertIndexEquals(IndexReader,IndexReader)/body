{
  assertEquals("IndexReaders have different values for numDocs.",index1.numDocs(),index2.numDocs());
  assertEquals("IndexReaders have different values for maxDoc.",index1.maxDoc(),index2.maxDoc());
  assertEquals("Only one IndexReader has deletions.",index1.hasDeletions(),index2.hasDeletions());
  if (!(index1 instanceof ParallelReader)) {
    assertEquals("Single segment test differs.",index1.getSequentialSubReaders().length == 1,index2.getSequentialSubReaders().length == 1);
  }
  Collection<String> fields1=index1.getFieldNames(FieldOption.ALL);
  Collection<String> fields2=index1.getFieldNames(FieldOption.ALL);
  assertEquals("IndexReaders have different numbers of fields.",fields1.size(),fields2.size());
  Iterator<String> it1=fields1.iterator();
  Iterator<String> it2=fields1.iterator();
  while (it1.hasNext()) {
    assertEquals("Different field names.",it1.next(),it2.next());
  }
  it1=fields1.iterator();
  while (it1.hasNext()) {
    String curField=it1.next();
    byte[] norms1=MultiNorms.norms(index1,curField);
    byte[] norms2=MultiNorms.norms(index2,curField);
    if (norms1 != null && norms2 != null) {
      assertEquals(norms1.length,norms2.length);
      for (int i=0; i < norms1.length; i++) {
        assertEquals("Norm different for doc " + i + " and field '"+ curField+ "'.",norms1[i],norms2[i]);
      }
    }
 else {
      assertSame(norms1,norms2);
    }
  }
  final Bits liveDocs1=MultiFields.getLiveDocs(index1);
  final Bits liveDocs2=MultiFields.getLiveDocs(index2);
  for (int i=0; i < index1.maxDoc(); i++) {
    assertEquals("Doc " + i + " only deleted in one index.",liveDocs1 == null || !liveDocs1.get(i),liveDocs2 == null || !liveDocs2.get(i));
  }
  for (int i=0; i < index1.maxDoc(); i++) {
    if (liveDocs1 == null || liveDocs1.get(i)) {
      Document doc1=index1.document(i);
      Document doc2=index2.document(i);
      List<IndexableField> field1=doc1.getFields();
      List<IndexableField> field2=doc2.getFields();
      assertEquals("Different numbers of fields for doc " + i + ".",field1.size(),field2.size());
      Iterator<IndexableField> itField1=field1.iterator();
      Iterator<IndexableField> itField2=field2.iterator();
      while (itField1.hasNext()) {
        Field curField1=(Field)itField1.next();
        Field curField2=(Field)itField2.next();
        assertEquals("Different fields names for doc " + i + ".",curField1.name(),curField2.name());
        assertEquals("Different field values for doc " + i + ".",curField1.stringValue(),curField2.stringValue());
      }
    }
  }
  FieldsEnum fenum1=MultiFields.getFields(index1).iterator();
  FieldsEnum fenum2=MultiFields.getFields(index1).iterator();
  String field1=null;
  Bits liveDocs=MultiFields.getLiveDocs(index1);
  while ((field1=fenum1.next()) != null) {
    assertEquals("Different fields",field1,fenum2.next());
    TermsEnum enum1=fenum1.terms();
    TermsEnum enum2=fenum2.terms();
    while (enum1.next() != null) {
      assertEquals("Different terms",enum1.term(),enum2.next());
      DocsAndPositionsEnum tp1=enum1.docsAndPositions(liveDocs,null);
      DocsAndPositionsEnum tp2=enum2.docsAndPositions(liveDocs,null);
      while (tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
        assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
        assertEquals("Different doc id in postinglist of term " + enum1.term() + ".",tp1.docID(),tp2.docID());
        assertEquals("Different term frequence in postinglist of term " + enum1.term() + ".",tp1.freq(),tp2.freq());
        for (int i=0; i < tp1.freq(); i++) {
          assertEquals("Different positions in postinglist of term " + enum1.term() + ".",tp1.nextPosition(),tp2.nextPosition());
        }
      }
    }
  }
}
