{
  Term searchTerm=new Term("content","aaa");
  int START_COUNT=157;
  int END_COUNT=144;
  MockDirectoryWrapper startDir=newDirectory();
  IndexWriter writer=new IndexWriter(startDir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)));
  if (VERBOSE) {
    System.out.println("TEST: create initial index");
    writer.setInfoStream(System.out);
  }
  for (int i=0; i < 157; i++) {
    Document d=new Document();
    d.add(newField("id",Integer.toString(i),Field.Store.YES,Field.Index.NOT_ANALYZED));
    d.add(newField("content","aaa " + i,Field.Store.NO,Field.Index.ANALYZED));
    writer.addDocument(d);
    if (0 == i % 10)     writer.commit();
  }
  writer.close();
{
    IndexReader r=IndexReader.open(startDir);
    IndexSearcher searcher=newSearcher(r);
    ScoreDoc[] hits=null;
    try {
      hits=searcher.search(new TermQuery(searchTerm),null,1000).scoreDocs;
    }
 catch (    IOException e) {
      e.printStackTrace();
      fail("exception when init searching: " + e);
    }
    searcher.close();
    r.close();
  }
  long diskUsage=startDir.getRecomputedActualSizeInBytes();
  long diskFree=diskUsage + 100;
  IOException err=null;
  boolean done=false;
  boolean gotExc=false;
  while (!done) {
    MockDirectoryWrapper dir=new MockDirectoryWrapper(random,new RAMDirectory(startDir));
    dir.setPreventDoubleWrite(false);
    IndexReader reader=IndexReader.open(dir,false);
    boolean success=false;
    for (int x=0; x < 2; x++) {
      double rate=0.05;
      double diskRatio=((double)diskFree) / diskUsage;
      long thisDiskFree;
      String testName;
      if (0 == x) {
        thisDiskFree=diskFree;
        if (diskRatio >= 2.0) {
          rate/=2;
        }
        if (diskRatio >= 4.0) {
          rate/=2;
        }
        if (diskRatio >= 6.0) {
          rate=0.0;
        }
        if (VERBOSE) {
          System.out.println("\ncycle: " + diskFree + " bytes");
        }
        testName="disk full during reader.close() @ " + thisDiskFree + " bytes";
      }
 else {
        thisDiskFree=0;
        rate=0.0;
        if (VERBOSE) {
          System.out.println("\ncycle: same writer: unlimited disk space");
        }
        testName="reader re-use after disk full";
      }
      dir.setMaxSizeInBytes(thisDiskFree);
      dir.setRandomIOExceptionRate(rate);
      Similarity sim=new DefaultSimilarity();
      try {
        if (0 == x) {
          int docId=12;
          for (int i=0; i < 13; i++) {
            reader.deleteDocument(docId);
            reader.setNorm(docId,"content",sim.encodeNormValue(2.0f));
            docId+=12;
          }
        }
        reader.close();
        success=true;
        if (0 == x) {
          done=true;
        }
      }
 catch (      IOException e) {
        if (VERBOSE) {
          System.out.println("  hit IOException: " + e);
          e.printStackTrace(System.out);
        }
        err=e;
        gotExc=true;
        if (1 == x) {
          e.printStackTrace();
          fail(testName + " hit IOException after disk space was freed up");
        }
      }
      IndexReader newReader=null;
      try {
        newReader=IndexReader.open(dir,false);
      }
 catch (      IOException e) {
        e.printStackTrace();
        fail(testName + ":exception when creating IndexReader after disk full during close: " + e);
      }
      IndexSearcher searcher=newSearcher(newReader);
      ScoreDoc[] hits=null;
      try {
        hits=searcher.search(new TermQuery(searchTerm),null,1000).scoreDocs;
      }
 catch (      IOException e) {
        e.printStackTrace();
        fail(testName + ": exception when searching: " + e);
      }
      int result2=hits.length;
      if (success) {
        if (result2 != END_COUNT) {
          fail(testName + ": method did not throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ END_COUNT);
        }
      }
 else {
        if (result2 != START_COUNT && result2 != END_COUNT) {
          err.printStackTrace();
          fail(testName + ": method did throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ START_COUNT);
        }
      }
      searcher.close();
      newReader.close();
      if (result2 == END_COUNT) {
        if (!gotExc)         fail("never hit disk full");
        break;
      }
    }
    dir.close();
    diskFree+=10;
  }
  startDir.close();
}
