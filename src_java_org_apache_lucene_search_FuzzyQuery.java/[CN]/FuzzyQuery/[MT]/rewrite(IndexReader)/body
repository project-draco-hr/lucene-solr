{
  if (!termLongEnough) {
    return new BooleanQuery();
  }
  FilteredTermEnum enumerator=getEnum(reader);
  int maxClauseCount=BooleanQuery.getMaxClauseCount();
  ScoreTermQueue stQueue=new ScoreTermQueue(maxClauseCount);
  ScoreTerm reusableST=null;
  try {
    do {
      float score=0.0f;
      Term t=enumerator.term();
      if (t != null) {
        score=enumerator.difference();
        if (reusableST == null) {
          reusableST=new ScoreTerm(t,score);
        }
 else         if (score >= reusableST.score) {
          reusableST.score=score;
          reusableST.term=t;
        }
 else {
          continue;
        }
        reusableST=(ScoreTerm)stQueue.insertWithOverflow(reusableST);
      }
    }
 while (enumerator.next());
  }
  finally {
    enumerator.close();
  }
  BooleanQuery query=new BooleanQuery(true);
  int size=stQueue.size();
  for (int i=0; i < size; i++) {
    ScoreTerm st=(ScoreTerm)stQueue.pop();
    TermQuery tq=new TermQuery(st.term);
    tq.setBoost(getBoost() * st.score);
    query.add(tq,BooleanClause.Occur.SHOULD);
  }
  return query;
}
