{
  String segFileName=IndexFileNames.segmentFileName(si.name,"",SimpleTextSegmentInfoFormat.SI_EXTENSION);
  si.addFile(segFileName);
  boolean success=false;
  IndexOutput output=dir.createOutput(segFileName,ioContext);
  try {
    BytesRef scratch=new BytesRef();
    SimpleTextUtil.write(output,SI_VERSION);
    SimpleTextUtil.write(output,si.getVersion(),scratch);
    SimpleTextUtil.writeNewline(output);
    SimpleTextUtil.write(output,SI_DOCCOUNT);
    SimpleTextUtil.write(output,Integer.toString(si.getDocCount()),scratch);
    SimpleTextUtil.writeNewline(output);
    SimpleTextUtil.write(output,SI_USECOMPOUND);
    SimpleTextUtil.write(output,Boolean.toString(si.getUseCompoundFile()),scratch);
    SimpleTextUtil.writeNewline(output);
    Map<String,String> diagnostics=si.getDiagnostics();
    int numDiagnostics=diagnostics == null ? 0 : diagnostics.size();
    SimpleTextUtil.write(output,SI_NUM_DIAG);
    SimpleTextUtil.write(output,Integer.toString(numDiagnostics),scratch);
    SimpleTextUtil.writeNewline(output);
    if (numDiagnostics > 0) {
      for (      Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {
        SimpleTextUtil.write(output,SI_DIAG_KEY);
        SimpleTextUtil.write(output,diagEntry.getKey(),scratch);
        SimpleTextUtil.writeNewline(output);
        SimpleTextUtil.write(output,SI_DIAG_VALUE);
        SimpleTextUtil.write(output,diagEntry.getValue(),scratch);
        SimpleTextUtil.writeNewline(output);
      }
    }
    Map<String,String> atts=si.attributes();
    int numAtts=atts == null ? 0 : atts.size();
    SimpleTextUtil.write(output,SI_NUM_ATTS);
    SimpleTextUtil.write(output,Integer.toString(numAtts),scratch);
    SimpleTextUtil.writeNewline(output);
    if (numAtts > 0) {
      for (      Map.Entry<String,String> entry : atts.entrySet()) {
        SimpleTextUtil.write(output,SI_ATT_KEY);
        SimpleTextUtil.write(output,entry.getKey(),scratch);
        SimpleTextUtil.writeNewline(output);
        SimpleTextUtil.write(output,SI_ATT_VALUE);
        SimpleTextUtil.write(output,entry.getValue(),scratch);
        SimpleTextUtil.writeNewline(output);
      }
    }
    Set<String> files=si.files();
    int numFiles=files == null ? 0 : files.size();
    SimpleTextUtil.write(output,SI_NUM_FILES);
    SimpleTextUtil.write(output,Integer.toString(numFiles),scratch);
    SimpleTextUtil.writeNewline(output);
    if (numFiles > 0) {
      for (      String fileName : files) {
        SimpleTextUtil.write(output,SI_FILE);
        SimpleTextUtil.write(output,fileName,scratch);
        SimpleTextUtil.writeNewline(output);
      }
    }
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(output);
      try {
        dir.deleteFile(segFileName);
      }
 catch (      Throwable t) {
      }
    }
 else {
      output.close();
    }
  }
}
