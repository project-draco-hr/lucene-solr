{
  Map<String,String> map=new HashMap<String,String>();
  int numTerms=atLeast(50);
  for (int i=0; i < numTerms; i++) {
    String randomRealisticUnicodeString=_TestUtil.randomRealisticUnicodeString(random());
    char[] charArray=randomRealisticUnicodeString.toCharArray();
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < charArray.length; ) {
      int cp=Character.codePointAt(charArray,j,charArray.length);
      if (!Character.isWhitespace(cp)) {
        builder.appendCodePoint(cp);
      }
      j+=Character.charCount(cp);
    }
    if (builder.length() > 0) {
      String value=_TestUtil.randomSimpleString(random());
      map.put(builder.toString(),value.isEmpty() ? "a" : value);
    }
  }
  if (map.isEmpty()) {
    map.put("booked","books");
  }
  StemmerOverrideFilter.Builder builder=new StemmerOverrideFilter.Builder(random().nextBoolean());
  Set<Entry<String,String>> entrySet=map.entrySet();
  StringBuilder input=new StringBuilder();
  List<String> output=new ArrayList<String>();
  for (  Entry<String,String> entry : entrySet) {
    builder.add(entry.getKey(),entry.getValue());
    if (random().nextBoolean() || output.isEmpty()) {
      input.append(entry.getKey()).append(" ");
      output.add(entry.getValue());
    }
  }
  Tokenizer tokenizer=new WhitespaceTokenizer(TEST_VERSION_CURRENT,new StringReader(input.toString()));
  TokenStream stream=new PorterStemFilter(new StemmerOverrideFilter(tokenizer,builder.build()));
  assertTokenStreamContents(stream,output.toArray(new String[0]));
}
