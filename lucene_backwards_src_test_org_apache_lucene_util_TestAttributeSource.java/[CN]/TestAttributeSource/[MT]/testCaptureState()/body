{
  AttributeSource src=new AttributeSource();
  TermAttribute termAtt=src.addAttribute(TermAttribute.class);
  TypeAttribute typeAtt=src.addAttribute(TypeAttribute.class);
  termAtt.setTermBuffer("TestTerm");
  typeAtt.setType("TestType");
  final int hashCode=src.hashCode();
  AttributeSource.State state=src.captureState();
  termAtt.setTermBuffer("AnotherTestTerm");
  typeAtt.setType("AnotherTestType");
  assertTrue("Hash code should be different",hashCode != src.hashCode());
  src.restoreState(state);
  assertEquals("TestTerm",termAtt.term());
  assertEquals("TestType",typeAtt.type());
  assertEquals("Hash code should be equal after restore",hashCode,src.hashCode());
  AttributeSource copy=new AttributeSource();
  copy.addAttribute(TermAttribute.class);
  copy.addAttribute(TypeAttribute.class);
  copy.restoreState(state);
  assertEquals("Both AttributeSources should have same hashCode after restore",src.hashCode(),copy.hashCode());
  assertEquals("Both AttributeSources should be equal after restore",src,copy);
  AttributeSource src2=new AttributeSource();
  typeAtt=src2.addAttribute(TypeAttribute.class);
  FlagsAttribute flagsAtt=src2.addAttribute(FlagsAttribute.class);
  termAtt=src2.addAttribute(TermAttribute.class);
  flagsAtt.setFlags(12345);
  src2.restoreState(state);
  assertEquals("TestTerm",termAtt.term());
  assertEquals("TestType",typeAtt.type());
  assertEquals("FlagsAttribute should not be touched",12345,flagsAtt.getFlags());
  AttributeSource src3=new AttributeSource();
  termAtt=src3.addAttribute(TermAttribute.class);
  try {
    src3.restoreState(state);
    fail("The third instance is missing the TypeAttribute, so restoreState() should throw IllegalArgumentException");
  }
 catch (  IllegalArgumentException iae) {
  }
}
