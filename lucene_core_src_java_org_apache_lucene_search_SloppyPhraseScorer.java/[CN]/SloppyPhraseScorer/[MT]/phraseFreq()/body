{
  if (!initPhrasePositions()) {
    return 0.0f;
  }
  float freq=0.0f;
  PhrasePositions pp=pq.pop();
  int matchLength=end - pp.position;
  int next=pq.top().position;
  while (advancePP(pp)) {
    if (hasRpts && !advanceRpts(pp)) {
      break;
    }
    if (pp.position > next) {
      if (matchLength <= slop) {
        freq+=docScorer.computeSlopFactor(matchLength);
      }
      pq.add(pp);
      pp=pq.pop();
      next=pq.top().position;
      matchLength=end - pp.position;
    }
 else {
      int matchLength2=end - pp.position;
      if (matchLength2 < matchLength) {
        matchLength=matchLength2;
      }
    }
  }
  if (matchLength <= slop) {
    freq+=docScorer.computeSlopFactor(matchLength);
  }
  return freq;
}
