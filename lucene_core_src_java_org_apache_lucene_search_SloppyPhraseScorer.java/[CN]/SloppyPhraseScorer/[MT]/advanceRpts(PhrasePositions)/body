{
  if (pp.rptGroup < 0) {
    return true;
  }
  PhrasePositions[] rg=rptGroups[pp.rptGroup];
  FixedBitSet bits=new FixedBitSet(rg.length);
  int k0=pp.rptInd;
  int k;
  while ((k=collide(pp)) >= 0) {
    pp=lesser(pp,rg[k]);
    if (!advancePP(pp)) {
      return false;
    }
    if (k != k0) {
      bits=FixedBitSet.ensureCapacity(bits,k);
      bits.set(k);
    }
  }
  int n=0;
  int numBits=bits.length();
  while (bits.cardinality() > 0) {
    PhrasePositions pp2=pq.pop();
    rptStack[n++]=pp2;
    if (pp2.rptGroup >= 0 && pp2.rptInd < numBits && bits.get(pp2.rptInd)) {
      bits.clear(pp2.rptInd);
    }
  }
  for (int i=n - 1; i >= 0; i--) {
    pq.add(rptStack[i]);
  }
  return true;
}
