{
  StandardQueryParser qp=new StandardQueryParser();
  qp.setAnalyzer(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true));
  final String df="field";
  RegexpQuery q=new RegexpQuery(new Term("field","[a-z][123]"));
  assertEquals(q,qp.parse("/[a-z][123]/",df));
  assertEquals(q,qp.parse("/[A-Z][123]/",df));
  assertEquals(new BoostQuery(q,0.5f),qp.parse("/[A-Z][123]/^0.5",df));
  qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);
  q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);
  assertEquals(new BoostQuery(q,0.5f),qp.parse("/[A-Z][123]/^0.5",df));
  assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE,((RegexpQuery)(((BoostQuery)qp.parse("/[A-Z][123]/^0.5",df)).getQuery())).getRewriteMethod());
  qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
  Query escaped=new RegexpQuery(new Term("field","[a-z]\\/[123]"));
  assertEquals(escaped,qp.parse("/[a-z]\\/[123]/",df));
  Query escaped2=new RegexpQuery(new Term("field","[a-z]\\*[123]"));
  assertEquals(escaped2,qp.parse("/[a-z]\\*[123]/",df));
  BooleanQuery.Builder complex=new BooleanQuery.Builder();
  complex.add(new RegexpQuery(new Term("field","[a-z]\\/[123]")),Occur.MUST);
  complex.add(new TermQuery(new Term("path","/etc/init.d/")),Occur.MUST);
  complex.add(new TermQuery(new Term("field","/etc/init[.]d/lucene/")),Occur.SHOULD);
  assertEquals(complex.build(),qp.parse("/[a-z]\\/[123]/ AND path:\"/etc/init.d/\" OR \"/etc\\/init\\[.\\]d/lucene/\" ",df));
  Query re=new RegexpQuery(new Term("field","http.*"));
  assertEquals(re,qp.parse("field:/http.*/",df));
  assertEquals(re,qp.parse("/http.*/",df));
  re=new RegexpQuery(new Term("field","http~0.5"));
  assertEquals(re,qp.parse("field:/http~0.5/",df));
  assertEquals(re,qp.parse("/http~0.5/",df));
  re=new RegexpQuery(new Term("field","boo"));
  assertEquals(re,qp.parse("field:/boo/",df));
  assertEquals(re,qp.parse("/boo/",df));
  assertEquals(new TermQuery(new Term("field","/boo/")),qp.parse("\"/boo/\"",df));
  assertEquals(new TermQuery(new Term("field","/boo/")),qp.parse("\\/boo\\/",df));
  BooleanQuery.Builder two=new BooleanQuery.Builder();
  two.add(new RegexpQuery(new Term("field","foo")),Occur.SHOULD);
  two.add(new RegexpQuery(new Term("field","bar")),Occur.SHOULD);
  assertEquals(two.build(),qp.parse("field:/foo/ field:/bar/",df));
  assertEquals(two.build(),qp.parse("/foo/ /bar/",df));
}
