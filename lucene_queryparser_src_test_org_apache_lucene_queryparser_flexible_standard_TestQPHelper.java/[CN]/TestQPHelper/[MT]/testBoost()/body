{
  CharacterRunAutomaton stopSet=new CharacterRunAutomaton(Automata.makeString("on"));
  Analyzer oneStopAnalyzer=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,stopSet);
  StandardQueryParser qp=new StandardQueryParser();
  qp.setAnalyzer(oneStopAnalyzer);
  Query q=qp.parse("on^1.0","field");
  assertNotNull(q);
  q=qp.parse("\"hello\"^2.0","field");
  assertNotNull(q);
  assertEquals(((BoostQuery)q).getBoost(),(float)2.0,(float)0.5);
  q=qp.parse("hello^2.0","field");
  assertNotNull(q);
  assertEquals(((BoostQuery)q).getBoost(),(float)2.0,(float)0.5);
  q=qp.parse("\"on\"^1.0","field");
  assertNotNull(q);
  StandardQueryParser qp2=new StandardQueryParser();
  qp2.setAnalyzer(new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,MockTokenFilter.ENGLISH_STOPSET));
  q=qp2.parse("the^3","field");
  assertNotNull(q);
  assertEquals("",q.toString());
  assertFalse(q instanceof BoostQuery);
}
