{
  final Codec codec=Codec.getDefault();
  SegmentMerger merger=new SegmentMerger(InfoStream.getDefault(),mergedDir,IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,mergedSegment,MergeState.CheckAbort.NONE,null,new FieldInfos(new FieldInfos.FieldNumberBiMap()),codec,newIOContext(random));
  merger.add(reader1);
  merger.add(reader2);
  MergeState mergeState=merger.merge();
  int docsMerged=mergeState.mergedDocCount;
  assertTrue(docsMerged == 2);
  final FieldInfos fieldInfos=mergeState.fieldInfos;
  SegmentReader mergedReader=SegmentReader.get(false,mergedDir,new SegmentInfo(mergedSegment,docsMerged,mergedDir,false,codec,fieldInfos),true,IndexReader.DEFAULT_TERMS_INDEX_DIVISOR,newIOContext(random));
  assertTrue(mergedReader != null);
  assertTrue(mergedReader.numDocs() == 2);
  Document newDoc1=mergedReader.document(0);
  assertTrue(newDoc1 != null);
  assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());
  Document newDoc2=mergedReader.document(1);
  assertTrue(newDoc2 != null);
  assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());
  DocsEnum termDocs=MultiFields.getTermDocsEnum(mergedReader,MultiFields.getLiveDocs(mergedReader),DocHelper.TEXT_FIELD_2_KEY,new BytesRef("field"));
  assertTrue(termDocs != null);
  assertTrue(termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);
  Collection<String> stored=mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);
  assertTrue(stored != null);
  assertTrue("We do not have 3 fields that were indexed with term vector",stored.size() == 3);
  Terms vector=mergedReader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);
  assertNotNull(vector);
  assertEquals(3,vector.getUniqueTermCount());
  TermsEnum termsEnum=vector.iterator(null);
  int i=0;
  while (termsEnum.next() != null) {
    String term=termsEnum.term().utf8ToString();
    int freq=(int)termsEnum.totalTermFreq();
    assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);
    assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);
    i++;
  }
  TestSegmentReader.checkNorms(mergedReader);
  mergedReader.close();
}
