{
  Analyzer analyzer=new MockAnalyzer(random());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwcWithSuggestField(analyzer,"suggest_field_1","suggest_field_2","suggest_field_3"));
  int num=Math.min(1000,atLeast(100));
  final String prefix1="abc1_";
  final String prefix2="abc2_";
  final String prefix3="abc3_";
  final Entry[] entries1=new Entry[num];
  final Entry[] entries2=new Entry[num];
  final Entry[] entries3=new Entry[num];
  for (int i=0; i < num; i++) {
    int weight=num - (i + 1);
    entries1[i]=new Entry(prefix1 + weight,weight);
    entries2[i]=new Entry(prefix2 + weight,weight);
    entries3[i]=new Entry(prefix3 + weight,weight);
  }
  for (int i=0; i < num; i++) {
    Document doc=new Document();
    doc.add(newSuggestField("suggest_field_1",prefix1 + i,i));
    doc.add(newSuggestField("suggest_field_2",prefix2 + i,i));
    doc.add(newSuggestField("suggest_field_3",prefix3 + i,i));
    iw.addDocument(doc);
    if (rarely()) {
      iw.commit();
    }
  }
  DirectoryReader reader=iw.getReader();
  int numThreads=TestUtil.nextInt(random(),2,7);
  Thread threads[]=new Thread[numThreads];
  final CyclicBarrier startingGun=new CyclicBarrier(numThreads + 1);
  final CopyOnWriteArrayList<Throwable> errors=new CopyOnWriteArrayList<>();
  final SuggestIndexSearcher indexSearcher=new SuggestIndexSearcher(reader,analyzer);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          startingGun.await();
          TopSuggestDocs suggest=indexSearcher.suggest("suggest_field_1",prefix1,num);
          assertSuggestions(suggest,entries1);
          suggest=indexSearcher.suggest("suggest_field_2",prefix2,num);
          assertSuggestions(suggest,entries2);
          suggest=indexSearcher.suggest("suggest_field_3",prefix3,num);
          assertSuggestions(suggest,entries3);
        }
 catch (        Throwable e) {
          errors.add(e);
        }
      }
    }
;
    threads[i].start();
  }
  startingGun.await();
  for (  Thread t : threads) {
    t.join();
  }
  assertTrue(errors.toString(),errors.isEmpty());
  reader.close();
  iw.close();
}
