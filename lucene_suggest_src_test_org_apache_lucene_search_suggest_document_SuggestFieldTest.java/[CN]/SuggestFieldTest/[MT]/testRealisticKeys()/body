{
  Analyzer analyzer=new MockAnalyzer(random());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwcWithSuggestField(analyzer,"suggest_field"));
  LineFileDocs lineFileDocs=new LineFileDocs(random());
  int num=Math.min(1000,atLeast(100));
  Map<String,Long> mappings=new HashMap<>();
  for (int i=0; i < num; i++) {
    Document document=lineFileDocs.nextDoc();
    String title=document.getField("title").stringValue();
    long weight=Math.abs(random().nextLong());
    Long prevWeight=mappings.get(title);
    if (prevWeight == null || prevWeight < weight) {
      mappings.put(title,weight);
    }
    Document doc=new Document();
    doc.add(newSuggestField("suggest_field",title,weight));
    iw.addDocument(doc);
    if (rarely()) {
      iw.commit();
    }
  }
  DirectoryReader reader=iw.getReader();
  SuggestIndexSearcher indexSearcher=new SuggestIndexSearcher(reader,analyzer);
  for (  Map.Entry<String,Long> entry : mappings.entrySet()) {
    String title=entry.getKey();
    TopSuggestDocs suggest=indexSearcher.suggest("suggest_field",title,mappings.size());
    assertTrue(suggest.totalHits > 0);
    boolean matched=false;
    for (    ScoreDoc scoreDoc : suggest.scoreDocs) {
      matched=Float.compare(scoreDoc.score,(float)entry.getValue()) == 0;
      if (matched) {
        break;
      }
    }
    assertTrue("at least one of the entries should have the score",matched);
  }
  reader.close();
  iw.close();
}
