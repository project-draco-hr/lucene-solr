{
  Hashtable tokenHash=new Hashtable();
  final int maxFieldLength=10000;
  Analyzer analyzer=new StandardAnalyzer();
  Enumeration fields=doc.fields();
  while (fields.hasMoreElements()) {
    Field field=(Field)fields.nextElement();
    String fieldName=field.name();
    if (field.isIndexed()) {
      if (field.isTokenized()) {
        Reader reader;
        if (field.readerValue() != null)         reader=field.readerValue();
 else         if (field.stringValue() != null)         reader=new StringReader(field.stringValue());
 else         throw new IllegalArgumentException("field must have either String or Reader value");
        int position=0;
        TokenStream stream=analyzer.tokenStream(fieldName,reader);
        try {
          for (Token t=stream.next(); t != null; t=stream.next()) {
            position+=(t.getPositionIncrement() - 1);
            position++;
            String name=t.termText();
            Integer Count=(Integer)tokenHash.get(name);
            if (Count == null) {
              tokenHash.put(name,new Integer(1));
            }
 else {
              int count=Count.intValue();
              tokenHash.put(name,new Integer(count + 1));
            }
            if (position > maxFieldLength)             break;
          }
        }
  finally {
          stream.close();
        }
      }
    }
  }
  Entry[] sortedHash=getSortedHashtableEntries(tokenHash);
  for (int ii=0; ii < sortedHash.length && ii < 10; ii++) {
    Entry currentEntry=sortedHash[ii];
    message((ii + 1) + ":" + currentEntry.getKey()+ " "+ currentEntry.getValue());
  }
}
