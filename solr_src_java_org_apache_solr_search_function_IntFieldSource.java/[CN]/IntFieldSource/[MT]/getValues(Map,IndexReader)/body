{
  final int[] arr=(parser == null) ? cache.getInts(reader,field) : cache.getInts(reader,field,parser);
  return new DocValues(){
    final MutableValueInt val=new MutableValueInt();
    public float floatVal(    int doc){
      return (float)arr[doc];
    }
    public int intVal(    int doc){
      return (int)arr[doc];
    }
    public long longVal(    int doc){
      return (long)arr[doc];
    }
    public double doubleVal(    int doc){
      return (double)arr[doc];
    }
    public String strVal(    int doc){
      return Float.toString(arr[doc]);
    }
    public String toString(    int doc){
      return description() + '=' + intVal(doc);
    }
    @Override public ValueSourceScorer getRangeScorer(    IndexReader reader,    String lowerVal,    String upperVal,    boolean includeLower,    boolean includeUpper){
      int lower, upper;
      if (lowerVal == null) {
        lower=Integer.MIN_VALUE;
      }
 else {
        lower=Integer.parseInt(lowerVal);
        if (!includeLower && lower < Integer.MAX_VALUE)         lower++;
      }
      if (upperVal == null) {
        upper=Integer.MAX_VALUE;
      }
 else {
        upper=Integer.parseInt(upperVal);
        if (!includeUpper && upper > Integer.MIN_VALUE)         upper--;
      }
      final int ll=lower;
      final int uu=upper;
      return new ValueSourceScorer(reader,this){
        @Override public boolean matchesValue(        int doc){
          int val=arr[doc];
          return val >= ll && val <= uu;
        }
      }
;
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final int[] intArr=arr;
        private final MutableValueInt mval=new MutableValueInt();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=intArr[doc];
        }
      }
;
    }
  }
;
}
