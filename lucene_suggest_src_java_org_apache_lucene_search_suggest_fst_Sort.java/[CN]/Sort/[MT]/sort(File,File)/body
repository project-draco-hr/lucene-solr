{
  sortInfo=new SortInfo();
  sortInfo.totalTime=System.currentTimeMillis();
  output.delete();
  ArrayList<File> merges=new ArrayList<File>();
  ByteSequencesReader is=new ByteSequencesReader(input);
  boolean success=false;
  try {
    int lines=0;
    while ((lines=readPartition(is)) > 0) {
      merges.add(sortPartition(lines));
      sortInfo.tempMergeFiles++;
      sortInfo.lines+=lines;
      if (merges.size() == maxTempFiles) {
        File intermediate=File.createTempFile("sort","intermediate",tempDirectory);
        mergePartitions(merges,intermediate);
        for (        File file : merges) {
          file.delete();
        }
        merges.clear();
        merges.add(intermediate);
        sortInfo.tempMergeFiles++;
      }
    }
    success=true;
  }
  finally {
    if (success)     IOUtils.close(is);
 else     IOUtils.closeWhileHandlingException(is);
  }
  if (merges.size() == 1) {
    File single=merges.get(0);
    if (!single.renameTo(output)) {
      copy(single,output);
      single.delete();
    }
  }
 else {
    mergePartitions(merges,output);
    for (    File file : merges) {
      file.delete();
    }
  }
  sortInfo.totalTime=(System.currentTimeMillis() - sortInfo.totalTime);
  return sortInfo;
}
