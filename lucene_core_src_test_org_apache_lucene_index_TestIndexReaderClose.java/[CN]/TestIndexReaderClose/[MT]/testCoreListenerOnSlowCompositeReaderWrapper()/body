{
  RandomIndexWriter w=new RandomIndexWriter(random(),newDirectory());
  final int numDocs=TestUtil.nextInt(random(),1,5);
  for (int i=0; i < numDocs; ++i) {
    w.addDocument(new Document());
    if (random().nextBoolean()) {
      w.commit();
    }
  }
  w.commit();
  w.close();
  final IndexReader reader=DirectoryReader.open(w.w.getDirectory());
  final LeafReader leafReader=SlowCompositeReaderWrapper.wrap(reader);
  final int numListeners=TestUtil.nextInt(random(),1,10);
  final List<LeafReader.CoreClosedListener> listeners=new ArrayList<>();
  AtomicInteger counter=new AtomicInteger(numListeners);
  for (int i=0; i < numListeners; ++i) {
    CountCoreListener listener=new CountCoreListener(counter,leafReader.getCoreCacheKey());
    listeners.add(listener);
    leafReader.addCoreClosedListener(listener);
  }
  for (int i=0; i < 100; ++i) {
    leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));
  }
  final int removed=random().nextInt(numListeners);
  Collections.shuffle(listeners,random());
  for (int i=0; i < removed; ++i) {
    leafReader.removeCoreClosedListener(listeners.get(i));
  }
  assertEquals(numListeners,counter.get());
  if (random().nextBoolean()) {
    reader.close();
  }
 else {
    leafReader.close();
  }
  assertEquals(removed,counter.get());
  w.w.getDirectory().close();
}
