{
  final int iters=1000 + 1 + random().nextInt(20);
  for (int j=0; j < iters; j++) {
    Directory dir=newDirectory();
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(random(),new MockAnalyzer(random())));
    writer.commit();
    writer.close();
    DirectoryReader open=DirectoryReader.open(dir);
    final boolean throwOnClose=!rarely();
    LeafReader wrap=SlowCompositeReaderWrapper.wrap(open);
    FilterLeafReader reader=new FilterLeafReader(wrap){
      @Override protected void doClose() throws IOException {
        super.doClose();
        if (throwOnClose) {
          throw new IllegalStateException("BOOM!");
        }
      }
    }
;
    int listenerCount=random().nextInt(20);
    AtomicInteger count=new AtomicInteger();
    boolean faultySet=false;
    for (int i=0; i < listenerCount; i++) {
      if (rarely()) {
        faultySet=true;
        reader.addReaderClosedListener(new FaultyListener());
      }
 else {
        count.incrementAndGet();
        reader.addReaderClosedListener(new CountListener(count));
      }
    }
    if (!faultySet && !throwOnClose) {
      reader.addReaderClosedListener(new FaultyListener());
    }
    try {
      reader.close();
      fail("expected Exception");
    }
 catch (    IllegalStateException ex) {
      if (throwOnClose) {
        assertEquals("BOOM!",ex.getMessage());
      }
 else {
        assertEquals("GRRRRRRRRRRRR!",ex.getMessage());
      }
    }
    try {
      reader.fields();
      fail("we are closed");
    }
 catch (    AlreadyClosedException ex) {
    }
    if (random().nextBoolean()) {
      reader.close();
    }
    assertEquals(0,count.get());
    wrap.close();
    dir.close();
  }
}
