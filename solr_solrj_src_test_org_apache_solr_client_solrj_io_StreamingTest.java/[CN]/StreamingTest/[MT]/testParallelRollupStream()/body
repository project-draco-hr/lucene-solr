{
  indexr(id,"0","a_s","hello0","a_i","100","a_f","0");
  indexr(id,"2","a_s","hello0","a_i","2","a_f","0");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello3","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello1","a_i","1","a_f","1");
  indexr(id,"6","a_s","hello1","a_i","1","a_f","1");
  indexr(id,"7","a_s","hello1","a_i","1","a_f","1");
  commit();
  String zkHost=zkServer.getZkAddress();
  Bucket[] buckets={new Bucket("a_s")};
  Metric[] metrics={new SumMetric("a_i",false),new MeanMetric("a_i",false),new CountMetric(),new MinMetric("a_i",false),new MaxMetric("a_i",false)};
  Map params=mapParams("q","*:*","fl","id,a_s,a_i","sort","a_s asc","partitionKeys","a_s");
  CloudSolrStream stream=new CloudSolrStream(zkHost,"collection1",params);
  RollupStream rostream=new RollupStream(stream,buckets,metrics);
  ParallelStream rstream=new ParallelStream(zkHost,"collection1",rostream,2,new AscFieldComp("buckets"));
  rstream.open();
  Tuple tuple=rstream.read();
  String b=(String)tuple.get("buckets");
  List<Double> values=(List<Double>)tuple.get("metricValues");
  assert(b.equals("hello0"));
  assert(values.get(0) == 102.0d);
  assert(values.get(1) == 51.0d);
  assert(values.get(2) == 2.0d);
  assert(values.get(3) == 2.0d);
  assert(values.get(4) == 100.0d);
  tuple=rstream.read();
  b=(String)tuple.get("buckets");
  values=(List<Double>)tuple.get("metricValues");
  assert(b.equals("hello1"));
  assert(values.get(0) == 3.0d);
  assert(values.get(1) == 1.0d);
  assert(values.get(2) == 3.0d);
  assert(values.get(3) == 1.0d);
  assert(values.get(4) == 1.0d);
  tuple=rstream.read();
  b=(String)tuple.get("buckets");
  values=(List<Double>)tuple.get("metricValues");
  assert(b.equals("hello3"));
  assert(values.get(0) == 7.0d);
  assert(values.get(1) == 3.5d);
  assert(values.get(2) == 2.0d);
  assert(values.get(3) == 3.0d);
  assert(values.get(4) == 4.0d);
  tuple=rstream.read();
  assert(tuple.EOF);
  rstream.close();
  del("*:*");
  commit();
}
