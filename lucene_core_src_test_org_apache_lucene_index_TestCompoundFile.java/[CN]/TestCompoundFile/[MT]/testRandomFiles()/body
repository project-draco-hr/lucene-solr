{
  String segment="test";
  int chunk=1024;
  createRandomFile(dir,segment + ".zero",0);
  createRandomFile(dir,segment + ".one",1);
  createRandomFile(dir,segment + ".ten",10);
  createRandomFile(dir,segment + ".hundred",100);
  createRandomFile(dir,segment + ".big1",chunk);
  createRandomFile(dir,segment + ".big2",chunk - 1);
  createRandomFile(dir,segment + ".big3",chunk + 1);
  createRandomFile(dir,segment + ".big4",3 * chunk);
  createRandomFile(dir,segment + ".big5",3 * chunk - 1);
  createRandomFile(dir,segment + ".big6",3 * chunk + 1);
  createRandomFile(dir,segment + ".big7",1000 * chunk);
  createRandomFile(dir,"onetwothree",100);
  createRandomFile(dir,segment + ".notIn",50);
  createRandomFile(dir,segment + ".notIn2",51);
  CompoundFileDirectory csw=new CompoundFileDirectory(dir,"test.cfs",newIOContext(random()),true);
  final String data[]=new String[]{".zero",".one",".ten",".hundred",".big1",".big2",".big3",".big4",".big5",".big6",".big7"};
  for (int i=0; i < data.length; i++) {
    String fileName=segment + data[i];
    dir.copy(csw,fileName,fileName,newIOContext(random()));
  }
  csw.close();
  CompoundFileDirectory csr=new CompoundFileDirectory(dir,"test.cfs",newIOContext(random()),false);
  for (int i=0; i < data.length; i++) {
    IndexInput check=dir.openInput(segment + data[i],newIOContext(random()));
    IndexInput test=csr.openInput(segment + data[i],newIOContext(random()));
    assertSameStreams(data[i],check,test);
    assertSameSeekBehavior(data[i],check,test);
    test.close();
    check.close();
  }
  csr.close();
}
