{
  for (  int partitionSize : partitionSizes) {
    FacetIndexingParams fip=getFacetIndexingParams(partitionSize);
    OrdinalPolicy op=fip.getCategoryListParams(null).getOrdinalPolicy(null);
    initIndex(fip);
    List<FacetRequest> facetRequests=new ArrayList<FacetRequest>();
    facetRequests.add(new CountFacetRequest(new CategoryPath("a"),100));
    CountFacetRequest cfra=new CountFacetRequest(new CategoryPath("a"),100);
    cfra.setDepth(3);
    cfra.setResultMode(ResultMode.GLOBAL_FLAT);
    facetRequests.add(cfra);
    facetRequests.add(new CountFacetRequest(new CategoryPath("a","b"),100));
    facetRequests.add(new CountFacetRequest(new CategoryPath("a","b","1"),100));
    facetRequests.add(new CountFacetRequest(new CategoryPath("a","c"),100));
    FacetSearchParams sParams=getFacetSearchParams(facetRequests,fip);
    FacetsCollector fc=new StandardFacetsCollector(sParams,indexReader,taxoReader){
      @Override protected FacetsAccumulator initFacetsAccumulator(      FacetSearchParams facetSearchParams,      IndexReader indexReader,      TaxonomyReader taxonomyReader){
        FacetsAccumulator fa=new StandardFacetsAccumulator(facetSearchParams,indexReader,taxonomyReader);
        fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);
        return fa;
      }
    }
;
    searcher.search(new MatchAllDocsQuery(),fc);
    List<FacetResult> facetResults=fc.getFacetResults();
    FacetResult fr=facetResults.get(0);
    FacetResultNode parentRes=fr.getFacetResultNode();
    if (op == OrdinalPolicy.ALL_PARENTS) {
      assertEquals(13.0,parentRes.value,Double.MIN_VALUE);
    }
    FacetResultNode[] frn=resultNodesAsArray(parentRes);
    assertEquals(7.0,frn[0].value,Double.MIN_VALUE);
    assertEquals(6.0,frn[1].value,Double.MIN_VALUE);
    fr=facetResults.get(1);
    parentRes=fr.getFacetResultNode();
    if (op == OrdinalPolicy.ALL_PARENTS) {
      assertEquals(13.0,parentRes.value,Double.MIN_VALUE);
    }
    frn=resultNodesAsArray(parentRes);
    assertEquals(7.0,frn[0].value,Double.MIN_VALUE);
    assertEquals(6.0,frn[1].value,Double.MIN_VALUE);
    assertEquals(2.0,frn[2].value,Double.MIN_VALUE);
    assertEquals(2.0,frn[3].value,Double.MIN_VALUE);
    assertEquals(1.0,frn[4].value,Double.MIN_VALUE);
    assertEquals(1.0,frn[5].value,Double.MIN_VALUE);
    fr=facetResults.get(2);
    parentRes=fr.getFacetResultNode();
    if (op == OrdinalPolicy.ALL_PARENTS) {
      assertEquals(7.0,parentRes.value,Double.MIN_VALUE);
    }
    frn=resultNodesAsArray(parentRes);
    assertEquals(2.0,frn[0].value,Double.MIN_VALUE);
    assertEquals(2.0,frn[1].value,Double.MIN_VALUE);
    assertEquals(1.0,frn[2].value,Double.MIN_VALUE);
    assertEquals(1.0,frn[3].value,Double.MIN_VALUE);
    fr=facetResults.get(3);
    parentRes=fr.getFacetResultNode();
    if (op == OrdinalPolicy.ALL_PARENTS) {
      assertEquals(2.0,parentRes.value,Double.MIN_VALUE);
    }
    frn=resultNodesAsArray(parentRes);
    assertEquals(0,frn.length);
    fr=facetResults.get(4);
    parentRes=fr.getFacetResultNode();
    if (op == OrdinalPolicy.ALL_PARENTS) {
      assertEquals(6.0,parentRes.value,Double.MIN_VALUE);
    }
    frn=resultNodesAsArray(parentRes);
    assertEquals(1.0,frn[0].value,Double.MIN_VALUE);
    closeAll();
  }
}
