{
  for (  int partitionSize : partitionSizes) {
    initIndex(partitionSize);
    FacetSearchParams sParams=getFacetedSearchParams(partitionSize);
    sParams.addFacetRequest(new CountFacetRequest(new CategoryPath("a"),100));
    CountFacetRequest cfra=new CountFacetRequest(new CategoryPath("a"),100);
    cfra.setDepth(3);
    cfra.setResultMode(ResultMode.GLOBAL_FLAT);
    sParams.addFacetRequest(cfra);
    sParams.addFacetRequest(new CountFacetRequest(new CategoryPath("a","b"),100));
    sParams.addFacetRequest(new CountFacetRequest(new CategoryPath("a","b","1"),100));
    sParams.addFacetRequest(new CountFacetRequest(new CategoryPath("a","c"),100));
    FacetsCollector fc=new FacetsCollector(sParams,indexReader,taxoReader){
      @Override protected FacetsAccumulator initFacetsAccumulator(      FacetSearchParams facetSearchParams,      IndexReader indexReader,      TaxonomyReader taxonomyReader){
        FacetsAccumulator fa=new StandardFacetsAccumulator(facetSearchParams,indexReader,taxonomyReader);
        fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);
        return fa;
      }
    }
;
    searcher.search(new MatchAllDocsQuery(),fc);
    long start=System.currentTimeMillis();
    List<FacetResult> facetResults=fc.getFacetResults();
    long end=System.currentTimeMillis();
    if (VERBOSE) {
      System.out.println("Time: " + (end - start));
    }
    FacetResult fr=facetResults.get(0);
    FacetResultNode parentRes=fr.getFacetResultNode();
    assertEquals(13.0,parentRes.getValue(),Double.MIN_VALUE);
    FacetResultNode[] frn=resultNodesAsArray(parentRes);
    assertEquals(7.0,frn[0].getValue(),Double.MIN_VALUE);
    assertEquals(6.0,frn[1].getValue(),Double.MIN_VALUE);
    fr=facetResults.get(1);
    parentRes=fr.getFacetResultNode();
    assertEquals(13.0,parentRes.getValue(),Double.MIN_VALUE);
    frn=resultNodesAsArray(parentRes);
    assertEquals(7.0,frn[0].getValue(),Double.MIN_VALUE);
    assertEquals(6.0,frn[1].getValue(),Double.MIN_VALUE);
    assertEquals(2.0,frn[2].getValue(),Double.MIN_VALUE);
    assertEquals(2.0,frn[3].getValue(),Double.MIN_VALUE);
    assertEquals(1.0,frn[4].getValue(),Double.MIN_VALUE);
    assertEquals(1.0,frn[5].getValue(),Double.MIN_VALUE);
    fr=facetResults.get(2);
    parentRes=fr.getFacetResultNode();
    assertEquals(7.0,parentRes.getValue(),Double.MIN_VALUE);
    frn=resultNodesAsArray(parentRes);
    assertEquals(2.0,frn[0].getValue(),Double.MIN_VALUE);
    assertEquals(2.0,frn[1].getValue(),Double.MIN_VALUE);
    assertEquals(1.0,frn[2].getValue(),Double.MIN_VALUE);
    assertEquals(1.0,frn[3].getValue(),Double.MIN_VALUE);
    fr=facetResults.get(3);
    parentRes=fr.getFacetResultNode();
    assertEquals(2.0,parentRes.getValue(),Double.MIN_VALUE);
    frn=resultNodesAsArray(parentRes);
    assertEquals(0,frn.length);
    fr=facetResults.get(4);
    parentRes=fr.getFacetResultNode();
    assertEquals(6.0,parentRes.getValue(),Double.MIN_VALUE);
    frn=resultNodesAsArray(parentRes);
    assertEquals(1.0,frn[0].getValue(),Double.MIN_VALUE);
    closeAll();
  }
}
