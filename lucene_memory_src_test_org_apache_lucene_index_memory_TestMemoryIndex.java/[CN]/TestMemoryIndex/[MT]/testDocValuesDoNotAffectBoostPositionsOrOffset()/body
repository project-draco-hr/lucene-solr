{
  Document doc=new Document();
  doc.add(new BinaryDocValuesField("text",new BytesRef("quick brown fox")));
  doc.add(new TextField("text","quick brown fox",Field.Store.NO));
  MemoryIndex mi=MemoryIndex.fromDocument(doc,analyzer,true,true);
  LeafReader leafReader=mi.createSearcher().getIndexReader().leaves().get(0).reader();
  TermsEnum tenum=leafReader.terms("text").iterator();
  assertEquals("brown",tenum.next().utf8ToString());
  PostingsEnum penum=tenum.postings(null,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(1,penum.nextPosition());
  assertEquals(6,penum.startOffset());
  assertEquals(11,penum.endOffset());
  assertEquals("fox",tenum.next().utf8ToString());
  penum=tenum.postings(penum,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(2,penum.nextPosition());
  assertEquals(12,penum.startOffset());
  assertEquals(15,penum.endOffset());
  assertEquals("quick",tenum.next().utf8ToString());
  penum=tenum.postings(penum,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(0,penum.nextPosition());
  assertEquals(0,penum.startOffset());
  assertEquals(5,penum.endOffset());
  BinaryDocValues binaryDocValues=leafReader.getBinaryDocValues("text");
  assertEquals("quick brown fox",binaryDocValues.get(0).utf8ToString());
}
