{
  MemoryIndex mi=new MemoryIndex(true,true);
  mi.addField(new TextField("text","quick brown fox",Field.Store.NO),analyzer,5f);
  mi.addField(new BinaryPoint("text","quick".getBytes(StandardCharsets.UTF_8)),analyzer,5f);
  mi.addField(new BinaryPoint("text","brown".getBytes(StandardCharsets.UTF_8)),analyzer,5f);
  LeafReader leafReader=mi.createSearcher().getIndexReader().leaves().get(0).reader();
  TermsEnum tenum=leafReader.terms("text").iterator();
  assertEquals("brown",tenum.next().utf8ToString());
  PostingsEnum penum=tenum.postings(null,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(1,penum.nextPosition());
  assertEquals(6,penum.startOffset());
  assertEquals(11,penum.endOffset());
  assertEquals("fox",tenum.next().utf8ToString());
  penum=tenum.postings(penum,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(2,penum.nextPosition());
  assertEquals(12,penum.startOffset());
  assertEquals(15,penum.endOffset());
  assertEquals("quick",tenum.next().utf8ToString());
  penum=tenum.postings(penum,PostingsEnum.OFFSETS);
  assertEquals(0,penum.nextDoc());
  assertEquals(1,penum.freq());
  assertEquals(0,penum.nextPosition());
  assertEquals(0,penum.startOffset());
  assertEquals(5,penum.endOffset());
  IndexSearcher indexSearcher=mi.createSearcher();
  assertEquals(1,indexSearcher.count(BinaryPoint.newExactQuery("text","quick".getBytes(StandardCharsets.UTF_8))));
  assertEquals(1,indexSearcher.count(BinaryPoint.newExactQuery("text","brown".getBytes(StandardCharsets.UTF_8))));
  assertEquals(0,indexSearcher.count(BinaryPoint.newExactQuery("text","jumps".getBytes(StandardCharsets.UTF_8))));
}
