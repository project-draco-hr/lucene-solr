{
  MemoryIndex mi=new MemoryIndex();
  mi.addField("f1","some text",analyzer);
  assertThat(mi.search(new MatchAllDocsQuery()),not(is(0.0f)));
  assertThat(mi.search(new TermQuery(new Term("f1","some"))),not(is(0.0f)));
  mi.addField("f2","some more text",analyzer);
  assertThat(mi.search(new TermQuery(new Term("f2","some"))),not(is(0.0f)));
  mi.freeze();
  try {
    mi.addField("f3","and yet more",analyzer);
    fail("Expected an IllegalArgumentException when adding a field after calling freeze()");
  }
 catch (  RuntimeException e) {
    assertThat(e.getMessage(),containsString("frozen"));
  }
  try {
    mi.setSimilarity(new BM25Similarity(1,1));
    fail("Expected an IllegalArgumentException when setting the Similarity after calling freeze()");
  }
 catch (  RuntimeException e) {
    assertThat(e.getMessage(),containsString("frozen"));
  }
  assertThat(mi.search(new TermQuery(new Term("f1","some"))),not(is(0.0f)));
  mi.reset();
  mi.addField("f1","wibble",analyzer);
  assertThat(mi.search(new TermQuery(new Term("f1","some"))),is(0.0f));
  assertThat(mi.search(new TermQuery(new Term("f1","wibble"))),not(is(0.0f)));
  mi.setSimilarity(new DefaultSimilarity());
}
