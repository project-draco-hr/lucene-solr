{
  Document doc=new Document();
  doc.add(new NumericDocValuesField("field",29L));
  doc.add(new BinaryDocValuesField("field",new BytesRef("30")));
  try {
    MemoryIndex.fromDocument(doc,analyzer);
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Can't add [BINARY] doc values field [field], because [NUMERIC] doc values field already exists",e.getMessage());
  }
  doc=new Document();
  doc.add(new NumericDocValuesField("field",29L));
  doc.add(new NumericDocValuesField("field",30L));
  try {
    MemoryIndex.fromDocument(doc,analyzer);
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Only one value per field allowed for [NUMERIC] doc values field [field]",e.getMessage());
  }
  doc=new Document();
  doc.add(new TextField("field","a b",Field.Store.NO));
  doc.add(new BinaryDocValuesField("field",new BytesRef("a")));
  doc.add(new BinaryDocValuesField("field",new BytesRef("b")));
  try {
    MemoryIndex.fromDocument(doc,analyzer);
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Only one value per field allowed for [BINARY] doc values field [field]",e.getMessage());
  }
  doc=new Document();
  doc.add(new SortedDocValuesField("field",new BytesRef("a")));
  doc.add(new SortedDocValuesField("field",new BytesRef("b")));
  doc.add(new TextField("field","a b",Field.Store.NO));
  try {
    MemoryIndex.fromDocument(doc,analyzer);
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Only one value per field allowed for [SORTED] doc values field [field]",e.getMessage());
  }
}
