{
  assertJQ(req("qt",rh,SpellCheckComponent.COMPONENT_NAME,"true","q","documenq",SpellCheckComponent.SPELLCHECK_DICT,"threshold",SpellCheckComponent.SPELLCHECK_COUNT,"5",SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"true"),"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]");
  assertJQ(req("qt",rh,SpellCheckComponent.COMPONENT_NAME,"true","q","documenq",SpellCheckComponent.SPELLCHECK_DICT,"threshold_direct",SpellCheckComponent.SPELLCHECK_COUNT,"5",SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"true"),"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]");
  SolrCore core=h.getCore();
  SearchComponent speller=core.getSearchComponent("spellcheck");
  assertTrue("speller is null and it shouldn't be",speller != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(SpellCheckComponent.COMPONENT_NAME,"true");
  params.add(SpellCheckComponent.SPELLCHECK_COUNT,"10");
  params.add(SpellCheckComponent.SPELLCHECK_DICT,"threshold");
  params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"true");
  params.add(CommonParams.Q,"anotheq");
  SolrRequestHandler handler=core.getRequestHandler("spellCheckCompRH");
  SolrQueryResponse rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  SolrQueryRequest req=new LocalSolrQueryRequest(core,params);
  handler.handleRequest(req,rsp);
  req.close();
  NamedList values=rsp.getValues();
  NamedList spellCheck=(NamedList)values.get("spellcheck");
  NamedList suggestions=(NamedList)spellCheck.get("suggestions");
  assertTrue(suggestions.get("suggestion") == null);
  assertTrue((Boolean)suggestions.get("correctlySpelled") == false);
  params.remove(SpellCheckComponent.SPELLCHECK_DICT);
  params.add(SpellCheckComponent.SPELLCHECK_DICT,"threshold_direct");
  rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  req=new LocalSolrQueryRequest(core,params);
  handler.handleRequest(req,rsp);
  req.close();
  values=rsp.getValues();
  spellCheck=(NamedList)values.get("spellcheck");
  suggestions=(NamedList)spellCheck.get("suggestions");
  assertTrue(suggestions.get("suggestion") == null);
  assertTrue((Boolean)suggestions.get("correctlySpelled") == false);
}
