{
  SolrCore core=h.getCore();
  SearchComponent speller=core.getSearchComponent("spellcheck");
  assertTrue("speller is null and it shouldn't be",speller != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.QT,"spellCheckCompRH");
  params.add(SpellCheckComponent.SPELLCHECK_BUILD,"true");
  params.add(CommonParams.Q,"documemt");
  params.add(SpellCheckComponent.COMPONENT_NAME,"true");
  params.add(SpellingParams.SPELLCHECK_DICT,"perDict");
  params.add(SpellingParams.SPELLCHECK_PREFIX + ".perDict.foo","bar");
  params.add(SpellingParams.SPELLCHECK_PREFIX + ".perDict.bar","foo");
  SolrRequestHandler handler=core.getRequestHandler("spellCheckCompRH");
  SolrQueryResponse rsp=new SolrQueryResponse();
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  NamedList values=rsp.getValues();
  NamedList spellCheck=(NamedList)values.get("spellcheck");
  NamedList suggestions=(NamedList)spellCheck.get("suggestions");
  assertNotNull("suggestions",suggestions);
  NamedList suggestion;
  Collection<String> theSuggestion;
  suggestion=(NamedList)suggestions.get("foo");
  assertEquals(1,suggestion.get("numFound"));
  assertEquals(0,suggestion.get("startOffset"));
  assertEquals(suggestion.get("endOffset"),1);
  theSuggestion=(Collection<String>)suggestion.get("suggestion");
  assertEquals(1,theSuggestion.size());
  assertEquals("bar",theSuggestion.iterator().next());
  suggestion=(NamedList)suggestions.get("bar");
  assertEquals(1,suggestion.get("numFound"));
  assertEquals(2,suggestion.get("startOffset"));
  assertEquals(3,suggestion.get("endOffset"));
  theSuggestion=(Collection<String>)suggestion.get("suggestion");
  assertEquals(1,theSuggestion.size());
  assertEquals("foo",theSuggestion.iterator().next());
}
