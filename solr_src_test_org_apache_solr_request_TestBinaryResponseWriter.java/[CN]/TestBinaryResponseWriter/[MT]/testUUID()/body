{
  String s=UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);
  assertU(adoc("id","101","uuid",s));
  assertU(commit());
  LocalSolrQueryRequest req=lrf.makeRequest("q","*:*");
  SolrQueryResponse rsp=h.queryAndResponse(req.getParams().get(CommonParams.QT),req);
  BinaryQueryResponseWriter writer=(BinaryQueryResponseWriter)h.getCore().getQueryResponseWriter("javabin");
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  writer.write(baos,req,rsp);
  NamedList res=(NamedList)new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));
  SolrDocumentList docs=(SolrDocumentList)res.get("response");
  for (  Object doc : docs) {
    SolrDocument document=(SolrDocument)doc;
    assertEquals("Returned object must be a string","java.lang.String",document.getFieldValue("uuid").getClass().getName());
    assertEquals("Wrong UUID string returned",s,document.getFieldValue("uuid"));
  }
}
