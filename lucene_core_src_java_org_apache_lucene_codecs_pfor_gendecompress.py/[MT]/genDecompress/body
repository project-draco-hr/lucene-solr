def genDecompress():
    className = 'PackedIntsDecompress'
    fileName = (className + '.java')
    imports = 'import java.nio.IntBuffer;\n'
    f = open(fileName, 'w')
    w = f.write
    try:
        w('package org.apache.lucene.codecs.pfor;\n')
        w('/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n ')
        w('/* This code is generated, do not modify. See gendecompress.py */\n\n')
        w('import java.nio.IntBuffer;\n\n')
        w('final class PackedIntsDecompress {\n')
        w('\n  // nocommit: assess perf of this to see if specializing is really needed\n')
        for numFrameBits in xrange(1, 33):
            w('\n  // NOTE: hardwired to blockSize == 128\n')
            if USE_SCRATCH:
                w(('  public static void decode%d(final IntBuffer compressedBuffer, final int[] output, final int[] scratch) {\n' % numFrameBits))
            else:
                w(('  public static void decode%d(final IntBuffer compressedBuffer, final int[] output) {\n' % numFrameBits))
            w(('    final int numFrameBits = %d;\n' % numFrameBits))
            w('    final int mask = (int) ((1L<<numFrameBits) - 1);\n')
            w('    int outputOffset = 0;\n')
            w('    for(int step=0;step<4;step++) {\n')
            if USE_SCRATCH:
                w(('      compressedBuffer.get(scratch, 0, %d);\n' % numFrameBits))
            else:
                for i in range(numFrameBits):
                    w((('      int intValue' + str(i)) + ' = compressedBuffer.get();\n'))
            for i in range(32):
                w((((('      output[' + str(i)) + ' + outputOffset] = ') + bitsExpr(i, numFrameBits)) + ';\n'))
            w('      outputOffset += 32;\n')
            w('    }\n')
            w('  }\n')
        w('}\n')
    finally:
        f.close()
