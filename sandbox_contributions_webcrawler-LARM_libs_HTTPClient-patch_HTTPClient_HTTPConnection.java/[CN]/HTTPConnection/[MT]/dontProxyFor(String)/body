{
  host=host.trim().toLowerCase();
  if (host.charAt(0) == '.') {
    if (!non_proxy_dom_list.contains(host)) {
      non_proxy_dom_list.addElement(host);
    }
    return;
  }
  for (int idx=0; idx < host.length(); idx++) {
    if (!Character.isDigit(host.charAt(idx)) && host.charAt(idx) != '.' && host.charAt(idx) != '/') {
      non_proxy_host_list.put(host,"");
      return;
    }
  }
  byte[] ip_addr;
  byte[] ip_mask;
  int slash;
  if ((slash=host.indexOf('/')) != -1) {
    ip_addr=string2arr(host.substring(0,slash));
    ip_mask=string2arr(host.substring(slash + 1));
    if (ip_addr.length != ip_mask.length) {
      throw new ParseException("length of IP-address (" + ip_addr.length + ") != length of netmask ("+ ip_mask.length+ ")");
    }
  }
 else {
    ip_addr=string2arr(host);
    ip_mask=new byte[ip_addr.length];
    for (int idx=0; idx < ip_mask.length; idx++) {
      ip_mask[idx]=(byte)255;
    }
  }
  ip_loop:   for (int idx=0; idx < non_proxy_addr_list.size(); idx++) {
    byte[] addr=(byte[])non_proxy_addr_list.elementAt(idx);
    byte[] mask=(byte[])non_proxy_mask_list.elementAt(idx);
    if (addr.length != ip_addr.length) {
      continue;
    }
    for (int idx2=0; idx2 < addr.length; idx2++) {
      if ((ip_addr[idx2] & mask[idx2]) != (addr[idx2] & mask[idx2]) || (mask[idx2] != ip_mask[idx2])) {
        continue ip_loop;
      }
    }
    return;
  }
  non_proxy_addr_list.addElement(ip_addr);
  non_proxy_mask_list.addElement(ip_mask);
}
