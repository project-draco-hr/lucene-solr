{
  final CompiledAutomaton c=build(maxDeterminizedStates,terms);
  final BytesRef[] termBytes=new BytesRef[terms.length];
  for (int idx=0; idx < terms.length; idx++) {
    termBytes[idx]=new BytesRef(terms[idx]);
  }
  Arrays.sort(termBytes);
  if (VERBOSE) {
    System.out.println("\nTEST: terms in unicode order");
    for (    BytesRef t : termBytes) {
      System.out.println("  " + t.utf8ToString());
    }
  }
  for (int iter=0; iter < 100 * RANDOM_MULTIPLIER; iter++) {
    final String s=random().nextInt(10) == 1 ? terms[random().nextInt(terms.length)] : randomString();
    if (VERBOSE) {
      System.out.println("\nTEST: floor(" + s + ")");
    }
    int loc=Arrays.binarySearch(termBytes,new BytesRef(s));
    final String expected;
    if (loc >= 0) {
      expected=s;
    }
 else {
      loc=-(loc + 1);
      if (loc == 0) {
        expected=null;
      }
 else {
        expected=termBytes[loc - 1].utf8ToString();
      }
    }
    if (VERBOSE) {
      System.out.println("  expected=" + expected);
    }
    testFloor(c,s,expected);
  }
}
