{
  fieldsStream.writeVInt(info.number);
  int bits=0;
  final BytesRef bytes;
  final String string;
  Number number=field.numericValue();
  if (number != null) {
    if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
      bits|=FIELD_IS_NUMERIC_INT;
    }
 else     if (number instanceof Long) {
      bits|=FIELD_IS_NUMERIC_LONG;
    }
 else     if (number instanceof Float) {
      bits|=FIELD_IS_NUMERIC_FLOAT;
    }
 else     if (number instanceof Double) {
      bits|=FIELD_IS_NUMERIC_DOUBLE;
    }
 else {
      throw new IllegalArgumentException("cannot store numeric type " + number.getClass());
    }
    string=null;
    bytes=null;
  }
 else {
    bytes=field.binaryValue();
    if (bytes != null) {
      bits|=FIELD_IS_BINARY;
      string=null;
    }
 else {
      string=field.stringValue();
      if (string == null) {
        throw new IllegalArgumentException("field " + field.name() + " is stored but does not have binaryValue, stringValue nor numericValue");
      }
    }
  }
  fieldsStream.writeByte((byte)bits);
  if (bytes != null) {
    fieldsStream.writeVInt(bytes.length);
    fieldsStream.writeBytes(bytes.bytes,bytes.offset,bytes.length);
  }
 else   if (string != null) {
    fieldsStream.writeString(field.stringValue());
  }
 else {
    if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
      fieldsStream.writeInt(number.intValue());
    }
 else     if (number instanceof Long) {
      fieldsStream.writeLong(number.longValue());
    }
 else     if (number instanceof Float) {
      fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));
    }
 else     if (number instanceof Double) {
      fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));
    }
 else {
      throw new AssertionError("Cannot get here");
    }
  }
}
