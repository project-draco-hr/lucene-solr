{
  Directory indexDir=newDirectory();
  TaxonomyWriter tw=new DirectoryTaxonomyWriter(indexDir);
  fillTaxonomy(tw);
  tw.close();
  TaxonomyReader tr=new DirectoryTaxonomyReader(indexDir);
  ParallelTaxonomyArrays ca=tr.getParallelTaxonomyArrays();
  int[] children=ca.children();
  assertEquals(tr.getSize(),children.length);
  int[] olderSiblingArray=ca.siblings();
  assertEquals(tr.getSize(),olderSiblingArray.length);
  int[] parents=tr.getParallelTaxonomyArrays().parents();
  for (int i=0; i < tr.getSize(); i++) {
    int youngestChild=children[i];
    if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {
      assertEquals(i,parents[youngestChild]);
    }
  }
  for (int i=0; i < tr.getSize(); i++) {
    assertTrue("olderSiblingArray[" + i + "] should be <"+ i,olderSiblingArray[i] < i);
  }
  for (int i=0; i < tr.getSize(); i++) {
    int sibling=olderSiblingArray[i];
    if (sibling == TaxonomyReader.INVALID_ORDINAL) {
      continue;
    }
    assertEquals(parents[i],parents[sibling]);
  }
  for (int i=0; i < tr.getSize(); i++) {
    int j;
    for (j=tr.getSize() - 1; j > i; j--) {
      if (parents[j] == i) {
        break;
      }
    }
    if (j == i) {
      j=TaxonomyReader.INVALID_ORDINAL;
    }
    assertEquals(j,children[i]);
  }
  for (int i=0; i < tr.getSize(); i++) {
    int j;
    for (j=i - 1; j >= 0; j--) {
      if (parents[j] == parents[i]) {
        break;
      }
    }
    if (j < 0) {
      j=TaxonomyReader.INVALID_ORDINAL;
    }
    assertEquals(j,olderSiblingArray[i]);
  }
  tr.close();
  indexDir.close();
}
