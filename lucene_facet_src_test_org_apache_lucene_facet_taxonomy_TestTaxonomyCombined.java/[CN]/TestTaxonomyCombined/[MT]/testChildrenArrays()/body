{
  Directory indexDir=newDirectory();
  TaxonomyWriter tw=new DirectoryTaxonomyWriter(indexDir);
  fillTaxonomy(tw);
  tw.close();
  TaxonomyReader tr=new DirectoryTaxonomyReader(indexDir);
  ChildrenArrays ca=tr.getChildrenArrays();
  int[] youngestChildArray=ca.getYoungestChildArray();
  assertEquals(tr.getSize(),youngestChildArray.length);
  int[] olderSiblingArray=ca.getOlderSiblingArray();
  assertEquals(tr.getSize(),olderSiblingArray.length);
  for (int i=0; i < expectedCategories.length; i++) {
    ArrayList<Integer> expectedChildren=new ArrayList<Integer>();
    for (int j=expectedCategories.length - 1; j >= 0; j--) {
      if (expectedCategories[j].length != expectedCategories[i].length + 1) {
        continue;
      }
      boolean ischild=true;
      for (int k=0; k < expectedCategories[i].length; k++) {
        if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {
          ischild=false;
          break;
        }
      }
      if (ischild) {
        expectedChildren.add(j);
      }
    }
    if (expectedChildren.size() == 0) {
      assertEquals(TaxonomyReader.INVALID_ORDINAL,youngestChildArray[i]);
    }
 else {
      int child=youngestChildArray[i];
      assertEquals(expectedChildren.get(0).intValue(),child);
      for (int j=1; j < expectedChildren.size(); j++) {
        child=olderSiblingArray[child];
        assertEquals(expectedChildren.get(j).intValue(),child);
      }
      assertEquals(-1,olderSiblingArray[child]);
    }
  }
  tr.close();
  indexDir.close();
}
