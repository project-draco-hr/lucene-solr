{
  log("#hits = " + h1.size());
  assertEquals("queries should have same #hits",h1.size(),h2customNeutral.size());
  assertEquals("queries should have same #hits",h1.size(),h3CustomMul.size());
  assertEquals("queries should have same #hits",h1.size(),h4CustomAdd.size());
  assertEquals("queries should have same #hits",h1.size(),h5CustomMulAdd.size());
  QueryUtils.check(q1,s);
  QueryUtils.check(q2,s);
  QueryUtils.check(q3,s);
  QueryUtils.check(q4,s);
  QueryUtils.check(q5,s);
  for (Iterator it=h1.keySet().iterator(); it.hasNext(); ) {
    Integer x=(Integer)it.next();
    int doc=x.intValue();
    log("doc = " + doc);
    float fieldScore=expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));
    log("fieldScore = " + fieldScore);
    assertTrue("fieldScore should not be 0",fieldScore > 0);
    float score1=((Float)h1.get(x)).floatValue();
    logResult("score1=",s,q1,doc,score1);
    float score2=((Float)h2customNeutral.get(x)).floatValue();
    logResult("score2=",s,q2,doc,score2);
    assertEquals("same score (just boosted) for neutral",boost * score1,score2,TEST_SCORE_TOLERANCE_DELTA);
    float score3=((Float)h3CustomMul.get(x)).floatValue();
    logResult("score3=",s,q3,doc,score3);
    assertEquals("new score for custom mul",boost * fieldScore * score1,score3,TEST_SCORE_TOLERANCE_DELTA);
    float score4=((Float)h4CustomAdd.get(x)).floatValue();
    logResult("score4=",s,q4,doc,score4);
    assertEquals("new score for custom add",boost * (fieldScore + score1),score4,TEST_SCORE_TOLERANCE_DELTA);
    float score5=((Float)h5CustomMulAdd.get(x)).floatValue();
    logResult("score5=",s,q5,doc,score5);
    assertEquals("new score for custom mul add",boost * fieldScore * (score1 + fieldScore),score5,TEST_SCORE_TOLERANCE_DELTA);
  }
}
