{
  int numTerms=atLeast(100);
  int digits=TestUtil.nextInt(random(),2,3);
  Set<String> terms=new HashSet<>();
  while (terms.size() < numTerms) {
    terms.add(randomSimpleString(digits));
  }
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  for (  String term : terms) {
    Document doc=new Document();
    doc.add(new StringField("field",term,Field.Store.YES));
    w.addDocument(doc);
  }
  DirectoryReader r=w.getReader();
  IndexSearcher s=newSearcher(r);
  int iters=atLeast(1000);
  for (int iter=0; iter < iters; iter++) {
    String queryTerm=randomSimpleString(digits);
    int prefixLength=random().nextInt(queryTerm.length());
    String queryPrefix=queryTerm.substring(0,prefixLength);
    Set<String>[] expected=new Set[3];
    for (int ed=0; ed < 3; ed++) {
      expected[ed]=new HashSet<String>();
    }
    for (    String term : terms) {
      if (term.startsWith(queryPrefix) == false) {
        continue;
      }
      int ed=getDistance(term,queryTerm);
      if (Math.min(queryTerm.length(),term.length()) > ed) {
        while (ed < 3) {
          expected[ed].add(term);
          ed++;
        }
      }
    }
    for (int ed=0; ed < 3; ed++) {
      FuzzyQuery query=new FuzzyQuery(new Term("field",queryTerm),ed,prefixLength,terms.size(),true);
      TopDocs hits=s.search(query,terms.size());
      Set<String> actual=new HashSet<>();
      for (      ScoreDoc hit : hits.scoreDocs) {
        Document doc=s.doc(hit.doc);
        actual.add(doc.get("field"));
      }
      if (actual.equals(expected[ed]) == false) {
        StringBuilder sb=new StringBuilder();
        sb.append("FAILED: query=" + queryTerm + " ed="+ ed+ " prefixLength="+ prefixLength+ "\n");
        boolean first=true;
        for (        String term : actual) {
          if (expected[ed].contains(term) == false) {
            if (first) {
              sb.append("  these matched but shouldn't:\n");
              first=false;
            }
            sb.append("    " + term + "\n");
          }
        }
        first=true;
        for (        String term : expected[ed]) {
          if (actual.contains(term) == false) {
            if (first) {
              sb.append("  these did not match but should:\n");
              first=false;
            }
            sb.append("    " + term + "\n");
          }
        }
        throw new AssertionError(sb.toString());
      }
    }
  }
  IOUtils.close(r,w,dir);
}
