{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);
  addDoc("michael smith",writer);
  addDoc("michael lucero",writer);
  addDoc("doug cutting",writer);
  addDoc("doug cuttin",writer);
  addDoc("michael wardle",writer);
  addDoc("micheal vegas",writer);
  addDoc("michael lydon",writer);
  IndexReader reader=writer.getReader();
  IndexSearcher searcher=newSearcher(reader);
  searcher.setSimilarity(new ClassicSimilarity());
  writer.close();
  BooleanQuery.Builder query=new BooleanQuery.Builder();
  String commonSearchTerm="michael";
  FuzzyQuery commonQuery=new FuzzyQuery(new Term("field",commonSearchTerm),2,1);
  query.add(commonQuery,Occur.SHOULD);
  String rareSearchTerm="cutting";
  FuzzyQuery rareQuery=new FuzzyQuery(new Term("field",rareSearchTerm),2,1);
  query.add(rareQuery,Occur.SHOULD);
  ScoreDoc[] hits=searcher.search(query.build(),1000).scoreDocs;
  assertEquals(7,hits.length);
  StoredDocument bestDoc=searcher.doc(hits[0].doc);
  String topMatch=bestDoc.get("field");
  assertTrue(topMatch.contains(rareSearchTerm));
  StoredDocument runnerUpDoc=searcher.doc(hits[1].doc);
  String runnerUpMatch=runnerUpDoc.get("field");
  assertTrue(runnerUpMatch.contains("cuttin"));
  StoredDocument worstDoc=searcher.doc(hits[hits.length - 1].doc);
  String worstMatch=worstDoc.get("field");
  assertTrue(worstMatch.contains("micheal"));
  reader.close();
  directory.close();
}
