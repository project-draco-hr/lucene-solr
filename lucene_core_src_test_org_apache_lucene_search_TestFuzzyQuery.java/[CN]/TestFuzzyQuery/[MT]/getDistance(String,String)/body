{
  IntsRef targetPoints;
  IntsRef otherPoints;
  int n;
  int d[][];
  targetPoints=toIntsRef(target);
  otherPoints=toIntsRef(other);
  n=targetPoints.length;
  final int m=otherPoints.length;
  d=new int[n + 1][m + 1];
  if (n == 0 || m == 0) {
    if (n == m) {
      return 0;
    }
 else {
      return Math.max(n,m);
    }
  }
  int i;
  int j;
  int t_j;
  int cost;
  for (i=0; i <= n; i++) {
    d[i][0]=i;
  }
  for (j=0; j <= m; j++) {
    d[0][j]=j;
  }
  for (j=1; j <= m; j++) {
    t_j=otherPoints.ints[j - 1];
    for (i=1; i <= n; i++) {
      cost=targetPoints.ints[i - 1] == t_j ? 0 : 1;
      d[i][j]=Math.min(Math.min(d[i - 1][j] + 1,d[i][j - 1] + 1),d[i - 1][j - 1] + cost);
      if (i > 1 && j > 1 && targetPoints.ints[i - 1] == otherPoints.ints[j - 2] && targetPoints.ints[i - 2] == otherPoints.ints[j - 1]) {
        d[i][j]=Math.min(d[i][j],d[i - 2][j - 2] + cost);
      }
    }
  }
  return d[n][m];
}
