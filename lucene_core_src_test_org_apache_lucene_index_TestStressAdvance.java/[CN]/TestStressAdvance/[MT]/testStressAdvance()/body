{
  for (int iter=0; iter < 3; iter++) {
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter);
    }
    Directory dir=newDirectory();
    RandomIndexWriter w=new RandomIndexWriter(random(),dir);
    final Set<Integer> aDocs=new HashSet<>();
    final Document doc=new Document();
    final Field f=newStringField("field","",Field.Store.NO);
    doc.add(f);
    final Field idField=newStringField("id","",Field.Store.YES);
    doc.add(idField);
    int num=atLeast(4097);
    if (VERBOSE) {
      System.out.println("\nTEST: numDocs=" + num);
    }
    for (int id=0; id < num; id++) {
      if (random().nextInt(4) == 3) {
        f.setStringValue("a");
        aDocs.add(id);
      }
 else {
        f.setStringValue("b");
      }
      idField.setStringValue("" + id);
      w.addDocument(doc);
      if (VERBOSE) {
        System.out.println("\nTEST: doc upto " + id);
      }
    }
    w.forceMerge(1);
    final List<Integer> aDocIDs=new ArrayList<>();
    final List<Integer> bDocIDs=new ArrayList<>();
    final DirectoryReader r=w.getReader();
    final int[] idToDocID=new int[r.maxDoc()];
    for (int docID=0; docID < idToDocID.length; docID++) {
      int id=Integer.parseInt(r.document(docID).get("id"));
      if (aDocs.contains(id)) {
        aDocIDs.add(docID);
      }
 else {
        bDocIDs.add(docID);
      }
    }
    final TermsEnum te=getOnlySegmentReader(r).fields().terms("field").iterator(null);
    PostingsEnum de=null;
    for (int iter2=0; iter2 < 10; iter2++) {
      if (VERBOSE) {
        System.out.println("\nTEST: iter=" + iter + " iter2="+ iter2);
      }
      assertEquals(TermsEnum.SeekStatus.FOUND,te.seekCeil(new BytesRef("a")));
      de=TestUtil.docs(random(),te,null,de,PostingsEnum.FLAG_NONE);
      testOne(de,aDocIDs);
      assertEquals(TermsEnum.SeekStatus.FOUND,te.seekCeil(new BytesRef("b")));
      de=TestUtil.docs(random(),te,null,de,PostingsEnum.FLAG_NONE);
      testOne(de,bDocIDs);
    }
    w.close();
    r.close();
    dir.close();
  }
}
