{
  IndexReader ir=DirectoryReader.open(dir);
  WordBreakSpellChecker wbsp=new WordBreakSpellChecker();
{
    Term[] terms={new Term("numbers","one"),new Term("numbers","hun"),new Term("numbers","dred"),new Term("numbers","eight"),new Term("numbers","y"),new Term("numbers","eight")};
    wbsp.setMaxChanges(3);
    wbsp.setMaxCombineWordLength(20);
    wbsp.setMinSuggestionFrequency(1);
    CombineSuggestion[] cs=wbsp.suggestWordCombinations(terms,10,ir,SuggestMode.SUGGEST_ALWAYS);
    Assert.assertTrue(cs.length == 5);
    Assert.assertTrue(cs[0].originalTermIndexes.length == 2);
    Assert.assertTrue(cs[0].originalTermIndexes[0] == 1);
    Assert.assertTrue(cs[0].originalTermIndexes[1] == 2);
    Assert.assertTrue(cs[0].suggestion.string.equals("hundred"));
    Assert.assertTrue(cs[0].suggestion.score == 1);
    Assert.assertTrue(cs[1].originalTermIndexes.length == 2);
    Assert.assertTrue(cs[1].originalTermIndexes[0] == 3);
    Assert.assertTrue(cs[1].originalTermIndexes[1] == 4);
    Assert.assertTrue(cs[1].suggestion.string.equals("eighty"));
    Assert.assertTrue(cs[1].suggestion.score == 1);
    Assert.assertTrue(cs[2].originalTermIndexes.length == 2);
    Assert.assertTrue(cs[2].originalTermIndexes[0] == 4);
    Assert.assertTrue(cs[2].originalTermIndexes[1] == 5);
    Assert.assertTrue(cs[2].suggestion.string.equals("yeight"));
    Assert.assertTrue(cs[2].suggestion.score == 1);
    for (int i=3; i < 5; i++) {
      Assert.assertTrue(cs[i].originalTermIndexes.length == 3);
      Assert.assertTrue(cs[i].suggestion.score == 2);
      Assert.assertTrue((cs[i].originalTermIndexes[0] == 1 && cs[i].originalTermIndexes[1] == 2 && cs[i].originalTermIndexes[2] == 3 && cs[i].suggestion.string.equals("hundredeight")) || (cs[i].originalTermIndexes[0] == 3 && cs[i].originalTermIndexes[1] == 4 && cs[i].originalTermIndexes[2] == 5 && cs[i].suggestion.string.equals("eightyeight")));
    }
    cs=wbsp.suggestWordCombinations(terms,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);
    Assert.assertTrue(cs.length == 2);
    Assert.assertTrue(cs[0].originalTermIndexes.length == 2);
    Assert.assertTrue(cs[0].suggestion.score == 1);
    Assert.assertTrue(cs[0].originalTermIndexes[0] == 1);
    Assert.assertTrue(cs[0].originalTermIndexes[1] == 2);
    Assert.assertTrue(cs[0].suggestion.string.equals("hundred"));
    Assert.assertTrue(cs[0].suggestion.score == 1);
    Assert.assertTrue(cs[1].originalTermIndexes.length == 3);
    Assert.assertTrue(cs[1].suggestion.score == 2);
    Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);
    Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);
    Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);
    Assert.assertTrue(cs[1].suggestion.string.equals("hundredeight"));
  }
  ir.close();
}
