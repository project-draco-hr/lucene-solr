{
  IndexReader ir=null;
  try {
    ir=DirectoryReader.open(dir);
    WordBreakSpellChecker wbsp=new WordBreakSpellChecker();
{
      Term term=new Term("numbers","ninetynine");
      wbsp.setMaxChanges(1);
      wbsp.setMinBreakWordLength(1);
      wbsp.setMinSuggestionFrequency(1);
      SuggestWord[][] sw=wbsp.suggestWordBreaks(term,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 1);
      Assert.assertTrue(sw[0].length == 2);
      Assert.assertTrue(sw[0][0].string.equals("ninety"));
      Assert.assertTrue(sw[0][1].string.equals("nine"));
      Assert.assertTrue(sw[0][0].score == 1);
      Assert.assertTrue(sw[0][1].score == 1);
    }
{
      Term term=new Term("numbers","onethousand");
      wbsp.setMaxChanges(1);
      wbsp.setMinBreakWordLength(1);
      wbsp.setMinSuggestionFrequency(1);
      SuggestWord[][] sw=wbsp.suggestWordBreaks(term,2,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 1);
      Assert.assertTrue(sw[0].length == 2);
      Assert.assertTrue(sw[0][0].string.equals("one"));
      Assert.assertTrue(sw[0][1].string.equals("thousand"));
      Assert.assertTrue(sw[0][0].score == 1);
      Assert.assertTrue(sw[0][1].score == 1);
      wbsp.setMaxChanges(2);
      wbsp.setMinSuggestionFrequency(1);
      sw=wbsp.suggestWordBreaks(term,1,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 1);
      Assert.assertTrue(sw[0].length == 2);
      wbsp.setMaxChanges(2);
      wbsp.setMinSuggestionFrequency(2);
      sw=wbsp.suggestWordBreaks(term,2,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 1);
      Assert.assertTrue(sw[0].length == 2);
      wbsp.setMaxChanges(2);
      wbsp.setMinSuggestionFrequency(1);
      sw=wbsp.suggestWordBreaks(term,2,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 2);
      Assert.assertTrue(sw[0].length == 2);
      Assert.assertTrue(sw[0][0].string.equals("one"));
      Assert.assertTrue(sw[0][1].string.equals("thousand"));
      Assert.assertTrue(sw[0][0].score == 1);
      Assert.assertTrue(sw[0][1].score == 1);
      Assert.assertTrue(sw[0][1].freq > 1);
      Assert.assertTrue(sw[0][0].freq > sw[0][1].freq);
      Assert.assertTrue(sw[1].length == 3);
      Assert.assertTrue(sw[1][0].string.equals("one"));
      Assert.assertTrue(sw[1][1].string.equals("thou"));
      Assert.assertTrue(sw[1][2].string.equals("sand"));
      Assert.assertTrue(sw[1][0].score == 2);
      Assert.assertTrue(sw[1][1].score == 2);
      Assert.assertTrue(sw[1][2].score == 2);
      Assert.assertTrue(sw[1][0].freq > 1);
      Assert.assertTrue(sw[1][1].freq == 1);
      Assert.assertTrue(sw[1][2].freq == 1);
    }
{
      Term term=new Term("numbers","onethousandonehundredeleven");
      wbsp.setMaxChanges(3);
      wbsp.setMinBreakWordLength(1);
      wbsp.setMinSuggestionFrequency(1);
      SuggestWord[][] sw=wbsp.suggestWordBreaks(term,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 0);
      wbsp.setMaxChanges(4);
      sw=wbsp.suggestWordBreaks(term,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 1);
      Assert.assertTrue(sw[0].length == 5);
      wbsp.setMaxChanges(5);
      sw=wbsp.suggestWordBreaks(term,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 2);
      Assert.assertTrue(sw[0].length == 5);
      Assert.assertTrue(sw[0][1].string.equals("thousand"));
      Assert.assertTrue(sw[1].length == 6);
      Assert.assertTrue(sw[1][1].string.equals("thou"));
      Assert.assertTrue(sw[1][2].string.equals("sand"));
    }
{
      Term term=new Term("numbers","\uD864\uDC79");
      wbsp.setMaxChanges(1);
      wbsp.setMinBreakWordLength(1);
      wbsp.setMinSuggestionFrequency(1);
      SuggestWord[][] sw=wbsp.suggestWordBreaks(term,5,ir,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);
      Assert.assertTrue(sw.length == 0);
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    try {
      ir.close();
    }
 catch (    Exception e1) {
    }
  }
}
