{
  int num=atLeast(2);
  for (int iter=0; iter < num; iter++) {
    Directory dir=newDirectory();
    IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.COMPOUND_FILES));
    _TestUtil.keepFullyDeletedSegments(w);
    Map<BytesRef,List<Integer>> docs=new HashMap<BytesRef,List<Integer>>();
    Set<Integer> deleted=new HashSet<Integer>();
    List<BytesRef> terms=new ArrayList<BytesRef>();
    int numDocs=_TestUtil.nextInt(random,1,100 * RANDOM_MULTIPLIER);
    Document doc=new Document();
    Field f=newField("field","",Field.Store.NO,Field.Index.NOT_ANALYZED);
    doc.add(f);
    Field id=newField("id","",Field.Store.NO,Field.Index.NOT_ANALYZED);
    doc.add(id);
    boolean onlyUniqueTerms=random.nextBoolean();
    Set<BytesRef> uniqueTerms=new HashSet<BytesRef>();
    for (int i=0; i < numDocs; i++) {
      if (!onlyUniqueTerms && random.nextBoolean() && terms.size() > 0) {
        BytesRef term=terms.get(random.nextInt(terms.size()));
        docs.get(term).add(i);
        f.setValue(term.utf8ToString());
      }
 else {
        String s=_TestUtil.randomUnicodeString(random,10);
        BytesRef term=new BytesRef(s);
        if (!docs.containsKey(term)) {
          docs.put(term,new ArrayList<Integer>());
        }
        docs.get(term).add(i);
        terms.add(term);
        uniqueTerms.add(term);
        f.setValue(s);
      }
      id.setValue("" + i);
      w.addDocument(doc);
      if (random.nextInt(4) == 1) {
        w.commit();
      }
      if (i > 0 && random.nextInt(20) == 1) {
        int delID=random.nextInt(i);
        deleted.add(delID);
        w.deleteDocuments(new Term("id","" + delID));
      }
    }
    if (VERBOSE) {
      List<BytesRef> termsList=new ArrayList<BytesRef>(uniqueTerms);
      Collections.sort(termsList,BytesRef.getUTF8SortedAsUTF16Comparator());
      System.out.println("UTF16 order:");
      for (      BytesRef b : termsList) {
        System.out.println("  " + UnicodeUtil.toHexString(b.utf8ToString()));
      }
    }
    IndexReader reader=w.getReader();
    w.close();
    Bits liveDocs=MultiFields.getLiveDocs(reader);
    for (    int delDoc : deleted) {
      assertFalse(liveDocs.get(delDoc));
    }
    Terms terms2=MultiFields.getTerms(reader,"field");
    for (int i=0; i < 100; i++) {
      BytesRef term=terms.get(random.nextInt(terms.size()));
      if (VERBOSE) {
        System.out.println("TEST: seek to term= " + UnicodeUtil.toHexString(term.utf8ToString()));
      }
      DocsEnum docsEnum=terms2.docs(liveDocs,term,null);
      assertNotNull(docsEnum);
      for (      int docID : docs.get(term)) {
        if (!deleted.contains(docID)) {
          assertEquals(docID,docsEnum.nextDoc());
        }
      }
      assertEquals(docsEnum.NO_MORE_DOCS,docsEnum.nextDoc());
    }
    reader.close();
    dir.close();
  }
}
