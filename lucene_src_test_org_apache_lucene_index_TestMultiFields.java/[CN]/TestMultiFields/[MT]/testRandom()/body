{
  for (int iter=0; iter < 2 * _TestUtil.getRandomMultiplier(); iter++) {
    Directory dir=new MockRAMDirectory();
    IndexWriter w=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMergePolicy(NoMergePolicy.COMPOUND_FILES));
    Random r=new Random();
    Map<BytesRef,List<Integer>> docs=new HashMap<BytesRef,List<Integer>>();
    Set<Integer> deleted=new HashSet<Integer>();
    List<BytesRef> terms=new ArrayList<BytesRef>();
    int numDocs=r.nextInt(100 * _TestUtil.getRandomMultiplier());
    Document doc=new Document();
    Field f=new Field("field","",Field.Store.NO,Field.Index.NOT_ANALYZED);
    doc.add(f);
    Field id=new Field("id","",Field.Store.NO,Field.Index.NOT_ANALYZED);
    doc.add(id);
    boolean onlyUniqueTerms=r.nextBoolean();
    for (int i=0; i < numDocs; i++) {
      if (!onlyUniqueTerms && r.nextBoolean() && terms.size() > 0) {
        BytesRef term=terms.get(r.nextInt(terms.size()));
        docs.get(term).add(i);
        f.setValue(term.utf8ToString());
      }
 else {
        String s=_TestUtil.randomUnicodeString(r,10);
        BytesRef term=new BytesRef(s);
        if (!docs.containsKey(term)) {
          docs.put(term,new ArrayList<Integer>());
        }
        docs.get(term).add(i);
        terms.add(term);
        f.setValue(s);
      }
      id.setValue("" + i);
      w.addDocument(doc);
      if (r.nextInt(4) == 1) {
        w.commit();
      }
      if (i > 0 && r.nextInt(20) == 1) {
        int delID=r.nextInt(i);
        deleted.add(delID);
        w.deleteDocuments(new Term("id","" + delID));
      }
    }
    IndexReader reader=w.getReader();
    w.close();
    Bits delDocs=MultiFields.getDeletedDocs(reader);
    for (    int delDoc : deleted) {
      assertTrue(delDocs.get(delDoc));
    }
    Terms terms2=MultiFields.getTerms(reader,"field");
    for (int i=0; i < 100; i++) {
      BytesRef term=terms.get(r.nextInt(terms.size()));
      DocsEnum docsEnum=terms2.docs(delDocs,term,null);
      int count=0;
      for (      int docID : docs.get(term)) {
        if (!deleted.contains(docID)) {
          assertEquals(docID,docsEnum.nextDoc());
          count++;
        }
      }
      assertEquals(docsEnum.NO_MORE_DOCS,docsEnum.nextDoc());
    }
    reader.close();
    dir.close();
  }
}
