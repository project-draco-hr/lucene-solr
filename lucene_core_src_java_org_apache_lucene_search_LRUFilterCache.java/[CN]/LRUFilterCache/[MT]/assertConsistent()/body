{
  if (requiresEviction()) {
    throw new AssertionError("requires evictions: size=" + mostRecentlyUsedFilters.size() + ", maxSize="+ maxSize+ ", ramBytesUsed="+ ramBytesUsed()+ ", maxRamBytesUsed="+ maxRamBytesUsed);
  }
  for (  LeafCache leafCache : cache.values()) {
    Set<Filter> keys=new HashSet<Filter>(leafCache.cache.keySet());
    keys.removeAll(mostRecentlyUsedFilters);
    if (!keys.isEmpty()) {
      throw new AssertionError("One leaf cache contains more keys than the top-level cache: " + keys);
    }
  }
  long recomputedRamBytesUsed=0;
  for (  Filter filter : mostRecentlyUsedFilters) {
    recomputedRamBytesUsed+=ramBytesUsed(filter);
  }
  for (  LeafCache leafCache : cache.values()) {
    recomputedRamBytesUsed+=leafCache.ramBytesUsed();
  }
  if (recomputedRamBytesUsed != ramBytesUsed) {
    throw new AssertionError("ramBytesUsed mismatch : " + ramBytesUsed + " != "+ recomputedRamBytesUsed);
  }
}
