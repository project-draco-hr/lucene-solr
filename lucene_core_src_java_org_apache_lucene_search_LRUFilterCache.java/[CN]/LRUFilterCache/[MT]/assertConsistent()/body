{
  if (requiresEviction()) {
    throw new AssertionError("requires evictions: size=" + mostRecentlyUsedFilters.size() + ", maxSize="+ maxSize+ ", ramBytesUsed="+ ramBytesUsed()+ ", maxRamBytesUsed="+ maxRamBytesUsed);
  }
  for (  LeafCache leafCache : cache.values()) {
    Set<Filter> keys=Collections.newSetFromMap(new IdentityHashMap<>());
    keys.addAll(leafCache.cache.keySet());
    keys.removeAll(mostRecentlyUsedFilters);
    if (!keys.isEmpty()) {
      throw new AssertionError("One leaf cache contains more keys than the top-level cache: " + keys);
    }
  }
  long recomputedRamBytesUsed=HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size() + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();
  for (  Filter filter : mostRecentlyUsedFilters) {
    recomputedRamBytesUsed+=ramBytesUsed(filter);
  }
  for (  LeafCache leafCache : cache.values()) {
    recomputedRamBytesUsed+=HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();
    for (    DocIdSet set : leafCache.cache.values()) {
      recomputedRamBytesUsed+=set.ramBytesUsed();
    }
  }
  if (recomputedRamBytesUsed != ramBytesUsed) {
    throw new AssertionError("ramBytesUsed mismatch : " + ramBytesUsed + " != "+ recomputedRamBytesUsed);
  }
}
