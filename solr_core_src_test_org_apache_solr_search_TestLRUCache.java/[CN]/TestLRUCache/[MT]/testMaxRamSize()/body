{
  LRUCache<String,Accountable> accountableLRUCache=new LRUCache<>();
  Map<String,String> params=new HashMap<>();
  params.put("size","5");
  params.put("maxRamMB","1");
  CacheRegenerator cr=new NoOpRegenerator();
  Object o=accountableLRUCache.init(params,null,cr);
  long baseSize=accountableLRUCache.ramBytesUsed();
  assertEquals(LRUCache.BASE_RAM_BYTES_USED,baseSize);
  accountableLRUCache.put("1",new Accountable(){
    @Override public long ramBytesUsed(){
      return 512 * 1024;
    }
  }
);
  assertEquals(1,accountableLRUCache.size());
  assertEquals(baseSize + 512 * 1024 + LRUCache.DEFAULT_RAM_BYTES_USED + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY,accountableLRUCache.ramBytesUsed());
  accountableLRUCache.put("2",new Accountable(){
    @Override public long ramBytesUsed(){
      return 512 * 1024;
    }
  }
);
  assertEquals(1,accountableLRUCache.size());
  assertEquals(baseSize + 512 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + LRUCache.DEFAULT_RAM_BYTES_USED,accountableLRUCache.ramBytesUsed());
  NamedList<Serializable> nl=accountableLRUCache.getStatistics();
  assertEquals(1L,nl.get("evictions"));
  assertEquals(1L,nl.get("evictionsRamUsage"));
  accountableLRUCache.put("3",new Accountable(){
    @Override public long ramBytesUsed(){
      return 1024;
    }
  }
);
  nl=accountableLRUCache.getStatistics();
  assertEquals(1L,nl.get("evictions"));
  assertEquals(1L,nl.get("evictionsRamUsage"));
  assertEquals(2L,accountableLRUCache.size());
  assertEquals(baseSize + 513 * 1024 + LRUCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * 2 + LRUCache.DEFAULT_RAM_BYTES_USED * 2,accountableLRUCache.ramBytesUsed());
  accountableLRUCache.clear();
  assertEquals(RamUsageEstimator.shallowSizeOfInstance(LRUCache.class),accountableLRUCache.ramBytesUsed());
}
