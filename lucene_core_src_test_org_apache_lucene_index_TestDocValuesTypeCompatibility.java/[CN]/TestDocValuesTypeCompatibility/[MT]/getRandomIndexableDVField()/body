{
  int size=random().nextInt(100) + 1;
  StringBuilder s=new StringBuilder();
  for (int i=0; i < size; i++) {
    s.append("a");
  }
  BytesRef bytesRef=new BytesRef(s);
  Type[] values=Type.values();
  Type t=values[random().nextInt(values.length)];
switch (t) {
case BYTES_FIXED_DEREF:
    return new DerefBytesDocValuesField("f",bytesRef,true);
case BYTES_FIXED_SORTED:
  return new SortedBytesDocValuesField("f",bytesRef,true);
case BYTES_FIXED_STRAIGHT:
return new StraightBytesDocValuesField("f",bytesRef,true);
case BYTES_VAR_DEREF:
return new DerefBytesDocValuesField("f",bytesRef,false);
case BYTES_VAR_SORTED:
return new SortedBytesDocValuesField("f",bytesRef,false);
case BYTES_VAR_STRAIGHT:
return new StraightBytesDocValuesField("f",bytesRef,false);
case FIXED_INTS_16:
return new ShortDocValuesField("f",(short)1);
case FIXED_INTS_32:
return new IntDocValuesField("f",1);
case FIXED_INTS_64:
return new LongDocValuesField("f",1);
case FIXED_INTS_8:
return new ByteDocValuesField("f",(byte)1);
case FLOAT_32:
return new FloatDocValuesField("f",1.0f);
case FLOAT_64:
return new DoubleDocValuesField("f",1.0f);
case VAR_INTS:
return new PackedLongDocValuesField("f",1);
default :
throw new IllegalArgumentException();
}
}
