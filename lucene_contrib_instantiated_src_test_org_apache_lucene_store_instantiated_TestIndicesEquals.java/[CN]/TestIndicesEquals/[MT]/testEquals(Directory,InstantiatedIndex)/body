{
  if (VERBOSE) {
    System.out.println("TEST: testEquals");
  }
  testTermDocsSomeMore(aprioriIndex,testIndex);
  IndexReader aprioriReader=IndexReader.open(aprioriIndex,false);
  IndexReader testReader=testIndex.indexReaderFactory();
  assertEquals(aprioriReader.numDocs(),testReader.numDocs());
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED),testReader.getFieldNames(IndexReader.FieldOption.INDEXED));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR),testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR),testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS),testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR),testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET),testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION),testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET),testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));
  assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED),testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));
  for (  Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {
    byte[] aprioriNorms=MultiNorms.norms(aprioriReader,(String)field);
    byte[] testNorms=MultiNorms.norms(testReader,(String)field);
    if (aprioriNorms != null) {
      assertEquals(aprioriNorms.length,testNorms.length);
      for (int i=0; i < aprioriNorms.length; i++) {
        assertEquals("norms does not equals for field " + field + " in document "+ i,aprioriNorms[i],testNorms[i]);
      }
    }
  }
  final Bits apDelDocs=MultiFields.getDeletedDocs(aprioriReader);
  final Bits testDelDocs=MultiFields.getDeletedDocs(testReader);
  assertTrue((apDelDocs != null && testDelDocs != null) || (apDelDocs == null && testDelDocs == null));
  if (apDelDocs != null) {
    for (int docIndex=0; docIndex < aprioriReader.numDocs(); docIndex++) {
      assertEquals(apDelDocs.get(docIndex),testDelDocs.get(docIndex));
    }
  }
  FieldsEnum aprioriFieldsEnum=MultiFields.getFields(aprioriReader).iterator();
  FieldsEnum testFieldsEnum=MultiFields.getFields(testReader).iterator();
  String aprioriField;
  while ((aprioriField=aprioriFieldsEnum.next()) != null) {
    String testField=testFieldsEnum.next();
    if (VERBOSE) {
      System.out.println("TEST: verify field=" + testField);
    }
    assertEquals(aprioriField,testField);
    TermsEnum aprioriTermEnum=aprioriFieldsEnum.terms();
    TermsEnum testTermEnum=testFieldsEnum.terms();
    BytesRef aprioriText;
    while ((aprioriText=aprioriTermEnum.next()) != null) {
      assertEquals(aprioriText,testTermEnum.next());
      if (VERBOSE) {
        System.out.println("TEST:   verify term=" + aprioriText.utf8ToString());
      }
      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());
      DocsEnum aprioriTermDocs=aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader),null);
      DocsEnum testTermDocs=testTermEnum.docs(MultiFields.getDeletedDocs(testReader),null);
      while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {
        assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);
        assertEquals(aprioriTermDocs.docID(),testTermDocs.docID());
      }
      assertEquals(aprioriReader.docFreq(aprioriField,aprioriTermEnum.term()),testReader.docFreq(aprioriField,testTermEnum.term()));
      aprioriTermDocs=aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader),aprioriTermDocs);
      testTermDocs=testTermEnum.docs(MultiFields.getDeletedDocs(testReader),testTermDocs);
      while (true) {
        if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {
          assertEquals(DocsEnum.NO_MORE_DOCS,testTermDocs.nextDoc());
          break;
        }
        if (VERBOSE) {
          System.out.println("TEST:     verify doc=" + aprioriTermDocs.docID());
        }
        assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);
        assertEquals(aprioriTermDocs.docID(),testTermDocs.docID());
        assertEquals(aprioriTermDocs.freq(),testTermDocs.freq());
      }
      DocsAndPositionsEnum aprioriTermPositions=aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader),null);
      DocsAndPositionsEnum testTermPositions=testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader),null);
      if (VERBOSE) {
        System.out.println("TEST: enum1=" + aprioriTermPositions + " enum2="+ testTermPositions);
      }
      if (aprioriTermPositions != null) {
        for (int docIndex=0; docIndex < aprioriReader.maxDoc(); docIndex++) {
          boolean hasNext=aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;
          if (hasNext) {
            assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);
            if (VERBOSE) {
              System.out.println("TEST:     verify doc=" + aprioriTermPositions.docID());
            }
            assertEquals(aprioriTermPositions.freq(),testTermPositions.freq());
            for (int termPositionIndex=0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {
              int aprioriPos=aprioriTermPositions.nextPosition();
              int testPos=testTermPositions.nextPosition();
              if (VERBOSE) {
                System.out.println("TEST:       verify pos=" + aprioriPos);
              }
              assertEquals(aprioriPos,testPos);
              assertEquals(aprioriTermPositions.hasPayload(),testTermPositions.hasPayload());
              if (aprioriTermPositions.hasPayload()) {
                BytesRef apPayload=aprioriTermPositions.getPayload();
                BytesRef testPayload=testTermPositions.getPayload();
                assertEquals(apPayload,testPayload);
              }
            }
          }
        }
      }
    }
    assertNull(testTermEnum.next());
  }
  assertNull(testFieldsEnum.next());
  for (int documentNumber=0; documentNumber < aprioriReader.numDocs(); documentNumber++) {
    if (documentNumber > 0) {
      assertNotNull(aprioriReader.getTermFreqVector(documentNumber,"b0"));
      assertNull(aprioriReader.getTermFreqVector(documentNumber,"b1"));
      assertNotNull(testReader.getTermFreqVector(documentNumber,"b0"));
      assertNull(testReader.getTermFreqVector(documentNumber,"b1"));
    }
    TermFreqVector[] aprioriFreqVectors=aprioriReader.getTermFreqVectors(documentNumber);
    TermFreqVector[] testFreqVectors=testReader.getTermFreqVectors(documentNumber);
    if (aprioriFreqVectors != null && testFreqVectors != null) {
      Arrays.sort(aprioriFreqVectors,new Comparator<TermFreqVector>(){
        public int compare(        TermFreqVector termFreqVector,        TermFreqVector termFreqVector1){
          return termFreqVector.getField().compareTo(termFreqVector1.getField());
        }
      }
);
      Arrays.sort(testFreqVectors,new Comparator<TermFreqVector>(){
        public int compare(        TermFreqVector termFreqVector,        TermFreqVector termFreqVector1){
          return termFreqVector.getField().compareTo(termFreqVector1.getField());
        }
      }
);
      assertEquals("document " + documentNumber + " vectors does not match",aprioriFreqVectors.length,testFreqVectors.length);
      for (int freqVectorIndex=0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {
        assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(),testFreqVectors[freqVectorIndex].getTermFrequencies()));
        assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(),testFreqVectors[freqVectorIndex].getTerms()));
        if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {
          TermPositionVector aprioriTermPositionVector=(TermPositionVector)aprioriFreqVectors[freqVectorIndex];
          TermPositionVector testTermPositionVector=(TermPositionVector)testFreqVectors[freqVectorIndex];
          for (int positionVectorIndex=0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++) {
            if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {
              assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex),testTermPositionVector.getOffsets(positionVectorIndex)));
            }
            if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {
              assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex),testTermPositionVector.getTermPositions(positionVectorIndex)));
            }
          }
        }
      }
    }
  }
  aprioriReader.close();
  testReader.close();
}
