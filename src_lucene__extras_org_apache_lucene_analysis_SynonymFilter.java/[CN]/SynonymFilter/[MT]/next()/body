{
  while (true) {
    if (replacement != null && replacement.hasNext()) {
      return (Token)replacement.next();
    }
    Token firstTok=nextTok();
    if (firstTok == null)     return null;
    String str=ignoreCase ? firstTok.termText.toLowerCase() : firstTok.termText;
    Object o=map.submap != null ? map.submap.get(str) : null;
    if (o == null)     return firstTok;
    if (matched == null)     matched=new LinkedList();
    SynonymMap result=match((SynonymMap)o);
    if (result == null) {
      return firstTok;
    }
    ArrayList generated=new ArrayList(result.synonyms.length + matched.size() + 1);
    Token lastTok=matched.isEmpty() ? firstTok : (Token)matched.getLast();
    boolean includeOrig=result.includeOrig();
    Token origTok=includeOrig ? firstTok : null;
    int origPos=firstTok.getPositionIncrement();
    int repPos=0;
    int pos=0;
    for (int i=0; i < result.synonyms.length; i++) {
      Token repTok=result.synonyms[i];
      Token newTok=new Token(repTok.termText,firstTok.startOffset,lastTok.endOffset,firstTok.type);
      repPos+=repTok.getPositionIncrement();
      if (i == 0)       repPos=origPos;
      while (origTok != null && origPos <= repPos) {
        origTok.setPositionIncrement(origPos - pos);
        generated.add(origTok);
        pos+=origTok.getPositionIncrement();
        origTok=matched.isEmpty() ? null : (Token)matched.removeFirst();
        if (origTok != null)         origPos+=origTok.getPositionIncrement();
      }
      newTok.setPositionIncrement(repPos - pos);
      generated.add(newTok);
      pos+=newTok.getPositionIncrement();
    }
    while (origTok != null) {
      origTok.setPositionIncrement(origPos - pos);
      generated.add(origTok);
      pos+=origTok.getPositionIncrement();
      origTok=matched.isEmpty() ? null : (Token)matched.removeFirst();
      if (origTok != null)       origPos+=origTok.getPositionIncrement();
    }
    replacement=generated.iterator();
  }
}
