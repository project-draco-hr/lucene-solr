{
  final String collection="testAsyncOperations";
  final CloudSolrClient client=cluster.getSolrClient();
  RequestStatusState state=new Create().setCollectionName(collection).setNumShards(1).setRouterName("implicit").setShards("shard1").setConfigName("conf1").processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("CreateCollection task did not complete!",RequestStatusState.COMPLETED,state);
  int numDocs=TestUtil.nextInt(random(),10,100);
  List<SolrInputDocument> docs=new ArrayList<>(numDocs);
  for (int i=0; i < numDocs; i++) {
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id",i);
    doc.addField("_route_","shard1");
    docs.add(doc);
  }
  client.add(collection,docs);
  client.commit(collection);
  SolrQuery query=new SolrQuery("*:*");
  query.set("shards","shard1");
  assertEquals(numDocs,client.query(collection,query).getResults().getNumFound());
  state=new CollectionAdminRequest.Reload().setCollectionName(collection).processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("ReloadCollection did not complete",RequestStatusState.COMPLETED,state);
  state=new CollectionAdminRequest.CreateShard().setCollectionName(collection).setShardName("shard2").processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("CreateShard did not complete",RequestStatusState.COMPLETED,state);
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField("id",numDocs + 1);
  doc.addField("_route_","shard2");
  client.add(collection,doc);
  client.commit(collection);
  query=new SolrQuery("*:*");
  query.set("shards","shard2");
  assertEquals(1,client.query(collection,query).getResults().getNumFound());
  state=new CollectionAdminRequest.DeleteShard().setCollectionName(collection).setShardName("shard2").processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("DeleteShard did not complete",RequestStatusState.COMPLETED,state);
  state=new CollectionAdminRequest.AddReplica().setCollectionName(collection).setShardName("shard1").processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("AddReplica did not complete",RequestStatusState.COMPLETED,state);
  Slice shard1=client.getZkStateReader().getClusterState().getSlice(collection,"shard1");
  int count=0;
  while (shard1.getReplicas().size() != 2) {
    if (count++ > 1000) {
      fail("2nd Replica not reflecting in the cluster state");
    }
    Thread.sleep(100);
  }
  state=new CollectionAdminRequest.CreateAlias().setAliasName("myalias").setAliasedCollections(collection).processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("CreateAlias did not complete",RequestStatusState.COMPLETED,state);
  query=new SolrQuery("*:*");
  query.set("shards","shard1");
  assertEquals(numDocs,client.query("myalias",query).getResults().getNumFound());
  state=new CollectionAdminRequest.DeleteAlias().setAliasName("myalias").processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("DeleteAlias did not complete",RequestStatusState.COMPLETED,state);
  try {
    client.query("myalias",query);
    fail("Alias should not exist");
  }
 catch (  SolrException e) {
  }
  String replica=shard1.getReplicas().iterator().next().getName();
  state=new CollectionAdminRequest.DeleteReplica().setCollectionName(collection).setShardName("shard1").setReplica(replica).processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("DeleteReplica did not complete",RequestStatusState.COMPLETED,state);
  state=new CollectionAdminRequest.Delete().setCollectionName(collection).processAndWait(client,MAX_TIMEOUT_SECONDS);
  assertSame("DeleteCollection did not complete",RequestStatusState.COMPLETED,state);
}
