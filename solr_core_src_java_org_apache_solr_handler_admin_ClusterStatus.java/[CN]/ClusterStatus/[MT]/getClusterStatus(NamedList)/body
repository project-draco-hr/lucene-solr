{
  Aliases aliases=zkStateReader.getAliases();
  Map<String,List<String>> collectionVsAliases=new HashMap<>();
  Map<String,String> aliasVsCollections=aliases.getCollectionAliasMap();
  if (aliasVsCollections != null) {
    for (    Map.Entry<String,String> entry : aliasVsCollections.entrySet()) {
      List<String> colls=StrUtils.splitSmart(entry.getValue(),',');
      String alias=entry.getKey();
      for (      String coll : colls) {
        if (collection == null || collection.equals(coll)) {
          List<String> list=collectionVsAliases.get(coll);
          if (list == null) {
            list=new ArrayList<>();
            collectionVsAliases.put(coll,list);
          }
          list.add(alias);
        }
      }
    }
  }
  Map roles=null;
  if (zkStateReader.getZkClient().exists(ZkStateReader.ROLES,true)) {
    roles=(Map)Utils.fromJSON(zkStateReader.getZkClient().getData(ZkStateReader.ROLES,null,null,true));
  }
  ClusterState clusterState=zkStateReader.getClusterState();
  byte[] bytes=Utils.toJSON(clusterState);
  Map<String,Object> stateMap=(Map<String,Object>)Utils.fromJSON(bytes);
  String routeKey=message.getStr(ShardParams._ROUTE_);
  String shard=message.getStr(ZkStateReader.SHARD_ID_PROP);
  Map<String,DocCollection> collectionsMap=null;
  if (collection == null) {
    collectionsMap=clusterState.getCollectionsMap();
  }
 else {
    collectionsMap=Collections.singletonMap(collection,clusterState.getCollectionOrNull(collection));
  }
  NamedList<Object> collectionProps=new SimpleOrderedMap<>();
  for (  Map.Entry<String,DocCollection> entry : collectionsMap.entrySet()) {
    Map<String,Object> collectionStatus;
    String name=entry.getKey();
    DocCollection clusterStateCollection=entry.getValue();
    if (clusterStateCollection == null) {
      if (collection != null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Collection: " + name + " not found");
      }
 else {
        continue;
      }
    }
    Set<String> requestedShards=new HashSet<>();
    if (routeKey != null) {
      DocRouter router=clusterStateCollection.getRouter();
      Collection<Slice> slices=router.getSearchSlices(routeKey,null,clusterStateCollection);
      for (      Slice slice : slices) {
        requestedShards.add(slice.getName());
      }
    }
    if (shard != null) {
      requestedShards.add(shard);
    }
    if (clusterStateCollection.getStateFormat() > 1) {
      bytes=Utils.toJSON(clusterStateCollection);
      Map<String,Object> docCollection=(Map<String,Object>)Utils.fromJSON(bytes);
      collectionStatus=getCollectionStatus(docCollection,name,requestedShards);
    }
 else {
      collectionStatus=getCollectionStatus((Map<String,Object>)stateMap.get(name),name,requestedShards);
    }
    collectionStatus.put("znodeVersion",clusterStateCollection.getZNodeVersion());
    if (collectionVsAliases.containsKey(name) && !collectionVsAliases.get(name).isEmpty()) {
      collectionStatus.put("aliases",collectionVsAliases.get(name));
    }
    String configName=zkStateReader.readConfigName(name);
    collectionStatus.put("configName",configName);
    collectionProps.add(name,collectionStatus);
  }
  List<String> liveNodes=zkStateReader.getZkClient().getChildren(ZkStateReader.LIVE_NODES_ZKNODE,null,true);
  crossCheckReplicaStateWithLiveNodes(liveNodes,collectionProps);
  NamedList<Object> clusterStatus=new SimpleOrderedMap<>();
  clusterStatus.add("collections",collectionProps);
  Map clusterProps=zkStateReader.getClusterProps();
  if (clusterProps != null && !clusterProps.isEmpty()) {
    clusterStatus.add("properties",clusterProps);
  }
  if (aliasVsCollections != null && !aliasVsCollections.isEmpty()) {
    clusterStatus.add("aliases",aliasVsCollections);
  }
  if (roles != null) {
    clusterStatus.add("roles",roles);
  }
  clusterStatus.add("live_nodes",liveNodes);
  results.add("cluster",clusterStatus);
}
