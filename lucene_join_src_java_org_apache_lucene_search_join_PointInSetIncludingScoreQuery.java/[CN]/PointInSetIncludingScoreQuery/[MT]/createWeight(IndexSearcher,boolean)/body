{
  final Weight originalWeight=originalQuery.createWeight(searcher,needsScores);
  return new Weight(this){
    @Override public void extractTerms(    Set<Term> terms){
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      Scorer scorer=scorer(context);
      if (scorer != null) {
        int target=scorer.iterator().advance(doc);
        if (doc == target) {
          return Explanation.match(scorer.score(),"A match");
        }
      }
      return Explanation.noMatch("Not a match");
    }
    @Override public float getValueForNormalization() throws IOException {
      return originalWeight.getValueForNormalization();
    }
    @Override public void normalize(    float norm,    float boost){
      originalWeight.normalize(norm,boost);
    }
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      LeafReader reader=context.reader();
      PointValues values=reader.getPointValues();
      if (values == null) {
        return null;
      }
      FieldInfo fieldInfo=reader.getFieldInfos().fieldInfo(field);
      if (fieldInfo == null) {
        return null;
      }
      if (fieldInfo.getPointDimensionCount() != 1) {
        throw new IllegalArgumentException("field=\"" + field + "\" was indexed with numDims="+ fieldInfo.getPointDimensionCount()+ " but this query has numDims=1");
      }
      if (fieldInfo.getPointNumBytes() != bytesPerDim) {
        throw new IllegalArgumentException("field=\"" + field + "\" was indexed with bytesPerDim="+ fieldInfo.getPointNumBytes()+ " but this query has bytesPerDim="+ bytesPerDim);
      }
      FixedBitSet result=new FixedBitSet(reader.maxDoc());
      float[] scores=new float[reader.maxDoc()];
      values.intersect(field,new MergePointVisitor(sortedPackedPoints,result,scores));
      return new Scorer(this){
        DocIdSetIterator disi=new BitSetIterator(result,10L);
        @Override public float score() throws IOException {
          return scores[docID()];
        }
        @Override public int freq() throws IOException {
          return 1;
        }
        @Override public int docID(){
          return disi.docID();
        }
        @Override public DocIdSetIterator iterator(){
          return disi;
        }
      }
;
    }
  }
;
}
