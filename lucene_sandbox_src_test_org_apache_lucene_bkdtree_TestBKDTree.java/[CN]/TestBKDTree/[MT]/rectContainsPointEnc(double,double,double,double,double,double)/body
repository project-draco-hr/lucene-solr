{
  if (Double.isNaN(pointLat)) {
    return false;
  }
  int rectLatMinEnc=BKDTreeWriter.encodeLat(rectLatMin);
  int rectLatMaxEnc=BKDTreeWriter.encodeLat(rectLatMax);
  int rectLonMinEnc=BKDTreeWriter.encodeLon(rectLonMin);
  int rectLonMaxEnc=BKDTreeWriter.encodeLon(rectLonMax);
  int pointLatEnc=BKDTreeWriter.encodeLat(pointLat);
  int pointLonEnc=BKDTreeWriter.encodeLon(pointLon);
  if (rectLonMin < rectLonMax) {
    return pointLatEnc >= rectLatMinEnc && pointLatEnc < rectLatMaxEnc && pointLonEnc >= rectLonMinEnc && pointLonEnc < rectLonMaxEnc;
  }
 else {
    return pointLatEnc >= rectLatMinEnc && pointLatEnc < rectLatMaxEnc && (pointLonEnc >= rectLonMinEnc || pointLonEnc < rectLonMaxEnc);
  }
}
