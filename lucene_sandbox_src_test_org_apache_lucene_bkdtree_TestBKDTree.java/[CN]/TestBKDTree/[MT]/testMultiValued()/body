{
  int numPoints=atLeast(10000);
  double[] lats=new double[2 * numPoints];
  double[] lons=new double[2 * numPoints];
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig();
  iwc.setMergePolicy(newLogMergePolicy());
  Codec codec=TestUtil.alwaysDocValuesFormat(getDocValuesFormat());
  iwc.setCodec(codec);
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,iwc);
  for (int docID=0; docID < numPoints; docID++) {
    Document doc=new Document();
    lats[2 * docID]=randomLat();
    lons[2 * docID]=randomLon();
    doc.add(new BKDPointField("point",lats[2 * docID],lons[2 * docID]));
    lats[2 * docID + 1]=randomLat();
    lons[2 * docID + 1]=randomLon();
    doc.add(new BKDPointField("point",lats[2 * docID + 1],lons[2 * docID + 1]));
    w.addDocument(doc);
  }
  if (random().nextBoolean()) {
    w.forceMerge(1);
  }
  IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r,false);
  int iters=atLeast(100);
  for (int iter=0; iter < iters; iter++) {
    double lat0=randomLat();
    double lat1=randomLat();
    double lon0=randomLon();
    double lon1=randomLon();
    if (lat1 < lat0) {
      double x=lat0;
      lat0=lat1;
      lat1=x;
    }
    if (lon1 < lon0) {
      double x=lon0;
      lon0=lon1;
      lon1=x;
    }
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter + " lat="+ lat0+ " TO "+ lat1+ " lon="+ lon0+ " TO "+ lon1);
    }
    Query query=new BKDPointInBBoxQuery("point",lat0,lat1,lon0,lon1);
    final FixedBitSet hits=new FixedBitSet(r.maxDoc());
    s.search(query,new SimpleCollector(){
      private int docBase;
      @Override public boolean needsScores(){
        return false;
      }
      @Override protected void doSetNextReader(      LeafReaderContext context) throws IOException {
        docBase=context.docBase;
      }
      @Override public void collect(      int doc){
        hits.set(docBase + doc);
      }
    }
);
    for (int docID=0; docID < lats.length / 2; docID++) {
      double latDoc1=lats[2 * docID];
      double lonDoc1=lons[2 * docID];
      double latDoc2=lats[2 * docID + 1];
      double lonDoc2=lons[2 * docID + 1];
      boolean expected=rectContainsPointEnc(lat0,lat1,lon0,lon1,latDoc1,lonDoc1) || rectContainsPointEnc(lat0,lat1,lon0,lon1,latDoc2,lonDoc2);
      if (hits.get(docID) != expected) {
        fail("docID=" + docID + " latDoc1="+ latDoc1+ " lonDoc1="+ lonDoc1+ " latDoc2="+ latDoc2+ " lonDoc2="+ lonDoc2+ " expected "+ expected+ " but got: "+ hits.get(docID));
      }
    }
  }
  r.close();
  dir.close();
}
