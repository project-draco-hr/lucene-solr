{
  try {
    assertTrue(Operations.isFinite(a));
    assertFalse(Operations.isTotal(a));
    Automaton detA=Operations.determinize(a,DEFAULT_MAX_DETERMINIZED_STATES);
    IntsRefBuilder scratch=new IntsRefBuilder();
    for (    BytesRef term : terms) {
      Util.toIntsRef(term,scratch);
      assertTrue("failed to accept term=" + term.utf8ToString(),Operations.run(detA,term.utf8ToString()));
    }
    Set<IntsRef> expected=new HashSet<>();
    for (    BytesRef term : terms) {
      IntsRefBuilder intsRef=new IntsRefBuilder();
      Util.toUTF32(term.utf8ToString(),intsRef);
      expected.add(intsRef.toIntsRef());
    }
    Set<IntsRef> actual=TestOperations.getFiniteStrings(a);
    if (expected.equals(actual) == false) {
      System.out.println("FAILED:");
      for (      IntsRef term : expected) {
        if (actual.contains(term) == false) {
          System.out.println("  term=" + term + " should be accepted but isn't");
        }
      }
      for (      IntsRef term : actual) {
        if (expected.contains(term) == false) {
          System.out.println("  term=" + term + " is accepted but should not be");
        }
      }
      throw new AssertionError("mismatch");
    }
    Automaton a2=Operations.removeDeadStates(Operations.determinize(unionTerms(terms),Integer.MAX_VALUE));
    assertTrue(Operations.sameLanguage(a2,Operations.removeDeadStates(Operations.determinize(a,Integer.MAX_VALUE))));
    Automaton utf8=randomNoOp(new UTF32ToUTF8().convert(a));
    Set<IntsRef> expected2=new HashSet<>();
    for (    BytesRef term : terms) {
      IntsRefBuilder intsRef=new IntsRefBuilder();
      Util.toIntsRef(term,intsRef);
      expected2.add(intsRef.toIntsRef());
    }
    assertEquals(expected2,TestOperations.getFiniteStrings(utf8));
  }
 catch (  AssertionError ae) {
    System.out.println("TEST: FAILED: not same");
    System.out.println("  terms (count=" + terms.size() + "):");
    for (    BytesRef term : terms) {
      System.out.println("    " + term);
    }
    System.out.println("  automaton:");
    System.out.println(a.toDot());
    throw ae;
  }
}
