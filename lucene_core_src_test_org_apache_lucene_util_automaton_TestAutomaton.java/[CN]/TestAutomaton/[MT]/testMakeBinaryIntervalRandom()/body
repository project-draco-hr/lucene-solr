{
  int iters=atLeast(100);
  for (int iter=0; iter < iters; iter++) {
    BytesRef minTerm=TestUtil.randomBinaryTerm(random());
    boolean minInclusive=random().nextBoolean();
    BytesRef maxTerm=TestUtil.randomBinaryTerm(random());
    boolean maxInclusive=random().nextBoolean();
    Automaton a=makeBinaryInterval(minTerm,minInclusive,maxTerm,maxInclusive);
    for (int iter2=0; iter2 < 500; iter2++) {
      BytesRef term=TestUtil.randomBinaryTerm(random());
      int minCmp=minTerm.compareTo(term);
      int maxCmp=maxTerm.compareTo(term);
      boolean expected;
      if (minCmp > 0 || maxCmp < 0) {
        expected=false;
      }
 else       if (minCmp == 0 && maxCmp == 0) {
        expected=minInclusive && maxInclusive;
      }
 else       if (minCmp == 0) {
        expected=minInclusive;
      }
 else       if (maxCmp == 0) {
        expected=maxInclusive;
      }
 else {
        expected=true;
      }
      if (VERBOSE) {
        System.out.println("  check term=" + term + " expected="+ expected);
      }
      IntsRefBuilder intsBuilder=new IntsRefBuilder();
      Util.toIntsRef(term,intsBuilder);
      assertEquals(expected,Operations.run(a,intsBuilder.toIntsRef()));
    }
  }
}
