{
  int iters=atLeast(100);
  for (int iter=0; iter < iters; iter++) {
    BytesRef prefix=new BytesRef(TestUtil.randomRealisticUnicodeString(random()));
    BytesRefBuilder b=new BytesRefBuilder();
    b.append(prefix);
    int numZeros=random().nextInt(10);
    for (int i=0; i < numZeros; i++) {
      b.append((byte)0);
    }
    BytesRef minTerm=b.get();
    b=new BytesRefBuilder();
    b.append(minTerm);
    numZeros=random().nextInt(10);
    for (int i=0; i < numZeros; i++) {
      b.append((byte)0);
    }
    BytesRef maxTerm=b.get();
    boolean minInclusive=random().nextBoolean();
    boolean maxInclusive=random().nextBoolean();
    Automaton a=makeBinaryInterval(minTerm,minInclusive,maxTerm,maxInclusive);
    assertTrue(Operations.isFinite(a));
    int expectedCount=maxTerm.length - minTerm.length + 1;
    if (minInclusive == false) {
      expectedCount--;
    }
    if (maxInclusive == false) {
      expectedCount--;
    }
    if (expectedCount <= 0) {
      assertTrue(Operations.isEmpty(a));
      continue;
    }
 else {
      assertEquals(expectedCount,TestOperations.getFiniteStrings(a,expectedCount).size());
    }
    b=new BytesRefBuilder();
    b.append(minTerm);
    if (minInclusive == false) {
      assertFalse(accepts(a,b.get()));
      b.append((byte)0);
    }
    while (b.length() < maxTerm.length) {
      b.append((byte)0);
      boolean expected;
      if (b.length() == maxTerm.length) {
        expected=maxInclusive;
      }
 else {
        expected=true;
      }
      assertEquals(expected,accepts(a,b.get()));
    }
  }
}
