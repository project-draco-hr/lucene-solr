{
  StreamFactory factory=new StreamFactory().withCollectionZkHost(COLLECTION,cluster.getZkServer().getZkAddress()).withFunctionName("search",CloudSolrStream.class).withFunctionName("select",SelectStream.class).withFunctionName("innerJoin",InnerJoinStream.class).withFunctionName("jdbc",JDBCStream.class);
  try (Connection connection=DriverManager.getConnection("jdbc:hsqldb:mem:.");Statement statement=connection.createStatement()){
    statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')");
    statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')");
    statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')");
    statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')");
    statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')");
  }
   new UpdateRequest().add(id,"1","rating_f","3.5","personId_i","11").add(id,"2","rating_f","5","personId_i","12").add(id,"3","rating_f","2.2","personId_i","13").add(id,"4","rating_f","4.3","personId_i","14").add(id,"5","rating_f","3.5","personId_i","15").add(id,"6","rating_f","3","personId_i","16").add(id,"7","rating_f","3","personId_i","17").add(id,"8","rating_f","4","personId_i","18").add(id,"9","rating_f","4.1","personId_i","19").add(id,"10","rating_f","4.8","personId_i","20").commit(cluster.getSolrClient(),COLLECTION);
  String expression;
  TupleStream stream;
  List<Tuple> tuples;
  expression="innerJoin(" + "  select(" + "    search(" + COLLECTION + ", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"+ "    personId_i as personId,"+ "    rating_f as rating"+ "  ),"+ "  select("+ "    jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"ID asc\", get_column_name=true),"+ "    ID as personId,"+ "    NAME as personName,"+ "    COUNTRY_NAME as country"+ "  ),"+ "  on=\"personId\""+ ")";
  stream=factory.constructStream(expression);
  tuples=getTuples(stream);
  assertEquals(10,tuples.size());
  assertOrderOf(tuples,"personId",11,12,13,14,15,16,17,18,19,20);
  assertOrderOf(tuples,"rating",3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);
  assertOrderOf(tuples,"personName","Emma","Grace","Hailey","Isabella","Lily","Madison","Mia","Natalie","Olivia","Samantha");
  assertOrderOf(tuples,"country","Netherlands","United States","Netherlands","Netherlands","Netherlands","United States","United States","Netherlands","Netherlands","United States");
  expression="innerJoin(" + "  select(" + "    search(" + COLLECTION + ", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"+ "    personId_i as personId,"+ "    rating_f as rating"+ "  ),"+ "  select("+ "    jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"PERSONID asc\", get_column_name=false),"+ "    PERSONID as personId,"+ "    NAME as personName,"+ "    COUNTRY_NAME as country"+ "  ),"+ "  on=\"personId\""+ ")";
  stream=factory.constructStream(expression);
  tuples=getTuples(stream);
  assertEquals(10,tuples.size());
  assertOrderOf(tuples,"personId",11,12,13,14,15,16,17,18,19,20);
  assertOrderOf(tuples,"rating",3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);
  assertOrderOf(tuples,"personName","Emma","Grace","Hailey","Isabella","Lily","Madison","Mia","Natalie","Olivia","Samantha");
  assertOrderOf(tuples,"country","Netherlands","United States","Netherlands","Netherlands","Netherlands","United States","United States","Netherlands","Netherlands","United States");
}
