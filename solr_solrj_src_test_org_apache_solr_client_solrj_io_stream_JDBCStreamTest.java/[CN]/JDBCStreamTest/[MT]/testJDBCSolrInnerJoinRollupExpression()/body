{
  clearData();
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withFunctionName("search",CloudSolrStream.class).withFunctionName("select",SelectStream.class).withFunctionName("hashJoin",HashJoinStream.class).withFunctionName("rollup",RollupStream.class).withFunctionName("jdbc",JDBCStream.class).withFunctionName("max",MaxMetric.class).withFunctionName("min",MinMetric.class).withFunctionName("avg",MeanMetric.class).withFunctionName("count",CountMetric.class);
  Connection connection=DriverManager.getConnection("jdbc:hsqldb:mem:.");
  Statement statement=connection.createStatement();
  statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')");
  statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')");
  statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')");
  statement.executeUpdate("insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')");
  statement.executeUpdate("insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')");
  statement.close();
  connection.close();
  indexr(id,"1","rating_f","3.5","personId_i","11");
  indexr(id,"3","rating_f","2.2","personId_i","13");
  indexr(id,"4","rating_f","4.3","personId_i","14");
  indexr(id,"5","rating_f","3.5","personId_i","15");
  indexr(id,"8","rating_f","4","personId_i","18");
  indexr(id,"9","rating_f","4.1","personId_i","19");
  indexr(id,"2","rating_f","5","personId_i","12");
  indexr(id,"6","rating_f","3","personId_i","16");
  indexr(id,"7","rating_f","3","personId_i","17");
  indexr(id,"10","rating_f","4.8","personId_i","20");
  commit();
  String expression;
  TupleStream stream;
  List<Tuple> tuples;
  expression="rollup(" + "  hashJoin(" + "    hashed=select("+ "      search(collection1, fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"+ "      personId_i as personId,"+ "      rating_f as rating"+ "    ),"+ "    select("+ "      jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by COUNTRIES.COUNTRY_NAME\", sort=\"COUNTRIES.COUNTRY_NAME asc\"),"+ "      ID as personId,"+ "      NAME as personName,"+ "      COUNTRY_NAME as country"+ "    ),"+ "    on=\"personId\""+ "  ),"+ "  over=\"country\","+ "  max(rating),"+ "  min(rating),"+ "  avg(rating),"+ "  count(*)"+ ")";
  stream=factory.constructStream(expression);
  tuples=getTuples(stream);
  assertEquals(2,tuples.size());
  Tuple tuple=tuples.get(0);
  assertEquals("Netherlands",tuple.getString("country"));
  assertTrue(4.3D == tuple.getDouble("max(rating)"));
  assertTrue(2.2D == tuple.getDouble("min(rating)"));
  assertTrue(3.6D == tuple.getDouble("avg(rating)"));
  assertTrue(6D == tuple.getDouble("count(*)"));
  tuple=tuples.get(1);
  assertEquals("United States",tuple.getString("country"));
  assertTrue(5D == tuple.getDouble("max(rating)"));
  assertTrue(3D == tuple.getDouble("min(rating)"));
  assertTrue(3.95D == tuple.getDouble("avg(rating)"));
  assertTrue(4D == tuple.getDouble("count(*)"));
}
