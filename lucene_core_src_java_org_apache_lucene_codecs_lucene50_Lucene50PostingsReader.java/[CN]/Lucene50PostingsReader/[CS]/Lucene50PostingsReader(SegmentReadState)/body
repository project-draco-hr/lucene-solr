{
  boolean success=false;
  IndexInput docIn=null;
  IndexInput posIn=null;
  IndexInput payIn=null;
  String docName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.DOC_EXTENSION);
  try {
    docIn=state.directory.openInput(docName,state.context);
    version=CodecUtil.checkSegmentHeader(docIn,Lucene50PostingsWriter.DOC_CODEC,Lucene50PostingsWriter.VERSION_START,Lucene50PostingsWriter.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
    forUtil=new ForUtil(docIn);
    CodecUtil.retrieveChecksum(docIn);
    if (state.fieldInfos.hasProx()) {
      String proxName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.POS_EXTENSION);
      posIn=state.directory.openInput(proxName,state.context);
      CodecUtil.checkSegmentHeader(posIn,Lucene50PostingsWriter.POS_CODEC,version,version,state.segmentInfo.getId(),state.segmentSuffix);
      CodecUtil.retrieveChecksum(posIn);
      if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {
        String payName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.PAY_EXTENSION);
        payIn=state.directory.openInput(payName,state.context);
        CodecUtil.checkSegmentHeader(payIn,Lucene50PostingsWriter.PAY_CODEC,version,version,state.segmentInfo.getId(),state.segmentSuffix);
        CodecUtil.retrieveChecksum(payIn);
      }
    }
    this.docIn=docIn;
    this.posIn=posIn;
    this.payIn=payIn;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(docIn,posIn,payIn);
    }
  }
}
