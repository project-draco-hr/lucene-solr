{
  docFreq=termState.docFreq;
  docTermStartFP=termState.docStartFP;
  posTermStartFP=termState.posStartFP;
  payTermStartFP=termState.payStartFP;
  skipOffset=termState.skipOffset;
  totalTermFreq=termState.totalTermFreq;
  singletonDocID=termState.singletonDocID;
  if (docFreq > 1) {
    if (docIn == null) {
      docIn=startDocIn.clone();
    }
    docIn.seek(docTermStartFP);
  }
  posPendingFP=posTermStartFP;
  payPendingFP=payTermStartFP;
  posPendingCount=0;
  if (termState.totalTermFreq < BLOCK_SIZE) {
    lastPosBlockFP=posTermStartFP;
  }
 else   if (termState.totalTermFreq == BLOCK_SIZE) {
    lastPosBlockFP=-1;
  }
 else {
    lastPosBlockFP=posTermStartFP + termState.lastPosBlockOffset;
  }
  this.needsOffsets=PostingsEnum.featureRequested(flags,PostingsEnum.OFFSETS);
  this.needsPayloads=PostingsEnum.featureRequested(flags,PostingsEnum.PAYLOADS);
  doc=-1;
  accum=0;
  docUpto=0;
  if (docFreq > BLOCK_SIZE) {
    nextSkipDoc=BLOCK_SIZE - 1;
  }
 else {
    nextSkipDoc=NO_MORE_DOCS;
  }
  docBufferUpto=BLOCK_SIZE;
  skipped=false;
  return this;
}
