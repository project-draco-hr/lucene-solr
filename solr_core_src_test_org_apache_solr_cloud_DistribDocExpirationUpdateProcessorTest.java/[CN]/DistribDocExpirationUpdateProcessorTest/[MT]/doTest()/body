{
  assertTrue("only one shard?!?!?!",1 < shardToJetty.keySet().size());
  log.info("number of shards: {}",shardToJetty.keySet().size());
  handle.clear();
  handle.put("maxScore",SKIPVAL);
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  for (int i=1; i <= 100; i++) {
    indexDoc(sdoc("id",i));
  }
  commit();
  waitForThingsToLevelOut(30);
  waitForNoResults(0,params("q","id:999","rows","0","_trace","sanity_check"));
  final Map<String,Long> initIndexVersions=getIndexVersionOfAllReplicas();
  assertTrue("WTF? no versions?",0 < initIndexVersions.size());
  indexDoc(sdoc("id","999","tTl_s","+30SECONDS"));
  commit();
  waitForNoResults(180,params("q","id:999","rows","0","_trace","did_it_expire_yet"));
  waitForThingsToLevelOut(30);
  final Map<String,Long> finalIndexVersions=getIndexVersionOfAllReplicas();
  assertEquals("WTF? not same num versions?",initIndexVersions.size(),finalIndexVersions.size());
  final Set<String> nodesThatChange=new HashSet<String>();
  final Set<String> shardsThatChange=new HashSet<String>();
  int coresCompared=0;
  for (  String shard : shardToJetty.keySet()) {
    for (    CloudJettyRunner replicaRunner : shardToJetty.get(shard)) {
      coresCompared++;
      String core=replicaRunner.coreNodeName;
      Long initVersion=initIndexVersions.get(core);
      Long finalVersion=finalIndexVersions.get(core);
      assertNotNull(shard + ": no init version for core: " + core,initVersion);
      assertNotNull(shard + ": no final version for core: " + core,finalVersion);
      if (!initVersion.equals(finalVersion)) {
        nodesThatChange.add(core + "(" + shard+ ")");
        shardsThatChange.add(shard);
      }
    }
  }
  assertEquals("Exactly one shard should have changed, instead: " + shardsThatChange + " nodes=("+ nodesThatChange+ ")",1,shardsThatChange.size());
  assertEquals("somehow we missed some cores?",initIndexVersions.size(),coresCompared);
}
