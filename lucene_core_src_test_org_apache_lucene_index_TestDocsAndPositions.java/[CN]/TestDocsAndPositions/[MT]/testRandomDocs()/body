{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  int numDocs=atLeast(49);
  int max=15678;
  int term=random().nextInt(max);
  int[] freqInDoc=new int[numDocs];
  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);
  customType.setOmitNorms(true);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < 199; j++) {
      int nextInt=random().nextInt(max);
      builder.append(nextInt).append(' ');
      if (nextInt == term) {
        freqInDoc[i]++;
      }
    }
    doc.add(newField(fieldName,builder.toString(),customType));
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  int num=atLeast(13);
  for (int i=0; i < num; i++) {
    BytesRef bytes=new BytesRef("" + term);
    IndexReaderContext topReaderContext=reader.getContext();
    for (    LeafReaderContext context : topReaderContext.leaves()) {
      int maxDoc=context.reader().maxDoc();
      PostingsEnum postingsEnum=TestUtil.docs(random(),context.reader(),fieldName,bytes,null,null,PostingsEnum.FREQS);
      if (findNext(freqInDoc,context.docBase,context.docBase + maxDoc) == Integer.MAX_VALUE) {
        assertNull(postingsEnum);
        continue;
      }
      assertNotNull(postingsEnum);
      postingsEnum.nextDoc();
      for (int j=0; j < maxDoc; j++) {
        if (freqInDoc[context.docBase + j] != 0) {
          assertEquals(j,postingsEnum.docID());
          assertEquals(postingsEnum.freq(),freqInDoc[context.docBase + j]);
          if (i % 2 == 0 && random().nextInt(10) == 0) {
            int next=findNext(freqInDoc,context.docBase + j + 1,context.docBase + maxDoc) - context.docBase;
            int advancedTo=postingsEnum.advance(next);
            if (next >= maxDoc) {
              assertEquals(DocIdSetIterator.NO_MORE_DOCS,advancedTo);
            }
 else {
              assertTrue("advanced to: " + advancedTo + " but should be <= "+ next,next >= advancedTo);
            }
          }
 else {
            postingsEnum.nextDoc();
          }
        }
      }
      assertEquals("docBase: " + context.docBase + " maxDoc: "+ maxDoc+ " "+ postingsEnum.getClass(),DocIdSetIterator.NO_MORE_DOCS,postingsEnum.docID());
    }
  }
  reader.close();
  dir.close();
}
