{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  for (int i=0; i < 39; i++) {
    Document doc=new Document();
    FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);
    customType.setOmitNorms(true);
    doc.add(newField(fieldName,"1 2 3 4 5 6 7 8 9 10 " + "1 2 3 4 5 6 7 8 9 10 " + "1 2 3 4 5 6 7 8 9 10 "+ "1 2 3 4 5 6 7 8 9 10",customType));
    writer.addDocument(doc);
  }
  IndexReader reader=writer.getReader();
  writer.close();
  int num=atLeast(13);
  for (int i=0; i < num; i++) {
    BytesRef bytes=new BytesRef("1");
    IndexReaderContext topReaderContext=reader.getTopReaderContext();
    AtomicReaderContext[] leaves=topReaderContext.leaves();
    for (    AtomicReaderContext atomicReaderContext : leaves) {
      DocsAndPositionsEnum docsAndPosEnum=getDocsAndPositions(atomicReaderContext.reader(),bytes,null);
      assertNotNull(docsAndPosEnum);
      if (atomicReaderContext.reader().maxDoc() == 0) {
        continue;
      }
      final int advance=docsAndPosEnum.advance(random().nextInt(atomicReaderContext.reader().maxDoc()));
      do {
        String msg="Advanced to: " + advance + " current doc: "+ docsAndPosEnum.docID();
        assertEquals(msg,4,docsAndPosEnum.freq());
        assertEquals(msg,0,docsAndPosEnum.nextPosition());
        assertEquals(msg,4,docsAndPosEnum.freq());
        assertEquals(msg,10,docsAndPosEnum.nextPosition());
        assertEquals(msg,4,docsAndPosEnum.freq());
        assertEquals(msg,20,docsAndPosEnum.nextPosition());
        assertEquals(msg,4,docsAndPosEnum.freq());
        assertEquals(msg,30,docsAndPosEnum.nextPosition());
      }
 while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
    }
  }
  reader.close();
  directory.close();
}
