{
  BooleanQuery.Builder q=new BooleanQuery.Builder();
  PhraseQuery phraseQuery=new PhraseQuery(1,FIELD,"w1","w2");
  q.add(phraseQuery,Occur.MUST);
  q.add(snear(st("w2"),sor("w5","zz"),4,true),Occur.SHOULD);
  q.add(snear(sf("w3",2),st("w2"),st("w3"),5,true),Occur.SHOULD);
  Query t=new BooleanQuery.Builder().add(new TermQuery(new Term(FIELD,"xx")),Occur.MUST).add(matchTheseItems(new int[]{1,3}),Occur.FILTER).build();
  q.add(new BoostQuery(t,1000),Occur.SHOULD);
  t=new ConstantScoreQuery(matchTheseItems(new int[]{0,2}));
  q.add(new BoostQuery(t,-20),Occur.SHOULD);
  List<Query> disjuncts=new ArrayList<>();
  disjuncts.add(snear(st("w2"),sor("w5","zz"),4,true));
  disjuncts.add(new TermQuery(new Term(FIELD,"QQ")));
  BooleanQuery.Builder xxYYZZ=new BooleanQuery.Builder();
  ;
  xxYYZZ.add(new TermQuery(new Term(FIELD,"xx")),Occur.SHOULD);
  xxYYZZ.add(new TermQuery(new Term(FIELD,"yy")),Occur.SHOULD);
  xxYYZZ.add(new TermQuery(new Term(FIELD,"zz")),Occur.MUST_NOT);
  disjuncts.add(xxYYZZ.build());
  BooleanQuery.Builder xxW1=new BooleanQuery.Builder();
  ;
  xxW1.add(new TermQuery(new Term(FIELD,"xx")),Occur.MUST_NOT);
  xxW1.add(new TermQuery(new Term(FIELD,"w1")),Occur.MUST_NOT);
  disjuncts.add(xxW1.build());
  DisjunctionMaxQuery dm2=new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(FIELD,"w1")),new TermQuery(new Term(FIELD,"w2")),new TermQuery(new Term(FIELD,"w3"))),0.5f);
  disjuncts.add(dm2);
  q.add(new DisjunctionMaxQuery(disjuncts,0.2f),Occur.SHOULD);
  BooleanQuery.Builder builder=new BooleanQuery.Builder();
  ;
  builder.setMinimumNumberShouldMatch(2);
  builder.add(snear("w1","w2",1,true),Occur.SHOULD);
  builder.add(snear("w2","w3",1,true),Occur.SHOULD);
  builder.add(snear("w1","w3",3,true),Occur.SHOULD);
  BooleanQuery b=builder.build();
  q.add(new BoostQuery(b,0),Occur.SHOULD);
  qtest(q.build(),new int[]{0,1,2});
}
