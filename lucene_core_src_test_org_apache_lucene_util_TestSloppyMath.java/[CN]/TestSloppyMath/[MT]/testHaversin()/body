{
  assertTrue(Double.isNaN(haversin(1,1,1,Double.NaN)));
  assertTrue(Double.isNaN(haversin(1,1,Double.NaN,1)));
  assertTrue(Double.isNaN(haversin(1,Double.NaN,1,1)));
  assertTrue(Double.isNaN(haversin(Double.NaN,1,1,1)));
  assertEquals(0,haversin(0,0,0,0),0D);
  assertEquals(0,haversin(0,-180,0,-180),0D);
  assertEquals(0,haversin(0,-180,0,180),0D);
  assertEquals(0,haversin(0,180,0,180),0D);
  assertEquals(0,haversin(90,0,90,0),0D);
  assertEquals(0,haversin(90,-180,90,-180),0D);
  assertEquals(0,haversin(90,-180,90,180),0D);
  assertEquals(0,haversin(90,180,90,180),0D);
  assertEquals(314.40338,haversin(1,2,3,4),10e-5);
  assertEquals(0,haversin(40.7143528,-74.0059731,40.7143528,-74.0059731),0D);
  assertEquals(5.286,haversin(40.7143528,-74.0059731,40.759011,-73.9844722),0.01D);
  assertEquals(0.4621,haversin(40.7143528,-74.0059731,40.718266,-74.007819),0.01D);
  assertEquals(1.055,haversin(40.7143528,-74.0059731,40.7051157,-74.0088305),0.01D);
  assertEquals(1.258,haversin(40.7143528,-74.0059731,40.7247222,-74),0.01D);
  assertEquals(2.029,haversin(40.7143528,-74.0059731,40.731033,-73.9962255),0.01D);
  assertEquals(8.572,haversin(40.7143528,-74.0059731,40.65,-73.95),0.01D);
}
