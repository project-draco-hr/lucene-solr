{
  assertTrue(Double.isNaN(cos(Double.NaN)));
  assertTrue(Double.isNaN(cos(Double.NEGATIVE_INFINITY)));
  assertTrue(Double.isNaN(cos(Double.POSITIVE_INFINITY)));
  assertEquals(StrictMath.cos(1),cos(1),COS_DELTA);
  assertEquals(StrictMath.cos(0),cos(0),COS_DELTA);
  assertEquals(StrictMath.cos(Math.PI / 2),cos(Math.PI / 2),COS_DELTA);
  assertEquals(StrictMath.cos(-Math.PI / 2),cos(-Math.PI / 2),COS_DELTA);
  assertEquals(StrictMath.cos(Math.PI / 4),cos(Math.PI / 4),COS_DELTA);
  assertEquals(StrictMath.cos(-Math.PI / 4),cos(-Math.PI / 4),COS_DELTA);
  assertEquals(StrictMath.cos(Math.PI * 2 / 3),cos(Math.PI * 2 / 3),COS_DELTA);
  assertEquals(StrictMath.cos(-Math.PI * 2 / 3),cos(-Math.PI * 2 / 3),COS_DELTA);
  assertEquals(StrictMath.cos(Math.PI / 6),cos(Math.PI / 6),COS_DELTA);
  assertEquals(StrictMath.cos(-Math.PI / 6),cos(-Math.PI / 6),COS_DELTA);
  for (int i=0; i < 10000; i++) {
    double d=random().nextDouble() * SloppyMath.SIN_COS_MAX_VALUE_FOR_INT_MODULO;
    if (random().nextBoolean()) {
      d=-d;
    }
    assertEquals(StrictMath.cos(d),cos(d),COS_DELTA);
  }
}
