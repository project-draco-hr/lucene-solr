{
  assertTrue(Double.isNaN(asin(Double.NaN)));
  assertTrue(Double.isNaN(asin(2)));
  assertTrue(Double.isNaN(asin(-2)));
  assertEquals(-Math.PI / 2,asin(-1),ASIN_DELTA);
  assertEquals(-Math.PI / 3,asin(-0.8660254),ASIN_DELTA);
  assertEquals(-Math.PI / 4,asin(-0.7071068),ASIN_DELTA);
  assertEquals(-Math.PI / 6,asin(-0.5),ASIN_DELTA);
  assertEquals(0,asin(0),ASIN_DELTA);
  assertEquals(Math.PI / 6,asin(0.5),ASIN_DELTA);
  assertEquals(Math.PI / 4,asin(0.7071068),ASIN_DELTA);
  assertEquals(Math.PI / 3,asin(0.8660254),ASIN_DELTA);
  assertEquals(Math.PI / 2,asin(1),ASIN_DELTA);
  for (int i=0; i < 10000; i++) {
    double d=random().nextDouble();
    if (random().nextBoolean()) {
      d=-d;
    }
    assertEquals(StrictMath.asin(d),asin(d),ASIN_DELTA);
    assertTrue(asin(d) >= -Math.PI / 2);
    assertTrue(asin(d) <= Math.PI / 2);
  }
}
