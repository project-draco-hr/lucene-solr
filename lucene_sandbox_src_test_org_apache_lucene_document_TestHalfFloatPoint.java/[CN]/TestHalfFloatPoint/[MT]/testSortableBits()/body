{
  int low=Short.MIN_VALUE;
  int high=Short.MAX_VALUE;
  while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short)low))) {
    ++low;
  }
  while (HalfFloatPoint.sortableShortToHalfFloat((short)low) == Float.NEGATIVE_INFINITY) {
    ++low;
  }
  while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short)high))) {
    --high;
  }
  while (HalfFloatPoint.sortableShortToHalfFloat((short)high) == Float.POSITIVE_INFINITY) {
    --high;
  }
  for (int i=low; i <= high + 1; ++i) {
    float previous=HalfFloatPoint.sortableShortToHalfFloat((short)(i - 1));
    float current=HalfFloatPoint.sortableShortToHalfFloat((short)i);
    assertEquals(i,HalfFloatPoint.halfFloatToSortableShort(current));
    assertTrue(Float.compare(previous,current) < 0);
  }
}
