{
  float[] values=new float[0];
  int o=0;
  for (int i=Short.MIN_VALUE; i <= Short.MAX_VALUE; ++i) {
    float v=HalfFloatPoint.sortableShortToHalfFloat((short)i);
    if (Float.isFinite(v)) {
      if (o == values.length) {
        values=ArrayUtil.grow(values);
      }
      values[o++]=v;
    }
  }
  values=Arrays.copyOf(values,o);
  int iters=atLeast(1000000);
  for (int iter=0; iter < iters; ++iter) {
    float f;
    if (random().nextBoolean()) {
      int floatBits=random().nextInt();
      f=Float.intBitsToFloat(floatBits);
    }
 else {
      f=(float)((2 * random().nextFloat() - 1) * Math.pow(2,TestUtil.nextInt(random(),-16,16)));
    }
    float rounded=HalfFloatPoint.shortBitsToHalfFloat(HalfFloatPoint.halfFloatToShortBits(f));
    if (Float.isFinite(f) == false) {
      assertEquals(Float.floatToIntBits(f),Float.floatToIntBits(rounded),0f);
    }
 else     if (Float.isFinite(rounded) == false) {
      assertFalse(Float.isNaN(rounded));
      assertTrue(Math.abs(f) >= 65520);
    }
 else {
      int index=Arrays.binarySearch(values,f);
      float closest;
      if (index >= 0) {
        closest=values[index];
      }
 else {
        index=-1 - index;
        closest=Float.POSITIVE_INFINITY;
        if (index < values.length) {
          closest=values[index];
        }
        if (index - 1 >= 0) {
          if (f - values[index - 1] < closest - f) {
            closest=values[index - 1];
          }
 else           if (f - values[index - 1] == closest - f && Integer.numberOfTrailingZeros(Float.floatToIntBits(values[index - 1])) > Integer.numberOfTrailingZeros(Float.floatToIntBits(closest))) {
            closest=values[index - 1];
          }
        }
      }
      assertEquals(closest,rounded,0f);
    }
  }
}
