{
  Map<String,Float> originalValues=getOriginalValues();
  MoreLikeThis mlt=new MoreLikeThis(reader);
  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
  mlt.setAnalyzer(analyzer);
  mlt.setMinDocFreq(1);
  mlt.setMinTermFreq(1);
  mlt.setMinWordLen(1);
  mlt.setFieldNames(new String[]{"text"});
  mlt.setBoost(true);
  float boostFactor=5;
  mlt.setBoostFactor(boostFactor);
  BooleanQuery query=(BooleanQuery)mlt.like("text",new StringReader("lucene release"));
  Collection<BooleanClause> clauses=query.clauses();
  assertEquals("Expected " + originalValues.size() + " clauses.",originalValues.size(),clauses.size());
  for (  BooleanClause clause : clauses) {
    BoostQuery bq=(BoostQuery)clause.getQuery();
    TermQuery tq=(TermQuery)bq.getQuery();
    Float termBoost=originalValues.get(tq.getTerm().text());
    assertNotNull("Expected term " + tq.getTerm().text(),termBoost);
    float totalBoost=termBoost * boostFactor;
    assertEquals("Expected boost of " + totalBoost + " for term '"+ tq.getTerm().text()+ "' got "+ bq.getBoost(),totalBoost,bq.getBoost(),0.0001);
  }
  analyzer.close();
}
