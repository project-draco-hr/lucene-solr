{
  searcher.search(pq,new Collector(){
    Scorer scorer;
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      assertFalse(Float.isInfinite(scorer.freq()));
      assertFalse(Float.isInfinite(scorer.score()));
    }
    @Override public void setNextReader(    AtomicReaderContext context) throws IOException {
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return false;
    }
  }
);
  QueryUtils.check(random(),pq,searcher);
}
