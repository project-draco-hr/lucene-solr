{
  int num=atLeast(10000);
  TreeMap<BytesRef,Long> sorted=new TreeMap<BytesRef,Long>();
  TermFreq[] unsorted=new TermFreq[num];
  for (int i=0; i < num; i++) {
    BytesRef key;
    do {
      key=new BytesRef(_TestUtil.randomUnicodeString(random));
    }
 while (sorted.containsKey(key));
    long value=random.nextLong();
    sorted.put(key,value);
    unsorted[i]=new TermFreq(key,value);
  }
  TermFreqIterator wrapper=new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted),BytesRef.getUTF8SortedAsUnicodeComparator());
  Iterator<Map.Entry<BytesRef,Long>> expected=sorted.entrySet().iterator();
  while (expected.hasNext()) {
    Map.Entry<BytesRef,Long> entry=expected.next();
    assertEquals(entry.getKey(),wrapper.next());
    assertEquals(entry.getValue().longValue(),wrapper.weight(),0F);
  }
  assertNull(wrapper.next());
  wrapper=new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));
  TreeMap<BytesRef,Long> actual=new TreeMap<BytesRef,Long>();
  BytesRef key;
  while ((key=wrapper.next()) != null) {
    long value=wrapper.weight();
    actual.put(BytesRef.deepCopyOf(key),value);
  }
  assertEquals(sorted,actual);
}
