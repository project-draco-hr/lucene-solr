{
  int start=0;
  List<SolrInputDocument> docs=new ArrayList<>();
  for (; start < 50; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.START);
  this.waitForCdcrStateReplication(SOURCE_COLLECTION);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  commit(TARGET_COLLECTION);
  assertNumDocs(50,SOURCE_COLLECTION);
  assertNumDocs(50,TARGET_COLLECTION);
  deleteByQuery(SOURCE_COLLECTION,"*:*");
  deleteByQuery(TARGET_COLLECTION,"*:*");
  assertNumDocs(0,SOURCE_COLLECTION);
  assertNumDocs(0,TARGET_COLLECTION);
  docs.clear();
  for (; start < 100; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  commit(TARGET_COLLECTION);
  assertNumDocs(50,SOURCE_COLLECTION);
  assertNumDocs(50,TARGET_COLLECTION);
  deleteByQuery(TARGET_COLLECTION,"*:*");
  assertNumDocs(50,SOURCE_COLLECTION);
  assertNumDocs(0,TARGET_COLLECTION);
  this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.STOP);
  this.waitForCdcrStateReplication(SOURCE_COLLECTION);
  this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.START);
  this.waitForCdcrStateReplication(SOURCE_COLLECTION);
  docs.clear();
  for (; start < 150; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  commit(TARGET_COLLECTION);
  assertNumDocs(100,SOURCE_COLLECTION);
  assertNumDocs(50,TARGET_COLLECTION);
}
