{
  int start=0;
  List<SolrInputDocument> docs=new ArrayList<>();
  for (; start < 50; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  List<String> ids=new ArrayList<>();
  for (int id=10; id < 20; id++) {
    ids.add(Integer.toString(id));
  }
  deleteById(SOURCE_COLLECTION,ids);
  docs=new ArrayList<>();
  for (; start < 60; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  ids=new ArrayList<>();
  ids.add(Integer.toString(50));
  deleteById(SOURCE_COLLECTION,ids);
  docs=new ArrayList<>();
  for (; start < 70; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.START);
  this.waitForCdcrStateReplication(SOURCE_COLLECTION);
  this.waitForBootstrapToComplete(TARGET_COLLECTION,SHARD1);
  this.waitForBootstrapToComplete(TARGET_COLLECTION,SHARD2);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  commit(TARGET_COLLECTION);
  assertNumDocs(59,SOURCE_COLLECTION);
  assertNumDocs(59,TARGET_COLLECTION);
}
