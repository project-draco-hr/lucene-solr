{
  this.clearSourceCollection();
  this.clearTargetCollection();
  NamedList rsp=invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.START);
  NamedList status=(NamedList)rsp.get(CdcrParams.CdcrAction.STATUS.toLower());
  assertEquals(CdcrParams.ProcessState.STARTED.toLower(),status.get(CdcrParams.ProcessState.getParam()));
  this.assertState(SOURCE_COLLECTION,CdcrParams.ProcessState.STARTED,CdcrParams.BufferState.ENABLED);
  this.deleteCollection(TARGET_COLLECTION);
  index(SOURCE_COLLECTION,getDoc(id,"a"));
  index(SOURCE_COLLECTION,getDoc(id,"b"));
  index(SOURCE_COLLECTION,getDoc(id,"c"));
  index(SOURCE_COLLECTION,getDoc(id,"d"));
  index(SOURCE_COLLECTION,getDoc(id,"e"));
  index(SOURCE_COLLECTION,getDoc(id,"f"));
  assertEquals(6,getNumDocs(SOURCE_COLLECTION));
  Thread.sleep(1000);
  rsp=invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2),CdcrParams.CdcrAction.ERRORS);
  NamedList collections=(NamedList)((NamedList)rsp.get(CdcrParams.ERRORS)).getVal(0);
  NamedList errors=(NamedList)collections.get(TARGET_COLLECTION);
  assertTrue(0 < (Long)errors.get(CdcrParams.CONSECUTIVE_ERRORS));
  NamedList lastErrors=(NamedList)errors.get(CdcrParams.LAST);
  assertNotNull(lastErrors);
  assertTrue(0 < lastErrors.size());
}
