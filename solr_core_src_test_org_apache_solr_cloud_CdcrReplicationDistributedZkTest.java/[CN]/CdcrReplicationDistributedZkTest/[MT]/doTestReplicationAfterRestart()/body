{
  this.clearSourceCollection();
  this.clearTargetCollection();
  log.info("Starting CDCR");
  this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1),CdcrParams.CdcrAction.START);
  log.info("Indexing 10 documents");
  int start=0;
  List<SolrInputDocument> docs=new ArrayList<>();
  for (; start < 10; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  log.info("Querying source collection");
  assertEquals(10,getNumDocs(SOURCE_COLLECTION));
  log.info("Waiting for replication");
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  log.info("Querying target collection");
  commit(TARGET_COLLECTION);
  assertEquals(10,getNumDocs(TARGET_COLLECTION));
  log.info("Restarting shard1");
  this.restartServers(shardToJetty.get(SOURCE_COLLECTION).get(SHARD1));
  log.info("Indexing 100 documents");
  docs.clear();
  for (; start < 110; start++) {
    docs.add(getDoc(id,Integer.toString(start)));
  }
  index(SOURCE_COLLECTION,docs);
  log.info("Querying source collection");
  assertEquals(110,getNumDocs(SOURCE_COLLECTION));
  log.info("Waiting for replication");
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD1);
  this.waitForReplicationToComplete(SOURCE_COLLECTION,SHARD2);
  log.info("Querying target collection");
  commit(TARGET_COLLECTION);
  assertEquals(110,getNumDocs(TARGET_COLLECTION));
}
