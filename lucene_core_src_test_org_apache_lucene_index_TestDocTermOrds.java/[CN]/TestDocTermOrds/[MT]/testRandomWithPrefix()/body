{
  Directory dir=newDirectory();
  final Set<String> prefixes=new HashSet<String>();
  final int numPrefix=_TestUtil.nextInt(random(),2,7);
  if (VERBOSE) {
    System.out.println("TEST: use " + numPrefix + " prefixes");
  }
  while (prefixes.size() < numPrefix) {
    prefixes.add(_TestUtil.randomRealisticUnicodeString(random()));
  }
  final String[] prefixesArray=prefixes.toArray(new String[prefixes.size()]);
  final int NUM_TERMS=atLeast(20);
  final Set<BytesRef> terms=new HashSet<BytesRef>();
  while (terms.size() < NUM_TERMS) {
    final String s=prefixesArray[random().nextInt(prefixesArray.length)] + _TestUtil.randomRealisticUnicodeString(random());
    if (s.length() > 0) {
      terms.add(new BytesRef(s));
    }
  }
  final BytesRef[] termsArray=terms.toArray(new BytesRef[terms.size()]);
  Arrays.sort(termsArray);
  final int NUM_DOCS=atLeast(100);
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  if (random().nextInt(10) == 7) {
    Codec codec=_TestUtil.alwaysPostingsFormat(PostingsFormat.forName("Lucene40WithOrds"));
    conf.setCodec(codec);
  }
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir,conf);
  final int[][] idToOrds=new int[NUM_DOCS][];
  final Set<Integer> ordsForDocSet=new HashSet<Integer>();
  for (int id=0; id < NUM_DOCS; id++) {
    Document doc=new Document();
    doc.add(new IntField("id",id,Field.Store.NO));
    final int termCount=_TestUtil.nextInt(random(),0,20 * RANDOM_MULTIPLIER);
    while (ordsForDocSet.size() < termCount) {
      ordsForDocSet.add(random().nextInt(termsArray.length));
    }
    final int[] ordsForDoc=new int[termCount];
    int upto=0;
    if (VERBOSE) {
      System.out.println("TEST: doc id=" + id);
    }
    for (    int ord : ordsForDocSet) {
      ordsForDoc[upto++]=ord;
      Field field=newStringField("field",termsArray[ord].utf8ToString(),Field.Store.NO);
      if (VERBOSE) {
        System.out.println("  f=" + termsArray[ord].utf8ToString());
      }
      doc.add(field);
    }
    ordsForDocSet.clear();
    Arrays.sort(ordsForDoc);
    idToOrds[id]=ordsForDoc;
    w.addDocument(doc);
  }
  final DirectoryReader r=w.getReader();
  w.close();
  if (VERBOSE) {
    System.out.println("TEST: reader=" + r);
  }
  AtomicReader slowR=SlowCompositeReaderWrapper.wrap(r);
  for (  String prefix : prefixesArray) {
    final BytesRef prefixRef=prefix == null ? null : new BytesRef(prefix);
    final int[][] idToOrdsPrefix=new int[NUM_DOCS][];
    for (int id=0; id < NUM_DOCS; id++) {
      final int[] docOrds=idToOrds[id];
      final List<Integer> newOrds=new ArrayList<Integer>();
      for (      int ord : idToOrds[id]) {
        if (StringHelper.startsWith(termsArray[ord],prefixRef)) {
          newOrds.add(ord);
        }
      }
      final int[] newOrdsArray=new int[newOrds.size()];
      int upto=0;
      for (      int ord : newOrds) {
        newOrdsArray[upto++]=ord;
      }
      idToOrdsPrefix[id]=newOrdsArray;
    }
    for (    AtomicReaderContext ctx : r.leaves()) {
      if (VERBOSE) {
        System.out.println("\nTEST: sub=" + ctx.reader());
      }
      verify(ctx.reader(),idToOrdsPrefix,termsArray,prefixRef);
    }
    if (VERBOSE) {
      System.out.println("TEST: top reader");
    }
    verify(slowR,idToOrdsPrefix,termsArray,prefixRef);
  }
  FieldCache.DEFAULT.purge(slowR);
  r.close();
  dir.close();
}
