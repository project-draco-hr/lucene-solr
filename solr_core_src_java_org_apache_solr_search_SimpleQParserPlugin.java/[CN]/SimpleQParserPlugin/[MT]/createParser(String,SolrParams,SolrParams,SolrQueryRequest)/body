{
  SolrParams defaultParams=SolrParams.wrapDefaults(localParams,params);
  Map<String,Float> queryFields=SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));
  if (queryFields.isEmpty()) {
    String defaultField=QueryParsing.getDefaultField(req.getSchema(),defaultParams.get(CommonParams.DF));
    if (defaultField == null) {
      throw new IllegalStateException("Neither " + SimpleParams.QF + ", "+ CommonParams.DF+ ", nor the default search field are present.");
    }
    queryFields.put(defaultField,1.0F);
  }
 else {
    for (    Map.Entry<String,Float> queryField : queryFields.entrySet()) {
      if (queryField.getValue() == null) {
        queryField.setValue(1.0F);
      }
    }
  }
  int enabledOps=0;
  String opParam=defaultParams.get(SimpleParams.QO);
  if (opParam == null) {
    enabledOps=-1;
  }
 else {
    String[] operations=opParam.split(",");
    for (    String operation : operations) {
      Integer enabledOp=OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));
      if (enabledOp != null) {
        enabledOps|=enabledOp;
      }
    }
  }
  final IndexSchema schema=req.getSchema();
  final SimpleQueryParser parser=new SimpleQueryParser(req.getSchema().getAnalyzer(),queryFields,enabledOps){
    @Override protected Query newPrefixQuery(    String text){
      BooleanQuery bq=new BooleanQuery(true);
      for (      Map.Entry<String,Float> entry : weights.entrySet()) {
        String field=entry.getKey();
        FieldType type=schema.getFieldType(field);
        Query prefix;
        if (type instanceof TextField) {
          Analyzer analyzer=((TextField)type).getMultiTermAnalyzer();
          String term=TextField.analyzeMultiTerm(field,text,analyzer).utf8ToString();
          prefix=new PrefixQuery(new Term(field,term));
        }
 else {
          prefix=new PrefixQuery(new Term(entry.getKey(),text));
        }
        prefix.setBoost(entry.getValue());
        bq.add(prefix,BooleanClause.Occur.SHOULD);
      }
      return simplify(bq);
    }
  }
;
  QueryParser.Operator defaultOp=QueryParsing.getQueryParserDefaultOperator(req.getSchema(),defaultParams.get(QueryParsing.OP));
  if (defaultOp == QueryParser.Operator.AND) {
    parser.setDefaultOperator(BooleanClause.Occur.MUST);
  }
  return new QParser(qstr,localParams,params,req){
    public Query parse() throws SyntaxError {
      return parser.parse(qstr);
    }
  }
;
}
