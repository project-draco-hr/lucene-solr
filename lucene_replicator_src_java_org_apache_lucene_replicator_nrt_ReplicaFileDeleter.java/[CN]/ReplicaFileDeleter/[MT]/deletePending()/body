{
  if (Node.VERBOSE_FILES) {
    node.message("now deletePending: " + pending.size() + " files to try: "+ pending);
  }
  List<String> toDelete=new ArrayList<>(pending);
  for (  String fileName : toDelete) {
    Integer rc=refCounts.get(fileName);
    if (rc != null && rc > 0) {
      throw new IllegalStateException("file \"" + fileName + "\" is in pending delete set but has non-zero refCount="+ rc);
    }
 else     if (fileName.startsWith(IndexFileNames.SEGMENTS)) {
      if (delete(fileName) == false) {
        if (Node.VERBOSE_FILES) {
          node.message("failed to remove commit point \"" + fileName + "\"; skipping deletion of all other pending files");
        }
        return;
      }
    }
  }
  for (  String fileName : toDelete) {
    if (fileName.startsWith(IndexFileNames.SEGMENTS) == false) {
      delete(fileName);
    }
  }
  Set<String> copy=new HashSet<String>(pending);
  pending.clear();
  for (  String fileName : copy) {
    delete(fileName);
  }
}
