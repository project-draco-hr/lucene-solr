{
  List<SpellCheckCorrection> priorPassCompatibles=null;
{
    List<SpellCheckCorrection> firstPassCompatibles=new ArrayList<>(all.size());
    SpellCheckCorrection sacred=all.get(pos);
    firstPassCompatibles.add(sacred);
    int index=pos;
    boolean gotOne=false;
    for (int i=0; i < all.size() - 1; i++) {
      index++;
      if (index == all.size()) {
        index=0;
      }
      SpellCheckCorrection disposable=all.get(index);
      if (!conflicts(sacred,disposable)) {
        firstPassCompatibles.add(disposable);
        gotOne=true;
      }
    }
    if (!gotOne) {
      return firstPassCompatibles;
    }
    priorPassCompatibles=firstPassCompatibles;
  }
{
    pos=1;
    while (true) {
      if (pos == priorPassCompatibles.size() - 1) {
        return priorPassCompatibles;
      }
      List<SpellCheckCorrection> subsequentPassCompatibles=new ArrayList<>(priorPassCompatibles.size());
      SpellCheckCorrection sacred=null;
      for (int i=0; i <= pos; i++) {
        sacred=priorPassCompatibles.get(i);
        subsequentPassCompatibles.add(sacred);
      }
      int index=pos;
      boolean gotOne=false;
      for (int i=0; i < priorPassCompatibles.size() - 1; i++) {
        index++;
        if (index == priorPassCompatibles.size()) {
          break;
        }
        SpellCheckCorrection disposable=priorPassCompatibles.get(index);
        if (!conflicts(sacred,disposable)) {
          subsequentPassCompatibles.add(disposable);
          gotOne=true;
        }
      }
      if (!gotOne || pos == priorPassCompatibles.size() - 1) {
        return subsequentPassCompatibles;
      }
      priorPassCompatibles=subsequentPassCompatibles;
      pos++;
    }
  }
}
