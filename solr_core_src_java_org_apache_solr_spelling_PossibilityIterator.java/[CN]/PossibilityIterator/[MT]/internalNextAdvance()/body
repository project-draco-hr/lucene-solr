{
  List<SpellCheckCorrection> possibleCorrection=null;
  if (nextOnes != null && nextOnes.hasNext()) {
    possibleCorrection=nextOnes.next();
  }
 else {
    if (done) {
      throw new NoSuchElementException();
    }
    possibleCorrection=new ArrayList<>();
    List<List<SpellCheckCorrection>> possibleCorrections=null;
    int rank=0;
    while (!done && (possibleCorrections == null || possibleCorrections.size() == 0)) {
      rank=0;
      for (int i=0; i < correctionIndex.length; i++) {
        List<SpellCheckCorrection> singleWordPossibilities=possibilityList.get(i);
        SpellCheckCorrection singleWordPossibility=singleWordPossibilities.get(correctionIndex[i]);
        rank+=correctionIndex[i];
        if (i == correctionIndex.length - 1) {
          correctionIndex[i]++;
          if (correctionIndex[i] == singleWordPossibilities.size()) {
            correctionIndex[i]=0;
            if (correctionIndex.length == 1) {
              done=true;
            }
            for (int ii=i - 1; ii >= 0; ii--) {
              correctionIndex[ii]++;
              if (correctionIndex[ii] >= possibilityList.get(ii).size() && ii > 0) {
                correctionIndex[ii]=0;
              }
 else {
                break;
              }
            }
          }
        }
        possibleCorrection.add(singleWordPossibility);
      }
      if (correctionIndex[0] == possibilityList.get(0).size()) {
        done=true;
      }
      if (suggestionsMayOverlap) {
        possibleCorrections=separateOverlappingTokens(possibleCorrection);
      }
 else {
        possibleCorrections=new ArrayList<>(1);
        possibleCorrections.add(possibleCorrection);
      }
    }
    nextOnes=possibleCorrections.iterator();
    nextOnesRank=rank;
    nextOnesIndex=0;
  }
}
