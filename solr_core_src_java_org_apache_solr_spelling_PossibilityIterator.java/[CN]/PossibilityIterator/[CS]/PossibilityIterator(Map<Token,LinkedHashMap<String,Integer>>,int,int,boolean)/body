{
  this.suggestionsMayOverlap=overlap;
  for (  Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions.entrySet()) {
    Token token=entry.getKey();
    if (entry.getValue().size() == 0) {
      continue;
    }
    List<SpellCheckCorrection> possibleCorrections=new ArrayList<>();
    for (    Map.Entry<String,Integer> entry1 : entry.getValue().entrySet()) {
      SpellCheckCorrection correction=new SpellCheckCorrection();
      correction.setOriginal(token);
      correction.setCorrection(entry1.getKey());
      correction.setNumberOfOccurences(entry1.getValue());
      possibleCorrections.add(correction);
    }
    possibilityList.add(possibleCorrections);
  }
  int wrapSize=possibilityList.size();
  if (wrapSize == 0) {
    done=true;
  }
 else {
    correctionIndex=new int[wrapSize];
    for (int i=0; i < wrapSize; i++) {
      int suggestSize=possibilityList.get(i).size();
      if (suggestSize == 0) {
        done=true;
        break;
      }
      correctionIndex[i]=0;
    }
  }
  PriorityQueue<RankedSpellPossibility> rankedPossibilities=new PriorityQueue<>(11,new RankComparator());
  Set<RankedSpellPossibility> removeDuplicates=null;
  if (suggestionsMayOverlap) {
    removeDuplicates=new HashSet<>();
  }
  long numEvaluations=0;
  while (numEvaluations < maxEvaluations && internalHasNext()) {
    RankedSpellPossibility rsp=internalNext();
    numEvaluations++;
    if (rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.rank >= rankedPossibilities.peek().rank) {
      continue;
    }
    if (!isSuggestionForReal(rsp)) {
      continue;
    }
    if (removeDuplicates == null) {
      rankedPossibilities.offer(rsp);
    }
 else {
      Collections.sort(rsp.corrections,new StartOffsetComparator());
      if (removeDuplicates.add(rsp)) {
        rankedPossibilities.offer(rsp);
      }
    }
    if (rankedPossibilities.size() > maximumRequiredSuggestions) {
      RankedSpellPossibility removed=rankedPossibilities.poll();
      if (removeDuplicates != null) {
        removeDuplicates.remove(removed);
      }
    }
  }
  RankedSpellPossibility[] rpArr=new RankedSpellPossibility[rankedPossibilities.size()];
  for (int i=rankedPossibilities.size() - 1; i >= 0; i--) {
    rpArr[i]=rankedPossibilities.remove();
  }
  rankedPossibilityIterator=Arrays.asList(rpArr).iterator();
}
