{
  final NamedList<Object> res=new SimpleOrderedMap<>();
  final NamedList<Integer> counts=new NamedList<>();
  res.add("counts",counts);
  res.add("gap",rfr.getGapObj());
  DocSet docSet=computeDocSet(docsOrig,rfr.getExcludeTags());
  for (  RangeFacetRequest.FacetRange range : rfr.getFacetRanges()) {
    if (range.other != null) {
      res.add(range.other.toString(),rangeCount(docSet,rfr,range));
    }
 else {
      final int count=rangeCount(docSet,rfr,range);
      if (count >= rfr.getMinCount()) {
        counts.add(range.lower,count);
      }
    }
  }
  res.add("start",rfr.getStartObj());
  res.add("end",rfr.getEndObj());
  return res;
}
