{
  if (!rb.doFacets || pivots == null)   return null;
  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<List<NamedList<Object>>>();
  for (  String pivot : pivots) {
    try {
      this.parseParams(FacetParams.FACET_PIVOT,pivot);
    }
 catch (    ParseException e) {
      throw new SolrException(ErrorCode.BAD_REQUEST,e);
    }
    pivot=facetValue;
    String[] fields=pivot.split(",");
    if (fields.length < 2) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Pivot Facet needs at least two fields: " + pivot);
    }
    String field=fields[0];
    String subField=fields[1];
    Deque<String> fnames=new LinkedList<String>();
    for (int i=fields.length - 1; i > 1; i--) {
      fnames.push(fields[i]);
    }
    NamedList<Integer> superFacets=this.getTermCounts(field);
    pivotResponse.add(key,doPivots(superFacets,field,subField,fnames,docs));
  }
  return pivotResponse;
}
