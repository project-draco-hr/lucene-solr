{
  SolrIndexSearcher searcher=rb.req.getSearcher();
  SchemaField sfield=searcher.getSchema().getField(field);
  FieldType ftype=sfield.getType();
  String nextField=fnames.poll();
  List<NamedList<Object>> values=new ArrayList<NamedList<Object>>(superFacets.size());
  for (  Map.Entry<String,Integer> kv : superFacets) {
    if (kv.getValue() >= minMatch) {
      final String fieldValue=kv.getKey();
      BytesRef termval=null;
      SimpleOrderedMap<Object> pivot=new SimpleOrderedMap<Object>();
      pivot.add("field",field);
      if (null == fieldValue) {
        pivot.add("value",null);
      }
 else {
        termval=new BytesRef();
        ftype.readableToIndexed(fieldValue,termval);
        pivot.add("value",ftype.toObject(sfield,termval));
      }
      pivot.add("count",kv.getValue());
      if (subField == null) {
        values.add(pivot);
      }
 else {
        DocSet subset=null;
        if (null == termval) {
          DocSet hasVal=searcher.getDocSet(new TermRangeQuery(field,null,null,false,false));
          subset=docs.andNot(hasVal);
        }
 else {
          Query query=new TermQuery(new Term(field,termval));
          subset=searcher.getDocSet(query,docs);
        }
        super.docs=subset;
        NamedList<Integer> nl=this.getTermCounts(subField);
        if (nl.size() >= minMatch) {
          pivot.add("pivot",doPivots(nl,subField,nextField,fnames,subset));
          values.add(pivot);
        }
      }
    }
  }
  fnames.push(nextField);
  return values;
}
