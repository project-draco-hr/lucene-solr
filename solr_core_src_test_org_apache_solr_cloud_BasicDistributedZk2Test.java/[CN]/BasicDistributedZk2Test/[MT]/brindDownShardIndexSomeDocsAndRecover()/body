{
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  commit();
  long deadShardCount=shardToJetty.get(SHARD2).get(0).client.solrClient.query(query).getResults().getNumFound();
  query("q","*:*","sort","n_tl1 desc");
  int oldLiveNodes=cloudClient.getZkStateReader().getZkClient().getChildren(ZkStateReader.LIVE_NODES_ZKNODE,null,true).size();
  assertEquals(5,oldLiveNodes);
  CloudJettyRunner deadShard=chaosMonkey.stopShard(SHARD2,0);
  Set<CloudJettyRunner> jetties=new HashSet<CloudJettyRunner>();
  jetties.addAll(shardToJetty.get(SHARD2));
  jetties.remove(deadShard);
  try {
    index_specific(deadShard.client.solrClient,id,999,i1,107,t1,"specific doc!");
    fail("This server should be down and this update should have failed");
  }
 catch (  SolrServerException e) {
  }
  commit();
  printLayout();
  query("q","*:*","sort","n_tl1 desc");
  long numFound1=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  index_specific(shardToJetty.get(SHARD2).get(1).client.solrClient,id,1000,i1,108,t1,"specific doc!");
  commit();
  checkShardConsistency(true,false);
  query("q","*:*","sort","n_tl1 desc");
  cloudClient.setDefaultCollection(DEFAULT_COLLECTION);
  long numFound2=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  assertEquals(numFound1 + 1,numFound2);
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField("id",1001);
  controlClient.add(doc);
  UpdateRequest ureq=new UpdateRequest();
  ureq.add(doc);
  try {
    ureq.process(cloudClient);
  }
 catch (  SolrServerException e) {
    Thread.sleep(500);
    ureq.process(cloudClient);
  }
  commit();
  query("q","*:*","sort","n_tl1 desc");
  long numFound3=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  assertEquals(numFound2 + 1,numFound3);
  testDebugQueries();
  if (VERBOSE) {
    System.err.println(controlClient.query(new SolrQuery("*:*")).getResults().getNumFound());
    for (    SolrServer client : clients) {
      try {
        SolrQuery q=new SolrQuery("*:*");
        q.set("distrib",false);
        System.err.println(client.query(q).getResults().getNumFound());
      }
 catch (      Exception e) {
      }
    }
  }
  ChaosMonkey.start(deadShard.jetty);
  Thread.sleep(1500);
  waitForRecoveriesToFinish(false);
  deadShardCount=shardToJetty.get(SHARD2).get(0).client.solrClient.query(query).getResults().getNumFound();
  checkShardConsistency(true,false);
  chaosMonkey.stopJetty(deadShard);
  for (int i=0; i < 226; i++) {
    doc=new SolrInputDocument();
    doc.addField("id",2000 + i);
    controlClient.add(doc);
    ureq=new UpdateRequest();
    ureq.add(doc);
    ureq.process(cloudClient);
  }
  commit();
  Thread.sleep(1500);
  ChaosMonkey.start(deadShard.jetty);
  Thread.sleep(1500);
  waitForThingsToLevelOut(15);
  Thread.sleep(500);
  waitForRecoveriesToFinish(false);
  checkShardConsistency(true,false);
  final HttpSolrServer client=(HttpSolrServer)shardToJetty.get(SHARD2).get(0).client.solrClient;
  System.out.println("base url: " + client.getBaseURL());
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("qt","/replication");
  params.set("command","backup");
  QueryRequest request=new QueryRequest(params);
  NamedList<Object> results=client.request(request);
  System.out.println("results:" + results);
  checkForBackupSuccess(client);
}
