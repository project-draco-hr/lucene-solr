{
  sortInfo=new SortInfo();
  sortInfo.totalTime=System.currentTimeMillis();
  Files.deleteIfExists(output.toPath());
  ArrayList<File> merges=new ArrayList<>();
  boolean success3=false;
  try {
    ByteSequencesReader is=new ByteSequencesReader(input);
    boolean success=false;
    try {
      int lines=0;
      while ((lines=readPartition(is)) > 0) {
        merges.add(sortPartition(lines));
        sortInfo.tempMergeFiles++;
        sortInfo.lines+=lines;
        if (merges.size() == maxTempFiles) {
          File intermediate=File.createTempFile("sort","intermediate",tempDirectory);
          boolean success2=false;
          try {
            mergePartitions(merges,intermediate);
            success2=true;
          }
  finally {
            if (success2) {
              IOUtils.deleteFilesIfExist(merges);
            }
 else {
              IOUtils.deleteFilesIgnoringExceptions(merges);
            }
            merges.clear();
            merges.add(intermediate);
          }
          sortInfo.tempMergeFiles++;
        }
      }
      success=true;
    }
  finally {
      if (success)       IOUtils.close(is);
 else       IOUtils.closeWhileHandlingException(is);
    }
    if (merges.size() == 1) {
      File single=merges.get(0);
      if (!single.renameTo(output)) {
        copy(single,output);
      }
    }
 else {
      mergePartitions(merges,output);
    }
    success3=true;
  }
  finally {
    if (success3) {
      IOUtils.deleteFilesIfExist(merges);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(merges);
      IOUtils.deleteFilesIgnoringExceptions(output);
    }
  }
  sortInfo.totalTime=(System.currentTimeMillis() - sortInfo.totalTime);
  return sortInfo;
}
