{
  int minDfFilterCache=params.getFieldInt(field,FacetParams.FACET_ENUM_CACHE_MINDF,0);
  DocSet fastForRandomSet=docs;
  if (minDfFilterCache > 0 && docs instanceof SortedIntDocSet) {
    SortedIntDocSet sset=(SortedIntDocSet)docs;
    fastForRandomSet=new HashDocSet(sset.getDocs(),0,sset.size());
  }
  IndexSchema schema=searcher.getSchema();
  LeafReader r=searcher.getLeafReader();
  FieldType ft=schema.getFieldType(field);
  boolean sortByCount=sort.equals("count") || sort.equals("true");
  final int maxsize=limit >= 0 ? offset + limit : Integer.MAX_VALUE - 1;
  final BoundedTreeSet<CountPair<BytesRef,Integer>> queue=sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;
  final NamedList<Integer> res=new NamedList<>();
  int min=mincount - 1;
  int off=offset;
  int lim=limit >= 0 ? limit : Integer.MAX_VALUE;
  BytesRef prefixTermBytes=null;
  if (prefix != null) {
    String indexedPrefix=ft.toInternal(prefix);
    prefixTermBytes=new BytesRef(indexedPrefix);
  }
  BytesRef containsTermBytes=null;
  if (contains != null) {
    String indexedContains=ft.toInternal(contains);
    containsTermBytes=new BytesRef(indexedContains);
  }
  Fields fields=r.fields();
  Terms terms=fields == null ? null : fields.terms(field);
  TermsEnum termsEnum=null;
  SolrIndexSearcher.DocsEnumState deState=null;
  BytesRef term=null;
  if (terms != null) {
    termsEnum=terms.iterator(null);
    if (prefixTermBytes != null) {
      if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {
        termsEnum=null;
      }
 else {
        term=termsEnum.term();
      }
    }
 else {
      term=termsEnum.next();
    }
  }
  PostingsEnum postingsEnum=null;
  CharsRefBuilder charsRef=new CharsRefBuilder();
  if (docs.size() >= mincount) {
    while (term != null) {
      if (prefixTermBytes != null && !StringHelper.startsWith(term,prefixTermBytes))       break;
      if (containsTermBytes == null || StringHelper.contains(term,containsTermBytes,ignoreCase)) {
        int df=termsEnum.docFreq();
        if (df > 0 && df > min) {
          int c;
          if (df >= minDfFilterCache) {
            if (deState == null) {
              deState=new SolrIndexSearcher.DocsEnumState();
              deState.fieldName=field;
              deState.liveDocs=r.getLiveDocs();
              deState.termsEnum=termsEnum;
              deState.postingsEnum=postingsEnum;
            }
            c=searcher.numDocs(docs,deState);
            postingsEnum=deState.postingsEnum;
          }
 else {
            postingsEnum=termsEnum.postings(null,postingsEnum,PostingsEnum.NONE);
            c=0;
            if (postingsEnum instanceof MultiPostingsEnum) {
              MultiPostingsEnum.EnumWithSlice[] subs=((MultiPostingsEnum)postingsEnum).getSubs();
              int numSubs=((MultiPostingsEnum)postingsEnum).getNumSubs();
              for (int subindex=0; subindex < numSubs; subindex++) {
                MultiPostingsEnum.EnumWithSlice sub=subs[subindex];
                if (sub.postingsEnum == null)                 continue;
                int base=sub.slice.start;
                int docid;
                while ((docid=sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
                  if (fastForRandomSet.exists(docid + base))                   c++;
                }
              }
            }
 else {
              int docid;
              while ((docid=postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
                if (fastForRandomSet.exists(docid))                 c++;
              }
            }
          }
          if (sortByCount) {
            if (c > min) {
              BytesRef termCopy=BytesRef.deepCopyOf(term);
              queue.add(new CountPair<>(termCopy,c));
              if (queue.size() >= maxsize)               min=queue.last().val;
            }
          }
 else {
            if (c >= mincount && --off < 0) {
              if (--lim < 0)               break;
              ft.indexedToReadable(term,charsRef);
              res.add(charsRef.toString(),c);
            }
          }
        }
      }
      term=termsEnum.next();
    }
  }
  if (sortByCount) {
    for (    CountPair<BytesRef,Integer> p : queue) {
      if (--off >= 0)       continue;
      if (--lim < 0)       break;
      ft.indexedToReadable(p.key,charsRef);
      res.add(charsRef.toString(),p.val);
    }
  }
  if (missing) {
    res.add(null,getFieldMissingCount(searcher,docs,field));
  }
  return res;
}
