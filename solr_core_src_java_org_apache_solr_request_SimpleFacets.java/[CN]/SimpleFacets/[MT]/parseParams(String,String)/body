{
  localParams=QueryParsing.getLocalParams(param,req.getParams());
  docs=docsOrig;
  facetValue=param;
  key=param;
  threads=-1;
  if (localParams == null) {
    return;
  }
  params=SolrParams.wrapDefaults(localParams,orig);
  if (type != FacetParams.FACET_QUERY) {
    facetValue=localParams.get(CommonParams.VALUE);
  }
  key=facetValue;
  key=localParams.get(CommonParams.OUTPUT_KEY,key);
  String threadStr=localParams.get(CommonParams.THREADS);
  if (threadStr != null) {
    threads=Integer.parseInt(threadStr);
  }
  String excludeStr=localParams.get(CommonParams.EXCLUDE);
  if (excludeStr == null)   return;
  Map<?,?> tagMap=(Map<?,?>)req.getContext().get("tags");
  if (tagMap != null && rb != null) {
    List<String> excludeTagList=StrUtils.splitSmart(excludeStr,',');
    IdentityHashMap<Query,Boolean> excludeSet=new IdentityHashMap<Query,Boolean>();
    for (    String excludeTag : excludeTagList) {
      Object olst=tagMap.get(excludeTag);
      if (!(olst instanceof Collection))       continue;
      for (      Object o : (Collection<?>)olst) {
        if (!(o instanceof QParser))         continue;
        QParser qp=(QParser)o;
        excludeSet.put(qp.getQuery(),Boolean.TRUE);
      }
    }
    if (excludeSet.size() == 0)     return;
    List<Query> qlist=new ArrayList<Query>();
    if (!excludeSet.containsKey(rb.getQuery())) {
      qlist.add(rb.getQuery());
    }
    if (rb.getFilters() != null) {
      for (      Query q : rb.getFilters()) {
        if (!excludeSet.containsKey(q)) {
          qlist.add(q);
        }
      }
    }
    DocSet base=searcher.getDocSet(qlist);
    if (rb.grouping() && rb.getGroupingSpec().isTruncateGroups()) {
      Grouping grouping=new Grouping(searcher,null,rb.getQueryCommand(),false,0,false);
      grouping.setGroupSort(rb.getGroupingSpec().getSortWithinGroup());
      if (rb.getGroupingSpec().getFields().length > 0) {
        grouping.addFieldCommand(rb.getGroupingSpec().getFields()[0],req);
      }
 else       if (rb.getGroupingSpec().getFunctions().length > 0) {
        grouping.addFunctionCommand(rb.getGroupingSpec().getFunctions()[0],req);
      }
 else {
        this.docs=base;
        return;
      }
      AbstractAllGroupHeadsCollector allGroupHeadsCollector=grouping.getCommands().get(0).createAllGroupCollector();
      searcher.search(new MatchAllDocsQuery(),base.getTopFilter(),allGroupHeadsCollector);
      int maxDoc=searcher.maxDoc();
      FixedBitSet fixedBitSet=allGroupHeadsCollector.retrieveGroupHeads(maxDoc);
      long[] bits=fixedBitSet.getBits();
      this.docs=new BitDocSet(new OpenBitSet(bits,bits.length));
    }
 else {
      this.docs=base;
    }
  }
}
