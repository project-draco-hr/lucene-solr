{
  Random random=random();
  DocValues.Type[] dvTypes=new DocValues.Type[]{DocValues.Type.VAR_INTS,DocValues.Type.FLOAT_64,DocValues.Type.BYTES_VAR_STRAIGHT,DocValues.Type.BYTES_VAR_SORTED};
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
  boolean canUseDV=true;
  DocValues.Type dvType=canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;
  Document doc=new Document();
  addField(doc,groupField,"1",dvType);
  addField(doc,countField,"1",dvType);
  doc.add(new Field("content","random text",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","1",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"1",dvType);
  addField(doc,countField,"1",dvType);
  doc.add(new Field("content","some more random text blob",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","2",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"1",dvType);
  addField(doc,countField,"2",dvType);
  doc.add(new Field("content","some more random textual data",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","3",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  w.commit();
  doc=new Document();
  addField(doc,groupField,"2",dvType);
  doc.add(new Field("content","some random text",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","4",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"3",dvType);
  addField(doc,countField,"1",dvType);
  doc.add(new Field("content","some more random text",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","5",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  doc=new Document();
  addField(doc,groupField,"3",dvType);
  addField(doc,countField,"1",dvType);
  doc.add(new Field("content","random blob",TextField.TYPE_UNSTORED));
  doc.add(new Field("id","6",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new Field("content","random word stuck in alot of other text",TextField.TYPE_STORED));
  addField(doc,countField,"1",dvType);
  doc.add(new Field("id","6",StringField.TYPE_UNSTORED));
  w.addDocument(doc);
  IndexSearcher indexSearcher=newSearcher(w.getReader());
  w.close();
  Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp=new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>(){
    public int compare(    AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1,    AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2){
      if (groupCount1.groupValue == null) {
        if (groupCount2.groupValue == null) {
          return 0;
        }
        return -1;
      }
 else       if (groupCount2.groupValue == null) {
        return 1;
      }
 else {
        return groupCount1.groupValue.compareTo(groupCount2.groupValue);
      }
    }
  }
;
  AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector=createRandomFirstPassCollector(dvType,new Sort(),groupField,10);
  indexSearcher.search(new TermQuery(new Term("content","random")),firstCollector);
  AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector=createDistinctCountCollector(firstCollector,groupField,countField,dvType);
  indexSearcher.search(new TermQuery(new Term("content","random")),distinctValuesCollector);
  List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs=distinctValuesCollector.getGroups();
  Collections.sort(gcs,cmp);
  assertEquals(4,gcs.size());
  compareNull(gcs.get(0).groupValue);
  List<Comparable<?>> countValues=new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);
  assertEquals(1,countValues.size());
  compare("1",countValues.get(0));
  compare("1",gcs.get(1).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);
  Collections.sort(countValues,nullComparator);
  assertEquals(2,countValues.size());
  compare("1",countValues.get(0));
  compare("2",countValues.get(1));
  compare("2",gcs.get(2).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);
  assertEquals(1,countValues.size());
  compareNull(countValues.get(0));
  compare("3",gcs.get(3).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);
  assertEquals(1,countValues.size());
  compare("1",countValues.get(0));
  firstCollector=createRandomFirstPassCollector(dvType,new Sort(),groupField,10);
  indexSearcher.search(new TermQuery(new Term("content","some")),firstCollector);
  distinctValuesCollector=createDistinctCountCollector(firstCollector,groupField,countField,dvType);
  indexSearcher.search(new TermQuery(new Term("content","some")),distinctValuesCollector);
  gcs=distinctValuesCollector.getGroups();
  Collections.sort(gcs,cmp);
  assertEquals(3,gcs.size());
  compare("1",gcs.get(0).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);
  assertEquals(2,countValues.size());
  Collections.sort(countValues,nullComparator);
  compare("1",countValues.get(0));
  compare("2",countValues.get(1));
  compare("2",gcs.get(1).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);
  assertEquals(1,countValues.size());
  compareNull(countValues.get(0));
  compare("3",gcs.get(2).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);
  assertEquals(1,countValues.size());
  compare("1",countValues.get(0));
  firstCollector=createRandomFirstPassCollector(dvType,new Sort(),groupField,10);
  indexSearcher.search(new TermQuery(new Term("content","blob")),firstCollector);
  distinctValuesCollector=createDistinctCountCollector(firstCollector,groupField,countField,dvType);
  indexSearcher.search(new TermQuery(new Term("content","blob")),distinctValuesCollector);
  gcs=distinctValuesCollector.getGroups();
  Collections.sort(gcs,cmp);
  assertEquals(2,gcs.size());
  compare("1",gcs.get(0).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);
  assertEquals(1,countValues.size());
  compare("1",countValues.get(0));
  compare("3",gcs.get(1).groupValue);
  countValues=new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);
  assertEquals(1,countValues.size());
  compare("1",countValues.get(0));
  indexSearcher.getIndexReader().close();
  dir.close();
}
