{
  Random random=random();
  int numberOfRuns=TestUtil.nextInt(random,3,6);
  for (int indexIter=0; indexIter < numberOfRuns; indexIter++) {
    IndexContext context=createIndexContext();
    for (int searchIter=0; searchIter < 100; searchIter++) {
      final IndexSearcher searcher=newSearcher(context.indexReader);
      String term=context.contentStrings[random.nextInt(context.contentStrings.length)];
      Sort groupSort=new Sort(new SortField("id",SortField.Type.STRING));
      int topN=1 + random.nextInt(10);
      List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult=createExpectedResult(context,term,groupSort,topN);
      AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector=createRandomFirstPassCollector(groupSort,groupField,topN);
      searcher.search(new TermQuery(new Term("content",term)),firstCollector);
      AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector=createDistinctCountCollector(firstCollector,groupField,countField);
      searcher.search(new TermQuery(new Term("content",term)),distinctValuesCollector);
      @SuppressWarnings("unchecked") List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult=(List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>)distinctValuesCollector.getGroups();
      if (VERBOSE) {
        System.out.println("Index iter=" + indexIter);
        System.out.println("Search iter=" + searchIter);
        System.out.println("1st pass collector class name=" + firstCollector.getClass().getName());
        System.out.println("2nd pass collector class name=" + distinctValuesCollector.getClass().getName());
        System.out.println("Search term=" + term);
        System.out.println("1st pass groups=" + firstCollector.getTopGroups(0,false));
        System.out.println("Expected:");
        printGroups(expectedResult);
        System.out.println("Actual:");
        printGroups(actualResult);
      }
      assertEquals(expectedResult.size(),actualResult.size());
      for (int i=0; i < expectedResult.size(); i++) {
        AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected=expectedResult.get(i);
        AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual=actualResult.get(i);
        assertValues(expected.groupValue,actual.groupValue);
        assertEquals(expected.uniqueValues.size(),actual.uniqueValues.size());
        List<Comparable<?>> expectedUniqueValues=new ArrayList<>(expected.uniqueValues);
        Collections.sort(expectedUniqueValues,nullComparator);
        List<Comparable<?>> actualUniqueValues=new ArrayList<>(actual.uniqueValues);
        Collections.sort(actualUniqueValues,nullComparator);
        for (int j=0; j < expectedUniqueValues.size(); j++) {
          assertValues(expectedUniqueValues.get(j),actualUniqueValues.get(j));
        }
      }
    }
    context.indexReader.close();
    context.directory.close();
  }
}
