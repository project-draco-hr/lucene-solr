{
  final long stopTime=System.currentTimeMillis() + 1000;
  SnapshotDeletionPolicy dp=getDeletionPolicy();
  final IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random)).setIndexDeletionPolicy(dp).setMaxBufferedDocs(2));
  try {
    dp.snapshot();
    fail("did not hit exception");
  }
 catch (  IllegalStateException ise) {
  }
  dp=(SnapshotDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
  writer.commit();
  final Thread t=new Thread(){
    @Override public void run(){
      Document doc=new Document();
      FieldType customType=new FieldType(TextField.TYPE_STORED);
      customType.setStoreTermVectors(true);
      customType.setStoreTermVectorPositions(true);
      customType.setStoreTermVectorOffsets(true);
      doc.add(newField("content","aaa",customType));
      do {
        for (int i=0; i < 27; i++) {
          try {
            writer.addDocument(doc);
          }
 catch (          Throwable t) {
            t.printStackTrace(System.out);
            fail("addDocument failed");
          }
          if (i % 2 == 0) {
            try {
              writer.commit();
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
        }
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException ie) {
          throw new ThreadInterruptedException(ie);
        }
      }
 while (System.currentTimeMillis() < stopTime);
    }
  }
;
  t.start();
  do {
    backupIndex(dir,dp);
    Thread.sleep(20);
  }
 while (t.isAlive());
  t.join();
  Document doc=new Document();
  FieldType customType=new FieldType(TextField.TYPE_STORED);
  customType.setStoreTermVectors(true);
  customType.setStoreTermVectorPositions(true);
  customType.setStoreTermVectorOffsets(true);
  doc.add(newField("content","aaa",customType));
  writer.addDocument(doc);
  writer.shutdown();
  TestIndexWriter.assertNoUnreferencedFiles(dir,"some files were not deleted but should have been");
}
