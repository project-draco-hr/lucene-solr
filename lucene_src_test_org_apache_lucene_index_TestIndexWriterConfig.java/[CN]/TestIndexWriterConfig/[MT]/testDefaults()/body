{
  IndexWriterConfig conf=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random));
  assertEquals(MockAnalyzer.class,conf.getAnalyzer().getClass());
  assertNull(conf.getIndexCommit());
  assertEquals(KeepOnlyLastCommitDeletionPolicy.class,conf.getIndexDeletionPolicy().getClass());
  assertEquals(ConcurrentMergeScheduler.class,conf.getMergeScheduler().getClass());
  assertEquals(OpenMode.CREATE_OR_APPEND,conf.getOpenMode());
  assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());
  assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,conf.getTermIndexInterval());
  assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(),conf.getWriteLockTimeout());
  assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT,IndexWriterConfig.getDefaultWriteLockTimeout());
  assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS,conf.getMaxBufferedDeleteTerms());
  assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB,conf.getRAMBufferSizeMB(),0.0);
  assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS,conf.getMaxBufferedDocs());
  assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING,conf.getReaderPooling());
  assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());
  assertNull(conf.getMergedSegmentWarmer());
  assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR,conf.getReaderTermsIndexDivisor());
  assertEquals(TieredMergePolicy.class,conf.getMergePolicy().getClass());
  assertEquals(ThreadAffinityDocumentsWriterThreadPool.class,conf.getIndexerThreadPool().getClass());
  assertEquals(FlushByRamOrCountsPolicy.class,conf.getFlushPolicy().getClass());
  assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB,conf.getRAMPerThreadHardLimitMB());
  assertEquals(Codec.getDefault(),conf.getCodec());
  Set<String> getters=new HashSet<String>();
  getters.add("getAnalyzer");
  getters.add("getIndexCommit");
  getters.add("getIndexDeletionPolicy");
  getters.add("getMaxFieldLength");
  getters.add("getMergeScheduler");
  getters.add("getOpenMode");
  getters.add("getSimilarityProvider");
  getters.add("getTermIndexInterval");
  getters.add("getWriteLockTimeout");
  getters.add("getDefaultWriteLockTimeout");
  getters.add("getMaxBufferedDeleteTerms");
  getters.add("getRAMBufferSizeMB");
  getters.add("getMaxBufferedDocs");
  getters.add("getIndexingChain");
  getters.add("getMergedSegmentWarmer");
  getters.add("getMergePolicy");
  getters.add("getMaxThreadStates");
  getters.add("getReaderPooling");
  getters.add("getIndexerThreadPool");
  getters.add("getReaderTermsIndexDivisor");
  getters.add("getFlushPolicy");
  getters.add("getRAMPerThreadHardLimitMB");
  getters.add("getCodec");
  for (  Method m : IndexWriterConfig.class.getDeclaredMethods()) {
    if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith("get")) {
      assertTrue("method " + m.getName() + " is not tested for defaults",getters.contains(m.getName()));
    }
  }
}
