{
  IndexWriterConfig conf=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer());
  assertEquals(KeepOnlyLastCommitDeletionPolicy.class,conf.getIndexDeletionPolicy().getClass());
  conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));
  assertEquals(SnapshotDeletionPolicy.class,conf.getIndexDeletionPolicy().getClass());
  conf.setIndexDeletionPolicy(null);
  assertEquals(KeepOnlyLastCommitDeletionPolicy.class,conf.getIndexDeletionPolicy().getClass());
  assertEquals(ConcurrentMergeScheduler.class,conf.getMergeScheduler().getClass());
  conf.setMergeScheduler(new SerialMergeScheduler());
  assertEquals(SerialMergeScheduler.class,conf.getMergeScheduler().getClass());
  conf.setMergeScheduler(null);
  assertEquals(ConcurrentMergeScheduler.class,conf.getMergeScheduler().getClass());
  assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());
  conf.setSimilarityProvider(new MySimilarity());
  assertEquals(MySimilarity.class,conf.getSimilarityProvider().getClass());
  conf.setSimilarityProvider(null);
  assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());
  assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());
  conf.setIndexingChain(new MyIndexingChain());
  assertEquals(MyIndexingChain.class,conf.getIndexingChain().getClass());
  conf.setIndexingChain(null);
  assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());
  try {
    conf.setMaxBufferedDeleteTerms(0);
    fail("should not have succeeded to set maxBufferedDeleteTerms to 0");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    conf.setMaxBufferedDocs(1);
    fail("should not have succeeded to set maxBufferedDocs to 1");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    conf.setMaxBufferedDocs(4);
    conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);
    conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);
    fail("should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well");
  }
 catch (  IllegalArgumentException e) {
  }
  conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);
  conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);
  try {
    conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);
    fail("should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    conf.setReaderTermsIndexDivisor(0);
    fail("should not have succeeded to set termsIndexDivisor to 0");
  }
 catch (  IllegalArgumentException e) {
  }
  conf.setReaderTermsIndexDivisor(-1);
  try {
    conf.setReaderTermsIndexDivisor(-2);
    fail("should not have succeeded to set termsIndexDivisor to < -1");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES,conf.getMaxThreadStates());
  conf.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(5));
  assertEquals(5,conf.getMaxThreadStates());
  conf.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(0));
  assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES,conf.getMaxThreadStates());
  assertEquals(LogByteSizeMergePolicy.class,conf.getMergePolicy().getClass());
  conf.setMergePolicy(new LogDocMergePolicy());
  assertEquals(LogDocMergePolicy.class,conf.getMergePolicy().getClass());
  conf.setMergePolicy(null);
  assertEquals(LogByteSizeMergePolicy.class,conf.getMergePolicy().getClass());
}
