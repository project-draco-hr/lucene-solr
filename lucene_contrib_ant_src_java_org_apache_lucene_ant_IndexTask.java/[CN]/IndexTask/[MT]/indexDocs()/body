{
  Date start=new Date();
  boolean create=overwrite;
  if (indexDir.mkdirs() && !overwrite) {
    create=true;
  }
  FSDirectory dir=FSDirectory.open(indexDir);
  try {
    Searcher searcher=null;
    boolean checkLastModified=false;
    if (!create) {
      try {
        searcher=new IndexSearcher(dir,true);
        checkLastModified=true;
      }
 catch (      IOException ioe) {
        log("IOException: " + ioe.getMessage());
      }
    }
    log("checkLastModified = " + checkLastModified,Project.MSG_VERBOSE);
    IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_CURRENT,analyzer).setOpenMode(create ? OpenMode.CREATE : OpenMode.APPEND);
    LogMergePolicy lmp=(LogMergePolicy)conf.getMergePolicy();
    lmp.setUseCompoundFile(useCompoundIndex);
    lmp.setUseCompoundDocStore(useCompoundIndex);
    lmp.setMergeFactor(mergeFactor);
    IndexWriter writer=new IndexWriter(dir,conf);
    int totalFiles=0;
    int totalIndexed=0;
    int totalIgnored=0;
    try {
      for (int i=0; i < rcs.size(); i++) {
        ResourceCollection rc=rcs.elementAt(i);
        if (rc.isFilesystemOnly()) {
          Iterator resources=rc.iterator();
          while (resources.hasNext()) {
            Resource r=(Resource)resources.next();
            if (!r.isExists() || !(r instanceof FileResource)) {
              continue;
            }
            totalFiles++;
            File file=((FileResource)r).getFile();
            if (!file.exists() || !file.canRead()) {
              throw new BuildException("File \"" + file.getAbsolutePath() + "\" does not exist or is not readable.");
            }
            boolean indexIt=true;
            if (checkLastModified) {
              Term pathTerm=new Term("path",file.getPath());
              TermQuery query=new TermQuery(pathTerm);
              ScoreDoc[] hits=searcher.search(query,null,1).scoreDocs;
              if (hits.length > 0) {
                Document doc=searcher.doc(hits[0].doc);
                String indexModified=doc.get("modified").trim();
                if (indexModified != null) {
                  long lastModified=0;
                  try {
                    lastModified=DateTools.stringToTime(indexModified);
                  }
 catch (                  ParseException e) {
                  }
                  if (lastModified == file.lastModified()) {
                    indexIt=false;
                  }
                }
              }
            }
            if (indexIt) {
              try {
                log("Indexing " + file.getPath(),Project.MSG_VERBOSE);
                Document doc=handler.getDocument(file);
                if (doc == null) {
                  totalIgnored++;
                }
 else {
                  doc.add(new Field("path",file.getPath(),Field.Store.YES,Field.Index.NOT_ANALYZED));
                  doc.add(new Field("modified",DateTools.timeToString(file.lastModified(),DateTools.Resolution.MILLISECOND),Field.Store.YES,Field.Index.NOT_ANALYZED));
                  writer.addDocument(doc);
                  totalIndexed++;
                }
              }
 catch (              DocumentHandlerException e) {
                throw new BuildException(e);
              }
            }
          }
        }
      }
      writer.optimize();
    }
  finally {
      writer.close();
      if (searcher != null) {
        searcher.close();
      }
    }
    Date end=new Date();
    log(totalIndexed + " out of " + totalFiles+ " indexed ("+ totalIgnored+ " ignored) in "+ (end.getTime() - start.getTime())+ " milliseconds");
  }
  finally {
    dir.close();
  }
}
