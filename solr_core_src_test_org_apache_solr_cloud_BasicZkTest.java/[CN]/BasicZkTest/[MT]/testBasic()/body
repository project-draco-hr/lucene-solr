{
  assertTrue("Not using ZooKeeper",h.getCoreContainer().isZooKeeperAware());
  h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl("collection1","shard1",30000);
  ZkController zkController=h.getCoreContainer().getZkController();
  SolrCore core=h.getCore();
  assertNotNull(core.getRequestHandler("mock"));
  lrf.args.put(CommonParams.VERSION,"2.2");
  assertQ("test query on empty index",request("qlkciyopsbgzyvkylsjhchghjrdf"),"//result[@numFound='0']");
  assertU("deleting 42 for no reason at all",delI("42"));
  assertU("adding doc#42",adoc("id","42","val_s","aa;bb"));
  assertU("does commit work?",commit());
  assertQ("backslash escaping semicolon",request("id:42 AND val_s:aa\\;bb"),"//*[@numFound='1']","//int[@name='id'][.='42']");
  assertQ("quote escaping semicolon",request("id:42 AND val_s:\"aa;bb\""),"//*[@numFound='1']","//int[@name='id'][.='42']");
  assertQ("no escaping semicolon",request("id:42 AND val_s:aa"),"//*[@numFound='0']");
  assertU(delI("42"));
  assertU(commit());
  assertQ(request("id:42"),"//*[@numFound='0']");
  assertU(adoc("id","42","val_s","AAA"));
  assertU(adoc("id","42","val_s","BBB"));
  assertU(commit());
  assertQ(request("id:42"),"//*[@numFound='1']","//str[.='BBB']");
  assertU(adoc("id","42","val_s","CCC"));
  assertU(adoc("id","42","val_s","DDD"));
  assertU(commit());
  assertQ(request("id:42"),"//*[@numFound='1']","//str[.='DDD']");
  String[] adds=new String[]{add(doc("id","101"),"overwrite","true"),add(doc("id","101"),"overwrite","true"),add(doc("id","105"),"overwrite","false"),add(doc("id","102"),"overwrite","true"),add(doc("id","103"),"overwrite","false"),add(doc("id","101"),"overwrite","true")};
  for (  String a : adds) {
    assertU(a,a);
  }
  assertU(commit());
  int zkPort=zkServer.getPort();
  zkServer.shutdown();
  assertU(adoc("id","201"));
  Thread.sleep(300);
  zkServer=new ZkTestServer(zkDir,zkPort);
  zkServer.run();
  Thread.sleep(300);
  assertTrue(zkController.getClusterState().getLiveNodes().toString(),zkController.getClusterState().liveNodesContain(zkController.getNodeName()));
  assertQ(request("q","id:[100 TO 110]","rows","2147483647"),"//*[@numFound='4']");
  assertQ(request("q","id:[100 TO 111]","rows","1147483647"),"//*[@numFound='4']");
  assertQ(request("id:[100 TO 110]"),"//*[@numFound='4']");
  assertU(delI("102"));
  assertU(commit());
  assertQ(request("id:[100 TO 110]"),"//*[@numFound='3']");
  assertU(delI("105"));
  assertU(commit());
  assertQ(request("id:[100 TO 110]"),"//*[@numFound='2']");
  assertU(delQ("id:[100 TO 110]"));
  assertU(commit());
  assertQ(request("id:[100 TO 110]"),"//*[@numFound='0']");
  zkController.getZkClient().setData("/configs/conf1/solrconfig.xml",new byte[0],true);
  try {
    ignoreException("solrconfig.xml");
    h.getCoreContainer().reload(h.getCore().getName());
    fail("The reloaded SolrCore did not pick up configs from zookeeper");
  }
 catch (  SolrException e) {
    resetExceptionIgnores();
    assertTrue(e.getMessage().contains("Unable to reload core [collection1]"));
    assertTrue(e.getCause().getMessage().contains("Error loading solr config from solrconfig.xml"));
  }
  NamedList stats=core.getStatistics();
  assertEquals("collection1",stats.get("coreName"));
  assertEquals("collection1",stats.get("collection"));
  assertEquals("shard1",stats.get("shard"));
  assertTrue(stats.get("refCount") != null);
}
