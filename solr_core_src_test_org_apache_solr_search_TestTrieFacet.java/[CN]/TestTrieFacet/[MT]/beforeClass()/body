{
  initCore("solrconfig-tlog.xml","schema.xml");
  assertTrue("min value must be less then max value",MIN_VALUE < MAX_VALUE);
  assertTrue("min value must be greater then zero",0 < MIN_VALUE);
  for (  String f : M_VALUED) {
    SchemaField sf=h.getCore().getLatestSchema().getField(f);
    assertTrue("who changed the schema? test isn't valid: " + f,sf.multiValued());
  }
  for (  String f : S_VALUED) {
    SchemaField sf=h.getCore().getLatestSchema().getField(f);
    assertFalse("who changed the schema? test isn't valid: " + f,sf.multiValued());
  }
  for (  String f : P0) {
    SchemaField sf=h.getCore().getLatestSchema().getField(f);
    assertEquals("who changed the schema? test isn't valid: " + f,0,assertCastFieldType(sf).getPrecisionStep());
  }
  for (  String f : P8) {
    SchemaField sf=h.getCore().getLatestSchema().getField(f);
    assertEquals("who changed the schema? test isn't valid: " + f,8,assertCastFieldType(sf).getPrecisionStep());
  }
  NUM_DOCS=TestUtil.nextInt(random(),200,1500);
{
    SolrInputDocument doc=sdoc("id","0");
    for (int val=MIN_VALUE; val <= MAX_VALUE; val++) {
      for (      String f : M_VALUED) {
        doc.addField(f,val);
      }
    }
    assertU(adoc(doc));
  }
  for (int i=1; i < NUM_DOCS; i++) {
    SolrInputDocument doc=sdoc("id",i + "");
    if (useField()) {
      int val=TestUtil.nextInt(random(),MIN_VALUE,MAX_VALUE);
      for (      String f : S_VALUED) {
        doc.addField(f,val);
      }
    }
    if (useField()) {
      int numMulti=atLeast(1);
      while (0 < numMulti--) {
        int val=TestUtil.nextInt(random(),MIN_VALUE,MAX_VALUE);
        for (        String f : M_VALUED) {
          doc.addField(f,val);
        }
      }
    }
    assertU(adoc(doc));
  }
  assertU(commit());
}
