{
  int subCount=TestUtil.nextInt(random(),1,20);
  List<TestSubUnsorted> subs=new ArrayList<>();
  int valueStart=0;
  for (int i=0; i < subCount; i++) {
    int maxDoc=TestUtil.nextInt(random(),1,1000);
    final int docBase=valueStart;
    subs.add(new TestSubUnsorted(new MergeState.DocMap(){
      @Override public int get(      int docID){
        return docBase + docID;
      }
    }
,maxDoc,valueStart));
    valueStart+=maxDoc;
  }
  DocIDMerger<TestSubUnsorted> merger=new DocIDMerger<>(subs,false);
  int count=0;
  while (true) {
    TestSubUnsorted sub=merger.next();
    if (sub == null) {
      break;
    }
    assertEquals(count,sub.mappedDocID);
    assertEquals(count,sub.getValue());
    count++;
  }
  assertEquals(valueStart,count);
}
