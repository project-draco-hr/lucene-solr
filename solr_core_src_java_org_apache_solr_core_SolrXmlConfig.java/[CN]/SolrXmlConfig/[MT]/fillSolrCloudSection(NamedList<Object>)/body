{
  String hostName=required("solrcloud","host",removeValue(nl,"host"));
  int hostPort=parseInt("hostPort",required("solrcloud","hostPort",removeValue(nl,"hostPort")));
  String hostContext=required("solrcloud","hostContext",removeValue(nl,"hostContext"));
  CloudConfig.CloudConfigBuilder builder=new CloudConfig.CloudConfigBuilder(hostName,hostPort,hostContext);
  for (  Map.Entry<String,Object> entry : nl) {
    String name=entry.getKey();
    if (entry.getValue() == null)     continue;
    String value=entry.getValue().toString();
switch (name) {
case "leaderVoteWait":
      builder.setLeaderVoteWait(parseInt(name,value));
    break;
case "leaderConflictResolveWait":
  builder.setLeaderConflictResolveWait(parseInt(name,value));
break;
case "zkClientTimeout":
builder.setZkClientTimeout(parseInt(name,value));
break;
case "autoReplicaFailoverBadNodeExpiration":
builder.setAutoReplicaFailoverBadNodeExpiration(parseInt(name,value));
break;
case "autoReplicaFailoverWaitAfterExpiration":
builder.setAutoReplicaFailoverWaitAfterExpiration(parseInt(name,value));
break;
case "autoReplicaFailoverWorkLoopDelay":
builder.setAutoReplicaFailoverWorkLoopDelay(parseInt(name,value));
break;
case "zkHost":
builder.setZkHost(value);
break;
case "genericCoreNodeNames":
builder.setUseGenericCoreNames(Boolean.parseBoolean(value));
break;
case "zkACLProvider":
builder.setZkACLProviderClass(value);
break;
case "zkCredientialsProvider":
case "zkCredentialsProvider":
builder.setZkCredentialsProviderClass(value);
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown configuration parameter in <solrcloud> section of solr.xml: " + name);
}
}
return builder.build();
}
