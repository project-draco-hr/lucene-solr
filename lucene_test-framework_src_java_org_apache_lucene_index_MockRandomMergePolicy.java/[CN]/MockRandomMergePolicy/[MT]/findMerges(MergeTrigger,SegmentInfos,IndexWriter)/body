{
  MergeSpecification mergeSpec=null;
  int numSegments=segmentInfos.size();
  List<SegmentCommitInfo> segments=new ArrayList<>();
  final Collection<SegmentCommitInfo> merging=writer.getMergingSegments();
  for (  SegmentCommitInfo sipc : segmentInfos) {
    if (!merging.contains(sipc)) {
      segments.add(sipc);
    }
  }
  numSegments=segments.size();
  if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {
    Collections.shuffle(segments,random);
    mergeSpec=new MergeSpecification();
    final int segsToMerge=TestUtil.nextInt(random,1,numSegments);
    if (doNonBulkMerges && random.nextBoolean()) {
      mergeSpec.add(new MockRandomOneMerge(segments.subList(0,segsToMerge),random.nextLong()));
    }
 else {
      mergeSpec.add(new OneMerge(segments.subList(0,segsToMerge)));
    }
  }
  return mergeSpec;
}
