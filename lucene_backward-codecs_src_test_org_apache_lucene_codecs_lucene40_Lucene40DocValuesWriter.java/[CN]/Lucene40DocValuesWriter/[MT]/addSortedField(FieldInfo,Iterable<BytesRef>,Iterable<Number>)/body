{
  int minLength=Integer.MAX_VALUE;
  int maxLength=Integer.MIN_VALUE;
  for (  BytesRef b : values) {
    minLength=Math.min(minLength,b.length);
    maxLength=Math.max(maxLength,b.length);
  }
  boolean anyMissing=false;
  for (  Number n : docToOrd) {
    if (n.longValue() == -1) {
      anyMissing=true;
      break;
    }
  }
  boolean success=false;
  IndexOutput data=null;
  IndexOutput index=null;
  String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
  String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"idx");
  try {
    data=dir.createOutput(dataName,state.context);
    index=dir.createOutput(indexName,state.context);
    if (minLength == maxLength && !anyMissing) {
      addFixedSortedBytesField(field,data,index,values,docToOrd,minLength);
    }
 else {
      if (!anyMissing) {
        addVarSortedBytesField(field,data,index,values,docToOrd);
      }
 else       if (minLength == 0) {
        addVarSortedBytesField(field,data,index,values,MissingOrdRemapper.mapMissingToOrd0(docToOrd));
      }
 else {
        addVarSortedBytesField(field,data,index,MissingOrdRemapper.insertEmptyValue(values),MissingOrdRemapper.mapAllOrds(docToOrd));
      }
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(data,index);
    }
 else {
      IOUtils.closeWhileHandlingException(data,index);
    }
  }
}
