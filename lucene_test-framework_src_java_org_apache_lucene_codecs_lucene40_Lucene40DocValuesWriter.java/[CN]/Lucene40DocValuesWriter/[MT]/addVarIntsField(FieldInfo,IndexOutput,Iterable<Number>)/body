{
  field.putAttribute(legacyKey,LegacyDocValuesType.VAR_INTS.name());
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  for (  Number n : values) {
    long v=n.longValue();
    minValue=Math.min(minValue,v);
    maxValue=Math.max(maxValue,v);
  }
  CodecUtil.writeHeader(output,Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME,Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);
  final long delta=maxValue - minValue;
  if (delta < 0) {
    output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);
    for (    Number n : values) {
      output.writeLong(n.longValue());
    }
  }
 else {
    output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);
    output.writeLong(minValue);
    output.writeLong(0 - minValue);
    PackedInts.Writer writer=PackedInts.getWriter(output,state.segmentInfo.getDocCount(),PackedInts.bitsRequired(delta),PackedInts.DEFAULT);
    for (    Number n : values) {
      writer.add(n.longValue() - minValue);
    }
    writer.finish();
  }
}
