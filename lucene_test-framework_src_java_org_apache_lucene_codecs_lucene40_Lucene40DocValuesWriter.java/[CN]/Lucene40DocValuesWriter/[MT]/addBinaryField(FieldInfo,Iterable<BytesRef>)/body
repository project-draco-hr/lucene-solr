{
  HashSet<BytesRef> uniqueValues=new HashSet<BytesRef>();
  int minLength=Integer.MAX_VALUE;
  int maxLength=Integer.MIN_VALUE;
  for (  BytesRef b : values) {
    if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {
      throw new IllegalArgumentException("DocValuesField \"" + field.name + "\" is too large, must be <= "+ Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);
    }
    minLength=Math.min(minLength,b.length);
    maxLength=Math.max(maxLength,b.length);
    if (uniqueValues != null) {
      if (uniqueValues.add(BytesRef.deepCopyOf(b))) {
        if (uniqueValues.size() > 256) {
          uniqueValues=null;
        }
      }
    }
  }
  int maxDoc=state.segmentInfo.getDocCount();
  final boolean fixed=minLength == maxLength;
  final boolean dedup=uniqueValues != null && uniqueValues.size() * 2 < maxDoc;
  if (dedup) {
    boolean success=false;
    IndexOutput data=null;
    IndexOutput index=null;
    String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
    String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"idx");
    try {
      data=dir.createOutput(dataName,state.context);
      index=dir.createOutput(indexName,state.context);
      if (fixed) {
        addFixedDerefBytesField(field,data,index,values,minLength);
      }
 else {
        addVarDerefBytesField(field,data,index,values);
      }
      success=true;
    }
  finally {
      if (success) {
        IOUtils.close(data,index);
      }
 else {
        IOUtils.closeWhileHandlingException(data,index);
      }
    }
  }
 else {
    if (fixed) {
      String fileName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
      IndexOutput data=dir.createOutput(fileName,state.context);
      boolean success=false;
      try {
        addFixedStraightBytesField(field,data,values,minLength);
        success=true;
      }
  finally {
        if (success) {
          IOUtils.close(data);
        }
 else {
          IOUtils.closeWhileHandlingException(data);
        }
      }
    }
 else {
      boolean success=false;
      IndexOutput data=null;
      IndexOutput index=null;
      String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
      String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"idx");
      try {
        data=dir.createOutput(dataName,state.context);
        index=dir.createOutput(indexName,state.context);
        addVarStraightBytesField(field,data,index,values);
        success=true;
      }
  finally {
        if (success) {
          IOUtils.close(data,index);
        }
 else {
          IOUtils.closeWhileHandlingException(data,index);
        }
      }
    }
  }
}
