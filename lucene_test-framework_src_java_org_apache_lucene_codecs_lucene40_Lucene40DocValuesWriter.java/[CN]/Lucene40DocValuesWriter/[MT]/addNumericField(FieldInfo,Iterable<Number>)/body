{
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  for (  Number n : values) {
    long v=n == null ? 0 : n.longValue();
    minValue=Math.min(minValue,v);
    maxValue=Math.max(maxValue,v);
  }
  String fileName=IndexFileNames.segmentFileName(state.segmentInfo.name + "_" + Integer.toString(field.number),segmentSuffix,"dat");
  IndexOutput data=dir.createOutput(fileName,state.context);
  boolean success=false;
  try {
    if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue - minValue) > 4) {
      addBytesField(field,data,values);
    }
 else     if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue - minValue) > 8) {
      addShortsField(field,data,values);
    }
 else     if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue - minValue) > 16) {
      addIntsField(field,data,values);
    }
 else {
      addVarIntsField(field,data,values,minValue,maxValue);
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(data);
    }
 else {
      IOUtils.closeWhileHandlingException(data);
    }
  }
}
