{
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random,dir);
  final long startTime=System.currentTimeMillis();
  final Document doc=new Document();
  final Field body=newField("body","",Field.Index.ANALYZED);
  doc.add(body);
  final StringBuilder sb=new StringBuilder();
  for (int docCount=0; docCount < NUM_DOCS * RANDOM_MULTIPLIER; docCount++) {
    final int numTerms=random.nextInt(10);
    for (int termCount=0; termCount < numTerms; termCount++) {
      sb.append(random.nextBoolean() ? "aaa" : "bbb");
      sb.append(' ');
    }
    body.setValue(sb.toString());
    w.addDocument(doc);
    sb.delete(0,sb.length());
  }
  final IndexReader r=w.getReader();
  w.close();
  final long endTime=System.currentTimeMillis();
  if (VERBOSE)   System.out.println("BUILD took " + (endTime - startTime));
  final IndexSearcher s=new IndexSearcher(r);
  final AtomicBoolean failed=new AtomicBoolean();
  final AtomicLong netSearch=new AtomicLong();
  Thread[] threads=new Thread[NUM_SEARCH_THREADS];
  for (int threadID=0; threadID < NUM_SEARCH_THREADS; threadID++) {
    threads[threadID]=new Thread(){
      TotalHitCountCollector col=new TotalHitCountCollector();
      @Override public void run(){
        try {
          long totHits=0;
          long totSearch=0;
          long stopAt=System.currentTimeMillis() + RUN_TIME_MSEC;
          while (System.currentTimeMillis() < stopAt && !failed.get()) {
            s.search(new TermQuery(new Term("body","aaa")),col);
            totHits+=col.getTotalHits();
            s.search(new TermQuery(new Term("body","bbb")),col);
            totHits+=col.getTotalHits();
            totSearch++;
          }
          assertTrue(totSearch > 0 && totHits > 0);
          netSearch.addAndGet(totSearch);
        }
 catch (        Exception exc) {
          failed.set(true);
          throw new RuntimeException(exc);
        }
      }
    }
;
    threads[threadID].setDaemon(true);
  }
  for (  Thread t : threads) {
    t.start();
  }
  for (  Thread t : threads) {
    t.join();
  }
  if (VERBOSE)   System.out.println(NUM_SEARCH_THREADS + " threads did " + netSearch.get()+ " searches");
  s.close();
  r.close();
  dir.close();
}
