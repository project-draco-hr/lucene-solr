{
  final Matcher m=pattern.matcher(input);
  final StringBuffer cumulativeOutput=new StringBuffer();
  int cumulative=0;
  int lastMatchEnd=0;
  while (m.find()) {
    final int groupSize=m.end() - m.start();
    final int skippedSize=m.start() - lastMatchEnd;
    lastMatchEnd=m.end();
    final int lengthBeforeReplacement=cumulativeOutput.length() + skippedSize;
    m.appendReplacement(cumulativeOutput,replacement);
    final int replacementSize=cumulativeOutput.length() - lengthBeforeReplacement;
    if (groupSize != replacementSize) {
      if (replacementSize < groupSize) {
        cumulative+=groupSize - replacementSize;
        int atIndex=lengthBeforeReplacement + replacementSize;
        addOffCorrectMap(atIndex,cumulative);
      }
 else {
        for (int i=groupSize; i < replacementSize; i++) {
          addOffCorrectMap(lengthBeforeReplacement + i,--cumulative);
        }
      }
    }
  }
  m.appendTail(cumulativeOutput);
  return cumulativeOutput;
}
