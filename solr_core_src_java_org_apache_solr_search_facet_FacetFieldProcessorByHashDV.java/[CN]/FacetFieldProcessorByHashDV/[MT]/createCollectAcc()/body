{
  int numSlots=table.numSlots();
  if (freq.allBuckets) {
    allBucketsSlot=numSlots++;
  }
  indexOrderAcc=new SlotAcc(fcontext){
    @Override public void collect(    int doc,    int slot) throws IOException {
    }
    @Override public int compare(    int slotA,    int slotB){
      long s1=calc.bitsToSortableBits(table.vals[slotA]);
      long s2=calc.bitsToSortableBits(table.vals[slotB]);
      return Long.compare(s1,s2);
    }
    @Override public Object getValue(    int slotNum) throws IOException {
      return null;
    }
    @Override public void reset(){
    }
    @Override public void resize(    Resizer resizer){
    }
  }
;
  countAcc=new CountSlotAcc(fcontext){
    @Override public void incrementCount(    int slot,    int count){
      throw new UnsupportedOperationException();
    }
    @Override public int getCount(    int slot){
      return table.counts[slot];
    }
    @Override public Object getValue(    int slotNum){
      return getCount(slotNum);
    }
    @Override public void reset(){
      throw new UnsupportedOperationException();
    }
    @Override public void collect(    int doc,    int slot) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public int compare(    int slotA,    int slotB){
      return Integer.compare(table.counts[slotA],table.counts[slotB]);
    }
    @Override public void resize(    Resizer resizer){
      throw new UnsupportedOperationException();
    }
  }
;
  super.createCollectAcc(fcontext.base.size(),numSlots);
  if (freq.allBuckets) {
    allBucketsAcc=new SpecialSlotAcc(fcontext,collectAcc,allBucketsSlot,otherAccs,0);
  }
}
