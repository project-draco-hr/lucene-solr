{
  clearIndex();
  assertU(adoc(sdoc("id","1","text","a","payload",ByteBuffer.wrap(new byte[]{0x12,0x62,0x15}))));
  assertU(adoc(sdoc("id","2","text","b","payload",ByteBuffer.wrap(new byte[]{0x25,0x21,0x16}))));
  assertU(adoc(sdoc("id","3","text","a","payload",ByteBuffer.wrap(new byte[]{0x35,0x32,0x58}))));
  assertU(adoc(sdoc("id","4","text","b","payload",ByteBuffer.wrap(new byte[]{0x25,0x21,0x15}))));
  assertU(adoc(sdoc("id","5","text","a","payload",ByteBuffer.wrap(new byte[]{0x35,0x35,0x10,0x00}))));
  assertU(adoc(sdoc("id","6","text","c","payload",ByteBuffer.wrap(new byte[]{0x1a,0x2b,0x3c,0x00,0x00,0x03}))));
  assertU(adoc(sdoc("id","7","text","c","payload",ByteBuffer.wrap(new byte[]{0x00,0x3c,0x73}))));
  assertU(adoc(sdoc("id","8","text","c","payload",ByteBuffer.wrap(new byte[]{0x59,0x2d,0x4d}))));
  assertU(adoc(sdoc("id","9","text","a","payload",ByteBuffer.wrap(new byte[]{0x39,0x79,0x7a}))));
  assertU(adoc(sdoc("id","10","text","b","payload",ByteBuffer.wrap(new byte[]{0x31,0x39,0x7c}))));
  assertU(adoc(sdoc("id","11","text","d","payload",ByteBuffer.wrap(new byte[]{(byte)0xff,(byte)0xaf,(byte)0x9c}))));
  assertU(adoc(sdoc("id","12","text","d","payload",ByteBuffer.wrap(new byte[]{0x34,(byte)0xdd,0x4d}))));
  assertU(adoc(sdoc("id","13","text","d","payload",ByteBuffer.wrap(new byte[]{(byte)0x80,0x11,0x33}))));
  assertU(commit());
  assertQ(req("q","*:*","fl","id","sort","payload asc","rows","20"),"//result[@numFound='13']","//result/doc[int='7'  and position()=1]","//result/doc[int='1'  and position()=2]","//result/doc[int='6'  and position()=3]","//result/doc[int='4'  and position()=4]","//result/doc[int='2'  and position()=5]","//result/doc[int='10' and position()=6]","//result/doc[int='12' and position()=7]","//result/doc[int='3'  and position()=8]","//result/doc[int='5'  and position()=9]","//result/doc[int='9'  and position()=10]","//result/doc[int='8'  and position()=11]","//result/doc[int='13' and position()=12]","//result/doc[int='11' and position()=13]");
  assertQ(req("q","*:*","fl","id","sort","payload desc","rows","20"),"//result[@numFound='13']","//result/doc[int='11' and position()=1]","//result/doc[int='13' and position()=2]","//result/doc[int='8'  and position()=3]","//result/doc[int='9'  and position()=4]","//result/doc[int='5'  and position()=5]","//result/doc[int='3'  and position()=6]","//result/doc[int='12' and position()=7]","//result/doc[int='10' and position()=8]","//result/doc[int='2'  and position()=9]","//result/doc[int='4'  and position()=10]","//result/doc[int='6'  and position()=11]","//result/doc[int='1'  and position()=12]","//result/doc[int='7'  and position()=13]");
  assertQ(req("q","text:a","fl","id","sort","payload asc","rows","20"),"//result[@numFound='4']","//result/doc[int='1'  and position()=1]","//result/doc[int='3'  and position()=2]","//result/doc[int='5'  and position()=3]","//result/doc[int='9'  and position()=4]");
  assertQ(req("q","text:a","fl","id","sort","payload desc","rows","20"),"//result[@numFound='4']","//result/doc[int='9'  and position()=1]","//result/doc[int='5'  and position()=2]","//result/doc[int='3'  and position()=3]","//result/doc[int='1'  and position()=4]");
  assertQ(req("q","text:b","fl","id","sort","payload asc","rows","20"),"//result[@numFound='3']","//result/doc[int='4'  and position()=1]","//result/doc[int='2'  and position()=2]","//result/doc[int='10' and position()=3]");
  assertQ(req("q","text:b","fl","id","sort","payload desc","rows","20"),"//result[@numFound='3']","//result/doc[int='10' and position()=1]","//result/doc[int='2'  and position()=2]","//result/doc[int='4'  and position()=3]");
  assertQ(req("q","text:c","fl","id","sort","payload asc","rows","20"),"//result[@numFound='3']","//result/doc[int='7'  and position()=1]","//result/doc[int='6'  and position()=2]","//result/doc[int='8'  and position()=3]");
  assertQ(req("q","text:c","fl","id","sort","payload desc","rows","20"),"//result[@numFound='3']","//result/doc[int='8'  and position()=1]","//result/doc[int='6'  and position()=2]","//result/doc[int='7'  and position()=3]");
  assertQ(req("q","text:d","fl","id","sort","payload asc","rows","20"),"//result[@numFound='3']","//result/doc[int='12' and position()=1]","//result/doc[int='13' and position()=2]","//result/doc[int='11' and position()=3]");
  assertQ(req("q","text:d","fl","id","sort","payload desc","rows","20"),"//result[@numFound='3']","//result/doc[int='11' and position()=1]","//result/doc[int='13' and position()=2]","//result/doc[int='12' and position()=3]");
}
