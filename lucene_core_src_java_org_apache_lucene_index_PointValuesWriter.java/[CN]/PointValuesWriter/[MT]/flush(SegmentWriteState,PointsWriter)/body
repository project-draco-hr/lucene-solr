{
  PointsReader reader=new MutablePointsReader(){
    final int[] ords=new int[numPoints];
{
      for (int i=0; i < numPoints; ++i) {
        ords[i]=i;
      }
    }
    @Override public void intersect(    String fieldName,    IntersectVisitor visitor) throws IOException {
      if (fieldName.equals(fieldInfo.name) == false) {
        throw new IllegalArgumentException("fieldName must be the same");
      }
      final byte[] packedValue=new byte[packedBytesLength];
      for (int i=0; i < numPoints; i++) {
        getValue(i,packedValue);
        visitor.visit(getDocID(i),packedValue);
      }
    }
    @Override public void checkIntegrity(){
      throw new UnsupportedOperationException();
    }
    @Override public long ramBytesUsed(){
      return 0L;
    }
    @Override public void close(){
    }
    @Override public byte[] getMinPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public byte[] getMaxPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getNumDimensions(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getBytesPerDimension(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public long size(    String fieldName){
      if (fieldName.equals(fieldInfo.name) == false) {
        throw new IllegalArgumentException("fieldName must be the same");
      }
      return numPoints;
    }
    @Override public int getDocCount(    String fieldName){
      if (fieldName.equals(fieldInfo.name) == false) {
        throw new IllegalArgumentException("fieldName must be the same");
      }
      return numDocs;
    }
    @Override public void swap(    int i,    int j){
      int tmp=ords[i];
      ords[i]=ords[j];
      ords[j]=tmp;
    }
    @Override public int getDocID(    int i){
      return docIDs[ords[i]];
    }
    @Override public void getValue(    int i,    byte[] packedValue){
      final long offset=(long)packedBytesLength * ords[i];
      bytes.readBytes(offset,packedValue,0,packedBytesLength);
    }
    @Override public byte getByteAt(    int i,    int k){
      final long offset=(long)packedBytesLength * ords[i] + k;
      return bytes.readByte(offset);
    }
  }
;
  writer.writeField(fieldInfo,reader);
}
