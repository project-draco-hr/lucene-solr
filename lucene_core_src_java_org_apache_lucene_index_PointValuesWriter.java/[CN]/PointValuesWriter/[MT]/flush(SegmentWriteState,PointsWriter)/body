{
  writer.writeField(fieldInfo,new PointsReader(){
    @Override public void intersect(    String fieldName,    IntersectVisitor visitor) throws IOException {
      if (fieldName.equals(fieldInfo.name) == false) {
        throw new IllegalArgumentException("fieldName must be the same");
      }
      for (int i=0; i < numDocs; i++) {
        bytes.readBytes(packedValue.length * i,packedValue,0,packedValue.length);
        visitor.visit(docIDs[i],packedValue);
      }
    }
    @Override public void checkIntegrity(){
      throw new UnsupportedOperationException();
    }
    @Override public long ramBytesUsed(){
      return 0L;
    }
    @Override public void close(){
    }
    @Override public byte[] getMinPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public byte[] getMaxPackedValue(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getNumDimensions(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getBytesPerDimension(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public long size(    String fieldName){
      throw new UnsupportedOperationException();
    }
    @Override public int getDocCount(    String fieldName){
      throw new UnsupportedOperationException();
    }
  }
);
}
