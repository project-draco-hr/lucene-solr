{
  if (target == null || queryArea <= 0) {
    return 0;
  }
  double targetArea=target.getArea(null);
  if (targetArea <= 0) {
    return 0;
  }
  double score=0;
  double top=Math.min(queryExtent.getMaxY(),target.getMaxY());
  double bottom=Math.max(queryExtent.getMinY(),target.getMinY());
  double height=top - bottom;
  double width=0;
  if (queryExtent.getCrossesDateLine()) {
    if (target.getCrossesDateLine()) {
      double left=Math.max(queryExtent.getMinX(),target.getMinX());
      double right=Math.min(queryExtent.getMaxX(),target.getMaxX());
      width=right + 360.0 - left;
    }
 else {
      double qryWestLeft=Math.max(queryExtent.getMinX(),target.getMaxX());
      double qryWestRight=Math.min(target.getMaxX(),180.0);
      double qryWestWidth=qryWestRight - qryWestLeft;
      if (qryWestWidth > 0) {
        width=qryWestWidth;
      }
 else {
        double qryEastLeft=Math.max(target.getMaxX(),-180.0);
        double qryEastRight=Math.min(queryExtent.getMaxX(),target.getMaxX());
        double qryEastWidth=qryEastRight - qryEastLeft;
        if (qryEastWidth > 0) {
          width=qryEastWidth;
        }
      }
    }
  }
 else {
    if (target.getCrossesDateLine()) {
      double tgtWestLeft=Math.max(queryExtent.getMinX(),target.getMinX());
      double tgtWestRight=Math.min(queryExtent.getMaxX(),180.0);
      double tgtWestWidth=tgtWestRight - tgtWestLeft;
      if (tgtWestWidth > 0) {
        width=tgtWestWidth;
      }
 else {
        double tgtEastLeft=Math.max(queryExtent.getMinX(),-180.0);
        double tgtEastRight=Math.min(queryExtent.getMaxX(),target.getMaxX());
        double tgtEastWidth=tgtEastRight - tgtEastLeft;
        if (tgtEastWidth > 0) {
          width=tgtEastWidth;
        }
      }
    }
 else {
      double left=Math.max(queryExtent.getMinX(),target.getMinX());
      double right=Math.min(queryExtent.getMaxX(),target.getMaxX());
      width=right - left;
    }
  }
  if ((width > 0) && (height > 0)) {
    double intersectionArea=width * height;
    double queryRatio=intersectionArea / queryArea;
    double targetRatio=intersectionArea / targetArea;
    double queryFactor=Math.pow(queryRatio,queryPower);
    double targetFactor=Math.pow(targetRatio,targetPower);
    score=queryFactor * targetFactor * 10000.0;
    if (exp != null) {
      exp.setValue((float)score);
      exp.setDescription(this.getClass().getSimpleName());
      Explanation e=null;
      exp.addDetail(e=new Explanation((float)intersectionArea,"IntersectionArea"));
      e.addDetail(new Explanation((float)width,"width; Query: " + queryExtent.toString()));
      e.addDetail(new Explanation((float)height,"height; Target: " + target.toString()));
      exp.addDetail(e=new Explanation((float)queryFactor,"Query"));
      e.addDetail(new Explanation((float)queryArea,"area"));
      e.addDetail(new Explanation((float)queryRatio,"ratio"));
      e.addDetail(new Explanation((float)queryPower,"power"));
      exp.addDetail(e=new Explanation((float)targetFactor,"Target"));
      e.addDetail(new Explanation((float)targetArea,"area"));
      e.addDetail(new Explanation((float)targetRatio,"ratio"));
      e.addDetail(new Explanation((float)targetPower,"power"));
    }
  }
 else   if (exp != null) {
    exp.setValue(0);
    exp.setDescription("Shape does not intersect");
  }
  return score;
}
