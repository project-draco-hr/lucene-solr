{
  final int iters=atLeast(10);
  for (int iter=0; iter < iters; ++iter) {
    Directory dir=newDirectory();
    RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
    final int numDocs=atLeast(100);
    for (int i=0; i < numDocs; ++i) {
      Document doc=new Document();
      final int numValues=random().nextInt(2);
      for (int j=0; j < numValues; ++j) {
        final long value=TestUtil.nextLong(random(),-100,10000);
        doc.add(new SortedNumericDocValuesField("dv",value));
        doc.add(new DimensionalLongField("idx",value));
      }
      iw.addDocument(doc);
    }
    if (random().nextBoolean()) {
      iw.deleteDocuments(DimensionalRangeQuery.new1DLongRange("idx",0L,true,10L,true));
    }
    iw.commit();
    final IndexReader reader=iw.getReader();
    final IndexSearcher searcher=newSearcher(reader);
    iw.close();
    for (int i=0; i < 100; ++i) {
      final Long min=random().nextBoolean() ? null : TestUtil.nextLong(random(),-100,1000);
      final Long max=random().nextBoolean() ? null : TestUtil.nextLong(random(),-100,1000);
      final boolean minInclusive=random().nextBoolean();
      final boolean maxInclusive=random().nextBoolean();
      final Query q1=DimensionalRangeQuery.new1DLongRange("idx",min,minInclusive,max,maxInclusive);
      final Query q2=DocValuesRangeQuery.newLongRange("dv",min,max,minInclusive,maxInclusive);
      assertSameMatches(searcher,q1,q2,false);
    }
    reader.close();
    dir.close();
  }
}
