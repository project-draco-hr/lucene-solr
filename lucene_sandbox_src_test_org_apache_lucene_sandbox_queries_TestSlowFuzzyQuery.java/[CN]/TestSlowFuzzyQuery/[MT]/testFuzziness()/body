{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);
  addDoc("aaaaa",writer);
  addDoc("aaaab",writer);
  addDoc("aaabb",writer);
  addDoc("aabbb",writer);
  addDoc("abbbb",writer);
  addDoc("bbbbb",writer);
  addDoc("ddddd",writer);
  IndexReader reader=writer.getReader();
  IndexSearcher searcher=newSearcher(reader);
  writer.close();
  SlowFuzzyQuery query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,0);
  ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,1);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,2);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,3);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,4);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(2,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,5);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,6);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  query=new SlowFuzzyQuery(new Term("field","bbbbb"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals("3 documents should match",3,hits.length);
  List<String> order=Arrays.asList("bbbbb","abbbb","aabbb");
  for (int i=0; i < hits.length; i++) {
    final String term=searcher.doc(hits[i].doc).get("field");
    assertEquals(order.get(i),term);
  }
  query=new SlowFuzzyQuery(new Term("field","bbbbb"),SlowFuzzyQuery.defaultMinSimilarity,0,2);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals("only 2 documents should match",2,hits.length);
  order=Arrays.asList("bbbbb","abbbb");
  for (int i=0; i < hits.length; i++) {
    final String term=searcher.doc(hits[i].doc).get("field");
    assertEquals(order.get(i),term);
  }
  query=new SlowFuzzyQuery(new Term("field","xxxxx"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaccc"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  query=new SlowFuzzyQuery(new Term("field","aaaaa"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  assertEquals(searcher.doc(hits[2].doc).get("field"),("aaabb"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  assertEquals(searcher.doc(hits[2].doc).get("field"),("aaabb"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,1);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  assertEquals(searcher.doc(hits[2].doc).get("field"),("aaabb"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,2);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  assertEquals(searcher.doc(hits[2].doc).get("field"),("aaabb"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,3);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(3,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  assertEquals(searcher.doc(hits[2].doc).get("field"),("aaabb"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,4);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(2,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("aaaaa"));
  assertEquals(searcher.doc(hits[1].doc).get("field"),("aaaab"));
  query=new SlowFuzzyQuery(new Term("field","aaaac"),SlowFuzzyQuery.defaultMinSimilarity,5);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("ddddd"));
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,1);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("ddddd"));
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,2);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("ddddd"));
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,3);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("ddddd"));
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,4);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  assertEquals(searcher.doc(hits[0].doc).get("field"),("ddddd"));
  query=new SlowFuzzyQuery(new Term("field","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,5);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  query=new SlowFuzzyQuery(new Term("anotherfield","ddddX"),SlowFuzzyQuery.defaultMinSimilarity,0);
  hits=searcher.search(query,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  reader.close();
  directory.close();
}
