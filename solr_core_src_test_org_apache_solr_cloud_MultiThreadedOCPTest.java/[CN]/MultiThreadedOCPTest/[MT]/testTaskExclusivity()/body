{
  DistributedQueue distributedQueue=new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),"/overseer/collection-queue-work",new Overseer.Stats());
  try (SolrClient client=createNewSolrClient("",getBaseUrl((HttpSolrClient)clients.get(0)))){
    Create createCollectionRequest=new Create().setCollectionName("ocptest_shardsplit").setNumShards(4).setConfigName("conf1").setAsyncId("1000");
    createCollectionRequest.process(client);
    distributedQueue.offer(Utils.toJSON(Utils.makeMap("collection","ocptest_shardsplit",QUEUE_OPERATION,MOCK_COLL_TASK.toLower(),ASYNC,"1001","sleep","100")));
    distributedQueue.offer(Utils.toJSON(Utils.makeMap("collection","ocptest_shardsplit",QUEUE_OPERATION,MOCK_COLL_TASK.toLower(),ASYNC,"1002","sleep","100")));
    int iterations=0;
    while (true) {
      int runningTasks=0;
      int completedTasks=0;
      for (int i=1001; i <= 1002; i++) {
        final RequestStatusState state=getRequestState(i,client);
        if (state == RequestStatusState.RUNNING) {
          runningTasks++;
        }
 else         if (state == RequestStatusState.COMPLETED) {
          completedTasks++;
        }
        assertNotSame("We have a failed SPLITSHARD task",RequestStatusState.FAILED,state);
      }
      assertTrue("Mutual exclusion failed. Found more than one task running for the same collection",runningTasks < 2);
      if (completedTasks == 2 || iterations++ > REQUEST_STATUS_TIMEOUT)       break;
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
    }
    for (int i=1001; i <= 1002; i++) {
      final RequestStatusState state=getRequestStateAfterCompletion(i + "",REQUEST_STATUS_TIMEOUT,client);
      assertSame("Task " + i + " did not complete, final state: "+ state,RequestStatusState.COMPLETED,state);
    }
  }
 }
