{
  FloatToObjectMap<Integer> map=new FloatToObjectMap<Integer>();
  assertNull(map.get(0));
  for (int i=0; i < 100; ++i) {
    int value=100 + i;
    assertFalse(map.containsValue(value));
    map.put(i * 1.1f,value);
    assertTrue(map.containsValue(value));
    assertNotNull(map.get(i * 1.1f));
  }
  assertEquals(100,map.size());
  for (int i=0; i < 100; ++i) {
    assertTrue(map.containsKey(i * 1.1f));
    assertEquals(100 + i,map.get(i * 1.1f).intValue());
  }
  for (int i=10; i < 90; ++i) {
    map.remove(i * 1.1f);
    assertNull(map.get(i * 1.1f));
  }
  assertEquals(20,map.size());
  for (int i=0; i < 100; ++i) {
    assertEquals(map.containsKey(i * 1.1f),!(i >= 10 && i < 90));
  }
  for (int i=5; i < 85; ++i) {
    map.put(i * 1.1f,Integer.valueOf(5 + i));
  }
  assertEquals(95,map.size());
  for (int i=0; i < 100; ++i) {
    assertEquals(map.containsKey(i * 1.1f),!(i >= 85 && i < 90));
  }
  for (int i=0; i < 5; ++i) {
    assertEquals(map.get(i * 1.1f).intValue(),(100 + i));
  }
  for (int i=5; i < 85; ++i) {
    assertEquals(map.get(i * 1.1f).intValue(),(5 + i));
  }
  for (int i=90; i < 100; ++i) {
    assertEquals(map.get(i * 1.1f).intValue(),(100 + i));
  }
}
