{
  int numDocs=atLeast(count);
  int dimensions=dimension();
  if (VERBOSE) {
    System.out.println("TEST: numDocs=" + numDocs);
  }
  Range[][] ranges=new Range[numDocs][];
  boolean haveRealDoc=true;
  nextdoc:   for (int id=0; id < numDocs; ++id) {
    int x=random().nextInt(20);
    if (ranges[id] == null) {
      ranges[id]=new Range[]{nextRange(dimensions)};
    }
    if (x == 17) {
      ranges[id][0].isMissing=true;
      if (VERBOSE) {
        System.out.println("  id=" + id + " is missing");
      }
      continue;
    }
    if (multiValued == true && random().nextBoolean()) {
      int n=random().nextInt(2) + 1;
      ranges[id]=new Range[n];
      for (int i=0; i < n; ++i) {
        ranges[id][i]=nextRange(dimensions);
      }
    }
    if (id > 0 && x < 9 && haveRealDoc) {
      int oldID;
      int i=0;
      while (true) {
        oldID=random().nextInt(id);
        if (ranges[oldID][0].isMissing == false) {
          break;
        }
 else         if (++i > id) {
          continue nextdoc;
        }
      }
      if (x == dimensions * 2) {
        for (int d=0; d < dimensions; ++d) {
          ranges[id][0].setMin(d,ranges[oldID][0].getMin(d));
          ranges[id][0].setMax(d,ranges[oldID][0].getMax(d));
        }
        if (VERBOSE) {
          System.out.println("  id=" + id + " box="+ ranges[id]+ " (same box as doc="+ oldID+ ")");
        }
      }
 else {
        for (int m=0, even=dimensions % 2; m < dimensions * 2; ++m) {
          if (x == m) {
            int d=(int)Math.floor(m / 2);
            if (even == 0) {
              ranges[id][0].setMin(d,ranges[oldID][0].getMin(d));
              if (VERBOSE) {
                System.out.println("  id=" + id + " box="+ ranges[id]+ " (same min["+ d+ "] as doc="+ oldID+ ")");
              }
            }
 else {
              ranges[id][0].setMax(d,ranges[oldID][0].getMax(d));
              if (VERBOSE) {
                System.out.println("  id=" + id + " box="+ ranges[id]+ " (same max["+ d+ "] as doc="+ oldID+ ")");
              }
            }
          }
        }
      }
    }
  }
  verify(ranges);
}
