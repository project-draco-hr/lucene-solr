{
  tvf.seek(tvfPointer);
  int numTerms=tvf.readVInt();
  if (numTerms == 0)   return;
  boolean storePositions;
  boolean storeOffsets;
  byte bits=tvf.readByte();
  storePositions=(bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;
  storeOffsets=(bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;
  mapper.setExpectations(field,numTerms,storeOffsets,storePositions);
  int start=0;
  int deltaLength=0;
  int totalLength=0;
  byte[] byteBuffer;
  byteBuffer=new byte[20];
  for (int i=0; i < numTerms; i++) {
    start=tvf.readVInt();
    deltaLength=tvf.readVInt();
    totalLength=start + deltaLength;
    final String term;
    if (byteBuffer.length < totalLength) {
      byteBuffer=ArrayUtil.grow(byteBuffer,totalLength);
    }
    tvf.readBytes(byteBuffer,start,deltaLength);
    term=new String(byteBuffer,0,totalLength,"UTF-8");
    int freq=tvf.readVInt();
    int[] positions=null;
    if (storePositions) {
      if (!mapper.isIgnoringPositions()) {
        positions=new int[freq];
        int prevPosition=0;
        for (int j=0; j < freq; j++) {
          positions[j]=prevPosition + tvf.readVInt();
          prevPosition=positions[j];
        }
      }
 else {
        for (int j=0; j < freq; j++) {
          tvf.readVInt();
        }
      }
    }
    TermVectorOffsetInfo[] offsets=null;
    if (storeOffsets) {
      if (!mapper.isIgnoringOffsets()) {
        offsets=new TermVectorOffsetInfo[freq];
        int prevOffset=0;
        for (int j=0; j < freq; j++) {
          int startOffset=prevOffset + tvf.readVInt();
          int endOffset=startOffset + tvf.readVInt();
          offsets[j]=new TermVectorOffsetInfo(startOffset,endOffset);
          prevOffset=endOffset;
        }
      }
 else {
        for (int j=0; j < freq; j++) {
          tvf.readVInt();
          tvf.readVInt();
        }
      }
    }
    mapper.map(term,freq,offsets,positions);
  }
}
