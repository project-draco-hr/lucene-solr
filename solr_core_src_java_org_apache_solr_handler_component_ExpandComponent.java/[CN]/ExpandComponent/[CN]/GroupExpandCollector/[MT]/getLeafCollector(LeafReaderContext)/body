{
  final int docBase=context.docBase;
  if (ordinalMap != null) {
    this.segmentValues=this.multiSortedDocValues.values[context.ord];
    this.segmentOrdinalMap=ordinalMap.getGlobalOrds(context.ord);
  }
  final LongObjectMap<LeafCollector> leafCollectors=new LongObjectOpenHashMap<>();
  for (  LongObjectCursor<Collector> entry : groups) {
    leafCollectors.put(entry.key,entry.value.getLeafCollector(context));
  }
  return new LeafCollector(){
    @Override public void setScorer(    Scorer scorer) throws IOException {
      for (      ObjectCursor<LeafCollector> c : leafCollectors.values()) {
        c.value.setScorer(scorer);
      }
    }
    @Override public void collect(    int docId) throws IOException {
      int globalDoc=docId + docBase;
      int ord=-1;
      if (ordinalMap != null) {
        ord=segmentValues.getOrd(docId);
        if (ord > -1) {
          ord=(int)segmentOrdinalMap.get(ord);
        }
      }
 else {
        ord=docValues.getOrd(globalDoc);
      }
      if (ord > -1 && groupBits.get(ord) && !collapsedSet.contains(globalDoc)) {
        LeafCollector c=leafCollectors.get(ord);
        c.collect(docId);
      }
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return false;
    }
  }
;
}
