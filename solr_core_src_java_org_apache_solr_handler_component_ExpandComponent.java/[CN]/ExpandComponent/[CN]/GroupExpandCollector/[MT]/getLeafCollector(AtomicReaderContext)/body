{
  final int docBase=context.docBase;
  final IntObjectMap<LeafCollector> leafCollectors=new IntObjectOpenHashMap<>();
  for (  IntObjectCursor<Collector> entry : groups) {
    leafCollectors.put(entry.key,entry.value.getLeafCollector(context));
  }
  return new LeafCollector(){
    @Override public void setScorer(    Scorer scorer) throws IOException {
      for (      ObjectCursor<LeafCollector> c : leafCollectors.values()) {
        c.value.setScorer(scorer);
      }
    }
    @Override public void collect(    int docId) throws IOException {
      int doc=docId + docBase;
      int ord=docValues.getOrd(doc);
      if (ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {
        LeafCollector c=leafCollectors.get(ord);
        c.collect(docId);
      }
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return false;
    }
  }
;
}
