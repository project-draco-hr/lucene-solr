{
  if (!rb.doExpand) {
    return;
  }
  SolrQueryRequest req=rb.req;
  SolrParams params=req.getParams();
  String field=params.get(ExpandParams.EXPAND_FIELD);
  String hint=null;
  if (field == null) {
    List<Query> filters=rb.getFilters();
    if (filters != null) {
      for (      Query q : filters) {
        if (q instanceof CollapsingQParserPlugin.CollapsingPostFilter) {
          CollapsingQParserPlugin.CollapsingPostFilter cp=(CollapsingQParserPlugin.CollapsingPostFilter)q;
          field=cp.getField();
          hint=cp.hint;
        }
      }
    }
  }
  if (field == null) {
    throw new IOException("Expand field is null.");
  }
  String sortParam=params.get(ExpandParams.EXPAND_SORT);
  String[] fqs=params.getParams(ExpandParams.EXPAND_FQ);
  String qs=params.get(ExpandParams.EXPAND_Q);
  int limit=params.getInt(ExpandParams.EXPAND_ROWS,5);
  Sort sort=null;
  if (sortParam != null) {
    sort=SortSpecParsing.parseSortSpec(sortParam,rb.req).getSort();
  }
  Query query;
  if (qs == null) {
    query=rb.getQuery();
  }
 else {
    try {
      QParser parser=QParser.getParser(qs,null,req);
      query=parser.getQuery();
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
  List<Query> newFilters=new ArrayList<>();
  if (fqs == null) {
    List<Query> filters=rb.getFilters();
    if (filters != null) {
      for (      Query q : filters) {
        if (!(q instanceof CollapsingQParserPlugin.CollapsingPostFilter)) {
          newFilters.add(q);
        }
      }
    }
  }
 else {
    try {
      for (      String fq : fqs) {
        if (fq != null && fq.trim().length() != 0 && !fq.equals("*:*")) {
          QParser fqp=QParser.getParser(fq,null,req);
          newFilters.add(fqp.getQuery());
        }
      }
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
  SolrIndexSearcher searcher=req.getSearcher();
  LeafReader reader=searcher.getLeafReader();
  FieldType fieldType=searcher.getSchema().getField(field).getType();
  SortedDocValues values=null;
  long nullValue=0;
  if (fieldType instanceof StrField) {
    if (CollapsingQParserPlugin.HINT_TOP_FC.equals(hint)) {
      Map<String,UninvertingReader.Type> mapping=new HashMap();
      mapping.put(field,UninvertingReader.Type.SORTED);
      UninvertingReader uninvertingReader=new UninvertingReader(new ReaderWrapper(searcher.getLeafReader(),field),mapping);
      values=uninvertingReader.getSortedDocValues(field);
    }
 else {
      values=DocValues.getSorted(reader,field);
    }
  }
 else {
    String defaultValue=searcher.getSchema().getField(field).getDefaultValue();
    if (defaultValue != null) {
      if (fieldType instanceof TrieIntField || fieldType instanceof TrieLongField) {
        nullValue=Long.parseLong(defaultValue);
      }
 else       if (fieldType instanceof TrieFloatField) {
        nullValue=Float.floatToIntBits(Float.parseFloat(defaultValue));
      }
 else       if (fieldType instanceof TrieDoubleField) {
        nullValue=Double.doubleToLongBits(Double.parseDouble(defaultValue));
      }
    }
 else {
      if (fieldType instanceof TrieFloatField) {
        nullValue=Float.floatToIntBits(0.0f);
      }
 else       if (fieldType instanceof TrieDoubleField) {
        nullValue=Double.doubleToLongBits(0.0f);
      }
    }
  }
  FixedBitSet groupBits=null;
  LongHashSet groupSet=null;
  DocList docList=rb.getResults().docList;
  IntHashSet collapsedSet=new IntHashSet(docList.size() * 2);
  DocIterator idit=docList.iterator();
  int[] globalDocs=new int[docList.size()];
  int docsIndex=-1;
  while (idit.hasNext()) {
    globalDocs[++docsIndex]=idit.nextDoc();
  }
  Arrays.sort(globalDocs);
  Query groupQuery=null;
  List<LeafReaderContext> contexts=searcher.getTopReaderContext().leaves();
  int currentContext=0;
  int currentDocBase=contexts.get(currentContext).docBase;
  int nextDocBase=(currentContext + 1) < contexts.size() ? contexts.get(currentContext + 1).docBase : Integer.MAX_VALUE;
  IntObjectHashMap<BytesRef> ordBytes=null;
  if (values != null) {
    groupBits=new FixedBitSet(values.getValueCount());
    MultiDocValues.OrdinalMap ordinalMap=null;
    SortedDocValues[] sortedDocValues=null;
    LongValues segmentOrdinalMap=null;
    SortedDocValues currentValues=null;
    if (values instanceof MultiDocValues.MultiSortedDocValues) {
      ordinalMap=((MultiDocValues.MultiSortedDocValues)values).mapping;
      sortedDocValues=((MultiDocValues.MultiSortedDocValues)values).values;
      currentValues=sortedDocValues[currentContext];
      segmentOrdinalMap=ordinalMap.getGlobalOrds(currentContext);
    }
    int count=0;
    ordBytes=new IntObjectHashMap<>();
    for (int i=0; i < globalDocs.length; i++) {
      int globalDoc=globalDocs[i];
      while (globalDoc >= nextDocBase) {
        currentContext++;
        currentDocBase=contexts.get(currentContext).docBase;
        nextDocBase=(currentContext + 1) < contexts.size() ? contexts.get(currentContext + 1).docBase : Integer.MAX_VALUE;
        if (ordinalMap != null) {
          currentValues=sortedDocValues[currentContext];
          segmentOrdinalMap=ordinalMap.getGlobalOrds(currentContext);
        }
      }
      int contextDoc=globalDoc - currentDocBase;
      if (ordinalMap != null) {
        int ord=currentValues.getOrd(contextDoc);
        if (ord > -1) {
          ++count;
          BytesRef ref=currentValues.lookupOrd(ord);
          ord=(int)segmentOrdinalMap.get(ord);
          ordBytes.put(ord,BytesRef.deepCopyOf(ref));
          groupBits.set(ord);
          collapsedSet.add(globalDoc);
        }
      }
 else {
        int ord=values.getOrd(globalDoc);
        if (ord > -1) {
          ++count;
          BytesRef ref=values.lookupOrd(ord);
          ordBytes.put(ord,BytesRef.deepCopyOf(ref));
          groupBits.set(ord);
          collapsedSet.add(globalDoc);
        }
      }
    }
    if (count > 0 && count < 200) {
      try {
        groupQuery=getGroupQuery(field,count,ordBytes);
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
    }
  }
 else {
    groupSet=new LongHashSet(docList.size());
    NumericDocValues collapseValues=contexts.get(currentContext).reader().getNumericDocValues(field);
    int count=0;
    for (int i=0; i < globalDocs.length; i++) {
      int globalDoc=globalDocs[i];
      while (globalDoc >= nextDocBase) {
        currentContext++;
        currentDocBase=contexts.get(currentContext).docBase;
        nextDocBase=currentContext + 1 < contexts.size() ? contexts.get(currentContext + 1).docBase : Integer.MAX_VALUE;
        collapseValues=contexts.get(currentContext).reader().getNumericDocValues(field);
      }
      int contextDoc=globalDoc - currentDocBase;
      long value=collapseValues.get(contextDoc);
      if (value != nullValue) {
        ++count;
        groupSet.add(value);
        collapsedSet.add(globalDoc);
      }
    }
    if (count > 0 && count < 200) {
      groupQuery=getGroupQuery(field,fieldType,count,groupSet);
    }
  }
  Collector collector;
  if (sort != null)   sort=sort.rewrite(searcher);
  Collector groupExpandCollector=null;
  if (values != null) {
    groupExpandCollector=new GroupExpandCollector(values,groupBits,collapsedSet,limit,sort);
  }
 else {
    groupExpandCollector=new NumericGroupExpandCollector(field,nullValue,groupSet,collapsedSet,limit,sort);
  }
  if (groupQuery != null) {
    newFilters.add(groupQuery);
  }
  SolrIndexSearcher.ProcessedFilter pfilter=searcher.getProcessedFilter(null,newFilters);
  if (pfilter.postFilter != null) {
    pfilter.postFilter.setLastDelegate(groupExpandCollector);
    collector=pfilter.postFilter;
  }
 else {
    collector=groupExpandCollector;
  }
  if (pfilter.filter == null) {
    searcher.search(query,collector);
  }
 else {
    Query q=new BooleanQuery.Builder().add(query,Occur.MUST).add(pfilter.filter,Occur.FILTER).build();
    searcher.search(q,collector);
  }
  LongObjectMap<Collector> groups=((GroupCollector)groupExpandCollector).getGroups();
  NamedList outMap=new SimpleOrderedMap();
  CharsRefBuilder charsRef=new CharsRefBuilder();
  for (  LongObjectCursor<Collector> cursor : groups) {
    long groupValue=cursor.key;
    TopDocsCollector<?> topDocsCollector=TopDocsCollector.class.cast(cursor.value);
    TopDocs topDocs=topDocsCollector.topDocs();
    ScoreDoc[] scoreDocs=topDocs.scoreDocs;
    if (scoreDocs.length > 0) {
      int[] docs=new int[scoreDocs.length];
      float[] scores=new float[scoreDocs.length];
      for (int i=0; i < docs.length; i++) {
        ScoreDoc scoreDoc=scoreDocs[i];
        docs[i]=scoreDoc.doc;
        scores[i]=scoreDoc.score;
      }
      DocSlice slice=new DocSlice(0,docs.length,docs,scores,topDocs.totalHits,topDocs.getMaxScore());
      if (fieldType instanceof StrField) {
        final BytesRef bytesRef=ordBytes.get((int)groupValue);
        fieldType.indexedToReadable(bytesRef,charsRef);
        String group=charsRef.toString();
        outMap.add(group,slice);
      }
 else {
        if (fieldType instanceof TrieIntField || fieldType instanceof TrieLongField) {
          outMap.add(Long.toString(groupValue),slice);
        }
 else         if (fieldType instanceof TrieFloatField) {
          outMap.add(Float.toString(Float.intBitsToFloat((int)groupValue)),slice);
        }
 else         if (fieldType instanceof TrieDoubleField) {
          outMap.add(Double.toString(Double.longBitsToDouble(groupValue)),slice);
        }
      }
    }
  }
  rb.rsp.add("expanded",outMap);
}
