{
  if ("*".equals(field) && "*".equals(termStr)) {
    return newMatchAllDocsQuery();
  }
  String type=schema.getFieldType(field).getTypeName();
  ReversedWildcardFilterFactory factory=leadingWildcards.get(type);
  if (factory != null) {
    if (factory.shouldReverse(termStr)) {
      int len=termStr.length();
      char[] chars=new char[len + 1];
      chars[0]=factory.getMarkerChar();
      termStr.getChars(0,len,chars,1);
      ReversedWildcardFilter.reverse(chars,1,len);
      termStr=new String(chars);
    }
 else {
      Term term=new Term(field,termStr);
      Automaton a=WildcardQuery.toAutomaton(term);
      Automaton falsePositives=BasicOperations.concatenate(BasicAutomata.makeChar(factory.getMarkerChar()),BasicAutomata.makeAnyString());
      return new AutomatonQuery(term,BasicOperations.minus(a,falsePositives)){
        @Override public String toString(        String field){
          StringBuilder buffer=new StringBuilder();
          if (!getField().equals(field)) {
            buffer.append(getField());
            buffer.append(":");
          }
          buffer.append(term.text());
          buffer.append(ToStringUtils.boost(getBoost()));
          return buffer.toString();
        }
      }
;
    }
  }
  Query q=super.getWildcardQuery(field,termStr);
  if (q instanceof WildcardQuery) {
    WildcardQuery wildcardQuery=new WildcardQuery(((WildcardQuery)q).getTerm());
    return wildcardQuery;
  }
  return q;
}
