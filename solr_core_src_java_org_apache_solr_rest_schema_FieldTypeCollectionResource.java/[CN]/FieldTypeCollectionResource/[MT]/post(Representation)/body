{
  try {
    if (!getSchema().isMutable()) {
      final String message="This IndexSchema is not mutable.";
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
    if (null == entity.getMediaType())     entity.setMediaType(MediaType.APPLICATION_JSON);
    if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {
      String message="Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."+ "  Request has media type "+ entity.getMediaType().toString()+ ".";
      log.error(message);
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
    Object object=ObjectBuilder.fromJSON(entity.getText());
    if (!(object instanceof List)) {
      String message="Invalid JSON type " + object.getClass().getName() + ", expected List of field type definitions in the form of"+ " (ignore the backslashes): [{\"name\":\"text_general\",\"class\":\"solr.TextField\", ...}, {...}, ...]";
      log.error(message);
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
    List<Map<String,Object>> fieldTypeList=(List<Map<String,Object>>)object;
    if (fieldTypeList.size() > 0)     addOrUpdateFieldTypes(fieldTypeList);
  }
 catch (  Exception e) {
    getSolrResponse().setException(e);
  }
  handlePostExecution(log);
  return new SolrOutputRepresentation();
}
