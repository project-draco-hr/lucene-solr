{
  int numPoints=atLeast(5000);
  Directory dir;
  if (numPoints > 100000) {
    dir=newFSDirectory(createTempDir(getClass().getSimpleName()));
  }
 else {
    dir=newDirectory();
  }
  double[] lats=new double[numPoints];
  double[] lons=new double[numPoints];
  IndexWriterConfig iwc=getIndexWriterConfig();
  iwc.setMergePolicy(newLogMergePolicy());
  iwc.setMergeScheduler(new SerialMergeScheduler());
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,iwc);
  for (int id=0; id < numPoints; id++) {
    lats[id]=quantizeLat(GeoTestUtil.nextLatitude());
    lons[id]=quantizeLon(GeoTestUtil.nextLongitude());
    Document doc=new Document();
    doc.add(new LatLonPoint("point",lats[id],lons[id]));
    doc.add(new LatLonDocValuesField("point",lats[id],lons[id]));
    doc.add(new StoredField("id",id));
    w.addDocument(doc);
  }
  if (random().nextBoolean()) {
    w.forceMerge(1);
  }
  DirectoryReader r=w.getReader();
  if (VERBOSE) {
    System.out.println("TEST: reader=" + r);
  }
  IndexSearcher s=newSearcher(r,false);
  int iters=atLeast(100);
  for (int iter=0; iter < iters; iter++) {
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter);
    }
    double pointLat=GeoTestUtil.nextLatitude();
    double pointLon=GeoTestUtil.nextLongitude();
    NearestHit[] expectedHits=new NearestHit[lats.length];
    for (int id=0; id < lats.length; id++) {
      NearestHit hit=new NearestHit();
      hit.distanceMeters=SloppyMath.haversinMeters(pointLat,pointLon,lats[id],lons[id]);
      hit.docID=id;
      expectedHits[id]=hit;
    }
    Arrays.sort(expectedHits,new Comparator<NearestHit>(){
      @Override public int compare(      NearestHit a,      NearestHit b){
        int cmp=Double.compare(a.distanceMeters,b.distanceMeters);
        if (cmp != 0) {
          return cmp;
        }
        return a.docID - b.docID;
      }
    }
);
    int topN=TestUtil.nextInt(random(),1,lats.length);
    if (VERBOSE) {
      System.out.println("\nhits for pointLat=" + pointLat + " pointLon="+ pointLon);
    }
    TopFieldDocs fieldDocs=s.search(new MatchAllDocsQuery(),topN,new Sort(LatLonDocValuesField.newDistanceSort("point",pointLat,pointLon)));
    ScoreDoc[] hits=LatLonPoint.nearest(s,"point",pointLat,pointLon,topN).scoreDocs;
    for (int i=0; i < topN; i++) {
      NearestHit expected=expectedHits[i];
      FieldDoc expected2=(FieldDoc)fieldDocs.scoreDocs[i];
      FieldDoc actual=(FieldDoc)hits[i];
      Document actualDoc=r.document(actual.doc);
      if (VERBOSE) {
        System.out.println("hit " + i);
        System.out.println("  expected id=" + expected.docID + " lat="+ lats[expected.docID]+ " lon="+ lons[expected.docID]+ " distance="+ expected.distanceMeters+ " meters");
        System.out.println("  actual id=" + actualDoc.getField("id") + " distance="+ actual.fields[0]+ " meters");
      }
      assertEquals(expected.docID,actual.doc);
      assertEquals(expected.distanceMeters,((Double)actual.fields[0]).doubleValue(),0.0);
      assertEquals(expected.docID,expected.docID);
      assertEquals(((Double)expected2.fields[0]).doubleValue(),expected.distanceMeters,0.0);
    }
  }
  r.close();
  w.close();
  dir.close();
}
