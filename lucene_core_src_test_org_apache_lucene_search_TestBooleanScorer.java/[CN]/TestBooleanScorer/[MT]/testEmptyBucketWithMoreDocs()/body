{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);
  writer.commit();
  IndexReader ir=writer.getReader();
  writer.close();
  IndexSearcher searcher=newSearcher(ir);
  BooleanWeight weight=(BooleanWeight)new BooleanQuery().createWeight(searcher);
  Scorer[] scorers=new Scorer[]{new Scorer(weight){
    private int doc=-1;
    @Override public float score(){
      return 0;
    }
    @Override public int freq(){
      return 0;
    }
    @Override public int docID(){
      return doc;
    }
    @Override public int nextDoc(){
      return doc=doc == -1 ? 3000 : NO_MORE_DOCS;
    }
    @Override public int advance(    int target){
      return doc=target <= 3000 ? 3000 : NO_MORE_DOCS;
    }
    @Override public long cost(){
      return 1;
    }
  }
};
  BooleanScorer bs=new BooleanScorer(weight,false,1,Arrays.asList(scorers),null,scorers.length);
  final List<Integer> hits=new ArrayList<Integer>();
  bs.score(new Collector(){
    int docBase;
    @Override public void setScorer(    Scorer scorer){
    }
    @Override public void collect(    int doc){
      hits.add(docBase + doc);
    }
    @Override public void setNextReader(    AtomicReaderContext context){
      docBase=context.docBase;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  assertEquals("should have only 1 hit",1,hits.size());
  assertEquals("hit should have been docID=3000",3000,hits.get(0).intValue());
  ir.close();
  directory.close();
}
