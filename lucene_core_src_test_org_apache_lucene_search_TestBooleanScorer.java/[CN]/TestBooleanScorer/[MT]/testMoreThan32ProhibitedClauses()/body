{
  final Directory d=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),d);
  Document doc=new Document();
  doc.add(new TextField("field","0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33",Field.Store.NO));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new TextField("field","33",Field.Store.NO));
  w.addDocument(doc);
  final IndexReader r=w.getReader();
  w.close();
  final IndexSearcher s=newSearcher(r);
  final BooleanQuery q=new BooleanQuery();
  for (int term=0; term < 33; term++) {
    q.add(new BooleanClause(new TermQuery(new Term("field","" + term)),BooleanClause.Occur.MUST_NOT));
  }
  q.add(new BooleanClause(new TermQuery(new Term("field","33")),BooleanClause.Occur.SHOULD));
  final int[] count=new int[1];
  s.search(q,new SimpleCollector(){
    @Override public void setScorer(    Scorer scorer){
      final Class<?> clazz=scorer instanceof AssertingScorer ? ((AssertingScorer)scorer).getIn().getClass() : scorer.getClass();
      assertEquals("Scorer is implemented by wrong class",FakeScorer.class.getName(),clazz.getName());
    }
    @Override public void collect(    int doc){
      count[0]++;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  assertEquals(1,count[0]);
  r.close();
  d.close();
}
