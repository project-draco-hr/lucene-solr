{
  final NumericDocValues arr=DocValues.getNumeric(readerContext.reader(),field);
  return new LongDocValues(this){
    private long getDocValue(    int doc) throws IOException {
      int arrDocID=arr.docID();
      if (arrDocID < doc) {
        arrDocID=arr.advance(doc);
      }
      if (arrDocID == doc) {
        return arr.longValue();
      }
 else {
        return 0;
      }
    }
    @Override public long longVal(    int doc) throws IOException {
      return getDocValue(doc);
    }
    @Override public boolean exists(    int doc) throws IOException {
      getDocValue(doc);
      return arr.docID() == doc;
    }
    @Override public Object objectVal(    int doc) throws IOException {
      return exists(doc) ? longToObject(getDocValue(doc)) : null;
    }
    @Override public String strVal(    int doc) throws IOException {
      return exists(doc) ? longToString(getDocValue(doc)) : null;
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueDate mval=new MutableValueDate();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc) throws IOException {
          mval.value=getDocValue(doc);
          mval.exists=exists(doc);
        }
      }
;
    }
  }
;
}
