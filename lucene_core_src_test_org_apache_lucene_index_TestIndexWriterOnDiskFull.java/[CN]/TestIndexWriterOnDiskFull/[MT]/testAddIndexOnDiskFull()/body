{
  final String idFormat=TestUtil.getPostingsFormat("id");
  final String contentFormat=TestUtil.getPostingsFormat("content");
  assumeFalse("This test cannot run with Memory codec",idFormat.equals("Memory") || contentFormat.equals("Memory"));
  int START_COUNT=57;
  int NUM_DIR=TEST_NIGHTLY ? 50 : 5;
  int END_COUNT=START_COUNT + NUM_DIR * (TEST_NIGHTLY ? 25 : 5);
  Directory[] dirs=new Directory[NUM_DIR];
  long inputDiskUsage=0;
  for (int i=0; i < NUM_DIR; i++) {
    dirs[i]=newDirectory();
    IndexWriter writer=new IndexWriter(dirs[i],newIndexWriterConfig(new MockAnalyzer(random())));
    for (int j=0; j < 25; j++) {
      addDocWithIndex(writer,25 * i + j);
    }
    writer.close();
    String[] files=dirs[i].listAll();
    for (int j=0; j < files.length; j++) {
      inputDiskUsage+=dirs[i].fileLength(files[j]);
    }
  }
  MockDirectoryWrapper startDir=newMockDirectory();
  IndexWriter writer=new IndexWriter(startDir,newIndexWriterConfig(new MockAnalyzer(random())));
  for (int j=0; j < START_COUNT; j++) {
    addDocWithIndex(writer,j);
  }
  writer.close();
  Term searchTerm=new Term("content","aaa");
  IndexReader reader=DirectoryReader.open(startDir);
  assertEquals("first docFreq",57,reader.docFreq(searchTerm));
  IndexSearcher searcher=newSearcher(reader);
  ScoreDoc[] hits=searcher.search(new TermQuery(searchTerm),null,1000).scoreDocs;
  assertEquals("first number of hits",57,hits.length);
  reader.close();
  long diskUsage=startDir.sizeInBytes();
  long startDiskUsage=0;
  String[] files=startDir.listAll();
  for (int i=0; i < files.length; i++) {
    startDiskUsage+=startDir.fileLength(files[i]);
  }
  for (int iter=0; iter < 3; iter++) {
    if (VERBOSE) {
      System.out.println("TEST: iter=" + iter);
    }
    long diskFree=diskUsage + TestUtil.nextInt(random(),50,200);
    int method=iter;
    boolean success=false;
    boolean done=false;
    String methodName;
    if (0 == method) {
      methodName="addIndexes(Directory[]) + forceMerge(1)";
    }
 else     if (1 == method) {
      methodName="addIndexes(IndexReader[])";
    }
 else {
      methodName="addIndexes(Directory[])";
    }
    while (!done) {
      if (VERBOSE) {
        System.out.println("TEST: cycle...");
      }
      MockDirectoryWrapper dir=new MockDirectoryWrapper(random(),new RAMDirectory(startDir,newIOContext(random())));
      writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy(false)));
      IOException err=null;
      MergeScheduler ms=writer.getConfig().getMergeScheduler();
      for (int x=0; x < 2; x++) {
        if (ms instanceof ConcurrentMergeScheduler)         if (0 == x)         ((ConcurrentMergeScheduler)ms).setSuppressExceptions();
 else         ((ConcurrentMergeScheduler)ms).clearSuppressExceptions();
        double rate=0.05;
        double diskRatio=((double)diskFree) / diskUsage;
        long thisDiskFree;
        String testName=null;
        if (0 == x) {
          dir.setRandomIOExceptionRateOnOpen(random().nextDouble() * 0.01);
          thisDiskFree=diskFree;
          if (diskRatio >= 2.0) {
            rate/=2;
          }
          if (diskRatio >= 4.0) {
            rate/=2;
          }
          if (diskRatio >= 6.0) {
            rate=0.0;
          }
          if (VERBOSE)           testName="disk full test " + methodName + " with disk full at "+ diskFree+ " bytes";
        }
 else {
          dir.setRandomIOExceptionRateOnOpen(0.0);
          thisDiskFree=0;
          rate=0.0;
          if (VERBOSE)           testName="disk full test " + methodName + " with unlimited disk space";
        }
        if (VERBOSE)         System.out.println("\ncycle: " + testName);
        dir.setTrackDiskUsage(true);
        dir.setMaxSizeInBytes(thisDiskFree);
        dir.setRandomIOExceptionRate(rate);
        try {
          if (0 == method) {
            if (VERBOSE) {
              System.out.println("TEST: now addIndexes count=" + dirs.length);
            }
            writer.addIndexes(dirs);
            if (VERBOSE) {
              System.out.println("TEST: now forceMerge");
            }
            writer.forceMerge(1);
          }
 else           if (1 == method) {
            IndexReader readers[]=new IndexReader[dirs.length];
            for (int i=0; i < dirs.length; i++) {
              readers[i]=DirectoryReader.open(dirs[i]);
            }
            try {
              writer.addIndexes(readers);
            }
  finally {
              for (int i=0; i < dirs.length; i++) {
                readers[i].close();
              }
            }
          }
 else {
            writer.addIndexes(dirs);
          }
          success=true;
          if (VERBOSE) {
            System.out.println("  success!");
          }
          if (0 == x) {
            done=true;
          }
        }
 catch (        IOException e) {
          success=false;
          err=e;
          if (VERBOSE) {
            System.out.println("  hit IOException: " + e);
            e.printStackTrace(System.out);
          }
          if (1 == x) {
            e.printStackTrace(System.out);
            fail(methodName + " hit IOException after disk space was freed up");
          }
        }
        TestUtil.syncConcurrentMerges(writer);
        if (VERBOSE) {
          System.out.println("  now test readers");
        }
        dir.setRandomIOExceptionRateOnOpen(0.0);
        try {
          reader=DirectoryReader.open(dir);
        }
 catch (        IOException e) {
          e.printStackTrace(System.out);
          fail(testName + ": exception when creating IndexReader: " + e);
        }
        int result=reader.docFreq(searchTerm);
        if (success) {
          if (result != START_COUNT) {
            fail(testName + ": method did not throw exception but docFreq('aaa') is " + result+ " instead of expected "+ START_COUNT);
          }
        }
 else {
          if (result != START_COUNT && result != END_COUNT) {
            err.printStackTrace(System.out);
            fail(testName + ": method did throw exception but docFreq('aaa') is " + result+ " instead of expected "+ START_COUNT+ " or "+ END_COUNT);
          }
        }
        searcher=newSearcher(reader);
        try {
          hits=searcher.search(new TermQuery(searchTerm),null,END_COUNT).scoreDocs;
        }
 catch (        IOException e) {
          e.printStackTrace(System.out);
          fail(testName + ": exception when searching: " + e);
        }
        int result2=hits.length;
        if (success) {
          if (result2 != result) {
            fail(testName + ": method did not throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ result);
          }
        }
 else {
          if (result2 != result) {
            err.printStackTrace(System.out);
            fail(testName + ": method did throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ result);
          }
        }
        reader.close();
        if (VERBOSE) {
          System.out.println("  count is " + result);
        }
        if (done || result == END_COUNT) {
          break;
        }
      }
      if (VERBOSE) {
        System.out.println("  start disk = " + startDiskUsage + "; input disk = "+ inputDiskUsage+ "; max used = "+ dir.getMaxUsedSizeInBytes());
      }
      if (done) {
        assertTrue("max free Directory space required exceeded 1X the total input index sizes during " + methodName + ": max temp usage = "+ (dir.getMaxUsedSizeInBytes() - startDiskUsage)+ " bytes vs limit="+ (2 * (startDiskUsage + inputDiskUsage))+ "; starting disk usage = "+ startDiskUsage+ " bytes; "+ "input index disk usage = "+ inputDiskUsage+ " bytes",(dir.getMaxUsedSizeInBytes() - startDiskUsage) < 2 * (startDiskUsage + inputDiskUsage));
      }
      dir.setMaxSizeInBytes(0);
      dir.setRandomIOExceptionRate(0.0);
      dir.setRandomIOExceptionRateOnOpen(0.0);
      writer.close();
      TestUtil.syncConcurrentMerges(ms);
      dir.close();
      diskFree+=TEST_NIGHTLY ? TestUtil.nextInt(random(),4000,8000) : TestUtil.nextInt(random(),40000,80000);
    }
  }
  startDir.close();
  for (  Directory dir : dirs)   dir.close();
}
