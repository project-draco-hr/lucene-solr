{
  waitForRecoveriesToFinish(false);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set("name",DEFAULT_COLLECTION);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  String baseUrl=((HttpSolrClient)clients.get(0)).getBaseURL();
  HttpSolrClient delClient=new HttpSolrClient(baseUrl.substring(0,baseUrl.lastIndexOf("/")));
  delClient.request(request);
  delClient.close();
  String testCollectionName="all_in_lir";
  String shardId="shard1";
  createCollection(testCollectionName,1,3,1);
  waitForRecoveriesToFinish(testCollectionName,false);
  cloudClient.setDefaultCollection(testCollectionName);
  Map<String,Object> stateObj=Utils.makeMap();
  stateObj.put(ZkStateReader.STATE_PROP,"down");
  stateObj.put("createdByNodeName","test");
  stateObj.put("createdByCoreNodeName","test");
  byte[] znodeData=Utils.toJSON(stateObj);
  SolrZkClient zkClient=cloudClient.getZkStateReader().getZkClient();
  zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node1",znodeData,true);
  zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node2",znodeData,true);
  zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node3",znodeData,true);
  SolrInputDocument doc=new SolrInputDocument();
  addFields(doc,"id","1");
  SolrInputDocument doc2=new SolrInputDocument();
  addFields(doc2,"id","2");
  cloudClient.add(doc);
  cloudClient.add(doc2);
  cloudClient.commit();
  assertEquals("We just added 2 docs, we should be able to find them",2,cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  HttpSolrClient client=(HttpSolrClient)clients.get(random().nextInt(clients.size()));
  client.setBaseURL(client.getBaseURL().substring(0,client.getBaseURL().lastIndexOf("/")) + "/" + testCollectionName);
  params=new ModifiableSolrParams();
  params.set(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM,DistribPhase.FROMLEADER.toString());
  try {
    for (int i=0; i < 101; i++) {
      add(client,params,sdoc("id",3 + i,"_version_",Long.MAX_VALUE - 1 - i));
    }
  }
 catch (  RemoteSolrException e) {
    if (e.getMessage().contains("conflict")) {
      for (int i=0; i < 101; i++) {
        add(client,params,sdoc("id",3 + i));
      }
    }
  }
  client.commit();
  for (  JettySolrRunner jetty : jettys) {
    ChaosMonkey.stop(jetty);
  }
  ChaosMonkey.stop(controlJetty);
  Thread.sleep(10000);
  log.info("Start back up");
  for (  JettySolrRunner jetty : jettys) {
    ChaosMonkey.start(jetty);
  }
  ChaosMonkey.start(controlJetty);
  waitForRecoveriesToFinish(testCollectionName,true);
  try {
    zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node1",znodeData,true);
  }
 catch (  NodeExistsException e) {
  }
  try {
    zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node2",znodeData,true);
  }
 catch (  NodeExistsException e) {
  }
  try {
    zkClient.makePath("/collections/" + testCollectionName + "/leader_initiated_recovery/"+ shardId+ "/core_node3",znodeData,true);
  }
 catch (  NodeExistsException e) {
  }
  for (  JettySolrRunner jetty : jettys) {
    chaosMonkey.expireSession(jetty);
  }
  Thread.sleep(2000);
  waitForRecoveriesToFinish(testCollectionName,true);
}
