{
  this.maxInterval=maxInterval;
  a.determinize();
  points=a.getStartPoints();
  initial=a.initial.number;
  final State[] states=a.getNumberedStates();
  size=states.length;
  accept=new boolean[size];
  transitions=new int[size * points.length];
  for (int n=0; n < size * points.length; n++)   transitions[n]=-1;
  for (  State s : states) {
    int n=s.number;
    accept[n]=s.accept;
    for (int c=0; c < points.length; c++) {
      State q=s.step(points[c]);
      if (q != null)       transitions[n * points.length + c]=q.number;
    }
  }
  if (tableize) {
    classmap=new int[maxInterval + 1];
    int i=0;
    for (int j=0; j <= maxInterval; j++) {
      if (i + 1 < points.length && j == points[i + 1])       i++;
      classmap[j]=i;
    }
  }
 else {
    classmap=null;
  }
  this.automaton=a;
}
