{
  final int[] values=new int[reader.maxDoc()];
  for (int i=0; i < reader.maxDoc(); i++) {
    values[i]=Integer.valueOf(reader.document(i).get(ID_FIELD));
  }
  final Sorter.DocComparator comparator=new Sorter.DocComparator(){
    @Override public int compare(    int docID1,    int docID2){
      final int v1=values[docID1];
      final int v2=values[docID2];
      return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;
    }
  }
;
  final Sorter.DocMap docMap=Sorter.sort(reader.maxDoc(),comparator);
  sortedValues=new Integer[reader.maxDoc()];
  for (int i=0; i < reader.maxDoc(); ++i) {
    sortedValues[docMap.oldToNew(i)]=values[i];
  }
  if (VERBOSE) {
    System.out.println("docMap: " + docMap);
    System.out.println("sortedValues: " + Arrays.toString(sortedValues));
  }
  reader=SortingAtomicReader.wrap(reader,new Sorter(){
    @Override public Sorter.DocMap sort(    AtomicReader reader) throws IOException {
      return docMap;
    }
  }
);
  if (VERBOSE) {
    System.out.print("mapped-deleted-docs: ");
    Bits mappedLiveDocs=reader.getLiveDocs();
    for (int i=0; i < mappedLiveDocs.length(); i++) {
      if (!mappedLiveDocs.get(i)) {
        System.out.print(i + " ");
      }
    }
    System.out.println();
  }
  _TestUtil.checkReader(reader);
}
