{
  Integer[] values=new Integer[reader.maxDoc()];
  int[] docs=new int[reader.maxDoc()];
  for (int i=0; i < reader.maxDoc(); i++) {
    docs[i]=i;
    values[i]=Integer.valueOf(reader.document(i).get(ID_FIELD));
  }
  final int[] oldToNew=Sorter.compute(docs,Collections.unmodifiableList(Arrays.asList(values)));
  sortedValues=new Integer[reader.maxDoc()];
  for (int i=0; i < reader.maxDoc(); ++i) {
    sortedValues[oldToNew[i]]=values[i];
  }
  if (VERBOSE) {
    System.out.println("oldToNew: " + Arrays.toString(oldToNew));
    System.out.println("sortedValues: " + Arrays.toString(sortedValues));
  }
  reader=new SortingAtomicReader(reader,new Sorter(){
    @Override public int[] oldToNew(    AtomicReader reader) throws IOException {
      return oldToNew;
    }
  }
);
  if (VERBOSE) {
    System.out.print("mapped-deleted-docs: ");
    Bits mappedLiveDocs=reader.getLiveDocs();
    for (int i=0; i < mappedLiveDocs.length(); i++) {
      if (!mappedLiveDocs.get(i)) {
        System.out.print(i + " ");
      }
    }
    System.out.println();
  }
  _TestUtil.checkReader(reader);
}
