{
  final List<LeafReaderContext> leaves=r.leaves();
  final int size=leaves.size();
  if (size == 0) {
    return null;
  }
 else   if (size == 1) {
    return leaves.get(0).reader().getNormValues(field);
  }
  FieldInfo fi=MultiFields.getMergedFieldInfos(r).fieldInfo(field);
  if (fi == null || fi.hasNorms() == false) {
    return null;
  }
  return new NumericDocValues(){
    private int nextLeaf;
    private NumericDocValues currentValues;
    private LeafReaderContext currentLeaf;
    private int docID=-1;
    @Override public int nextDoc() throws IOException {
      while (true) {
        if (currentValues == null) {
          if (nextLeaf == leaves.size()) {
            docID=NO_MORE_DOCS;
            return docID;
          }
          currentLeaf=leaves.get(nextLeaf);
          currentValues=currentLeaf.reader().getNormValues(field);
          nextLeaf++;
          continue;
        }
        int newDocID=currentValues.nextDoc();
        if (newDocID == NO_MORE_DOCS) {
          currentValues=null;
          continue;
        }
 else {
          docID=currentLeaf.docBase + newDocID;
          return docID;
        }
      }
    }
    @Override public int docID(){
      return docID;
    }
    @Override public int advance(    int targetDocID) throws IOException {
      if (targetDocID <= docID) {
        throw new IllegalArgumentException("can only advance beyond current document: on docID=" + docID + " but targetDocID="+ targetDocID);
      }
      int readerIndex=ReaderUtil.subIndex(targetDocID,leaves);
      if (readerIndex >= nextLeaf) {
        if (readerIndex == leaves.size()) {
          currentValues=null;
          docID=NO_MORE_DOCS;
          return docID;
        }
        currentLeaf=leaves.get(readerIndex);
        currentValues=currentLeaf.reader().getNormValues(field);
        if (currentValues == null) {
          return nextDoc();
        }
        nextLeaf=readerIndex + 1;
      }
      int newDocID=currentValues.advance(targetDocID - currentLeaf.docBase);
      if (newDocID == NO_MORE_DOCS) {
        currentValues=null;
        return nextDoc();
      }
 else {
        docID=currentLeaf.docBase + newDocID;
        return docID;
      }
    }
    @Override public long longValue() throws IOException {
      return currentValues.longValue();
    }
    @Override public long cost(){
      return 0;
    }
  }
;
}
