{
  final List<LeafReaderContext> leaves=r.leaves();
  final int size=leaves.size();
  if (size == 0) {
    return null;
  }
 else   if (size == 1) {
    return leaves.get(0).reader().getSortedNumericDocValues(field);
  }
  boolean anyReal=false;
  final SortedNumericDocValues[] values=new SortedNumericDocValues[size];
  final int[] starts=new int[size + 1];
  long totalCost=0;
  for (int i=0; i < size; i++) {
    LeafReaderContext context=leaves.get(i);
    SortedNumericDocValues v=context.reader().getSortedNumericDocValues(field);
    if (v == null) {
      v=DocValues.emptySortedNumeric(context.reader().maxDoc());
    }
 else {
      anyReal=true;
    }
    values[i]=v;
    starts[i]=context.docBase;
    totalCost+=v.cost();
  }
  starts[size]=r.maxDoc();
  if (anyReal == false) {
    return null;
  }
  final long finalTotalCost=totalCost;
  return new SortedNumericDocValues(){
    private int nextLeaf;
    private SortedNumericDocValues currentValues;
    private LeafReaderContext currentLeaf;
    private int docID=-1;
    @Override public int nextDoc() throws IOException {
      while (true) {
        if (currentValues == null) {
          if (nextLeaf == leaves.size()) {
            docID=NO_MORE_DOCS;
            return docID;
          }
          currentLeaf=leaves.get(nextLeaf);
          currentValues=values[nextLeaf];
          nextLeaf++;
        }
        int newDocID=currentValues.nextDoc();
        if (newDocID == NO_MORE_DOCS) {
          currentValues=null;
          continue;
        }
 else {
          docID=currentLeaf.docBase + newDocID;
          return docID;
        }
      }
    }
    @Override public int docID(){
      return docID;
    }
    @Override public int advance(    int targetDocID) throws IOException {
      if (targetDocID <= docID) {
        throw new IllegalArgumentException("can only advance beyond current document: on docID=" + docID + " but targetDocID="+ targetDocID);
      }
      int readerIndex=ReaderUtil.subIndex(targetDocID,leaves);
      if (readerIndex >= nextLeaf) {
        if (readerIndex == leaves.size()) {
          currentValues=null;
          docID=NO_MORE_DOCS;
          return docID;
        }
        currentLeaf=leaves.get(readerIndex);
        currentValues=values[readerIndex];
        nextLeaf=readerIndex + 1;
      }
      int newDocID=currentValues.advance(targetDocID - currentLeaf.docBase);
      if (newDocID == NO_MORE_DOCS) {
        currentValues=null;
        return nextDoc();
      }
 else {
        docID=currentLeaf.docBase + newDocID;
        return docID;
      }
    }
    @Override public long cost(){
      return finalTotalCost;
    }
    @Override public int docValueCount(){
      return currentValues.docValueCount();
    }
    @Override public long nextValue() throws IOException {
      return currentValues.nextValue();
    }
  }
;
}
