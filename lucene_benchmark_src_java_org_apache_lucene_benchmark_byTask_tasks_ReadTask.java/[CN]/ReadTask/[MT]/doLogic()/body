{
  int res=0;
  IndexSearcher searcher=getRunData().getIndexSearcher();
  IndexReader reader;
  final boolean closeSearcher;
  if (searcher == null) {
    Directory dir=getRunData().getDirectory();
    reader=DirectoryReader.open(dir);
    searcher=new IndexSearcher(reader);
    closeSearcher=true;
  }
 else {
    reader=searcher.getIndexReader();
    closeSearcher=false;
  }
  if (withWarm()) {
    StoredDocument doc=null;
    Bits liveDocs=MultiFields.getLiveDocs(reader);
    for (int m=0; m < reader.maxDoc(); m++) {
      if (null == liveDocs || liveDocs.get(m)) {
        doc=reader.document(m);
        res+=(doc == null ? 0 : 1);
      }
    }
  }
  if (withSearch()) {
    res++;
    Query q=queryMaker.makeQuery();
    Sort sort=getSort();
    TopDocs hits=null;
    final int numHits=numHits();
    if (numHits > 0) {
      if (withCollector() == false) {
        if (sort != null) {
          TopFieldCollector collector=TopFieldCollector.create(sort,numHits,true,withScore(),withMaxScore());
          searcher.search(q,collector);
          hits=collector.topDocs();
        }
 else {
          hits=searcher.search(q,numHits);
        }
      }
 else {
        Collector collector=createCollector();
        searcher.search(q,collector);
      }
      final String printHitsField=getRunData().getConfig().get("print.hits.field",null);
      if (hits != null && printHitsField != null && printHitsField.length() > 0) {
        System.out.println("totalHits = " + hits.totalHits);
        System.out.println("maxDoc()  = " + reader.maxDoc());
        System.out.println("numDocs() = " + reader.numDocs());
        for (int i=0; i < hits.scoreDocs.length; i++) {
          final int docID=hits.scoreDocs[i].doc;
          final StoredDocument doc=reader.document(docID);
          System.out.println("  " + i + ": doc="+ docID+ " score="+ hits.scoreDocs[i].score+ " "+ printHitsField+ " ="+ doc.get(printHitsField));
        }
      }
      if (withTraverse()) {
        final ScoreDoc[] scoreDocs=hits.scoreDocs;
        int traversalSize=Math.min(scoreDocs.length,traversalSize());
        if (traversalSize > 0) {
          boolean retrieve=withRetrieve();
          int numHighlight=Math.min(numToHighlight(),scoreDocs.length);
          Analyzer analyzer=getRunData().getAnalyzer();
          BenchmarkHighlighter highlighter=null;
          if (numHighlight > 0) {
            highlighter=getBenchmarkHighlighter(q);
          }
          for (int m=0; m < traversalSize; m++) {
            int id=scoreDocs[m].doc;
            res++;
            if (retrieve) {
              StoredDocument document=retrieveDoc(reader,id);
              res+=document != null ? 1 : 0;
              if (numHighlight > 0 && m < numHighlight) {
                Collection<String> fieldsToHighlight=getFieldsToHighlight(document);
                for (                final String field : fieldsToHighlight) {
                  String text=document.get(field);
                  res+=highlighter.doHighlight(reader,id,field,document,analyzer,text);
                }
              }
            }
          }
        }
      }
    }
  }
  if (closeSearcher) {
    reader.close();
  }
 else {
    reader.decRef();
  }
  return res;
}
