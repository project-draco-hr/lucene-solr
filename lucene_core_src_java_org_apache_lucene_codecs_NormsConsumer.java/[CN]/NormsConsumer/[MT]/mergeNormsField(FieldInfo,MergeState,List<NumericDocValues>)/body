{
  addNormsField(fieldInfo,new Iterable<Number>(){
    @Override public Iterator<Number> iterator(){
      return new Iterator<Number>(){
        int readerUpto=-1;
        int docIDUpto;
        long nextValue;
        AtomicReader currentReader;
        NumericDocValues currentValues;
        Bits currentLiveDocs;
        boolean nextIsSet;
        @Override public boolean hasNext(){
          return nextIsSet || setNext();
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        @Override public Number next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          assert nextIsSet;
          nextIsSet=false;
          return nextValue;
        }
        private boolean setNext(){
          while (true) {
            if (readerUpto == toMerge.size()) {
              return false;
            }
            if (currentReader == null || docIDUpto == currentReader.maxDoc()) {
              readerUpto++;
              if (readerUpto < toMerge.size()) {
                currentReader=mergeState.readers.get(readerUpto);
                currentValues=toMerge.get(readerUpto);
                currentLiveDocs=currentReader.getLiveDocs();
              }
              docIDUpto=0;
              continue;
            }
            if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {
              nextIsSet=true;
              nextValue=currentValues.get(docIDUpto);
              docIDUpto++;
              return true;
            }
            docIDUpto++;
          }
        }
      }
;
    }
  }
);
}
