{
  final String fileName=IndexFileNames.segmentFileName(segmentName,"",FIELD_INFOS_EXTENSION);
  IndexInput input=directory.openInput(fileName,iocontext);
  try {
    final int format=input.readVInt();
    if (format > FORMAT_MINIMUM) {
      throw new IndexFormatTooOldException(input,format,FORMAT_MINIMUM,FORMAT_CURRENT);
    }
    if (format < FORMAT_CURRENT) {
      throw new IndexFormatTooNewException(input,format,FORMAT_MINIMUM,FORMAT_CURRENT);
    }
    final int size=input.readVInt();
    FieldInfo infos[]=new FieldInfo[size];
    for (int i=0; i < size; i++) {
      String name=input.readString();
      final int fieldNumber=i;
      byte bits=input.readByte();
      boolean isIndexed=(bits & IS_INDEXED) != 0;
      boolean storeTermVector=(bits & STORE_TERMVECTOR) != 0;
      boolean omitNorms=(bits & OMIT_NORMS) != 0;
      boolean storePayloads=(bits & STORE_PAYLOADS) != 0;
      final IndexOptions indexOptions;
      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {
        indexOptions=IndexOptions.DOCS_ONLY;
      }
 else       if ((bits & OMIT_POSITIONS) != 0) {
        if (format <= FORMAT_OMIT_POSITIONS) {
          indexOptions=IndexOptions.DOCS_AND_FREQS;
        }
 else {
          throw new CorruptIndexException("Corrupt fieldinfos, OMIT_POSITIONS set but format=" + format + " (resource: "+ input+ ")");
        }
      }
 else {
        indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      }
      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {
        storePayloads=false;
      }
      infos[i]=new FieldInfo(name,isIndexed,fieldNumber,storeTermVector,omitNorms,storePayloads,indexOptions,null,isIndexed && !omitNorms ? Type.FIXED_INTS_8 : null);
    }
    if (input.getFilePointer() != input.length()) {
      throw new CorruptIndexException("did not read all bytes from file \"" + fileName + "\": read "+ input.getFilePointer()+ " vs size "+ input.length()+ " (resource: "+ input+ ")");
    }
    return new FieldInfos(infos);
  }
  finally {
    input.close();
  }
}
