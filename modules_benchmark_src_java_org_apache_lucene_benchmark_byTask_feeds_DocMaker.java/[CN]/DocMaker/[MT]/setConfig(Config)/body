{
  this.config=config;
  try {
    String sourceClass=config.get("content.source","org.apache.lucene.benchmark.byTask.feeds.SingleDocSource");
    source=Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();
    source.setConfig(config);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  boolean stored=config.get("doc.stored",false);
  boolean bodyStored=config.get("doc.body.stored",stored);
  boolean tokenized=config.get("doc.tokenized",true);
  boolean bodyTokenized=config.get("doc.body.tokenized",tokenized);
  boolean norms=config.get("doc.tokenized.norms",false);
  boolean bodyNorms=config.get("doc.body.tokenized.norms",true);
  boolean termVec=config.get("doc.term.vector",false);
  boolean termVecPositions=config.get("doc.term.vector.positions",false);
  boolean termVecOffsets=config.get("doc.term.vector.offsets",false);
  valType.setStored(stored);
  bodyValType.setStored(bodyStored);
  valType.setTokenized(tokenized);
  valType.setOmitNorms(!norms);
  bodyValType.setTokenized(bodyTokenized);
  bodyValType.setOmitNorms(!bodyNorms);
  valType.setStoreTermVectors(termVec);
  valType.setStoreTermVectorPositions(termVecPositions);
  valType.setStoreTermVectorOffsets(termVecOffsets);
  bodyValType.setStoreTermVectors(termVec);
  bodyValType.setStoreTermVectorPositions(termVecPositions);
  bodyValType.setStoreTermVectorOffsets(termVecOffsets);
  storeBytes=config.get("doc.store.body.bytes",false);
  reuseFields=config.get("doc.reuse.fields",true);
  docState=new ThreadLocal<DocState>();
  indexProperties=config.get("doc.index.props",false);
  updateDocIDLimit=config.get("doc.random.id.limit",-1);
  if (updateDocIDLimit != -1) {
    r=new Random(179);
  }
}
