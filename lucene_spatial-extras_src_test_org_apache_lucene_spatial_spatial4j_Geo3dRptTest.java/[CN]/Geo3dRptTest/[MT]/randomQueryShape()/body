{
  final int shapeType=random().nextInt(4);
switch (shapeType) {
case 0:
{
      final int vertexCount=random().nextInt(3) + 3;
      while (true) {
        final List<GeoPoint> geoPoints=new ArrayList<>();
        while (geoPoints.size() < vertexCount) {
          final Point point=randomPoint();
          final GeoPoint gPt=new GeoPoint(PlanetModel.SPHERE,point.getY() * DEGREES_TO_RADIANS,point.getX() * DEGREES_TO_RADIANS);
          geoPoints.add(gPt);
        }
        final int convexPointIndex=random().nextInt(vertexCount);
        try {
          final GeoShape shape=GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,geoPoints);
          if (shape == null) {
            continue;
          }
          return new Geo3dShape(shape,ctx);
        }
 catch (        IllegalArgumentException e) {
          continue;
        }
      }
    }
case 1:
{
    while (true) {
      final int circleRadius=random().nextInt(179) + 1;
      final Point point=randomPoint();
      try {
        final GeoShape shape=GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,point.getY() * DEGREES_TO_RADIANS,point.getX() * DEGREES_TO_RADIANS,circleRadius * DEGREES_TO_RADIANS);
        return new Geo3dShape(shape,ctx);
      }
 catch (      IllegalArgumentException e) {
        continue;
      }
    }
  }
case 2:
{
  while (true) {
    Point ulhcPoint=randomPoint();
    Point lrhcPoint=randomPoint();
    if (ulhcPoint.getY() < lrhcPoint.getY()) {
      Point temp=ulhcPoint;
      ulhcPoint=lrhcPoint;
      lrhcPoint=temp;
    }
    try {
      final GeoShape shape=GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE,ulhcPoint.getY() * DEGREES_TO_RADIANS,lrhcPoint.getY() * DEGREES_TO_RADIANS,ulhcPoint.getX() * DEGREES_TO_RADIANS,lrhcPoint.getX() * DEGREES_TO_RADIANS);
      return new Geo3dShape(shape,ctx);
    }
 catch (    IllegalArgumentException e) {
      continue;
    }
  }
}
case 3:
{
final int pointCount=random().nextInt(5) + 1;
final double width=(random().nextInt(89) + 1) * DEGREES_TO_RADIANS;
final GeoPoint[] points=new GeoPoint[pointCount];
while (true) {
  for (int i=0; i < pointCount; i++) {
    final Point nextPoint=randomPoint();
    points[i]=new GeoPoint(PlanetModel.SPHERE,nextPoint.getY() * DEGREES_TO_RADIANS,nextPoint.getX() * DEGREES_TO_RADIANS);
  }
  try {
    final GeoShape path=GeoPathFactory.makeGeoPath(PlanetModel.SPHERE,width,points);
    return new Geo3dShape(path,ctx);
  }
 catch (  IllegalArgumentException e) {
    continue;
  }
}
}
default :
throw new IllegalStateException("Unexpected shape type");
}
}
