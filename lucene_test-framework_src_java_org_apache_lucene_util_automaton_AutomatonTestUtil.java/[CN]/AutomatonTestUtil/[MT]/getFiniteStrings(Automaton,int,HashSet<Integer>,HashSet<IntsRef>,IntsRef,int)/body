{
  pathstates.add(s);
  Transition t=new Transition();
  int count=a.initTransition(s,t);
  for (int i=0; i < count; i++) {
    a.getNextTransition(t);
    if (pathstates.contains(t.dest)) {
      return false;
    }
    for (int n=t.min; n <= t.max; n++) {
      path.grow(path.length + 1);
      path.ints[path.length]=n;
      path.length++;
      if (a.isAccept(t.dest)) {
        strings.add(IntsRef.deepCopyOf(path));
        if (limit >= 0 && strings.size() > limit) {
          return false;
        }
      }
      if (!getFiniteStrings(a,t.dest,pathstates,strings,path,limit)) {
        return false;
      }
      path.length--;
    }
  }
  pathstates.remove(s);
  return true;
}
