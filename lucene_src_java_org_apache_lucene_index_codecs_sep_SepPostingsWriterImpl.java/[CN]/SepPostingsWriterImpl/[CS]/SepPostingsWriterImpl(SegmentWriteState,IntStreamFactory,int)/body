{
  freqOut=null;
  freqIndex=null;
  posOut=null;
  posIndex=null;
  payloadOut=null;
  boolean success=false;
  try {
    this.skipInterval=skipInterval;
    this.skipMinimum=skipInterval;
    final String docFileName=IndexFileNames.segmentFileName(state.segmentName,state.codecIdAsString(),DOC_EXTENSION);
    docOut=factory.createOutput(state.directory,docFileName);
    docIndex=docOut.index();
    if (state.fieldInfos.hasProx()) {
      final String frqFileName=IndexFileNames.segmentFileName(state.segmentName,state.codecIdAsString(),FREQ_EXTENSION);
      freqOut=factory.createOutput(state.directory,frqFileName);
      freqIndex=freqOut.index();
      final String posFileName=IndexFileNames.segmentFileName(state.segmentName,state.codecIdAsString(),POS_EXTENSION);
      posOut=factory.createOutput(state.directory,posFileName);
      posIndex=posOut.index();
      final String payloadFileName=IndexFileNames.segmentFileName(state.segmentName,state.codecIdAsString(),PAYLOAD_EXTENSION);
      payloadOut=state.directory.createOutput(payloadFileName);
    }
    final String skipFileName=IndexFileNames.segmentFileName(state.segmentName,state.codecIdAsString(),SKIP_EXTENSION);
    skipOut=state.directory.createOutput(skipFileName);
    totalNumDocs=state.numDocs;
    skipListWriter=new SepSkipListWriter(skipInterval,maxSkipLevels,state.numDocs,freqOut,docOut,posOut,payloadOut);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeSafely(true,docOut,skipOut,freqOut,posOut,payloadOut);
    }
  }
}
