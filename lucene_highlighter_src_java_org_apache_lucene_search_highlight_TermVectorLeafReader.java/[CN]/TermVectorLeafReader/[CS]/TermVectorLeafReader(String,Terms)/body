{
  fields=new Fields(){
    @Override public Iterator<String> iterator(){
      return Collections.singletonList(field).iterator();
    }
    @Override public Terms terms(    String fld) throws IOException {
      if (!field.equals(fld)) {
        return null;
      }
      return terms;
    }
    @Override public int size(){
      return 1;
    }
  }
;
  IndexOptions indexOptions;
  if (!terms.hasFreqs()) {
    indexOptions=IndexOptions.DOCS;
  }
 else   if (!terms.hasPositions()) {
    indexOptions=IndexOptions.DOCS_AND_FREQS;
  }
 else   if (!terms.hasOffsets()) {
    indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
  }
 else {
    indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;
  }
  FieldInfo fieldInfo=new FieldInfo(field,0,true,true,terms.hasPayloads(),indexOptions,DocValuesType.NONE,-1,null);
  fieldInfos=new FieldInfos(new FieldInfo[]{fieldInfo});
}
