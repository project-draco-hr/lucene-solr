{
  final String xpathPrefix="//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/";
  final SolrParams reusedParams=params(SpellCheckComponent.COMPONENT_NAME,"true",SpellCheckComponent.SPELLCHECK_DICT,"direct",SpellingParams.SPELLCHECK_COUNT,"1",SpellingParams.SPELLCHECK_COLLATE,"true",SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES,"1",SpellingParams.SPELLCHECK_MAX_COLLATIONS,"1",SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS,"true","qt","spellCheckCompRH");
  assertQ(req(reusedParams,CommonParams.Q,"teststop:metnoia"),xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'",xpathPrefix + "int[@name='hits']=6");
  for (  String val : new String[]{"0","30","100","10000"}) {
    assertQ(req(reusedParams,CommonParams.Q,"teststop:metnoia",SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS,val),xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'",xpathPrefix + "int[@name='hits']=6");
  }
  final int iters=atLeast(10);
  for (int iter=0; iter < iters; iter++) {
    final int val=TestUtil.nextInt(random(),1,17);
    assertQ(req(reusedParams,CommonParams.Q,"teststop:metnoia",SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS,"" + val),xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'",xpathPrefix + "int[@name='hits' and . <= 17 and 0 < .]");
  }
  for (int val=5; val <= 20; val++) {
    assertQ(req(reusedParams,CommonParams.Q,"teststop:everother",SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS,"" + val),xpathPrefix + "str[@name='collationQuery']='teststop:everyother'",xpathPrefix + "int[@name='hits' and 6 <= . and . <= 10]");
  }
}
