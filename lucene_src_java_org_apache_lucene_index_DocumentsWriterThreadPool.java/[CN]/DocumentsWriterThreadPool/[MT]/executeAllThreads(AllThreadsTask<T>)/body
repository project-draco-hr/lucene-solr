{
  T result=null;
  lock.lock();
  try {
    try {
      while (globalLock) {
        threadStateAvailable.await();
      }
    }
 catch (    InterruptedException ie) {
      throw new ThreadInterruptedException(ie);
    }
    globalLock=true;
    pauseAllThreads();
  }
  finally {
    lock.unlock();
  }
  try {
    final ThreadState[] localAllThreads=allThreadStates;
    result=task.process(new Iterator<DocumentsWriterPerThread>(){
      int i=0;
      @Override public boolean hasNext(){
        return i < localAllThreads.length;
      }
      @Override public DocumentsWriterPerThread next(){
        return localAllThreads[i++].perThread;
      }
      @Override public void remove(){
        throw new UnsupportedOperationException("remove() not supported.");
      }
    }
);
    return result;
  }
  finally {
    lock.lock();
    try {
      try {
        if (task.doClearThreadBindings()) {
          clearAllThreadBindings();
        }
      }
  finally {
        globalLock=false;
        resumeAllThreads();
        threadStateAvailable.signalAll();
      }
    }
  finally {
      lock.unlock();
    }
  }
}
