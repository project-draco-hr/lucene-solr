{
  waitForThingsToLevelOut(15);
  final String splitKey="a!";
  final int[] splitKeyCount=new int[1];
  for (int id=0; id < 26 * 3; id++) {
    String shardKey="" + (char)('a' + (id % 26));
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id",shardKey + "!" + id);
    doc.addField("n_ti",id);
    cloudClient.add(doc);
    if (splitKey.equals(shardKey + "!"))     splitKeyCount[0]++;
  }
  assertTrue(splitKeyCount[0] > 0);
  String targetCollection="migrate_routekey_test_targetCollection";
  HashMap<String,List<Integer>> collectionInfos=new HashMap<String,List<Integer>>();
  CloudSolrServer client=null;
  try {
    client=createCloudClient(null);
    Map<String,Object> props=ZkNodeProps.makeMap(REPLICATION_FACTOR,1,MAX_SHARDS_PER_NODE,5,NUM_SLICES,1);
    createCollection(collectionInfos,targetCollection,props,client);
  }
  finally {
    if (client != null)     client.shutdown();
  }
  List<Integer> list=collectionInfos.get(targetCollection);
  checkForCollection(targetCollection,list,null);
  waitForRecoveriesToFinish(targetCollection,false);
class Indexer extends Thread {
    final int seconds;
    public Indexer(    int seconds){
      this.seconds=seconds;
    }
    @Override public void run(){
      long start=System.currentTimeMillis();
      for (int id=26 * 3; id < 500 && System.currentTimeMillis() - start <= seconds * 1000; id++) {
        String shardKey="" + (char)('a' + (id % 26));
        SolrInputDocument doc=new SolrInputDocument();
        doc.addField("id",shardKey + "!" + id);
        doc.addField("n_ti",id);
        try {
          cloudClient.add(doc);
          if (splitKey.equals(shardKey + "!"))           splitKeyCount[0]++;
        }
 catch (        Exception e) {
          log.error("Exception while adding document id: " + doc.getField("id"),e);
        }
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
      }
    }
  }
  Thread indexer=new Indexer(30);
  indexer.start();
  String url=CustomCollectionTest.getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(),targetCollection);
  HttpSolrServer collectionClient=new HttpSolrServer(url);
  SolrQuery solrQuery=new SolrQuery("*:*");
  assertEquals("DocCount on target collection does not match",0,collectionClient.query(solrQuery).getResults().getNumFound());
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionParams.CollectionAction.MIGRATE.toString());
  params.set("collection",AbstractDistribZkTestBase.DEFAULT_COLLECTION);
  params.set("target.collection",targetCollection);
  params.set("split.key",splitKey);
  params.set("forward.timeout",45);
  SolrRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  String baseUrl=((HttpSolrServer)shardToJetty.get(SHARD1).get(0).client.solrClient).getBaseURL();
  baseUrl=baseUrl.substring(0,baseUrl.length() - "collection1".length());
  HttpSolrServer baseServer=new HttpSolrServer(baseUrl);
  baseServer.setConnectionTimeout(15000);
  baseServer.setSoTimeout(60000 * 5);
  baseServer.request(request);
  baseServer.shutdown();
  long finishTime=System.currentTimeMillis();
  indexer.join();
  try {
    cloudClient.deleteById("a!104");
    splitKeyCount[0]--;
  }
 catch (  Exception e) {
    log.warn("Error deleting document a!104",e);
  }
  cloudClient.commit();
  collectionClient.commit();
  getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);
  ClusterState state=getCommonCloudSolrServer().getZkStateReader().getClusterState();
  Slice slice=state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD2);
  assertNotNull("Routing rule map is null",slice.getRoutingRules());
  assertFalse("Routing rule map is empty",slice.getRoutingRules().isEmpty());
  assertNotNull("No routing rule exists for route key: " + splitKey,slice.getRoutingRules().get(splitKey));
  boolean ruleRemoved=false;
  while (System.currentTimeMillis() - finishTime < 60000) {
    getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);
    state=getCommonCloudSolrServer().getZkStateReader().getClusterState();
    slice=state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD2);
    Map<String,RoutingRule> routingRules=slice.getRoutingRules();
    if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {
      ruleRemoved=true;
      break;
    }
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id",splitKey + System.currentTimeMillis());
    cloudClient.add(doc);
    Thread.sleep(1000);
  }
  assertTrue("Routing rule was not expired",ruleRemoved);
  solrQuery=new SolrQuery("*:*").setRows(1000);
  QueryResponse response=collectionClient.query(solrQuery);
  log.info("Response from target collection: " + response);
  assertEquals("DocCount on shard1_0 does not match",splitKeyCount[0],response.getResults().getNumFound());
  printLayout();
}
