{
  del("*:*");
  commit();
  assertTrue(cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound() == 0);
  final String splitKey="a";
  final int BIT_SEP=1;
  final int[] splitKeyCount=new int[1];
  for (int id=0; id < 26 * 3; id++) {
    String shardKey="" + (char)('a' + (id % 26));
    String key=shardKey;
    if (splitKey.equals(shardKey)) {
      key+="/" + BIT_SEP;
    }
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id",key + "!" + id);
    doc.addField("n_ti",id);
    cloudClient.add(doc);
    if (splitKey.equals(shardKey))     splitKeyCount[0]++;
  }
  assertTrue(splitKeyCount[0] > 0);
  String targetCollection="migrate_multipleshardtest_targetCollection";
  createCollection(targetCollection);
  Indexer indexer=new Indexer(cloudClient,splitKey,1,30);
  indexer.start();
  String url=CustomCollectionTest.getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(),targetCollection);
  HttpSolrClient collectionClient=new HttpSolrClient(url);
  SolrQuery solrQuery=new SolrQuery("*:*");
  assertEquals("DocCount on target collection does not match",0,collectionClient.query(solrQuery).getResults().getNumFound());
  invokeMigrateApi(AbstractDistribZkTestBase.DEFAULT_COLLECTION,splitKey + "/" + BIT_SEP+ "!",targetCollection);
  long finishTime=System.currentTimeMillis();
  indexer.join();
  splitKeyCount[0]+=indexer.getSplitKeyCount();
  try {
    cloudClient.deleteById("a/" + BIT_SEP + "!104");
    splitKeyCount[0]--;
  }
 catch (  Exception e) {
    log.warn("Error deleting document a/" + BIT_SEP + "!104",e);
  }
  cloudClient.commit();
  collectionClient.commit();
  solrQuery=new SolrQuery("*:*").setRows(1000);
  QueryResponse response=collectionClient.query(solrQuery);
  log.info("Response from target collection: " + response);
  assertEquals("DocCount on target collection does not match",splitKeyCount[0],response.getResults().getNumFound());
  collectionClient.shutdown();
  collectionClient=null;
  getCommonCloudSolrClient().getZkStateReader().updateClusterState(true);
  ClusterState state=getCommonCloudSolrClient().getZkStateReader().getClusterState();
  Slice slice=state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION,SHARD2);
  assertNotNull("Routing rule map is null",slice.getRoutingRules());
  assertFalse("Routing rule map is empty",slice.getRoutingRules().isEmpty());
  assertNotNull("No routing rule exists for route key: " + splitKey,slice.getRoutingRules().get(splitKey + "!"));
  boolean ruleRemoved=waitForRuleToExpire(splitKey,finishTime);
  assertTrue("Routing rule was not expired",ruleRemoved);
}
