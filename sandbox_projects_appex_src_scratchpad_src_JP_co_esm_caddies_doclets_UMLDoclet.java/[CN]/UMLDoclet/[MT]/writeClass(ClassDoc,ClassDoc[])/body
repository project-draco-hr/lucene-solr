{
  ClassDoc[] ins=thiscls.innerClasses();
  List inners=new ArrayList();
  for (int i=0; i < ins.length; i++)   inners.add(ins[i]);
  List supers=new ArrayList();
  ClassDoc supercls=thiscls.superclass();
  if (supercls != null)   supers.add(supercls);
  ClassDoc[] ifaces=thiscls.interfaces();
  for (int i=0; i < ifaces.length; i++)   supers.add(ifaces[i]);
  List subs=new ArrayList();
  if (thiscls.isInterface()) {
    for (int j=0; j < clss.length; j++) {
      ClassDoc[] ifa=clss[j].interfaces();
      for (int k=0; k < ifa.length; k++) {
        if (ifa[k] == thiscls)         subs.add(clss[j]);
      }
    }
  }
  for (int j=0; j < clss.length; j++)   if (clss[j].superclass() == thiscls)   subs.add(clss[j]);
  ClassDoc outer=null;
  FIND_OUTER:   for (int j=0; j < clss.length; j++) {
    ClassDoc[] in=clss[j].innerClasses();
    for (int k=0; k < in.length; k++) {
      if (in[k] == thiscls) {
        outer=clss[j];
        break FIND_OUTER;
      }
    }
  }
  String destdir=configuration().destdirname.length() > 0 ? configuration().destdirname + File.separatorChar : "";
  String pkg=thiscls.containingPackage().name();
  String dstpath="";
  if (pkg.length() > 0) {
    destdir+=pkg.replace('.',File.separatorChar) + File.separatorChar;
    StringBuffer sb=new StringBuffer("../");
    for (int i=0; i < pkg.length(); i++)     if (pkg.charAt(i) == '.')     sb.append("../");
    dstpath=sb.toString();
  }
  String imgpath="<img src=" + dstpath + "images/";
  String fn=destdir + PREFIX + thiscls.name()+ ".html";
  makeContainer(fn);
  OutputStream os=new FileOutputStream(fn);
  String docencoding=configuration().docencoding;
  OutputStreamWriter oswriter;
  if (docencoding == null)   oswriter=new OutputStreamWriter(os);
 else   oswriter=new OutputStreamWriter(os,docencoding);
  PrintWriter out=new PrintWriter(oswriter);
  out.println("<html><head><title>");
  if (configuration().windowtitle != null) {
    out.print(configuration().windowtitle + " : ");
  }
  out.print(thiscls.name());
  out.println("</title></head><body bgcolor=\"#ffffff\" text=\"#000000\" vlink=\"#330000\" alink=\"#330044\" link=\"#0000aa\">");
  out.println("<h2 class=\"thisclassname\">" + thiscls.name() + "</h2>");
  out.println("<table width=100% cellspacing=0 cellpadding=0>");
  if (!inners.isEmpty()) {
    out.println("<tr><td width=32%></td><td width=12></td><td width=32% valign=bottom>");
    writeClasses(out,inners,configuration().INNER,dstpath);
    out.println("</td><td width=12></td><td width=32%></td></tr><tr><td width=32%></td><td width=12>");
    out.println("</td><td width=32% align=center valign=middle>");
    out.println(imgpath + "inner.gif>");
    out.println("</td><td width=12></td><td width=32%></td></tr>");
  }
  out.println("<tr><td width=32% valign=top>");
  if (!supers.isEmpty())   writeClasses(out,supers,configuration().SUPER,dstpath);
  out.println("</td><td width=12 align=center valign=top>");
  if (!supers.isEmpty())   out.println(imgpath + "ext.gif>");
  out.println("</td><td width=32% valign=top align=center>");
  writeClass(out,thiscls,configuration().PIVOT,dstpath,true);
  if (outer != null) {
    out.println(imgpath + "outer.gif>");
    writeClass(out,outer,configuration().OUTER,dstpath,false);
  }
  out.println("</td><td width=\"12\" align=\"center\" valign=\"top\">");
  if (!subs.isEmpty())   out.println(imgpath + "ext.gif");
  out.println("</td>");
  out.println("<td width=32% valign=top>");
  if (!subs.isEmpty())   writeClasses(out,subs,configuration().SUB,dstpath);
  out.println("</td></tr>");
  out.println("</table></body></html>");
  out.close();
}
