{
  out.print("<tr><td bgcolor=#");
  if (cls.isInterface())   out.print(configuration().interfacecolor);
 else   if (cls.isFinal())   out.print(configuration().finalclasscolor);
 else   if (cls.isAbstract())   out.print(configuration().abstractclasscolor);
 else   out.print(configuration().classcolor);
  out.println("><table border cellspacing=0 cellpadding=0 width=100%><tr><td>");
  if (configuration().packagename) {
    String pkgs=cls.containingPackage().name();
    if (pkgs.length() > 0)     out.print(pkgs + ". ");
  }
  writeClassName(out,cls,dstpath,thiscls);
  writeClassTag(out,cls);
  int dt=configuration().detail[type];
  if (dt > 0) {
    FieldDoc[] fld=cls.fields();
    if (fld.length > 0) {
      out.println("</td></tr><tr><td>");
      for (int i=0; i < fld.length; i++)       writeField(out,fld[i],dt,dstpath);
    }
    ConstructorDoc[] con=cls.constructors();
    boolean sep=false;
    if (con.length > 0) {
      for (int i=0; i < con.length; i++) {
        Parameter[] param=con[i].parameters();
        if (param.length == 1 && param[0].name().startsWith("this$"))         continue;
        if (!sep) {
          out.println("</td></tr><tr><td>");
          sep=true;
        }
        writeConstructor(out,con[i],dt,dstpath);
      }
    }
    MethodDoc[] met=cls.methods();
    if (met.length > 0) {
      if (!sep)       out.println("</td></tr><tr><td>");
      for (int i=0; i < met.length; i++)       writeMethod(out,met[i],dt,dstpath);
    }
  }
  out.println("</td></tr></table></td></tr>");
}
