{
  boolean success=false;
  this.clear();
  generation=generationFromSegmentsFileName(segmentFileName);
  lastGeneration=generation;
  ChecksumIndexInput input=null;
  try {
    input=new ChecksumIndexInput(directory.openInput(segmentFileName,IOContext.READ));
    final int format=input.readInt();
    setFormat(format);
    if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)     throw new IndexFormatTooOldException(input,format,DefaultSegmentInfosWriter.FORMAT_MINIMUM,DefaultSegmentInfosWriter.FORMAT_CURRENT);
    if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)     throw new IndexFormatTooNewException(input,format,DefaultSegmentInfosWriter.FORMAT_MINIMUM,DefaultSegmentInfosWriter.FORMAT_CURRENT);
    if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {
      codecFormat=Codec.forName(input.readString());
    }
 else {
      codecFormat=Codec.forName("Lucene3x");
    }
    SegmentInfosReader infosReader=codecFormat.segmentInfosFormat().getSegmentInfosReader();
    infosReader.read(directory,segmentFileName,input,this,IOContext.READ);
    final long checksumNow=input.getChecksum();
    final long checksumThen=input.readLong();
    if (checksumNow != checksumThen)     throw new CorruptIndexException("checksum mismatch in segments file (resource: " + input + ")");
    success=true;
  }
  finally {
    if (input != null) {
      input.close();
    }
    if (!success) {
      this.clear();
    }
  }
}
