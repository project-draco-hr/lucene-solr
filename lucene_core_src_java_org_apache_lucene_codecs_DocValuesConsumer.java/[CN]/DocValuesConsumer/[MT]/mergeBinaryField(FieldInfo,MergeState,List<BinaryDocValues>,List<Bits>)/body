{
  addBinaryField(fieldInfo,new Iterable<BytesRef>(){
    @Override public Iterator<BytesRef> iterator(){
      return new Iterator<BytesRef>(){
        int readerUpto=-1;
        int docIDUpto;
        BytesRef nextValue;
        BytesRef nextPointer;
        LeafReader currentReader;
        BinaryDocValues currentValues;
        Bits currentLiveDocs;
        Bits currentDocsWithField;
        boolean nextIsSet;
        @Override public boolean hasNext(){
          return nextIsSet || setNext();
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        @Override public BytesRef next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          assert nextIsSet;
          nextIsSet=false;
          return nextPointer;
        }
        private boolean setNext(){
          while (true) {
            if (readerUpto == toMerge.size()) {
              return false;
            }
            if (currentReader == null || docIDUpto == currentReader.maxDoc()) {
              readerUpto++;
              if (readerUpto < toMerge.size()) {
                currentReader=mergeState.readers.get(readerUpto);
                currentValues=toMerge.get(readerUpto);
                currentDocsWithField=docsWithField.get(readerUpto);
                currentLiveDocs=currentReader.getLiveDocs();
              }
              docIDUpto=0;
              continue;
            }
            if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {
              nextIsSet=true;
              if (currentDocsWithField.get(docIDUpto)) {
                nextValue=currentValues.get(docIDUpto);
                nextPointer=nextValue;
              }
 else {
                nextPointer=null;
              }
              docIDUpto++;
              return true;
            }
            docIDUpto++;
          }
        }
      }
;
    }
  }
);
}
