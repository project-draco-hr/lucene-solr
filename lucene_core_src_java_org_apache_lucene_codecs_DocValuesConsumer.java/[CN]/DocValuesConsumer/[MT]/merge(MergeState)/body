{
  for (  DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {
    if (docValuesProducer != null) {
      docValuesProducer.checkIntegrity();
    }
  }
  for (  FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {
    DocValuesType type=mergeFieldInfo.getDocValuesType();
    if (type != DocValuesType.NO) {
      if (type == DocValuesType.NUMERIC) {
        List<NumericDocValues> toMerge=new ArrayList<>();
        List<Bits> docsWithField=new ArrayList<>();
        for (int i=0; i < mergeState.docValuesProducers.length; i++) {
          NumericDocValues values=null;
          Bits bits=null;
          DocValuesProducer docValuesProducer=mergeState.docValuesProducers[i];
          if (docValuesProducer != null) {
            FieldInfo fieldInfo=mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
            if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {
              values=docValuesProducer.getNumeric(fieldInfo);
              bits=docValuesProducer.getDocsWithField(fieldInfo);
            }
          }
          if (values == null) {
            values=DocValues.emptyNumeric();
            bits=new Bits.MatchNoBits(mergeState.maxDocs[i]);
          }
          toMerge.add(values);
          docsWithField.add(bits);
        }
        mergeNumericField(mergeFieldInfo,mergeState,toMerge,docsWithField);
      }
 else       if (type == DocValuesType.BINARY) {
        List<BinaryDocValues> toMerge=new ArrayList<>();
        List<Bits> docsWithField=new ArrayList<>();
        for (int i=0; i < mergeState.docValuesProducers.length; i++) {
          BinaryDocValues values=null;
          Bits bits=null;
          DocValuesProducer docValuesProducer=mergeState.docValuesProducers[i];
          if (docValuesProducer != null) {
            FieldInfo fieldInfo=mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
            if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {
              values=docValuesProducer.getBinary(fieldInfo);
              bits=docValuesProducer.getDocsWithField(fieldInfo);
            }
          }
          if (values == null) {
            values=DocValues.emptyBinary();
            bits=new Bits.MatchNoBits(mergeState.maxDocs[i]);
          }
          toMerge.add(values);
          docsWithField.add(bits);
        }
        mergeBinaryField(mergeFieldInfo,mergeState,toMerge,docsWithField);
      }
 else       if (type == DocValuesType.SORTED) {
        List<SortedDocValues> toMerge=new ArrayList<>();
        for (int i=0; i < mergeState.docValuesProducers.length; i++) {
          SortedDocValues values=null;
          DocValuesProducer docValuesProducer=mergeState.docValuesProducers[i];
          if (docValuesProducer != null) {
            FieldInfo fieldInfo=mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
            if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {
              values=docValuesProducer.getSorted(fieldInfo);
            }
          }
          if (values == null) {
            values=DocValues.emptySorted();
          }
          toMerge.add(values);
        }
        mergeSortedField(mergeFieldInfo,mergeState,toMerge);
      }
 else       if (type == DocValuesType.SORTED_SET) {
        List<SortedSetDocValues> toMerge=new ArrayList<>();
        for (int i=0; i < mergeState.docValuesProducers.length; i++) {
          SortedSetDocValues values=null;
          DocValuesProducer docValuesProducer=mergeState.docValuesProducers[i];
          if (docValuesProducer != null) {
            FieldInfo fieldInfo=mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
            if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {
              values=docValuesProducer.getSortedSet(fieldInfo);
            }
          }
          if (values == null) {
            values=DocValues.emptySortedSet();
          }
          toMerge.add(values);
        }
        mergeSortedSetField(mergeFieldInfo,mergeState,toMerge);
      }
 else       if (type == DocValuesType.SORTED_NUMERIC) {
        List<SortedNumericDocValues> toMerge=new ArrayList<>();
        for (int i=0; i < mergeState.docValuesProducers.length; i++) {
          SortedNumericDocValues values=null;
          DocValuesProducer docValuesProducer=mergeState.docValuesProducers[i];
          if (docValuesProducer != null) {
            FieldInfo fieldInfo=mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);
            if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {
              values=docValuesProducer.getSortedNumeric(fieldInfo);
            }
          }
          if (values == null) {
            values=DocValues.emptySortedNumeric(mergeState.maxDocs[i]);
          }
          toMerge.add(values);
        }
        mergeSortedNumericField(mergeFieldInfo,mergeState,toMerge);
      }
 else {
        throw new AssertionError("type=" + type);
      }
    }
  }
}
