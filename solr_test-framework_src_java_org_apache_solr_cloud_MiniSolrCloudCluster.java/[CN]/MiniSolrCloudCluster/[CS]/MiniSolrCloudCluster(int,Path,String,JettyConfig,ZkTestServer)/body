{
  this.baseDir=baseDir;
  this.jettyConfig=jettyConfig;
  Files.createDirectories(baseDir);
  this.externalZkServer=zkTestServer != null;
  if (!externalZkServer) {
    String zkDir=baseDir.resolve("zookeeper/server1/data").toString();
    zkTestServer=new ZkTestServer(zkDir);
    zkTestServer.run();
  }
  this.zkServer=zkTestServer;
  try (SolrZkClient zkClient=new SolrZkClient(zkServer.getZkHost(),AbstractZkTestCase.TIMEOUT,45000,null)){
    zkClient.makePath("/solr/solr.xml",solrXml.getBytes(Charset.defaultCharset()),true);
    if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {
      zkClient.makePath("/solr" + ZkStateReader.CLUSTER_PROPS,"{'urlScheme':'https'}".getBytes(Charsets.UTF_8),true);
    }
  }
   System.setProperty("zkHost",zkServer.getZkAddress());
  List<Callable<JettySolrRunner>> startups=new ArrayList<>(numServers);
  for (int i=0; i < numServers; ++i) {
    startups.add(new Callable<JettySolrRunner>(){
      @Override public JettySolrRunner call() throws Exception {
        return startJettySolrRunner(newNodeName(),jettyConfig.context,jettyConfig);
      }
    }
);
  }
  Collection<Future<JettySolrRunner>> futures=executor.invokeAll(startups);
  Exception startupError=checkForExceptions("Error starting up MiniSolrCloudCluster",futures);
  if (startupError != null) {
    try {
      this.shutdown();
    }
 catch (    Throwable t) {
      startupError.addSuppressed(t);
    }
    throw startupError;
  }
  try (SolrZkClient zkClient=new SolrZkClient(zkServer.getZkHost(),AbstractZkTestCase.TIMEOUT,45000,null)){
    int numliveNodes=0;
    int retries=60;
    String liveNodesPath="/solr/live_nodes";
    do {
      if (zkClient.exists(liveNodesPath,true)) {
        numliveNodes=zkClient.getChildren(liveNodesPath,null,true).size();
        if (numliveNodes == numServers) {
          break;
        }
      }
      retries--;
      if (retries == 0) {
        throw new IllegalStateException("Solr servers failed to register with ZK." + " Current count: " + numliveNodes + "; Expected count: "+ numServers);
      }
      Thread.sleep(1000);
    }
 while (numliveNodes != numServers);
  }
   solrClient=buildSolrClient();
}
