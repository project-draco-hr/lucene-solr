{
  String urlScheme=sslConfig.isSSLMode() ? "https" : "http";
  setUrlScheme(urlScheme);
  for (  JettySolrRunner runner : jettys) {
    runner.stop();
  }
  HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());
  for (int i=0; i < this.jettys.size(); i++) {
    JettySolrRunner runner=jettys.get(i);
    JettyConfig config=JettyConfig.builder().setContext(context).setPort(runner.getLocalPort()).stopAtShutdown(false).withServlets(getExtraServlets()).withFilters(getExtraRequestFilters()).withSSLConfig(sslConfig).build();
    Properties props=new Properties();
    if (getSolrConfigFile() != null)     props.setProperty("solrconfig",getSolrConfigFile());
    if (getSchemaFile() != null)     props.setProperty("schema",getSchemaFile());
    props.setProperty("solr.data.dir",getDataDir(testDir + "/shard" + i+ "/data"));
    JettySolrRunner newRunner=new JettySolrRunner(runner.getSolrHome(),props,config);
    newRunner.start();
    jettys.set(i,newRunner);
  }
  assertReplicaInformation(urlScheme);
}
