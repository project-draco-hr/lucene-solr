{
  try {
    String str=IOUtils.toString(input);
    Matcher matcher=pattern.matcher(str);
    List<Token> tokens=(group < 0) ? split(matcher,str) : group(matcher,str,group);
    final Iterator<Token> iter=tokens.iterator();
    return new TokenStream(){
      @Override public boolean incrementToken() throws IOException {
        return super.incrementToken();
      }
      @Override public void end() throws IOException {
        super.end();
      }
      @Override public Token next(      Token reusableToken) throws IOException {
        return super.next(reusableToken);
      }
      @Override public void reset() throws IOException {
        super.reset();
      }
      @Override public void close() throws IOException {
        super.close();
      }
      @Override public Token next() throws IOException {
        if (iter.hasNext()) {
          return iter.next();
        }
        return null;
      }
    }
;
  }
 catch (  IOException ex) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,ex);
  }
}
