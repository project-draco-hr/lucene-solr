{
  Set untoks=new HashSet();
  untoks.add(WikipediaTokenizer.CATEGORY);
  untoks.add(WikipediaTokenizer.ITALICS);
  WikipediaTokenizer tf=new WikipediaTokenizer(new StringReader(LINK_PHRASES),WikipediaTokenizer.TOKENS_ONLY,untoks);
  checkLinkPhrases(tf);
  String test="[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]";
  tf=new WikipediaTokenizer(new StringReader(test),WikipediaTokenizer.UNTOKENIZED_ONLY,untoks);
  final Token reusableToken=new Token();
  Token nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "a b c d",nextToken.term().equals("a b c d") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.startOffset() + " does not equal: " + 11,nextToken.startOffset() == 11);
  assertTrue(nextToken.endOffset() + " does not equal: " + 18,nextToken.endOffset() == 18);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "e f g",nextToken.term().equals("e f g") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 32,nextToken.startOffset() == 32);
  assertTrue(nextToken.endOffset() + " does not equal: " + 37,nextToken.endOffset() == 37);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "link",nextToken.term().equals("link") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 42,nextToken.startOffset() == 42);
  assertTrue(nextToken.endOffset() + " does not equal: " + 46,nextToken.endOffset() == 46);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "here",nextToken.term().equals("here") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 47,nextToken.startOffset() == 47);
  assertTrue(nextToken.endOffset() + " does not equal: " + 51,nextToken.endOffset() == 51);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "link",nextToken.term().equals("link") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 56,nextToken.startOffset() == 56);
  assertTrue(nextToken.endOffset() + " does not equal: " + 60,nextToken.endOffset() == 60);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "there",nextToken.term().equals("there") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 61,nextToken.startOffset() == 61);
  assertTrue(nextToken.endOffset() + " does not equal: " + 66,nextToken.endOffset() == 66);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "italics here",nextToken.term().equals("italics here") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 71,nextToken.startOffset() == 71);
  assertTrue(nextToken.endOffset() + " does not equal: " + 83,nextToken.endOffset() == 83);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "something",nextToken.term().equals("something") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 86,nextToken.startOffset() == 86);
  assertTrue(nextToken.endOffset() + " does not equal: " + 95,nextToken.endOffset() == 95);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "more italics",nextToken.term().equals("more italics") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 98,nextToken.startOffset() == 98);
  assertTrue(nextToken.endOffset() + " does not equal: " + 110,nextToken.endOffset() == 110);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "h   i   j",nextToken.term().equals("h   i   j") == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 124,nextToken.startOffset() == 124);
  assertTrue(nextToken.endOffset() + " does not equal: " + 133,nextToken.endOffset() == 133);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is not null and it should be",nextToken == null);
}
