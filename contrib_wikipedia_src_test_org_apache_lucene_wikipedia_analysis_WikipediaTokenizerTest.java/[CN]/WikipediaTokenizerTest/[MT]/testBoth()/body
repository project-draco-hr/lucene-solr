{
  Set<String> untoks=new HashSet<String>();
  untoks.add(WikipediaTokenizer.CATEGORY);
  untoks.add(WikipediaTokenizer.ITALICS);
  String test="[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]";
  WikipediaTokenizer tf=new WikipediaTokenizer(new StringReader(test),WikipediaTokenizer.BOTH,untoks);
  TermAttribute termAtt=tf.addAttribute(TermAttribute.class);
  TypeAttribute typeAtt=tf.addAttribute(TypeAttribute.class);
  PositionIncrementAttribute posIncrAtt=tf.addAttribute(PositionIncrementAttribute.class);
  OffsetAttribute offsetAtt=tf.addAttribute(OffsetAttribute.class);
  FlagsAttribute flagsAtt=tf.addAttribute(FlagsAttribute.class);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "a b c d",termAtt.term().equals("a b c d") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(flagsAtt.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 11,offsetAtt.startOffset() == 11);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 18,offsetAtt.endOffset() == 18);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "a",termAtt.term().equals("a") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 0,posIncrAtt.getPositionIncrement() == 0);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(flagsAtt.getFlags() + " equals: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG+ " and it shouldn't",flagsAtt.getFlags() != WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 11,offsetAtt.startOffset() == 11);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 12,offsetAtt.endOffset() == 12);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "b",termAtt.term().equals("b") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 13,offsetAtt.startOffset() == 13);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 14,offsetAtt.endOffset() == 14);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "c",termAtt.term().equals("c") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 15,offsetAtt.startOffset() == 15);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 16,offsetAtt.endOffset() == 16);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "d",termAtt.term().equals("d") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 17,offsetAtt.startOffset() == 17);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 18,offsetAtt.endOffset() == 18);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "e f g",termAtt.term().equals("e f g") == true);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(flagsAtt.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 32,offsetAtt.startOffset() == 32);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 37,offsetAtt.endOffset() == 37);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "e",termAtt.term().equals("e") == true);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 0,posIncrAtt.getPositionIncrement() == 0);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 32,offsetAtt.startOffset() == 32);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 33,offsetAtt.endOffset() == 33);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "f",termAtt.term().equals("f") == true);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 34,offsetAtt.startOffset() == 34);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 35,offsetAtt.endOffset() == 35);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "g",termAtt.term().equals("g") == true);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 36,offsetAtt.startOffset() == 36);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 37,offsetAtt.endOffset() == 37);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "link",termAtt.term().equals("link") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 42,offsetAtt.startOffset() == 42);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 46,offsetAtt.endOffset() == 46);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "here",termAtt.term().equals("here") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 47,offsetAtt.startOffset() == 47);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 51,offsetAtt.endOffset() == 51);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "link",termAtt.term().equals("link") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 56,offsetAtt.startOffset() == 56);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 60,offsetAtt.endOffset() == 60);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "there",termAtt.term().equals("there") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 61,offsetAtt.startOffset() == 61);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 66,offsetAtt.endOffset() == 66);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "italics here",termAtt.term().equals("italics here") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(flagsAtt.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 71,offsetAtt.startOffset() == 71);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 83,offsetAtt.endOffset() == 83);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "italics",termAtt.term().equals("italics") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 0,posIncrAtt.getPositionIncrement() == 0);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 71,offsetAtt.startOffset() == 71);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 78,offsetAtt.endOffset() == 78);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "here",termAtt.term().equals("here") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 79,offsetAtt.startOffset() == 79);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 83,offsetAtt.endOffset() == 83);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "something",termAtt.term().equals("something") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 86,offsetAtt.startOffset() == 86);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 95,offsetAtt.endOffset() == 95);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "more italics",termAtt.term().equals("more italics") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(flagsAtt.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 98,offsetAtt.startOffset() == 98);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 110,offsetAtt.endOffset() == 110);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "more",termAtt.term().equals("more") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 0,posIncrAtt.getPositionIncrement() == 0);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 98,offsetAtt.startOffset() == 98);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 102,offsetAtt.endOffset() == 102);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "italics",termAtt.term().equals("italics") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.ITALICS,typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 103,offsetAtt.startOffset() == 103);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 110,offsetAtt.endOffset() == 110);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "h   i   j",termAtt.term().equals("h   i   j") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(flagsAtt.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 124,offsetAtt.startOffset() == 124);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 133,offsetAtt.endOffset() == 133);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "h",termAtt.term().equals("h") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 0,posIncrAtt.getPositionIncrement() == 0);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 124,offsetAtt.startOffset() == 124);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 125,offsetAtt.endOffset() == 125);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "i",termAtt.term().equals("i") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 128,offsetAtt.startOffset() == 128);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 129,offsetAtt.endOffset() == 129);
  assertTrue(tf.incrementToken());
  assertTrue(termAtt.term() + " is not equal to " + "j",termAtt.term().equals("j") == true);
  assertTrue(posIncrAtt.getPositionIncrement() + " does not equal: " + 1,posIncrAtt.getPositionIncrement() == 1);
  assertTrue(typeAtt.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(offsetAtt.startOffset() + " does not equal: " + 132,offsetAtt.startOffset() == 132);
  assertTrue(offsetAtt.endOffset() + " does not equal: " + 133,offsetAtt.endOffset() == 133);
  assertFalse(tf.incrementToken());
}
