{
  Set untoks=new HashSet();
  untoks.add(WikipediaTokenizer.CATEGORY);
  untoks.add(WikipediaTokenizer.ITALICS);
  String test="[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]";
  WikipediaTokenizer tf=new WikipediaTokenizer(new StringReader(test),WikipediaTokenizer.BOTH,untoks);
  final Token reusableToken=new Token();
  Token nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "a b c d",nextToken.term().equals("a b c d") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,nextToken.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 11,nextToken.startOffset() == 11);
  assertTrue(nextToken.endOffset() + " does not equal: " + 18,nextToken.endOffset() == 18);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "a",nextToken.term().equals("a") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getFlags() + " equals: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG+ " and it shouldn't",nextToken.getFlags() != WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 11,nextToken.startOffset() == 11);
  assertTrue(nextToken.endOffset() + " does not equal: " + 12,nextToken.endOffset() == 12);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "b",nextToken.term().equals("b") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 13,nextToken.startOffset() == 13);
  assertTrue(nextToken.endOffset() + " does not equal: " + 14,nextToken.endOffset() == 14);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "c",nextToken.term().equals("c") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 15,nextToken.startOffset() == 15);
  assertTrue(nextToken.endOffset() + " does not equal: " + 16,nextToken.endOffset() == 16);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "d",nextToken.term().equals("d") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 17,nextToken.startOffset() == 17);
  assertTrue(nextToken.endOffset() + " does not equal: " + 18,nextToken.endOffset() == 18);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "e f g",nextToken.term().equals("e f g") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,nextToken.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 32,nextToken.startOffset() == 32);
  assertTrue(nextToken.endOffset() + " does not equal: " + 37,nextToken.endOffset() == 37);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "e",nextToken.term().equals("e") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  assertTrue(nextToken.startOffset() + " does not equal: " + 32,nextToken.startOffset() == 32);
  assertTrue(nextToken.endOffset() + " does not equal: " + 33,nextToken.endOffset() == 33);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "f",nextToken.term().equals("f") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.startOffset() + " does not equal: " + 34,nextToken.startOffset() == 34);
  assertTrue(nextToken.endOffset() + " does not equal: " + 35,nextToken.endOffset() == 35);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "g",nextToken.term().equals("g") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.startOffset() + " does not equal: " + 36,nextToken.startOffset() == 36);
  assertTrue(nextToken.endOffset() + " does not equal: " + 37,nextToken.endOffset() == 37);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "link",nextToken.term().equals("link") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,nextToken.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 42,nextToken.startOffset() == 42);
  assertTrue(nextToken.endOffset() + " does not equal: " + 46,nextToken.endOffset() == 46);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "here",nextToken.term().equals("here") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,nextToken.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 47,nextToken.startOffset() == 47);
  assertTrue(nextToken.endOffset() + " does not equal: " + 51,nextToken.endOffset() == 51);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "link",nextToken.term().equals("link") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.startOffset() + " does not equal: " + 56,nextToken.startOffset() == 56);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,nextToken.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(nextToken.endOffset() + " does not equal: " + 60,nextToken.endOffset() == 60);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "there",nextToken.term().equals("there") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.INTERNAL_LINK,nextToken.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 61,nextToken.startOffset() == 61);
  assertTrue(nextToken.endOffset() + " does not equal: " + 66,nextToken.endOffset() == 66);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "italics here",nextToken.term().equals("italics here") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,nextToken.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 71,nextToken.startOffset() == 71);
  assertTrue(nextToken.endOffset() + " does not equal: " + 83,nextToken.endOffset() == 83);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "italics",nextToken.term().equals("italics") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 71,nextToken.startOffset() == 71);
  assertTrue(nextToken.endOffset() + " does not equal: " + 78,nextToken.endOffset() == 78);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "here",nextToken.term().equals("here") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 79,nextToken.startOffset() == 79);
  assertTrue(nextToken.endOffset() + " does not equal: " + 83,nextToken.endOffset() == 83);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "something",nextToken.term().equals("something") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.startOffset() + " does not equal: " + 86,nextToken.startOffset() == 86);
  assertTrue(nextToken.endOffset() + " does not equal: " + 95,nextToken.endOffset() == 95);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "more italics",nextToken.term().equals("more italics") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,nextToken.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 98,nextToken.startOffset() == 98);
  assertTrue(nextToken.endOffset() + " does not equal: " + 110,nextToken.endOffset() == 110);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "more",nextToken.term().equals("more") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 98,nextToken.startOffset() == 98);
  assertTrue(nextToken.endOffset() + " does not equal: " + 102,nextToken.endOffset() == 102);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "italics",nextToken.term().equals("italics") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.ITALICS,nextToken.type().equals(WikipediaTokenizer.ITALICS) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 103,nextToken.startOffset() == 103);
  assertTrue(nextToken.endOffset() + " does not equal: " + 110,nextToken.endOffset() == 110);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "h   i   j",nextToken.term().equals("h   i   j") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.getFlags() + " does not equal: " + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG,nextToken.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);
  assertTrue(nextToken.startOffset() + " does not equal: " + 124,nextToken.startOffset() == 124);
  assertTrue(nextToken.endOffset() + " does not equal: " + 133,nextToken.endOffset() == 133);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "h",nextToken.term().equals("h") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 124,nextToken.startOffset() == 124);
  assertTrue(nextToken.endOffset() + " does not equal: " + 125,nextToken.endOffset() == 125);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "i",nextToken.term().equals("i") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 128,nextToken.startOffset() == 128);
  assertTrue(nextToken.endOffset() + " does not equal: " + 129,nextToken.endOffset() == 129);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "j",nextToken.term().equals("j") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.CATEGORY,nextToken.type().equals(WikipediaTokenizer.CATEGORY) == true);
  assertTrue(nextToken.startOffset() + " does not equal: " + 132,nextToken.startOffset() == 132);
  assertTrue(nextToken.endOffset() + " does not equal: " + 133,nextToken.endOffset() == 133);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is not null and it should be",nextToken == null);
}
