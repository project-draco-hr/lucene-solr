{
  String test="[http://lucene.apache.org/java/docs/index.html#news here] [http://lucene.apache.org/java/docs/index.html?b=c here] [https://lucene.apache.org/java/docs/index.html?b=c here]";
  WikipediaTokenizer tf=new WikipediaTokenizer(new StringReader(test));
  final Token reusableToken=new Token();
  Token nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "http://lucene.apache.org/java/docs/index.html#news",nextToken.term().equals("http://lucene.apache.org/java/docs/index.html#news") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.EXTERNAL_LINK_URL,nextToken.type().equals(WikipediaTokenizer.EXTERNAL_LINK_URL) == true);
  tf.next(reusableToken);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "http://lucene.apache.org/java/docs/index.html?b=c",nextToken.term().equals("http://lucene.apache.org/java/docs/index.html?b=c") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.EXTERNAL_LINK_URL,nextToken.type().equals(WikipediaTokenizer.EXTERNAL_LINK_URL) == true);
  tf.next(reusableToken);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "https://lucene.apache.org/java/docs/index.html?b=c",nextToken.term().equals("https://lucene.apache.org/java/docs/index.html?b=c") == true);
  assertTrue(nextToken.type() + " is not equal to " + WikipediaTokenizer.EXTERNAL_LINK_URL,nextToken.type().equals(WikipediaTokenizer.EXTERNAL_LINK_URL) == true);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is not null and it should be",nextToken == null);
}
