{
  String test="[[link]] This is a [[Category:foo]] Category  This is a linked [[:Category:bar none withstanding]] " + "Category This is (parens) This is a [[link]]  This is an external URL [http://lucene.apache.org] " + "Here is ''italics'' and ''more italics'', '''bold''' and '''''five quotes''''' "+ " This is a [[link|display info]]  This is a period.  Here is $3.25 and here is 3.50.  Here's Johnny.  "+ "==heading== ===sub head=== followed by some text  [[Category:blah| ]] "+ "''[[Category:ital_cat]]''  here is some that is ''italics [[Category:foo]] but is never closed."+ "'''same [[Category:foo]] goes for this '''''and2 [[Category:foo]] and this"+ " [http://foo.boo.com/test/test/ Test Test] [http://foo.boo.com/test/test/test.html Test Test]"+ " [http://foo.boo.com/test/test/test.html?g=b&c=d Test Test] <ref>Citation</ref> <sup>martian</sup> <span class=\"glue\">code</span>";
  Map<String,String> tcm=new HashMap<String,String>();
  tcm.put("link",WikipediaTokenizer.INTERNAL_LINK);
  tcm.put("display",WikipediaTokenizer.INTERNAL_LINK);
  tcm.put("info",WikipediaTokenizer.INTERNAL_LINK);
  tcm.put("http://lucene.apache.org",WikipediaTokenizer.EXTERNAL_LINK_URL);
  tcm.put("http://foo.boo.com/test/test/",WikipediaTokenizer.EXTERNAL_LINK_URL);
  tcm.put("http://foo.boo.com/test/test/test.html",WikipediaTokenizer.EXTERNAL_LINK_URL);
  tcm.put("http://foo.boo.com/test/test/test.html?g=b&c=d",WikipediaTokenizer.EXTERNAL_LINK_URL);
  tcm.put("Test",WikipediaTokenizer.EXTERNAL_LINK);
  tcm.put("This","<ALPHANUM>");
  tcm.put("is","<ALPHANUM>");
  tcm.put("a","<ALPHANUM>");
  tcm.put("Category","<ALPHANUM>");
  tcm.put("linked","<ALPHANUM>");
  tcm.put("parens","<ALPHANUM>");
  tcm.put("external","<ALPHANUM>");
  tcm.put("URL","<ALPHANUM>");
  tcm.put("and","<ALPHANUM>");
  tcm.put("period","<ALPHANUM>");
  tcm.put("Here","<ALPHANUM>");
  tcm.put("Here's","<APOSTROPHE>");
  tcm.put("here","<ALPHANUM>");
  tcm.put("Johnny","<ALPHANUM>");
  tcm.put("followed","<ALPHANUM>");
  tcm.put("by","<ALPHANUM>");
  tcm.put("text","<ALPHANUM>");
  tcm.put("that","<ALPHANUM>");
  tcm.put("but","<ALPHANUM>");
  tcm.put("never","<ALPHANUM>");
  tcm.put("closed","<ALPHANUM>");
  tcm.put("goes","<ALPHANUM>");
  tcm.put("for","<ALPHANUM>");
  tcm.put("this","<ALPHANUM>");
  tcm.put("an","<ALPHANUM>");
  tcm.put("some","<ALPHANUM>");
  tcm.put("martian","<ALPHANUM>");
  tcm.put("code","<ALPHANUM>");
  tcm.put("foo",WikipediaTokenizer.CATEGORY);
  tcm.put("bar",WikipediaTokenizer.CATEGORY);
  tcm.put("none",WikipediaTokenizer.CATEGORY);
  tcm.put("withstanding",WikipediaTokenizer.CATEGORY);
  tcm.put("blah",WikipediaTokenizer.CATEGORY);
  tcm.put("ital",WikipediaTokenizer.CATEGORY);
  tcm.put("cat",WikipediaTokenizer.CATEGORY);
  tcm.put("italics",WikipediaTokenizer.ITALICS);
  tcm.put("more",WikipediaTokenizer.ITALICS);
  tcm.put("bold",WikipediaTokenizer.BOLD);
  tcm.put("same",WikipediaTokenizer.BOLD);
  tcm.put("five",WikipediaTokenizer.BOLD_ITALICS);
  tcm.put("and2",WikipediaTokenizer.BOLD_ITALICS);
  tcm.put("quotes",WikipediaTokenizer.BOLD_ITALICS);
  tcm.put("heading",WikipediaTokenizer.HEADING);
  tcm.put("sub",WikipediaTokenizer.SUB_HEADING);
  tcm.put("head",WikipediaTokenizer.SUB_HEADING);
  tcm.put("Citation",WikipediaTokenizer.CITATION);
  tcm.put("3.25","<NUM>");
  tcm.put("3.50","<NUM>");
  WikipediaTokenizer tf=new WikipediaTokenizer(new StringReader(test));
  int count=0;
  int numItalics=0;
  int numBoldItalics=0;
  int numCategory=0;
  int numCitation=0;
  TermAttribute termAtt=tf.addAttribute(TermAttribute.class);
  TypeAttribute typeAtt=tf.addAttribute(TypeAttribute.class);
  while (tf.incrementToken()) {
    String tokText=termAtt.term();
    String expectedType=tcm.get(tokText);
    assertTrue("expectedType is null and it shouldn't be for: " + tf.toString(),expectedType != null);
    assertTrue(typeAtt.type() + " is not equal to " + expectedType+ " for "+ tf.toString(),typeAtt.type().equals(expectedType) == true);
    count++;
    if (typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true) {
      numItalics++;
    }
 else     if (typeAtt.type().equals(WikipediaTokenizer.BOLD_ITALICS) == true) {
      numBoldItalics++;
    }
 else     if (typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true) {
      numCategory++;
    }
 else     if (typeAtt.type().equals(WikipediaTokenizer.CITATION) == true) {
      numCitation++;
    }
  }
  assertTrue("We have not seen enough tokens: " + count + " is not >= "+ tcm.size(),count >= tcm.size());
  assertTrue(numItalics + " does not equal: " + 4+ " for numItalics",numItalics == 4);
  assertTrue(numBoldItalics + " does not equal: " + 3+ " for numBoldItalics",numBoldItalics == 3);
  assertTrue(numCategory + " does not equal: " + 10+ " for numCategory",numCategory == 10);
  assertTrue(numCitation + " does not equal: " + 1+ " for numCitation",numCitation == 1);
}
