{
  final Token reusableToken=new Token();
  Token nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "click",nextToken.term().equals("click") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "link",nextToken.term().equals("link") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "here",nextToken.term().equals("here") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "again",nextToken.term().equals("again") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "click",nextToken.term().equals("click") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "http://lucene.apache.org",nextToken.term().equals("http://lucene.apache.org") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "here",nextToken.term().equals("here") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 0,nextToken.getPositionIncrement() == 0);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "again",nextToken.term().equals("again") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "a",nextToken.term().equals("a") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "b",nextToken.term().equals("b") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "c",nextToken.term().equals("c") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is null and it shouldn't be",nextToken != null);
  assertTrue(nextToken.term() + " is not equal to " + "d",nextToken.term().equals("d") == true);
  assertTrue(nextToken.getPositionIncrement() + " does not equal: " + 1,nextToken.getPositionIncrement() == 1);
  nextToken=tf.next(reusableToken);
  assertTrue("nextToken is not null and it should be",nextToken == null);
}
