{
  FieldCache cache=FieldCache.DEFAULT;
  cache.purgeAllCaches();
  assertEquals(0,cache.getCacheEntries().length);
  cache.getNumerics(reader,"theDouble",FieldCache.NUMERIC_UTILS_DOUBLE_PARSER,true);
  assertEquals(2,cache.getCacheEntries().length);
  Bits bits=cache.getDocsWithField(reader,"theDouble");
  assertEquals(2,cache.getCacheEntries().length);
  assertTrue(bits instanceof Bits.MatchAllBits);
  NumericDocValues ints=cache.getNumerics(reader,"sparse",FieldCache.NUMERIC_UTILS_INT_PARSER,true);
  assertEquals(4,cache.getCacheEntries().length);
  Bits docsWithField=cache.getDocsWithField(reader,"sparse");
  assertEquals(4,cache.getCacheEntries().length);
  for (int i=0; i < docsWithField.length(); i++) {
    if (i % 2 == 0) {
      assertTrue(docsWithField.get(i));
      assertEquals(i,ints.get(i));
    }
 else {
      assertFalse(docsWithField.get(i));
    }
  }
  NumericDocValues numInts=cache.getNumerics(reader,"numInt",FieldCache.NUMERIC_UTILS_INT_PARSER,random().nextBoolean());
  docsWithField=cache.getDocsWithField(reader,"numInt");
  for (int i=0; i < docsWithField.length(); i++) {
    if (i % 2 == 0) {
      assertTrue(docsWithField.get(i));
      assertEquals(i,numInts.get(i));
    }
 else {
      assertFalse(docsWithField.get(i));
    }
  }
}
