{
  NUM_DOCS=atLeast(500);
  NUM_ORDS=atLeast(2);
  directory=newDirectory();
  IndexWriter writer=new IndexWriter(directory,new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));
  long theLong=Long.MAX_VALUE;
  double theDouble=Double.MAX_VALUE;
  int theInt=Integer.MAX_VALUE;
  float theFloat=Float.MAX_VALUE;
  unicodeStrings=new String[NUM_DOCS];
  multiValued=new BytesRef[NUM_DOCS][NUM_ORDS];
  if (VERBOSE) {
    System.out.println("TEST: setUp");
  }
  for (int i=0; i < NUM_DOCS; i++) {
    Document doc=new Document();
    doc.add(new LongPoint("theLong",theLong--));
    doc.add(new DoublePoint("theDouble",theDouble--));
    doc.add(new IntPoint("theInt",theInt--));
    doc.add(new FloatPoint("theFloat",theFloat--));
    if (i % 2 == 0) {
      doc.add(new IntPoint("sparse",i));
    }
    if (i % 2 == 0) {
      doc.add(new IntPoint("numInt",i));
    }
    if (random().nextInt(40) != 17) {
      unicodeStrings[i]=generateString(i);
      doc.add(newStringField("theRandomUnicodeString",unicodeStrings[i],Field.Store.YES));
    }
    if (random().nextInt(10) != 8) {
      for (int j=0; j < NUM_ORDS; j++) {
        String newValue=generateString(i);
        multiValued[i][j]=new BytesRef(newValue);
        doc.add(newStringField("theRandomUnicodeMultiValuedField",newValue,Field.Store.YES));
      }
      Arrays.sort(multiValued[i]);
    }
    writer.addDocument(doc);
  }
  writer.forceMerge(1);
  IndexReader r=DirectoryReader.open(writer);
  assertEquals(1,r.leaves().size());
  reader=r.leaves().get(0).reader();
  TestUtil.checkReader(reader);
  writer.close();
}
