{
  if (isWholeWorld) {
    if (path.getEdgePoints().length > 0)     return WITHIN;
    return OVERLAPS;
  }
  final int insideRectangle=isShapeInsideArea(path);
  if (insideRectangle == SOME_INSIDE) {
    return OVERLAPS;
  }
  final int insideShape=isAreaInsideShape(path);
  if (insideShape == SOME_INSIDE) {
    return OVERLAPS;
  }
  if (insideRectangle == ALL_INSIDE && insideShape == ALL_INSIDE) {
    return OVERLAPS;
  }
  if (path.intersects(minXPlane,notableMinXPoints,maxXPlane,minYPlane,maxYPlane,minZPlane,maxZPlane) || path.intersects(maxXPlane,notableMaxXPoints,minXPlane,minYPlane,maxYPlane,minZPlane,maxZPlane) || path.intersects(minYPlane,notableMinYPoints,maxYPlane,minXPlane,maxXPlane,minZPlane,maxZPlane)|| path.intersects(maxYPlane,notableMaxYPoints,minYPlane,minXPlane,maxXPlane,minZPlane,maxZPlane)|| path.intersects(minZPlane,notableMinZPoints,maxZPlane,minXPlane,maxXPlane,minYPlane,maxYPlane)|| path.intersects(maxZPlane,notableMaxZPoints,minZPlane,minXPlane,maxXPlane,minYPlane,maxYPlane)) {
    return OVERLAPS;
  }
  if (insideRectangle == ALL_INSIDE) {
    return WITHIN;
  }
  if (insideShape == ALL_INSIDE) {
    return CONTAINS;
  }
  return DISJOINT;
}
