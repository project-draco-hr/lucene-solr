{
{
    double d=6894.1;
    Point pCtr=pLL(-20,84);
    Point pTgt=pLL(-42,15);
    Assert.assertTrue(dc().distance(pCtr,pTgt) < d);
    Rectangle r=dc().calcBoxByDistFromPt(pCtr,d,ctx);
    Assert.assertEquals(SpatialRelation.CONTAINS,r.relate(pTgt,ctx));
    checkBBox(pCtr,d);
  }
  Assert.assertEquals("0 dist, horiz line",-45,dc().calcBoxByDistFromPtHorizAxis(ctx.makePoint(-180,-45),0,ctx),0);
  double MAXDIST=ctx.getUnits().earthCircumference() / 2;
  checkBBox(ctx.makePoint(0,0),MAXDIST);
  checkBBox(ctx.makePoint(0,0),MAXDIST * 0.999999);
  checkBBox(ctx.makePoint(0,0),0);
  checkBBox(ctx.makePoint(0,0),0.000001);
  checkBBox(ctx.makePoint(0,90),0.000001);
  checkBBox(ctx.makePoint(-32.7,-5.42),9829);
  checkBBox(ctx.makePoint(0,90 - 20),ctx.getDistCalc().degreesToDistance(20));
{
    double d=0.010;
    checkBBox(ctx.makePoint(0,90 - ctx.getDistCalc().distanceToDegrees(d + 0.001)),d);
  }
  for (int T=0; T < 100; T++) {
    double lat=-90 + LuceneTestCase.random.nextDouble() * 180;
    double lon=-180 + LuceneTestCase.random.nextDouble() * 360;
    Point ctr=ctx.makePoint(lon,lat);
    double dist=MAXDIST * LuceneTestCase.random.nextDouble();
    checkBBox(ctr,dist);
  }
}
