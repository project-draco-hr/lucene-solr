{
  super.firstInit(context);
  try {
    String serverPath=context.getResolvedEntityAttribute(SOLR_SERVER);
    if (serverPath == null) {
      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"SolrEntityProcessor: parameter 'url' is required");
    }
    HttpClient client=new HttpClient(new MultiThreadedHttpConnectionManager());
    URL url=new URL(serverPath);
    if ("xml".equals(context.getResolvedEntityAttribute(FORMAT))) {
      solrServer=new CommonsHttpSolrServer(url,client,new XMLResponseParser(),false);
      LOG.info("using XMLResponseParser");
    }
 else {
      solrServer=new CommonsHttpSolrServer(url,client);
      LOG.info("using BinaryResponseParser");
    }
  }
 catch (  MalformedURLException e) {
    throw new DataImportHandlerException(DataImportHandlerException.SEVERE,e);
  }
  this.queryString=context.getResolvedEntityAttribute(QUERY);
  if (this.queryString == null) {
    throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"SolrEntityProcessor: parameter 'query' is required");
  }
  String rowsP=context.getResolvedEntityAttribute(ROWS);
  if (rowsP != null) {
    rows=Integer.parseInt(rowsP);
  }
  String fqAsString=context.getResolvedEntityAttribute(FQ);
  if (fqAsString != null) {
    this.filterQueries=fqAsString.split(",");
  }
  String fieldsAsString=context.getResolvedEntityAttribute(FIELDS);
  if (fieldsAsString != null) {
    this.fields=fieldsAsString.split(",");
  }
  String timeoutAsString=context.getResolvedEntityAttribute(TIMEOUT);
  if (timeoutAsString != null) {
    this.timeout=Integer.parseInt(timeoutAsString);
  }
}
