{
  this.queryString=context.getResolvedEntityAttribute(QUERY);
  if (this.queryString == null) {
    throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"SolrEntityProcessor: parameter 'query' is required");
  }
  String rowsP=context.getResolvedEntityAttribute(CommonParams.ROWS);
  if (rowsP != null) {
    rows=Integer.parseInt(rowsP);
  }
  String fqAsString=context.getResolvedEntityAttribute(CommonParams.FQ);
  if (fqAsString != null) {
    this.filterQueries=fqAsString.split(",");
  }
  String fieldsAsString=context.getResolvedEntityAttribute(CommonParams.FL);
  if (fieldsAsString != null) {
    this.fields=fieldsAsString.split(",");
  }
  this.requestHandler=context.getResolvedEntityAttribute(CommonParams.QT);
  String timeoutAsString=context.getResolvedEntityAttribute(TIMEOUT);
  if (timeoutAsString != null) {
    this.timeout=Integer.parseInt(timeoutAsString);
  }
  SolrQuery solrQuery=new SolrQuery(queryString);
  solrQuery.setRows(rows);
  solrQuery.setStart(start);
  if (fields != null) {
    for (    String field : fields) {
      solrQuery.addField(field);
    }
  }
  solrQuery.setRequestHandler(requestHandler);
  solrQuery.setFilterQueries(filterQueries);
  solrQuery.setTimeAllowed(timeout * 1000);
  QueryResponse response=null;
  try {
    response=solrClient.query(solrQuery);
  }
 catch (  SolrServerException e) {
    if (ABORT.equals(onError)) {
      wrapAndThrow(SEVERE,e);
    }
 else     if (SKIP.equals(onError)) {
      wrapAndThrow(DataImportHandlerException.SKIP_ROW,e);
    }
  }
  return response == null ? null : response.getResults();
}
