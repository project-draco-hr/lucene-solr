{
  boolean success=false;
  this.clear();
  generation=generationFromSegmentsFileName(segmentFileName);
  lastGeneration=generation;
  ChecksumIndexInput input=new ChecksumIndexInput(directory.openInput(segmentFileName,IOContext.READ));
  try {
    final int format=input.readInt();
    final boolean checkCheckSum;
    if (format == CodecUtil.CODEC_MAGIC) {
      CodecUtil.checkHeaderNoMagic(input,"segments",VERSION_40,VERSION_40);
      version=input.readLong();
      counter=input.readInt();
      int numSegments=input.readInt();
      for (int seg=0; seg < numSegments; seg++) {
        String segName=input.readString();
        Codec codec=Codec.forName(input.readString());
        SegmentInfo info=codec.segmentInfosFormat().getSegmentInfosReader().read(directory,segName);
        info.setCodec(codec);
        info.setDelGen(input.readLong());
        info.setDelCount(input.readInt());
        add(info);
      }
      userData=input.readStringStringMap();
    }
 else {
      Lucene3xSegmentInfosReader.readLegacyInfos(this,directory,input,format);
      Codec codec=Codec.forName("Lucene3x");
      for (      SegmentInfo info : this) {
        info.setCodec(codec);
      }
    }
    final long checksumNow=input.getChecksum();
    final long checksumThen=input.readLong();
    if (checksumNow != checksumThen) {
      throw new CorruptIndexException("checksum mismatch in segments file (resource: " + input + ")");
    }
    success=true;
  }
  finally {
    if (!success) {
      this.clear();
      IOUtils.closeWhileHandlingException(input);
    }
 else {
      input.close();
    }
  }
}
