{
  Analyzer a=new MockSynonymAnalyzer();
  boolean oldSplitOnWhitespace=splitOnWhitespace;
  splitOnWhitespace=false;
  assertQueryEquals("+guinea pig",a,"+guinea pig");
  assertQueryEquals("-guinea pig",a,"-guinea pig");
  assertQueryEquals("!guinea pig",a,"-guinea pig");
  assertQueryEquals("guinea* pig",a,"guinea* pig");
  assertQueryEquals("guinea? pig",a,"guinea? pig");
  assertQueryEquals("guinea~2 pig",a,"guinea~2 pig");
  assertQueryEquals("guinea^2 pig",a,"(guinea)^2.0 pig");
  assertQueryEquals("guinea +pig",a,"guinea +pig");
  assertQueryEquals("guinea -pig",a,"guinea -pig");
  assertQueryEquals("guinea !pig",a,"guinea -pig");
  assertQueryEquals("guinea pig*",a,"guinea pig*");
  assertQueryEquals("guinea pig?",a,"guinea pig?");
  assertQueryEquals("guinea pig~2",a,"guinea pig~2");
  assertQueryEquals("guinea pig^2",a,"guinea (pig)^2.0");
  assertQueryEquals("field:guinea pig",a,"guinea pig");
  assertQueryEquals("guinea field:pig",a,"guinea pig");
  assertQueryEquals("NOT guinea pig",a,"-guinea pig");
  assertQueryEquals("guinea NOT pig",a,"guinea -pig");
  assertQueryEquals("guinea pig AND dogs",a,"guinea +pig +Synonym(dog dogs)");
  assertQueryEquals("dogs AND guinea pig",a,"+Synonym(dog dogs) +guinea pig");
  assertQueryEquals("guinea pig && dogs",a,"guinea +pig +Synonym(dog dogs)");
  assertQueryEquals("dogs && guinea pig",a,"+Synonym(dog dogs) +guinea pig");
  assertQueryEquals("guinea pig OR dogs",a,"guinea pig Synonym(dog dogs)");
  assertQueryEquals("dogs OR guinea pig",a,"Synonym(dog dogs) guinea pig");
  assertQueryEquals("guinea pig || dogs",a,"guinea pig Synonym(dog dogs)");
  assertQueryEquals("dogs || guinea pig",a,"Synonym(dog dogs) guinea pig");
  assertQueryEquals("\"guinea\" pig",a,"guinea pig");
  assertQueryEquals("guinea \"pig\"",a,"guinea pig");
  assertQueryEquals("(guinea) pig",a,"guinea pig");
  assertQueryEquals("guinea (pig)",a,"guinea pig");
  assertQueryEquals("/guinea/ pig",a,"/guinea/ pig");
  assertQueryEquals("guinea /pig/",a,"guinea /pig/");
  assertQueryEquals("(guinea pig)",a,"Synonym(cavy guinea) pig");
  assertQueryEquals("+(guinea pig)",a,"+(Synonym(cavy guinea) pig)");
  assertQueryEquals("-(guinea pig)",a,"-(Synonym(cavy guinea) pig)");
  assertQueryEquals("!(guinea pig)",a,"-(Synonym(cavy guinea) pig)");
  assertQueryEquals("NOT (guinea pig)",a,"-(Synonym(cavy guinea) pig)");
  assertQueryEquals("(guinea pig)^2",a,"(Synonym(cavy guinea) pig)^2.0");
  assertQueryEquals("field:(guinea pig)",a,"Synonym(cavy guinea) pig");
  assertQueryEquals("+small guinea pig",a,"+small Synonym(cavy guinea) pig");
  assertQueryEquals("-small guinea pig",a,"-small Synonym(cavy guinea) pig");
  assertQueryEquals("!small guinea pig",a,"-small Synonym(cavy guinea) pig");
  assertQueryEquals("NOT small guinea pig",a,"-small Synonym(cavy guinea) pig");
  assertQueryEquals("small* guinea pig",a,"small* Synonym(cavy guinea) pig");
  assertQueryEquals("small? guinea pig",a,"small? Synonym(cavy guinea) pig");
  assertQueryEquals("\"small\" guinea pig",a,"small Synonym(cavy guinea) pig");
  assertQueryEquals("guinea pig +running",a,"Synonym(cavy guinea) pig +running");
  assertQueryEquals("guinea pig -running",a,"Synonym(cavy guinea) pig -running");
  assertQueryEquals("guinea pig !running",a,"Synonym(cavy guinea) pig -running");
  assertQueryEquals("guinea pig NOT running",a,"Synonym(cavy guinea) pig -running");
  assertQueryEquals("guinea pig running*",a,"Synonym(cavy guinea) pig running*");
  assertQueryEquals("guinea pig running?",a,"Synonym(cavy guinea) pig running?");
  assertQueryEquals("guinea pig \"running\"",a,"Synonym(cavy guinea) pig running");
  assertQueryEquals("\"guinea pig\"~2",a,"\"(guinea cavy) pig\"~2");
  assertQueryEquals("field:\"guinea pig\"",a,"\"(guinea cavy) pig\"");
  splitOnWhitespace=oldSplitOnWhitespace;
}
