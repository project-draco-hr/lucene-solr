{
  QueryParser dumb=new QueryParser("field",new Analyzer1());
  dumb.setSplitOnWhitespace(false);
  BooleanQuery.Builder multiWordExpandedBqBuilder=new BooleanQuery.Builder();
  Query multiWordSynonymQuery=new SynonymQuery(new Term("field","guinea"),new Term("field","cavy"));
  multiWordExpandedBqBuilder.add(multiWordSynonymQuery,BooleanClause.Occur.SHOULD);
  multiWordExpandedBqBuilder.add(new TermQuery(new Term("field","pig")),BooleanClause.Occur.SHOULD);
  Query multiWordExpandedBq=multiWordExpandedBqBuilder.build();
  assertEquals(multiWordExpandedBq,dumb.parse("guinea pig"));
  MultiPhraseQuery.Builder multiWordExpandedMpqBuilder=new MultiPhraseQuery.Builder();
  multiWordExpandedMpqBuilder.add(new Term[]{new Term("field","guinea"),new Term("field","cavy")});
  multiWordExpandedMpqBuilder.add(new Term("field","pig"));
  Query multiWordExpandedMPQ=multiWordExpandedMpqBuilder.build();
  assertEquals(multiWordExpandedMPQ,dumb.parse("\"guinea pig\""));
  QueryParser smart=new SmartQueryParser();
  smart.setSplitOnWhitespace(false);
  assertEquals(multiWordExpandedBq,smart.parse("guinea pig"));
  PhraseQuery.Builder multiWordUnexpandedPqBuilder=new PhraseQuery.Builder();
  multiWordUnexpandedPqBuilder.add(new Term("field","guinea"));
  multiWordUnexpandedPqBuilder.add(new Term("field","pig"));
  Query multiWordUnexpandedPq=multiWordUnexpandedPqBuilder.build();
  assertEquals(multiWordUnexpandedPq,smart.parse("\"guinea pig\""));
}
