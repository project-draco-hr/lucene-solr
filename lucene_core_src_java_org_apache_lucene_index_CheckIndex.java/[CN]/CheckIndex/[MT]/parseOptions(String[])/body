{
  Options opts=new Options();
  int i=0;
  while (i < args.length) {
    String arg=args[i];
    if ("-fast".equals(arg)) {
      opts.doChecksumsOnly=true;
    }
 else     if ("-exorcise".equals(arg)) {
      opts.doExorcise=true;
    }
 else     if ("-crossCheckTermVectors".equals(arg)) {
      opts.doCrossCheckTermVectors=true;
    }
 else     if (arg.equals("-verbose")) {
      opts.verbose=true;
    }
 else     if (arg.equals("-segment")) {
      if (i == args.length - 1) {
        throw new IllegalArgumentException("ERROR: missing name for -segment option");
      }
      i++;
      opts.onlySegments.add(args[i]);
    }
 else     if ("-dir-impl".equals(arg)) {
      if (i == args.length - 1) {
        throw new IllegalArgumentException("ERROR: missing value for -dir-impl option");
      }
      i++;
      opts.dirImpl=args[i];
    }
 else {
      if (opts.indexPath != null) {
        throw new IllegalArgumentException("ERROR: unexpected extra argument '" + args[i] + "'");
      }
      opts.indexPath=args[i];
    }
    i++;
  }
  if (opts.indexPath == null) {
    throw new IllegalArgumentException("\nERROR: index path not specified" + "\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\n" + "\n"+ "  -exorcise: actually write a new segments_N file, removing any problematic segments\n"+ "  -fast: just verify file checksums, omitting logical integrity checks\n"+ "  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\n"+ "  -codec X: when exorcising, codec to write the new segments_N file with\n"+ "  -verbose: print additional details\n"+ "  -segment X: only check the specified segments.  This can be specified multiple\n"+ "              times, to check more than one segment, eg '-segment _2 -segment _a'.\n"+ "              You can't use this with the -exorcise option\n"+ "  -dir-impl X: use a specific " + FSDirectory.class.getSimpleName() + " implementation. "+ "If no package is specified the "+ FSDirectory.class.getPackage().getName()+ " package will be used.\n"+ "\n"+ "**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\n"+ "documents (perhaps many) to be permanently removed from the index.  Always make\n"+ "a backup copy of your index before running this!  Do not run this tool on an index\n"+ "that is actively being written to.  You have been warned!\n"+ "\n"+ "Run without -exorcise, this tool will open the index, report version information\n"+ "and report any exceptions it hits and what action it would take if -exorcise were\n"+ "specified.  With -exorcise, this tool will remove any segments that have issues and\n"+ "write a new segments_N file.  This means all documents contained in the affected\n"+ "segments will be removed.\n"+ "\n"+ "This tool exits with exit code 1 if the index cannot be opened or has any\n"+ "corruption, else 0.\n");
  }
  if (opts.onlySegments.size() == 0) {
    opts.onlySegments=null;
  }
 else   if (opts.doExorcise) {
    throw new IllegalArgumentException("ERROR: cannot specify both -exorcise and -segment");
  }
  if (opts.doChecksumsOnly && opts.doCrossCheckTermVectors) {
    throw new IllegalArgumentException("ERROR: cannot specify both -fast and -crossCheckTermVectors");
  }
  return opts;
}
