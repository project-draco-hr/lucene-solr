{
  final Status.LiveDocStatus status=new Status.LiveDocStatus();
  try {
    if (infoStream != null)     infoStream.print("    test: check live docs.....");
    final int numDocs=reader.numDocs();
    if (reader.hasDeletions()) {
      Bits liveDocs=reader.getLiveDocs();
      if (liveDocs == null) {
        throw new RuntimeException("segment should have deletions, but liveDocs is null");
      }
 else {
        int numLive=0;
        for (int j=0; j < liveDocs.length(); j++) {
          if (liveDocs.get(j)) {
            numLive++;
          }
        }
        if (numLive != numDocs) {
          throw new RuntimeException("liveDocs count mismatch: info=" + numDocs + ", vs bits="+ numLive);
        }
      }
      status.numDeleted=reader.numDeletedDocs();
      msg(infoStream,"OK [" + (status.numDeleted) + " deleted docs]");
    }
 else {
      Bits liveDocs=reader.getLiveDocs();
      if (liveDocs != null) {
        for (int j=0; j < liveDocs.length(); j++) {
          if (!liveDocs.get(j)) {
            throw new RuntimeException("liveDocs mismatch: info says no deletions but doc " + j + " is deleted.");
          }
        }
      }
      msg(infoStream,"OK");
    }
  }
 catch (  Throwable e) {
    if (failFast) {
      IOUtils.reThrow(e);
    }
    msg(infoStream,"ERROR [" + String.valueOf(e.getMessage()) + "]");
    status.error=e;
    if (infoStream != null) {
      e.printStackTrace(infoStream);
    }
  }
  return status;
}
