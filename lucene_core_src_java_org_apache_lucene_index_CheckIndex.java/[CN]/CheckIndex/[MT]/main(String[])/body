{
  boolean doFix=false;
  boolean doCrossCheckTermVectors=false;
  boolean verbose=false;
  List<String> onlySegments=new ArrayList<String>();
  String indexPath=null;
  String dirImpl=null;
  int i=0;
  while (i < args.length) {
    String arg=args[i];
    if ("-fix".equals(arg)) {
      doFix=true;
    }
 else     if ("-crossCheckTermVectors".equals(arg)) {
      doCrossCheckTermVectors=true;
    }
 else     if (arg.equals("-verbose")) {
      verbose=true;
    }
 else     if (arg.equals("-segment")) {
      if (i == args.length - 1) {
        System.out.println("ERROR: missing name for -segment option");
        System.exit(1);
      }
      i++;
      onlySegments.add(args[i]);
    }
 else     if ("-dir-impl".equals(arg)) {
      if (i == args.length - 1) {
        System.out.println("ERROR: missing value for -dir-impl option");
        System.exit(1);
      }
      i++;
      dirImpl=args[i];
    }
 else {
      if (indexPath != null) {
        System.out.println("ERROR: unexpected extra argument '" + args[i] + "'");
        System.exit(1);
      }
      indexPath=args[i];
    }
    i++;
  }
  if (indexPath == null) {
    System.out.println("\nERROR: index path not specified");
    System.out.println("\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\n" + "\n" + "  -fix: actually write a new segments_N file, removing any problematic segments\n"+ "  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\n"+ "  -codec X: when fixing, codec to write the new segments_N file with\n"+ "  -verbose: print additional details\n"+ "  -segment X: only check the specified segments.  This can be specified multiple\n"+ "              times, to check more than one segment, eg '-segment _2 -segment _a'.\n"+ "              You can't use this with the -fix option\n"+ "  -dir-impl X: use a specific " + FSDirectory.class.getSimpleName() + " implementation. "+ "If no package is specified the "+ FSDirectory.class.getPackage().getName()+ " package will be used.\n"+ "\n"+ "**WARNING**: -fix should only be used on an emergency basis as it will cause\n"+ "documents (perhaps many) to be permanently removed from the index.  Always make\n"+ "a backup copy of your index before running this!  Do not run this tool on an index\n"+ "that is actively being written to.  You have been warned!\n"+ "\n"+ "Run without -fix, this tool will open the index, report version information\n"+ "and report any exceptions it hits and what action it would take if -fix were\n"+ "specified.  With -fix, this tool will remove any segments that have issues and\n"+ "write a new segments_N file.  This means all documents contained in the affected\n"+ "segments will be removed.\n"+ "\n"+ "This tool exits with exit code 1 if the index cannot be opened or has any\n"+ "corruption, else 0.\n");
    System.exit(1);
  }
  if (!assertsOn())   System.out.println("\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled");
  if (onlySegments.size() == 0)   onlySegments=null;
 else   if (doFix) {
    System.out.println("ERROR: cannot specify both -fix and -segment");
    System.exit(1);
  }
  System.out.println("\nOpening index @ " + indexPath + "\n");
  Directory dir=null;
  try {
    if (dirImpl == null) {
      dir=FSDirectory.open(new File(indexPath));
    }
 else {
      dir=CommandLineUtil.newFSDirectory(dirImpl,new File(indexPath));
    }
  }
 catch (  Throwable t) {
    System.out.println("ERROR: could not open directory \"" + indexPath + "\"; exiting");
    t.printStackTrace(System.out);
    System.exit(1);
  }
  CheckIndex checker=new CheckIndex(dir);
  checker.setCrossCheckTermVectors(doCrossCheckTermVectors);
  checker.setInfoStream(System.out,verbose);
  Status result=checker.checkIndex(onlySegments);
  if (result.missingSegments) {
    System.exit(1);
  }
  if (!result.clean) {
    if (!doFix) {
      System.out.println("WARNING: would write new segments file, and " + result.totLoseDocCount + " documents would be lost, if -fix were specified\n");
    }
 else {
      System.out.println("WARNING: " + result.totLoseDocCount + " documents will be lost\n");
      System.out.println("NOTE: will write new segments file in 5 seconds; this will remove " + result.totLoseDocCount + " docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!");
      for (int s=0; s < 5; s++) {
        Thread.sleep(1000);
        System.out.println("  " + (5 - s) + "...");
      }
      System.out.println("Writing...");
      checker.fixIndex(result);
      System.out.println("OK");
      System.out.println("Wrote new segments file \"" + result.newSegments.getSegmentsFileName() + "\"");
    }
  }
  System.out.println("");
  final int exitCode;
  if (result.clean == true)   exitCode=0;
 else   exitCode=1;
  System.exit(exitCode);
}
