{
switch (fi.getDocValuesType()) {
case SORTED:
    status.totalSortedFields++;
  checkSortedDocValues(fi.name,reader,reader.getSortedDocValues(fi.name));
if (reader.getBinaryDocValues(fi.name) != null || reader.getNumericDocValues(fi.name) != null || reader.getSortedSetDocValues(fi.name) != null) {
  throw new RuntimeException(fi.name + " returns multiple docvalues types!");
}
break;
case SORTED_SET:
status.totalSortedSetFields++;
checkSortedSetDocValues(fi.name,reader,reader.getSortedSetDocValues(fi.name));
if (reader.getBinaryDocValues(fi.name) != null || reader.getNumericDocValues(fi.name) != null || reader.getSortedDocValues(fi.name) != null) {
throw new RuntimeException(fi.name + " returns multiple docvalues types!");
}
break;
case BINARY:
status.totalBinaryFields++;
checkBinaryDocValues(fi.name,reader,reader.getBinaryDocValues(fi.name));
if (reader.getNumericDocValues(fi.name) != null || reader.getSortedDocValues(fi.name) != null || reader.getSortedSetDocValues(fi.name) != null) {
throw new RuntimeException(fi.name + " returns multiple docvalues types!");
}
break;
case NUMERIC:
status.totalNumericFields++;
checkNumericDocValues(fi.name,reader,reader.getNumericDocValues(fi.name));
if (reader.getBinaryDocValues(fi.name) != null || reader.getSortedDocValues(fi.name) != null || reader.getSortedSetDocValues(fi.name) != null) {
throw new RuntimeException(fi.name + " returns multiple docvalues types!");
}
break;
default :
throw new AssertionError();
}
}
