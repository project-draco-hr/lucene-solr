{
  final Status.DocValuesStatus status=new Status.DocValuesStatus();
  try {
    if (infoStream != null) {
      infoStream.print("    test: docvalues...........");
    }
    for (    FieldInfo fieldInfo : reader.getFieldInfos()) {
      if (fieldInfo.hasDocValues()) {
        status.totalValueFields++;
        checkDocValues(fieldInfo,reader,infoStream,status);
      }
 else {
        if (reader.getBinaryDocValues(fieldInfo.name) != null || reader.getNumericDocValues(fieldInfo.name) != null || reader.getSortedDocValues(fieldInfo.name) != null || reader.getSortedSetDocValues(fieldInfo.name) != null || reader.getDocsWithField(fieldInfo.name) != null) {
          throw new RuntimeException("field: " + fieldInfo.name + " has docvalues but should omit them!");
        }
      }
    }
    msg(infoStream,"OK [" + status.totalValueFields + " docvalues fields; "+ status.totalBinaryFields+ " BINARY; "+ status.totalNumericFields+ " NUMERIC; "+ status.totalSortedFields+ " SORTED; "+ status.totalSortedNumericFields+ " SORTED_NUMERIC; "+ status.totalSortedSetFields+ " SORTED_SET]");
  }
 catch (  Throwable e) {
    msg(infoStream,"ERROR [" + String.valueOf(e.getMessage()) + "]");
    status.error=e;
    if (infoStream != null) {
      e.printStackTrace(infoStream);
    }
  }
  return status;
}
