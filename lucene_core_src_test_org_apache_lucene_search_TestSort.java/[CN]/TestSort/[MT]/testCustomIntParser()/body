{
  List<String> letters=Arrays.asList(new String[]{"A","B","C","D","E","F","G","H","I","J"});
  Collections.shuffle(letters,random());
  Directory dir=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
  for (  String letter : letters) {
    Document doc=new Document();
    doc.add(newStringField("parser",letter,Field.Store.YES));
    iw.addDocument(doc);
  }
  IndexReader ir=iw.getReader();
  iw.shutdown();
  IndexSearcher searcher=newSearcher(ir);
  Sort sort=new Sort(new SortField("parser",new FieldCache.IntParser(){
    @Override public int parseInt(    BytesRef term){
      return (term.bytes[term.offset] - 'A') * 123456;
    }
    @Override public TermsEnum termsEnum(    Terms terms) throws IOException {
      return terms.iterator(null);
    }
  }
),SortField.FIELD_DOC);
  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);
  assertEquals(10,td.totalHits);
  Collections.sort(letters);
  for (int i=0; i < letters.size(); i++) {
    assertEquals(letters.get(i),searcher.doc(td.scoreDocs[i].doc).get("parser"));
  }
  ir.close();
  dir.close();
}
