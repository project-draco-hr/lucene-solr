{
  int numPatterns=atLeast(100);
  long start=System.currentTimeMillis();
  long maxTime=1000 * 2;
  for (int i=0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {
    final Pattern p=randomPattern();
    final String replacement=_TestUtil.randomSimpleString(random);
    Analyzer a=new Analyzer(){
      @Override protected TokenStreamComponents createComponents(      String fieldName,      Reader reader){
        Tokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.WHITESPACE,false);
        return new TokenStreamComponents(tokenizer,tokenizer);
      }
      @Override protected Reader initReader(      Reader reader){
        return new PatternReplaceCharFilter(p,replacement,CharReader.get(reader));
      }
    }
;
    long s=System.currentTimeMillis();
    checkRandomData(random,a,1000 * RANDOM_MULTIPLIER,true);
    System.out.println((System.currentTimeMillis() - s) / 1000.0 + " > " + p);
  }
}
