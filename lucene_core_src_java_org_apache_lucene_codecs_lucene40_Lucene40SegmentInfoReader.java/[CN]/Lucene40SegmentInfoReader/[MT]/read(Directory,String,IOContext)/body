{
  final String fileName=IndexFileNames.segmentFileName(segment,"",Lucene40SegmentInfoFormat.SI_EXTENSION);
  final IndexInput input=dir.openInput(fileName,context);
  boolean success=false;
  try {
    CodecUtil.checkHeader(input,Lucene40SegmentInfoFormat.CODEC_NAME,Lucene40SegmentInfoFormat.VERSION_START,Lucene40SegmentInfoFormat.VERSION_CURRENT);
    final String version=input.readString();
    final int docCount=input.readInt();
    final Map<Integer,Long> normGen=null;
    final boolean isCompoundFile=input.readByte() == SegmentInfo.YES;
    final Map<String,String> diagnostics=input.readStringStringMap();
    final Map<String,String> attributes=input.readStringStringMap();
    final Set<String> files=input.readStringSet();
    final SegmentInfo si=new SegmentInfo(dir,version,segment,docCount,normGen,isCompoundFile,null,diagnostics,Collections.unmodifiableMap(attributes));
    si.setFiles(files);
    success=true;
    return si;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(input);
    }
 else {
      input.close();
    }
  }
}
