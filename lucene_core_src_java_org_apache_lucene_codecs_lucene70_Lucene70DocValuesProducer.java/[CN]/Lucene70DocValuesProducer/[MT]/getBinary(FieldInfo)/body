{
  BinaryEntry entry=binaries.get(field.name);
  if (entry.docsWithFieldOffset == -2) {
    return DocValues.emptyBinary();
  }
  final IndexInput bytesSlice=data.slice("fixed-binary",entry.dataOffset,entry.dataLength);
  if (entry.docsWithFieldOffset == -1) {
    if (entry.minLength == entry.maxLength) {
      final int length=entry.maxLength;
      return new DenseBinaryDocValues(maxDoc){
        final BytesRef bytes=new BytesRef(new byte[length],0,length);
        @Override public BytesRef binaryValue() throws IOException {
          bytesSlice.seek((long)doc * length);
          bytesSlice.readBytes(bytes.bytes,0,length);
          return bytes;
        }
      }
;
    }
 else {
      final RandomAccessInput addressesData=this.data.randomAccessSlice(entry.addressesOffset,entry.addressesLength);
      final LongValues addresses=DirectMonotonicReader.getInstance(entry.addressesMeta,addressesData);
      return new DenseBinaryDocValues(maxDoc){
        final BytesRef bytes=new BytesRef(new byte[entry.maxLength],0,entry.maxLength);
        @Override public BytesRef binaryValue() throws IOException {
          long startOffset=addresses.get(doc);
          bytes.length=(int)(addresses.get(doc + 1L) - startOffset);
          bytesSlice.seek(startOffset);
          bytesSlice.readBytes(bytes.bytes,0,bytes.length);
          return bytes;
        }
      }
;
    }
  }
 else {
    final IndexedDISI disi=new IndexedDISI(data,entry.docsWithFieldOffset,entry.docsWithFieldLength,entry.numDocsWithField);
    if (entry.minLength == entry.maxLength) {
      final int length=entry.maxLength;
      return new SparseBinaryDocValues(disi){
        final BytesRef bytes=new BytesRef(new byte[length],0,length);
        @Override public BytesRef binaryValue() throws IOException {
          bytesSlice.seek((long)disi.index() * length);
          bytesSlice.readBytes(bytes.bytes,0,length);
          return bytes;
        }
      }
;
    }
 else {
      final RandomAccessInput addressesData=this.data.randomAccessSlice(entry.addressesOffset,entry.addressesLength);
      final LongValues addresses=DirectMonotonicReader.getInstance(entry.addressesMeta,addressesData);
      return new SparseBinaryDocValues(disi){
        final BytesRef bytes=new BytesRef(new byte[entry.maxLength],0,entry.maxLength);
        @Override public BytesRef binaryValue() throws IOException {
          final int index=disi.index();
          long startOffset=addresses.get(index);
          bytes.length=(int)(addresses.get(index + 1L) - startOffset);
          bytesSlice.seek(startOffset);
          bytesSlice.readBytes(bytes.bytes,0,bytes.length);
          return bytes;
        }
      }
;
    }
  }
}
