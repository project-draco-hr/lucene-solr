{
  if (entry.docsWithFieldOffset == -2) {
    return DocValues.emptyNumeric();
  }
 else   if (entry.docsWithFieldOffset == -1) {
    if (entry.bitsPerValue == 0) {
      return new DenseNumericDocValues(maxDoc){
        @Override public long longValue() throws IOException {
          return entry.minValue;
        }
      }
;
    }
 else {
      final RandomAccessInput slice=data.randomAccessSlice(entry.valuesOffset,entry.valuesLength);
      final LongValues values=DirectReader.getInstance(slice,entry.bitsPerValue);
      if (entry.table != null) {
        final long[] table=entry.table;
        return new DenseNumericDocValues(maxDoc){
          @Override public long longValue() throws IOException {
            return table[(int)values.get(doc)];
          }
        }
;
      }
 else {
        final long mul=entry.gcd;
        final long delta=entry.minValue;
        return new DenseNumericDocValues(maxDoc){
          @Override public long longValue() throws IOException {
            return mul * values.get(doc) + delta;
          }
        }
;
      }
    }
  }
 else {
    final IndexedDISI disi=new IndexedDISI(data,entry.docsWithFieldOffset,entry.docsWithFieldLength,entry.numValues);
    if (entry.bitsPerValue == 0) {
      return new SparseNumericDocValues(disi){
        @Override public long longValue() throws IOException {
          return entry.minValue;
        }
      }
;
    }
 else {
      final RandomAccessInput slice=data.randomAccessSlice(entry.valuesOffset,entry.valuesLength);
      final LongValues values=DirectReader.getInstance(slice,entry.bitsPerValue);
      if (entry.table != null) {
        final long[] table=entry.table;
        return new SparseNumericDocValues(disi){
          @Override public long longValue() throws IOException {
            return table[(int)values.get(disi.index())];
          }
        }
;
      }
 else {
        final long mul=entry.gcd;
        final long delta=entry.minValue;
        return new SparseNumericDocValues(disi){
          @Override public long longValue() throws IOException {
            return mul * values.get(disi.index()) + delta;
          }
        }
;
      }
    }
  }
}
