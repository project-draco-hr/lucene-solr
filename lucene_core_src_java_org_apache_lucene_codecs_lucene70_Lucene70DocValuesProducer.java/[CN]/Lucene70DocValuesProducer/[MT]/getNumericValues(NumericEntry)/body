{
  if (entry.bitsPerValue == 0) {
    return new LongValues(){
      @Override public long get(      long index){
        return entry.minValue;
      }
    }
;
  }
 else {
    final RandomAccessInput slice=data.randomAccessSlice(entry.valuesOffset,entry.valuesLength);
    final LongValues values=DirectReader.getInstance(slice,entry.bitsPerValue);
    if (entry.table != null) {
      final long[] table=entry.table;
      return new LongValues(){
        @Override public long get(        long index){
          return table[(int)values.get(index)];
        }
      }
;
    }
 else     if (entry.gcd != 1) {
      final long gcd=entry.gcd;
      final long minValue=entry.minValue;
      return new LongValues(){
        @Override public long get(        long index){
          return values.get(index) * gcd + minValue;
        }
      }
;
    }
 else     if (entry.minValue != 0) {
      final long minValue=entry.minValue;
      return new LongValues(){
        @Override public long get(        long index){
          return values.get(index) + minValue;
        }
      }
;
    }
 else {
      return values;
    }
  }
}
