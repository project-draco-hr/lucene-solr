{
  SortedNumericEntry entry=sortedNumerics.get(field.name);
  if (entry.numValues == entry.numDocsWithField) {
    return DocValues.singleton(getNumeric(entry));
  }
  final RandomAccessInput addressesInput=data.randomAccessSlice(entry.addressesOffset,entry.addressesLength);
  final LongValues addresses=DirectMonotonicReader.getInstance(entry.addressesMeta,addressesInput);
  final LongValues values=getNumericValues(entry);
  if (entry.docsWithFieldOffset == -1) {
    return new SortedNumericDocValues(){
      int doc=-1;
      long start, end;
      int count;
      @Override public int nextDoc() throws IOException {
        return advance(doc + 1);
      }
      @Override public int docID(){
        return doc;
      }
      @Override public long cost(){
        return maxDoc;
      }
      @Override public int advance(      int target) throws IOException {
        if (target >= maxDoc) {
          return doc=NO_MORE_DOCS;
        }
        start=addresses.get(target);
        end=addresses.get(target + 1L);
        count=(int)(end - start);
        return doc=target;
      }
      @Override public long nextValue() throws IOException {
        return values.get(start++);
      }
      @Override public int docValueCount(){
        return count;
      }
    }
;
  }
 else {
    final IndexedDISI disi=new IndexedDISI(data,entry.docsWithFieldOffset,entry.docsWithFieldLength,entry.numDocsWithField);
    return new SortedNumericDocValues(){
      boolean set;
      long start, end;
      int count;
      @Override public int nextDoc() throws IOException {
        set=false;
        return disi.nextDoc();
      }
      @Override public int docID(){
        return disi.docID();
      }
      @Override public long cost(){
        return disi.cost();
      }
      @Override public int advance(      int target) throws IOException {
        set=false;
        return disi.advance(target);
      }
      @Override public long nextValue() throws IOException {
        set();
        return values.get(start++);
      }
      @Override public int docValueCount(){
        set();
        return count;
      }
      private void set(){
        if (set == false) {
          final int index=disi.index();
          start=addresses.get(index);
          end=addresses.get(index + 1L);
          count=(int)(end - start);
          set=true;
        }
      }
    }
;
  }
}
