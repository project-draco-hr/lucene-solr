{
  Directory store=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),store,newIndexWriterConfig(new MockAnalyzer(random())).setSimilarity(new SimpleSimilarity()));
  Document d1=new Document();
  d1.add(newTextField("field","a c",Field.Store.YES));
  Document d2=new Document();
  d2.add(newTextField("field","a b c",Field.Store.YES));
  writer.addDocument(d1);
  writer.addDocument(d2);
  IndexReader reader=writer.getReader();
  writer.shutdown();
  IndexSearcher searcher=newSearcher(reader);
  searcher.setSimilarity(new SimpleSimilarity());
  Term a=new Term("field","a");
  Term b=new Term("field","b");
  Term c=new Term("field","c");
  searcher.search(new TermQuery(b),new SimpleCollector(){
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      assertEquals(1.0f,scorer.score(),0);
    }
    public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  BooleanQuery bq=new BooleanQuery();
  bq.add(new TermQuery(a),BooleanClause.Occur.SHOULD);
  bq.add(new TermQuery(b),BooleanClause.Occur.SHOULD);
  searcher.search(bq,new SimpleCollector(){
    private int base=0;
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      assertEquals((float)doc + base + 1,scorer.score(),0);
    }
    @Override protected void doSetNextReader(    AtomicReaderContext context) throws IOException {
      base=context.docBase;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  PhraseQuery pq=new PhraseQuery();
  pq.add(a);
  pq.add(c);
  searcher.search(pq,new SimpleCollector(){
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      assertEquals(1.0f,scorer.score(),0);
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  pq.setSlop(2);
  searcher.search(pq,new SimpleCollector(){
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      assertEquals(2.0f,scorer.score(),0);
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  reader.close();
  store.close();
}
