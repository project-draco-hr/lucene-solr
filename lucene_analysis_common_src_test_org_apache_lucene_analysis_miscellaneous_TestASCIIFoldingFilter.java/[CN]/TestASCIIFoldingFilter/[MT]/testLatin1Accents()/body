{
  TokenStream stream=whitespaceMockTokenizer("Des mot cl??s ?? LA CHA??NE ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??" + " ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??" + " ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??? ???");
  ASCIIFoldingFilter filter=new ASCIIFoldingFilter(stream,random().nextBoolean());
  CharTermAttribute termAtt=filter.getAttribute(CharTermAttribute.class);
  filter.reset();
  assertNextTerms("Des","Des",filter,termAtt);
  assertNextTerms("mot","mot",filter,termAtt);
  assertNextTerms("cl??s","cles",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("LA","LA",filter,termAtt);
  assertNextTerms("CHA??NE","CHAINE",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","A",filter,termAtt);
  assertNextTerms("??","AE",filter,termAtt);
  assertNextTerms("??","C",filter,termAtt);
  assertNextTerms("??","E",filter,termAtt);
  assertNextTerms("??","E",filter,termAtt);
  assertNextTerms("??","E",filter,termAtt);
  assertNextTerms("??","E",filter,termAtt);
  assertNextTerms("??","I",filter,termAtt);
  assertNextTerms("??","I",filter,termAtt);
  assertNextTerms("??","I",filter,termAtt);
  assertNextTerms("??","I",filter,termAtt);
  assertNextTerms("??","IJ",filter,termAtt);
  assertNextTerms("??","D",filter,termAtt);
  assertNextTerms("??","N",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","O",filter,termAtt);
  assertNextTerms("??","OE",filter,termAtt);
  assertNextTerms("??","TH",filter,termAtt);
  assertNextTerms("??","U",filter,termAtt);
  assertNextTerms("??","U",filter,termAtt);
  assertNextTerms("??","U",filter,termAtt);
  assertNextTerms("??","U",filter,termAtt);
  assertNextTerms("??","Y",filter,termAtt);
  assertNextTerms("??","Y",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","a",filter,termAtt);
  assertNextTerms("??","ae",filter,termAtt);
  assertNextTerms("??","c",filter,termAtt);
  assertNextTerms("??","e",filter,termAtt);
  assertNextTerms("??","e",filter,termAtt);
  assertNextTerms("??","e",filter,termAtt);
  assertNextTerms("??","e",filter,termAtt);
  assertNextTerms("??","i",filter,termAtt);
  assertNextTerms("??","i",filter,termAtt);
  assertNextTerms("??","i",filter,termAtt);
  assertNextTerms("??","i",filter,termAtt);
  assertNextTerms("??","ij",filter,termAtt);
  assertNextTerms("??","d",filter,termAtt);
  assertNextTerms("??","n",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","o",filter,termAtt);
  assertNextTerms("??","oe",filter,termAtt);
  assertNextTerms("??","ss",filter,termAtt);
  assertNextTerms("??","th",filter,termAtt);
  assertNextTerms("??","u",filter,termAtt);
  assertNextTerms("??","u",filter,termAtt);
  assertNextTerms("??","u",filter,termAtt);
  assertNextTerms("??","u",filter,termAtt);
  assertNextTerms("??","y",filter,termAtt);
  assertNextTerms("??","y",filter,termAtt);
  assertNextTerms("???","fi",filter,termAtt);
  assertNextTerms("???","fl",filter,termAtt);
  assertFalse(filter.incrementToken());
}
