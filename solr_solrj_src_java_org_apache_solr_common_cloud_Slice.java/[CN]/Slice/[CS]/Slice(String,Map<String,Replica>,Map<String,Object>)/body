{
  super(props == null ? new LinkedHashMap<String,Object>(2) : new LinkedHashMap<String,Object>(props));
  this.name=name;
  Object rangeObj=propMap.get(RANGE);
  if (propMap.containsKey(STATE) && propMap.get(STATE) != null)   this.state=(String)propMap.get(STATE);
 else {
    this.state=ACTIVE;
    propMap.put(STATE,this.state);
  }
  DocRouter.Range tmpRange=null;
  if (rangeObj instanceof DocRouter.Range) {
    tmpRange=(DocRouter.Range)rangeObj;
  }
 else   if (rangeObj != null) {
    tmpRange=DocRouter.DEFAULT.fromString(rangeObj.toString());
  }
  range=tmpRange;
  if (propMap.containsKey(PARENT) && propMap.get(PARENT) != null)   this.parent=(String)propMap.get(PARENT);
 else   this.parent=null;
  replicationFactor=null;
  this.replicas=replicas != null ? replicas : makeReplicas((Map<String,Object>)propMap.get(REPLICAS));
  propMap.put(REPLICAS,this.replicas);
  Map<String,Object> rules=(Map<String,Object>)propMap.get("routingRules");
  if (rules != null) {
    this.routingRules=new HashMap<String,RoutingRule>();
    for (    Map.Entry<String,Object> entry : rules.entrySet()) {
      Object o=entry.getValue();
      if (o instanceof Map) {
        Map map=(Map)o;
        RoutingRule rule=new RoutingRule(entry.getKey(),map);
        routingRules.put(entry.getKey(),rule);
      }
 else {
        routingRules.put(entry.getKey(),(RoutingRule)o);
      }
    }
  }
 else {
    this.routingRules=null;
  }
  leader=findLeader();
}
