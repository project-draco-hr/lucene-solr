{
  Random random=new Random(random().nextLong());
  final MockDirectoryWrapper dir=newDirectory();
  dir.setCheckIndexOnClose(false);
  final LineFileDocs docs=new LineFileDocs(random,true);
  if (random().nextBoolean()) {
    Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat(random().nextBoolean(),random.nextFloat())));
  }
  final IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  final int SIZE=atLeast(20);
  int id=0;
  IndexReader r=null;
  final int numUpdates=(int)(SIZE * (2 + (TEST_NIGHTLY ? 200 * random().nextDouble() : 5 * random().nextDouble())));
  if (VERBOSE) {
    System.out.println("TEST: numUpdates=" + numUpdates);
  }
  for (int docIter=0; docIter < numUpdates; docIter++) {
    final Document doc=docs.nextDoc();
    final String myID="" + id;
    if (id == SIZE - 1) {
      id=0;
    }
 else {
      id++;
    }
    ((Field)doc.getField("docid")).setStringValue(myID);
    w.updateDocument(new Term("docid",myID),doc);
    if (docIter >= SIZE && random().nextInt(50) == 17) {
      if (r != null) {
        r.close();
      }
      final boolean applyDeletions=random().nextBoolean();
      r=w.getReader(applyDeletions);
      assertTrue("applyDeletions=" + applyDeletions + " r.numDocs()="+ r.numDocs()+ " vs SIZE="+ SIZE,!applyDeletions || r.numDocs() == SIZE);
    }
  }
  if (r != null) {
    r.close();
  }
  w.commit();
  assertEquals(SIZE,w.numDocs());
  w.close();
  docs.close();
  _TestUtil.checkIndex(dir);
  dir.close();
}
