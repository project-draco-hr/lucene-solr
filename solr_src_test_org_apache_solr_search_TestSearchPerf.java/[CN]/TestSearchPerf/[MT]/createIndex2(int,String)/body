{
  Set<String> fieldSet=new HashSet<String>(Arrays.asList(fields));
  SolrQueryRequest req=lrf.makeRequest();
  SolrQueryResponse rsp=new SolrQueryResponse();
  UpdateRequestProcessorChain processorChain=req.getCore().getUpdateProcessingChain(null);
  UpdateRequestProcessor processor=processorChain.createProcessor(req,rsp);
  boolean foomany_s=fieldSet.contains("foomany_s");
  boolean foo1_s=fieldSet.contains("foo1_s");
  boolean foo2_s=fieldSet.contains("foo2_s");
  boolean foo4_s=fieldSet.contains("foo4_s");
  boolean foo8_s=fieldSet.contains("foo8_s");
  boolean t10_100_ws=fieldSet.contains("t10_100_ws");
  for (int i=0; i < nDocs; i++) {
    SolrInputDocument doc=new SolrInputDocument();
    doc.addField("id",Float.toString(i));
    if (foomany_s) {
      doc.addField("foomany_s",t(r.nextInt(nDocs * 10)));
    }
    if (foo1_s) {
      doc.addField("foo1_s",t(0));
    }
    if (foo2_s) {
      doc.addField("foo2_s",r.nextInt(2));
    }
    if (foo4_s) {
      doc.addField("foo4_s",r.nextInt(4));
    }
    if (foo8_s) {
      doc.addField("foo8_s",r.nextInt(8));
    }
    if (t10_100_ws) {
      StringBuilder sb=new StringBuilder(9 * 100);
      for (int j=0; j < 100; j++) {
        sb.append(' ');
        sb.append(t(r.nextInt(10)));
      }
      doc.addField("t10_100_ws",sb.toString());
    }
    AddUpdateCommand cmd=new AddUpdateCommand(req);
    cmd.solrDoc=doc;
    processor.processAdd(cmd);
  }
  processor.finish();
  req.close();
  assertU(commit());
  req=lrf.makeRequest();
  assertEquals(nDocs,req.getSearcher().maxDoc());
  req.close();
}
