{
  String[] header;
  String headIndicator=WriteLineDocTask.FIELDS_HEADER_INDICATOR + WriteLineDocTask.SEP;
  if (line.startsWith(headIndicator)) {
    header=line.substring(headIndicator.length()).split(Character.toString(WriteLineDocTask.SEP));
    skipHeaderLine=true;
  }
 else {
    header=WriteLineDocTask.DEFAULT_FIELDS;
  }
  String docDataLineReaderClassName=getConfig().get("line.parser",null);
  if (docDataLineReaderClassName != null) {
    try {
      final Class<? extends LineParser> clazz=Class.forName(docDataLineReaderClassName).asSubclass(LineParser.class);
      Constructor<? extends LineParser> cnstr=clazz.getConstructor(new Class[]{String[].class});
      return cnstr.newInstance((Object)header);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to instantiate " + docDataLineReaderClassName,e);
    }
  }
  if (Arrays.deepEquals(header,WriteLineDocTask.DEFAULT_FIELDS)) {
    return new SimpleLineParser(header);
  }
  return new HeaderLineParser(header);
}
