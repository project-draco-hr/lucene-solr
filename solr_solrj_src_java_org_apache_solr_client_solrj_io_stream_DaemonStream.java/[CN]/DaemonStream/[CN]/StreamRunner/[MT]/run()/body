{
  int errors=0;
  setStartTime(new Date().getTime());
  OUTER:   while (!getShutdown()) {
    long now=new Date().getTime();
    if ((now - lastRun) > this.runInterval) {
      lastRun=now;
      try {
        tupleStream.open();
        INNER:         while (true) {
          Tuple tuple=tupleStream.read();
          if (tuple.EOF) {
            errors=0;
            if (tuple.fields.containsKey("sleepMillis")) {
              this.sleepMillis=tuple.getLong("sleepMillis");
              this.runInterval=-1;
            }
            break INNER;
          }
 else           if (!eatTuples) {
            try {
              queue.put(tuple);
            }
 catch (            InterruptedException e) {
              break OUTER;
            }
          }
        }
      }
 catch (      IOException e) {
        exception=e;
        logger.error("Error in DaemonStream:" + id,e);
        ++errors;
        if (errors > 100) {
          logger.error("Too many consectutive errors. Stopping DaemonStream:" + id);
          break OUTER;
        }
      }
catch (      Throwable t) {
        logger.error("Fatal Error in DaemonStream:" + id,t);
        break OUTER;
      }
 finally {
        try {
          tupleStream.close();
        }
 catch (        IOException e1) {
          if (exception == null) {
            exception=e1;
            logger.error("Error in DaemonStream:" + id,e1);
            break OUTER;
          }
        }
      }
    }
    incrementIterations();
    if (sleepMillis > 0) {
      try {
        Thread.sleep(sleepMillis);
      }
 catch (      InterruptedException e) {
        logger.error("Error in DaemonStream:" + id,e);
        break OUTER;
      }
    }
  }
  if (!eatTuples) {
    Map m=new HashMap();
    m.put("EOF",true);
    Tuple tuple=new Tuple(m);
    try {
      queue.put(tuple);
    }
 catch (    InterruptedException e) {
      logger.error("Error in DaemonStream:" + id,e);
    }
  }
  setStopTime(new Date().getTime());
}
