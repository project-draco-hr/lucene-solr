{
  final long stopTime=System.currentTimeMillis() + 1000;
  SnapshotDeletionPolicy dp=new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
  final IndexWriter writer=new IndexWriter(dir,new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),dp,IndexWriter.MaxFieldLength.UNLIMITED);
  writer.setMaxBufferedDocs(2);
  final Thread t=new Thread(){
    @Override public void run(){
      Document doc=new Document();
      doc.add(new Field("content","aaa",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
      while (System.currentTimeMillis() < stopTime) {
        for (int i=0; i < 27; i++) {
          try {
            writer.addDocument(doc);
          }
 catch (          Throwable t) {
            t.printStackTrace(System.out);
            fail("addDocument failed");
          }
          if (i % 2 == 0) {
            try {
              writer.commit();
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
        }
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException ie) {
          throw new ThreadInterruptedException(ie);
        }
      }
    }
  }
;
  t.start();
  while (System.currentTimeMillis() < stopTime) {
    backupIndex(dir,dp);
    Thread.sleep(20);
    if (!t.isAlive())     break;
  }
  t.join();
  Document doc=new Document();
  doc.add(new Field("content","aaa",Field.Store.YES,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS));
  writer.addDocument(doc);
  writer.close();
  TestIndexWriter.assertNoUnreferencedFiles(dir,"some files were not deleted but should have been");
}
