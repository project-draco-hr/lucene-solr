{
  String qpattern="\\'([^\\']+)\\'";
  String[][] tests={{"-1","--","aaa--bbb--ccc","aaa bbb ccc"},{"-1",":","aaa:bbb:ccc","aaa bbb ccc"},{"-1","\\p{Space}","aaa   bbb \t\tccc  ","aaa   bbb   ccc"},{"-1",":","boo:and:foo","boo and foo"},{"-1","o","boo:and:foo","b  :and:f"},{"0",":","boo:and:foo",": :"},{"0",qpattern,"aaa 'bbb' 'ccc'","'bbb' 'ccc'"},{"1",qpattern,"aaa 'bbb' 'ccc'","bbb ccc"}};
  Map<String,String> args=new HashMap<String,String>();
  for (  String[] test : tests) {
    args.put(PatternTokenizerFactory.GROUP,test[0]);
    args.put(PatternTokenizerFactory.PATTERN,test[1]);
    PatternTokenizerFactory tokenizer=new PatternTokenizerFactory();
    tokenizer.init(args);
    TokenStream stream=tokenizer.create(new StringReader(test[2]));
    String out=TestHyphenatedWordsFilter.tsToString(stream);
    System.out.println(test[2] + " ==> " + out);
    assertEquals("pattern: " + test[2],test[3],out);
    if ("-1".equals(test[0])) {
      String[] split=test[2].split(test[1]);
      stream=tokenizer.create(new StringReader(test[2]));
      int i=0;
      for (Token t=stream.next(); null != t; t=stream.next()) {
        assertEquals("split: " + test[1] + " "+ i,split[i++],new String(t.termBuffer(),0,t.termLength()));
      }
    }
  }
}
