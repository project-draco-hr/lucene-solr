{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);
  FieldType myFieldType=new FieldType(TextField.TYPE_NOT_STORED);
  myFieldType.setStoreTermVectors(true);
  myFieldType.setStoreTermVectorOffsets(true);
  myFieldType.setStoreTermVectorPositions(true);
  myFieldType.setStoreTermVectorPayloads(true);
  curOffset=0;
  Token[] tokens=new Token[]{getToken("foxes"),getToken("can"),getToken("jump"),getToken("high")};
  Document doc=new Document();
  doc.add(new Field("field",new CannedTokenStream(tokens),myFieldType));
  writer.addDocument(doc);
  IndexReader reader=writer.getReader();
  writer.shutdown();
  assertEquals(1,reader.numDocs());
  for (int i=0; i < 2; i++) {
    TokenStream ts=TokenSources.getTokenStream(reader.getTermVectors(0).terms("field"),i == 0);
    CharTermAttribute termAtt=ts.getAttribute(CharTermAttribute.class);
    PositionIncrementAttribute posIncAtt=ts.getAttribute(PositionIncrementAttribute.class);
    OffsetAttribute offsetAtt=ts.getAttribute(OffsetAttribute.class);
    PayloadAttribute payloadAtt=ts.getAttribute(PayloadAttribute.class);
    for (    Token token : tokens) {
      assertTrue(ts.incrementToken());
      assertEquals(token.toString(),termAtt.toString());
      assertEquals(token.getPositionIncrement(),posIncAtt.getPositionIncrement());
      assertEquals(token.getPayload(),payloadAtt.getPayload());
      assertEquals(token.startOffset(),offsetAtt.startOffset());
      assertEquals(token.endOffset(),offsetAtt.endOffset());
    }
    assertFalse(ts.incrementToken());
  }
  reader.close();
  dir.close();
}
