{
  final float maxDiff=1e-5f;
  final int lastDoc[]={-1};
  s.search(q,new Collector(){
    private int base=0;
    private Scorer scorer;
    public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    public void collect(    int doc) throws IOException {
      doc=doc + base;
      float score=scorer.score();
      try {
        for (int i=lastDoc[0] + 1; i <= doc; i++) {
          Weight w=q.weight(s);
          Scorer scorer=w.scorer(s.getIndexReader());
          TestCase.assertTrue("query collected " + doc + " but skipTo("+ i+ ") says no more docs!",scorer.skipTo(i));
          TestCase.assertEquals("query collected " + doc + " but skipTo("+ i+ ") got to "+ scorer.doc(),doc,scorer.doc());
          float skipToScore=scorer.score();
          TestCase.assertEquals("unstable skipTo(" + i + ") score!",skipToScore,scorer.score(),maxDiff);
          TestCase.assertEquals("query assigned doc " + doc + " a score of <"+ score+ "> but skipTo("+ i+ ") has <"+ skipToScore+ ">!",score,skipToScore,maxDiff);
        }
        lastDoc[0]=doc;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    public void setNextReader(    IndexReader reader,    int docBase){
      base=docBase;
    }
  }
);
  Weight w=q.weight(s);
  Scorer scorer=w.scorer(s.getIndexReader());
  boolean more=scorer.skipTo(lastDoc[0] + 1);
  if (more)   TestCase.assertFalse("query's last doc was " + lastDoc[0] + " but skipTo("+ (lastDoc[0] + 1)+ ") got to "+ scorer.doc(),more);
}
