{
  System.out.println(nl);
  SpellCheckResponse spellCheckResp=new SpellCheckResponse(nl);
  for (  SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {
    mergeData.origVsSuggestion.put(suggestion.getToken(),suggestion);
    HashSet<String> suggested=mergeData.origVsSuggested.get(suggestion.getToken());
    if (suggested == null) {
      suggested=new HashSet<>();
      mergeData.origVsSuggested.put(suggestion.getToken(),suggested);
    }
    int origFreq=0;
    Integer o=mergeData.origVsFreq.get(suggestion.getToken());
    if (o != null)     origFreq+=o;
    origFreq+=suggestion.getOriginalFrequency();
    mergeData.origVsFreq.put(suggestion.getToken(),origFreq);
    Integer origShards=mergeData.origVsShards.get(suggestion.getToken());
    if (origShards == null) {
      mergeData.origVsShards.put(suggestion.getToken(),1);
    }
 else {
      mergeData.origVsShards.put(suggestion.getToken(),++origShards);
    }
    for (int i=0; i < suggestion.getNumFound(); i++) {
      String alternative=suggestion.getAlternatives().get(i);
      suggested.add(alternative);
      SuggestWord sug=mergeData.suggestedVsWord.get(alternative);
      if (sug == null) {
        sug=new SuggestWord();
        mergeData.suggestedVsWord.put(alternative,sug);
      }
      sug.string=alternative;
      if (suggestion.getAlternativeFrequencies() != null && suggestion.getAlternativeFrequencies().size() > 0) {
        Integer freq=suggestion.getAlternativeFrequencies().get(i);
        if (freq != null)         sug.freq+=freq;
      }
    }
  }
}
