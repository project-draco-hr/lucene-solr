{
  int maxCollations=params.getInt(SPELLCHECK_MAX_COLLATIONS,1);
  int maxCollationTries=params.getInt(SPELLCHECK_MAX_COLLATION_TRIES,0);
  int maxCollationEvaluations=params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS,10000);
  boolean collationExtendedResults=params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS,false);
  int maxCollationCollectDocs=params.getInt(SPELLCHECK_COLLATE_MAX_COLLECT_DOCS,0);
  if (!collationExtendedResults) {
    maxCollationCollectDocs=1;
  }
  boolean shard=params.getBool(ShardParams.IS_SHARD,false);
  SpellCheckCollator collator=new SpellCheckCollator().setMaxCollations(maxCollations).setMaxCollationTries(maxCollationTries).setMaxCollationEvaluations(maxCollationEvaluations).setSuggestionsMayOverlap(suggestionsMayOverlap).setDocCollectionLimit(maxCollationCollectDocs);
  List<SpellCheckCollation> collations=collator.collate(spellingResult,q,rb);
  Collections.sort(collations);
  NamedList collationList=new NamedList();
  for (  SpellCheckCollation collation : collations) {
    if (collationExtendedResults) {
      NamedList extendedResult=new SimpleOrderedMap();
      extendedResult.add("collationQuery",collation.getCollationQuery());
      extendedResult.add("hits",collation.getHits());
      extendedResult.add("misspellingsAndCorrections",collation.getMisspellingsAndCorrections());
      if (maxCollationTries > 0 && shard) {
        extendedResult.add("collationInternalRank",collation.getInternalRank());
      }
      collationList.add("collation",extendedResult);
    }
 else {
      collationList.add("collation",collation.getCollationQuery());
      if (maxCollationTries > 0 && shard) {
        collationList.add("collationInternalRank",collation.getInternalRank());
      }
    }
  }
  response.add("collations",collationList);
}
