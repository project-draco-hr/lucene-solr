{
  PayloadAnalyzer analyzer=new PayloadAnalyzer();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setOpenMode(OpenMode.CREATE));
  final int skipInterval=16;
  final int numTerms=5;
  final String fieldName="f1";
  int numDocs=skipInterval + 1;
  Term[] terms=generateTerms(fieldName,numTerms);
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < terms.length; i++) {
    sb.append(terms[i].text);
    sb.append(" ");
  }
  String content=sb.toString();
  int payloadDataLength=numTerms * numDocs * 2 + numTerms * numDocs * (numDocs - 1) / 2;
  byte[] payloadData=generateRandomData(payloadDataLength);
  Document d=new Document();
  d.add(new Field(fieldName,content,Field.Store.NO,Field.Index.ANALYZED));
  int offset=0;
  for (int i=0; i < 2 * numDocs; i++) {
    analyzer.setPayloadData(fieldName,payloadData,offset,1);
    offset+=numTerms;
    writer.addDocument(d);
  }
  writer.commit();
  for (int i=0; i < numDocs; i++) {
    analyzer.setPayloadData(fieldName,payloadData,offset,i);
    offset+=i * numTerms;
    writer.addDocument(d);
  }
  writer.optimize();
  writer.close();
  IndexReader reader=IndexReader.open(dir,true);
  byte[] verifyPayloadData=new byte[payloadDataLength];
  offset=0;
  DocsAndPositionsEnum[] tps=new DocsAndPositionsEnum[numTerms];
  for (int i=0; i < numTerms; i++) {
    tps[i]=MultiFields.getTermPositionsEnum(reader,MultiFields.getDeletedDocs(reader),terms[i].field(),new BytesRef(terms[i].text()));
  }
  while (tps[0].nextDoc() != DocsEnum.NO_MORE_DOCS) {
    for (int i=1; i < numTerms; i++) {
      tps[i].nextDoc();
    }
    int freq=tps[0].freq();
    for (int i=0; i < freq; i++) {
      for (int j=0; j < numTerms; j++) {
        tps[j].nextPosition();
        BytesRef br=tps[j].getPayload();
        System.arraycopy(br.bytes,br.offset,verifyPayloadData,offset,br.length);
        offset+=br.length;
      }
    }
  }
  assertByteArrayEquals(payloadData,verifyPayloadData);
  DocsAndPositionsEnum tp=MultiFields.getTermPositionsEnum(reader,MultiFields.getDeletedDocs(reader),terms[0].field(),new BytesRef(terms[0].text()));
  tp.nextDoc();
  tp.nextPosition();
  tp.nextDoc();
  tp.nextPosition();
  BytesRef payload=tp.getPayload();
  assertEquals("Wrong payload length.",1,payload.length);
  assertEquals(payload.bytes[payload.offset],payloadData[numTerms]);
  tp.nextDoc();
  tp.nextPosition();
  tp.advance(5);
  tp.nextPosition();
  payload=tp.getPayload();
  assertEquals("Wrong payload length.",1,payload.length);
  assertEquals(payload.bytes[payload.offset],payloadData[5 * numTerms]);
  tp=MultiFields.getTermPositionsEnum(reader,MultiFields.getDeletedDocs(reader),terms[1].field(),new BytesRef(terms[1].text()));
  tp.nextDoc();
  tp.nextPosition();
  assertEquals("Wrong payload length.",1,tp.getPayload().length);
  tp.advance(skipInterval - 1);
  tp.nextPosition();
  assertEquals("Wrong payload length.",1,tp.getPayload().length);
  tp.advance(2 * skipInterval - 1);
  tp.nextPosition();
  assertEquals("Wrong payload length.",1,tp.getPayload().length);
  tp.advance(3 * skipInterval - 1);
  tp.nextPosition();
  assertEquals("Wrong payload length.",3 * skipInterval - 2 * numDocs - 1,tp.getPayload().length);
  assertFalse(tp.hasPayload());
  reader.close();
  analyzer=new PayloadAnalyzer();
  writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setOpenMode(OpenMode.CREATE));
  String singleTerm="lucene";
  d=new Document();
  d.add(new Field(fieldName,singleTerm,Field.Store.NO,Field.Index.ANALYZED));
  payloadData=generateRandomData(2000);
  analyzer.setPayloadData(fieldName,payloadData,100,1500);
  writer.addDocument(d);
  writer.optimize();
  writer.close();
  reader=IndexReader.open(dir,true);
  tp=MultiFields.getTermPositionsEnum(reader,MultiFields.getDeletedDocs(reader),fieldName,new BytesRef(singleTerm));
  tp.nextDoc();
  tp.nextPosition();
  BytesRef br=tp.getPayload();
  verifyPayloadData=new byte[br.length];
  byte[] portion=new byte[1500];
  System.arraycopy(payloadData,100,portion,0,1500);
  assertByteArrayEquals(portion,br.bytes,br.offset,br.length);
  reader.close();
}
