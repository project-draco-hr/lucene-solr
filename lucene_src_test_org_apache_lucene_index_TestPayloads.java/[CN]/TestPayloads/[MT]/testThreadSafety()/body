{
  rnd=newRandom();
  final int numThreads=5;
  final int numDocs=50 * RANDOM_MULTIPLIER;
  final ByteArrayPool pool=new ByteArrayPool(numThreads,5);
  Directory dir=newDirectory(rnd);
  final IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(rnd,TEST_VERSION_CURRENT,new MockAnalyzer()));
  final String field="test";
  Thread[] ingesters=new Thread[numThreads];
  for (int i=0; i < numThreads; i++) {
    ingesters[i]=new Thread(){
      @Override public void run(){
        try {
          for (int j=0; j < numDocs; j++) {
            Document d=new Document();
            d.add(new Field(field,new PoolingPayloadTokenStream(pool)));
            writer.addDocument(d);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          fail(e.toString());
        }
      }
    }
;
    ingesters[i].start();
  }
  for (int i=0; i < numThreads; i++) {
    ingesters[i].join();
  }
  writer.close();
  IndexReader reader=IndexReader.open(dir,true);
  TermsEnum terms=MultiFields.getFields(reader).terms(field).iterator();
  Bits delDocs=MultiFields.getDeletedDocs(reader);
  DocsAndPositionsEnum tp=null;
  while (terms.next() != null) {
    String termText=terms.term().utf8ToString();
    tp=terms.docsAndPositions(delDocs,tp);
    while (tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {
      int freq=tp.freq();
      for (int i=0; i < freq; i++) {
        tp.nextPosition();
        final BytesRef payload=tp.getPayload();
        assertEquals(termText,pool.bytesToString(payload.bytes,payload.offset,payload.length));
      }
    }
  }
  reader.close();
  dir.close();
  assertEquals(pool.size(),numThreads);
}
