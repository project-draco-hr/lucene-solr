{
  BooleanQuery q=new BooleanQuery();
{
    DisjunctionMaxQuery q1=new DisjunctionMaxQuery(0.01f);
    q1.add(tq("hed","albino"));
    q1.add(tq("dek","albino"));
    q.add(q1,false,false);
  }
{
    DisjunctionMaxQuery q2=new DisjunctionMaxQuery(0.01f);
    q2.add(tq("hed","elephant"));
    q2.add(tq("dek","elephant"));
    q.add(q2,false,false);
  }
  Hits h=s.search(q);
  try {
    assertEquals("4 docs should match " + q.toString(),4,h.length());
    float score0=h.score(0);
    float score1=h.score(1);
    float score2=h.score(2);
    float score3=h.score(3);
    String doc0=h.doc(0).get("id");
    String doc1=h.doc(1).get("id");
    String doc2=h.doc(2).get("id");
    String doc3=h.doc(3).get("id");
    assertTrue("doc0 should be d2 or d4: " + doc0,doc0.equals("d2") || doc0.equals("d4"));
    assertTrue("doc1 should be d2 or d4: " + doc0,doc1.equals("d2") || doc1.equals("d4"));
    assertEquals("score0 and score1 should match",score0,score1,SCORE_COMP_THRESH);
    assertEquals("wrong third","d3",doc2);
    assertTrue("d3 does not have worse score then d2 and d4: " + score1 + " >? "+ score2,score1 > score2);
    assertEquals("wrong fourth","d1",doc3);
    assertTrue("d1 does not have worse score then d3: " + score2 + " >? "+ score3,score2 > score3);
  }
 catch (  Error e) {
    printHits("testBooleanOptionalWithTiebreaker",h);
    throw e;
  }
}
