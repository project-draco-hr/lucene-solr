{
  this.perFieldSeed=random.nextInt();
  this.avoidCodecs=avoidCodecs;
  int minItemsPerBlock=TestUtil.nextInt(random,2,100);
  int maxItemsPerBlock=2 * (Math.max(2,minItemsPerBlock - 1)) + random.nextInt(100);
  int lowFreqCutoff=TestUtil.nextInt(random,2,100);
  add(avoidCodecs,TestUtil.getDefaultPostingsFormat(minItemsPerBlock,maxItemsPerBlock),new FSTPostingsFormat(),new FSTOrdPostingsFormat(),new DirectPostingsFormat(LuceneTestCase.rarely(random) ? 1 : (LuceneTestCase.rarely(random) ? Integer.MAX_VALUE : maxItemsPerBlock),LuceneTestCase.rarely(random) ? 1 : (LuceneTestCase.rarely(random) ? Integer.MAX_VALUE : lowFreqCutoff)),new TestBloomFilteredLucenePostings(),new MockRandomPostingsFormat(random),new BlockTreeOrdsPostingsFormat(minItemsPerBlock,maxItemsPerBlock),new LuceneFixedGap(TestUtil.nextInt(random,1,1000)),new LuceneVarGapFixedInterval(TestUtil.nextInt(random,1,1000)),new LuceneVarGapDocFreqInterval(TestUtil.nextInt(random,1,100),TestUtil.nextInt(random,1,1000)),new SimpleTextPostingsFormat(),new AssertingPostingsFormat(),new MemoryPostingsFormat(true,random.nextFloat()),new MemoryPostingsFormat(false,random.nextFloat()));
  addDocValues(avoidCodecs,TestUtil.getDefaultDocValuesFormat(),new MemoryDocValuesFormat(),new SimpleTextDocValuesFormat(),new AssertingDocValuesFormat());
  Collections.shuffle(formats,random);
  Collections.shuffle(dvFormats,random);
  if (formats.size() > 4) {
    formats=formats.subList(0,4);
  }
  if (dvFormats.size() > 4) {
    dvFormats=dvFormats.subList(0,4);
  }
}
