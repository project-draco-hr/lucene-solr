{
  Builder requestConfigBuilder=RequestConfig.custom().setRedirectsEnabled(config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS,false)).setDecompressionEnabled(false).setConnectTimeout(config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT,DEFAULT_CONNECT_TIMEOUT)).setSocketTimeout(config.getInt(HttpClientUtil.PROP_SO_TIMEOUT,DEFAULT_SO_TIMEOUT));
  String cpolicy=cookiePolicy;
  if (cpolicy != null) {
    requestConfigBuilder.setCookieSpec(cpolicy);
  }
  RequestConfig requestConfig=requestConfigBuilder.build();
  HttpClientBuilder retBuilder=builder.setDefaultRequestConfig(requestConfig);
  if (config.getBool(HttpClientUtil.PROP_USE_RETRY,true)) {
    retBuilder=retBuilder.setRetryHandler(new SolrHttpRequestRetryHandler(3));
  }
 else {
    retBuilder=retBuilder.setRetryHandler(NO_RETRY);
  }
  final String basicAuthUser=config.get(HttpClientUtil.PROP_BASIC_AUTH_USER);
  final String basicAuthPass=config.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);
  if (basicAuthUser != null && basicAuthPass != null) {
    CredentialsProvider credsProvider=new BasicCredentialsProvider();
    credsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(basicAuthUser,basicAuthPass));
    retBuilder.setDefaultCredentialsProvider(credsProvider);
  }
  if (config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION,false)) {
    retBuilder.addInterceptorFirst(new UseCompressionRequestInterceptor());
    retBuilder.addInterceptorFirst(new UseCompressionResponseInterceptor());
  }
 else {
    retBuilder.disableContentCompression();
  }
  return retBuilder;
}
