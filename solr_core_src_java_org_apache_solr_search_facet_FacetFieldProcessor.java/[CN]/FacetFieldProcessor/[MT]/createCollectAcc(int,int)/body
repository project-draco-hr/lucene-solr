{
  accMap=new LinkedHashMap<>();
  if (countAcc == null) {
    countAcc=new CountSlotArrAcc(fcontext,numSlots);
  }
  if ("count".equals(freq.sortVariable)) {
    sortAcc=countAcc;
    deferredAggs=freq.getFacetStats();
  }
 else   if ("index".equals(freq.sortVariable)) {
    if (indexOrderAcc == null) {
      indexOrderAcc=new SortSlotAcc(fcontext);
    }
    sortAcc=indexOrderAcc;
    deferredAggs=freq.getFacetStats();
  }
 else {
    AggValueSource sortAgg=freq.getFacetStats().get(freq.sortVariable);
    if (sortAgg != null) {
      collectAcc=sortAgg.createSlotAcc(fcontext,numDocs,numSlots);
      collectAcc.key=freq.sortVariable;
    }
    sortAcc=collectAcc;
    deferredAggs=new HashMap<>(freq.getFacetStats());
    deferredAggs.remove(freq.sortVariable);
  }
  if (deferredAggs.size() == 0) {
    deferredAggs=null;
  }
  boolean needOtherAccs=freq.allBuckets;
  if (!needOtherAccs) {
    return;
  }
  createOtherAccs(numDocs,1);
}
