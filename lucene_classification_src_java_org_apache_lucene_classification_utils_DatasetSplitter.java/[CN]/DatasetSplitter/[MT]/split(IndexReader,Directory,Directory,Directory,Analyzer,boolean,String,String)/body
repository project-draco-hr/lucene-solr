{
  IndexWriter testWriter=new IndexWriter(testIndex,new IndexWriterConfig(analyzer));
  IndexWriter cvWriter=new IndexWriter(crossValidationIndex,new IndexWriterConfig(analyzer));
  IndexWriter trainingWriter=new IndexWriter(trainingIndex,new IndexWriterConfig(analyzer));
  int noOfClasses=0;
  for (  LeafReaderContext leave : originalIndex.leaves()) {
    long valueCount=0;
    SortedDocValues classValues=leave.reader().getSortedDocValues(classFieldName);
    if (classValues != null) {
      valueCount=classValues.getValueCount();
    }
 else {
      SortedSetDocValues sortedSetDocValues=leave.reader().getSortedSetDocValues(classFieldName);
      if (sortedSetDocValues != null) {
        valueCount=sortedSetDocValues.getValueCount();
      }
    }
    if (classValues == null) {
      throw new IllegalStateException("field \"" + classFieldName + "\" must have sorted (set) doc values");
    }
    noOfClasses+=valueCount;
  }
  try {
    IndexSearcher indexSearcher=new IndexSearcher(originalIndex);
    GroupingSearch gs=new GroupingSearch(classFieldName);
    gs.setGroupSort(Sort.INDEXORDER);
    gs.setSortWithinGroup(Sort.INDEXORDER);
    gs.setAllGroups(true);
    gs.setGroupDocsLimit(originalIndex.maxDoc());
    TopGroups<Object> topGroups=gs.search(indexSearcher,new MatchAllDocsQuery(),0,noOfClasses);
    FieldType ft=new FieldType(TextField.TYPE_STORED);
    if (termVectors) {
      ft.setStoreTermVectors(true);
      ft.setStoreTermVectorOffsets(true);
      ft.setStoreTermVectorPositions(true);
    }
    int b=0;
    for (    GroupDocs group : topGroups.groups) {
      int totalHits=group.totalHits;
      double testSize=totalHits * testRatio;
      int tc=0;
      double cvSize=totalHits * crossValidationRatio;
      int cvc=0;
      for (      ScoreDoc scoreDoc : group.scoreDocs) {
        Document doc=createNewDoc(originalIndex,ft,scoreDoc,fieldNames);
        if (b % 2 == 0 && tc < testSize) {
          testWriter.addDocument(doc);
          tc++;
        }
 else         if (cvc < cvSize) {
          cvWriter.addDocument(doc);
          cvc++;
        }
 else {
          trainingWriter.addDocument(doc);
        }
        b++;
      }
    }
    testWriter.commit();
    cvWriter.commit();
    trainingWriter.commit();
    testWriter.forceMerge(3);
    cvWriter.forceMerge(3);
    trainingWriter.forceMerge(3);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
 finally {
    testWriter.close();
    cvWriter.close();
    trainingWriter.close();
    originalIndex.close();
  }
}
