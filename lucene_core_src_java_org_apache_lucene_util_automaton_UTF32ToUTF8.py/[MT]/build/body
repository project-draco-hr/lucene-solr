def build(fsa, startNode, endNode, startUTF8, endUTF8):
    if (startUTF8[0][0] == endUTF8[0][0]):
        if ((len(startUTF8) == 1) and (len(endUTF8) == 1)):
            fsa.addEdge(startNode, endNode, startUTF8[0][0], endUTF8[0][0], 'startend')
            return
        else:
            assert (len(startUTF8) != 1)
            assert (len(endUTF8) != 1)
            n = fsa.addNode()
            fsa.addEdge(startNode, n, startUTF8[0][0], startUTF8[0][0], 'single')
            build(fsa, n, endNode, startUTF8[1:], endUTF8[1:])
    elif (len(startUTF8) == len(endUTF8)):
        if (len(startUTF8) == 1):
            fsa.addEdge(startNode, endNode, startUTF8[0][0], endUTF8[0][0], 'startend')
        else:
            start(fsa, startNode, endNode, startUTF8, False)
            if ((endUTF8[0][0] - startUTF8[0][0]) > 1):
                all(fsa, startNode, endNode, (startUTF8[0][0] + 1), (endUTF8[0][0] - 1), startUTF8[1:])
            end(fsa, startNode, endNode, endUTF8, False)
    else:
        start(fsa, startNode, endNode, startUTF8, True)
        byteCount = (1 + len(startUTF8))
        while (byteCount < len(endUTF8)):
            s = toUTF8(utf8Ranges[(byteCount - 1)][0])
            e = toUTF8(utf8Ranges[(byteCount - 1)][1])
            all(fsa, startNode, endNode, s[0][0], e[0][0], s[1:])
            byteCount += 1
        end(fsa, startNode, endNode, endUTF8, True)
