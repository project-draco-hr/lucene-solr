{
  StringTokenizer tokenizer=new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);
  String temp=tokenizer.nextToken();
  if (temp.equals("D"))   this.operation=StorageOperation.DELETE;
 else   if (temp.equals("U"))   this.operation=StorageOperation.UPDATE;
 else   if (temp.equals("I"))   this.operation=StorageOperation.INSERT;
 else   throw new RecoverException("Illegal metadata --- " + recoverString);
  temp=tokenizer.nextToken();
  if (temp == null)   throw new RecoverException("Can't recover feed Id -- " + temp);
  this.feedId=temp;
  temp=tokenizer.nextToken();
  if (temp == null)   throw new RecoverException("Can't recover entry Id -- " + temp);
  this.entryId=temp;
  temp=tokenizer.nextToken();
  try {
    this.timestamp=Long.parseLong(temp);
  }
 catch (  Exception e) {
    throw new RecoverException("Can't recover timestamp -- " + temp,e);
  }
  if (this.operation != StorageOperation.DELETE) {
    temp=tokenizer.nextToken();
    if (temp == null)     throw new RecoverException("Can't recover service -- " + temp);
    if (!GDataServerRegistry.getRegistry().isServiceRegistered(temp))     throw new RecoverException("Service in recover metadata is not registered  - " + temp);
    this.config=GDataServerRegistry.getRegistry().getProvidedService(temp);
  }
}
