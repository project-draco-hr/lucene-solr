{
  try {
    final LineFileDocs docs=new LineFileDocs(random());
    int numDocs=0;
    while (System.nanoTime() < endTimeNanos) {
      final int what=random().nextInt(3);
      final NodeState node=nodes[random().nextInt(nodes.length)];
      if (numDocs == 0 || what == 0) {
        node.writer.addDocument(docs.nextDoc());
        numDocs++;
      }
 else       if (what == 1) {
        node.writer.updateDocument(new Term("docid","" + random().nextInt(numDocs)),docs.nextDoc());
        numDocs++;
      }
 else {
        node.writer.deleteDocuments(new Term("docid","" + random().nextInt(numDocs)));
      }
      if (random().nextInt(17) == 12) {
        node.writer.commit();
      }
      if (random().nextInt(17) == 12) {
        nodes[random().nextInt(nodes.length)].reopen();
      }
    }
  }
 catch (  Throwable t) {
    System.out.println("FAILED:");
    t.printStackTrace(System.out);
    throw new RuntimeException(t);
  }
}
