{
  final Class<?> type=f.getType();
  final int fsize=type.isPrimitive() ? primitiveSizes.get(type) : NUM_BYTES_OBJECT_REF;
  if (objectFieldOffsetMethod != null) {
    try {
      final long offsetPlusSize=((Number)objectFieldOffsetMethod.invoke(theUnsafe,f)).longValue() + fsize;
      return Math.max(sizeSoFar,offsetPlusSize);
    }
 catch (    IllegalAccessException ex) {
      throw new RuntimeException("Access problem with sun.misc.Unsafe",ex);
    }
catch (    InvocationTargetException ite) {
      final Throwable cause=ite.getCause();
      if (cause instanceof RuntimeException)       throw (RuntimeException)cause;
      if (cause instanceof Error)       throw (Error)cause;
      throw new RuntimeException("Call to Unsafe's objectFieldOffset() throwed " + "checked Exception when accessing field " + f.getDeclaringClass().getName() + "#"+ f.getName(),cause);
    }
  }
 else {
    return sizeSoFar + fsize;
  }
}
