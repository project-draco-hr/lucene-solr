{
  ClassCache cachedInfo;
  long shallowInstanceSize=NUM_BYTES_OBJECT_HEADER;
  final ArrayList<Field> referenceFields=new ArrayList<Field>(32);
  for (Class<?> c=clazz; c != null; c=c.getSuperclass()) {
    final Field[] fields=c.getDeclaredFields();
    for (    final Field f : fields) {
      if (!Modifier.isStatic(f.getModifiers())) {
        shallowInstanceSize=adjustForField(shallowInstanceSize,f);
        if (!f.getType().isPrimitive()) {
          f.setAccessible(true);
          referenceFields.add(f);
        }
      }
    }
  }
  cachedInfo=new ClassCache(alignObjectSize(shallowInstanceSize),referenceFields.toArray(new Field[referenceFields.size()]));
  return cachedInfo;
}
