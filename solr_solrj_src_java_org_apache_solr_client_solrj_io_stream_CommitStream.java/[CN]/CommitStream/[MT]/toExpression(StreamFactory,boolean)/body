{
  StreamExpression expression=new StreamExpression(factory.getFunctionName(this.getClass()));
  expression.addParameter(collection);
  expression.addParameter(new StreamExpressionNamedParameter("zkHost",zkHost));
  expression.addParameter(new StreamExpressionNamedParameter("batchSize",Integer.toString(commitBatchSize)));
  expression.addParameter(new StreamExpressionNamedParameter("waitFlush",Boolean.toString(waitFlush)));
  expression.addParameter(new StreamExpressionNamedParameter("waitSearcher",Boolean.toString(waitSearcher)));
  expression.addParameter(new StreamExpressionNamedParameter("softCommit",Boolean.toString(softCommit)));
  if (includeStreams) {
    if (tupleSource instanceof Expressible) {
      expression.addParameter(((Expressible)tupleSource).toExpression(factory));
    }
 else {
      throw new IOException("This CommitStream contains a non-expressible TupleStream - it cannot be converted to an expression");
    }
  }
 else {
    expression.addParameter("<stream>");
  }
  return expression;
}
