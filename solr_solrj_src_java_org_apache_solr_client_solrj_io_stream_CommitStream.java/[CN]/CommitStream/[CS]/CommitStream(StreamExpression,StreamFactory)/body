{
  String collectionName=factory.getValueOperand(expression,0);
  String zkHost=findZkHost(factory,collectionName,expression);
  int batchSize=factory.getIntOperand(expression,"batchSize",0);
  boolean waitFlush=factory.getBooleanOperand(expression,"waitFlush",false);
  boolean waitSearcher=factory.getBooleanOperand(expression,"waitSearcher",false);
  boolean softCommit=factory.getBooleanOperand(expression,"softCommit",false);
  if (null == collectionName) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));
  }
  if (null == zkHost) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
  }
  if (batchSize < 0) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - batchSize cannot be less than 0 but is '%d'",expression,batchSize));
  }
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression,streamExpressions.size()));
  }
  StreamExpression sourceStreamExpression=streamExpressions.get(0);
  init(collectionName,factory.constructStream(sourceStreamExpression),zkHost,batchSize,waitFlush,waitSearcher,softCommit);
}
