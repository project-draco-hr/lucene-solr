{
  this.traversal=traversal;
  graph=traversal.getGraph();
  collections=traversal.getCollections();
  fields=traversal.getFields();
  List<String> outCollections=new ArrayList();
  List<String> outFields=new ArrayList();
  List<Integer> levelNums=new ArrayList();
  List<Iterator<Node>> levelIterators=new ArrayList();
  if (scatter.contains(Scatter.BRANCHES)) {
    if (graph.size() > 1) {
      for (int i=0; i < graph.size() - 1; i++) {
        Map<String,Node> graphLevel=graph.get(i);
        String collection=collections.get(i);
        String field=fields.get(i);
        outCollections.add(collection);
        outFields.add(field);
        levelNums.add(i);
        levelIterators.add(graphLevel.values().iterator());
      }
    }
  }
  if (scatter.contains(Scatter.LEAVES)) {
    int leavesLevel=graph.size() > 1 ? graph.size() - 1 : 0;
    Map<String,Node> graphLevel=graph.get(leavesLevel);
    String collection=collections.get(leavesLevel);
    String field=fields.get(leavesLevel);
    levelNums.add(leavesLevel);
    outCollections.add(collection);
    outFields.add(field);
    levelIterators.add(graphLevel.values().iterator());
  }
  graphIterator=levelIterators.iterator();
  levelIterator=graphIterator.next();
  fieldIterator=outFields.iterator();
  collectionIterator=outCollections.iterator();
  levelNumIterator=levelNums.iterator();
  outField=fieldIterator.next();
  outCollection=collectionIterator.next();
  outLevel=levelNumIterator.next();
}
