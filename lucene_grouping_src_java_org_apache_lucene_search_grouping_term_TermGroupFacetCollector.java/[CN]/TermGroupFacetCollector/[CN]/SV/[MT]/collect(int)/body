{
  if (doc > facetFieldTermsIndex.docID()) {
    facetFieldTermsIndex.advance(doc);
  }
  int facetOrd;
  if (doc == facetFieldTermsIndex.docID()) {
    facetOrd=facetFieldTermsIndex.ordValue();
  }
 else {
    facetOrd=-1;
  }
  if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {
    return;
  }
  if (doc > groupFieldTermsIndex.docID()) {
    groupFieldTermsIndex.advance(doc);
  }
  int groupOrd;
  if (doc == groupFieldTermsIndex.docID()) {
    groupOrd=groupFieldTermsIndex.ordValue();
  }
 else {
    groupOrd=-1;
  }
  int segmentGroupedFacetsIndex=groupOrd * (facetFieldTermsIndex.getValueCount() + 1) + facetOrd;
  if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {
    return;
  }
  segmentTotalCount++;
  segmentFacetCounts[facetOrd + 1]++;
  segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);
  BytesRef groupKey;
  if (groupOrd == -1) {
    groupKey=null;
  }
 else {
    groupKey=BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));
  }
  BytesRef facetKey;
  if (facetOrd == -1) {
    facetKey=null;
  }
 else {
    facetKey=BytesRef.deepCopyOf(facetFieldTermsIndex.lookupOrd(facetOrd));
  }
  groupedFacetHits.add(new GroupedFacetHit(groupKey,facetKey));
}
