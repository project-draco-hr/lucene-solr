{
  BytesRef scratch=new BytesRef();
  IndexOutput out=new ChecksumIndexOutput(dir.createOutput(segmentsFileName,new IOContext(new FlushInfo(infos.size(),infos.totalDocCount()))));
  boolean success=false;
  try {
    out.writeInt(DefaultSegmentInfosWriter.FORMAT_CURRENT);
    out.writeString(codecID);
    SimpleTextUtil.write(out,VERSION);
    SimpleTextUtil.write(out,Long.toString(infos.version),scratch);
    SimpleTextUtil.writeNewline(out);
    SimpleTextUtil.write(out,COUNTER);
    SimpleTextUtil.write(out,Integer.toString(infos.counter),scratch);
    SimpleTextUtil.writeNewline(out);
    int numUserDataEntries=infos.getUserData() == null ? 0 : infos.getUserData().size();
    SimpleTextUtil.write(out,NUM_USERDATA);
    SimpleTextUtil.write(out,Integer.toString(numUserDataEntries),scratch);
    SimpleTextUtil.writeNewline(out);
    if (numUserDataEntries > 0) {
      for (      Map.Entry<String,String> userEntry : infos.getUserData().entrySet()) {
        SimpleTextUtil.write(out,USERDATA_KEY);
        SimpleTextUtil.write(out,userEntry.getKey(),scratch);
        SimpleTextUtil.writeNewline(out);
        SimpleTextUtil.write(out,USERDATA_VALUE);
        SimpleTextUtil.write(out,userEntry.getValue(),scratch);
        SimpleTextUtil.writeNewline(out);
      }
    }
    SimpleTextUtil.write(out,NUM_SEGMENTS);
    SimpleTextUtil.write(out,Integer.toString(infos.size()),scratch);
    SimpleTextUtil.writeNewline(out);
    for (    SegmentInfo si : infos) {
      writeInfo(out,si);
    }
    success=true;
    return out;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(out);
    }
  }
}
