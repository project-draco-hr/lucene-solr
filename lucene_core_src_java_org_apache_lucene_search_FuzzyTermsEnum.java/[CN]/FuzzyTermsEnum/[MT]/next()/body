{
  if (queuedBottom != null) {
    bottomChanged(queuedBottom);
    queuedBottom=null;
  }
  BytesRef term;
  while (true) {
    term=actualEnum.next();
    if (term == null) {
      break;
    }
    int ed=maxEdits;
    while (ed > 0) {
      if (matches(term,ed - 1)) {
        ed--;
      }
 else {
        break;
      }
    }
    if (ed == 0) {
      boostAtt.setBoost(1.0F);
      break;
    }
 else {
      final int codePointCount=UnicodeUtil.codePointCount(term);
      int minTermLength=Math.min(codePointCount,termLength);
      if (minTermLength > ed) {
        float similarity=1.0f - (float)ed / (float)minTermLength;
        boostAtt.setBoost(similarity);
        break;
      }
    }
  }
  final float bottom=maxBoostAtt.getMaxNonCompetitiveBoost();
  final BytesRef bottomTerm=maxBoostAtt.getCompetitiveTerm();
  if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {
    this.bottom=bottom;
    this.bottomTerm=bottomTerm;
    queuedBottom=BytesRef.deepCopyOf(term);
  }
  return term;
}
