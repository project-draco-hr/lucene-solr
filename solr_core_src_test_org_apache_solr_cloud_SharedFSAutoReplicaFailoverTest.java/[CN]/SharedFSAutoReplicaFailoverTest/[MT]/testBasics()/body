{
  String collection1="solrj_collection";
  Create createCollectionRequest=new Create();
  createCollectionRequest.setCollectionName(collection1);
  createCollectionRequest.setNumShards(2);
  createCollectionRequest.setReplicationFactor(2);
  createCollectionRequest.setMaxShardsPerNode(2);
  createCollectionRequest.setConfigName("conf1");
  createCollectionRequest.setRouterField("myOwnField");
  createCollectionRequest.setAutoAddReplicas(true);
  CollectionAdminResponse response=createCollectionRequest.process(cloudClient);
  assertEquals(0,response.getStatus());
  assertTrue(response.isSuccess());
  waitForRecoveriesToFinish(collection1,false);
  String collection2="solrj_collection2";
  createCollectionRequest=new Create();
  createCollectionRequest.setCollectionName(collection2);
  createCollectionRequest.setNumShards(2);
  createCollectionRequest.setReplicationFactor(2);
  createCollectionRequest.setMaxShardsPerNode(2);
  createCollectionRequest.setConfigName("conf1");
  createCollectionRequest.setRouterField("myOwnField");
  createCollectionRequest.setAutoAddReplicas(false);
  CollectionAdminResponse response2=createCollectionRequest.process(getCommonCloudSolrServer());
  assertEquals(0,response2.getStatus());
  assertTrue(response2.isSuccess());
  waitForRecoveriesToFinish(collection2,false);
  ChaosMonkey.stop(jettys.get(1));
  ChaosMonkey.stop(jettys.get(2));
  Thread.sleep(3000);
  assertTrue("Timeout waiting for all live and active",ClusterStateUtil.waitForAllActiveAndLive(cloudClient.getZkStateReader(),collection1,120000));
  assertSliceAndReplicaCount(collection1);
  assertEquals(4,getLiveAndActiveCount(collection1));
  assertTrue(getLiveAndActiveCount(collection2) < 4);
  ChaosMonkey.stop(jettys);
  ChaosMonkey.stop(controlJetty);
  assertTrue("Timeout waiting for all not live",ClusterStateUtil.waitForAllNotLive(cloudClient.getZkStateReader(),45000));
  ChaosMonkey.start(jettys);
  ChaosMonkey.start(controlJetty);
  assertTrue("Timeout waiting for all live and active",ClusterStateUtil.waitForAllActiveAndLive(cloudClient.getZkStateReader(),collection1,120000));
  assertSliceAndReplicaCount(collection1);
  int jettyIndex=random().nextInt(jettys.size());
  ChaosMonkey.stop(jettys.get(jettyIndex));
  ChaosMonkey.start(jettys.get(jettyIndex));
  assertTrue("Timeout waiting for all live and active",ClusterStateUtil.waitForAllActiveAndLive(cloudClient.getZkStateReader(),collection1,60000));
  Map m=makeMap("action",CollectionParams.CollectionAction.CLUSTERPROP.toLower(),"name",ZkStateReader.AUTO_ADD_REPLICAS,"val","false");
  SolrRequest request=new QueryRequest(new MapSolrParams(m));
  request.setPath("/admin/collections");
  cloudClient.request(request);
  int currentCount=getLiveAndActiveCount(collection1);
  ChaosMonkey.stop(jettys.get(3));
  Thread.sleep(30000);
  assertTrue(currentCount > getLiveAndActiveCount(collection1));
  m=makeMap("action",CollectionParams.CollectionAction.CLUSTERPROP.toLower(),"name",ZkStateReader.AUTO_ADD_REPLICAS);
  request=new QueryRequest(new MapSolrParams(m));
  request.setPath("/admin/collections");
  cloudClient.request(request);
  assertTrue("Timeout waiting for all live and active",ClusterStateUtil.waitForAllActiveAndLive(cloudClient.getZkStateReader(),collection1,60000));
  assertSliceAndReplicaCount(collection1);
}
