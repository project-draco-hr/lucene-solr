{
  byte buffer[]=new byte[9];
  ByteArrayDataOutput out=new ByteArrayDataOutput(buffer);
  ByteArrayDataInput in=new ByteArrayDataInput(buffer);
  for (int i=Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {
    double x=(double)i;
    CompressingStoredFieldsWriter.writeZDouble(out,x);
    in.reset(buffer,0,out.getPosition());
    double y=CompressingStoredFieldsReader.readZDouble(in);
    assertTrue(in.eof());
    assertEquals(Double.doubleToLongBits(x),Double.doubleToLongBits(y));
    if (i >= -1 && i <= 124) {
      assertEquals(1,out.getPosition());
    }
    out.reset(buffer);
  }
  double special[]={-0.0d,+0.0d,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.MIN_VALUE,Double.MAX_VALUE,Double.NaN};
  for (  double x : special) {
    CompressingStoredFieldsWriter.writeZDouble(out,x);
    in.reset(buffer,0,out.getPosition());
    double y=CompressingStoredFieldsReader.readZDouble(in);
    assertTrue(in.eof());
    assertEquals(Double.doubleToLongBits(x),Double.doubleToLongBits(y));
    out.reset(buffer);
  }
  Random r=random();
  for (int i=0; i < 100000; i++) {
    double x=r.nextDouble() * (random().nextInt(100) - 50);
    CompressingStoredFieldsWriter.writeZDouble(out,x);
    assertTrue("length=" + out.getPosition() + ", d="+ x,out.getPosition() <= (x < 0 ? 9 : 8));
    in.reset(buffer,0,out.getPosition());
    double y=CompressingStoredFieldsReader.readZDouble(in);
    assertTrue(in.eof());
    assertEquals(Double.doubleToLongBits(x),Double.doubleToLongBits(y));
    out.reset(buffer);
  }
  for (int i=0; i < 100000; i++) {
    double x=(double)(r.nextFloat() * (random().nextInt(100) - 50));
    CompressingStoredFieldsWriter.writeZDouble(out,x);
    assertTrue("length=" + out.getPosition() + ", d="+ x,out.getPosition() <= 5);
    in.reset(buffer,0,out.getPosition());
    double y=CompressingStoredFieldsReader.readZDouble(in);
    assertTrue(in.eof());
    assertEquals(Double.doubleToLongBits(x),Double.doubleToLongBits(y));
    out.reset(buffer);
  }
}
