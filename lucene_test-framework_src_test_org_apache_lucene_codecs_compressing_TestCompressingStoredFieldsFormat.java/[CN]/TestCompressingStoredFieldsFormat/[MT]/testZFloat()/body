{
  byte buffer[]=new byte[5];
  ByteArrayDataOutput out=new ByteArrayDataOutput(buffer);
  ByteArrayDataInput in=new ByteArrayDataInput(buffer);
  for (int i=Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {
    float f=(float)i;
    CompressingStoredFieldsWriter.writeZFloat(out,f);
    in.reset(buffer,0,out.getPosition());
    float g=CompressingStoredFieldsReader.readZFloat(in);
    assertTrue(in.eof());
    assertEquals(Float.floatToIntBits(f),Float.floatToIntBits(g));
    if (i >= -1 && i <= 123) {
      assertEquals(1,out.getPosition());
    }
    out.reset(buffer);
  }
  float special[]={-0.0f,+0.0f,Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY,Float.MIN_VALUE,Float.MAX_VALUE,Float.NaN};
  for (  float f : special) {
    CompressingStoredFieldsWriter.writeZFloat(out,f);
    in.reset(buffer,0,out.getPosition());
    float g=CompressingStoredFieldsReader.readZFloat(in);
    assertTrue(in.eof());
    assertEquals(Float.floatToIntBits(f),Float.floatToIntBits(g));
    out.reset(buffer);
  }
  Random r=random();
  for (int i=0; i < 100000; i++) {
    float f=r.nextFloat() * (random().nextInt(100) - 50);
    CompressingStoredFieldsWriter.writeZFloat(out,f);
    assertTrue("length=" + out.getPosition() + ", f="+ f,out.getPosition() <= ((Float.floatToIntBits(f) >>> 31) == 1 ? 5 : 4));
    in.reset(buffer,0,out.getPosition());
    float g=CompressingStoredFieldsReader.readZFloat(in);
    assertTrue(in.eof());
    assertEquals(Float.floatToIntBits(f),Float.floatToIntBits(g));
    out.reset(buffer);
  }
}
