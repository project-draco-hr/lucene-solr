{
  InputStream is=null;
  Map<String,Map<String,Double>> tmpRates=new HashMap<>();
  try {
    log.info("Reloading exchange rates from file " + this.currencyConfigFile);
    is=loader.openResource(currencyConfigFile);
    javax.xml.parsers.DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    try {
      dbf.setXIncludeAware(true);
      dbf.setNamespaceAware(true);
    }
 catch (    UnsupportedOperationException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"XML parser doesn't support XInclude option",e);
    }
    try {
      Document doc=dbf.newDocumentBuilder().parse(is);
      XPathFactory xpathFactory=XPathFactory.newInstance();
      XPath xpath=xpathFactory.newXPath();
      NodeList nodes=(NodeList)xpath.evaluate("/currencyConfig/rates/rate",doc,XPathConstants.NODESET);
      for (int i=0; i < nodes.getLength(); i++) {
        Node rateNode=nodes.item(i);
        NamedNodeMap attributes=rateNode.getAttributes();
        Node from=attributes.getNamedItem("from");
        Node to=attributes.getNamedItem("to");
        Node rate=attributes.getNamedItem("rate");
        if (from == null || to == null || rate == null) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Exchange rate missing attributes (required: from, to, rate) " + rateNode);
        }
        String fromCurrency=from.getNodeValue();
        String toCurrency=to.getNodeValue();
        Double exchangeRate;
        if (null == CurrencyField.getCurrency(fromCurrency)) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Specified 'from' currency not supported in this JVM: " + fromCurrency);
        }
        if (null == CurrencyField.getCurrency(toCurrency)) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Specified 'to' currency not supported in this JVM: " + toCurrency);
        }
        try {
          exchangeRate=Double.parseDouble(rate.getNodeValue());
        }
 catch (        NumberFormatException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Could not parse exchange rate: " + rateNode,e);
        }
        addRate(tmpRates,fromCurrency,toCurrency,exchangeRate);
      }
    }
 catch (    SAXException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error parsing currency config.",e);
    }
catch (    IOException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error parsing currency config.",e);
    }
catch (    ParserConfigurationException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error parsing currency config.",e);
    }
catch (    XPathExpressionException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error parsing currency config.",e);
    }
  }
 catch (  IOException e) {
    throw new SolrException(ErrorCode.SERVER_ERROR,"Error while opening Currency configuration file " + currencyConfigFile,e);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  this.rates=tmpRates;
  return true;
}
