{
  final FunctionValues amounts=source.getValues(context,reader);
  final String sourceCurrencyCode=source.getTargetCurrency().getCurrencyCode();
  final int sourceFractionDigits=source.getTargetCurrency().getDefaultFractionDigits();
  final double divisor=Math.pow(10D,targetCurrency.getDefaultFractionDigits());
  return new FunctionValues(){
    @Override public boolean exists(    int doc) throws IOException {
      return amounts.exists(doc);
    }
    @Override public long longVal(    int doc) throws IOException {
      return (long)doubleVal(doc);
    }
    @Override public int intVal(    int doc) throws IOException {
      return (int)doubleVal(doc);
    }
    @Override public double doubleVal(    int doc) throws IOException {
      return CurrencyValue.convertAmount(rate,sourceCurrencyCode,amounts.longVal(doc),targetCurrency.getCurrencyCode()) / divisor;
    }
    @Override public float floatVal(    int doc) throws IOException {
      return CurrencyValue.convertAmount(rate,sourceCurrencyCode,amounts.longVal(doc),targetCurrency.getCurrencyCode()) / ((float)divisor);
    }
    @Override public String strVal(    int doc) throws IOException {
      return Double.toString(doubleVal(doc));
    }
    @Override public String toString(    int doc) throws IOException {
      return name() + '(' + strVal(doc)+ ')';
    }
  }
;
}
