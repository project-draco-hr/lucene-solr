{
  int N_DOCS=100;
  DocumentFactory docFactory=new DocumentFactory(N_DOCS){
    @Override public boolean markedDeleted(    int docNum){
      return (docNum % 3 == 0 || docNum == numDocs - 1 || docNum == numDocs / 2 || docNum == 1 + numDocs / 2 || docNum == 2 + numDocs / 2);
    }
    @Override public boolean haveAlpha(    int docNum){
      return (docNum % 6 == 1);
    }
  }
;
  Directory dir=newDirectory();
  IndexReader reader=createReaderWithNDocs(random,N_DOCS,docFactory,dir);
  try {
    ScoredDocIDs allDocs=ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);
    ScoredDocIDsIterator it=allDocs.iterator();
    int numIteratedDocs=0;
    while (it.next()) {
      numIteratedDocs++;
      int docNum=it.getDocID();
      assertNull("Deleted docs must not appear in the allDocsScoredDocIds set: " + docNum,reader.document(docNum).getFieldable("del"));
    }
    assertEquals("Wrong number of (live) documents",allDocs.size(),numIteratedDocs);
    ScoredDocIdCollector collector=ScoredDocIdCollector.create(reader.maxDoc(),false);
    Query q=new TermQuery(new Term(DocumentFactory.field,DocumentFactory.alphaTxt));
    IndexSearcher searcher=newSearcher(reader);
    searcher.search(q,collector);
    searcher.close();
    ScoredDocIDs scoredDocIds=collector.getScoredDocIDs();
    OpenBitSet resultSet=new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(),reader.maxDoc());
    ScoredDocIDs complementSet=ScoredDocIdsUtils.getComplementSet(scoredDocIds,reader);
    assertEquals("Number of documents in complement set mismatch",reader.numDocs() - scoredDocIds.size(),complementSet.size());
    ScoredDocIDsIterator compIterator=complementSet.iterator();
    Bits live=MultiFields.getLiveDocs(reader);
    while (compIterator.next()) {
      int docNum=compIterator.getDocID();
      assertFalse("Complement-Set must not contain deleted documents (doc=" + docNum + ")",live != null && !live.get(docNum));
      assertNull("Complement-Set must not contain docs from the original set (doc=" + docNum + ")",reader.document(docNum).getFieldable("del"));
      assertFalse("Complement-Set must not contain docs from the original set (doc=" + docNum + ")",resultSet.fastGet(docNum));
    }
  }
  finally {
    reader.close();
    dir.close();
  }
}
