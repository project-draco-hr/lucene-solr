{
  Path dir=createTempDir();
  dir=FilterPath.unwrap(dir).toRealPath();
  FileStore root=new MockFileStore(dir.toString() + " (/dev/sda1)","ntfs","/dev/sda1");
  FileStore usr=new MockFileStore(dir.resolve("usr").toString() + " (/dev/sda2)","xfs","/dev/sda2");
  Map<String,FileStore> mappings=new HashMap<>();
  mappings.put(dir.toString(),root);
  mappings.put(dir.resolve("foo.txt").toString(),root);
  mappings.put(dir.resolve("usr").toString(),usr);
  mappings.put(dir.resolve("usr/bar.txt").toString(),usr);
  FileSystem mockLinux=new MockLinuxFileSystemProvider(dir.getFileSystem(),mappings,dir).getFileSystem(null);
  Path mockPath=mockLinux.getPath(dir.toString());
  assertSame(usr,Files.getFileStore(mockPath.resolve("usr")));
  assertSame(usr,Files.getFileStore(mockPath.resolve("usr/bar.txt")));
  assertNotSame(root,Files.getFileStore(mockPath));
  assertNotSame(usr,Files.getFileStore(mockPath));
  assertNotSame(root,Files.getFileStore(mockPath.resolve("foo.txt")));
  assertNotSame(usr,Files.getFileStore(mockPath.resolve("foo.txt")));
  assertSame(usr,IOUtils.getFileStore(mockPath.resolve("usr")));
  assertSame(usr,IOUtils.getFileStore(mockPath.resolve("usr/bar.txt")));
  assertSame(root,IOUtils.getFileStore(mockPath));
  assertSame(root,IOUtils.getFileStore(mockPath.resolve("foo.txt")));
}
