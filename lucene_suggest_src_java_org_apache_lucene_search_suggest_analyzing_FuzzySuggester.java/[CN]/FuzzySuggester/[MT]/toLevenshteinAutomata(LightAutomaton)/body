{
  final Set<IntsRef> ref=SpecialOperations.getFiniteStrings(automaton,-1);
  LightAutomaton subs[]=new LightAutomaton[ref.size()];
  int upto=0;
  for (  IntsRef path : ref) {
    if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {
      subs[upto]=BasicAutomata.makeStringLight(path.ints,path.offset,path.length);
      upto++;
    }
 else {
      int ints[]=new int[path.length - nonFuzzyPrefix];
      System.arraycopy(path.ints,path.offset + nonFuzzyPrefix,ints,0,ints.length);
      LevenshteinAutomata lev=new LevenshteinAutomata(ints,unicodeAware ? Character.MAX_CODE_POINT : 255,transpositions);
      subs[upto]=lev.toAutomaton(maxEdits,UnicodeUtil.newString(path.ints,path.offset,nonFuzzyPrefix));
      upto++;
    }
  }
  if (subs.length == 0) {
    return BasicAutomata.makeEmptyLight();
  }
 else   if (subs.length == 1) {
    return subs[0];
  }
 else {
    LightAutomaton a=BasicOperations.unionLight(Arrays.asList(subs));
    return BasicOperations.determinize(a);
  }
}
