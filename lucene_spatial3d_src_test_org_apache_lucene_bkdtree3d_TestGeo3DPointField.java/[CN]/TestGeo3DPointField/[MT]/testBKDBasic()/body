{
  Directory dir=newDirectory();
  IndexOutput out=dir.createOutput("bkd",IOContext.DEFAULT);
  BKD3DTreeWriter w=new BKD3DTreeWriter();
  w.add(0,0,0,0);
  w.add(1,1,1,1);
  w.add(-1,-1,-1,2);
  long indexFP=w.finish(out);
  out.close();
  IndexInput in=dir.openInput("bkd",IOContext.DEFAULT);
  in.seek(indexFP);
  BKD3DTreeReader r=new BKD3DTreeReader(in,3);
  DocIdSet hits=r.intersect(Integer.MIN_VALUE,Integer.MAX_VALUE,Integer.MIN_VALUE,Integer.MAX_VALUE,Integer.MIN_VALUE,Integer.MAX_VALUE,new BKD3DTreeReader.ValueFilter(){
    @Override public boolean accept(    int docID){
      return true;
    }
    @Override public BKD3DTreeReader.Relation compare(    int xMin,    int xMax,    int yMin,    int yMax,    int zMin,    int zMax){
      return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;
    }
  }
);
  DocIdSetIterator disi=hits.iterator();
  assertEquals(0,disi.nextDoc());
  assertEquals(1,disi.nextDoc());
  assertEquals(2,disi.nextDoc());
  assertEquals(DocIdSetIterator.NO_MORE_DOCS,disi.nextDoc());
  in.close();
  dir.close();
}
