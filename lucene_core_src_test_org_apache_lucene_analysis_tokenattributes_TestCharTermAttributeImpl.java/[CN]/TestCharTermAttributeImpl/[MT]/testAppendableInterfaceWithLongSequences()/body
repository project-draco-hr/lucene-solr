{
  CharTermAttributeImpl t=new CharTermAttributeImpl();
  t.append((CharSequence)"01234567890123456789012345678901234567890123456789");
  t.append((CharSequence)CharBuffer.wrap("01234567890123456789012345678901234567890123456789".toCharArray()),3,50);
  assertEquals("0123456789012345678901234567890123456789012345678934567890123456789012345678901234567890123456789",t.toString());
  t.setEmpty().append((CharSequence)new StringBuilder("01234567890123456789"),5,17);
  assertEquals((CharSequence)"567890123456",t.toString());
  t.append(new StringBuffer(t));
  assertEquals((CharSequence)"567890123456567890123456",t.toString());
  CharBuffer buf=CharBuffer.wrap("012345678901234567890123456789".toCharArray(),3,15);
  assertEquals("345678901234567",buf.toString());
  t.setEmpty().append(buf,1,14);
  assertEquals("4567890123456",t.toString());
  final String longTestString="012345678901234567890123456789";
  t.append(new CharSequence(){
    @Override public char charAt(    int i){
      return longTestString.charAt(i);
    }
    @Override public int length(){
      return longTestString.length();
    }
    @Override public CharSequence subSequence(    int start,    int end){
      return longTestString.subSequence(start,end);
    }
    @Override public String toString(){
      return longTestString;
    }
  }
);
  assertEquals("4567890123456" + longTestString,t.toString());
}
