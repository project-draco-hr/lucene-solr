{
  List<String> fields=sqlVisitor.fields;
  Set<String> fieldSet=new HashSet();
  Metric[] metrics=getMetrics(fields,fieldSet);
  if (metrics.length > 0) {
    return doAggregates(sqlVisitor,metrics);
  }
  StringBuilder flbuf=new StringBuilder();
  boolean comma=false;
  if (fields.size() == 0) {
    throw new IOException("Select columns must be specified.");
  }
  TableSpec tableSpec=new TableSpec(sqlVisitor.table,defaultZkhost);
  String zkHost=tableSpec.zkHost;
  String collection=tableSpec.collection;
  boolean score=false;
  for (  String field : fields) {
    if (field.contains("(")) {
      throw new IOException("Aggregate functions only supported with group by queries.");
    }
    if (field.contains("*")) {
      throw new IOException("* is not supported for column selection.");
    }
    if (field.equals("score")) {
      if (sqlVisitor.limit < 0) {
        throw new IOException("score is not a valid field for unlimited select queries");
      }
 else {
        score=true;
      }
    }
    if (comma) {
      flbuf.append(",");
    }
    comma=true;
    flbuf.append(field);
  }
  String fl=flbuf.toString();
  List<SortItem> sorts=sqlVisitor.sorts;
  StringBuilder siBuf=new StringBuilder();
  comma=false;
  if (sorts != null) {
    for (    SortItem sortItem : sorts) {
      if (comma) {
        siBuf.append(",");
      }
      siBuf.append(getSortField(sortItem,sqlVisitor.reverseColumnAliases) + " " + ascDesc(sortItem.getOrdering().toString()));
    }
  }
 else {
    if (sqlVisitor.limit < 0) {
      siBuf.append("_version_ desc");
      fl=fl + ",_version_";
    }
 else {
      siBuf.append("score desc");
      if (!score) {
        fl=fl + ",score";
      }
    }
  }
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("fl",fl.toString());
  params.set("q",sqlVisitor.query);
  if (siBuf.length() > 0) {
    params.set("sort",siBuf.toString());
  }
  TupleStream tupleStream;
  if (sqlVisitor.limit > -1) {
    params.set("rows",Integer.toString(sqlVisitor.limit));
    tupleStream=new LimitStream(new CloudSolrStream(zkHost,collection,params),sqlVisitor.limit);
  }
 else {
    params.set(CommonParams.QT,"/export");
    tupleStream=new CloudSolrStream(zkHost,collection,params);
  }
  return new SelectStream(tupleStream,sqlVisitor.columnAliases);
}
