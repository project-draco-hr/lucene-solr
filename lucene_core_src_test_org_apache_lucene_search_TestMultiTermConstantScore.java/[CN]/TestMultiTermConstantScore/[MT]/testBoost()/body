{
  IndexSearcher search=newSearcher(reader);
  search.setSimilarity(new ClassicSimilarity());
  Query q=csrq("data","1","6",T,T);
  search.search(new BoostQuery(q,100),new SimpleCollector(){
    private int base=0;
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      assertEquals("score for doc " + (doc + base) + " was not correct",1.0f,scorer.score(),SCORE_COMP_THRESH);
    }
    @Override protected void doSetNextReader(    LeafReaderContext context) throws IOException {
      base=context.docBase;
    }
    @Override public boolean needsScores(){
      return true;
    }
  }
);
  Query q1=new BoostQuery(csrq("data","A","A",T,T),.1f);
  Query q2=csrq("data","Z","Z",T,T);
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  ScoreDoc[] hits=search.search(bq.build(),1000).scoreDocs;
  Assert.assertEquals(1,hits[0].doc);
  Assert.assertEquals(0,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
  q1=new BoostQuery(csrq("data","A","A",T,T,MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE),.1f);
  q2=csrq("data","Z","Z",T,T,MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);
  bq=new BooleanQuery.Builder();
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  hits=search.search(bq.build(),1000).scoreDocs;
  Assert.assertEquals(1,hits[0].doc);
  Assert.assertEquals(0,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
  q1=new BoostQuery(csrq("data","A","A",T,T),10f);
  q2=csrq("data","Z","Z",T,T);
  bq=new BooleanQuery.Builder();
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  hits=search.search(bq.build(),1000).scoreDocs;
  Assert.assertEquals(0,hits[0].doc);
  Assert.assertEquals(1,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
}
