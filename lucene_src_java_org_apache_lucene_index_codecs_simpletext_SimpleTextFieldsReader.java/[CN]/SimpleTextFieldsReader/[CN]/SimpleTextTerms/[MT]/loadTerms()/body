{
  PositiveIntOutputs posIntOutputs=PositiveIntOutputs.getSingleton(false);
  Builder<PairOutputs.Pair<Long,Long>> b=new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1,0,0,true,new PairOutputs<Long,Long>(posIntOutputs,posIntOutputs));
  IndexInput in=(IndexInput)SimpleTextFieldsReader.this.in.clone();
  in.seek(termsStart);
  final BytesRef lastTerm=new BytesRef(10);
  long lastDocsStart=-1;
  int docFreq=0;
  while (true) {
    readLine(in,scratch);
    if (scratch.equals(END) || scratch.startsWith(FIELD)) {
      if (lastDocsStart != -1) {
        b.add(lastTerm,new PairOutputs.Pair<Long,Long>(lastDocsStart,Long.valueOf(docFreq)));
      }
      break;
    }
 else     if (scratch.startsWith(DOC)) {
      docFreq++;
    }
 else     if (scratch.startsWith(TERM)) {
      if (lastDocsStart != -1) {
        b.add(lastTerm,new PairOutputs.Pair<Long,Long>(lastDocsStart,Long.valueOf(docFreq)));
      }
      lastDocsStart=in.getFilePointer();
      final int len=scratch.length - TERM.length;
      if (len > lastTerm.length) {
        lastTerm.grow(len);
      }
      System.arraycopy(scratch.bytes,TERM.length,lastTerm.bytes,0,len);
      lastTerm.length=len;
      docFreq=0;
    }
  }
  fst=b.finish();
}
