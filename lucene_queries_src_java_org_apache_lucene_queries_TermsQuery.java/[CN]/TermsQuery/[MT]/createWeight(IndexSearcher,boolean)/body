{
  return new ConstantScoreWeight(this){
    @Override public void extractTerms(    Set<Term> terms){
    }
    @Override public Scorer scorer(    LeafReaderContext context,    Bits acceptDocs) throws IOException {
      final LeafReader reader=context.reader();
      BitDocIdSet.Builder builder=new BitDocIdSet.Builder(reader.maxDoc());
      final Fields fields=reader.fields();
      String lastField=null;
      Terms terms=null;
      TermsEnum termsEnum=null;
      PostingsEnum docs=null;
      TermIterator iterator=termData.iterator();
      for (BytesRef term=iterator.next(); term != null; term=iterator.next()) {
        String field=iterator.field();
        if (field != lastField) {
          terms=fields.terms(field);
          if (terms == null) {
            termsEnum=null;
          }
 else {
            termsEnum=terms.iterator();
          }
        }
        if (termsEnum != null && termsEnum.seekExact(term)) {
          docs=termsEnum.postings(acceptDocs,docs,PostingsEnum.NONE);
          builder.or(docs);
        }
      }
      BitDocIdSet result=builder.build();
      if (result == null) {
        return null;
      }
      final DocIdSetIterator disi=result.iterator();
      if (disi == null) {
        return null;
      }
      return new ConstantScoreScorer(this,score(),disi);
    }
  }
;
}
