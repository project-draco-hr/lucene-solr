{
  List<CharsRef> stems=new ArrayList<CharsRef>();
  for (int i=0; i < length; i++) {
    List<Character> suffixes=dictionary.lookupSuffix(word,i,length - i);
    if (suffixes == null) {
      continue;
    }
    for (    Character suffix : suffixes) {
      affixReader.setPosition(8 * suffix);
      char flag=(char)(affixReader.readShort() & 0xffff);
      if (hasCrossCheckedFlag(flag,flags)) {
        int appendLength=length - i;
        int deAffixedLength=length - appendLength;
        char stripOrd=(char)(affixReader.readShort() & 0xffff);
        dictionary.stripLookup.get(stripOrd,scratch);
        String strippedWord=new StringBuilder().append(word,0,deAffixedLength).append(scratch.utf8ToString()).toString();
        List<CharsRef> stemList=applyAffix(strippedWord.toCharArray(),strippedWord.length(),suffix,recursionDepth);
        stems.addAll(stemList);
      }
    }
  }
  for (int i=length - 1; i >= 0; i--) {
    List<Character> prefixes=dictionary.lookupPrefix(word,0,i);
    if (prefixes == null) {
      continue;
    }
    for (    Character prefix : prefixes) {
      affixReader.setPosition(8 * prefix);
      char flag=(char)(affixReader.readShort() & 0xffff);
      if (hasCrossCheckedFlag(flag,flags)) {
        int deAffixedStart=i;
        int deAffixedLength=length - deAffixedStart;
        char stripOrd=(char)(affixReader.readShort() & 0xffff);
        dictionary.stripLookup.get(stripOrd,scratch);
        String strippedWord=new StringBuilder().append(scratch.utf8ToString()).append(word,deAffixedStart,deAffixedLength).toString();
        List<CharsRef> stemList=applyAffix(strippedWord.toCharArray(),strippedWord.length(),prefix,recursionDepth);
        stems.addAll(stemList);
      }
    }
  }
  return stems;
}
