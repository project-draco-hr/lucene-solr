{
  BytesRef term;
  Bits randomBits=new RandomBits(MAXDOC,random().nextDouble(),random());
  DocsAndPositionsEnum leftPositions=null;
  DocsAndPositionsEnum rightPositions=null;
  DocsEnum leftDocs=null;
  DocsEnum rightDocs=null;
  while ((term=leftTermsEnum.next()) != null) {
    assertEquals(term,rightTermsEnum.next());
    assertTermStats(leftTermsEnum,rightTermsEnum);
    if (deep) {
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,DocsAndPositionsEnum.FLAG_PAYLOADS),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,DocsAndPositionsEnum.FLAG_PAYLOADS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,DocsAndPositionsEnum.FLAG_PAYLOADS),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,DocsAndPositionsEnum.FLAG_PAYLOADS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,DocsAndPositionsEnum.FLAG_PAYLOADS),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,DocsAndPositionsEnum.FLAG_PAYLOADS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,DocsAndPositionsEnum.FLAG_PAYLOADS),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,DocsAndPositionsEnum.FLAG_PAYLOADS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,DocsAndPositionsEnum.FLAG_OFFSETS),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,DocsAndPositionsEnum.FLAG_OFFSETS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,DocsAndPositionsEnum.FLAG_OFFSETS),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,DocsAndPositionsEnum.FLAG_OFFSETS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,DocsAndPositionsEnum.FLAG_OFFSETS),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,DocsAndPositionsEnum.FLAG_OFFSETS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,DocsAndPositionsEnum.FLAG_OFFSETS),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,DocsAndPositionsEnum.FLAG_OFFSETS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,0),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,0));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,0),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,0));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(null,leftPositions,0),rightPositions=rightTermsEnum.docsAndPositions(null,rightPositions,0));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.docsAndPositions(randomBits,leftPositions,0),rightPositions=rightTermsEnum.docsAndPositions(randomBits,rightPositions,0));
      assertDocsEnum(leftDocs=leftTermsEnum.docs(null,leftDocs),rightDocs=rightTermsEnum.docs(null,rightDocs),true);
      assertDocsEnum(leftDocs=leftTermsEnum.docs(randomBits,leftDocs),rightDocs=rightTermsEnum.docs(randomBits,rightDocs),true);
      assertDocsEnum(leftDocs=leftTermsEnum.docs(null,leftDocs,0),rightDocs=rightTermsEnum.docs(null,rightDocs,0),false);
      assertDocsEnum(leftDocs=leftTermsEnum.docs(randomBits,leftDocs,0),rightDocs=rightTermsEnum.docs(randomBits,rightDocs,0),false);
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.docs(null,leftDocs),rightDocs=rightTermsEnum.docs(null,rightDocs),true);
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.docs(randomBits,leftDocs),rightDocs=rightTermsEnum.docs(randomBits,rightDocs),true);
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.docs(null,leftDocs,0),rightDocs=rightTermsEnum.docs(null,rightDocs,0),false);
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.docs(randomBits,leftDocs,0),rightDocs=rightTermsEnum.docs(randomBits,rightDocs,0),false);
    }
  }
  assertNull(rightTermsEnum.next());
}
