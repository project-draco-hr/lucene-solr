{
  if (contents instanceof TermQuery) {
    return contents;
  }
  int numNegatives=0;
  if (!(contents instanceof BooleanQuery)) {
    throw new IllegalArgumentException("Unknown query type \"" + contents.getClass().getName() + "\" found in phrase query string \""+ phrasedQueryStringContents+ "\"");
  }
  BooleanQuery bq=(BooleanQuery)contents;
  BooleanClause[] bclauses=bq.getClauses();
  SpanQuery[] allSpanClauses=new SpanQuery[bclauses.length];
  for (int i=0; i < bclauses.length; i++) {
    Query qc=bclauses[i].getQuery();
    qc=qc.rewrite(reader);
    if (bclauses[i].getOccur().equals(BooleanClause.Occur.MUST_NOT)) {
      numNegatives++;
    }
    if (qc instanceof BooleanQuery) {
      ArrayList sc=new ArrayList();
      addComplexPhraseClause(sc,(BooleanQuery)qc);
      if (sc.size() > 0) {
        allSpanClauses[i]=(SpanQuery)sc.get(0);
      }
 else {
        allSpanClauses[i]=new SpanTermQuery(new Term(field,"Dummy clause because no terms found - must match nothing"));
      }
    }
 else {
      if (qc instanceof TermQuery) {
        TermQuery tq=(TermQuery)qc;
        allSpanClauses[i]=new SpanTermQuery(tq.getTerm());
      }
 else {
        throw new IllegalArgumentException("Unknown query type \"" + qc.getClass().getName() + "\" found in phrase query string \""+ phrasedQueryStringContents+ "\"");
      }
    }
  }
  if (numNegatives == 0) {
    return new SpanNearQuery(allSpanClauses,slopFactor,true);
  }
  ArrayList positiveClauses=new ArrayList();
  for (int j=0; j < allSpanClauses.length; j++) {
    if (!bclauses[j].getOccur().equals(BooleanClause.Occur.MUST_NOT)) {
      positiveClauses.add(allSpanClauses[j]);
    }
  }
  SpanQuery[] includeClauses=(SpanQuery[])positiveClauses.toArray(new SpanQuery[positiveClauses.size()]);
  SpanQuery include=null;
  if (includeClauses.length == 1) {
    include=includeClauses[0];
  }
 else {
    include=new SpanNearQuery(includeClauses,slopFactor + numNegatives,true);
  }
  SpanNearQuery exclude=new SpanNearQuery(allSpanClauses,slopFactor,true);
  SpanNotQuery snot=new SpanNotQuery(include,exclude);
  return snot;
}
