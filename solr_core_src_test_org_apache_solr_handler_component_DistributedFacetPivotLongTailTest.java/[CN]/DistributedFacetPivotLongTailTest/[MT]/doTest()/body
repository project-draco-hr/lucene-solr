{
  final SolrServer shard0=clients.get(0);
  final SolrServer shard1=clients.get(1);
  final SolrServer shard2=clients.get(2);
  for (int i=0; i < 100; i++) {
    for (int j=0; j < 5; j++) {
      shard0.add(sdoc("id",getDocNum(),"foo_s","aaa" + j));
      shard1.add(sdoc("id",getDocNum(),"foo_s","aaa" + j));
      shard2.add(sdoc("id",getDocNum(),"foo_s","aaa" + j));
    }
  }
  for (int i=0; i < 50; i++) {
    for (int j=0; j < 20; j++) {
      shard0.add(sdoc("id",getDocNum(),"foo_s","bbb" + j));
      shard1.add(sdoc("id",getDocNum(),"foo_s","bbb" + j));
    }
    shard2.add(sdoc("id",getDocNum(),"foo_s","junkA"));
  }
  shard2.add(sdoc("id",getDocNum(),"foo_s","bbb0"));
  for (int i=0; i < 45; i++) {
    String sub_term=(i < 35) ? "ccc" + (i % 5) : ((i < 41) ? "tailB" : "junkA");
    shard0.add(sdoc("id",getDocNum(),"foo_s","tail","bar_s",sub_term));
    shard1.add(sdoc("id",getDocNum(),"foo_s","tail","bar_s",sub_term));
    sub_term=(i < 40) ? "junkB" + (i % 5) : "tailB";
    shard2.add(sdoc("id",getDocNum(),"foo_s","tail","bar_s",sub_term));
  }
  for (int i=0; i < 30; i++) {
    shard2.add(sdoc("id",getDocNum(),"foo_s","zzz" + i));
  }
  commit();
  SolrParams req=params("q","*:*","distrib","false","facet","true","facet.limit","10","facet.pivot","foo_s,bar_s");
  PivotField pivot=null;
  List<PivotField> pivots=null;
  List<PivotField>[] shardPivots=new List[3];
  shardPivots[0]=shard0.query(req).getFacetPivot().get("foo_s,bar_s");
  shardPivots[1]=shard1.query(req).getFacetPivot().get("foo_s,bar_s");
  shardPivots[2]=shard2.query(req).getFacetPivot().get("foo_s,bar_s");
  for (int i=0; i < 3; i++) {
    assertEquals(10,shardPivots[i].size());
    for (int j=0; j < 5; j++) {
      pivot=shardPivots[i].get(j);
      assertEquals(pivot.toString(),"aaa" + j,pivot.getValue());
      assertEquals(pivot.toString(),100,pivot.getCount());
    }
  }
  for (int i=0; i < 2; i++) {
    for (int j=5; j < 10; j++) {
      pivot=shardPivots[i].get(j);
      assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("bbb"));
      assertEquals(pivot.toString(),50,pivot.getCount());
    }
  }
  assertEquals("junkA",shardPivots[2].get(5).getValue());
  assertEquals(50,shardPivots[2].get(5).getCount());
  assertEquals("tail",shardPivots[2].get(6).getValue());
  assertEquals(45,shardPivots[2].get(6).getCount());
  assertEquals("bbb0",shardPivots[2].get(7).getValue());
  assertEquals(1,shardPivots[2].get(7).getCount());
  for (int j=8; j < 10; j++) {
    pivot=shardPivots[2].get(j);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("zzz"));
    assertEquals(pivot.toString(),1,pivot.getCount());
  }
  pivots=shardPivots[2].get(6).getPivot();
  assertEquals(6,pivots.size());
  for (int j=0; j < 5; j++) {
    pivot=pivots.get(j);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("junkB"));
    assertEquals(pivot.toString(),8,pivot.getCount());
  }
  pivot=pivots.get(5);
  assertEquals("tailB",pivot.getValue());
  assertEquals(5,pivot.getCount());
  pivots=queryServer(params("q","*:*","shards",getShardsString(),FacetParams.FACET_OVERREQUEST_COUNT,"0",FacetParams.FACET_OVERREQUEST_RATIO,"0","facet","true","facet.limit","6","facet.pivot","foo_s,bar_s")).getFacetPivot().get("foo_s,bar_s");
  assertEquals(6,pivots.size());
  for (int i=0; i < 5; i++) {
    pivot=pivots.get(i);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("aaa"));
    assertEquals(pivot.toString(),300,pivot.getCount());
  }
  assertTrue(pivots.get(5).toString(),pivots.get(5).getValue().equals("bbb0"));
  assertEquals(pivots.get(5).toString(),101,pivots.get(5).getCount());
  for (  ModifiableSolrParams q : new ModifiableSolrParams[]{params(),params("f.bar_s.facet.overrequest.ratio","0","f.bar_s.facet.overrequest.count","0")}) {
    q.add(params("q","*:*","shards",getShardsString(),"facet","true","facet.limit","6","facet.pivot","foo_s,bar_s"));
    pivots=queryServer(q).getFacetPivot().get("foo_s,bar_s");
    assertEquals(6,pivots.size());
    for (int i=0; i < 5; i++) {
      pivot=pivots.get(i);
      assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("aaa"));
      assertEquals(pivot.toString(),300,pivot.getCount());
    }
    pivot=pivots.get(5);
    assertEquals(pivot.toString(),"tail",pivot.getValue());
    assertEquals(pivot.toString(),135,pivot.getCount());
    pivots=pivot.getPivot();
    assertEquals(6,pivots.size());
    pivot=pivots.get(0);
    assertEquals(pivot.toString(),"tailB",pivot.getValue());
    assertEquals(pivot.toString(),17,pivot.getCount());
    for (int i=1; i < 6; i++) {
      pivot=pivots.get(i);
      assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("ccc"));
      assertEquals(pivot.toString(),14,pivot.getCount());
    }
  }
  pivots=queryServer(params("q","*:*","shards",getShardsString(),"facet","true","facet.limit","6","f.bar_s.facet.limit","5","facet.pivot","foo_s,bar_s")).getFacetPivot().get("foo_s,bar_s");
  assertEquals(6,pivots.size());
  for (int i=0; i < 5; i++) {
    pivot=pivots.get(i);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("aaa"));
    assertEquals(pivot.toString(),300,pivot.getCount());
  }
  pivot=pivots.get(5);
  assertEquals(pivot.toString(),"tail",pivot.getValue());
  assertEquals(pivot.toString(),135,pivot.getCount());
  pivots=pivot.getPivot();
  assertEquals(5,pivots.size());
  pivot=pivots.get(0);
  assertEquals(pivot.toString(),"tailB",pivot.getValue());
  assertEquals(pivot.toString(),17,pivot.getCount());
  for (int i=1; i < 5; i++) {
    pivot=pivots.get(i);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("ccc"));
    assertEquals(pivot.toString(),14,pivot.getCount());
  }
  pivots=queryServer(params("q","*:*","shards",getShardsString(),"facet","true","facet.limit","6","f.bar_s.facet.overrequest.ratio","0","f.bar_s.facet.overrequest.count","0","f.bar_s.facet.limit","5","facet.pivot","foo_s,bar_s")).getFacetPivot().get("foo_s,bar_s");
  assertEquals(6,pivots.size());
  for (int i=0; i < 5; i++) {
    pivot=pivots.get(i);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("aaa"));
    assertEquals(pivot.toString(),300,pivot.getCount());
  }
  pivot=pivots.get(5);
  assertEquals(pivot.toString(),"tail",pivot.getValue());
  assertEquals(pivot.toString(),135,pivot.getCount());
  pivots=pivot.getPivot();
  assertEquals(5,pivots.size());
  for (int i=0; i < 5; i++) {
    pivot=pivots.get(i);
    assertTrue(pivot.toString(),pivot.getValue().toString().startsWith("ccc"));
    assertEquals(pivot.toString(),14,pivot.getCount());
  }
}
