{
  Directory dir=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
  Document doc=new Document();
  doc.add(new StoredField("bogusbytes","bogus"));
  doc.add(new StoredField("bogusshorts","bogus"));
  doc.add(new StoredField("bogusints","bogus"));
  doc.add(new StoredField("boguslongs","bogus"));
  doc.add(new StoredField("bogusfloats","bogus"));
  doc.add(new StoredField("bogusdoubles","bogus"));
  doc.add(new StoredField("bogusterms","bogus"));
  doc.add(new StoredField("bogustermsindex","bogus"));
  doc.add(new StoredField("bogusmultivalued","bogus"));
  doc.add(new StoredField("bogusbits","bogus"));
  iw.addDocument(doc);
  DirectoryReader ir=iw.getReader();
  iw.close();
  LeafReader ar=getOnlyLeafReader(ir);
  final FieldCache cache=FieldCache.DEFAULT;
  cache.purgeAllCaches();
  assertEquals(0,cache.getCacheEntries().length);
  NumericDocValues ints=cache.getNumerics(ar,"bogusints",FieldCache.INT_POINT_PARSER);
  assertEquals(NO_MORE_DOCS,ints.nextDoc());
  NumericDocValues longs=cache.getNumerics(ar,"boguslongs",FieldCache.LONG_POINT_PARSER);
  assertEquals(NO_MORE_DOCS,longs.nextDoc());
  NumericDocValues floats=cache.getNumerics(ar,"bogusfloats",FieldCache.FLOAT_POINT_PARSER);
  assertEquals(NO_MORE_DOCS,floats.nextDoc());
  NumericDocValues doubles=cache.getNumerics(ar,"bogusdoubles",FieldCache.DOUBLE_POINT_PARSER);
  assertEquals(NO_MORE_DOCS,doubles.nextDoc());
  BinaryDocValues binaries=cache.getTerms(ar,"bogusterms");
  assertEquals(NO_MORE_DOCS,binaries.nextDoc());
  SortedDocValues sorted=cache.getTermsIndex(ar,"bogustermsindex");
  assertEquals(NO_MORE_DOCS,sorted.nextDoc());
  SortedSetDocValues sortedSet=cache.getDocTermOrds(ar,"bogusmultivalued",null);
  assertEquals(NO_MORE_DOCS,sortedSet.nextDoc());
  Bits bits=cache.getDocsWithField(ar,"bogusbits",null);
  assertFalse(bits.get(0));
  assertEquals(0,cache.getCacheEntries().length);
  ir.close();
  dir.close();
}
