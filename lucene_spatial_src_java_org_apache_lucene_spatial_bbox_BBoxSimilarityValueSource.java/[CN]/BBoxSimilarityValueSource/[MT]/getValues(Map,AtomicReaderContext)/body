{
  AtomicReader reader=readerContext.reader();
  final double[] minX=FieldCache.DEFAULT.getDoubles(reader,strategy.field_minX,true);
  final double[] minY=FieldCache.DEFAULT.getDoubles(reader,strategy.field_minY,true);
  final double[] maxX=FieldCache.DEFAULT.getDoubles(reader,strategy.field_maxX,true);
  final double[] maxY=FieldCache.DEFAULT.getDoubles(reader,strategy.field_maxY,true);
  final Bits validMinX=FieldCache.DEFAULT.getDocsWithField(reader,strategy.field_minX);
  final Bits validMaxX=FieldCache.DEFAULT.getDocsWithField(reader,strategy.field_maxX);
  return new FunctionValues(){
    Rectangle rect=strategy.getSpatialContext().makeRectangle(0,0,0,0);
    @Override public float floatVal(    int doc){
      if (validMinX.get(doc) && validMaxX.get(doc)) {
        rect.reset(minX[doc],maxX[doc],minY[doc],maxY[doc]);
        return (float)similarity.score(rect,null);
      }
 else {
        return (float)similarity.score(null,null);
      }
    }
    @Override public Explanation explain(    int doc){
      if (validMinX.get(doc) && validMaxX.get(doc)) {
        rect.reset(minX[doc],maxX[doc],minY[doc],maxY[doc]);
        Explanation exp=new Explanation();
        similarity.score(rect,exp);
        return exp;
      }
      return new Explanation(0,"No BBox");
    }
    @Override public String toString(    int doc){
      return description() + "=" + floatVal(doc);
    }
  }
;
}
