{
  String collectionName=factory.getValueOperand(expression,0);
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  StreamExpressionNamedParameter onParam=factory.getNamedOperand(expression,"on");
  StreamExpressionNamedParameter flParam=factory.getNamedOperand(expression,"fl");
  StreamExpressionNamedParameter batchSizeParam=factory.getNamedOperand(expression,"batchSize");
  StreamExpressionNamedParameter zkHostExpression=factory.getNamedOperand(expression,"zkHost");
  String on=null;
  String fl=null;
  int batchSize=50;
  if (onParam == null) {
    throw new IOException("on parameter cannot be null for the fetch expression");
  }
 else {
    on=((StreamExpressionValue)onParam.getParameter()).getValue();
  }
  if (flParam == null) {
    throw new IOException("fl parameter cannot be null for the fetch expression");
  }
 else {
    fl=((StreamExpressionValue)flParam.getParameter()).getValue();
  }
  if (batchSizeParam != null) {
    batchSize=Integer.parseInt(((StreamExpressionValue)batchSizeParam.getParameter()).getValue());
  }
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression,streamExpressions.size()));
  }
  TupleStream stream=factory.constructStream(streamExpressions.get(0));
  String zkHost=null;
  if (null == zkHostExpression) {
    zkHost=factory.getCollectionZkHost(collectionName);
    if (zkHost == null) {
      zkHost=factory.getDefaultZkHost();
    }
  }
 else   if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {
    zkHost=((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
  }
  if (null == zkHost) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
  }
  init(zkHost,collectionName,stream,on,fl,batchSize);
}
