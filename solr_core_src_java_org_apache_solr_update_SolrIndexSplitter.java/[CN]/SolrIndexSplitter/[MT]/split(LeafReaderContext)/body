{
  LeafReader reader=readerContext.reader();
  FixedBitSet[] docSets=new FixedBitSet[numPieces];
  for (int i=0; i < docSets.length; i++) {
    docSets[i]=new FixedBitSet(reader.maxDoc());
  }
  Bits liveDocs=reader.getLiveDocs();
  Fields fields=reader.fields();
  Terms terms=fields == null ? null : fields.terms(field.getName());
  TermsEnum termsEnum=terms == null ? null : terms.iterator();
  if (termsEnum == null)   return docSets;
  BytesRef term=null;
  PostingsEnum postingsEnum=null;
  int[] docsMatchingRanges=null;
  if (ranges != null) {
    docsMatchingRanges=new int[rangesArr.length + 1];
  }
  CharsRefBuilder idRef=new CharsRefBuilder();
  for (; ; ) {
    term=termsEnum.next();
    if (term == null)     break;
    field.getType().indexedToReadable(term,idRef);
    String idString=idRef.toString();
    if (splitKey != null) {
      String part1=getRouteKey(idString);
      if (part1 == null)       continue;
      if (!splitKey.equals(part1)) {
        continue;
      }
    }
    int hash=0;
    if (hashRouter != null) {
      hash=hashRouter.sliceHash(idString,null,null,null);
    }
    postingsEnum=termsEnum.postings(liveDocs,postingsEnum,PostingsEnum.NONE);
    for (; ; ) {
      int doc=postingsEnum.nextDoc();
      if (doc == DocIdSetIterator.NO_MORE_DOCS)       break;
      if (ranges == null) {
        docSets[currPartition].set(doc);
        currPartition=(currPartition + 1) % numPieces;
      }
 else {
        int matchingRangesCount=0;
        for (int i=0; i < rangesArr.length; i++) {
          if (rangesArr[i].includes(hash)) {
            docSets[i].set(doc);
            ++matchingRangesCount;
          }
        }
        docsMatchingRanges[matchingRangesCount]++;
      }
    }
  }
  if (docsMatchingRanges != null) {
    for (int ii=0; ii < docsMatchingRanges.length; ii++) {
      if (0 == docsMatchingRanges[ii])       continue;
switch (ii) {
case 0:
        log.error("Splitting {}: {} documents belong to no shards and will be dropped",reader,docsMatchingRanges[ii]);
      break;
case 1:
    log.info("Splitting {}: {} documents will move into a sub-shard",reader,docsMatchingRanges[ii]);
  break;
default :
log.error("Splitting {}: {} documents will be moved to multiple ({}) sub-shards",reader,docsMatchingRanges[ii],ii);
break;
}
}
}
return docSets;
}
