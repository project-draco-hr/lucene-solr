{
  monkeyLog("starting");
  this.aggressivelyKillLeaders=killLeaders;
  startTime=System.currentTimeMillis();
  stop=false;
  new Thread(){
    private List<JettySolrRunner> deadPool=new ArrayList<JettySolrRunner>();
    @Override public void run(){
      while (!stop) {
        try {
          Thread.sleep(roundPause);
          Random random=LuceneTestCase.random();
          if (random.nextBoolean()) {
            if (!deadPool.isEmpty()) {
              int index=random.nextInt(deadPool.size());
              JettySolrRunner jetty=deadPool.get(index);
              try {
                jetty.start();
              }
 catch (              BindException e) {
                jetty.stop();
                sleep(2000);
                try {
                  jetty.start();
                }
 catch (                BindException e2) {
                  jetty.stop();
                  sleep(5000);
                  try {
                    jetty.start();
                  }
 catch (                  BindException e3) {
                    jetty.stop();
                    continue;
                  }
                }
              }
              deadPool.remove(index);
              starts.incrementAndGet();
              continue;
            }
          }
          int rnd=random.nextInt(10);
          if (expireSessions && rnd < EXPIRE_PERCENT) {
            expireRandomSession();
          }
          if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {
            randomConnectionLoss();
            randomConnectionLoss();
          }
          JettySolrRunner jetty;
          if (random.nextBoolean()) {
            jetty=stopRandomShard();
          }
 else {
            jetty=killRandomShard();
          }
          if (jetty == null) {
          }
 else {
            deadPool.add(jetty);
          }
        }
 catch (        InterruptedException e) {
        }
catch (        Exception e) {
          e.printStackTrace();
        }
      }
      monkeyLog("finished");
      monkeyLog("I ran for " + (System.currentTimeMillis() - startTime) / 1000.0f + "sec. I stopped " + stops + " and I started " + starts + ". I also expired " + expires.get() + " and caused " + connloss + " connection losses");
    }
  }
.start();
}
