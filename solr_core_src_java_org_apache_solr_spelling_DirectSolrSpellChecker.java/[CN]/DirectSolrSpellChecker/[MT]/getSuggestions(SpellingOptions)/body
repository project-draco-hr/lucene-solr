{
  LOG.debug("getSuggestions: " + options.tokens);
  SpellingResult result=new SpellingResult();
  float accuracy=(options.accuracy == Float.MIN_VALUE) ? checker.getAccuracy() : options.accuracy;
  for (  Token token : options.tokens) {
    String tokenText=token.toString();
    Term term=new Term(field,tokenText);
    int freq=options.reader.docFreq(term);
    int count=(options.alternativeTermCount > 0 && freq > 0) ? options.alternativeTermCount : options.count;
    SuggestWord[] suggestions=checker.suggestSimilar(term,count,options.reader,options.suggestMode,accuracy);
    result.addFrequency(token,freq);
    if (options.alternativeTermCount > 0 && freq > 0) {
      boolean foundOriginal=false;
      SuggestWord[] suggestionsWithOrig=new SuggestWord[suggestions.length + 1];
      for (int i=0; i < suggestions.length; i++) {
        if (suggestions[i].string.equals(tokenText)) {
          foundOriginal=true;
          break;
        }
        suggestionsWithOrig[i + 1]=suggestions[i];
      }
      if (!foundOriginal) {
        SuggestWord orig=new SuggestWord();
        orig.freq=freq;
        orig.string=tokenText;
        suggestionsWithOrig[0]=orig;
        suggestions=suggestionsWithOrig;
      }
    }
    if (suggestions.length == 0 && freq == 0) {
      List<String> empty=Collections.emptyList();
      result.add(token,empty);
    }
 else {
      for (      SuggestWord suggestion : suggestions) {
        result.add(token,suggestion.string,suggestion.freq);
      }
    }
  }
  return result;
}
