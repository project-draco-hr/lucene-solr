{
  LOG.debug("getSuggestions: " + options.tokens);
  SpellingResult result=new SpellingResult();
  float accuracy=(options.accuracy == Float.MIN_VALUE) ? checker.getAccuracy() : options.accuracy;
  SuggestMode mode=options.onlyMorePopular ? SuggestMode.SUGGEST_MORE_POPULAR : SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;
  for (  Token token : options.tokens) {
    Term term=new Term(field,token.toString());
    SuggestWord[] suggestions=checker.suggestSimilar(term,options.count,options.reader,mode,accuracy);
    int docFreq=0;
    if (options.extendedResults || suggestions.length == 0) {
      docFreq=options.reader.docFreq(term);
    }
    if (options.extendedResults) {
      result.addFrequency(token,docFreq);
    }
    if (suggestions.length == 0 && docFreq == 0) {
      List<String> empty=Collections.emptyList();
      result.add(token,empty);
    }
 else {
      for (      SuggestWord suggestion : suggestions) {
        result.add(token,suggestion.string,suggestion.freq);
      }
    }
  }
  return result;
}
