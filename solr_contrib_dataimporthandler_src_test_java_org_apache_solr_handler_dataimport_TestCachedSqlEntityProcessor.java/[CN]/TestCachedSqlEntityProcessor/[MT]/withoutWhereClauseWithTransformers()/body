{
  List fields=new ArrayList();
  fields.add(AbstractDataImportHandlerTestCase.createMap("column","id"));
  fields.add(AbstractDataImportHandlerTestCase.createMap("column","desc"));
  String q="select * from x where id=${x.id}";
  Map<String,String> entityAttrs=AbstractDataImportHandlerTestCase.createMap("query",q,"transformer",UppercaseTransformer.class.getName());
  MockDataSource ds=new MockDataSource();
  VariableResolverImpl vr=new VariableResolverImpl();
  vr.addNamespace("x",AbstractDataImportHandlerTestCase.createMap("id",1));
  Context context=AbstractDataImportHandlerTestCase.getContext(null,vr,ds,Context.FULL_DUMP,fields,entityAttrs);
  List<Map<String,Object>> rows=new ArrayList<Map<String,Object>>();
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",1,"desc","one"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",1,"desc","another one"));
  MockDataSource.setIterator(vr.replaceTokens(q),rows.iterator());
  EntityProcessor csep=new EntityProcessorWrapper(new CachedSqlEntityProcessor(),null);
  csep.init(context);
  rows=new ArrayList<Map<String,Object>>();
  while (true) {
    Map<String,Object> r=csep.nextRow();
    if (r == null)     break;
    rows.add(r);
  }
  Assert.assertEquals(2,rows.size());
  ds.close();
  csep.init(context);
  rows=new ArrayList<Map<String,Object>>();
  while (true) {
    Map<String,Object> r=csep.nextRow();
    if (r == null)     break;
    rows.add(r);
    Assert.assertEquals(r.get("desc").toString().toUpperCase(Locale.ENGLISH),r.get("desc"));
  }
  Assert.assertEquals(2,rows.size());
  Assert.assertEquals(2,rows.get(0).size());
  Assert.assertEquals(2,rows.get(1).size());
}
