{
  List<Map<String,Object>> rows=new ArrayList<Map<String,Object>>();
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",1,"desc","one"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",2,"desc","two"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",2,"desc","another two"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",3,"desc","three"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",3,"desc","another three"));
  rows.add(AbstractDataImportHandlerTestCase.createMap("id",3,"desc","another another three"));
  MockDataSource.setIterator(q,rows.iterator());
  EntityProcessor csep=new EntityProcessorWrapper(new CachedSqlEntityProcessor(),null);
  csep.init(context);
  rows=new ArrayList<Map<String,Object>>();
  while (true) {
    Map<String,Object> r=csep.nextRow();
    if (r == null)     break;
    rows.add(r);
  }
  Assert.assertEquals(0,rows.size());
  ds.close();
  csep.init(context);
  rows=new ArrayList<Map<String,Object>>();
  xNamespace.put("id",2);
  while (true) {
    Map<String,Object> r=csep.nextRow();
    if (r == null)     break;
    rows.add(r);
  }
  Assert.assertEquals(2,rows.size());
  csep.init(context);
  rows=new ArrayList<Map<String,Object>>();
  xNamespace.put("id",3);
  while (true) {
    Map<String,Object> r=csep.nextRow();
    if (r == null)     break;
    rows.add(r);
  }
  Assert.assertEquals(3,rows.size());
}
