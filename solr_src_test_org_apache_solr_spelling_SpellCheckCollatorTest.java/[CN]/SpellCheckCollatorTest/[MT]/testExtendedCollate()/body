{
  SolrCore core=h.getCore();
  SearchComponent speller=core.getSearchComponent("spellcheck");
  assertTrue("speller is null and it shouldn't be",speller != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.QT,"spellCheckCompRH");
  params.add(CommonParams.Q,"lowerfilt:(+fauth +home +loane)");
  params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,"true");
  params.add(SpellCheckComponent.COMPONENT_NAME,"true");
  params.add(SpellCheckComponent.SPELLCHECK_BUILD,"true");
  params.add(SpellCheckComponent.SPELLCHECK_COUNT,"10");
  params.add(SpellCheckComponent.SPELLCHECK_COLLATE,"true");
  SolrRequestHandler handler=core.getRequestHandler("spellCheckCompRH");
  SolrQueryResponse rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  NamedList values=rsp.getValues();
  NamedList spellCheck=(NamedList)values.get("spellcheck");
  NamedList suggestions=(NamedList)spellCheck.get("suggestions");
  String singleCollation=(String)suggestions.get("collation");
  assertEquals("lowerfilt:(+faith +homer +loaves)",singleCollation);
  params.remove(SpellCheckComponent.SPELLCHECK_BUILD);
  params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES,"5");
  params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS,"1");
  handler=core.getRequestHandler("spellCheckCompRH");
  rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  values=rsp.getValues();
  spellCheck=(NamedList)values.get("spellcheck");
  suggestions=(NamedList)spellCheck.get("suggestions");
  singleCollation=(String)suggestions.get("collation");
  assertEquals("lowerfilt:(+faith +hope +loaves)",singleCollation);
  params.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);
  params.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);
  params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES,"5");
  params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS,"2");
  handler=core.getRequestHandler("spellCheckCompRH");
  rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  values=rsp.getValues();
  spellCheck=(NamedList)values.get("spellcheck");
  suggestions=(NamedList)spellCheck.get("suggestions");
  List<String> collations=suggestions.getAll("collation");
  assertTrue(collations.size() == 2);
  for (  String multipleCollation : collations) {
    assertTrue(multipleCollation.equals("lowerfilt:(+faith +hope +love)") || multipleCollation.equals("lowerfilt:(+faith +hope +loaves)"));
  }
  params.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS,"true");
  handler=core.getRequestHandler("spellCheckCompRH");
  rsp=new SolrQueryResponse();
  rsp.add("responseHeader",new SimpleOrderedMap());
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  values=rsp.getValues();
  spellCheck=(NamedList)values.get("spellcheck");
  suggestions=(NamedList)spellCheck.get("suggestions");
  List<NamedList> expandedCollationList=suggestions.getAll("collation");
  Set<String> usedcollations=new HashSet<String>();
  assertTrue(expandedCollationList.size() == 2);
  for (  NamedList expandedCollation : expandedCollationList) {
    String multipleCollation=(String)expandedCollation.get("collationQuery");
    assertTrue(multipleCollation.equals("lowerfilt:(+faith +hope +love)") || multipleCollation.equals("lowerfilt:(+faith +hope +loaves)"));
    assertTrue(!usedcollations.contains(multipleCollation));
    usedcollations.add(multipleCollation);
    int hits=(Integer)expandedCollation.get("hits");
    assertTrue(hits == 1);
    NamedList misspellingsAndCorrections=(NamedList)expandedCollation.get("misspellingsAndCorrections");
    assertTrue(misspellingsAndCorrections.size() == 3);
    String correctionForFauth=(String)misspellingsAndCorrections.get("fauth");
    String correctionForHome=(String)misspellingsAndCorrections.get("home");
    String correctionForLoane=(String)misspellingsAndCorrections.get("loane");
    assertTrue(correctionForFauth.equals("faith"));
    assertTrue(correctionForHome.equals("hope"));
    assertTrue(correctionForLoane.equals("love") || correctionForLoane.equals("loaves"));
  }
}
