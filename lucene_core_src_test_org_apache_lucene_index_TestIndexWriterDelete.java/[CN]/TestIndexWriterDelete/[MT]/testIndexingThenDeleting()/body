{
  final String fieldFormat=_TestUtil.getPostingsFormat("field");
  assumeFalse("This test cannot run with Memory codec",fieldFormat.equals("Memory"));
  assumeFalse("This test cannot run with SimpleText codec",fieldFormat.equals("SimpleText"));
  final Random r=random();
  Directory dir=newDirectory();
  final Analyzer analyzer=new Analyzer(){
    @Override public TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      return new TokenStreamComponents(new MockTokenizer(reader,MockTokenizer.WHITESPACE,true));
    }
  }
;
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));
  Document doc=new Document();
  doc.add(newTextField("field","go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20",Field.Store.NO));
  int num=atLeast(3);
  for (int iter=0; iter < num; iter++) {
    int count=0;
    final boolean doIndexing=r.nextBoolean();
    if (VERBOSE) {
      System.out.println("TEST: iter doIndexing=" + doIndexing);
    }
    if (doIndexing) {
      final int startFlushCount=w.getFlushCount();
      while (w.getFlushCount() == startFlushCount) {
        w.addDocument(doc);
        count++;
      }
    }
 else {
      final int startFlushCount=w.getFlushCount();
      while (w.getFlushCount() == startFlushCount) {
        w.deleteDocuments(new Term("foo","" + count));
        count++;
      }
    }
    assertTrue("flush happened too quickly during " + (doIndexing ? "indexing" : "deleting") + " count="+ count,count > 2500);
  }
  w.close();
  dir.close();
}
