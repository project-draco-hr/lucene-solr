{
  final TokenStream tokens=new TokenStream(){
    final CharTermAttribute termAtt=addAttribute(CharTermAttribute.class);
    final PositionIncrementAttribute posIncrAtt=addAttribute(PositionIncrementAttribute.class);
    final Iterator<String> terms=Arrays.asList("a","b","c").iterator();
    boolean first=true;
    @Override public boolean incrementToken(){
      if (!terms.hasNext())       return false;
      clearAttributes();
      termAtt.append(terms.next());
      posIncrAtt.setPositionIncrement(first ? 0 : 1);
      first=false;
      return true;
    }
  }
;
  MockRAMDirectory dir=new MockRAMDirectory();
  IndexWriter w=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()));
  Document doc=new Document();
  doc.add(new Field("field",tokens));
  w.addDocument(doc);
  w.commit();
  IndexSearcher s=new IndexSearcher(dir,false);
  PhraseQuery pq=new PhraseQuery();
  pq.add(new Term("field","a"));
  pq.add(new Term("field","b"));
  pq.add(new Term("field","c"));
  ScoreDoc[] hits=s.search(pq,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  Query q=new SpanTermQuery(new Term("field","a"));
  hits=s.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  DocsAndPositionsEnum tps=MultiFields.getTermPositionsEnum(s.getIndexReader(),MultiFields.getDeletedDocs(s.getIndexReader()),"field",new BytesRef("a"));
  assertTrue(tps.nextDoc() != DocsEnum.NO_MORE_DOCS);
  assertEquals(1,tps.freq());
  assertEquals(0,tps.nextPosition());
  w.close();
  assertTrue(_TestUtil.checkIndex(dir));
  s.close();
  dir.close();
}
