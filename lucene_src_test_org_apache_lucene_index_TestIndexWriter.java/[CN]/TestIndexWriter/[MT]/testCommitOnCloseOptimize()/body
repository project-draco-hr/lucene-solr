{
  MockDirectoryWrapper dir=newDirectory();
  dir.setPreventDoubleWrite(false);
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMaxBufferedDocs(10));
  ((LogMergePolicy)writer.getConfig().getMergePolicy()).setMergeFactor(10);
  for (int j=0; j < 17; j++) {
    addDocWithIndex(writer,j);
  }
  writer.close();
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND));
  writer.optimize();
  if (VERBOSE) {
    writer.setInfoStream(System.out);
  }
  IndexReader reader=IndexReader.open(dir,true);
  assertFalse("Reader incorrectly sees that the index is optimized",reader.isOptimized());
  reader.close();
  writer.rollback();
  assertNoUnreferencedFiles(dir,"aborted writer after optimize");
  reader=IndexReader.open(dir,true);
  assertFalse("Reader incorrectly sees that the index is optimized",reader.isOptimized());
  reader.close();
  if (VERBOSE) {
    System.out.println("TEST: do real optimize");
  }
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND));
  if (VERBOSE) {
    writer.setInfoStream(System.out);
  }
  writer.optimize();
  writer.close();
  if (VERBOSE) {
    System.out.println("TEST: writer closed");
  }
  assertNoUnreferencedFiles(dir,"aborted writer after optimize");
  reader=IndexReader.open(dir,true);
  assertTrue("Reader incorrectly sees that the index is unoptimized",reader.isOptimized());
  reader.close();
  dir.close();
}
