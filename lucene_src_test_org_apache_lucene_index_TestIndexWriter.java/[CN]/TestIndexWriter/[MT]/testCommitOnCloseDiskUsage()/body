{
  MockDirectoryWrapper dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMaxBufferedDocs(10).setReaderPooling(false).setMergePolicy(newLogMergePolicy(10)));
  for (int j=0; j < 30; j++) {
    addDocWithIndex(writer,j);
  }
  writer.close();
  dir.resetMaxUsedSizeInBytes();
  dir.setTrackDiskUsage(true);
  long startDiskUsage=dir.getMaxUsedSizeInBytes();
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(false).setMergePolicy(newLogMergePolicy(10)));
  for (int j=0; j < 1470; j++) {
    addDocWithIndex(writer,j);
  }
  long midDiskUsage=dir.getMaxUsedSizeInBytes();
  dir.resetMaxUsedSizeInBytes();
  writer.optimize();
  writer.close();
  IndexReader.open(dir,true).close();
  long endDiskUsage=dir.getMaxUsedSizeInBytes();
  assertTrue("writer used too much space while adding documents: mid=" + midDiskUsage + " start="+ startDiskUsage+ " end="+ endDiskUsage+ " max="+ (startDiskUsage * 150),midDiskUsage < 150 * startDiskUsage);
  assertTrue("writer used too much space after close: endDiskUsage=" + endDiskUsage + " startDiskUsage="+ startDiskUsage+ " max="+ (startDiskUsage * 150),endDiskUsage < 150 * startDiskUsage);
  dir.close();
}
