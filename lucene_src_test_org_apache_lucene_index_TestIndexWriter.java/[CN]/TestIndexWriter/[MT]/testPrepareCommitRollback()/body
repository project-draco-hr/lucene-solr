{
  MockRAMDirectory dir=newDirectory(random);
  dir.setPreventDoubleWrite(false);
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setMaxBufferedDocs(2));
  ((LogMergePolicy)writer.getConfig().getMergePolicy()).setMergeFactor(5);
  writer.commit();
  for (int i=0; i < 23; i++)   addDoc(writer);
  IndexReader reader=IndexReader.open(dir,true);
  assertEquals(0,reader.numDocs());
  writer.prepareCommit();
  IndexReader reader2=IndexReader.open(dir,true);
  assertEquals(0,reader2.numDocs());
  writer.rollback();
  IndexReader reader3=reader.reopen();
  assertEquals(0,reader.numDocs());
  assertEquals(0,reader2.numDocs());
  assertEquals(0,reader3.numDocs());
  reader.close();
  reader2.close();
  writer=new IndexWriter(dir,newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()));
  for (int i=0; i < 17; i++)   addDoc(writer);
  assertEquals(0,reader3.numDocs());
  reader3.close();
  reader=IndexReader.open(dir,true);
  assertEquals(0,reader.numDocs());
  reader.close();
  writer.prepareCommit();
  reader=IndexReader.open(dir,true);
  assertEquals(0,reader.numDocs());
  reader.close();
  writer.commit();
  reader=IndexReader.open(dir,true);
  assertEquals(17,reader.numDocs());
  reader.close();
  writer.close();
  dir.close();
}
