{
  Directory dir=new MockRAMDirectory();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec("Standard")));
  Document d=new Document();
  Field f=new Field("f","",Field.Store.NO,Field.Index.NOT_ANALYZED);
  d.add(f);
  char[] chars=new char[2];
  Random rnd=newRandom();
  final Set<String> allTerms=new HashSet<String>();
  for (int i=0; i < 10 * _TestUtil.getRandomMultiplier(); i++) {
    final String s;
    if (rnd.nextBoolean()) {
      if (rnd.nextBoolean()) {
        chars[0]=(char)getInt(rnd,1 + UnicodeUtil.UNI_SUR_LOW_END,0xffff);
      }
 else {
        chars[0]=(char)getInt(rnd,0,UnicodeUtil.UNI_SUR_HIGH_START - 1);
      }
      s=new String(chars,0,1);
    }
 else {
      chars[0]=(char)getInt(rnd,UnicodeUtil.UNI_SUR_HIGH_START,UnicodeUtil.UNI_SUR_HIGH_END);
      assertTrue(((int)chars[0]) >= UnicodeUtil.UNI_SUR_HIGH_START && ((int)chars[0]) <= UnicodeUtil.UNI_SUR_HIGH_END);
      chars[1]=(char)getInt(rnd,UnicodeUtil.UNI_SUR_LOW_START,UnicodeUtil.UNI_SUR_LOW_END);
      s=new String(chars,0,2);
    }
    allTerms.add(s);
    f.setValue(s);
    writer.addDocument(d);
    if ((1 + i) % 42 == 0) {
      writer.commit();
    }
  }
  IndexReader r=writer.getReader();
  final IndexReader[] subs=r.getSequentialSubReaders();
  for (int i=0; i < subs.length; i++) {
    checkTermsOrder(subs[i],allTerms,false);
  }
  checkTermsOrder(r,allTerms,true);
  r.close();
  writer.optimize();
  r=writer.getReader();
  checkTermsOrder(r,allTerms,true);
  r.close();
  writer.close();
  dir.close();
}
