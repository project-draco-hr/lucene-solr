{
  if (context instanceof SolrMorphlineContext) {
    IndexSchema schema=((SolrMorphlineContext)context).getIndexSchema();
    if (schema != null) {
      validateSchema(schema);
      return schema;
    }
  }
  File downloadedSolrHomeDir=null;
  try {
    String mySolrHomeDir=solrHomeDir;
    if (solrHomeDir == null || solrHomeDir.length() == 0) {
      if (zkHost == null || zkHost.length() == 0) {
        throw new MorphlineCompilationException("Downloading a Solr schema requires either parameter 'solrHomeDir' or parameters 'zkHost' and 'collection'",config);
      }
      if (collectionName == null || collectionName.length() == 0) {
        throw new MorphlineCompilationException("Parameter 'zkHost' requires that you also pass parameter 'collection'",config);
      }
      ZooKeeperDownloader zki=new ZooKeeperDownloader();
      SolrZkClient zkClient=zki.getZkClient(zkHost);
      try {
        String configName=zki.readConfigName(zkClient,collectionName);
        downloadedSolrHomeDir=Files.createTempDir();
        downloadedSolrHomeDir=zki.downloadConfigDir(zkClient,configName,downloadedSolrHomeDir);
        mySolrHomeDir=downloadedSolrHomeDir.getAbsolutePath();
      }
 catch (      KeeperException|InterruptedException|IOException e) {
        throw new MorphlineCompilationException("Cannot download schema.xml from ZooKeeper",config,e);
      }
 finally {
        zkClient.close();
      }
    }
    LOG.debug("SolrLocator loading IndexSchema from dir {}",mySolrHomeDir);
    try {
      SolrResourceLoader loader=new SolrResourceLoader(mySolrHomeDir);
      SolrConfig solrConfig=new SolrConfig(loader,"solrconfig.xml",null);
      InputSource is=new InputSource(loader.openSchema("schema.xml"));
      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName("schema.xml"));
      IndexSchema schema=new IndexSchema(solrConfig,"schema.xml",is);
      validateSchema(schema);
      return schema;
    }
 catch (    ParserConfigurationException|IOException|SAXException e) {
      throw new MorphlineRuntimeException(e);
    }
  }
  finally {
    if (downloadedSolrHomeDir != null) {
      try {
        FileUtils.deleteDirectory(downloadedSolrHomeDir);
      }
 catch (      IOException e) {
        LOG.warn("Cannot delete tmp directory",e);
      }
    }
  }
}
