{
  TokenStream.setOnlyUseNewAPI(true);
  try {
    try {
      TokenStream stream=new WhitespaceTokenizer(new StringReader(doc));
      stream=new PartOfSpeechTaggingFilter(stream);
      stream=new LowerCaseFilter(stream);
      stream=new StopFilter(stream,stopwords);
      while (stream.incrementToken())       ;
      fail("If only the new API is allowed, this should fail with an UOE");
    }
 catch (    UnsupportedOperationException uoe) {
      assertTrue((PartOfSpeechTaggingFilter.class.getName() + " does not implement incrementToken() which is needed for onlyUseNewAPI.").equals(uoe.getMessage()));
    }
    TokenStream stream=new WhitespaceTokenizer(new StringReader(doc));
    stream=new LowerCaseFilter(stream);
    stream=new StopFilter(stream,stopwords);
    while (stream.incrementToken())     ;
    assertTrue("TermAttribute is implemented by TermAttributeImpl",stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);
    assertTrue("OffsetAttribute is implemented by OffsetAttributeImpl",stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);
    assertTrue("FlagsAttribute is implemented by FlagsAttributeImpl",stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);
    assertTrue("PayloadAttribute is implemented by PayloadAttributeImpl",stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);
    assertTrue("PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl",stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);
    assertTrue("TypeAttribute is implemented by TypeAttributeImpl",stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);
    TokenStream.setOnlyUseNewAPI(false);
    stream=new WhitespaceTokenizer(new StringReader(doc));
    assertTrue("TermAttribute is implemented by TokenWrapper",stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);
    assertTrue("OffsetAttribute is implemented by TokenWrapper",stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);
    assertTrue("FlagsAttribute is implemented by TokenWrapper",stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);
    assertTrue("PayloadAttribute is implemented by TokenWrapper",stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);
    assertTrue("PositionIncrementAttribute is implemented by TokenWrapper",stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);
    assertTrue("TypeAttribute is implemented by TokenWrapper",stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);
  }
  finally {
    TokenStream.setOnlyUseNewAPI(false);
  }
}
