{
  h.update("<delete><query>*:*</query></delete>");
  ArrayList<ArrayList<Integer>> int1TestStart=new ArrayList<ArrayList<Integer>>();
  int1TestStart.add(new ArrayList<Integer>());
  ArrayList<ArrayList<Integer>> int2TestStart=new ArrayList<ArrayList<Integer>>();
  int2TestStart.add(new ArrayList<Integer>());
  ArrayList<ArrayList<Long>> longTestStart=new ArrayList<ArrayList<Long>>();
  longTestStart.add(new ArrayList<Long>());
  longTestStart.add(new ArrayList<Long>());
  ArrayList<ArrayList<Float>> floatTestStart=new ArrayList<ArrayList<Float>>();
  floatTestStart.add(new ArrayList<Float>());
  floatTestStart.add(new ArrayList<Float>());
  floatTestStart.add(new ArrayList<Float>());
  for (int j=0; j < NUM_LOOPS; ++j) {
    int i=j % INT;
    long l=j % LONG;
    float f=j % FLOAT;
    double d=j % DOUBLE;
    int dt=j % DATE;
    int s=j % STRING;
    assertU(adoc("id","1000" + j,"int_id","" + i,"long_ld","" + l,"float_fd","" + f,"double_dd","" + d,"date_dtd",(1800 + dt) + "-12-31T23:59:59.999Z","string_sd","abc" + new Integer(s).toString().charAt(0)));
    if (f <= 50) {
      int1TestStart.get(0).add(i);
    }
    if (f <= 30) {
      int2TestStart.get(0).add(i);
    }
    if (new Integer(s).toString().charAt(0) == '1') {
      longTestStart.get(0).add(l);
    }
    if (new Integer(s).toString().charAt(0) == '2') {
      longTestStart.get(1).add(l);
    }
    if (l >= 20) {
      floatTestStart.get(0).add(f);
    }
    if (l >= 30) {
      floatTestStart.get(1).add(f);
    }
    if (d <= 50) {
      floatTestStart.get(2).add(f);
    }
    if (usually()) {
      assertU(commit());
    }
  }
  assertU(commit());
  setResponse(h.query(request(fileToStringArr(fileName))));
  ArrayList<Double> int1=getDoubleList("ir","queryFacets","float1","double","sum");
  ArrayList<Double> int1Test=calculateNumberStat(int1TestStart,"sum");
  assertEquals(getRawResponse(),int1,int1Test);
  ArrayList<Integer> int2=getIntegerList("ir","queryFacets","float2","int","percentile_8");
  ArrayList<Integer> int2Test=(ArrayList<Integer>)calculateStat(int2TestStart,"perc_8");
  assertEquals(getRawResponse(),int2,int2Test);
  ArrayList<Double> long1=getDoubleList("lr","queryFacets","string","double","median");
  ArrayList<Double> long1Test=calculateNumberStat(longTestStart,"median");
  assertEquals(getRawResponse(),long1,long1Test);
  ArrayList<Double> float1=getDoubleList("fr","queryFacets","lad","double","mean");
  ArrayList<Double> float1Test=calculateNumberStat(floatTestStart,"mean");
  assertEquals(getRawResponse(),float1,float1Test);
}
