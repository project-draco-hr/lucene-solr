{
  String fileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION);
  final IndexInput in=state.directory.openInput(fileName,new IOContext(state.context,true));
  boolean success=false;
  try {
    CodecUtil.checkSegmentHeader(in,VariableGapTermsIndexWriter.CODEC_NAME,VariableGapTermsIndexWriter.VERSION_START,VariableGapTermsIndexWriter.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
    CodecUtil.checksumEntireFile(in);
    seekDir(in);
    final int numFields=in.readVInt();
    if (numFields < 0) {
      throw new CorruptIndexException("invalid numFields: " + numFields,in);
    }
    for (int i=0; i < numFields; i++) {
      final int field=in.readVInt();
      final long indexStart=in.readVLong();
      final FieldInfo fieldInfo=state.fieldInfos.fieldInfo(field);
      FieldIndexData previous=fields.put(fieldInfo.name,new FieldIndexData(in,fieldInfo,indexStart));
      if (previous != null) {
        throw new CorruptIndexException("duplicate field: " + fieldInfo.name,in);
      }
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(in);
    }
 else {
      IOUtils.closeWhileHandlingException(in);
    }
  }
}
