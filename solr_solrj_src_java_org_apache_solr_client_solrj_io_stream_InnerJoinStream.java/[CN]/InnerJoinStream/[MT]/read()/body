{
  if (joinedTuples.size() > 0) {
    return joinedTuples.removeFirst();
  }
  while (true) {
    if (0 == leftTupleGroup.size()) {
      Tuple firstMember=loadEqualTupleGroup(leftStream,leftTupleGroup,leftStreamComparator);
      if (firstMember.EOF) {
        return firstMember;
      }
    }
    if (0 == rightTupleGroup.size()) {
      Tuple firstMember=loadEqualTupleGroup(rightStream,rightTupleGroup,rightStreamComparator);
      if (firstMember.EOF) {
        return firstMember;
      }
    }
    if (eq.test(leftTupleGroup.get(0),rightTupleGroup.get(0))) {
      for (      Tuple left : leftTupleGroup) {
        for (        Tuple right : rightTupleGroup) {
          Tuple clone=left.clone();
          clone.merge(right);
          joinedTuples.add(clone);
        }
      }
      leftTupleGroup.clear();
      rightTupleGroup.clear();
      return joinedTuples.removeFirst();
    }
 else {
      int c=iterationComparator.compare(leftTupleGroup.get(0),rightTupleGroup.get(0));
      if (c < 0) {
        leftTupleGroup.clear();
      }
 else {
        rightTupleGroup.clear();
      }
    }
  }
}
