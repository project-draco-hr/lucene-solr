{
  final Directory d=newDirectory();
  final MyIndexWriter w=new MyIndexWriter(d,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)));
  w.setInfoStream(VERBOSE ? System.out : null);
  w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random,2,11));
  final int numStartDocs=atLeast(20);
  final LineFileDocs docs=new LineFileDocs(random);
  for (int docIDX=0; docIDX < numStartDocs; docIDX++) {
    w.addDocument(docs.nextDoc());
  }
  MergePolicy mp=w.getConfig().getMergePolicy();
  final int mergeAtOnce=1 + w.segmentInfos.size();
  if (mp instanceof TieredMergePolicy) {
    ((TieredMergePolicy)mp).setMaxMergeAtOnce(mergeAtOnce);
  }
 else   if (mp instanceof LogMergePolicy) {
    ((LogMergePolicy)mp).setMergeFactor(mergeAtOnce);
  }
 else {
    w.close();
    d.close();
    return;
  }
  final AtomicBoolean doStop=new AtomicBoolean();
  w.getConfig().setMaxBufferedDocs(2);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        while (!doStop.get()) {
          w.updateDocument(new Term("docid","" + random.nextInt(numStartDocs)),docs.nextDoc());
          w.getReader().close();
        }
      }
 catch (      Throwable t) {
        throw new RuntimeException(t);
      }
    }
  }
;
  t.start();
  w.optimize();
  doStop.set(true);
  t.join();
  assertTrue("optimize count is " + w.optimizeMergeCount.get(),w.optimizeMergeCount.get() <= 1);
  w.close();
  d.close();
}
