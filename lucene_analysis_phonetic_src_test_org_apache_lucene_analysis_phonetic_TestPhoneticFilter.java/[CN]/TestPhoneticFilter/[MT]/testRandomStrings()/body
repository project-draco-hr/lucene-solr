{
  Encoder encoders[]=new Encoder[]{new Metaphone(),new DoubleMetaphone(),new Soundex(),new RefinedSoundex(),new Caverphone2()};
  for (  final Encoder e : encoders) {
    Analyzer a=new Analyzer(){
      @Override protected TokenStreamComponents createComponents(      String fieldName,      Reader reader){
        Tokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.WHITESPACE,false);
        return new TokenStreamComponents(tokenizer,new PhoneticFilter(tokenizer,e,false));
      }
    }
;
    checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);
    Analyzer b=new Analyzer(){
      @Override protected TokenStreamComponents createComponents(      String fieldName,      Reader reader){
        Tokenizer tokenizer=new MockTokenizer(reader,MockTokenizer.WHITESPACE,false);
        return new TokenStreamComponents(tokenizer,new PhoneticFilter(tokenizer,e,false));
      }
    }
;
    checkRandomData(random(),b,1000 * RANDOM_MULTIPLIER);
  }
}
