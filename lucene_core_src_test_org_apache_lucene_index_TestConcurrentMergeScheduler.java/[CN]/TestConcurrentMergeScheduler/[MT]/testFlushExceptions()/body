{
  MockDirectoryWrapper directory=newMockDirectory();
  FailOnlyOnFlush failure=new FailOnlyOnFlush();
  directory.failOn(failure);
  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(2);
  if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {
    iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler(){
      @Override protected boolean isOK(      Throwable th){
        return th instanceof AlreadyClosedException || (th instanceof IllegalStateException && th.getMessage().contains("this writer hit an unrecoverable error"));
      }
    }
);
  }
  IndexWriter writer=new IndexWriter(directory,iwc);
  Document doc=new Document();
  Field idField=newStringField("id","",Field.Store.YES);
  doc.add(idField);
  outer:   for (int i=0; i < 10; i++) {
    if (VERBOSE) {
      System.out.println("TEST: iter=" + i);
    }
    for (int j=0; j < 20; j++) {
      idField.setStringValue(Integer.toString(i * 20 + j));
      writer.addDocument(doc);
    }
    while (true) {
      writer.addDocument(doc);
      failure.setDoFail();
      try {
        writer.flush(true,true);
        if (failure.hitExc) {
          fail("failed to hit IOException");
        }
      }
 catch (      IOException ioe) {
        if (VERBOSE) {
          ioe.printStackTrace(System.out);
        }
        failure.clearDoFail();
        assertTrue(writer.isClosed());
        assertTrue(writer.deleter.isClosed());
        break outer;
      }
    }
  }
  assertFalse(DirectoryReader.indexExists(directory));
  directory.close();
}
