{
  PreAnalyzedField paf=new PreAnalyzedField();
  HashMap<String,String> args=new HashMap<>();
  args.put(PreAnalyzedField.PARSER_IMPL,SimplePreAnalyzedParser.class.getName());
  paf.init(h.getCore().getLatestSchema(),args);
  try {
    Field f=(Field)paf.fromString(field,valid[0],1.0f);
  }
 catch (  Exception e) {
    fail("Should pass: '" + valid[0] + "', exception: "+ e);
  }
  args.put(PreAnalyzedField.PARSER_IMPL,JsonPreAnalyzedParser.class.getName());
  paf.init(h.getCore().getLatestSchema(),args);
  try {
    Field f=(Field)paf.fromString(field,valid[0],1.0f);
    fail("Should fail JSON parsing: '" + valid[0]);
  }
 catch (  Exception e) {
  }
  byte[] deadbeef=new byte[]{(byte)0xd,(byte)0xe,(byte)0xa,(byte)0xd,(byte)0xb,(byte)0xe,(byte)0xe,(byte)0xf};
  PreAnalyzedParser parser=new JsonPreAnalyzedParser();
  try {
    Field f=(Field)paf.fromString(field,jsonValid,1.0f);
    assertEquals(jsonValid,parser.toFormattedString(f));
  }
 catch (  Exception e) {
    fail("Should pass: '" + jsonValid + "', exception: "+ e);
  }
}
