{
  boolean cache=random.nextBoolean();
  int cost=cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;
  boolean positive=random.nextBoolean();
  boolean exclude=facetQuery ? false : random.nextBoolean();
  OpenBitSet[] sets=facetQuery ? new OpenBitSet[]{model.facetQuery} : (exclude ? new OpenBitSet[]{model.answer,model.facetQuery} : new OpenBitSet[]{model.answer,model.multiSelect,model.facetQuery});
  if (random.nextInt(100) < 50) {
    int l=0;
    int u=0;
    if (positive) {
      int n=-1;
      for (int i=0; i < 4; i++) {
        int ll=random.nextInt(model.indexSize);
        int uu=ll + ((ll == model.indexSize - 1) ? 0 : random.nextInt(model.indexSize - l));
        if (uu - ll + 1 > n) {
          n=uu - ll + 1;
          u=uu;
          l=ll;
        }
      }
      for (      OpenBitSet set : sets) {
        set.clear(0,l);
        set.clear(u + 1,model.indexSize);
      }
    }
 else {
      l=random.nextInt(model.indexSize);
      u=Math.max(model.indexSize - 1,l + random.nextInt(Math.max(model.indexSize / 10,2)));
      for (      OpenBitSet set : sets) {
        set.clear(l,u + 1);
      }
    }
    return frangeStr(!positive,l,u,cache,cost,exclude);
  }
 else {
    OpenBitSet pset=new OpenBitSet(model.indexSize);
    for (int i=0; i < pset.getBits().length; i++) {
      pset.getBits()[i]=random.nextLong();
    }
    if (positive) {
      for (      OpenBitSet set : sets) {
        set.and(pset);
      }
    }
 else {
      for (      OpenBitSet set : sets) {
        set.andNot(pset);
      }
    }
    StringBuilder sb=new StringBuilder();
    for (int doc=-1; ; ) {
      doc=pset.nextSetBit(doc + 1);
      if (doc < 0 || doc >= model.indexSize)       break;
      sb.append((positive ? " " : " -") + f + ":"+ doc);
    }
    String ret=sb.toString();
    if (ret.length() == 0)     ret=(positive ? "" : "-") + "id:99999999";
    if (!cache || exclude || random.nextBoolean()) {
      ret="{!cache=" + cache + ((cost != 0) ? " cost=" + cost : "")+ ((exclude) ? " tag=t" : "")+ "}"+ ret;
    }
    return ret;
  }
}
