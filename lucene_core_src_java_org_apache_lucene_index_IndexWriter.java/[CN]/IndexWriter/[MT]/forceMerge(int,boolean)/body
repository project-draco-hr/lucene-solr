{
  ensureOpen();
  if (maxNumSegments < 1)   throw new IllegalArgumentException("maxNumSegments must be >= 1; got " + maxNumSegments);
  if (infoStream.isEnabled("IW")) {
    infoStream.message("IW","forceMerge: index now " + segString());
    infoStream.message("IW","now flush at forceMerge");
  }
  flush(true,true);
synchronized (this) {
    resetMergeExceptions();
    segmentsToMerge.clear();
    for (    SegmentCommitInfo info : segmentInfos) {
      segmentsToMerge.put(info,Boolean.TRUE);
    }
    mergeMaxNumSegments=maxNumSegments;
    for (    final MergePolicy.OneMerge merge : pendingMerges) {
      merge.maxNumSegments=maxNumSegments;
      segmentsToMerge.put(merge.info,Boolean.TRUE);
    }
    for (    final MergePolicy.OneMerge merge : runningMerges) {
      merge.maxNumSegments=maxNumSegments;
      segmentsToMerge.put(merge.info,Boolean.TRUE);
    }
  }
  maybeMerge(config.getMergePolicy(),MergeTrigger.EXPLICIT,maxNumSegments);
  if (doWait) {
synchronized (this) {
      while (true) {
        if (tragedy != null) {
          throw new IllegalStateException("this writer hit an unrecoverable error; cannot complete forceMerge",tragedy);
        }
        if (mergeExceptions.size() > 0) {
          final int size=mergeExceptions.size();
          for (int i=0; i < size; i++) {
            final MergePolicy.OneMerge merge=mergeExceptions.get(i);
            if (merge.maxNumSegments != -1) {
              throw new IOException("background merge hit exception: " + merge.segString(),merge.getException());
            }
          }
        }
        if (maxNumSegmentsMergesPending())         doWait();
 else         break;
      }
    }
    ensureOpen();
  }
}
