{
  Input keys[]=new Input[]{new Input("a Penny saved is a penny earned",10,new BytesRef("foobaz"))};
  File tempDir=TestUtil.getTempDir("AnalyzingInfixSuggesterTest");
  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true);
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,3){
    @Override protected Directory getDirectory(    File path){
      return newDirectory();
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("penn",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a <b>Penn</b>y saved is a <b>penn</b>y earned",results.get(0).key);
  suggester.close();
  suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,3){
    @Override protected void addPrefixMatch(    StringBuilder sb,    String surface,    String analyzed,    String prefixToken){
      sb.append("<b>");
      sb.append(surface);
      sb.append("</b>");
    }
    @Override protected Directory getDirectory(    File path){
      return newDirectory();
    }
  }
;
  suggester.build(new InputArrayIterator(keys));
  results=suggester.lookup(TestUtil.stringToCharSequence("penn",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a <b>Penny</b> saved is a <b>penny</b> earned",results.get(0).key);
  suggester.close();
}
