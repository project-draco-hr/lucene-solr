{
  final CharArraySet stopWords=StopFilter.makeStopSet("a");
  Analyzer indexAnalyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      MockTokenizer tokens=new MockTokenizer();
      return new TokenStreamComponents(tokens,new StopFilter(tokens,stopWords));
    }
  }
;
  Analyzer queryAnalyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      MockTokenizer tokens=new MockTokenizer();
      return new TokenStreamComponents(tokens,new SuggestStopFilter(tokens,stopWords));
    }
  }
;
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,newDirectory(),indexAnalyzer,queryAnalyzer,3);
  Input keys[]=new Input[]{new Input("a bob for apples",10,new BytesRef("foobaz"))};
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("a",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a bob for <b>a</b>pples",results.get(0).key);
  suggester.close();
}
