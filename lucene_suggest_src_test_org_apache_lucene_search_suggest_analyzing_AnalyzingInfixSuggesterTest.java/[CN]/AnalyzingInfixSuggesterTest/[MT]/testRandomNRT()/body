{
  final Path tempDir=createTempDir("AnalyzingInfixSuggesterTest");
  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
  int minPrefixChars=random().nextInt(7);
  if (VERBOSE) {
    System.out.println("  minPrefixChars=" + minPrefixChars);
  }
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(newFSDirectory(tempDir),a,a,minPrefixChars,false);
  suggester.build(new InputArrayIterator(new Input[0]));
  LookupThread lookupThread=new LookupThread(suggester);
  lookupThread.start();
  int iters=atLeast(1000);
  int visibleUpto=0;
  Set<Long> usedWeights=new HashSet<>();
  Set<String> usedKeys=new HashSet<>();
  List<Input> inputs=new ArrayList<>();
  List<Update> pendingUpdates=new ArrayList<>();
  for (int iter=0; iter < iters; iter++) {
    String text;
    while (true) {
      text=randomText();
      if (usedKeys.contains(text) == false) {
        usedKeys.add(text);
        break;
      }
    }
    long weight;
    while (true) {
      weight=random().nextInt(10 * iters);
      if (usedWeights.contains(weight) == false) {
        usedWeights.add(weight);
        break;
      }
    }
    if (inputs.size() > 0 && random().nextInt(4) == 1) {
      Update update=new Update();
      update.index=random().nextInt(inputs.size());
      update.weight=weight;
      Input input=inputs.get(update.index);
      pendingUpdates.add(update);
      if (VERBOSE) {
        System.out.println("TEST: iter=" + iter + " update input="+ input.term.utf8ToString()+ "/"+ weight);
      }
      suggester.update(input.term,null,weight,input.term);
    }
 else {
      inputs.add(new Input(text,weight,new BytesRef(text)));
      if (VERBOSE) {
        System.out.println("TEST: iter=" + iter + " add input="+ text+ "/"+ weight);
      }
      BytesRef br=new BytesRef(text);
      suggester.add(br,null,weight,br);
    }
    if (random().nextInt(15) == 7) {
      if (VERBOSE) {
        System.out.println("TEST: now refresh suggester");
      }
      suggester.refresh();
      visibleUpto=inputs.size();
      for (      Update update : pendingUpdates) {
        Input oldInput=inputs.get(update.index);
        Input newInput=new Input(oldInput.term,update.weight,oldInput.payload);
        inputs.set(update.index,newInput);
      }
      pendingUpdates.clear();
    }
    if (random().nextInt(50) == 7) {
      if (VERBOSE) {
        System.out.println("TEST: now close/reopen suggester");
      }
      lookupThread.finish();
      suggester.close();
      suggester=new AnalyzingInfixSuggester(newFSDirectory(tempDir),a,a,minPrefixChars,false);
      lookupThread=new LookupThread(suggester);
      lookupThread.start();
      visibleUpto=inputs.size();
      for (      Update update : pendingUpdates) {
        Input oldInput=inputs.get(update.index);
        Input newInput=new Input(oldInput.term,update.weight,oldInput.payload);
        inputs.set(update.index,newInput);
      }
      pendingUpdates.clear();
    }
    if (visibleUpto > 0) {
      String query=randomText();
      boolean lastPrefix=random().nextInt(5) != 1;
      if (lastPrefix == false) {
        query+=" ";
      }
      String[] queryTerms=query.split("\\s");
      boolean allTermsRequired=random().nextInt(10) == 7;
      boolean doHilite=random().nextBoolean();
      if (VERBOSE) {
        System.out.println("TEST: lookup \"" + query + "\" allTermsRequired="+ allTermsRequired+ " doHilite="+ doHilite);
      }
      List<Input> expected=new ArrayList<>();
      for (int i=0; i < visibleUpto; i++) {
        Input input=inputs.get(i);
        String[] inputTerms=input.term.utf8ToString().split("\\s");
        boolean match=false;
        for (int j=0; j < queryTerms.length; j++) {
          if (j < queryTerms.length - 1 || lastPrefix == false) {
            for (int k=0; k < inputTerms.length; k++) {
              if (inputTerms[k].equals(queryTerms[j])) {
                match=true;
                break;
              }
            }
          }
 else {
            for (int k=0; k < inputTerms.length; k++) {
              if (inputTerms[k].startsWith(queryTerms[j])) {
                match=true;
                break;
              }
            }
          }
          if (match) {
            if (allTermsRequired == false) {
              break;
            }
            match=false;
          }
 else           if (allTermsRequired) {
            break;
          }
        }
        if (match) {
          if (doHilite) {
            expected.add(new Input(hilite(lastPrefix,inputTerms,queryTerms),input.v,input.term));
          }
 else {
            expected.add(input);
          }
        }
      }
      Collections.sort(expected,new Comparator<Input>(){
        @Override public int compare(        Input a,        Input b){
          if (a.v > b.v) {
            return -1;
          }
 else           if (a.v < b.v) {
            return 1;
          }
 else {
            return 0;
          }
        }
      }
);
      if (expected.isEmpty() == false) {
        int topN=TestUtil.nextInt(random(),1,expected.size());
        List<LookupResult> actual=suggester.lookup(TestUtil.stringToCharSequence(query,random()),topN,allTermsRequired,doHilite);
        int expectedCount=Math.min(topN,expected.size());
        if (VERBOSE) {
          System.out.println("  expected:");
          for (int i=0; i < expectedCount; i++) {
            Input x=expected.get(i);
            System.out.println("    " + x.term.utf8ToString() + "/"+ x.v);
          }
          System.out.println("  actual:");
          for (          LookupResult result : actual) {
            System.out.println("    " + result);
          }
        }
        assertEquals(expectedCount,actual.size());
        for (int i=0; i < expectedCount; i++) {
          if (doHilite) {
            assertEquals(expected.get(i).term.utf8ToString(),actual.get(i).highlightKey);
          }
 else {
            assertEquals(expected.get(i).term.utf8ToString(),actual.get(i).key);
          }
          assertEquals(expected.get(i).v,actual.get(i).value);
          assertEquals(expected.get(i).payload,actual.get(i).payload);
        }
      }
 else {
        if (VERBOSE) {
          System.out.println("  no expected matches");
        }
      }
    }
  }
  lookupThread.finish();
  suggester.close();
}
