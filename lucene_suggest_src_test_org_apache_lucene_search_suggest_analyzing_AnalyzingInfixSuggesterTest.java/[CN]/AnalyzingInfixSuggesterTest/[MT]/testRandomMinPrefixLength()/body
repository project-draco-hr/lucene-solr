{
  Input keys[]=new Input[]{new Input("lend me your ear",8,new BytesRef("foobar")),new Input("a penny saved is a penny earned",10,new BytesRef("foobaz"))};
  File tempDir=TestUtil.getTempDir("AnalyzingInfixSuggesterTest");
  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
  int minPrefixLength=random().nextInt(10);
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,newFSDirectory(tempDir),a,a,minPrefixLength);
  suggester.build(new InputArrayIterator(keys));
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 2; j++) {
      boolean doHighlight=j == 0;
      List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("ear",random()),10,true,doHighlight);
      assertEquals(2,results.size());
      if (doHighlight) {
        assertEquals("a penny saved is a penny <b>ear</b>ned",results.get(0).key);
      }
 else {
        assertEquals("a penny saved is a penny earned",results.get(0).key);
      }
      assertEquals(10,results.get(0).value);
      if (doHighlight) {
        assertEquals("lend me your <b>ear</b>",results.get(1).key);
      }
 else {
        assertEquals("lend me your ear",results.get(1).key);
      }
      assertEquals(new BytesRef("foobaz"),results.get(0).payload);
      assertEquals(8,results.get(1).value);
      assertEquals(new BytesRef("foobar"),results.get(1).payload);
      results=suggester.lookup(TestUtil.stringToCharSequence("ear ",random()),10,true,doHighlight);
      assertEquals(1,results.size());
      if (doHighlight) {
        assertEquals("lend me your <b>ear</b>",results.get(0).key);
      }
 else {
        assertEquals("lend me your ear",results.get(0).key);
      }
      assertEquals(8,results.get(0).value);
      assertEquals(new BytesRef("foobar"),results.get(0).payload);
      results=suggester.lookup(TestUtil.stringToCharSequence("pen",random()),10,true,doHighlight);
      assertEquals(1,results.size());
      if (doHighlight) {
        assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned",results.get(0).key);
      }
 else {
        assertEquals("a penny saved is a penny earned",results.get(0).key);
      }
      assertEquals(10,results.get(0).value);
      assertEquals(new BytesRef("foobaz"),results.get(0).payload);
      results=suggester.lookup(TestUtil.stringToCharSequence("p",random()),10,true,doHighlight);
      assertEquals(1,results.size());
      if (doHighlight) {
        assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned",results.get(0).key);
      }
 else {
        assertEquals("a penny saved is a penny earned",results.get(0).key);
      }
      assertEquals(10,results.get(0).value);
      assertEquals(new BytesRef("foobaz"),results.get(0).payload);
    }
    suggester.close();
    suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,newFSDirectory(tempDir),a,a,minPrefixLength);
  }
  suggester.close();
}
