{
  Analyzer a=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      MockTokenizer tokens=new MockTokenizer(reader);
      tokens.setEnableChecks(false);
      return new TokenStreamComponents(tokens,new StopKeywordFilter(TEST_VERSION_CURRENT,new ForkLastTokenFilter(tokens),StopKeywordFilter.makeStopSet(TEST_VERSION_CURRENT,"a")));
    }
  }
;
  TermFreqPayload keys[]=new TermFreqPayload[]{new TermFreqPayload("a bob for apples",10,new BytesRef("foobaz"))};
  File tempDir=_TestUtil.getTempDir("AnalyzingInfixSuggesterTest");
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,tempDir,a,a,3){
    @Override protected Query finishQuery(    BooleanQuery in,    boolean allTermsRequired){
      List<BooleanClause> clauses=in.clauses();
      if (clauses.size() >= 2 && allTermsRequired) {
        String t1=getTerm(clauses.get(clauses.size() - 2).getQuery());
        String t2=getTerm(clauses.get(clauses.size() - 1).getQuery());
        if (t1.equals(t2)) {
          BooleanQuery sub=new BooleanQuery();
          BooleanClause other=clauses.get(clauses.size() - 2);
          sub.add(new BooleanClause(clauses.get(clauses.size() - 2).getQuery(),BooleanClause.Occur.SHOULD));
          sub.add(new BooleanClause(clauses.get(clauses.size() - 1).getQuery(),BooleanClause.Occur.SHOULD));
          clauses.subList(clauses.size() - 2,clauses.size()).clear();
          clauses.add(new BooleanClause(sub,BooleanClause.Occur.MUST));
        }
      }
      return in;
    }
    private String getTerm(    Query query){
      if (query instanceof TermQuery) {
        return ((TermQuery)query).getTerm().text();
      }
 else       if (query instanceof PrefixQuery) {
        return ((PrefixQuery)query).getPrefix().text();
      }
 else {
        return null;
      }
    }
  }
;
  suggester.build(new TermFreqPayloadArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(_TestUtil.stringToCharSequence("a",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a bob for <b>a</b>pples",results.get(0).key);
  suggester.close();
}
