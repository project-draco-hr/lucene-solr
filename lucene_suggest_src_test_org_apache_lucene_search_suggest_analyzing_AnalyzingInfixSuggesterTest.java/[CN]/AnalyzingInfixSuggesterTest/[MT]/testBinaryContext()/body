{
  byte[] context1=new byte[4];
  byte[] context2=new byte[5];
  byte[] context3=new byte[1];
  context3[0]=(byte)0xff;
  Input keys[]=new Input[]{new Input("lend me your ear",8,new BytesRef("foobar"),asSet(context1,context2)),new Input("a penny saved is a penny earned",10,new BytesRef("foobaz"),asSet(context1,context3))};
  Path tempDir=createTempDir("analyzingInfixContext");
  for (int iter=0; iter < 2; iter++) {
    AnalyzingInfixSuggester suggester;
    Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
    if (iter == 0) {
      suggester=new AnalyzingInfixSuggester(newFSDirectory(tempDir),a,a,3,false);
      suggester.build(new InputArrayIterator(keys));
    }
 else {
      suggester=new AnalyzingInfixSuggester(newFSDirectory(tempDir),a,a,3,false);
    }
    List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("ear",random()),asSet(context1),10,true,true);
    assertEquals(2,results.size());
    LookupResult result=results.get(0);
    assertEquals("a penny saved is a penny earned",result.key);
    assertEquals("a penny saved is a penny <b>ear</b>ned",result.highlightKey);
    assertEquals(10,result.value);
    assertEquals(new BytesRef("foobaz"),result.payload);
    assertNotNull(result.contexts);
    assertEquals(2,result.contexts.size());
    assertTrue(result.contexts.contains(new BytesRef(context1)));
    assertTrue(result.contexts.contains(new BytesRef(context3)));
    result=results.get(1);
    assertEquals("lend me your ear",result.key);
    assertEquals("lend me your <b>ear</b>",result.highlightKey);
    assertEquals(8,result.value);
    assertEquals(new BytesRef("foobar"),result.payload);
    assertNotNull(result.contexts);
    assertEquals(2,result.contexts.size());
    assertTrue(result.contexts.contains(new BytesRef(context1)));
    assertTrue(result.contexts.contains(new BytesRef(context2)));
    suggester.close();
    a.close();
  }
}
