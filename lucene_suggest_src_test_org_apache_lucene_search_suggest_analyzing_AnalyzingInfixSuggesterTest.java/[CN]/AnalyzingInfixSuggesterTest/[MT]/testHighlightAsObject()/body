{
  Input keys[]=new Input[]{new Input("a penny saved is a penny earned",10,new BytesRef("foobaz"))};
  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(TEST_VERSION_CURRENT,newDirectory(),a,a,3){
    @Override protected Object highlight(    String text,    Set<String> matchedTokens,    String prefixToken) throws IOException {
      try (TokenStream ts=queryAnalyzer.tokenStream("text",new StringReader(text))){
        CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);
        OffsetAttribute offsetAtt=ts.addAttribute(OffsetAttribute.class);
        ts.reset();
        List<LookupHighlightFragment> fragments=new ArrayList<LookupHighlightFragment>();
        int upto=0;
        while (ts.incrementToken()) {
          String token=termAtt.toString();
          int startOffset=offsetAtt.startOffset();
          int endOffset=offsetAtt.endOffset();
          if (upto < startOffset) {
            fragments.add(new LookupHighlightFragment(text.substring(upto,startOffset),false));
            upto=startOffset;
          }
 else           if (upto > startOffset) {
            continue;
          }
          if (matchedTokens.contains(token)) {
            fragments.add(new LookupHighlightFragment(text.substring(startOffset,endOffset),true));
            upto=endOffset;
          }
 else           if (prefixToken != null && token.startsWith(prefixToken)) {
            fragments.add(new LookupHighlightFragment(text.substring(startOffset,startOffset + prefixToken.length()),true));
            if (prefixToken.length() < token.length()) {
              fragments.add(new LookupHighlightFragment(text.substring(startOffset + prefixToken.length(),startOffset + token.length()),false));
            }
            upto=endOffset;
          }
        }
        ts.end();
        int endOffset=offsetAtt.endOffset();
        if (upto < endOffset) {
          fragments.add(new LookupHighlightFragment(text.substring(upto),false));
        }
        return fragments;
      }
     }
  }
;
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("ear",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a penny saved is a penny <b>ear</b>ned",toString((List<LookupHighlightFragment>)results.get(0).highlightKey));
  assertEquals(10,results.get(0).value);
  assertEquals(new BytesRef("foobaz"),results.get(0).payload);
  suggester.close();
}
