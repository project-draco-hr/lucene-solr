{
  Input keys[]=new Input[]{new Input("lend me your ear",8,new BytesRef("foobar")),new Input("a penny saved is a penny earned",10,new BytesRef("foobaz"))};
  Analyzer a=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false);
  AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(newDirectory(),a,a,3,false);
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("ear",random()),10,true,true);
  assertEquals(2,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertEquals("a penny saved is a penny <b>ear</b>ned",results.get(0).highlightKey);
  assertEquals(10,results.get(0).value);
  assertEquals(new BytesRef("foobaz"),results.get(0).payload);
  assertEquals("lend me your ear",results.get(1).key);
  assertEquals("lend me your <b>ear</b>",results.get(1).highlightKey);
  assertEquals(8,results.get(1).value);
  assertEquals(new BytesRef("foobar"),results.get(1).payload);
  results=suggester.lookup(TestUtil.stringToCharSequence("ear ",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("lend me your ear",results.get(0).key);
  assertEquals("lend me your <b>ear</b>",results.get(0).highlightKey);
  assertEquals(8,results.get(0).value);
  assertEquals(new BytesRef("foobar"),results.get(0).payload);
  results=suggester.lookup(TestUtil.stringToCharSequence("pen",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertEquals("a <b>pen</b>ny saved is a <b>pen</b>ny earned",results.get(0).highlightKey);
  assertEquals(10,results.get(0).value);
  assertEquals(new BytesRef("foobaz"),results.get(0).payload);
  results=suggester.lookup(TestUtil.stringToCharSequence("p",random()),10,true,true);
  assertEquals(1,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertEquals("a <b>p</b>enny saved is a <b>p</b>enny earned",results.get(0).highlightKey);
  assertEquals(10,results.get(0).value);
  assertEquals(new BytesRef("foobaz"),results.get(0).payload);
  results=suggester.lookup(TestUtil.stringToCharSequence("money penny",random()),10,false,true);
  assertEquals(1,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertEquals("a <b>penny</b> saved is a <b>penny</b> earned",results.get(0).highlightKey);
  assertEquals(10,results.get(0).value);
  assertEquals(new BytesRef("foobaz"),results.get(0).payload);
  results=suggester.lookup(TestUtil.stringToCharSequence("penny ea",random()),10,false,true);
  assertEquals(2,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertEquals("a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned",results.get(0).highlightKey);
  assertEquals("lend me your ear",results.get(1).key);
  assertEquals("lend me your <b>ea</b>r",results.get(1).highlightKey);
  results=suggester.lookup(TestUtil.stringToCharSequence("money penny",random()),10,false,false);
  assertEquals(1,results.size());
  assertEquals("a penny saved is a penny earned",results.get(0).key);
  assertNull(results.get(0).highlightKey);
  testConstructorDefaults(suggester,keys,a,true,true);
  testConstructorDefaults(suggester,keys,a,true,false);
  testConstructorDefaults(suggester,keys,a,false,false);
  testConstructorDefaults(suggester,keys,a,false,true);
  suggester.close();
}
