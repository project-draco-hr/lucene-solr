{
  TreeSet<Lookup.LookupResult> results=new TreeSet<>(LOOKUP_COMP);
  int actualNum=num / numFactor;
  BytesRef scratch=new BytesRef();
  for (int i=0; i < hits.scoreDocs.length; i++) {
    ScoreDoc sd=hits.scoreDocs[i];
    textDV.get(sd.doc,scratch);
    String text=scratch.utf8ToString();
    long weight=weightsDV.get(sd.doc);
    BytesRef payload;
    if (payloadsDV != null) {
      payload=new BytesRef();
      payloadsDV.get(sd.doc,payload);
    }
 else {
      payload=null;
    }
    double coefficient;
    if (text.startsWith(key.toString())) {
      coefficient=1;
    }
 else {
      coefficient=createCoefficient(sd.doc,matchedTokens,prefixToken);
    }
    long score=(long)(weight * coefficient);
    LookupResult result;
    if (doHighlight) {
      Object highlightKey=highlight(text,matchedTokens,prefixToken);
      result=new LookupResult(highlightKey.toString(),highlightKey,score,payload);
    }
 else {
      result=new LookupResult(text,score,payload);
    }
    boundedTreeAdd(results,result,actualNum);
  }
  return new ArrayList<>(results.descendingSet());
}
