{
  File tmpRoot=_TestUtil.getTempDir("testClassLoaderLibs");
  File lib=new File(tmpRoot,"lib");
  lib.mkdirs();
  JarOutputStream jar1=new JarOutputStream(new FileOutputStream(new File(lib,"jar1.jar")));
  jar1.putNextEntry(new JarEntry("aLibFile"));
  jar1.closeEntry();
  jar1.close();
  File otherLib=new File(tmpRoot,"otherLib");
  otherLib.mkdirs();
  JarOutputStream jar2=new JarOutputStream(new FileOutputStream(new File(otherLib,"jar2.jar")));
  jar2.putNextEntry(new JarEntry("explicitFile"));
  jar2.closeEntry();
  jar2.close();
  JarOutputStream jar3=new JarOutputStream(new FileOutputStream(new File(otherLib,"jar3.jar")));
  jar3.putNextEntry(new JarEntry("otherFile"));
  jar3.closeEntry();
  jar3.close();
  SolrResourceLoader loader=new SolrResourceLoader(tmpRoot.getAbsolutePath());
  assertNotNull(loader.getClassLoader().getResource("aLibFile"));
  final File explicitFileJar=new File(otherLib,"jar2.jar").getAbsoluteFile();
  loader.addToClassLoader("otherLib",new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.equals(explicitFileJar);
    }
  }
,false);
  assertNotNull(loader.getClassLoader().getResource("explicitFile"));
  assertNull(loader.getClassLoader().getResource("otherFile"));
  loader.addToClassLoader("otherLib",null,false);
  assertNotNull(loader.getClassLoader().getResource("otherFile"));
  loader.close();
}
