{
  Directory d=newDirectory();
  IndexWriterConfig cfg=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random));
  IndexWriter w=new IndexWriter(d,cfg);
  final int numValues=50 + atLeast(10);
  final List<Type> numVariantList=new ArrayList<Type>(NUMERICS);
  Collections.shuffle(numVariantList,random);
  for (  Type val : numVariantList) {
    indexValues(w,numValues,val,numVariantList,false,7);
    IndexReader r=IndexReader.open(w,true);
    DocValues docValues=getDocValues(r,val.name());
    assertNotNull(docValues);
    Source source=docValues.getSource();
switch (source.type()) {
case FIXED_INTS_8:
{
        assertTrue(source.hasArray());
        byte[] values=(byte[])source.getArray();
        for (int i=0; i < numValues; i++) {
          assertEquals((long)values[i],source.getInt(i));
        }
      }
    break;
case FIXED_INTS_16:
{
    assertTrue(source.hasArray());
    short[] values=(short[])source.getArray();
    for (int i=0; i < numValues; i++) {
      assertEquals((long)values[i],source.getInt(i));
    }
  }
break;
case FIXED_INTS_32:
{
assertTrue(source.hasArray());
int[] values=(int[])source.getArray();
for (int i=0; i < numValues; i++) {
  assertEquals((long)values[i],source.getInt(i));
}
}
break;
case FIXED_INTS_64:
{
assertTrue(source.hasArray());
long[] values=(long[])source.getArray();
for (int i=0; i < numValues; i++) {
assertEquals(values[i],source.getInt(i));
}
}
break;
case VAR_INTS:
assertFalse(source.hasArray());
break;
case FLOAT_32:
{
assertTrue(source.hasArray());
float[] values=(float[])source.getArray();
for (int i=0; i < numValues; i++) {
assertEquals((double)values[i],source.getFloat(i),0.0d);
}
}
break;
case FLOAT_64:
{
assertTrue(source.hasArray());
double[] values=(double[])source.getArray();
for (int i=0; i < numValues; i++) {
assertEquals(values[i],source.getFloat(i),0.0d);
}
}
break;
default :
fail("unexpected value " + source.type());
}
r.close();
}
w.close();
d.close();
}
