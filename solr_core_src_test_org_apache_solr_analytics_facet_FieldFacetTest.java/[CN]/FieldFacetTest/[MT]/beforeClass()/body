{
  initCore("solrconfig-basic.xml","schema-analytics.xml");
  h.update("<delete><query>*:*</query></delete>");
  defaults.put("int",new Integer(0));
  defaults.put("long",new Long(0));
  defaults.put("float",new Float(0));
  defaults.put("double",new Double(0));
  defaults.put("date","1800-12-31T23:59:59Z");
  defaults.put("string","str0");
  intDateTestStart=new ArrayList<ArrayList<Integer>>();
  intDateTestMissing=new ArrayList<Long>();
  intStringTestStart=new ArrayList<ArrayList<Integer>>();
  intStringTestMissing=new ArrayList<Long>();
  longDateTestStart=new ArrayList<ArrayList<Long>>();
  longDateTestMissing=new ArrayList<Long>();
  longStringTestStart=new ArrayList<ArrayList<Long>>();
  longStringTestMissing=new ArrayList<Long>();
  floatDateTestStart=new ArrayList<ArrayList<Float>>();
  floatDateTestMissing=new ArrayList<Long>();
  floatStringTestStart=new ArrayList<ArrayList<Float>>();
  floatStringTestMissing=new ArrayList<Long>();
  doubleDateTestStart=new ArrayList<ArrayList<Double>>();
  doubleDateTestMissing=new ArrayList<Long>();
  doubleStringTestStart=new ArrayList<ArrayList<Double>>();
  doubleStringTestMissing=new ArrayList<Long>();
  dateIntTestStart=new ArrayList<ArrayList<String>>();
  dateIntTestMissing=new ArrayList<Long>();
  dateLongTestStart=new ArrayList<ArrayList<String>>();
  dateLongTestMissing=new ArrayList<Long>();
  stringIntTestStart=new ArrayList<ArrayList<String>>();
  stringIntTestMissing=new ArrayList<Long>();
  stringLongTestStart=new ArrayList<ArrayList<String>>();
  stringLongTestMissing=new ArrayList<Long>();
  multiLongTestStart=new ArrayList<ArrayList<Integer>>();
  multiLongTestMissing=new ArrayList<Long>();
  multiStringTestStart=new ArrayList<ArrayList<Integer>>();
  multiStringTestMissing=new ArrayList<Long>();
  multiDateTestStart=new ArrayList<ArrayList<Integer>>();
  multiDateTestMissing=new ArrayList<Long>();
  for (int j=0; j < NUM_LOOPS; ++j) {
    int i=j % INT;
    long l=j % LONG;
    long lm=j % LONGM;
    float f=j % FLOAT;
    double d=j % DOUBLE;
    int dt=j % DATE;
    int dtm=j % DATEM;
    int s=j % STRING;
    int sm=j % STRINGM;
    if (dt == 0 && dtm == 0) {
      assertU(adoc(filter("id","1000" + j,"int_id","" + i,"long_ld","" + l,"float_fd","" + f,"double_dd","" + d,"date_dtd",(1800 + dt) + "-12-31T23:59:59Z","string_sd","str" + s,"long_ldm","" + l,"long_ldm","" + lm,"string_sdm","str" + s,"string_sdm","str" + sm)));
    }
 else     if (dt == 0) {
      assertU(adoc(filter("id","1000" + j,"int_id","" + i,"long_ld","" + l,"float_fd","" + f,"double_dd","" + d,"date_dtd",(1800 + dt) + "-12-31T23:59:59Z","string_sd","str" + s,"long_ldm","" + l,"long_ldm","" + lm,"string_sdm","str" + s,"string_sdm","str" + sm,"date_dtdm",(1800 + dtm) + "-12-31T23:59:59Z")));
    }
 else     if (dtm == 0) {
      assertU(adoc(filter("id","1000" + j,"int_id","" + i,"long_ld","" + l,"float_fd","" + f,"double_dd","" + d,"date_dtd",(1800 + dt) + "-12-31T23:59:59Z","string_sd","str" + s,"long_ldm","" + l,"long_ldm","" + lm,"string_sdm","str" + s,"string_sdm","str" + sm,"date_dtdm",(1800 + dt) + "-12-31T23:59:59Z")));
    }
 else {
      assertU(adoc(filter("id","1000" + j,"int_id","" + i,"long_ld","" + l,"float_fd","" + f,"double_dd","" + d,"date_dtd",(1800 + dt) + "-12-31T23:59:59Z","string_sd","str" + s,"long_ldm","" + l,"long_ldm","" + lm,"string_sdm","str" + s,"string_sdm","str" + sm,"date_dtdm",(1800 + dt) + "-12-31T23:59:59Z","date_dtdm",(1800 + dtm) + "-12-31T23:59:59Z")));
    }
    if (dt != 0) {
      if (j - DATE < 0) {
        ArrayList<Integer> list1=new ArrayList<Integer>();
        if (i != 0) {
          list1.add(i);
          intDateTestMissing.add(0l);
        }
 else {
          intDateTestMissing.add(1l);
        }
        intDateTestStart.add(list1);
        ArrayList<Long> list2=new ArrayList<Long>();
        if (l != 0l) {
          list2.add(l);
          longDateTestMissing.add(0l);
        }
 else {
          longDateTestMissing.add(1l);
        }
        longDateTestStart.add(list2);
        ArrayList<Float> list3=new ArrayList<Float>();
        if (f != 0.0f) {
          list3.add(f);
          floatDateTestMissing.add(0l);
        }
 else {
          floatDateTestMissing.add(1l);
        }
        floatDateTestStart.add(list3);
        ArrayList<Double> list4=new ArrayList<Double>();
        if (d != 0.0d) {
          list4.add(d);
          doubleDateTestMissing.add(0l);
        }
 else {
          doubleDateTestMissing.add(1l);
        }
        doubleDateTestStart.add(list4);
        ArrayList<Integer> list5=new ArrayList<Integer>();
        if (i != 0) {
          list5.add(i);
          multiDateTestMissing.add(0l);
        }
 else {
          multiDateTestMissing.add(1l);
        }
        multiDateTestStart.add(list5);
      }
 else {
        if (i != 0)         intDateTestStart.get(dt - 1).add(i);
 else         increment(intDateTestMissing,dt - 1);
        if (l != 0l)         longDateTestStart.get(dt - 1).add(l);
 else         increment(longDateTestMissing,dt - 1);
        if (f != 0.0f)         floatDateTestStart.get(dt - 1).add(f);
 else         increment(floatDateTestMissing,dt - 1);
        if (d != 0.0d)         doubleDateTestStart.get(dt - 1).add(d);
 else         increment(doubleDateTestMissing,dt - 1);
        if (i != 0)         multiDateTestStart.get(dt - 1).add(i);
 else         increment(multiDateTestMissing,dt - 1);
      }
    }
    if (j - DATEM < 0 && dtm != dt && dtm != 0) {
      ArrayList<Integer> list1=new ArrayList<Integer>();
      if (i != 0) {
        list1.add(i);
        multiDateTestMissing.add(0l);
      }
 else {
        multiDateTestMissing.add(1l);
      }
      multiDateTestStart.add(list1);
    }
 else     if (dtm != dt && dtm != 0) {
      if (i != 0)       multiDateTestStart.get(dtm - 1).add(i);
    }
    if (s != 0) {
      if (j - STRING < 0) {
        ArrayList<Integer> list1=new ArrayList<Integer>();
        if (i != 0) {
          list1.add(i);
          intStringTestMissing.add(0l);
        }
 else {
          intStringTestMissing.add(1l);
        }
        intStringTestStart.add(list1);
        ArrayList<Long> list2=new ArrayList<Long>();
        if (l != 0l) {
          list2.add(l);
          longStringTestMissing.add(0l);
        }
 else {
          longStringTestMissing.add(1l);
        }
        longStringTestStart.add(list2);
        ArrayList<Float> list3=new ArrayList<Float>();
        if (f != 0.0f) {
          list3.add(f);
          floatStringTestMissing.add(0l);
        }
 else {
          floatStringTestMissing.add(1l);
        }
        floatStringTestStart.add(list3);
        ArrayList<Double> list4=new ArrayList<Double>();
        if (d != 0.0d) {
          list4.add(d);
          doubleStringTestMissing.add(0l);
        }
 else {
          doubleStringTestMissing.add(1l);
        }
        doubleStringTestStart.add(list4);
        ArrayList<Integer> list5=new ArrayList<Integer>();
        if (i != 0) {
          list5.add(i);
          multiStringTestMissing.add(0l);
        }
 else {
          multiStringTestMissing.add(1l);
        }
        multiStringTestStart.add(list5);
      }
 else {
        if (i != 0)         intStringTestStart.get(s - 1).add(i);
 else         increment(intStringTestMissing,s - 1);
        if (l != 0l)         longStringTestStart.get(s - 1).add(l);
 else         increment(longStringTestMissing,s - 1);
        if (f != 0.0f)         floatStringTestStart.get(s - 1).add(f);
 else         increment(floatStringTestMissing,s - 1);
        if (d != 0.0d)         doubleStringTestStart.get(s - 1).add(d);
 else         increment(doubleStringTestMissing,s - 1);
        if (i != 0)         multiStringTestStart.get(s - 1).add(i);
 else         increment(multiStringTestMissing,s - 1);
      }
    }
    if (sm != 0) {
      if (j - STRINGM < 0 && sm != s) {
        ArrayList<Integer> list1=new ArrayList<Integer>();
        if (i != 0) {
          list1.add(i);
          multiStringTestMissing.add(0l);
        }
 else {
          multiStringTestMissing.add(1l);
        }
        multiStringTestStart.add(list1);
      }
 else       if (sm != s) {
        if (i != 0)         multiStringTestStart.get(sm - 1).add(i);
 else         increment(multiStringTestMissing,sm - 1);
      }
    }
    if (i != 0) {
      if (j - INT < 0) {
        ArrayList<String> list1=new ArrayList<String>();
        if (dt != 0) {
          list1.add((1800 + dt) + "-12-31T23:59:59Z");
          dateIntTestMissing.add(0l);
        }
 else {
          dateIntTestMissing.add(1l);
        }
        dateIntTestStart.add(list1);
        ArrayList<String> list2=new ArrayList<String>();
        if (s != 0) {
          list2.add("str" + s);
          stringIntTestMissing.add(0l);
        }
 else {
          stringIntTestMissing.add(1l);
        }
        stringIntTestStart.add(list2);
      }
 else {
        if (dt != 0)         dateIntTestStart.get(i - 1).add((1800 + dt) + "-12-31T23:59:59Z");
 else         increment(dateIntTestMissing,i - 1);
        if (s != 0)         stringIntTestStart.get(i - 1).add("str" + s);
 else         increment(stringIntTestMissing,i - 1);
      }
    }
    if (l != 0) {
      if (j - LONG < 0) {
        ArrayList<String> list1=new ArrayList<String>();
        if (dt != 0) {
          list1.add((1800 + dt) + "-12-31T23:59:59Z");
          dateLongTestMissing.add(0l);
        }
 else {
          dateLongTestMissing.add(1l);
        }
        dateLongTestStart.add(list1);
        ArrayList<String> list2=new ArrayList<String>();
        if (s != 0) {
          list2.add("str" + s);
          stringLongTestMissing.add(0l);
        }
 else {
          stringLongTestMissing.add(1l);
        }
        stringLongTestStart.add(list2);
        ArrayList<Integer> list3=new ArrayList<Integer>();
        if (i != 0) {
          list3.add(i);
          multiLongTestMissing.add(0l);
        }
 else {
          multiLongTestMissing.add(1l);
        }
        multiLongTestStart.add(list3);
      }
 else {
        if (dt != 0)         dateLongTestStart.get((int)l - 1).add((1800 + dt) + "-12-31T23:59:59Z");
 else         increment(dateLongTestMissing,(int)l - 1);
        if (s != 0)         stringLongTestStart.get((int)l - 1).add("str" + s);
 else         increment(stringLongTestMissing,(int)l - 1);
        if (i != 0)         multiLongTestStart.get((int)l - 1).add(i);
 else         increment(multiLongTestMissing,(int)l - 1);
      }
    }
    if (lm != 0) {
      if (j - LONGM < 0 && lm != l) {
        ArrayList<Integer> list1=new ArrayList<Integer>();
        if (i != 0) {
          list1.add(i);
          multiLongTestMissing.add(0l);
        }
 else {
          multiLongTestMissing.add(1l);
        }
        multiLongTestStart.add(list1);
      }
 else       if (lm != l) {
        if (i != 0)         multiLongTestStart.get((int)lm - 1).add(i);
 else         increment(multiLongTestMissing,(int)lm - 1);
      }
    }
    if (usually()) {
      assertU(commit());
    }
  }
  assertU(commit());
  setResponse(h.query(request(fileToStringArr(FieldFacetTest.class,fileName))));
}
