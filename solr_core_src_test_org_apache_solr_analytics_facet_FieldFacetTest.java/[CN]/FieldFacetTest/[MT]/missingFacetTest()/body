{
  String xPath="/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']";
  assertNotNull(getRawResponse(),getNode(xPath));
  ArrayList<Double> string=getDoubleList("missingf","fieldFacets","date_dtdm","double","mean");
  string.remove(0);
  ArrayList<Double> stringTest=calculateNumberStat(multiDateTestStart,"mean");
  assertEquals(getRawResponse(),string,stringTest);
  xPath="/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']";
  assertNotNull(getRawResponse(),getNode(xPath));
  xPath="/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']";
  assertNull(getRawResponse(),getNode(xPath));
  List<Double> intString=getDoubleList("missingf","fieldFacets","string_sd","double","mean");
  intString.remove(0);
  ArrayList<Double> intStringTest=calculateNumberStat(intStringTestStart,"mean");
  assertEquals(getRawResponse(),intString,intStringTest);
  Collection<Double> intDate=getDoubleList("missingf","fieldFacets","date_dtd","double","mean");
  ArrayList<ArrayList<Double>> intDateMissingTestStart=(ArrayList<ArrayList<Double>>)intDateTestStart.clone();
  ArrayList<Double> intDateTest=calculateNumberStat(intDateMissingTestStart,"mean");
  assertEquals(getRawResponse(),intDate,intDateTest);
}
