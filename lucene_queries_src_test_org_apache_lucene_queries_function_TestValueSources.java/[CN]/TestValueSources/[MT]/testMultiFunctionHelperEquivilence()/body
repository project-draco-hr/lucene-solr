{
  final LeafReaderContext leaf=searcher.getIndexReader().leaves().get(0);
  final Map context=ValueSource.newContext(searcher);
  ALL_EXIST_VS.createWeight(context,searcher);
  NONE_EXIST_VS.createWeight(context,searcher);
  final FunctionValues ALL=ALL_EXIST_VS.getValues(context,leaf);
  final FunctionValues NONE=NONE_EXIST_VS.getValues(context,leaf);
  assertTrue(MultiFunction.allExists(1,ALL,ALL));
  assertTrue(MultiFunction.allExists(1,new FunctionValues[]{ALL,ALL}));
  assertTrue(MultiFunction.anyExists(1,ALL,NONE));
  assertTrue(MultiFunction.anyExists(1,new FunctionValues[]{ALL,NONE}));
  assertFalse(MultiFunction.allExists(1,ALL,NONE));
  assertFalse(MultiFunction.allExists(1,new FunctionValues[]{ALL,NONE}));
  assertFalse(MultiFunction.anyExists(1,NONE,NONE));
  assertFalse(MultiFunction.anyExists(1,new FunctionValues[]{NONE,NONE}));
  for (  FunctionValues firstArg : new FunctionValues[]{ALL,NONE}) {
    for (    FunctionValues secondArg : new FunctionValues[]{ALL,NONE}) {
      assertEquals("allExists(" + firstArg + ","+ secondArg+ ")",MultiFunction.allExists(1,firstArg,secondArg),MultiFunction.allExists(1,new FunctionValues[]{firstArg,secondArg}));
      assertEquals("anyExists(" + firstArg + ","+ secondArg+ ")",MultiFunction.anyExists(1,firstArg,secondArg),MultiFunction.anyExists(1,new FunctionValues[]{firstArg,secondArg}));
      assertEquals("allExists(" + firstArg + ","+ secondArg+ ","+ secondArg+ ")",MultiFunction.allExists(1,firstArg,secondArg),MultiFunction.allExists(1,new FunctionValues[]{firstArg,secondArg,secondArg}));
      assertEquals("anyExists(" + firstArg + ","+ secondArg+ ","+ secondArg+ ")",MultiFunction.anyExists(1,firstArg,secondArg),MultiFunction.anyExists(1,new FunctionValues[]{firstArg,secondArg,secondArg}));
    }
  }
}
