{
  Similarity saved=searcher.getSimilarity(true);
  try {
    searcher.setSimilarity(new ClassicSimilarity());
    ValueSource vs=new QueryValueSource(new TermQuery(new Term("string","bar")),42F);
    assertHits(new FunctionQuery(vs),new float[]{42F,1.4054651F});
    ValueSource expected=new MultiFloatFunction(new ValueSource[]{new TFValueSource("bogus","bogus","string",new BytesRef("bar"))}){
      @Override protected String name(){
        return "tf_based_exists";
      }
      @Override protected float func(      int doc,      FunctionValues[] valsArr){
        return valsArr[0].floatVal(doc);
      }
      @Override protected boolean exists(      int doc,      FunctionValues[] valsArr){
        return 0 < func(doc,valsArr);
      }
    }
;
    assertExists(expected,vs);
    vs=new QueryValueSource(new TermQuery(new Term("text","test")),0F);
    assertAllExist(vs);
    vs=new QueryValueSource(new TermQuery(new Term("bogus","does not exist")),0F);
    assertNoneExist(vs);
  }
  finally {
    searcher.setSimilarity(saved);
  }
}
