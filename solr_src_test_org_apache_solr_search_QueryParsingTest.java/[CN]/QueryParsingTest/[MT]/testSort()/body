{
  Sort sort;
  SolrQueryRequest req=req();
  IndexSchema schema=h.getCore().getSchema();
  sort=QueryParsing.parseSort("score desc",req);
  assertNull("sort",sort);
  sort=QueryParsing.parseSort("score asc",req);
  SortField[] flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.SCORE);
  assertTrue(flds[0].getReverse());
  sort=QueryParsing.parseSort("weight desc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  assertEquals(flds[0].getReverse(),true);
  sort=QueryParsing.parseSort("weight desc,bday asc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  assertEquals(flds[0].getReverse(),true);
  assertEquals(flds[1].getType(),SortField.LONG);
  assertEquals(flds[1].getField(),"bday");
  assertEquals(flds[1].getReverse(),false);
  sort=QueryParsing.parseSort("weight top,bday asc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  assertEquals(flds[0].getReverse(),true);
  assertEquals(flds[1].getType(),SortField.LONG);
  assertEquals(flds[1].getField(),"bday");
  assertEquals(flds[1].getReverse(),false);
  sort=QueryParsing.parseSort("weight top,bday bottom",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  assertEquals(flds[0].getReverse(),true);
  assertEquals(flds[1].getType(),SortField.LONG);
  assertEquals(flds[1].getField(),"bday");
  assertEquals(flds[1].getReverse(),false);
  sort=QueryParsing.parseSort("weight         desc,            bday         asc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  assertEquals(flds[1].getField(),"bday");
  assertEquals(flds[1].getType(),SortField.LONG);
  sort=QueryParsing.parseSort("weight desc,",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  sort=QueryParsing.parseSort("pow(weight, 2) desc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.CUSTOM);
  assertEquals(flds[0].getField(),"pow(float(weight),const(2.0))");
  sort=QueryParsing.parseSort("sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.CUSTOM);
  assertEquals(flds[0].getField(),"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))");
  sort=QueryParsing.parseSort("pow(weight,                 2)         desc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.CUSTOM);
  assertEquals(flds[0].getField(),"pow(float(weight),const(2.0))");
  sort=QueryParsing.parseSort("pow(weight, 2) desc, weight    desc,   bday    asc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.CUSTOM);
  assertEquals(flds[0].getField(),"pow(float(weight),const(2.0))");
  assertEquals(flds[1].getType(),SortField.FLOAT);
  assertEquals(flds[1].getField(),"weight");
  assertEquals(flds[2].getField(),"bday");
  assertEquals(flds[2].getType(),SortField.LONG);
  sort=QueryParsing.parseSort("weight desc,",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.FLOAT);
  assertEquals(flds[0].getField(),"weight");
  sort=QueryParsing.parseSort("strdist(foo_s1, \"junk\", jw) desc",req);
  flds=sort.getSort();
  assertEquals(flds[0].getType(),SortField.CUSTOM);
  assertEquals(flds[0].getField(),"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)");
  sort=QueryParsing.parseSort("",req);
  assertNull(sort);
  req.close();
}
