{
  assertOpenRangeQuery(NumberType.ZERO,"<",1);
  assertOpenRangeQuery(NumberType.POSITIVE,"<",2);
  assertOpenRangeQuery(NumberType.NEGATIVE,"<",0);
  assertOpenRangeQuery(NumberType.ZERO,"<=",2);
  assertOpenRangeQuery(NumberType.POSITIVE,"<=",3);
  assertOpenRangeQuery(NumberType.NEGATIVE,"<=",1);
  assertOpenRangeQuery(NumberType.ZERO,">",1);
  assertOpenRangeQuery(NumberType.POSITIVE,">",0);
  assertOpenRangeQuery(NumberType.NEGATIVE,">",2);
  assertOpenRangeQuery(NumberType.ZERO,">=",2);
  assertOpenRangeQuery(NumberType.POSITIVE,">=",1);
  assertOpenRangeQuery(NumberType.NEGATIVE,">=",3);
  assertOpenRangeQuery(NumberType.NEGATIVE,"=",1);
  assertOpenRangeQuery(NumberType.ZERO,"=",1);
  assertOpenRangeQuery(NumberType.POSITIVE,"=",1);
  assertRangeQuery(NumberType.NEGATIVE,null,true,true,3);
  assertRangeQuery(NumberType.NEGATIVE,null,false,true,2);
  assertRangeQuery(NumberType.POSITIVE,null,true,false,1);
  assertRangeQuery(NumberType.ZERO,null,false,false,1);
  assertRangeQuery(null,NumberType.POSITIVE,true,true,3);
  assertRangeQuery(null,NumberType.POSITIVE,true,false,2);
  assertRangeQuery(null,NumberType.NEGATIVE,false,true,1);
  assertRangeQuery(null,NumberType.ZERO,false,false,1);
  assertRangeQuery(null,null,false,false,3);
  assertRangeQuery(null,null,true,true,3);
}
