{
  List<ValueSource> sources=fp.parseValueSourceList();
  MultiValueSource mv1=null;
  MultiValueSource mv2=null;
  if (sources.size() == 0) {
  }
 else   if (sources.size() == 1) {
    ValueSource vs=sources.get(0);
    if (!(vs instanceof MultiValueSource)) {
      throw new SyntaxError("geodist - invalid parameters:" + sources);
    }
    mv1=(MultiValueSource)vs;
  }
 else   if (sources.size() == 2) {
    ValueSource vs1=sources.get(0);
    ValueSource vs2=sources.get(1);
    if (vs1 instanceof MultiValueSource && vs2 instanceof MultiValueSource) {
      mv1=(MultiValueSource)vs1;
      mv2=(MultiValueSource)vs2;
    }
 else {
      mv1=makeMV(sources,sources);
    }
  }
 else   if (sources.size() == 3) {
    ValueSource vs1=sources.get(0);
    ValueSource vs2=sources.get(1);
    if (vs1 instanceof MultiValueSource) {
      mv1=(MultiValueSource)vs1;
      mv2=makeMV(sources.subList(1,3),sources);
    }
 else {
      mv1=makeMV(sources.subList(0,2),sources);
      vs1=sources.get(2);
      if (!(vs1 instanceof MultiValueSource)) {
        throw new SyntaxError("geodist - invalid parameters:" + sources);
      }
      mv2=(MultiValueSource)vs1;
    }
  }
 else   if (sources.size() == 4) {
    mv1=makeMV(sources.subList(0,2),sources);
    mv2=makeMV(sources.subList(2,4),sources);
  }
 else   if (sources.size() > 4) {
    throw new SyntaxError("geodist - invalid parameters:" + sources);
  }
  if (mv1 == null) {
    mv1=parsePoint(fp);
    mv2=parseSfield(fp);
  }
 else   if (mv2 == null) {
    mv2=parsePoint(fp);
    if (mv2 == null)     mv2=parseSfield(fp);
  }
  if (mv1 == null || mv2 == null) {
    throw new SyntaxError("geodist - not enough parameters:" + sources);
  }
  double[] constants;
  constants=getConstants(mv1);
  MultiValueSource other=mv2;
  if (constants == null) {
    constants=getConstants(mv2);
    other=mv1;
  }
  if (mv2 instanceof SpatialStrategyMultiValueSource) {
    if (constants == null)     throw new SyntaxError("When using AbstractSpatialFieldType (e.g. RPT not LatLonType)," + " the point must be supplied as constants");
    SpatialStrategy strategy=((SpatialStrategyMultiValueSource)mv2).strategy;
    Point queryPoint=strategy.getSpatialContext().makePoint(constants[1],constants[0]);
    double multiplier=DistanceUtils.degrees2Dist(1,DistanceUtils.EARTH_MEAN_RADIUS_KM);
    return strategy.makeDistanceValueSource(queryPoint,multiplier);
  }
  if (constants != null && other instanceof VectorValueSource) {
    return new HaversineConstFunction(constants[0],constants[1],(VectorValueSource)other);
  }
  return new HaversineFunction(mv1,mv2,DistanceUtils.EARTH_MEAN_RADIUS_KM,true);
}
