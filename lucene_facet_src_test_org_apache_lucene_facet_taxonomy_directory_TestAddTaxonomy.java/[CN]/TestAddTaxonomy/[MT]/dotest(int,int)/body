{
  final AtomicInteger numCats=new AtomicInteger(ncats);
  Directory dirs[]=new Directory[2];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=newDirectory();
    final DirectoryTaxonomyWriter tw=new DirectoryTaxonomyWriter(dirs[i]);
    Thread[] addThreads=new Thread[4];
    for (int j=0; j < addThreads.length; j++) {
      addThreads[j]=new Thread(){
        @Override public void run(){
          Random random=random();
          while (numCats.decrementAndGet() > 0) {
            String cat=Integer.toString(random.nextInt(range));
            try {
              tw.addCategory(new FacetLabel("a",cat));
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
          }
        }
      }
;
    }
    for (    Thread t : addThreads)     t.start();
    for (    Thread t : addThreads)     t.join();
    tw.close();
  }
  DirectoryTaxonomyWriter tw=new DirectoryTaxonomyWriter(dirs[0]);
  OrdinalMap map=randomOrdinalMap();
  tw.addTaxonomy(dirs[1],map);
  tw.close();
  validate(dirs[0],dirs[1],map);
  IOUtils.close(dirs);
}
