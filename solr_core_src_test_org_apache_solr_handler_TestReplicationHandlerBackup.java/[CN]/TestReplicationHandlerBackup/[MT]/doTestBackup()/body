{
  int nDocs=indexDocs(masterClient);
  Path[] snapDir=new Path[5];
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(master.getDataDir()),"snapshot*")){
    snapDir[0]=stream.iterator().next();
  }
   boolean namedBackup=random().nextBoolean();
  String firstBackupTimestamp=null;
  String[] backupNames=null;
  if (namedBackup) {
    backupNames=new String[4];
  }
  for (int i=0; i < 4; i++) {
    final String backupName=TestUtil.randomSimpleString(random(),1,20);
    if (!namedBackup) {
      if (addNumberToKeepInRequest) {
        runBackupCommand(masterJetty,ReplicationHandler.CMD_BACKUP,"&" + backupKeepParamName + "=2");
      }
 else {
        runBackupCommand(masterJetty,ReplicationHandler.CMD_BACKUP,"");
      }
    }
 else {
      runBackupCommand(masterJetty,ReplicationHandler.CMD_BACKUP,"&name=" + backupName);
      backupNames[i]=backupName;
    }
    CheckBackupStatus checkBackupStatus=new CheckBackupStatus((HttpSolrClient)masterClient,firstBackupTimestamp);
    while (!checkBackupStatus.success) {
      checkBackupStatus.fetchStatus();
      Thread.sleep(1000);
    }
    if (i == 0) {
      firstBackupTimestamp=checkBackupStatus.backupTimestamp;
    }
    if (!namedBackup) {
      try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(master.getDataDir()),"snapshot*")){
        snapDir[i + 1]=stream.iterator().next();
      }
     }
 else {
      try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(master.getDataDir()),"snapshot." + backupName)){
        snapDir[i + 1]=stream.iterator().next();
      }
     }
    verify(snapDir[i + 1],nDocs);
  }
  if (namedBackup) {
    testDeleteNamedBackup(backupNames);
  }
 else {
    int count=0;
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(master.getDataDir()),"snapshot*")){
      Iterator<Path> iter=stream.iterator();
      while (iter.hasNext()) {
        iter.next();
        count++;
      }
    }
     if (backupKeepParamName.equals(ReplicationHandler.NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM)) {
      assertEquals(2,count);
      if (Files.exists(snapDir[0]) || Files.exists(snapDir[1]) || Files.exists(snapDir[2])) {
        fail("Backup should have been cleaned up because " + backupKeepParamName + " was set to 2.");
      }
    }
 else {
      assertEquals(1,count);
      if (Files.exists(snapDir[0]) || Files.exists(snapDir[1]) || Files.exists(snapDir[2])|| Files.exists(snapDir[3])) {
        fail("Backup should have been cleaned up because " + backupKeepParamName + " was set to 1.");
      }
    }
  }
}
