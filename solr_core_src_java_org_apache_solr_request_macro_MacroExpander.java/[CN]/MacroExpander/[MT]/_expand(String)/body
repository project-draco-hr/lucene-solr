{
  int idx=val.indexOf(macroStart.charAt(0));
  if (idx < 0)   return val;
  int start=0;
  int end=0;
  StringBuilder sb=null;
  for (; ; ) {
    idx=val.indexOf(macroStart,idx);
    int matchedStart=idx;
    if (idx > 0) {
      char ch=val.charAt(idx - 1);
      if (ch == escape) {
        idx+=macroStart.length();
        continue;
      }
    }
 else     if (idx < 0) {
      if (sb == null)       return val;
      sb.append(val.substring(start));
      return sb.toString();
    }
    idx+=macroStart.length();
    int rbrace=val.indexOf('}',idx);
    if (rbrace == -1) {
      continue;
    }
    if (sb == null) {
      sb=new StringBuilder(val.length() * 2);
    }
    if (matchedStart > 0) {
      sb.append(val.substring(start,matchedStart));
    }
    start=rbrace + 1;
    QueryParsing.StrParser parser=new QueryParsing.StrParser(val,idx,rbrace);
    try {
      String paramName=parser.getId();
      String defVal=null;
      boolean hasDefault=parser.opt(':');
      if (hasDefault) {
        defVal=val.substring(parser.pos,rbrace);
      }
      String[] replacementList=orig.get(paramName);
      String replacement=replacementList != null ? replacementList[0] : defVal;
      if (replacement != null) {
        String expandedReplacement=expand(replacement);
        sb.append(expandedReplacement);
      }
    }
 catch (    SyntaxError syntaxError) {
      sb.append(val.substring(matchedStart,start));
      continue;
    }
  }
}
