{
  assertLongRangeSplit(-5000L,9500L,4,true,Arrays.asList(0x7fffffffffffec78L,0x7fffffffffffec7fL,0x8000000000002510L,0x800000000000251cL,0x7fffffffffffec8L,0x7fffffffffffecfL,0x800000000000250L,0x800000000000250L,0x7fffffffffffedL,0x7fffffffffffefL,0x80000000000020L,0x80000000000024L,0x7ffffffffffffL,0x8000000000001L),Arrays.asList(0,0,4,4,8,8,12));
  assertLongRangeSplit(-5000L,9500L,64,true,Arrays.asList(0x7fffffffffffec78L,0x800000000000251cL),Arrays.asList(0));
  assertLongRangeSplit(0L,1024L + 63L,4,true,Arrays.asList(0x800000000000040L,0x800000000000043L,0x80000000000000L,0x80000000000003L),Arrays.asList(4,8));
  assertLongRangeSplit(Long.MIN_VALUE,Long.MAX_VALUE,8,false,Arrays.asList(0x00L,0xffL),Arrays.asList(56));
  assertLongRangeSplit(Long.MIN_VALUE,Long.MAX_VALUE,4,false,Arrays.asList(0x0L,0xfL),Arrays.asList(60));
  assertLongRangeSplit(Long.MIN_VALUE,Long.MAX_VALUE,2,false,Arrays.asList(0x0L,0x3L),Arrays.asList(62));
  assertLongRangeSplit(Long.MIN_VALUE,Long.MAX_VALUE,1,false,Arrays.asList(0x0L,0x1L),Arrays.asList(63));
  assertLongRangeSplit(9500L,-5000L,4,false,Collections.<Long>emptyList(),Collections.<Integer>emptyList());
  assertLongRangeSplit(9500L,9500L,4,false,Arrays.asList(0x800000000000251cL,0x800000000000251cL),Arrays.asList(0));
}
