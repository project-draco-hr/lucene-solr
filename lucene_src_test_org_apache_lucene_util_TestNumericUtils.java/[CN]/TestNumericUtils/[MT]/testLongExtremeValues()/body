{
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,1,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,2,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,4,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,6,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,8,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,64,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffffL),Long.valueOf(0xffffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE - 0xfL,Long.MAX_VALUE,4,true,Arrays.asList(new Long[]{Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(4)}).iterator());
  assertLongRangeSplit(Long.MAX_VALUE - 0x10L,Long.MAX_VALUE,4,true,Arrays.asList(new Long[]{Long.valueOf(0xffffffffffffffefL),Long.valueOf(0xffffffffffffffefL),Long.valueOf(0xfffffffffffffffL),Long.valueOf(0xfffffffffffffffL)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0),Integer.valueOf(4)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,1,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,2,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,4,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,6,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,8,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,64,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000000L),Long.valueOf(0x0000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE + 0xfL,4,true,Arrays.asList(new Long[]{Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(4)}).iterator());
  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE + 0x10L,4,true,Arrays.asList(new Long[]{Long.valueOf(0x0000000000000010L),Long.valueOf(0x0000000000000010L),Long.valueOf(0x000000000000000L),Long.valueOf(0x000000000000000L)}).iterator(),Arrays.asList(new Integer[]{Integer.valueOf(0),Integer.valueOf(4)}).iterator());
}
