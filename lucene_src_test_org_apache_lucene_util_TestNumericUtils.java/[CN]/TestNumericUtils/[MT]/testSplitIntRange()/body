{
  assertIntRangeSplit(-5000,9500,4,true,Arrays.asList(0x7fffec78,0x7fffec7f,0x80002510,0x8000251c,0x7fffec8,0x7fffecf,0x8000250,0x8000250,0x7fffed,0x7fffef,0x800020,0x800024,0x7ffff,0x80001),Arrays.asList(0,0,4,4,8,8,12));
  assertIntRangeSplit(-5000,9500,32,true,Arrays.asList(0x7fffec78,0x8000251c),Arrays.asList(0));
  assertIntRangeSplit(0,1024 + 63,4,true,Arrays.asList(0x8000040,0x8000043,0x800000,0x800003),Arrays.asList(4,8));
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,8,false,Arrays.asList(0x00,0xff),Arrays.asList(24));
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,4,false,Arrays.asList(0x0,0xf),Arrays.asList(28));
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,2,false,Arrays.asList(0x0,0x3),Arrays.asList(30));
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,1,false,Arrays.asList(0x0,0x1),Arrays.asList(31));
  assertIntRangeSplit(9500,-5000,4,false,Collections.<Integer>emptyList(),Collections.<Integer>emptyList());
  assertIntRangeSplit(9500,9500,4,false,Arrays.asList(0x8000251c,0x8000251c),Arrays.asList(0));
}
