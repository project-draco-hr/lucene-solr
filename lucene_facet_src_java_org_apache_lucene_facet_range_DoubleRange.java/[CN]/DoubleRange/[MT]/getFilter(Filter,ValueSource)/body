{
  return new Filter(){
    @Override public String toString(){
      return "Filter(" + DoubleRange.this.toString() + ")";
    }
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext context,    final Bits acceptDocs) throws IOException {
      final FunctionValues values=valueSource.getValues(Collections.emptyMap(),context);
      final int maxDoc=context.reader().maxDoc();
      final Bits fastMatchBits;
      if (fastMatchFilter != null) {
        DocIdSet dis=fastMatchFilter.getDocIdSet(context,null);
        if (dis == null) {
          return null;
        }
        fastMatchBits=dis.bits();
        if (fastMatchBits == null) {
          throw new IllegalArgumentException("fastMatchFilter does not implement DocIdSet.bits");
        }
      }
 else {
        fastMatchBits=null;
      }
      return new DocIdSet(){
        @Override public Bits bits(){
          return new Bits(){
            @Override public boolean get(            int docID){
              if (acceptDocs != null && acceptDocs.get(docID) == false) {
                return false;
              }
              if (fastMatchBits != null && fastMatchBits.get(docID) == false) {
                return false;
              }
              return accept(values.doubleVal(docID));
            }
            @Override public int length(){
              return maxDoc;
            }
          }
;
        }
        @Override public DocIdSetIterator iterator(){
          throw new UnsupportedOperationException("this filter can only be accessed via bits()");
        }
      }
;
    }
  }
;
}
