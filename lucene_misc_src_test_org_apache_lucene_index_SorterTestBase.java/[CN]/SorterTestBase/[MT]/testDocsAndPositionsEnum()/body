{
  TermsEnum termsEnum=sortedReader.terms(DOC_POSITIONS_FIELD).iterator();
  assertEquals(SeekStatus.FOUND,termsEnum.seekCeil(new BytesRef(DOC_POSITIONS_TERM)));
  PostingsEnum sortedPositions=termsEnum.postings(null,null,PostingsEnum.ALL);
  int doc;
  while ((doc=sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
    int freq=sortedPositions.freq();
    assertEquals("incorrect freq for doc=" + doc,sortedValues[doc].intValue() / 10 + 1,freq);
    for (int i=0; i < freq; i++) {
      assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
      assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
      assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
      assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
    }
  }
  final PostingsEnum reuse=sortedPositions;
  sortedPositions=termsEnum.postings(null,reuse,PostingsEnum.ALL);
  if (sortedPositions instanceof SortingDocsEnum) {
    assertTrue(((SortingDocsEnum)sortedPositions).reused(reuse));
  }
  doc=0;
  while ((doc=sortedPositions.advance(doc + TestUtil.nextInt(random(),1,5))) != DocIdSetIterator.NO_MORE_DOCS) {
    int freq=sortedPositions.freq();
    assertEquals("incorrect freq for doc=" + doc,sortedValues[doc].intValue() / 10 + 1,freq);
    for (int i=0; i < freq; i++) {
      assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
      assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
      assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
      assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
    }
  }
}
