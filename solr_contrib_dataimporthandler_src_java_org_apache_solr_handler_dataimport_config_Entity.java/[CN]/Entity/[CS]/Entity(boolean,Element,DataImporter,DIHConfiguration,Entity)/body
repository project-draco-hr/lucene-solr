{
  this.parentEntity=parent;
  this.config=config;
  String modName=ConfigParseUtil.getStringAttribute(element,ConfigNameConstants.NAME,null);
  if (modName == null) {
    throw new DataImportHandlerException(SEVERE,"Entity must have a name.");
  }
  if (modName.indexOf(".") != -1) {
    throw new DataImportHandlerException(SEVERE,"Entity name must not have period (.): '" + modName);
  }
  if (ConfigNameConstants.RESERVED_WORDS.contains(modName)) {
    throw new DataImportHandlerException(SEVERE,"Entity name : '" + modName + "' is a reserved keyword. Reserved words are: "+ ConfigNameConstants.RESERVED_WORDS);
  }
  this.name=modName;
  this.pk=ConfigParseUtil.getStringAttribute(element,"pk",null);
  this.processorName=ConfigParseUtil.getStringAttribute(element,ConfigNameConstants.PROCESSOR,null);
  this.dataSourceName=ConfigParseUtil.getStringAttribute(element,DataImporter.DATA_SRC,null);
  String rawDocRootValue=ConfigParseUtil.getStringAttribute(element,ConfigNameConstants.ROOT_ENTITY,null);
  if (!docRootFound && !"false".equals(rawDocRootValue)) {
    docRoot=true;
  }
 else {
    docRoot=false;
  }
  String childValue=ConfigParseUtil.getStringAttribute(element,ConfigNameConstants.CHILD,null);
  child="true".equals(childValue);
  Map<String,String> modAttributes=ConfigParseUtil.getAllAttributes(element);
  modAttributes.put(ConfigNameConstants.DATA_SRC,this.dataSourceName);
  this.allAttributes=Collections.unmodifiableMap(modAttributes);
  List<Element> n=ConfigParseUtil.getChildNodes(element,"field");
  List<EntityField> modFields=new ArrayList<>(n.size());
  Map<String,Set<EntityField>> modColNameVsField=new HashMap<>();
  List<Map<String,String>> modAllFieldAttributes=new ArrayList<>();
  for (  Element elem : n) {
    EntityField.Builder fieldBuilder=new EntityField.Builder(elem);
    if (config.getSchema() != null) {
      if (fieldBuilder.getNameOrColumn() != null && fieldBuilder.getNameOrColumn().contains("${")) {
        fieldBuilder.dynamicName=true;
      }
 else {
        SchemaField schemaField=config.getSchemaField(fieldBuilder.getNameOrColumn());
        if (schemaField != null) {
          fieldBuilder.name=schemaField.getName();
          fieldBuilder.multiValued=schemaField.multiValued();
          fieldBuilder.allAttributes.put(DataImporter.MULTI_VALUED,Boolean.toString(schemaField.multiValued()));
          fieldBuilder.allAttributes.put(DataImporter.TYPE,schemaField.getType().getTypeName());
          fieldBuilder.allAttributes.put("indexed",Boolean.toString(schemaField.indexed()));
          fieldBuilder.allAttributes.put("stored",Boolean.toString(schemaField.stored()));
          fieldBuilder.allAttributes.put("defaultValue",schemaField.getDefaultValue());
        }
 else {
          fieldBuilder.toWrite=false;
        }
      }
    }
    Set<EntityField> fieldSet=modColNameVsField.get(fieldBuilder.column);
    if (fieldSet == null) {
      fieldSet=new HashSet<>();
      modColNameVsField.put(fieldBuilder.column,fieldSet);
    }
    fieldBuilder.allAttributes.put("boost",Float.toString(fieldBuilder.boost));
    fieldBuilder.allAttributes.put("toWrite",Boolean.toString(fieldBuilder.toWrite));
    modAllFieldAttributes.add(fieldBuilder.allAttributes);
    fieldBuilder.entity=this;
    EntityField field=new EntityField(fieldBuilder);
    fieldSet.add(field);
    modFields.add(field);
  }
  Map<String,Set<EntityField>> modColNameVsField1=new HashMap<>();
  for (  Map.Entry<String,Set<EntityField>> entry : modColNameVsField.entrySet()) {
    if (entry.getValue().size() > 0) {
      modColNameVsField1.put(entry.getKey(),Collections.unmodifiableSet(entry.getValue()));
    }
  }
  this.colNameVsField=Collections.unmodifiableMap(modColNameVsField1);
  this.fields=Collections.unmodifiableList(modFields);
  this.allFieldAttributes=Collections.unmodifiableList(modAllFieldAttributes);
  String modPkMappingFromSchema=null;
  if (config.getSchema() != null) {
    SchemaField uniqueKey=config.getSchema().getUniqueKeyField();
    if (uniqueKey != null) {
      modPkMappingFromSchema=uniqueKey.getName();
      for (      EntityField field : fields) {
        if (field.getName().equals(modPkMappingFromSchema)) {
          modPkMappingFromSchema=field.getColumn();
          break;
        }
      }
    }
  }
  pkMappingFromSchema=modPkMappingFromSchema;
  n=ConfigParseUtil.getChildNodes(element,"entity");
  List<Entity> modEntities=new ArrayList<>();
  for (  Element elem : n) {
    modEntities.add(new Entity((docRootFound || this.docRoot),elem,di,config,this));
  }
  this.children=Collections.unmodifiableList(modEntities);
}
