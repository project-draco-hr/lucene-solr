{
{
    final HLL hllA=newHLL(128);
    final HLL hllB=newHLL(128);
    hllA.addRaw(1L);
    hllA.addRaw(2L);
    hllB.addRaw(3L);
    hllA.union(hllB);
    assertEquals(hllA.cardinality(),3);
  }
{
    final HLL hllA=newHLL(128);
    final HLL hllB=newHLL(128);
    hllA.addRaw(1L);
    hllA.addRaw(2L);
    hllB.addRaw(1L);
    hllA.union(hllB);
    assertEquals(hllA.cardinality(),2);
  }
{
    final HLL hllA=newHLL(128);
    final HLL hllB=newHLL(128);
    for (long i=0; i < 128; i++) {
      hllA.addRaw(i);
      hllB.addRaw(i + 128);
    }
    hllA.union(hllB);
    assertEquals(hllA.getType(),HLLType.SPARSE);
  }
}
