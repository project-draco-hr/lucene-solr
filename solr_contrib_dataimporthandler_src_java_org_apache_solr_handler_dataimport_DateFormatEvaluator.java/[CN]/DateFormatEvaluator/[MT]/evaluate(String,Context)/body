{
  List<Object> l=parseParams(expression,context.getVariableResolver());
  if (l.size() < 2 || l.size() > 4) {
    throw new DataImportHandlerException(SEVERE,"'formatDate()' must have two, three or four parameters ");
  }
  Object o=l.get(0);
  Object format=l.get(1);
  if (format instanceof VariableWrapper) {
    VariableWrapper wrapper=(VariableWrapper)format;
    o=wrapper.resolve();
    format=o.toString();
  }
  Locale locale=Locale.ROOT;
  if (l.size() > 2) {
    Object localeObj=l.get(2);
    String localeStr=null;
    if (localeObj instanceof VariableWrapper) {
      localeStr=((VariableWrapper)localeObj).resolve().toString();
    }
 else {
      localeStr=localeObj.toString();
    }
    locale=availableLocales.get(localeStr);
    if (locale == null) {
      throw new DataImportHandlerException(SEVERE,"Unsupported locale: " + localeStr);
    }
  }
  TimeZone tz=TimeZone.getDefault();
  if (l.size() == 4) {
    Object tzObj=l.get(3);
    String tzStr=null;
    if (tzObj instanceof VariableWrapper) {
      tzStr=((VariableWrapper)tzObj).resolve().toString();
    }
 else {
      tzStr=tzObj.toString();
    }
    if (availableTimezones.contains(tzStr)) {
      tz=TimeZone.getTimeZone(tzStr);
    }
 else {
      throw new DataImportHandlerException(SEVERE,"Unsupported Timezone: " + tzStr);
    }
  }
  String dateFmt=format.toString();
  SimpleDateFormat fmt=getDateFormat(dateFmt,tz,locale);
  Date date=null;
  if (o instanceof VariableWrapper) {
    VariableWrapper variableWrapper=(VariableWrapper)o;
    Object variableval=variableWrapper.resolve();
    if (variableval instanceof Date) {
      date=(Date)variableval;
    }
 else {
      String s=variableval.toString();
      try {
        date=getDateFormat(DEFAULT_DATE_FORMAT,tz,locale).parse(s);
      }
 catch (      ParseException exp) {
        wrapAndThrow(SEVERE,exp,"Invalid expression for date");
      }
    }
  }
 else {
    String datemathfmt=o.toString();
    datemathfmt=datemathfmt.replaceAll("NOW","");
    try {
      date=getDateMathParser(locale,tz).parseMath(datemathfmt);
    }
 catch (    ParseException e) {
      wrapAndThrow(SEVERE,e,"Invalid expression for date");
    }
  }
  return fmt.format(date);
}
