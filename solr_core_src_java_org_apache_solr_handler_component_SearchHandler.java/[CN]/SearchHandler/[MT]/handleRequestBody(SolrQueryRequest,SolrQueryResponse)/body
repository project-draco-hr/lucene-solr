{
  if (req.getContentStreams() != null && req.getContentStreams().iterator().hasNext()) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Search requests cannot accept content streams");
  }
  ResponseBuilder rb=new ResponseBuilder(req,rsp,components);
  if (rb.requestInfo != null) {
    rb.requestInfo.setResponseBuilder(rb);
  }
  boolean dbg=req.getParams().getBool(CommonParams.DEBUG_QUERY,false);
  rb.setDebug(dbg);
  if (dbg == false) {
    SolrPluginUtils.getDebugInterests(req.getParams().getParams(CommonParams.DEBUG),rb);
  }
  final RTimer timer=rb.isDebug() ? new RTimer() : null;
  ShardHandler shardHandler1=shardHandlerFactory.getShardHandler();
  shardHandler1.checkDistributed(rb);
  if (timer == null) {
    for (    SearchComponent c : components) {
      c.prepare(rb);
    }
  }
 else {
    RTimer subt=timer.sub("prepare");
    for (    SearchComponent c : components) {
      rb.setTimer(subt.sub(c.getName()));
      c.prepare(rb);
      rb.getTimer().stop();
    }
    subt.stop();
  }
  if (!rb.isDistrib) {
    if (!rb.isDebug()) {
      for (      SearchComponent c : components) {
        c.process(rb);
      }
    }
 else {
      RTimer subt=timer.sub("process");
      for (      SearchComponent c : components) {
        rb.setTimer(subt.sub(c.getName()));
        c.process(rb);
        rb.getTimer().stop();
      }
      subt.stop();
      timer.stop();
      if (rb.isDebugTimings()) {
        rb.addDebugInfo("timing",timer.asNamedList());
      }
    }
  }
 else {
    if (rb.outgoing == null) {
      rb.outgoing=new LinkedList<ShardRequest>();
    }
    rb.finished=new ArrayList<ShardRequest>();
    int nextStage=0;
    do {
      rb.stage=nextStage;
      nextStage=ResponseBuilder.STAGE_DONE;
      for (      SearchComponent c : components) {
        nextStage=Math.min(nextStage,c.distributedProcess(rb));
      }
      while (rb.outgoing.size() > 0) {
        while (rb.outgoing.size() > 0) {
          ShardRequest sreq=rb.outgoing.remove(0);
          sreq.actualShards=sreq.shards;
          if (sreq.actualShards == ShardRequest.ALL_SHARDS) {
            sreq.actualShards=rb.shards;
          }
          sreq.responses=new ArrayList<ShardResponse>();
          for (          String shard : sreq.actualShards) {
            ModifiableSolrParams params=new ModifiableSolrParams(sreq.params);
            params.remove(ShardParams.SHARDS);
            params.set("distrib","false");
            params.remove("indent");
            params.remove(CommonParams.HEADER_ECHO_PARAMS);
            params.set(ShardParams.IS_SHARD,true);
            params.set(ShardParams.SHARD_URL,shard);
            if (rb.requestInfo != null) {
              params.set("NOW",Long.toString(rb.requestInfo.getNOW().getTime()));
            }
            String shardQt=params.get(ShardParams.SHARDS_QT);
            if (shardQt == null) {
              params.remove(CommonParams.QT);
            }
 else {
              params.set(CommonParams.QT,shardQt);
            }
            shardHandler1.submit(sreq,shard,params);
          }
        }
        boolean tolerant=rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT,false);
        while (rb.outgoing.size() == 0) {
          ShardResponse srsp=tolerant ? shardHandler1.takeCompletedIncludingErrors() : shardHandler1.takeCompletedOrError();
          if (srsp == null)           break;
          if (srsp.getException() != null) {
            if (!tolerant) {
              shardHandler1.cancelAll();
              if (srsp.getException() instanceof SolrException) {
                throw (SolrException)srsp.getException();
              }
 else {
                throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,srsp.getException());
              }
            }
 else {
              if (rsp.getResponseHeader().get("partialResults") == null) {
                rsp.getResponseHeader().add("partialResults",Boolean.TRUE);
              }
            }
          }
          rb.finished.add(srsp.getShardRequest());
          for (          SearchComponent c : components) {
            c.handleResponses(rb,srsp.getShardRequest());
          }
        }
      }
      for (      SearchComponent c : components) {
        c.finishStage(rb);
      }
    }
 while (nextStage != Integer.MAX_VALUE);
  }
}
