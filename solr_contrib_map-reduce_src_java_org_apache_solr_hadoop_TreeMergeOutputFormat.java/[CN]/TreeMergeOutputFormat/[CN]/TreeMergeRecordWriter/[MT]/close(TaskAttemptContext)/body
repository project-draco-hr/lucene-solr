{
  LOG.debug("Task " + context.getTaskAttemptID() + " merging into dstDir: "+ workDir+ ", srcDirs: "+ shards);
  writeShardNumberFile(context);
  heartBeater.needHeartBeat();
  try {
    Directory mergedIndex=new HdfsDirectory(workDir,context.getConfiguration());
    IndexWriterConfig writerConfig=new IndexWriterConfig(null).setOpenMode(OpenMode.CREATE).setUseCompoundFile(false);
    if (LOG.isDebugEnabled()) {
      writerConfig.setInfoStream(System.out);
    }
    MergePolicy mergePolicy=writerConfig.getMergePolicy();
    LOG.debug("mergePolicy was: {}",mergePolicy);
    if (mergePolicy instanceof TieredMergePolicy) {
      ((TieredMergePolicy)mergePolicy).setNoCFSRatio(0.0);
    }
 else     if (mergePolicy instanceof LogMergePolicy) {
      ((LogMergePolicy)mergePolicy).setNoCFSRatio(0.0);
    }
    LOG.info("Using mergePolicy: {}",mergePolicy);
    IndexWriter writer=new IndexWriter(mergedIndex,writerConfig);
    Directory[] indexes=new Directory[shards.size()];
    for (int i=0; i < shards.size(); i++) {
      indexes[i]=new HdfsDirectory(shards.get(i),context.getConfiguration());
    }
    context.setStatus("Logically merging " + shards.size() + " shards into one shard");
    LOG.info("Logically merging " + shards.size() + " shards into one shard: "+ workDir);
    RTimer timer=new RTimer();
    writer.addIndexes(indexes);
    timer.stop();
    if (LOG.isDebugEnabled()) {
      context.getCounter(SolrCounters.class.getName(),SolrCounters.LOGICAL_TREE_MERGE_TIME.toString()).increment((long)timer.getTime());
    }
    LOG.info("Logical merge took {}ms",timer.getTime());
    int maxSegments=context.getConfiguration().getInt(TreeMergeMapper.MAX_SEGMENTS_ON_TREE_MERGE,Integer.MAX_VALUE);
    context.setStatus("Optimizing Solr: forcing mtree merge down to " + maxSegments + " segments");
    LOG.info("Optimizing Solr: forcing tree merge down to {} segments",maxSegments);
    timer=new RTimer();
    if (maxSegments < Integer.MAX_VALUE) {
      writer.forceMerge(maxSegments);
    }
    timer.stop();
    if (LOG.isDebugEnabled()) {
      context.getCounter(SolrCounters.class.getName(),SolrCounters.PHYSICAL_TREE_MERGE_TIME.toString()).increment((long)timer.getTime());
    }
    LOG.info("Optimizing Solr: done forcing tree merge down to {} segments in {}ms",maxSegments,timer.getTime());
    SolrIndexWriter.setCommitData(writer);
    timer=new RTimer();
    LOG.info("Optimizing Solr: Closing index writer");
    writer.close();
    LOG.info("Optimizing Solr: Done closing index writer in {}ms",timer.getTime());
    context.setStatus("Done");
  }
  finally {
    heartBeater.cancelHeartBeat();
    heartBeater.close();
  }
}
