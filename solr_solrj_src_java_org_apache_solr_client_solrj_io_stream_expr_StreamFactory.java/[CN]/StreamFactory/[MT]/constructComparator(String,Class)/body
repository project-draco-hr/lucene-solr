{
  if (comparatorString.contains(",")) {
    String[] parts=comparatorString.split(",");
    StreamComparator[] comps=new StreamComparator[parts.length];
    for (int idx=0; idx < parts.length; ++idx) {
      comps[idx]=constructComparator(parts[idx].trim(),comparatorType);
    }
    return new MultipleFieldComparator(comps);
  }
 else   if (comparatorString.contains("=")) {
    String[] parts=comparatorString.split("[ =]");
    if (parts.length < 3) {
      throw new IOException(String.format(Locale.ROOT,"Invalid comparator expression %s - expecting 'left=right order'",comparatorString));
    }
    String leftFieldName=null;
    String rightFieldName=null;
    String order=null;
    for (    String part : parts) {
      if (null == part || 0 == part.trim().length()) {
        continue;
      }
      if (null == leftFieldName) {
        leftFieldName=part.trim();
      }
 else       if (null == rightFieldName) {
        rightFieldName=part.trim();
      }
 else {
        order=part.trim();
        break;
      }
    }
    if (null == leftFieldName || null == rightFieldName || null == order) {
      throw new IOException(String.format(Locale.ROOT,"Invalid comparator expression %s - expecting 'left=right order'",comparatorString));
    }
    return (StreamComparator)createInstance(comparatorType,new Class[]{String.class,String.class,ComparatorOrder.class},new Object[]{leftFieldName,rightFieldName,ComparatorOrder.fromString(order)});
  }
 else {
    String[] parts=comparatorString.split(" ");
    if (2 != parts.length) {
      throw new IOException(String.format(Locale.ROOT,"Invalid comparator expression %s - expecting 'field order'",comparatorString));
    }
    String fieldName=parts[0].trim();
    String order=parts[1].trim();
    return (StreamComparator)createInstance(comparatorType,new Class[]{String.class,ComparatorOrder.class},new Object[]{fieldName,ComparatorOrder.fromString(order)});
  }
}
