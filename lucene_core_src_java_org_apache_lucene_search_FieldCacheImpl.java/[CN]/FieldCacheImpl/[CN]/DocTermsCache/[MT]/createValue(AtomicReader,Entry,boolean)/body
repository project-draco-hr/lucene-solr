{
  Terms terms=reader.terms(entryKey.field);
  final boolean fasterButMoreRAM=((Boolean)entryKey.custom).booleanValue();
  final int termCountHardLimit=reader.maxDoc();
  final PagedBytes bytes=new PagedBytes(15);
  int startBPV;
  if (terms != null) {
    long numUniqueTerms=0;
    try {
      numUniqueTerms=terms.getUniqueTermCount();
    }
 catch (    UnsupportedOperationException uoe) {
      numUniqueTerms=-1;
    }
    if (numUniqueTerms != -1) {
      if (numUniqueTerms > termCountHardLimit) {
        numUniqueTerms=termCountHardLimit;
      }
      startBPV=PackedInts.bitsRequired(numUniqueTerms * 4);
    }
 else {
      startBPV=1;
    }
  }
 else {
    startBPV=1;
  }
  final GrowableWriter docToOffset=new GrowableWriter(startBPV,reader.maxDoc(),fasterButMoreRAM);
  bytes.copyUsingLengthPrefix(new BytesRef());
  if (terms != null) {
    int termCount=0;
    final TermsEnum termsEnum=terms.iterator(null);
    DocsEnum docs=null;
    while (true) {
      if (termCount++ == termCountHardLimit) {
        break;
      }
      final BytesRef term=termsEnum.next();
      if (term == null) {
        break;
      }
      final long pointer=bytes.copyUsingLengthPrefix(term);
      docs=termsEnum.docs(null,docs,false);
      while (true) {
        final int docID=docs.nextDoc();
        if (docID == DocIdSetIterator.NO_MORE_DOCS) {
          break;
        }
        docToOffset.set(docID,pointer);
      }
    }
  }
  return new DocTermsImpl(bytes.freeze(true),docToOffset.getMutable());
}
