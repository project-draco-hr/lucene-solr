{
  final IntParser parser=(IntParser)key.custom;
  if (parser == null) {
    return wrapper.getInts(reader,key.field,NUMERIC_UTILS_INT_PARSER,setDocsWithField);
  }
  final HoldsOneThing<GrowableWriterAndMinValue> valuesRef=new HoldsOneThing<GrowableWriterAndMinValue>();
  Uninvert u=new Uninvert(){
    private int minValue;
    private int currentValue;
    private GrowableWriter values;
    @Override public void visitTerm(    BytesRef term){
      currentValue=parser.parseInt(term);
      if (values == null) {
        int startBitsPerValue;
        if (currentValue < 0) {
          minValue=currentValue;
          startBitsPerValue=PackedInts.bitsRequired((-minValue) & 0xFFFFFFFFL);
        }
 else {
          minValue=0;
          startBitsPerValue=PackedInts.bitsRequired(currentValue);
        }
        values=new GrowableWriter(startBitsPerValue,reader.maxDoc(),PackedInts.FAST);
        if (minValue != 0) {
          values.fill(0,values.size(),(-minValue) & 0xFFFFFFFFL);
        }
        valuesRef.set(new GrowableWriterAndMinValue(values,minValue));
      }
    }
    @Override public void visitDoc(    int docID){
      values.set(docID,(currentValue - minValue) & 0xFFFFFFFFL);
    }
    @Override protected TermsEnum termsEnum(    Terms terms) throws IOException {
      return parser.termsEnum(terms);
    }
  }
;
  u.uninvert(reader,key.field,setDocsWithField);
  if (setDocsWithField) {
    wrapper.setDocsWithField(reader,key.field,u.docsWithField);
  }
  GrowableWriterAndMinValue values=valuesRef.get();
  if (values == null) {
    return new IntsFromArray(new PackedInts.NullReader(reader.maxDoc()),0);
  }
  return new IntsFromArray(values.writer.getMutable(),(int)values.minValue);
}
