{
  final int maxDoc=reader.maxDoc();
  Terms terms=reader.terms(key.field);
  final float acceptableOverheadRatio=((Float)key.custom).floatValue();
  final PagedBytes bytes=new PagedBytes(15);
  int startTermsBPV;
  final int termCountHardLimit;
  if (maxDoc == Integer.MAX_VALUE) {
    termCountHardLimit=Integer.MAX_VALUE;
  }
 else {
    termCountHardLimit=maxDoc + 1;
  }
  if (terms != null) {
    long numUniqueTerms=terms.size();
    if (numUniqueTerms != -1L) {
      if (numUniqueTerms > termCountHardLimit) {
        numUniqueTerms=termCountHardLimit;
      }
      startTermsBPV=PackedInts.bitsRequired(numUniqueTerms);
    }
 else {
      startTermsBPV=1;
    }
  }
 else {
    startTermsBPV=1;
  }
  MonotonicAppendingLongBuffer termOrdToBytesOffset=new MonotonicAppendingLongBuffer();
  final GrowableWriter docToTermOrd=new GrowableWriter(startTermsBPV,maxDoc,acceptableOverheadRatio);
  int termOrd=0;
  if (terms != null) {
    final TermsEnum termsEnum=terms.iterator(null);
    DocsEnum docs=null;
    while (true) {
      final BytesRef term=termsEnum.next();
      if (term == null) {
        break;
      }
      if (termOrd >= termCountHardLimit) {
        break;
      }
      termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));
      docs=termsEnum.docs(null,docs,DocsEnum.FLAG_NONE);
      while (true) {
        final int docID=docs.nextDoc();
        if (docID == DocIdSetIterator.NO_MORE_DOCS) {
          break;
        }
        docToTermOrd.set(docID,1 + termOrd);
      }
      termOrd++;
    }
  }
  return new SortedDocValuesImpl(bytes.freeze(true),termOrdToBytesOffset,docToTermOrd.getMutable(),termOrd);
}
