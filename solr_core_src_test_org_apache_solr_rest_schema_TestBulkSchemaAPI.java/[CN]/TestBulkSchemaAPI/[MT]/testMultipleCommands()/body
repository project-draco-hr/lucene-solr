{
  RestTestHarness harness=restTestHarness;
  Map m=getObj(harness,"wdf_nocase","fields");
  assertNotNull("'wdf_nocase' field does not exist in the schema",m);
  m=getObj(harness,"wdf_nocase","fieldTypes");
  assertNotNull("'wdf_nocase' field type does not exist in the schema",m);
  m=getObj(harness,"boolean","fieldTypes");
  assertNotNull("'boolean' field type does not exist in the schema",m);
  assertNull(m.get("sortMissingFirst"));
  assertTrue((Boolean)m.get("sortMissingLast"));
  m=getObj(harness,"name","fields");
  assertNotNull("'name' field does not exist in the schema",m);
  assertEquals("nametext",m.get("type"));
  m=getObj(harness,"bind","fields");
  assertNotNull("'bind' field does not exist in the schema",m);
  assertEquals("boolean",m.get("type"));
  m=getObj(harness,"attr_*","dynamicFields");
  assertNotNull("'attr_*' dynamic field does not exist in the schema",m);
  assertEquals("text",m.get("type"));
  List l=getSourceCopyFields(harness,"*_i");
  Set s=new HashSet();
  assertEquals(4,l.size());
  s.add(((Map)l.get(0)).get("dest"));
  s.add(((Map)l.get(1)).get("dest"));
  s.add(((Map)l.get(2)).get("dest"));
  s.add(((Map)l.get(3)).get("dest"));
  assertTrue(s.contains("title"));
  assertTrue(s.contains("*_s"));
  String payload="{\n" + "          'add-field' : {\n" + "                       'name':'a1',\n"+ "                       'type': 'string',\n"+ "                       'stored':true,\n"+ "                       'indexed':false\n"+ "                       },\n"+ "          'add-field' : {\n"+ "                       'name':'a2',\n"+ "                       'type': 'string',\n"+ "                       'stored':true,\n"+ "                       'indexed':true\n"+ "                       },\n"+ "          'add-dynamic-field' : {\n"+ "                       'name' :'*_lol',\n"+ "                       'type':'string',\n"+ "                       'stored':true,\n"+ "                       'indexed':true\n"+ "                       },\n"+ "          'add-copy-field' : {\n"+ "                       'source' :'a1',\n"+ "                       'dest':['a2','hello_lol']\n"+ "                       },\n"+ "          'add-field-type' : {\n"+ "                       'name' :'mystr',\n"+ "                       'class' : 'solr.StrField',\n"+ "                       'sortMissingLast':'true'\n"+ "                       },\n"+ "          'add-field-type' : {"+ "                       'name' : 'myNewTxtField',\n"+ "                       'class':'solr.TextField',\n"+ "                       'positionIncrementGap':'100',\n"+ "                       'analyzer' : {\n"+ "                               'charFilters':[\n"+ "                                          {\n"+ "                                           'class':'solr.PatternReplaceCharFilterFactory',\n"+ "                                           'replacement':'$1$1',\n"+ "                                           'pattern':'([a-zA-Z])\\\\\\\\1+'\n"+ "                                          }\n"+ "                                         ],\n"+ "                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\n"+ "                               'filters':[\n"+ "                                          {\n"+ "                                           'class':'solr.WordDelimiterFilterFactory',\n"+ "                                           'preserveOriginal':'0'\n"+ "                                          },\n"+ "                                          {\n"+ "                                           'class':'solr.StopFilterFactory',\n"+ "                                           'words':'stopwords.txt',\n"+ "                                           'ignoreCase':'true'\n"+ "                                          },\n"+ "                                          {'class':'solr.LowerCaseFilterFactory'},\n"+ "                                          {'class':'solr.ASCIIFoldingFilterFactory'},\n"+ "                                          {'class':'solr.KStemFilterFactory'}\n"+ "                                         ]\n"+ "                               }\n"+ "                       },\n"+ "          'add-field' : {\n"+ "                       'name':'a3',\n"+ "                       'type': 'myNewTxtField',\n"+ "                       'stored':true,\n"+ "                       'indexed':true\n"+ "                       },\n"+ "          'add-field-type' : {"+ "                       'name' : 'myWhitespaceTxtField',\n"+ "                       'class':'solr.TextField',\n"+ "                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\n"+ "                       },\n"+ "          'add-field' : {\n"+ "                       'name':'a5',\n"+ "                       'type': 'myWhitespaceTxtField',\n"+ "                       'stored':true\n"+ "                       },\n"+ "          'delete-field' : {'name':'wdf_nocase'},\n"+ "          'delete-field-type' : {'name':'wdf_nocase'},\n"+ "          'delete-dynamic-field' : {'name':'*_tt'},\n"+ "          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\n"+ "          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\n"+ "          'replace-field-type' : {\n"+ "                       'name':'boolean',\n"+ "                       'class':'solr.BoolField',\n"+ "                       'sortMissingFirst':true\n"+ "                       },\n"+ "          'replace-field' : {\n"+ "                       'name':'name',\n"+ "                       'type':'string',\n"+ "                       'indexed':true,\n"+ "                       'stored':true\n"+ "                       },\n"+ "          'replace-dynamic-field' : {\n"+ "                       'name':'attr_*',\n"+ "                       'type':'string',\n"+ "                       'indexed':true,\n"+ "                       'stored':true,\n"+ "                       'multiValued':true\n"+ "                       }\n"+ "          }\n";
  String response=harness.post("/schema?wt=json",json(payload));
  Map map=(Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
  assertNull(response,map.get("errors"));
  m=getObj(harness,"a1","fields");
  assertNotNull("field a1 not created",m);
  assertEquals("string",m.get("type"));
  assertEquals(Boolean.TRUE,m.get("stored"));
  assertEquals(Boolean.FALSE,m.get("indexed"));
  m=getObj(harness,"a2","fields");
  assertNotNull("field a2 not created",m);
  assertEquals("string",m.get("type"));
  assertEquals(Boolean.TRUE,m.get("stored"));
  assertEquals(Boolean.TRUE,m.get("indexed"));
  m=getObj(harness,"*_lol","dynamicFields");
  assertNotNull("field *_lol not created",m);
  assertEquals("string",m.get("type"));
  assertEquals(Boolean.TRUE,m.get("stored"));
  assertEquals(Boolean.TRUE,m.get("indexed"));
  l=getSourceCopyFields(harness,"a1");
  s=new HashSet();
  assertEquals(1,l.size());
  s.add(((Map)l.get(0)).get("dest"));
  assertTrue(s.contains("hello_lol"));
  l=getSourceCopyFields(harness,"*_i");
  s=new HashSet();
  assertEquals(2,l.size());
  s.add(((Map)l.get(0)).get("dest"));
  s.add(((Map)l.get(1)).get("dest"));
  assertFalse(s.contains("title"));
  assertFalse(s.contains("*_s"));
  m=getObj(harness,"mystr","fieldTypes");
  assertNotNull(m);
  assertEquals("solr.StrField",m.get("class"));
  assertEquals("true",String.valueOf(m.get("sortMissingLast")));
  m=getObj(harness,"myNewTxtField","fieldTypes");
  assertNotNull(m);
  m=getObj(harness,"a3","fields");
  assertNotNull("field a3 not created",m);
  assertEquals("myNewTxtField",m.get("type"));
  m=getObj(harness,"myWhitespaceTxtField","fieldTypes");
  assertNotNull(m);
  m=getObj(harness,"a5","fields");
  assertNotNull("field a5 not created",m);
  assertEquals("myWhitespaceTxtField",m.get("type"));
  m=getObj(harness,"wdf_nocase","fields");
  assertNull("field 'wdf_nocase' not deleted",m);
  m=getObj(harness,"wdf_nocase","fieldTypes");
  assertNull("field type 'wdf_nocase' not deleted",m);
  m=getObj(harness,"*_tt","dynamicFields");
  assertNull("dynamic field '*_tt' not deleted",m);
  m=getObj(harness,"boolean","fieldTypes");
  assertNotNull("'boolean' field type does not exist in the schema",m);
  assertNull(m.get("sortMissingLast"));
  assertTrue((Boolean)m.get("sortMissingFirst"));
  m=getObj(harness,"bind","fields");
  assertNotNull("'bind' field does not exist in the schema",m);
  m=getObj(harness,"name","fields");
  assertNotNull("'name' field does not exist in the schema",m);
  assertEquals("string",m.get("type"));
  m=getObj(harness,"attr_*","dynamicFields");
  assertNotNull("'attr_*' dynamic field does not exist in the schema",m);
  assertEquals("string",m.get("type"));
}
