{
  BooleanQuery result=new BooleanQuery();
  double[] point=new double[0];
  try {
    point=DistanceUtils.parseLatitudeLongitude(options.pointStr);
  }
 catch (  InvalidGeoException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  point[0]=point[0] * DistanceUtils.DEGREES_TO_RADIANS;
  point[1]=point[1] * DistanceUtils.DEGREES_TO_RADIANS;
  double[] ur=new double[2];
  double[] ll=new double[2];
  double[] tmp=new double[2];
  double[] north=DistanceUtils.pointOnBearing(point[LAT],point[LONG],options.distance,0,tmp,options.radius);
  ur[LAT]=north[LAT] * DistanceUtils.RADIANS_TO_DEGREES;
  double[] east=DistanceUtils.pointOnBearing(point[LAT],point[LONG],options.distance,DistanceUtils.DEG_90_AS_RADS,tmp,options.radius);
  ur[LONG]=east[LONG] * DistanceUtils.RADIANS_TO_DEGREES;
  double[] south=DistanceUtils.pointOnBearing(point[LAT],point[LONG],options.distance,DistanceUtils.DEG_180_AS_RADS,tmp,options.radius);
  ll[LAT]=south[LAT] * DistanceUtils.RADIANS_TO_DEGREES;
  double[] west=DistanceUtils.pointOnBearing(point[LAT],point[LONG],options.distance,DistanceUtils.DEG_270_AS_RADS,tmp,options.radius);
  ll[LONG]=west[LONG] * DistanceUtils.RADIANS_TO_DEGREES;
  SchemaField subSF;
  Query range;
  double angDist=DistanceUtils.angularDistance(options.distance,options.radius);
  if (point[LAT] + angDist > DistanceUtils.DEG_90_AS_RADS) {
    double minLat=Math.min(ll[LAT],ur[LAT]);
    subSF=subField(options.field,LAT);
    range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(minLat),"90",true,true);
    result.add(range,BooleanClause.Occur.MUST);
  }
 else   if (point[LAT] - angDist < -DistanceUtils.DEG_90_AS_RADS) {
    subSF=subField(options.field,LAT);
    double maxLat=Math.max(ll[LAT],ur[LAT]);
    range=subSF.getType().getRangeQuery(parser,subSF,"-90",String.valueOf(maxLat),true,true);
    result.add(range,BooleanClause.Occur.MUST);
  }
 else {
    if (ll[LONG] > 0.0 && ur[LONG] < 0.0) {
      if (ll[LAT] < 0.0 && ur[LAT] > 0.0) {
        addEquatorialBoundary(parser,options,result,ur[LAT],ll[LAT]);
      }
 else {
        subSF=subField(options.field,LAT);
        range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[LAT]),String.valueOf(ur[LAT]),true,true);
        result.add(range,BooleanClause.Occur.MUST);
      }
      addMeridianBoundary(parser,options,result,ur[LONG],ll[LONG],"180.0","-180.0");
    }
 else     if (ll[LONG] < 0.0 && ur[LONG] > 0.0) {
      if (ll[LAT] < 0.0 && ur[LAT] > 0.0) {
        addEquatorialBoundary(parser,options,result,ur[LAT],ll[LAT]);
      }
 else {
        subSF=subField(options.field,LAT);
        range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[LAT]),String.valueOf(ur[LAT]),true,true);
        result.add(range,BooleanClause.Occur.MUST);
      }
      addMeridianBoundary(parser,options,result,ur[LONG],ll[LONG],"0.0",".0");
    }
 else {
      if (ll[LAT] < 0.0 && ur[LAT] > 0.0) {
        addEquatorialBoundary(parser,options,result,ur[LAT],ll[LAT]);
      }
 else {
        subSF=subField(options.field,LAT);
        range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[LAT]),String.valueOf(ur[LAT]),true,true);
        result.add(range,BooleanClause.Occur.MUST);
      }
      subSF=subField(options.field,LONG);
      range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[LONG]),String.valueOf(ur[LONG]),true,true);
      result.add(range,BooleanClause.Occur.MUST);
    }
  }
  return result;
}
