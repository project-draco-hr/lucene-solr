{
  final int log2m=11;
  final int regwidth=5;
  final ISchemaVersion schemaVersion=SerializationUtil.DEFAULT_SCHEMA_VERSION;
  final HLLType type=HLLType.FULL;
  final int padding=schemaVersion.paddingBytes(type);
  final int dataByteCount=ProbabilisticTestUtil.getRequiredBytes(regwidth,(1 << log2m));
  final int expectedByteCount=padding + dataByteCount;
{
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.FULL);
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,expectedByteCount);
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
{
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.FULL);
    for (int i=0; i < 3; i++) {
      final long rawValue=ProbabilisticTestUtil.constructHLLValue(log2m,i,(i + 9));
      hll.addRaw(rawValue);
    }
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,expectedByteCount);
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
{
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.FULL);
    for (int i=0; i < (1 << log2m); i++) {
      final long rawValue=ProbabilisticTestUtil.constructHLLValue(log2m,i,(i % 9) + 1);
      hll.addRaw(rawValue);
    }
    final byte[] bytes=hll.toBytes(schemaVersion);
    assertEquals(bytes.length,expectedByteCount);
    final HLL inHLL=HLL.fromBytes(bytes);
    assertElementsEqual(hll,inHLL);
  }
}
