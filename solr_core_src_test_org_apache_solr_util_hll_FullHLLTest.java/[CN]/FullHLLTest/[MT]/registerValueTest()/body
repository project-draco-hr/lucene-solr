{
  final int log2m=4;
{
    final int regwidth=4;
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.FULL);
    final BitVector bitVector=hll.probabilisticStorage;
    hll.addRaw(0x000000000000001L);
    assertEquals(bitVector.getRegister(1),0);
    hll.addRaw(0x0000000000000012L);
    assertEquals(bitVector.getRegister(2),1);
    hll.addRaw(0x0000000000000023L);
    assertEquals(bitVector.getRegister(3),2);
    hll.addRaw(0x0000000000000044L);
    assertEquals(bitVector.getRegister(4),3);
    hll.addRaw(0x0000000000000085L);
    assertEquals(bitVector.getRegister(5),4);
    hll.addRaw(0x0000000000010006L);
    assertEquals(bitVector.getRegister(6),13);
    hll.addRaw(0x0000000000020007L);
    assertEquals(bitVector.getRegister(7),14);
    hll.addRaw(0x0000000000040008L);
    assertEquals(bitVector.getRegister(8),15);
    hll.addRaw(0x0000000000080009L);
    assertEquals(bitVector.getRegister(9),15);
    hll.addRaw(0x000000000003000AL);
    assertEquals(bitVector.getRegister(10),13);
    hll.addRaw(0x000000000011000BL);
    assertEquals(bitVector.getRegister(11),13);
  }
{
    final int regwidth=5;
    final HLL hll=new HLL(log2m,regwidth,128,256,HLLType.FULL);
    final BitVector bitVector=hll.probabilisticStorage;
    hll.addRaw(0x0000000000000001L);
    assertEquals(bitVector.getRegister(1),0);
    hll.addRaw(0x0000000000000012L);
    assertEquals(bitVector.getRegister(2),1);
    hll.addRaw(0x0000000000000023L);
    assertEquals(bitVector.getRegister(3),2);
    hll.addRaw(0x0000000000000044L);
    assertEquals(bitVector.getRegister(4),3);
    hll.addRaw(0x0000000000000085L);
    assertEquals(bitVector.getRegister(5),4);
    hll.addRaw(0x0000000100000006L);
    assertEquals(bitVector.getRegister(6),29);
    hll.addRaw(0x0000000200000007L);
    assertEquals(bitVector.getRegister(7),30);
    hll.addRaw(0x0000000400000008L);
    assertEquals(bitVector.getRegister(8),31);
    hll.addRaw(0x0000000800000009L);
    assertEquals(bitVector.getRegister(9),31);
  }
}
