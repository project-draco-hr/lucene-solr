{
  if (fieldType().indexOptions() == IndexOptions.NONE) {
    return null;
  }
  final FieldType.LegacyNumericType numericType=fieldType().numericType();
  if (numericType != null) {
    if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {
      reuse=new LegacyNumericTokenStream(type.numericPrecisionStep());
    }
    final LegacyNumericTokenStream nts=(LegacyNumericTokenStream)reuse;
    final Number val=(Number)fieldsData;
switch (numericType) {
case INT:
      nts.setIntValue(val.intValue());
    break;
case LONG:
  nts.setLongValue(val.longValue());
break;
case FLOAT:
nts.setFloatValue(val.floatValue());
break;
case DOUBLE:
nts.setDoubleValue(val.doubleValue());
break;
default :
throw new AssertionError("Should never get here");
}
return reuse;
}
if (!fieldType().tokenized()) {
if (stringValue() != null) {
if (!(reuse instanceof StringTokenStream)) {
reuse=new StringTokenStream();
}
((StringTokenStream)reuse).setValue(stringValue());
return reuse;
}
 else if (binaryValue() != null) {
if (!(reuse instanceof BinaryTokenStream)) {
reuse=new BinaryTokenStream();
}
((BinaryTokenStream)reuse).setValue(binaryValue());
return reuse;
}
 else {
throw new IllegalArgumentException("Non-Tokenized Fields must have a String value");
}
}
if (tokenStream != null) {
return tokenStream;
}
 else if (readerValue() != null) {
return analyzer.tokenStream(name(),readerValue());
}
 else if (stringValue() != null) {
return analyzer.tokenStream(name(),stringValue());
}
throw new IllegalArgumentException("Field must have either TokenStream, String, Reader or Number value; got " + this);
}
