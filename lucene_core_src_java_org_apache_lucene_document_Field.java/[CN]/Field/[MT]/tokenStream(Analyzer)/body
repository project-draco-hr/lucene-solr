{
  if (!fieldType().indexed()) {
    return null;
  }
  final NumericType numericType=fieldType().numericType();
  if (numericType != null) {
    if (!(internalTokenStream instanceof NumericTokenStream)) {
      internalTokenStream=new NumericTokenStream(type.numericPrecisionStep());
    }
    final NumericTokenStream nts=(NumericTokenStream)internalTokenStream;
    final Number val=(Number)fieldsData;
switch (numericType) {
case INT:
      nts.setIntValue(val.intValue());
    break;
case LONG:
  nts.setLongValue(val.longValue());
break;
case FLOAT:
nts.setFloatValue(val.floatValue());
break;
case DOUBLE:
nts.setDoubleValue(val.doubleValue());
break;
default :
throw new AssertionError("Should never get here");
}
return internalTokenStream;
}
if (!fieldType().tokenized()) {
if (stringValue() == null) {
throw new IllegalArgumentException("Non-Tokenized Fields must have a String value");
}
if (!(internalTokenStream instanceof StringTokenStream)) {
internalTokenStream=new StringTokenStream();
}
((StringTokenStream)internalTokenStream).setValue(stringValue());
return internalTokenStream;
}
if (tokenStream != null) {
return tokenStream;
}
 else if (readerValue() != null) {
return analyzer.tokenStream(name(),readerValue());
}
 else if (stringValue() != null) {
return analyzer.tokenStream(name(),stringValue());
}
throw new IllegalArgumentException("Field must have either TokenStream, String, Reader or Number value");
}
