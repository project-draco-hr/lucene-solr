{
  queue=new SegmentMergeQueue(readers.size());
  int base=0;
  for (int i=0; i < readers.size(); i++) {
    SegmentReader reader=(SegmentReader)readers.elementAt(i);
    SegmentTermEnum termEnum=(SegmentTermEnum)reader.terms();
    SegmentMergeInfo smi=new SegmentMergeInfo(base,termEnum,reader);
    base+=reader.numDocs();
    if (smi.next())     queue.put(smi);
 else     smi.close();
  }
  SegmentMergeInfo[] match=new SegmentMergeInfo[readers.size()];
  while (queue.size() > 0) {
    int matchSize=0;
    match[matchSize++]=(SegmentMergeInfo)queue.pop();
    Term term=match[0].term;
    SegmentMergeInfo top=(SegmentMergeInfo)queue.top();
    while (top != null && term.compareTo(top.term) == 0) {
      match[matchSize++]=(SegmentMergeInfo)queue.pop();
      top=(SegmentMergeInfo)queue.top();
    }
    mergeTermInfo(match,matchSize);
    while (matchSize > 0) {
      SegmentMergeInfo smi=match[--matchSize];
      if (smi.next())       queue.put(smi);
 else       smi.close();
    }
  }
}
