{
  if (!mergeDocStores) {
    final SegmentReader sr=(SegmentReader)readers.get(readers.size() - 1);
    fieldInfos=(FieldInfos)sr.fieldInfos.clone();
  }
 else {
    fieldInfos=new FieldInfos();
  }
  for (Iterator iter=readers.iterator(); iter.hasNext(); ) {
    IndexReader reader=(IndexReader)iter.next();
    if (reader instanceof SegmentReader) {
      SegmentReader segmentReader=(SegmentReader)reader;
      FieldInfos readerFieldInfos=segmentReader.getFieldInfos();
      int numReaderFieldInfos=readerFieldInfos.size();
      for (int j=0; j < numReaderFieldInfos; j++) {
        FieldInfo fi=readerFieldInfos.fieldInfo(j);
        fieldInfos.add(fi.name,fi.isIndexed,fi.storeTermVector,fi.storePositionWithTermVector,fi.storeOffsetWithTermVector,!reader.hasNorms(fi.name),fi.storePayloads,fi.omitTermFreqAndPositions);
      }
    }
 else {
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION_OFFSET),true,true,true,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.TERMVECTOR_WITH_POSITION),true,true,false,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.TERMVECTOR_WITH_OFFSET),true,false,true,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.TERMVECTOR),true,false,false,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.OMIT_TERM_FREQ_AND_POSITIONS),false,false,false,false,true);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.STORES_PAYLOADS),false,false,false,true,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(FieldOption.INDEXED),false,false,false,false,false);
      fieldInfos.add(reader.getFieldNames(FieldOption.UNINDEXED),false);
    }
  }
  fieldInfos.write(directory,segment + ".fnm");
  int docCount=0;
  setMatchingSegmentReaders();
  if (mergeDocStores) {
    FieldSelector fieldSelectorMerge=new FieldSelector(){
      public FieldSelectorResult accept(      String fieldName){
        return FieldSelectorResult.LOAD_FOR_MERGE;
      }
    }
;
    final FieldsWriter fieldsWriter=new FieldsWriter(directory,segment,fieldInfos);
    try {
      int idx=0;
      for (Iterator iter=readers.iterator(); iter.hasNext(); ) {
        final IndexReader reader=(IndexReader)iter.next();
        final SegmentReader matchingSegmentReader=matchingSegmentReaders[idx++];
        FieldsReader matchingFieldsReader=null;
        if (matchingSegmentReader != null) {
          final FieldsReader fieldsReader=matchingSegmentReader.getFieldsReader();
          if (fieldsReader != null && fieldsReader.canReadRawDocs()) {
            matchingFieldsReader=fieldsReader;
          }
        }
        if (reader.hasDeletions()) {
          docCount+=copyFieldsWithDeletions(fieldSelectorMerge,fieldsWriter,reader,matchingFieldsReader);
        }
 else {
          docCount+=copyFieldsNoDeletions(fieldSelectorMerge,fieldsWriter,reader,matchingFieldsReader);
        }
      }
    }
  finally {
      fieldsWriter.close();
    }
    final long fdxFileLength=directory.fileLength(segment + "." + IndexFileNames.FIELDS_INDEX_EXTENSION);
    if (4 + ((long)docCount) * 8 != fdxFileLength)     throw new RuntimeException("mergeFields produced an invalid result: docCount is " + docCount + " but fdx file size is "+ fdxFileLength+ "; now aborting this merge to prevent index corruption");
  }
 else   for (Iterator iter=readers.iterator(); iter.hasNext(); ) {
    docCount+=((IndexReader)iter.next()).numDocs();
  }
  return docCount;
}
