{
  if (!mergeDocStores) {
    final SegmentReader sr=(SegmentReader)readers.elementAt(readers.size() - 1);
    fieldInfos=(FieldInfos)sr.fieldInfos.clone();
  }
 else {
    fieldInfos=new FieldInfos();
  }
  for (int i=0; i < readers.size(); i++) {
    IndexReader reader=(IndexReader)readers.elementAt(i);
    if (reader instanceof SegmentReader) {
      SegmentReader segmentReader=(SegmentReader)reader;
      for (int j=0; j < segmentReader.getFieldInfos().size(); j++) {
        FieldInfo fi=segmentReader.getFieldInfos().fieldInfo(j);
        fieldInfos.add(fi.name,fi.isIndexed,fi.storeTermVector,fi.storePositionWithTermVector,fi.storeOffsetWithTermVector,!reader.hasNorms(fi.name),fi.storePayloads);
      }
    }
 else {
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET),true,true,true,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION),true,true,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET),true,false,true,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR),true,false,false,false);
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS),false,false,false,true);
      addIndexed(reader,fieldInfos,reader.getFieldNames(IndexReader.FieldOption.INDEXED),false,false,false,false);
      fieldInfos.add(reader.getFieldNames(IndexReader.FieldOption.UNINDEXED),false);
    }
  }
  fieldInfos.write(directory,segment + ".fnm");
  int docCount=0;
  if (mergeDocStores) {
    SegmentReader[] matchingSegmentReaders=new SegmentReader[readers.size()];
    for (int i=0; i < readers.size(); i++) {
      IndexReader reader=(IndexReader)readers.elementAt(i);
      if (reader instanceof SegmentReader) {
        SegmentReader segmentReader=(SegmentReader)reader;
        boolean same=true;
        FieldInfos segmentFieldInfos=segmentReader.getFieldInfos();
        for (int j=0; same && j < segmentFieldInfos.size(); j++)         same=fieldInfos.fieldName(j).equals(segmentFieldInfos.fieldName(j));
        if (same) {
          matchingSegmentReaders[i]=segmentReader;
        }
      }
    }
    final int[] rawDocLengths=new int[MAX_RAW_MERGE_DOCS];
    FieldSelector fieldSelectorMerge=new FieldSelector(){
      public FieldSelectorResult accept(      String fieldName){
        return FieldSelectorResult.LOAD_FOR_MERGE;
      }
    }
;
    final FieldsWriter fieldsWriter=new FieldsWriter(directory,segment,fieldInfos);
    try {
      for (int i=0; i < readers.size(); i++) {
        final IndexReader reader=(IndexReader)readers.elementAt(i);
        final SegmentReader matchingSegmentReader=matchingSegmentReaders[i];
        final FieldsReader matchingFieldsReader;
        if (matchingSegmentReader != null)         matchingFieldsReader=matchingSegmentReader.getFieldsReader();
 else         matchingFieldsReader=null;
        final int maxDoc=reader.maxDoc();
        for (int j=0; j < maxDoc; ) {
          if (!reader.isDeleted(j)) {
            if (matchingSegmentReader != null) {
              int start=j;
              int numDocs=0;
              do {
                j++;
                numDocs++;
              }
 while (j < maxDoc && !matchingSegmentReader.isDeleted(j) && numDocs < MAX_RAW_MERGE_DOCS);
              IndexInput stream=matchingFieldsReader.rawDocs(rawDocLengths,start,numDocs);
              fieldsWriter.addRawDocuments(stream,rawDocLengths,numDocs);
              docCount+=numDocs;
              if (checkAbort != null)               checkAbort.work(300 * numDocs);
            }
 else {
              fieldsWriter.addDocument(reader.document(j,fieldSelectorMerge));
              j++;
              docCount++;
              if (checkAbort != null)               checkAbort.work(300);
            }
          }
 else           j++;
        }
      }
    }
  finally {
      fieldsWriter.close();
    }
  }
 else   for (int i=0; i < readers.size(); i++)   docCount+=((IndexReader)readers.elementAt(i)).numDocs();
  return docCount;
}
