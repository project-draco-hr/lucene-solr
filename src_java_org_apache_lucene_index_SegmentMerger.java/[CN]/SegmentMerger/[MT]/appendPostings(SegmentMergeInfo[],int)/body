{
  int lastDoc=0;
  int df=0;
  skipListWriter.resetSkip();
  boolean storePayloads=fieldInfos.fieldInfo(smis[0].term.field).storePayloads;
  int lastPayloadLength=-1;
  for (int i=0; i < n; i++) {
    SegmentMergeInfo smi=smis[i];
    TermPositions postings=smi.getPositions();
    int base=smi.base;
    int[] docMap=smi.getDocMap();
    postings.seek(smi.termEnum);
    while (postings.next()) {
      int doc=postings.doc();
      if (docMap != null)       doc=docMap[doc];
      doc+=base;
      if (doc < 0 || (df > 0 && doc <= lastDoc))       throw new CorruptIndexException("docs out of order (" + doc + " <= "+ lastDoc+ " )");
      df++;
      if ((df % skipInterval) == 0) {
        skipListWriter.setSkipData(lastDoc,storePayloads,lastPayloadLength);
        skipListWriter.bufferSkip(df);
      }
      int docCode=(doc - lastDoc) << 1;
      lastDoc=doc;
      int freq=postings.freq();
      if (freq == 1) {
        freqOutput.writeVInt(docCode | 1);
      }
 else {
        freqOutput.writeVInt(docCode);
        freqOutput.writeVInt(freq);
      }
      int lastPosition=0;
      for (int j=0; j < freq; j++) {
        int position=postings.nextPosition();
        int delta=position - lastPosition;
        if (storePayloads) {
          int payloadLength=postings.getPayloadLength();
          if (payloadLength == lastPayloadLength) {
            proxOutput.writeVInt(delta * 2);
          }
 else {
            proxOutput.writeVInt(delta * 2 + 1);
            proxOutput.writeVInt(payloadLength);
            lastPayloadLength=payloadLength;
          }
          if (payloadLength > 0) {
            if (payloadBuffer == null || payloadBuffer.length < payloadLength) {
              payloadBuffer=new byte[payloadLength];
            }
            postings.getPayload(payloadBuffer,0);
            proxOutput.writeBytes(payloadBuffer,0,payloadLength);
          }
        }
 else {
          proxOutput.writeVInt(delta);
        }
        lastPosition=position;
      }
    }
  }
  return df;
}
