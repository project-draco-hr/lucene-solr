{
  int lastDoc=0;
  int df=0;
  for (int i=0; i < n; i++) {
    SegmentMergeInfo smi=smis[i];
    SegmentTermPositions postings=smi.postings;
    int base=smi.base;
    int[] docMap=smi.docMap;
    smi.termEnum.termInfo(termInfo);
    postings.seek(termInfo);
    while (postings.next()) {
      int doc;
      if (docMap == null)       doc=base + postings.doc;
 else       doc=base + docMap[postings.doc];
      if (doc < lastDoc)       throw new IllegalStateException("docs out of order");
      int docCode=(doc - lastDoc) << 1;
      lastDoc=doc;
      int freq=postings.freq;
      if (freq == 1) {
        freqOutput.writeVInt(docCode | 1);
      }
 else {
        freqOutput.writeVInt(docCode);
        freqOutput.writeVInt(freq);
      }
      int lastPosition=0;
      for (int j=0; j < freq; j++) {
        int position=postings.nextPosition();
        proxOutput.writeVInt(position - lastPosition);
        lastPosition=position;
      }
      df++;
    }
  }
  return df;
}
