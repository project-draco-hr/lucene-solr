{
  int lastDoc=0;
  int df=0;
  resetSkip();
  for (int i=0; i < n; i++) {
    SegmentMergeInfo smi=smis[i];
    TermPositions postings=smi.getPositions();
    int base=smi.base;
    int[] docMap=smi.getDocMap();
    postings.seek(smi.termEnum);
    while (postings.next()) {
      int doc=postings.doc();
      if (docMap != null)       doc=docMap[doc];
      doc+=base;
      if (doc < 0 || (df > 0 && doc <= lastDoc))       throw new IllegalStateException("docs out of order (" + doc + " <= "+ lastDoc+ " )");
      df++;
      if ((df % skipInterval) == 0) {
        bufferSkip(lastDoc);
      }
      int docCode=(doc - lastDoc) << 1;
      lastDoc=doc;
      int freq=postings.freq();
      if (freq == 1) {
        freqOutput.writeVInt(docCode | 1);
      }
 else {
        freqOutput.writeVInt(docCode);
        freqOutput.writeVInt(freq);
      }
      int lastPosition=0;
      for (int j=0; j < freq; j++) {
        int position=postings.nextPosition();
        proxOutput.writeVInt(position - lastPosition);
        lastPosition=position;
      }
    }
  }
  return df;
}
