def processQueryDocFeatureVector(self, docClickInfo, trainingFile):
    'Expects as input a sorted by queries list or generator that provides the context \n        for each query in a tuple composed of: (query , docId , relevance , source , featureVector).\n        The list of documents that are part of the same query will generate comparisons\n        against each other for training. '
    curQueryAndSource = ''
    with open(trainingFile, 'w') as output:
        self.featureNameToId = {}
        self.featureIdToName = {}
        self.curFeatIndex = 1
        curListOfFv = []
        for (query, docId, relevance, source, featureVector) in docClickInfo:
            if (curQueryAndSource != (query + source)):
                _writeRankSVMPairs(curListOfFv, output)
                curListOfFv = []
                curQueryAndSource = (query + source)
            curListOfFv.append((relevance, self._makeFeaturesMap(featureVector)))
        _writeRankSVMPairs(curListOfFv, output)
