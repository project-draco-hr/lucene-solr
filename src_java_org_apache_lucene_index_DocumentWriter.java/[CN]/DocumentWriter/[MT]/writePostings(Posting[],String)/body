{
  IndexOutput freq=null, prox=null;
  TermInfosWriter tis=null;
  TermVectorsWriter termVectorWriter=null;
  try {
    freq=directory.createOutput(segment + ".frq");
    prox=directory.createOutput(segment + ".prx");
    tis=new TermInfosWriter(directory,segment,fieldInfos,termIndexInterval);
    TermInfo ti=new TermInfo();
    String currentField=null;
    boolean currentFieldHasPayloads=false;
    for (int i=0; i < postings.length; i++) {
      Posting posting=postings[i];
      String termField=posting.term.field();
      if (currentField != termField) {
        currentField=termField;
        FieldInfo fi=fieldInfos.fieldInfo(currentField);
        currentFieldHasPayloads=fi.storePayloads;
        if (fi.storeTermVector) {
          if (termVectorWriter == null) {
            termVectorWriter=new TermVectorsWriter(directory,segment,fieldInfos);
            termVectorWriter.openDocument();
          }
          termVectorWriter.openField(currentField);
        }
 else         if (termVectorWriter != null) {
          termVectorWriter.closeField();
        }
      }
      ti.set(1,freq.getFilePointer(),prox.getFilePointer(),-1);
      tis.add(posting.term,ti);
      int postingFreq=posting.freq;
      if (postingFreq == 1)       freq.writeVInt(1);
 else {
        freq.writeVInt(0);
        freq.writeVInt(postingFreq);
      }
      int lastPosition=0;
      int[] positions=posting.positions;
      Payload[] payloads=posting.payloads;
      int lastPayloadLength=-1;
      for (int j=0; j < postingFreq; j++) {
        int position=positions[j];
        int delta=position - lastPosition;
        if (currentFieldHasPayloads) {
          int payloadLength=0;
          Payload payload=null;
          if (payloads != null) {
            payload=payloads[j];
            if (payload != null) {
              payloadLength=payload.length;
            }
          }
          if (payloadLength == lastPayloadLength) {
            prox.writeVInt(delta * 2);
          }
 else {
            prox.writeVInt(delta * 2 + 1);
            prox.writeVInt(payloadLength);
            lastPayloadLength=payloadLength;
          }
          if (payloadLength > 0) {
            prox.writeBytes(payload.data,payload.offset,payload.length);
          }
        }
 else {
          prox.writeVInt(delta);
        }
        lastPosition=position;
      }
      if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {
        termVectorWriter.addTerm(posting.term.text(),postingFreq,posting.positions,posting.offsets);
      }
    }
    if (termVectorWriter != null)     termVectorWriter.closeDocument();
  }
  finally {
    IOException keep=null;
    if (freq != null)     try {
      freq.close();
    }
 catch (    IOException e) {
      if (keep == null)       keep=e;
    }
    if (prox != null)     try {
      prox.close();
    }
 catch (    IOException e) {
      if (keep == null)       keep=e;
    }
    if (tis != null)     try {
      tis.close();
    }
 catch (    IOException e) {
      if (keep == null)       keep=e;
    }
    if (termVectorWriter != null)     try {
      termVectorWriter.close();
    }
 catch (    IOException e) {
      if (keep == null)       keep=e;
    }
    if (keep != null)     throw (IOException)keep.fillInStackTrace();
  }
}
