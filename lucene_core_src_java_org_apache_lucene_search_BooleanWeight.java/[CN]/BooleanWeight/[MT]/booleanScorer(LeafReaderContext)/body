{
  final int numOptionalClauses=query.getClauses(Occur.SHOULD).size();
  final int numRequiredClauses=query.getClauses(Occur.MUST).size() + query.getClauses(Occur.FILTER).size();
  BulkScorer positiveScorer;
  if (numRequiredClauses == 0) {
    positiveScorer=optionalBulkScorer(context);
    if (positiveScorer == null) {
      return null;
    }
    final long costThreshold;
    if (query.getMinimumNumberShouldMatch() <= 1) {
      costThreshold=-1;
    }
 else {
      costThreshold=context.reader().maxDoc() / 3;
    }
    if (positiveScorer.cost() < costThreshold) {
      return null;
    }
  }
 else   if (numRequiredClauses == 1 && numOptionalClauses == 0 && query.getMinimumNumberShouldMatch() == 0) {
    positiveScorer=requiredBulkScorer(context);
  }
 else {
    return null;
  }
  if (positiveScorer == null) {
    return null;
  }
  List<Scorer> prohibited=new ArrayList<>();
  Iterator<BooleanClause> cIter=query.iterator();
  for (  Weight w : weights) {
    BooleanClause c=cIter.next();
    if (c.isProhibited()) {
      Scorer scorer=w.scorer(context);
      if (scorer != null) {
        prohibited.add(scorer);
      }
    }
  }
  if (prohibited.isEmpty()) {
    return positiveScorer;
  }
 else {
    Scorer prohibitedScorer=opt(prohibited,1,true);
    if (prohibitedScorer.twoPhaseIterator() != null) {
      return null;
    }
    return new ReqExclBulkScorer(positiveScorer,prohibitedScorer.iterator());
  }
}
