{
  if (required.size() == 1) {
    Scorer req=required.get(0);
    if (needsScores == false) {
      return req;
    }
    if (requiredScoring.isEmpty()) {
      return new FilterScorer(req){
        @Override public float score() throws IOException {
          return 0f;
        }
        @Override public int freq() throws IOException {
          return 0;
        }
      }
;
    }
    float boost=1f;
    if (disableCoord == false) {
      boost=coord(1,maxCoord);
    }
    if (boost == 1f) {
      return req;
    }
    return new BooleanTopLevelScorers.BoostedScorer(req,boost);
  }
 else {
    return new ConjunctionScorer(this,required,requiredScoring,disableCoord ? 1.0F : coord(requiredScoring.size(),maxCoord));
  }
}
