{
  super();
  this.skipInterval=skipInterval;
  this.skipMinimum=skipInterval;
  String fileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene40PostingsFormat.FREQ_EXTENSION);
  freqOut=state.directory.createOutput(fileName,state.context);
  boolean success=false;
  IndexOutput proxOut=null;
  try {
    CodecUtil.writeHeader(freqOut,FRQ_CODEC,VERSION_CURRENT);
    if (state.fieldInfos.hasProx()) {
      fileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene40PostingsFormat.PROX_EXTENSION);
      proxOut=state.directory.createOutput(fileName,state.context);
      CodecUtil.writeHeader(proxOut,PRX_CODEC,VERSION_CURRENT);
    }
 else {
      proxOut=null;
    }
    this.proxOut=proxOut;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(freqOut,proxOut);
    }
  }
  totalNumDocs=state.segmentInfo.getDocCount();
  skipListWriter=new Lucene40SkipListWriter(skipInterval,maxSkipLevels,totalNumDocs,freqOut,proxOut);
}
