{
  boolean overshard=random().nextBoolean();
  int rep;
  int nShards;
  int maxReplicasPerNode;
  if (overshard) {
    nShards=shardCount * 2;
    maxReplicasPerNode=8;
    rep=1;
  }
 else {
    nShards=shardCount / 2;
    maxReplicasPerNode=1;
    rep=2;
    if (nShards == 0)     nShards=1;
  }
  createCollection(DELETE_DATA_DIR_COLLECTION,nShards,rep,maxReplicasPerNode);
  waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION,false);
  cloudClient.setDefaultCollection(DELETE_DATA_DIR_COLLECTION);
  cloudClient.getZkStateReader().updateClusterState(true);
  for (int i=1; i < nShards + 1; i++) {
    cloudClient.getZkStateReader().getLeaderRetry(DELETE_DATA_DIR_COLLECTION,"shard" + i,30000);
  }
  List<String> dataDirs=new ArrayList<String>();
  int i=0;
  for (  SolrServer client : clients) {
    HttpSolrServer c=new HttpSolrServer(getBaseUrl(client) + "/delete_data_dir");
    try {
      c.add(getDoc("id",i++));
      if (random().nextBoolean())       c.add(getDoc("id",i++));
      if (random().nextBoolean())       c.add(getDoc("id",i++));
      if (random().nextBoolean()) {
        c.commit();
      }
 else {
        c.commit(true,true,true);
      }
      c.query(new SolrQuery("id:" + i));
      c.setConnectionTimeout(30000);
      NamedList<Object> response=c.query(new SolrQuery().setRequestHandler("/admin/system")).getResponse();
      NamedList<Object> coreInfo=(NamedList<Object>)response.get("core");
      String dataDir=(String)((NamedList<Object>)coreInfo.get("directory")).get("data");
      dataDirs.add(dataDir);
    }
  finally {
      c.shutdown();
    }
  }
  if (random().nextBoolean()) {
    cloudClient.deleteByQuery("*:*");
    cloudClient.commit();
    assertEquals(0,cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  }
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set("name",DELETE_DATA_DIR_COLLECTION);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  cloudClient.request(request);
  long timeout=System.currentTimeMillis() + 10000;
  while (cloudClient.getZkStateReader().getClusterState().hasCollection(DELETE_DATA_DIR_COLLECTION)) {
    if (System.currentTimeMillis() > timeout) {
      throw new AssertionError("Timeout waiting to see removed collection leave clusterstate");
    }
    Thread.sleep(200);
    cloudClient.getZkStateReader().updateClusterState(true);
  }
  for (  String dataDir : dataDirs) {
    Configuration conf=new Configuration();
    FileSystem fs=FileSystem.newInstance(new URI(dataDir),conf);
    assertFalse("Data directory exists after collection removal : " + dataDir,fs.exists(new Path(dataDir)));
    fs.close();
  }
}
