{
  boolean overshard=random().nextBoolean();
  int rep;
  int nShards;
  int maxReplicasPerNode;
  if (overshard) {
    nShards=getShardCount() * 2;
    maxReplicasPerNode=8;
    rep=1;
  }
 else {
    nShards=getShardCount() / 2;
    maxReplicasPerNode=1;
    rep=2;
    if (nShards == 0)     nShards=1;
  }
  createCollection(DELETE_DATA_DIR_COLLECTION,nShards,rep,maxReplicasPerNode);
  waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION,false);
  cloudClient.setDefaultCollection(DELETE_DATA_DIR_COLLECTION);
  cloudClient.getZkStateReader().updateClusterState(true);
  for (int i=1; i < nShards + 1; i++) {
    cloudClient.getZkStateReader().getLeaderRetry(DELETE_DATA_DIR_COLLECTION,"shard" + i,30000);
  }
  List<String> dataDirs=new ArrayList<>();
  int i=0;
  for (  SolrClient client : clients) {
    try (HttpSolrClient c=new HttpSolrClient(getBaseUrl(client) + "/" + DELETE_DATA_DIR_COLLECTION)){
      int docCnt=random().nextInt(1000) + 1;
      for (int j=0; j < docCnt; j++) {
        c.add(getDoc("id",i++,"txt_t","just some random text for a doc"));
      }
      if (random().nextBoolean()) {
        c.commit();
      }
 else {
        c.commit(true,true,true);
      }
      c.setConnectionTimeout(30000);
      NamedList<Object> response=c.query(new SolrQuery().setRequestHandler("/admin/system")).getResponse();
      NamedList<Object> coreInfo=(NamedList<Object>)response.get("core");
      String dataDir=(String)((NamedList<Object>)coreInfo.get("directory")).get("data");
      dataDirs.add(dataDir);
    }
   }
  if (random().nextBoolean()) {
    cloudClient.deleteByQuery("*:*");
    cloudClient.commit();
    assertEquals(0,cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  }
  cloudClient.commit();
  cloudClient.query(new SolrQuery("*:*"));
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set("name",DELETE_DATA_DIR_COLLECTION);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  cloudClient.request(request);
  long timeout=System.currentTimeMillis() + 10000;
  while (cloudClient.getZkStateReader().getClusterState().hasCollection(DELETE_DATA_DIR_COLLECTION)) {
    if (System.currentTimeMillis() > timeout) {
      throw new AssertionError("Timeout waiting to see removed collection leave clusterstate");
    }
    Thread.sleep(200);
    cloudClient.getZkStateReader().updateClusterState(true);
  }
  for (  String dataDir : dataDirs) {
    Configuration conf=HdfsTestUtil.getClientConfiguration(dfsCluster);
    conf.setBoolean("fs.hdfs.impl.disable.cache",true);
    FileSystem fs=FileSystem.get(new URI(HdfsTestUtil.getURI(dfsCluster)),conf);
    assertFalse("Data directory exists after collection removal : " + dataDir,fs.exists(new Path(dataDir)));
    fs.close();
  }
}
