{
  int reads=random.nextInt(MAX_NUMBER_OF_READS);
  IndexInput fsInput=fsDir.openInput(name,new IOContext());
  IndexInput hdfsInput=hdfs.openInput(name,new IOContext());
  assertEquals(fsInput.length(),hdfsInput.length());
  int fileLength=(int)fsInput.length();
  for (int i=0; i < reads; i++) {
    int nextInt=Math.min(MAX_BUFFER_SIZE - MIN_BUFFER_SIZE,fileLength);
    byte[] fsBuf=new byte[random.nextInt(nextInt > 0 ? nextInt : 1) + MIN_BUFFER_SIZE];
    byte[] hdfsBuf=new byte[fsBuf.length];
    int offset=random.nextInt(fsBuf.length);
    nextInt=fsBuf.length - offset;
    int length=random.nextInt(nextInt > 0 ? nextInt : 1);
    nextInt=fileLength - length;
    int pos=random.nextInt(nextInt > 0 ? nextInt : 1);
    fsInput.seek(pos);
    fsInput.readBytes(fsBuf,offset,length);
    hdfsInput.seek(pos);
    hdfsInput.readBytes(hdfsBuf,offset,length);
    for (int f=offset; f < length; f++) {
      if (fsBuf[f] != hdfsBuf[f]) {
        fail();
      }
    }
  }
  fsInput.close();
  hdfsInput.close();
}
