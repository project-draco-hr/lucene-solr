{
  Directory indexStoreA=new MockRAMDirectory();
  Directory indexStoreB=new MockRAMDirectory();
  Document lDoc=new Document();
  lDoc.add(new Field("fulltext","Once upon a time.....",Field.Store.YES,Field.Index.TOKENIZED));
  lDoc.add(new Field("id","doc1",Field.Store.YES,Field.Index.UN_TOKENIZED));
  lDoc.add(new Field("handle","1",Field.Store.YES,Field.Index.UN_TOKENIZED));
  Document lDoc2=new Document();
  lDoc2.add(new Field("fulltext","in a galaxy far far away.....",Field.Store.YES,Field.Index.TOKENIZED));
  lDoc2.add(new Field("id","doc2",Field.Store.YES,Field.Index.UN_TOKENIZED));
  lDoc2.add(new Field("handle","1",Field.Store.YES,Field.Index.UN_TOKENIZED));
  Document lDoc3=new Document();
  lDoc3.add(new Field("fulltext","a bizarre bug manifested itself....",Field.Store.YES,Field.Index.TOKENIZED));
  lDoc3.add(new Field("id","doc3",Field.Store.YES,Field.Index.UN_TOKENIZED));
  lDoc3.add(new Field("handle","1",Field.Store.YES,Field.Index.UN_TOKENIZED));
  IndexWriter writerA=new IndexWriter(indexStoreA,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED);
  IndexWriter writerB=new IndexWriter(indexStoreB,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED);
  writerA.addDocument(lDoc);
  writerA.addDocument(lDoc2);
  writerA.addDocument(lDoc3);
  writerA.optimize();
  writerA.close();
  writerB.close();
  QueryParser parser=new QueryParser("fulltext",new StandardAnalyzer());
  Query query=parser.parse("handle:1");
  Searcher[] searchers=new Searcher[2];
  searchers[0]=new IndexSearcher(indexStoreB);
  searchers[1]=new IndexSearcher(indexStoreA);
  Searcher mSearcher=getMultiSearcherInstance(searchers);
  Hits hits=mSearcher.search(query);
  assertEquals(3,hits.length());
  for (int i=0; i < hits.length(); i++) {
    Document d=hits.doc(i);
  }
  mSearcher.close();
  writerB=new IndexWriter(indexStoreB,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED);
  writerB.addDocument(lDoc);
  writerB.optimize();
  writerB.close();
  Searcher[] searchers2=new Searcher[2];
  searchers2[0]=new IndexSearcher(indexStoreB);
  searchers2[1]=new IndexSearcher(indexStoreA);
  MultiSearcher mSearcher2=getMultiSearcherInstance(searchers2);
  Hits hits2=mSearcher2.search(query);
  assertEquals(4,hits2.length());
  for (int i=0; i < hits2.length(); i++) {
    Document d=hits2.doc(i);
  }
  Query subSearcherQuery=parser.parse("id:doc1");
  hits2=mSearcher2.search(subSearcherQuery);
  assertEquals(2,hits2.length());
  assertEquals(0,mSearcher2.subSearcher(hits2.id(0)));
  assertEquals(1,mSearcher2.subSearcher(hits2.id(1)));
  subSearcherQuery=parser.parse("id:doc2");
  hits2=mSearcher2.search(subSearcherQuery);
  assertEquals(1,hits2.length());
  assertEquals(1,mSearcher2.subSearcher(hits2.id(0)));
  mSearcher2.close();
  Term term=new Term("id","doc1");
  IndexReader readerB=IndexReader.open(indexStoreB);
  readerB.deleteDocuments(term);
  readerB.close();
  writerB=new IndexWriter(indexStoreB,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED);
  writerB.optimize();
  writerB.close();
  Searcher[] searchers3=new Searcher[2];
  searchers3[0]=new IndexSearcher(indexStoreB);
  searchers3[1]=new IndexSearcher(indexStoreA);
  Searcher mSearcher3=getMultiSearcherInstance(searchers3);
  Hits hits3=mSearcher3.search(query);
  assertEquals(3,hits3.length());
  for (int i=0; i < hits3.length(); i++) {
    Document d=hits3.doc(i);
  }
  mSearcher3.close();
  indexStoreA.close();
  indexStoreB.close();
}
