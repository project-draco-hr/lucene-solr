{
  super.init(schema,args);
  String implName=args.get(PARSER_IMPL);
  if (implName == null) {
    parser=new JsonPreAnalyzedParser();
  }
 else {
    if ("json".equalsIgnoreCase(implName)) {
      parser=new JsonPreAnalyzedParser();
    }
 else     if ("simple".equalsIgnoreCase(implName)) {
      parser=new SimplePreAnalyzedParser();
    }
 else {
      try {
        Class<? extends PreAnalyzedParser> implClazz=schema.getResourceLoader().findClass(implName,PreAnalyzedParser.class);
        Constructor<?> c=implClazz.getConstructor(new Class<?>[0]);
        parser=(PreAnalyzedParser)c.newInstance(new Object[0]);
      }
 catch (      Exception e) {
        LOG.warn("Can't use the configured PreAnalyzedParser class '" + implName + "', using default "+ DEFAULT_IMPL,e);
        parser=new JsonPreAnalyzedParser();
      }
    }
  }
}
