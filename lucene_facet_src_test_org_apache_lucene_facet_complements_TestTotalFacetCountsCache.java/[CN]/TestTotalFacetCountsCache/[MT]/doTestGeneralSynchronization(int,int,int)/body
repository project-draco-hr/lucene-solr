{
  TFC.setCacheSize(cacheSize);
  SlowRAMDirectory slowIndexDir=new SlowRAMDirectory(-1,random());
  MockDirectoryWrapper indexDir=new MockDirectoryWrapper(random(),slowIndexDir);
  SlowRAMDirectory slowTaxoDir=new SlowRAMDirectory(-1,random());
  MockDirectoryWrapper taxoDir=new MockDirectoryWrapper(random(),slowTaxoDir);
  index(indexDir,taxoDir);
  slowIndexDir.setSleepMillis(sleepMillis);
  slowTaxoDir.setSleepMillis(sleepMillis);
  IndexReader slowIndexReader=DirectoryReader.open(indexDir);
  TaxonomyReader slowTaxoReader=new DirectoryTaxonomyReader(taxoDir);
class Multi extends Thread {
    private List<FacetResult> results;
    private FacetIndexingParams iParams;
    private IndexReader indexReader;
    private TaxonomyReader taxoReader;
    public Multi(    IndexReader indexReader,    TaxonomyReader taxoReader,    FacetIndexingParams iParams){
      this.indexReader=indexReader;
      this.taxoReader=taxoReader;
      this.iParams=iParams;
    }
    public List<FacetResult> getResults(){
      return results;
    }
    @Override public void run(){
      try {
        FacetSearchParams fsp=new FacetSearchParams(iParams,new CountFacetRequest(new CategoryPath("a"),10),new CountFacetRequest(new CategoryPath("b"),10));
        IndexSearcher searcher=new IndexSearcher(indexReader);
        FacetsCollector fc=FacetsCollector.create(fsp,indexReader,taxoReader);
        searcher.search(new MatchAllDocsQuery(),fc);
        results=fc.getFacetResults();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  Multi[] multis=new Multi[numThreads];
  for (int i=0; i < numThreads; i++) {
    multis[i]=new Multi(slowIndexReader,slowTaxoReader,FacetIndexingParams.DEFAULT);
  }
  for (  Multi m : multis) {
    m.start();
  }
  String[] expLabelsA=new String[]{"a/d","a/e","a/b"};
  String[] expLabelsB=new String[]{"b/c","b/a"};
  for (  Multi m : multis) {
    m.join();
    List<FacetResult> facetResults=m.getResults();
    assertEquals("expected two results",2,facetResults.size());
    FacetResultNode nodeA=facetResults.get(0).getFacetResultNode();
    int i=0;
    for (    FacetResultNode node : nodeA.subResults) {
      assertEquals("wrong count",1,(int)node.value);
      assertEquals(expLabelsA[i++],node.label.toString('/'));
    }
    FacetResultNode nodeB=facetResults.get(1).getFacetResultNode();
    i=0;
    for (    FacetResultNode node : nodeB.subResults) {
      assertEquals("wrong count",1,(int)node.value);
      assertEquals(expLabelsB[i++],node.label.toString('/'));
    }
  }
  IOUtils.close(slowIndexReader,slowTaxoReader,indexDir,taxoDir);
}
