{
  final int numeric=bits & DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_MASK;
  if (numeric != 0) {
switch (numeric) {
case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_INT:
      visitor.intField(info,fieldsStream.readInt());
    return;
case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_LONG:
  visitor.longField(info,fieldsStream.readLong());
return;
case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:
visitor.floatField(info,Float.intBitsToFloat(fieldsStream.readInt()));
return;
case DefaultStoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:
visitor.doubleField(info,Double.longBitsToDouble(fieldsStream.readLong()));
return;
default :
throw new FieldReaderException("Invalid numeric type: " + Integer.toHexString(numeric));
}
}
 else {
final int length=fieldsStream.readVInt();
byte bytes[]=new byte[length];
fieldsStream.readBytes(bytes,0,length);
if ((bits & DefaultStoredFieldsWriter.FIELD_IS_BINARY) != 0) {
visitor.binaryField(info,bytes,0,bytes.length);
}
 else {
visitor.stringField(info,new String(bytes,0,bytes.length,UTF8));
}
}
}
