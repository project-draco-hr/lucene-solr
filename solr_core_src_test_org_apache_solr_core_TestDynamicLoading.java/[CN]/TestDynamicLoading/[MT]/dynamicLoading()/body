{
  String payload="{\n" + "'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\n" + "}";
  RestTestHarness client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","requestHandler","/test1","lib"),"test",10);
  Map map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
  assertNotNull(map=(Map)map.get("error"));
  assertEquals(".system collection not available",map.get("msg"));
  HttpSolrClient randomClient=(HttpSolrClient)clients.get(random().nextInt(clients.size()));
  String baseURL=randomClient.getBaseURL();
  baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
  TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));
  map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
  assertNotNull(map=(Map)map.get("error"));
  assertEquals("no such blob or version available: test/1",map.get("msg"));
  ByteBuffer jar=generateZip(TestDynamicLoading.class,BlobStoreTestRequestHandler.class);
  TestBlobHandler.postAndCheck(cloudClient,baseURL,jar,1);
  boolean success=false;
  for (int i=0; i < 50; i++) {
    map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
    if (BlobStoreTestRequestHandler.class.getName().equals(map.get("class"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  assertTrue(new String(ZkStateReader.toJSON(map),StandardCharsets.UTF_8),success);
  jar=generateZip(TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);
  TestBlobHandler.postAndCheck(cloudClient,baseURL,jar,2);
  payload=" {\n" + "  'set' : {'watched': {" + "                    'x':'X val',\n"+ "                    'y': 'Y val'}\n"+ "             }\n"+ "  }";
  TestSolrConfigHandler.runConfigCommand(client,"/config/params?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/params?wt=json",cloudClient,Arrays.asList("response","params","watched","x"),"X val",10);
  payload="{\n" + "'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\n" + "}";
  client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","requestHandler","/test1","version"),2l,10);
  success=false;
  for (int i=0; i < 100; i++) {
    map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
    if (BlobStoreTestRequestHandlerV2.class.getName().equals(map.get("class"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  assertTrue("New version of class is not loaded " + new String(ZkStateReader.toJSON(map),StandardCharsets.UTF_8),success);
  for (int i=0; i < 100; i++) {
    map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
    if ("X val".equals(map.get("x"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  payload=" {\n" + "  'set' : {'watched': {" + "                    'x':'X val changed',\n"+ "                    'y': 'Y val'}\n"+ "             }\n"+ "  }";
  TestSolrConfigHandler.runConfigCommand(client,"/config/params?wt=json",payload);
  for (int i=0; i < 50; i++) {
    map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
    if ("X val changed".equals(map.get("x"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  assertTrue("listener did not get triggered" + new String(ZkStateReader.toJSON(map),StandardCharsets.UTF_8),success);
}
