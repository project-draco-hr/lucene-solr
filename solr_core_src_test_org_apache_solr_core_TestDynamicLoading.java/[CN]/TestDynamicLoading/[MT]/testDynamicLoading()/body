{
  System.setProperty("enable.runtime.lib","true");
  setupHarnesses();
  String blobName="colltest";
  boolean success=false;
  HttpSolrClient randomClient=(HttpSolrClient)clients.get(random().nextInt(clients.size()));
  String baseURL=randomClient.getBaseURL();
  baseURL=baseURL.substring(0,baseURL.lastIndexOf('/'));
  String payload="{\n" + "'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\n" + "}";
  RestTestHarness client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","runtimeLib",blobName,"version"),1l,10);
  payload="{\n" + "'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\n" + "}";
  client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","requestHandler","/test1","class"),"org.apache.solr.core.BlobStoreTestRequestHandler",10);
  Map map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
  assertNotNull(TestBlobHandler.getAsString(map),map=(Map)map.get("error"));
  assertEquals(TestBlobHandler.getAsString(map),".system collection not available",map.get("msg"));
  TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL,randomClient.getHttpClient()));
  waitForRecoveriesToFinish(".system",true);
  map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
  assertNotNull(map=(Map)map.get("error"));
  assertEquals("full output " + TestBlobHandler.getAsString(map),"no such blob or version available: colltest/1",map.get("msg"));
  payload=" {\n" + "  'set' : {'watched': {" + "                    'x':'X val',\n"+ "                    'y': 'Y val'}\n"+ "             }\n"+ "  }";
  TestSolrConfigHandler.runConfigCommand(client,"/config/params?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/params?wt=json",cloudClient,Arrays.asList("response","params","watched","x"),"X val",10);
  for (int i=0; i < 100; i++) {
    map=TestSolrConfigHandler.getRespMap("/test1?wt=json",client);
    if ("X val".equals(map.get("x"))) {
      success=true;
      break;
    }
    Thread.sleep(100);
  }
  ByteBuffer jar=null;
  jar=getFileContent("runtimecode/runtimelibs.jar.bin");
  TestBlobHandler.postAndCheck(cloudClient,baseURL,blobName,jar,1);
  payload="{\n" + "'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }," + "'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },"+ "'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }"+ "}";
  client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  Map result=TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","requestHandler","/runtime","class"),"org.apache.solr.core.RuntimeLibReqHandler",10);
  compareValues(result,"org.apache.solr.core.RuntimeLibResponseWriter",asList("overlay","queryResponseWriter","json1","class"));
  compareValues(result,"org.apache.solr.core.RuntimeLibSearchComponent",asList("overlay","searchComponent","get","class"));
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/runtime?wt=json",null,Arrays.asList("class"),"org.apache.solr.core.RuntimeLibReqHandler",10);
  compareValues(result,MemClassLoader.class.getName(),asList("loader"));
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/runtime?wt=json1",null,Arrays.asList("wt"),"org.apache.solr.core.RuntimeLibResponseWriter",10);
  compareValues(result,MemClassLoader.class.getName(),asList("loader"));
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/get?abc=xyz",null,Arrays.asList("get"),"org.apache.solr.core.RuntimeLibSearchComponent",10);
  compareValues(result,MemClassLoader.class.getName(),asList("loader"));
  jar=getFileContent("runtimecode/runtimelibs_v2.jar.bin");
  TestBlobHandler.postAndCheck(cloudClient,baseURL,blobName,jar,2);
  payload="{\n" + "'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\n" + "}";
  client=restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));
  TestSolrConfigHandler.runConfigCommand(client,"/config?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/overlay?wt=json",null,Arrays.asList("overlay","runtimeLib",blobName,"version"),2l,10);
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/get?abc=xyz",null,Arrays.asList("Version"),"2",10);
  payload=" {\n" + "  'set' : {'watched': {" + "                    'x':'X val',\n"+ "                    'y': 'Y val'}\n"+ "             }\n"+ "  }";
  TestSolrConfigHandler.runConfigCommand(client,"/config/params?wt=json",payload);
  TestSolrConfigHandler.testForResponseElement(client,null,"/config/params?wt=json",cloudClient,Arrays.asList("response","params","watched","x"),"X val",10);
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/test1?wt=json",cloudClient,Arrays.asList("x"),"X val",10);
  payload=" {\n" + "  'set' : {'watched': {" + "                    'x':'X val changed',\n"+ "                    'y': 'Y val'}\n"+ "             }\n"+ "  }";
  TestSolrConfigHandler.runConfigCommand(client,"/config/params?wt=json",payload);
  result=TestSolrConfigHandler.testForResponseElement(client,null,"/test1?wt=json",cloudClient,Arrays.asList("x"),"X val changed",10);
}
