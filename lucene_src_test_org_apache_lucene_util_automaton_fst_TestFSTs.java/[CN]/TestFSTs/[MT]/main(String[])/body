{
  final String wordsFileIn=args[0];
  final String dirOut=args[1];
  int idx=2;
  int prune=0;
  int limit=Integer.MAX_VALUE;
  int inputMode=0;
  boolean storeOrds=false;
  boolean storeDocFreqs=false;
  while (idx < args.length) {
    if (args[idx].equals("-prune")) {
      prune=Integer.valueOf(args[1 + idx]);
      idx++;
    }
    if (args[idx].equals("-limit")) {
      limit=Integer.valueOf(args[1 + idx]);
      idx++;
    }
    if (args[idx].equals("-utf8")) {
      inputMode=0;
    }
    if (args[idx].equals("-utf32")) {
      inputMode=1;
    }
    if (args[idx].equals("-docFreq")) {
      storeDocFreqs=true;
    }
    if (args[idx].equals("-ords")) {
      storeOrds=true;
    }
    idx++;
  }
  if (storeOrds && storeDocFreqs) {
    final PositiveIntOutputs o1=PositiveIntOutputs.getSingleton(true);
    final PositiveIntOutputs o2=PositiveIntOutputs.getSingleton(false);
    final PairOutputs<Long,Long> outputs=new PairOutputs<Long,Long>(o1,o2);
    new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut,wordsFileIn,inputMode,prune,outputs){
      Random rand;
      @Override public PairOutputs.Pair<Long,Long> getOutput(      IntsRef input,      int ord){
        if (ord == 0) {
          rand=new Random(17);
        }
        return new PairOutputs.Pair<Long,Long>(o1.get(ord),o2.get(_TestUtil.nextInt(rand,1,5000)));
      }
    }
.run(limit);
  }
 else   if (storeOrds) {
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
    new VisitTerms<Long>(dirOut,wordsFileIn,inputMode,prune,outputs){
      @Override public Long getOutput(      IntsRef input,      int ord){
        return outputs.get(ord);
      }
    }
.run(limit);
  }
 else   if (storeDocFreqs) {
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(false);
    new VisitTerms<Long>(dirOut,wordsFileIn,inputMode,prune,outputs){
      Random rand;
      @Override public Long getOutput(      IntsRef input,      int ord){
        if (ord == 0) {
          rand=new Random(17);
        }
        return outputs.get(_TestUtil.nextInt(rand,1,5000));
      }
    }
.run(limit);
  }
 else {
    final NoOutputs outputs=NoOutputs.getSingleton();
    final Object NO_OUTPUT=outputs.getNoOutput();
    new VisitTerms<Object>(dirOut,wordsFileIn,inputMode,prune,outputs){
      @Override public Object getOutput(      IntsRef input,      int ord){
        return NO_OUTPUT;
      }
    }
.run(limit);
  }
}
