{
  String[] strings=new String[]{"station","commotion","elation","elastic","plastic","stop","ftop","ftation"};
  IntsRef[] terms=new IntsRef[strings.length];
  for (int inputMode=0; inputMode < 2; inputMode++) {
    if (VERBOSE) {
      System.out.println("TEST: inputMode=" + inputModeToString(inputMode));
    }
    for (int idx=0; idx < strings.length; idx++) {
      terms[idx]=toIntsRef(strings[idx],inputMode);
    }
    doTest(inputMode,terms);
{
      final Outputs<Object> outputs=NoOutputs.getSingleton();
      final Object NO_OUTPUT=outputs.getNoOutput();
      final List<FSTTester.InputOutput<Object>> pairs=new ArrayList<FSTTester.InputOutput<Object>>(terms.length);
      for (      IntsRef term : terms) {
        pairs.add(new FSTTester.InputOutput<Object>(term,NO_OUTPUT));
      }
      FST<Object> fst=new FSTTester<Object>(random,dir,inputMode,pairs,outputs).doTest(0,0);
      assertNotNull(fst);
      assertEquals(22,fst.getNodeCount());
      assertEquals(27,fst.getArcCount());
    }
{
      final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
      final List<FSTTester.InputOutput<Long>> pairs=new ArrayList<FSTTester.InputOutput<Long>>(terms.length);
      for (int idx=0; idx < terms.length; idx++) {
        pairs.add(new FSTTester.InputOutput<Long>(terms[idx],outputs.get(idx)));
      }
      final FST<Long> fst=new FSTTester<Long>(random,dir,inputMode,pairs,outputs).doTest(0,0);
      assertNotNull(fst);
      assertEquals(22,fst.getNodeCount());
      assertEquals(27,fst.getArcCount());
    }
{
      final ByteSequenceOutputs outputs=ByteSequenceOutputs.getSingleton();
      final BytesRef NO_OUTPUT=outputs.getNoOutput();
      final List<FSTTester.InputOutput<BytesRef>> pairs=new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);
      for (int idx=0; idx < terms.length; idx++) {
        final BytesRef output=random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));
        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx],output));
      }
      final FST<BytesRef> fst=new FSTTester<BytesRef>(random,dir,inputMode,pairs,outputs).doTest(0,0);
      assertNotNull(fst);
      assertEquals(24,fst.getNodeCount());
      assertEquals(30,fst.getArcCount());
    }
  }
}
