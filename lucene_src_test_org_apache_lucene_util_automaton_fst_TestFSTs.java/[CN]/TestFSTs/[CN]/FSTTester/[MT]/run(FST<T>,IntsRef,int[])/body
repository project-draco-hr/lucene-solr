{
  if (term.length == 0) {
    final T output=fst.getEmptyOutput();
    if (stopNode != null) {
      stopNode[1]=0;
      if (output != null) {
        stopNode[0]=-1;
      }
 else {
        stopNode[0]=fst.getStartNode();
      }
    }
    return output;
  }
  final FST.Arc<T> arc=new FST.Arc<T>();
  int node=fst.getStartNode();
  int lastNode=-1;
  T output=fst.outputs.getNoOutput();
  for (int i=0; i < term.length; i++) {
    if (!fst.hasArcs(node)) {
      if (stopNode != null) {
        stopNode[0]=lastNode;
        stopNode[1]=i - 1;
        return output;
      }
 else {
        return null;
      }
    }
    if (fst.findArc(node,term.ints[term.offset + i],arc) != null) {
      node=arc.target;
      if (arc.output != fst.outputs.getNoOutput()) {
        output=fst.outputs.add(output,arc.output);
      }
    }
 else     if (stopNode != null) {
      stopNode[0]=node;
      stopNode[1]=i;
      return output;
    }
 else {
      return null;
    }
    lastNode=node;
  }
  if (!arc.isFinal()) {
    if (stopNode != null) {
      stopNode[0]=node;
      stopNode[1]=term.length;
      return output;
    }
 else {
      return null;
    }
  }
  if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {
    output=fst.outputs.add(output,arc.nextFinalOutput);
  }
  if (stopNode != null) {
    stopNode[0]=-1;
    stopNode[1]=term.length;
  }
  return output;
}
