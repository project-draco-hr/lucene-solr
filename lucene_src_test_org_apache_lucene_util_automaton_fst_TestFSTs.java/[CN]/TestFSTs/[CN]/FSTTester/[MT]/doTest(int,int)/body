{
  if (VERBOSE) {
    System.out.println("TEST: prune1=" + prune1 + " prune2="+ prune2);
  }
  final Builder<T> builder=new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,prune1,prune2,prune1 == 0 && prune2 == 0,outputs);
  for (  InputOutput<T> pair : pairs) {
    builder.add(pair.input,pair.output);
  }
  FST<T> fst=builder.finish();
  if (random.nextBoolean() && fst != null) {
    IndexOutput out=dir.createOutput("fst.bin");
    fst.save(out);
    out.close();
    IndexInput in=dir.openInput("fst.bin");
    try {
      fst=new FST<T>(in,outputs);
    }
  finally {
      in.close();
      dir.deleteFile("fst.bin");
    }
  }
  if (VERBOSE && pairs.size() <= 20 && fst != null) {
    Writer w=new OutputStreamWriter(new FileOutputStream("out.dot"),"UTF-8");
    Util.toDot(fst,w,false,false);
    w.close();
    System.out.println("SAVED out.dot");
  }
  if (VERBOSE) {
    if (fst == null) {
      System.out.println("  fst has 0 nodes (fully pruned)");
    }
 else {
      System.out.println("  fst has " + fst.getNodeCount() + " nodes and "+ fst.getArcCount()+ " arcs");
    }
  }
  if (prune1 == 0 && prune2 == 0) {
    verifyUnPruned(inputMode,fst);
  }
 else {
    verifyPruned(inputMode,fst,prune1,prune2);
  }
  return fst;
}
