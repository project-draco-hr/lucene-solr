{
  int node=fst.getStartNode();
  if (fst.noNodes()) {
    assertTrue(fst.getEmptyOutput() != null);
    in.length=0;
    return fst.getEmptyOutput();
  }
  final List<FST.Arc<T>> arcs=new ArrayList<FST.Arc<T>>();
  in.length=0;
  in.offset=0;
  T output=fst.outputs.getNoOutput();
  while (true) {
    int arcAddress=node;
    FST.Arc<T> arc=new FST.Arc<T>();
    fst.readFirstArc(arcAddress,arc);
    arcs.add(copyArc(arc));
    while (!arc.isLast()) {
      fst.readNextArc(arc);
      arcs.add(copyArc(arc));
    }
    arc=arcs.get(random.nextInt(arcs.size()));
    arcs.clear();
    if (in.ints.length == in.length) {
      in.grow(1 + in.length);
    }
    in.ints[in.length++]=arc.label;
    output=fst.outputs.add(output,arc.output);
    if (arc.isFinal()) {
      if (fst.hasArcs(arc.target)) {
        if (random.nextBoolean()) {
          output=fst.outputs.add(output,arc.nextFinalOutput);
          break;
        }
      }
 else {
        break;
      }
    }
    node=arc.target;
  }
  return output;
}
