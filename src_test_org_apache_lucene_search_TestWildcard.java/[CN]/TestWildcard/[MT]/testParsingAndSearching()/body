{
  String field="content";
  boolean dbg=false;
  QueryParser qp=new QueryParser(field,new WhitespaceAnalyzer());
  qp.setAllowLeadingWildcard(true);
  String docs[]={"\\ abcdefg1","\\79 hijklmn1","\\\\ opqrstu1"};
  String matchAll[]={"*","*1","**1","*?","*?1","?*1","**","***","\\\\*"};
  String matchNone[]={"a*h","a?h","*a*h","?a","a?"};
  String matchOneDocPrefix[][]={{"a*","ab*","abc*"},{"h*","hi*","hij*","\\\\7*"},{"o*","op*","opq*","\\\\\\\\*"}};
  String matchOneDocWild[][]={{"*a*","*ab*","*abc**","ab*e*","*g?","*f?1","abc**"},{"*h*","*hi*","*hij**","hi*k*","*n?","*m?1","hij**"},{"*o*","*op*","*opq**","op*q*","*u?","*t?1","opq**"}};
  RAMDirectory dir=new RAMDirectory();
  IndexWriter iw=new IndexWriter(dir,new WhitespaceAnalyzer());
  for (int i=0; i < docs.length; i++) {
    Document doc=new Document();
    doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));
    iw.addDocument(doc);
  }
  iw.close();
  IndexSearcher searcher=new IndexSearcher(dir);
  for (int i=0; i < matchAll.length; i++) {
    String qtxt=matchAll[i];
    Query q=qp.parse(qtxt);
    if (dbg)     System.out.println("matchAll: qtxt=" + qtxt + " q="+ q+ " "+ q.getClass().getName());
    Hits hits=searcher.search(q);
    assertEquals(docs.length,hits.length());
  }
  for (int i=0; i < matchNone.length; i++) {
    String qtxt=matchNone[i];
    Query q=qp.parse(qtxt);
    if (dbg)     System.out.println("matchNone: qtxt=" + qtxt + " q="+ q+ " "+ q.getClass().getName());
    Hits hits=searcher.search(q);
    assertEquals(0,hits.length());
  }
  for (int i=0; i < matchOneDocPrefix.length; i++) {
    for (int j=0; j < matchOneDocPrefix[i].length; j++) {
      String qtxt=matchOneDocPrefix[i][j];
      Query q=qp.parse(qtxt);
      if (dbg)       System.out.println("match 1 prefix: doc=" + docs[i] + " qtxt="+ qtxt+ " q="+ q+ " "+ q.getClass().getName());
      assertEquals(PrefixQuery.class,q.getClass());
      Hits hits=searcher.search(q);
      assertEquals(1,hits.length());
      assertEquals(i,hits.id(0));
    }
  }
  for (int i=0; i < matchOneDocPrefix.length; i++) {
    for (int j=0; j < matchOneDocWild[i].length; j++) {
      String qtxt=matchOneDocWild[i][j];
      Query q=qp.parse(qtxt);
      if (dbg)       System.out.println("match 1 wild: doc=" + docs[i] + " qtxt="+ qtxt+ " q="+ q+ " "+ q.getClass().getName());
      assertEquals(WildcardQuery.class,q.getClass());
      Hits hits=searcher.search(q);
      assertEquals(1,hits.length());
      assertEquals(i,hits.id(0));
    }
  }
  searcher.close();
}
