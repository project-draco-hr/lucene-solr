{
  String restoreCollectionName=message.getStr(COLLECTION_PROP);
  String backupName=message.getStr(NAME);
  ShardHandler shardHandler=ocmh.shardHandlerFactory.getShardHandler();
  String asyncId=message.getStr(ASYNC);
  String repo=message.getStr(CoreAdminParams.BACKUP_REPOSITORY);
  Map<String,String> requestMap=new HashMap<>();
  CoreContainer cc=ocmh.overseer.getZkController().getCoreContainer();
  BackupRepository repository=cc.newBackupRepository(Optional.ofNullable(repo));
  URI location=repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));
  URI backupPath=repository.resolve(location,backupName);
  ZkStateReader zkStateReader=ocmh.zkStateReader;
  BackupManager backupMgr=new BackupManager(repository,zkStateReader,restoreCollectionName);
  Properties properties=backupMgr.readBackupProperties(location,backupName);
  String backupCollection=properties.getProperty(BackupManager.COLLECTION_NAME_PROP);
  DocCollection backupCollectionState=backupMgr.readCollectionState(location,backupName,backupCollection);
  String configName=(String)properties.get(COLL_CONF);
  String restoreConfigName=message.getStr(COLL_CONF,configName);
  if (zkStateReader.getConfigManager().configExists(restoreConfigName)) {
    log.info("Using existing config {}",restoreConfigName);
  }
 else {
    log.info("Uploading config {}",restoreConfigName);
    backupMgr.uploadConfigDir(location,backupName,configName,restoreConfigName);
  }
  log.info("Starting restore into collection={} with backup_name={} at location={}",restoreCollectionName,backupName,location);
{
    Map<String,Object> propMap=new HashMap<>();
    propMap.put(Overseer.QUEUE_OPERATION,CREATE.toString());
    propMap.put("fromApi","true");
    for (    String collProp : COLL_PROPS.keySet()) {
      Object val=message.getProperties().getOrDefault(collProp,backupCollectionState.get(collProp));
      if (val != null) {
        propMap.put(collProp,val);
      }
    }
    propMap.put(NAME,restoreCollectionName);
    propMap.put(CREATE_NODE_SET,CREATE_NODE_SET_EMPTY);
    propMap.put(COLL_CONF,restoreConfigName);
    @SuppressWarnings("unchecked") Map<String,Object> routerProps=(Map<String,Object>)backupCollectionState.getProperties().get(DocCollection.DOC_ROUTER);
    for (    Map.Entry<String,Object> pair : routerProps.entrySet()) {
      propMap.put(DocCollection.DOC_ROUTER + "." + pair.getKey(),pair.getValue());
    }
    Set<String> sliceNames=backupCollectionState.getActiveSlicesMap().keySet();
    if (backupCollectionState.getRouter() instanceof ImplicitDocRouter) {
      propMap.put(SHARDS_PROP,StrUtils.join(sliceNames,','));
    }
 else {
      propMap.put(NUM_SLICES,sliceNames.size());
      Collection<Slice> backupSlices=backupCollectionState.getActiveSlices();
      Map<String,Slice> newSlices=new LinkedHashMap<>(backupSlices.size());
      for (      Slice backupSlice : backupSlices) {
        newSlices.put(backupSlice.getName(),new Slice(backupSlice.getName(),Collections.emptyMap(),backupSlice.getProperties()));
      }
      propMap.put(SHARDS_PROP,newSlices);
    }
    ocmh.commandMap.get(CREATE).call(zkStateReader.getClusterState(),new ZkNodeProps(propMap),new NamedList());
  }
  DocCollection restoreCollection=zkStateReader.getClusterState().getCollection(restoreCollectionName);
  DistributedQueue inQueue=Overseer.getStateUpdateQueue(zkStateReader.getZkClient());
{
    Map<String,Object> propMap=new HashMap<>();
    propMap.put(Overseer.QUEUE_OPERATION,OverseerAction.UPDATESHARDSTATE.toLower());
    for (    Slice shard : restoreCollection.getSlices()) {
      propMap.put(shard.getName(),Slice.State.CONSTRUCTION.toString());
    }
    propMap.put(ZkStateReader.COLLECTION_PROP,restoreCollectionName);
    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));
  }
  ClusterState clusterState=zkStateReader.getClusterState();
  for (  Slice slice : restoreCollection.getSlices()) {
    log.debug("Adding replica for shard={} collection={} ",slice.getName(),restoreCollection);
    HashMap<String,Object> propMap=new HashMap<>();
    propMap.put(Overseer.QUEUE_OPERATION,CREATESHARD);
    propMap.put(COLLECTION_PROP,restoreCollectionName);
    propMap.put(SHARD_ID_PROP,slice.getName());
    if (asyncId != null) {
      propMap.put(ASYNC,asyncId);
    }
    ocmh.addPropertyParams(message,propMap);
    ocmh.addReplica(clusterState,new ZkNodeProps(propMap),new NamedList(),null);
  }
  restoreCollection=zkStateReader.getClusterState().getCollection(restoreCollectionName);
  for (  Slice slice : restoreCollection.getSlices()) {
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.set(CoreAdminParams.ACTION,CoreAdminParams.CoreAdminAction.RESTORECORE.toString());
    params.set(NAME,"snapshot." + slice.getName());
    params.set(CoreAdminParams.BACKUP_LOCATION,backupPath.toASCIIString());
    params.set(CoreAdminParams.BACKUP_REPOSITORY,repo);
    ocmh.sliceCmd(clusterState,params,null,slice,shardHandler,asyncId,requestMap);
  }
  ocmh.processResponses(new NamedList(),shardHandler,true,"Could not restore core",asyncId,requestMap);
{
    HashMap<String,Object> propMap=new HashMap<>();
    propMap.put(Overseer.QUEUE_OPERATION,OverseerAction.UPDATESHARDSTATE.toLower());
    propMap.put(ZkStateReader.COLLECTION_PROP,restoreCollectionName);
    for (    Slice shard : restoreCollection.getSlices()) {
      propMap.put(shard.getName(),Slice.State.ACTIVE.toString());
    }
    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));
  }
  restoreCollection=zkStateReader.getClusterState().getCollection(restoreCollectionName);
  Integer numReplicas=restoreCollection.getReplicationFactor();
  if (numReplicas != null && numReplicas > 1) {
    log.info("Adding replicas to restored collection={}",restoreCollection);
    for (    Slice slice : restoreCollection.getSlices()) {
      for (int i=1; i < numReplicas; i++) {
        log.debug("Adding replica for shard={} collection={} ",slice.getName(),restoreCollection);
        HashMap<String,Object> propMap=new HashMap<>();
        propMap.put(COLLECTION_PROP,restoreCollectionName);
        propMap.put(SHARD_ID_PROP,slice.getName());
        if (asyncId != null) {
          propMap.put(ASYNC,asyncId);
        }
        ocmh.addPropertyParams(message,propMap);
        ocmh.addReplica(zkStateReader.getClusterState(),new ZkNodeProps(propMap),results,null);
      }
    }
  }
  log.info("Completed restoring collection={} backupName={}",restoreCollection,backupName);
}
