{
  SortSpec ss=rb.getSortSpec();
  Sort groupSort=rb.getGroupingSpec().getGroupSort();
  String[] fields=rb.getGroupingSpec().getFields();
  Map<String,List<Collection<SearchGroup<BytesRef>>>> commandSearchGroups=new HashMap<String,List<Collection<SearchGroup<BytesRef>>>>();
  Map<String,Map<SearchGroup<BytesRef>,Set<String>>> tempSearchGroupToShards=new HashMap<String,Map<SearchGroup<BytesRef>,Set<String>>>();
  for (  String field : fields) {
    commandSearchGroups.put(field,new ArrayList<Collection<SearchGroup<BytesRef>>>(shardRequest.responses.size()));
    tempSearchGroupToShards.put(field,new HashMap<SearchGroup<BytesRef>,Set<String>>());
    if (!rb.searchGroupToShards.containsKey(field)) {
      rb.searchGroupToShards.put(field,new HashMap<SearchGroup<BytesRef>,Set<String>>());
    }
  }
  SearchGroupsResultTransformer serializer=new SearchGroupsResultTransformer(rb.req.getSearcher());
  try {
    int maxElapsedTime=0;
    int hitCountDuringFirstPhase=0;
    for (    ShardResponse srsp : shardRequest.responses) {
      maxElapsedTime=(int)Math.max(maxElapsedTime,srsp.getSolrResponse().getElapsedTime());
      @SuppressWarnings("unchecked") NamedList<NamedList> firstPhaseResult=(NamedList<NamedList>)srsp.getSolrResponse().getResponse().get("firstPhase");
      Map<String,Collection<SearchGroup<BytesRef>>> result=serializer.transformToNative(firstPhaseResult,groupSort,null,srsp.getShard());
      for (      String field : commandSearchGroups.keySet()) {
        Collection<SearchGroup<BytesRef>> searchGroups=result.get(field);
        if (searchGroups == null) {
          continue;
        }
        commandSearchGroups.get(field).add(searchGroups);
        for (        SearchGroup<BytesRef> searchGroup : searchGroups) {
          Map<SearchGroup<BytesRef>,java.util.Set<String>> map=tempSearchGroupToShards.get(field);
          Set<String> shards=map.get(searchGroup);
          if (shards == null) {
            shards=new HashSet<String>();
            map.put(searchGroup,shards);
          }
          shards.add(srsp.getShard());
        }
      }
      hitCountDuringFirstPhase+=(Integer)srsp.getSolrResponse().getResponse().get("totalHitCount");
    }
    rb.totalHitCount=hitCountDuringFirstPhase;
    rb.firstPhaseElapsedTime=maxElapsedTime;
    for (    String groupField : commandSearchGroups.keySet()) {
      List<Collection<SearchGroup<BytesRef>>> topGroups=commandSearchGroups.get(groupField);
      Collection<SearchGroup<BytesRef>> mergedTopGroups=SearchGroup.merge(topGroups,ss.getOffset(),ss.getCount(),groupSort);
      if (mergedTopGroups == null) {
        continue;
      }
      rb.mergedSearchGroups.put(groupField,mergedTopGroups);
      for (      SearchGroup<BytesRef> mergedTopGroup : mergedTopGroups) {
        rb.searchGroupToShards.get(groupField).put(mergedTopGroup,tempSearchGroupToShards.get(groupField).get(mergedTopGroup));
      }
    }
  }
 catch (  IOException e) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
  }
}
