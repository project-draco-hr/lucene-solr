{
  String field="content";
  String docs[]={"\\ abcdefg1","\\79 hijklmn1","\\\\ opqrstu1"};
  Query matchAll[]={new WildcardQuery(new Term(field,"*")),new WildcardQuery(new Term(field,"*1")),new WildcardQuery(new Term(field,"**1")),new WildcardQuery(new Term(field,"*?")),new WildcardQuery(new Term(field,"*?1")),new WildcardQuery(new Term(field,"?*1")),new WildcardQuery(new Term(field,"**")),new WildcardQuery(new Term(field,"***")),new WildcardQuery(new Term(field,"\\\\*"))};
  Query matchNone[]={new WildcardQuery(new Term(field,"a*h")),new WildcardQuery(new Term(field,"a?h")),new WildcardQuery(new Term(field,"*a*h")),new WildcardQuery(new Term(field,"?a")),new WildcardQuery(new Term(field,"a?"))};
  PrefixQuery matchOneDocPrefix[][]={{new PrefixQuery(new Term(field,"a")),new PrefixQuery(new Term(field,"ab")),new PrefixQuery(new Term(field,"abc"))},{new PrefixQuery(new Term(field,"h")),new PrefixQuery(new Term(field,"hi")),new PrefixQuery(new Term(field,"hij")),new PrefixQuery(new Term(field,"\\7"))},{new PrefixQuery(new Term(field,"o")),new PrefixQuery(new Term(field,"op")),new PrefixQuery(new Term(field,"opq")),new PrefixQuery(new Term(field,"\\\\"))}};
  WildcardQuery matchOneDocWild[][]={{new WildcardQuery(new Term(field,"*a*")),new WildcardQuery(new Term(field,"*ab*")),new WildcardQuery(new Term(field,"*abc**")),new WildcardQuery(new Term(field,"ab*e*")),new WildcardQuery(new Term(field,"*g?")),new WildcardQuery(new Term(field,"*f?1"))},{new WildcardQuery(new Term(field,"*h*")),new WildcardQuery(new Term(field,"*hi*")),new WildcardQuery(new Term(field,"*hij**")),new WildcardQuery(new Term(field,"hi*k*")),new WildcardQuery(new Term(field,"*n?")),new WildcardQuery(new Term(field,"*m?1")),new WildcardQuery(new Term(field,"hij**"))},{new WildcardQuery(new Term(field,"*o*")),new WildcardQuery(new Term(field,"*op*")),new WildcardQuery(new Term(field,"*opq**")),new WildcardQuery(new Term(field,"op*q*")),new WildcardQuery(new Term(field,"*u?")),new WildcardQuery(new Term(field,"*t?1")),new WildcardQuery(new Term(field,"opq**"))}};
  Directory dir=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
  for (int i=0; i < docs.length; i++) {
    Document doc=new Document();
    doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));
    iw.addDocument(doc);
  }
  iw.close();
  IndexReader reader=IndexReader.open(dir);
  IndexSearcher searcher=new IndexSearcher(reader);
  for (  Query q : matchAll) {
    if (VERBOSE)     System.out.println("matchAll: q=" + q + " "+ q.getClass().getName());
    ScoreDoc[] hits=searcher.search(q,null,1000).scoreDocs;
    assertEquals(docs.length,hits.length);
  }
  for (  Query q : matchNone) {
    if (VERBOSE)     System.out.println("matchNone: q=" + q + " "+ q.getClass().getName());
    ScoreDoc[] hits=searcher.search(q,null,1000).scoreDocs;
    assertEquals(0,hits.length);
  }
  for (int i=0; i < matchOneDocPrefix.length; i++) {
    for (int j=0; j < matchOneDocPrefix[i].length; j++) {
      Query q=matchOneDocPrefix[i][j];
      if (VERBOSE)       System.out.println("match 1 prefix: doc=" + docs[i] + " q="+ q+ " "+ q.getClass().getName());
      ScoreDoc[] hits=searcher.search(q,null,1000).scoreDocs;
      assertEquals(1,hits.length);
      assertEquals(i,hits[0].doc);
    }
  }
  for (int i=0; i < matchOneDocWild.length; i++) {
    for (int j=0; j < matchOneDocWild[i].length; j++) {
      Query q=matchOneDocWild[i][j];
      if (VERBOSE)       System.out.println("match 1 wild: doc=" + docs[i] + " q="+ q+ " "+ q.getClass().getName());
      ScoreDoc[] hits=searcher.search(q,null,1000).scoreDocs;
      assertEquals(1,hits.length);
      assertEquals(i,hits[0].doc);
    }
  }
  searcher.close();
  reader.close();
  dir.close();
}
