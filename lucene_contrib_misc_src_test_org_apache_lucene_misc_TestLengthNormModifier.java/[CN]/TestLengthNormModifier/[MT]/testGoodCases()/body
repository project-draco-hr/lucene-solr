{
  IndexSearcher searcher;
  final float[] scores=new float[NUM_DOCS];
  float lastScore=0.0f;
  searcher=new IndexSearcher(store,false);
  searcher.search(new TermQuery(new Term("field","word")),new Collector(){
    private int docBase=0;
    private Scorer scorer;
    @Override public final void collect(    int doc) throws IOException {
      scores[doc + docBase]=scorer.score();
    }
    @Override public void setNextReader(    AtomicReaderContext context){
      docBase=context.docBase;
    }
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  searcher.close();
  lastScore=Float.MAX_VALUE;
  for (int i=0; i < NUM_DOCS; i++) {
    String msg="i=" + i + ", "+ scores[i]+ " <= "+ lastScore;
    assertTrue(msg,scores[i] <= lastScore);
    lastScore=scores[i];
  }
  SimilarityProvider s=new DefaultSimilarity(){
    @Override public float computeNorm(    FieldInvertState state){
      return state.getBoost() * (discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength());
    }
  }
;
  FieldNormModifier fnm=new FieldNormModifier(store,s);
  fnm.reSetNorms("field");
  searcher=new IndexSearcher(store,false);
  searcher.search(new TermQuery(new Term("field","word")),new Collector(){
    private int docBase=0;
    private Scorer scorer;
    @Override public final void collect(    int doc) throws IOException {
      scores[doc + docBase]=scorer.score();
    }
    @Override public void setNextReader(    AtomicReaderContext context){
      docBase=context.docBase;
    }
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  searcher.close();
  lastScore=0.0f;
  for (int i=0; i < NUM_DOCS; i++) {
    String msg="i=" + i + ", "+ scores[i]+ " >= "+ lastScore;
    assertTrue(msg,scores[i] >= lastScore);
    lastScore=scores[i];
  }
}
