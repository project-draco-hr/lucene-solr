{
  String response=update("tolerant-chain-max-errors-10",adoc("id","1","text","the quick brown fox"));
  assertNull(BaseTestHarness.validateXPath(response,"//int[@name='status']=0","//arr[@name='errors']","count(//arr[@name='errors']/lst)=0"));
  response=update("tolerant-chain-max-errors-10",adoc("text","the quick brown fox"));
  assertNull(BaseTestHarness.validateXPath(response,"//int[@name='status']=0","//int[@name='maxErrors']/text()='10'","count(//arr[@name='errors']/lst)=1","//arr[@name='errors']/lst/str[@name='id']/text()='(unknown)'","//arr[@name='errors']/lst/str[@name='message']/text()='Document is missing mandatory uniqueKey field: id'"));
  response=update("tolerant-chain-max-errors-10",adoc("text","the quick brown fox"));
  StringWriter builder=new StringWriter();
  builder.append("<add>");
  for (  SolrInputDocument doc : docs) {
    ClientUtils.writeXML(doc,builder);
  }
  builder.append("</add>");
  response=update("tolerant-chain-max-errors-10",builder.toString());
  assertNull(BaseTestHarness.validateXPath(response,"//int[@name='status']=0","//int[@name='maxErrors']/text()='10'","count(//arr[@name='errors']/lst)=10","not(//arr[@name='errors']/lst/str[@name='id']/text()='0')","//arr[@name='errors']/lst/str[@name='id']/text()='1'","not(//arr[@name='errors']/lst/str[@name='id']/text()='2')","//arr[@name='errors']/lst/str[@name='id']/text()='3'","not(//arr[@name='errors']/lst/str[@name='id']/text()='4')","//arr[@name='errors']/lst/str[@name='id']/text()='5'","not(//arr[@name='errors']/lst/str[@name='id']/text()='6')","//arr[@name='errors']/lst/str[@name='id']/text()='7'","not(//arr[@name='errors']/lst/str[@name='id']/text()='8')","//arr[@name='errors']/lst/str[@name='id']/text()='9'","not(//arr[@name='errors']/lst/str[@name='id']/text()='10')","//arr[@name='errors']/lst/str[@name='id']/text()='11'","not(//arr[@name='errors']/lst/str[@name='id']/text()='12')","//arr[@name='errors']/lst/str[@name='id']/text()='13'","not(//arr[@name='errors']/lst/str[@name='id']/text()='14')","//arr[@name='errors']/lst/str[@name='id']/text()='15'","not(//arr[@name='errors']/lst/str[@name='id']/text()='16')","//arr[@name='errors']/lst/str[@name='id']/text()='17'","not(//arr[@name='errors']/lst/str[@name='id']/text()='18')","//arr[@name='errors']/lst/str[@name='id']/text()='19'"));
  response=update("tolerant-chain-max-errors-not-set",builder.toString());
  assertNull(BaseTestHarness.validateXPath(response,"//int[@name='maxErrors']/text()='-1'"));
}
