{
  return new FacetMerger(){
    long sumUnique;
    Set<Object> values;
    int shardsMissing;
    long shardsMissingSum;
    long shardsMissingMax;
    @Override public void merge(    Object facetResult){
      SimpleOrderedMap map=(SimpleOrderedMap)facetResult;
      long unique=((Number)map.get("unique")).longValue();
      sumUnique+=unique;
      List vals=(List)map.get("vals");
      if (vals != null) {
        if (values == null) {
          values=new HashSet<>(vals.size() * 4);
        }
        values.addAll(vals);
      }
 else {
        shardsMissing++;
        shardsMissingSum+=unique;
        shardsMissingMax=Math.max(shardsMissingMax,unique);
      }
    }
    @Override public Object getMergedResult(){
      long exactCount=values == null ? 0 : values.size();
      return exactCount + shardsMissingSum;
    }
  }
;
}
