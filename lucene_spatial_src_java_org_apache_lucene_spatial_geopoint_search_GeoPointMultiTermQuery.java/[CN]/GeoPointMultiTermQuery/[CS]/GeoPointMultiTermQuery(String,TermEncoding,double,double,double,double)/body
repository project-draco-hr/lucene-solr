{
  super(field);
  if (GeoUtils.isValidLon(minLon) == false) {
    throw new IllegalArgumentException("invalid minLon " + minLon);
  }
  if (GeoUtils.isValidLon(maxLon) == false) {
    throw new IllegalArgumentException("invalid maxLon " + maxLon);
  }
  if (GeoUtils.isValidLat(minLat) == false) {
    throw new IllegalArgumentException("invalid minLat " + minLat);
  }
  if (GeoUtils.isValidLat(maxLat) == false) {
    throw new IllegalArgumentException("invalid maxLat " + maxLat);
  }
  final long minHash=GeoEncodingUtils.mortonHash(minLon,minLat);
  final long maxHash=GeoEncodingUtils.mortonHash(maxLon,maxLat);
  this.minLon=GeoEncodingUtils.mortonUnhashLon(minHash);
  this.minLat=GeoEncodingUtils.mortonUnhashLat(minHash);
  this.maxLon=GeoEncodingUtils.mortonUnhashLon(maxHash);
  this.maxLat=GeoEncodingUtils.mortonUnhashLat(maxHash);
  this.maxShift=computeMaxShift();
  this.termEncoding=termEncoding;
  this.cellComparator=newCellComparator();
  this.rewriteMethod=GEO_CONSTANT_SCORE_REWRITE;
}
