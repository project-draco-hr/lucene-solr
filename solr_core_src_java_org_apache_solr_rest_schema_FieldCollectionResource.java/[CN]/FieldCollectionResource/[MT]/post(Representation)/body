{
  try {
    if (!getSchema().isMutable()) {
      final String message="This IndexSchema is not mutable.";
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
 else {
      if (null == entity.getMediaType()) {
        entity.setMediaType(MediaType.APPLICATION_JSON);
      }
      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {
        String message="Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."+ "  Request has media type "+ entity.getMediaType().toString()+ ".";
        log.error(message);
        throw new SolrException(ErrorCode.BAD_REQUEST,message);
      }
 else {
        Object object=ObjectBuilder.fromJSON(entity.getText());
        Map<String,String> copyFields=new HashMap<>();
        if (!(object instanceof List)) {
          String message="Invalid JSON type " + object.getClass().getName() + ", expected List of the form"+ " (ignore the backslashes): [{\"name\":\"foo\",\"type\":\"text_general\", ...}, {...}, ...]";
          log.error(message);
          throw new SolrException(ErrorCode.BAD_REQUEST,message);
        }
 else {
          List<Map<String,Object>> list=(List<Map<String,Object>>)object;
          List<SchemaField> newFields=new ArrayList<SchemaField>();
          IndexSchema oldSchema=getSchema();
          for (          Map<String,Object> map : list) {
            String fieldName=(String)map.remove(IndexSchema.NAME);
            if (null == fieldName) {
              String message="Missing '" + IndexSchema.NAME + "' mapping.";
              log.error(message);
              throw new SolrException(ErrorCode.BAD_REQUEST,message);
            }
            String fieldType=(String)map.remove(IndexSchema.TYPE);
            if (null == fieldType) {
              String message="Missing '" + IndexSchema.TYPE + "' mapping.";
              log.error(message);
              throw new SolrException(ErrorCode.BAD_REQUEST,message);
            }
            String copyTo=(String)map.get(IndexSchema.COPY_FIELDS);
            if (copyTo != null) {
              map.remove(IndexSchema.COPY_FIELDS);
              copyFields.put(fieldName,copyTo);
            }
            newFields.add(oldSchema.newField(fieldName,fieldType,map));
          }
          IndexSchema newSchema=oldSchema.addFields(newFields);
          for (          Map.Entry<String,String> entry : copyFields.entrySet()) {
            String[] splits=entry.getValue().split(",");
            if (splits != null && splits.length > 0) {
              for (int i=0; i < splits.length; i++) {
                newSchema.registerCopyField(entry.getKey(),splits[i].trim());
              }
            }
          }
          getSolrCore().setLatestSchema(newSchema);
        }
      }
    }
  }
 catch (  Exception e) {
    getSolrResponse().setException(e);
  }
  handlePostExecution(log);
  return new SolrOutputRepresentation();
}
