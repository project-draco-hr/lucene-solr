{
  try {
    if (!getSchema().isMutable()) {
      final String message="This IndexSchema is not mutable.";
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
 else {
      if (null == entity.getMediaType()) {
        entity.setMediaType(MediaType.APPLICATION_JSON);
      }
      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {
        String message="Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."+ "  Request has media type "+ entity.getMediaType().toString()+ ".";
        log.error(message);
        throw new SolrException(ErrorCode.BAD_REQUEST,message);
      }
 else {
        Object object=ObjectBuilder.fromJSON(entity.getText());
        if (!(object instanceof List)) {
          String message="Invalid JSON type " + object.getClass().getName() + ", expected List of the form"+ " (ignore the backslashes): [{\"name\":\"foo\",\"type\":\"text_general\", ...}, {...}, ...]";
          log.error(message);
          throw new SolrException(ErrorCode.BAD_REQUEST,message);
        }
 else {
          List<Map<String,Object>> list=(List<Map<String,Object>>)object;
          List<SchemaField> newFields=new ArrayList<>();
          List<NewFieldArguments> newFieldArguments=new ArrayList<>();
          IndexSchema oldSchema=getSchema();
          Map<String,Collection<String>> copyFields=new HashMap<>();
          for (          Map<String,Object> map : list) {
            String fieldName=(String)map.remove(IndexSchema.NAME);
            if (null == fieldName) {
              String message="Missing '" + IndexSchema.NAME + "' mapping.";
              log.error(message);
              throw new SolrException(ErrorCode.BAD_REQUEST,message);
            }
            String fieldType=(String)map.remove(IndexSchema.TYPE);
            if (null == fieldType) {
              String message="Missing '" + IndexSchema.TYPE + "' mapping.";
              log.error(message);
              throw new SolrException(ErrorCode.BAD_REQUEST,message);
            }
            Object copies=map.get(IndexSchema.COPY_FIELDS);
            List<String> copyTo=null;
            if (copies != null) {
              if (copies instanceof List) {
                copyTo=(List<String>)copies;
              }
 else               if (copies instanceof String) {
                copyTo=Collections.singletonList(copies.toString());
              }
 else {
                String message="Invalid '" + IndexSchema.COPY_FIELDS + "' type.";
                log.error(message);
                throw new SolrException(ErrorCode.BAD_REQUEST,message);
              }
            }
            if (copyTo != null) {
              map.remove(IndexSchema.COPY_FIELDS);
              copyFields.put(fieldName,copyTo);
            }
            newFields.add(oldSchema.newField(fieldName,fieldType,map));
            newFieldArguments.add(new NewFieldArguments(fieldName,fieldType,map));
          }
          boolean firstAttempt=true;
          boolean success=false;
          while (!success) {
            try {
              if (!firstAttempt) {
                newFields.clear();
                for (                NewFieldArguments args : newFieldArguments) {
                  newFields.add(oldSchema.newField(args.getName(),args.getType(),args.getMap()));
                }
              }
              firstAttempt=false;
              IndexSchema newSchema=oldSchema.addFields(newFields,copyFields);
              if (null != newSchema) {
                getSolrCore().setLatestSchema(newSchema);
                success=true;
              }
 else {
                throw new SolrException(ErrorCode.SERVER_ERROR,"Failed to add fields.");
              }
            }
 catch (            ManagedIndexSchema.SchemaChangedInZkException e) {
              log.debug("Schema changed while processing request, retrying");
              oldSchema=getSolrCore().getLatestSchema();
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    getSolrResponse().setException(e);
  }
  handlePostExecution(log);
  return new SolrOutputRepresentation();
}
