{
  return new ValueFiller(){
    private final MutableValueFloat mval=new MutableValueFloat();
    @Override public MutableValue getValue(){
      return mval;
    }
    @Override public void fillValue(    int doc){
      try {
        if (noMatches) {
          mval.value=defVal;
          mval.exists=false;
          return;
        }
        scorer=weight.scorer(readerContext,acceptDocs);
        scorerDoc=-1;
        if (scorer == null) {
          noMatches=true;
          mval.value=defVal;
          mval.exists=false;
          return;
        }
        lastDocRequested=doc;
        if (scorerDoc < doc) {
          scorerDoc=scorer.advance(doc);
        }
        if (scorerDoc > doc) {
          mval.value=defVal;
          mval.exists=false;
          return;
        }
        mval.value=scorer.score();
        mval.exists=true;
      }
 catch (      IOException e) {
        throw new RuntimeException("caught exception in QueryDocVals(" + q + ") doc="+ doc,e);
      }
    }
  }
;
}
