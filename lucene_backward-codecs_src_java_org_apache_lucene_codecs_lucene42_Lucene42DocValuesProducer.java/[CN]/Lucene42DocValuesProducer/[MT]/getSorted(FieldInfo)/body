{
  final FSTEntry entry=fsts.get(field.name);
  FST<Long> instance;
synchronized (this) {
    instance=fstInstances.get(field.name);
    if (instance == null) {
      data.seek(entry.offset);
      instance=new FST<>(data,PositiveIntOutputs.getSingleton());
      if (!merging) {
        ramBytesUsed.addAndGet(instance.ramBytesUsed());
        fstInstances.put(field.name,instance);
      }
    }
  }
  final NumericDocValues docToOrd=getNumeric(field);
  final FST<Long> fst=instance;
  final BytesReader in=fst.getBytesReader();
  final Arc<Long> firstArc=new Arc<>();
  final Arc<Long> scratchArc=new Arc<>();
  final IntsRefBuilder scratchInts=new IntsRefBuilder();
  final BytesRefFSTEnum<Long> fstEnum=new BytesRefFSTEnum<>(fst);
  return new SortedDocValues(){
    final BytesRefBuilder term=new BytesRefBuilder();
    @Override public int getOrd(    int docID){
      return (int)docToOrd.get(docID);
    }
    @Override public BytesRef lookupOrd(    int ord){
      try {
        in.setPosition(0);
        fst.getFirstArc(firstArc);
        IntsRef output=Util.getByOutput(fst,ord,in,firstArc,scratchArc,scratchInts);
        term.grow(output.length);
        term.clear();
        return Util.toBytesRef(output,term);
      }
 catch (      IOException bogus) {
        throw new RuntimeException(bogus);
      }
    }
    @Override public int lookupTerm(    BytesRef key){
      try {
        InputOutput<Long> o=fstEnum.seekCeil(key);
        if (o == null) {
          return -getValueCount() - 1;
        }
 else         if (o.input.equals(key)) {
          return o.output.intValue();
        }
 else {
          return (int)-o.output - 1;
        }
      }
 catch (      IOException bogus) {
        throw new RuntimeException(bogus);
      }
    }
    @Override public int getValueCount(){
      return (int)entry.numOrds;
    }
    @Override public TermsEnum termsEnum(){
      return new FSTTermsEnum(fst);
    }
  }
;
}
