{
  SweetSpotSimilarity ss=new SweetSpotSimilarity();
  TFIDFSimilarity d=new ClassicSimilarity();
  TFIDFSimilarity s=ss;
  ss.setBaselineTfFactors(0.0f,0.0f);
  for (int i=1; i < 1000; i++) {
    assertEquals("tf: i=" + i,d.tf(i),s.tf(i),0.0f);
  }
  ss.setBaselineTfFactors(1.0f,0.0f);
  for (int i=1; i < 1000; i++) {
    assertTrue("tf: i=" + i + " : d="+ d.tf(i)+ " < s="+ s.tf(i),d.tf(i) < s.tf(i));
  }
  ss.setBaselineTfFactors(1.0f,6.0f);
  for (int i=1; i <= 6; i++) {
    assertEquals("tf flat1: i=" + i,1.0f,s.tf(i),0.0f);
  }
  ss.setBaselineTfFactors(2.0f,6.0f);
  for (int i=1; i <= 6; i++) {
    assertEquals("tf flat2: i=" + i,2.0f,s.tf(i),0.0f);
  }
  for (int i=6; i <= 1000; i++) {
    assertTrue("tf: i=" + i + " : s="+ s.tf(i)+ " < d="+ d.tf(i),s.tf(i) < d.tf(i));
  }
  assertEquals("tf zero",0.0f,s.tf(0),0.0f);
}
