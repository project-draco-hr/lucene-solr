{
  final IndexInput data=this.data.clone();
  final MonotonicBlockPackedReader addresses;
synchronized (addressInstances) {
    MonotonicBlockPackedReader addrInstance=addressInstances.get(field.number);
    if (addrInstance == null) {
      data.seek(bytes.addressesOffset);
      addrInstance=new MonotonicBlockPackedReader(data,bytes.packedIntsVersion,bytes.blockSize,bytes.count,false);
      addressInstances.put(field.number,addrInstance);
    }
    addresses=addrInstance;
  }
  return new BinaryDocValues(){
    @Override public void get(    int docID,    BytesRef result){
      long startAddress=bytes.offset + (docID == 0 ? 0 : +addresses.get(docID - 1));
      long endAddress=bytes.offset + addresses.get(docID);
      int length=(int)(endAddress - startAddress);
      try {
        data.seek(startAddress);
        final byte[] buffer=new byte[length];
        data.readBytes(buffer,0,buffer.length);
        result.bytes=buffer;
        result.offset=0;
        result.length=length;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}
