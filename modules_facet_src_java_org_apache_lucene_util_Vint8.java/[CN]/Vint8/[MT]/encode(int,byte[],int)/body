{
  if ((number & ~0x7F) == 0) {
    dest[start]=(byte)number;
    return 1;
  }
 else   if ((number & ~0x3FFF) == 0) {
    dest[start]=(byte)(0x80 | ((number & 0x3F80) >> 7));
    dest[start + 1]=(byte)(number & 0x7F);
    return 2;
  }
 else   if ((number & ~0x1FFFFF) == 0) {
    dest[start]=(byte)(0x80 | ((number & 0x1FC000) >> 14));
    dest[start + 1]=(byte)(0x80 | ((number & 0x3F80) >> 7));
    dest[start + 2]=(byte)(number & 0x7F);
    return 3;
  }
 else   if ((number & ~0xFFFFFFF) == 0) {
    dest[start]=(byte)(0x80 | ((number & 0xFE00000) >> 21));
    dest[start + 1]=(byte)(0x80 | ((number & 0x1FC000) >> 14));
    dest[start + 2]=(byte)(0x80 | ((number & 0x3F80) >> 7));
    dest[start + 3]=(byte)(number & 0x7F);
    return 4;
  }
 else {
    dest[start]=(byte)(0x80 | ((number & 0xF0000000) >> 28));
    dest[start + 1]=(byte)(0x80 | ((number & 0xFE00000) >> 21));
    dest[start + 2]=(byte)(0x80 | ((number & 0x1FC000) >> 14));
    dest[start + 3]=(byte)(0x80 | ((number & 0x3F80) >> 7));
    dest[start + 4]=(byte)(number & 0x7F);
    return 5;
  }
}
