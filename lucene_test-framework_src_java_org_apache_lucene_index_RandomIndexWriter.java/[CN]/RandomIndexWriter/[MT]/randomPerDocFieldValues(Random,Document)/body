{
  DocValues.Type[] values=DocValues.Type.values();
  DocValues.Type type=values[random.nextInt(values.length)];
  String name="random_" + type.name() + ""+ docValuesFieldPrefix;
  if ("Lucene3x".equals(codec.getName()) || doc.getField(name) != null) {
    return;
  }
  final Field f;
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_STRAIGHT:
case BYTES_FIXED_SORTED:
    final String randomUnicodeString=_TestUtil.randomFixedByteLengthUnicodeString(random,fixedBytesLength);
  BytesRef fixedRef=new BytesRef(randomUnicodeString);
if (fixedRef.length > fixedBytesLength) {
  fixedRef=new BytesRef(fixedRef.bytes,0,fixedBytesLength);
}
 else {
  fixedRef.grow(fixedBytesLength);
  fixedRef.length=fixedBytesLength;
}
f=new DocValuesField(name,fixedRef,type);
break;
case BYTES_VAR_DEREF:
case BYTES_VAR_STRAIGHT:
case BYTES_VAR_SORTED:
f=new DocValuesField(name,new BytesRef(_TestUtil.randomUnicodeString(random,20)),type);
break;
case FLOAT_32:
f=new DocValuesField(name,random.nextFloat(),type);
break;
case FLOAT_64:
f=new DocValuesField(name,random.nextDouble(),type);
break;
case VAR_INTS:
f=new DocValuesField(name,random.nextLong(),type);
break;
case FIXED_INTS_16:
f=new DocValuesField(name,random.nextInt(Short.MAX_VALUE),type);
break;
case FIXED_INTS_32:
f=new DocValuesField(name,random.nextInt(),type);
break;
case FIXED_INTS_64:
f=new DocValuesField(name,random.nextLong(),type);
break;
case FIXED_INTS_8:
f=new DocValuesField(name,random.nextInt(128),type);
break;
default :
throw new IllegalArgumentException("no such type: " + type);
}
doc.add(f);
}
