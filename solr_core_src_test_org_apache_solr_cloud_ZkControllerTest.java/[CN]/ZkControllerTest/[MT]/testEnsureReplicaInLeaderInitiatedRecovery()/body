{
  String zkDir=createTempDir("testEnsureReplicaInLeaderInitiatedRecovery").toFile().getAbsolutePath();
  CoreContainer cc=null;
  ZkTestServer server=new ZkTestServer(zkDir);
  try {
    server.run();
    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());
    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
    cc=getCoreContainer();
    ZkController zkController=null;
    try {
      CloudConfig cloudConfig=new CloudConfig.CloudConfigBuilder("127.0.0.1",8983,"solr").build();
      zkController=new ZkController(cc,server.getZkAddress(),TIMEOUT,cloudConfig,new CurrentCoreDescriptorProvider(){
        @Override public List<CoreDescriptor> getCurrentDescriptors(){
          return null;
        }
      }
);
      HashMap<String,Object> propMap=new HashMap<>();
      propMap.put(ZkStateReader.BASE_URL_PROP,"http://127.0.0.1:8983/solr");
      propMap.put(ZkStateReader.CORE_NAME_PROP,"replica1");
      propMap.put(ZkStateReader.NODE_NAME_PROP,"127.0.0.1:8983_solr");
      Replica replica=new Replica("replica1",propMap);
      try {
        zkController.ensureReplicaInLeaderInitiatedRecovery("c1","shard1",new ZkCoreNodeProps(replica),false,"non_existent_leader");
        fail("ZkController should not write LIR state for node which is not leader");
      }
 catch (      Exception e) {
        assertNull("ZkController should not write LIR state for node which is not leader",zkController.getLeaderInitiatedRecoveryState("c1","shard1","replica1"));
      }
    }
  finally {
      if (zkController != null)       zkController.close();
    }
  }
  finally {
    if (cc != null) {
      cc.shutdown();
    }
    server.shutdown();
  }
}
