{
  String zkDir=createTempDir("zkData").toFile().getAbsolutePath();
  CoreContainer cc=null;
  ZkTestServer server=new ZkTestServer(zkDir);
  try {
    server.run();
    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());
    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
    SolrZkClient zkClient=new SolrZkClient(server.getZkAddress(),TIMEOUT);
    String actualConfigName="firstConfig";
    zkClient.makePath(ZkController.CONFIGS_ZKNODE + "/" + actualConfigName,true);
    Map<String,Object> props=new HashMap<>();
    props.put("configName",actualConfigName);
    ZkNodeProps zkProps=new ZkNodeProps(props);
    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + "/" + COLLECTION_NAME,ZkStateReader.toJSON(zkProps),CreateMode.PERSISTENT,true);
    if (DEBUG) {
      zkClient.printLayoutToStdOut();
    }
    zkClient.close();
    cc=getCoreContainer();
    ZkController zkController=new ZkController(cc,server.getZkAddress(),TIMEOUT,10000,"127.0.0.1","8983","solr",0,60000,true,new CurrentCoreDescriptorProvider(){
      @Override public List<CoreDescriptor> getCurrentDescriptors(){
        return null;
      }
    }
);
    try {
      String configName=zkController.getZkStateReader().readConfigName(COLLECTION_NAME);
      assertEquals(configName,actualConfigName);
    }
  finally {
      zkController.close();
    }
  }
  finally {
    if (cc != null) {
      cc.shutdown();
    }
    server.shutdown();
  }
}
