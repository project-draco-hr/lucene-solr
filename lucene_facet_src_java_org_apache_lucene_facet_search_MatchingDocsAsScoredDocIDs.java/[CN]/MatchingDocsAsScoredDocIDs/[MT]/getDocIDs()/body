{
  return new DocIdSet(){
    final Iterator<MatchingDocs> mdIter=matchingDocs.iterator();
    int doc=0;
    MatchingDocs current;
    int currentLength;
    boolean done=false;
    @Override public DocIdSetIterator iterator() throws IOException {
      return new DocIdSetIterator(){
        @Override public int nextDoc() throws IOException {
          if (done) {
            return DocIdSetIterator.NO_MORE_DOCS;
          }
          while (current == null) {
            if (!mdIter.hasNext()) {
              done=true;
              return DocIdSetIterator.NO_MORE_DOCS;
            }
            current=mdIter.next();
            currentLength=current.bits.length();
            doc=0;
            if (doc >= currentLength || (doc=current.bits.nextSetBit(doc)) == -1) {
              current=null;
            }
 else {
              doc=-1;
            }
          }
          ++doc;
          if (doc >= currentLength || (doc=current.bits.nextSetBit(doc)) == -1) {
            current=null;
            return nextDoc();
          }
          return doc + current.context.docBase;
        }
        @Override public int docID(){
          return doc + current.context.docBase;
        }
        @Override public int advance(        int target) throws IOException {
          throw new UnsupportedOperationException("not supported");
        }
      }
;
    }
  }
;
}
