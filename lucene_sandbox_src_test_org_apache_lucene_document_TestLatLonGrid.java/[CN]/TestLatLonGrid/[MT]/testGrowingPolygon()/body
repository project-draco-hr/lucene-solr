{
  double centerLat=-80.0 + random().nextDouble() * 160.0;
  double centerLon=-170.0 + random().nextDouble() * 340.0;
  double radiusMeters=0.0;
  for (int i=0; i < 10; i++) {
    radiusMeters=Math.nextUp(radiusMeters);
  }
  int gons=TestUtil.nextInt(random(),4,10);
  while (radiusMeters < GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0) {
    Polygon polygon;
    try {
      polygon=GeoTestUtil.createRegularPolygon(centerLat,centerLon,radiusMeters,gons);
    }
 catch (    IllegalArgumentException iae) {
      break;
    }
    radiusMeters*=1.1;
    Rectangle box=Rectangle.fromPolygon(new Polygon[]{polygon});
    int minLat=encodeLatitude(box.minLat);
    int maxLat=encodeLatitude(box.maxLat);
    int minLon=encodeLongitude(box.minLon);
    int maxLon=encodeLongitude(box.maxLon);
    LatLonGrid grid=new LatLonGrid(minLat,maxLat,minLon,maxLon,polygon);
    for (int j=0; j < 1000; j++) {
      int lat=TestUtil.nextInt(random(),minLat,maxLat);
      int lon=TestUtil.nextInt(random(),minLon,maxLon);
      boolean expected=polygon.contains(decodeLatitude(lat),decodeLongitude(lon));
      boolean actual=grid.contains(lat,lon);
      assertEquals(expected,actual);
    }
  }
}
