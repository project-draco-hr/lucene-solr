{
  Iterable<Input> keys=AnalyzingSuggesterTest.shuffle(new Input("foo bar baz blah",50),new Input("boo foo bar foo bee",20));
  Analyzer a=new MockAnalyzer(random());
  FreeTextSuggester sug=new FreeTextSuggester(a,a,2,(byte)0x20);
  sug.build(new InputArrayIterator(keys));
  assertEquals(2,sug.getCount());
  for (int i=0; i < 2; i++) {
    assertEquals("foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04",toString(sug.lookup("foo b",10)));
    assertEquals("foo bar/0.67 foo bee/0.33",toString(sug.lookup("foo ",10)));
    assertEquals("foo/0.33",toString(sug.lookup("foo",10)));
    assertEquals("bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11",toString(sug.lookup("b",10)));
    Path tmpDir=createTempDir("FreeTextSuggesterTest");
    Path path=tmpDir.resolve("suggester");
    OutputStream os=Files.newOutputStream(path);
    sug.store(os);
    os.close();
    InputStream is=Files.newInputStream(path);
    sug=new FreeTextSuggester(a,a,2,(byte)0x20);
    sug.load(is);
    is.close();
    assertEquals(2,sug.getCount());
  }
  a.close();
}
