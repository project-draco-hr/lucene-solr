{
  SolrCore core=h.getCore();
  SearchComponent speller=core.getSearchComponent("spellcheck");
  assertTrue("speller is null and it shouldn't be",speller != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.QT,"spellCheckCompRH");
  params.add(SpellCheckComponent.SPELLCHECK_BUILD,"true");
  params.add(CommonParams.Q,"documemt");
  params.add(SpellCheckComponent.COMPONENT_NAME,"true");
  SolrRequestHandler handler=core.getRequestHandler("spellCheckCompRH");
  SolrQueryResponse rsp=new SolrQueryResponse();
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  NamedList values=rsp.getValues();
  String cmdExec=(String)values.get("command");
  assertTrue("command is null and it shouldn't be",cmdExec != null);
  assertTrue(cmdExec + " is not equal to " + "build",cmdExec.equals("build") == true);
  NamedList spellCheck=(NamedList)values.get("spellcheck");
  assertTrue("spellCheck is null and it shouldn't be",spellCheck != null);
  NamedList suggestions=(NamedList)spellCheck.get("suggestions");
  assertTrue("suggestions is null and it shouldn't be",suggestions != null);
  NamedList document=(NamedList)suggestions.get("documemt");
  assertTrue(document.get("numFound") + " is not equal to " + "1",document.get("numFound").toString().equals("1") == true);
  assertTrue(document.get("startOffset") + " is not equal to " + "0",document.get("startOffset").toString().equals("0") == true);
  assertTrue(document.get("endOffset") + " is not equal to " + "documemt".length(),document.get("endOffset").toString().equals(String.valueOf("documemt".length())) == true);
  Collection<String> theSuggestion=(Collection<String>)document.get("suggestion");
  assertTrue("theSuggestion is null and it shouldn't be: " + document,theSuggestion != null);
  assertTrue("theSuggestion Size: " + theSuggestion.size() + " is not: "+ 1,theSuggestion.size() == 1);
  assertTrue(theSuggestion.iterator().next() + " is not equal to " + "document",theSuggestion.iterator().next().equals("document") == true);
}
