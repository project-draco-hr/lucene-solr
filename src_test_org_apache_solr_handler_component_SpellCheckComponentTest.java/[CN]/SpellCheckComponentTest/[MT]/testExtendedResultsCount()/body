{
  SolrCore core=h.getCore();
  SearchComponent speller=core.getSearchComponent("spellcheck");
  assertTrue("speller is null and it shouldn't be",speller != null);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.QT,"spellCheckCompRH");
  params.add(SpellCheckComponent.SPELLCHECK_BUILD,"true");
  params.add(CommonParams.Q,"bluo");
  params.add(SpellCheckComponent.COMPONENT_NAME,"true");
  params.add(SpellCheckComponent.SPELLCHECK_COUNT,String.valueOf(5));
  params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,String.valueOf(false));
  SolrRequestHandler handler=core.getRequestHandler("spellCheckCompRH");
  SolrQueryResponse rsp;
  rsp=new SolrQueryResponse();
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  NamedList values=rsp.getValues();
  String cmdExec=(String)values.get("command");
  assertTrue("command is null and it shouldn't be",cmdExec != null);
  assertTrue(cmdExec + " is not equal to " + "build",cmdExec.equals("build") == true);
  NamedList spellCheck=(NamedList)values.get("spellcheck");
  assertTrue("spellCheck is null and it shouldn't be",spellCheck != null);
  NamedList suggestions=(NamedList)spellCheck.get("suggestions");
  assertTrue("suggestions is null and it shouldn't be",suggestions != null);
  NamedList blue=(NamedList)suggestions.get("bluo");
  assertTrue(blue.get("numFound") + " is not equal to " + "5",blue.get("numFound").toString().equals("5") == true);
  Collection<String> theSuggestion=(Collection<String>)blue.get("suggestion");
  assertTrue("theSuggestion is null and it shouldn't be: " + blue,theSuggestion != null);
  assertTrue("theSuggestion Size: " + theSuggestion.size() + " is not: "+ 5,theSuggestion.size() == 5);
  params.remove(SpellCheckComponent.SPELLCHECK_COUNT);
  params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);
  params.remove(SpellCheckComponent.SPELLCHECK_BUILD);
  params.add(SpellCheckComponent.SPELLCHECK_COUNT,String.valueOf(3));
  params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,String.valueOf(true));
  params.add(SpellCheckComponent.SPELLCHECK_BUILD,"false");
  rsp=new SolrQueryResponse();
  handler.handleRequest(new LocalSolrQueryRequest(core,params),rsp);
  values=rsp.getValues();
  spellCheck=(NamedList)values.get("spellcheck");
  assertTrue("spellCheck is null and it shouldn't be",spellCheck != null);
  suggestions=(NamedList)spellCheck.get("suggestions");
  assertTrue("suggestions is null and it shouldn't be",suggestions != null);
  blue=(NamedList)suggestions.get("bluo");
  assertTrue(blue.get("numFound") + " is not equal to " + "3",blue.get("numFound").toString().equals("3") == true);
  SimpleOrderedMap theSuggestions;
  int idx=blue.indexOf("suggestion",0);
  theSuggestions=(SimpleOrderedMap)blue.get("suggestion",idx);
  assertTrue("theSuggestion is null and it shouldn't be: " + blue,theSuggestions != null);
  assertTrue("theSuggestions Size: " + theSuggestions.size() + " is not: "+ 2,theSuggestions.size() == 2);
  idx=blue.indexOf("suggestion",idx + 1);
  theSuggestions=(SimpleOrderedMap)blue.get("suggestion",idx);
  assertTrue("theSuggestion is null and it shouldn't be: " + blue,theSuggestions != null);
  assertTrue("theSuggestions Size: " + theSuggestions.size() + " is not: "+ 2,theSuggestions.size() == 2);
  idx=blue.indexOf("suggestion",idx + 1);
  theSuggestions=(SimpleOrderedMap)blue.get("suggestion",idx);
  assertTrue("theSuggestion is null and it shouldn't be: " + blue,theSuggestions != null);
  assertTrue("theSuggestions Size: " + theSuggestions.size() + " is not: "+ 2,theSuggestions.size() == 2);
  idx=blue.indexOf("suggestion",idx + 1);
  assertTrue(idx + " does not equal: " + -1,idx == -1);
}
