{
  IOContext context=newIOContext(random());
  SegmentReader r1=new SegmentReader(si1,DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR,context);
  SegmentReader r2=new SegmentReader(si2,DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR,context);
  final Codec codec=Codec.getDefault();
  TrackingDirectoryWrapper trackingDir=new TrackingDirectoryWrapper(si1.info.dir);
  SegmentMerger merger=new SegmentMerger(InfoStream.getDefault(),trackingDir,IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,merged,MergeState.CheckAbort.NONE,null,new FieldInfos.Builder(),codec,context);
  merger.add(r1);
  merger.add(r2);
  MergeState mergeState=merger.merge();
  r1.close();
  r2.close();
  final SegmentInfo info=new SegmentInfo(si1.info.dir,Constants.LUCENE_MAIN_VERSION,merged,si1.info.docCount + si2.info.docCount,-1,merged,false,null,false,codec,null);
  info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));
  if (useCompoundFile) {
    Collection<String> filesToDelete=IndexWriter.createCompoundFile(InfoStream.getDefault(),dir,MergeState.CheckAbort.NONE,info,newIOContext(random()));
    info.setUseCompoundFile(true);
    for (    final String fileToDelete : filesToDelete) {
      si1.info.dir.deleteFile(fileToDelete);
    }
  }
  return new SegmentInfoPerCommit(info,0,-1L);
}
