{
  IOContext context=newIOContext(random(),new IOContext(new MergeInfo(-1,-1,false,-1)));
  SegmentReader r1=new SegmentReader(si1,context);
  SegmentReader r2=new SegmentReader(si2,context);
  final Codec codec=Codec.getDefault();
  TrackingDirectoryWrapper trackingDir=new TrackingDirectoryWrapper(si1.info.dir);
  final SegmentInfo si=new SegmentInfo(si1.info.dir,Version.LATEST,merged,-1,false,codec,Collections.emptyMap(),StringHelper.randomId(),new HashMap<>());
  SegmentMerger merger=new SegmentMerger(Arrays.<CodecReader>asList(r1,r2),si,InfoStream.getDefault(),trackingDir,new FieldInfos.FieldNumbers(),context);
  MergeState mergeState=merger.merge();
  r1.close();
  r2.close();
  ;
  si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));
  if (useCompoundFile) {
    Collection<String> filesToDelete=si.files();
    codec.compoundFormat().write(dir,si,context);
    si.setUseCompoundFile(true);
    si1.info.dir.deleteFiles(filesToDelete);
  }
  return new SegmentCommitInfo(si,0,-1L,-1L,-1L);
}
