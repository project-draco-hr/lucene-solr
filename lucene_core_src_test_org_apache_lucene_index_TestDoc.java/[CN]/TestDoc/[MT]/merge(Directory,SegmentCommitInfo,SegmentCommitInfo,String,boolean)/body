{
  IOContext context=newIOContext(random());
  SegmentReader r1=new SegmentReader(si1,context);
  SegmentReader r2=new SegmentReader(si2,context);
  final Codec codec=Codec.getDefault();
  TrackingDirectoryWrapper trackingDir=new TrackingDirectoryWrapper(si1.info.dir);
  final SegmentInfo si=new SegmentInfo(si1.info.dir,Version.LATEST,merged,-1,false,codec,null,StringHelper.randomId());
  SegmentMerger merger=new SegmentMerger(Arrays.<LeafReader>asList(r1,r2),si,InfoStream.getDefault(),trackingDir,MergeState.CheckAbort.NONE,new FieldInfos.FieldNumbers(),context,true);
  MergeState mergeState=merger.merge();
  r1.close();
  r2.close();
  ;
  si.setFiles(new HashSet<>(trackingDir.getCreatedFiles()));
  if (useCompoundFile) {
    Collection<String> filesToDelete=IndexWriter.createCompoundFile(InfoStream.getDefault(),dir,MergeState.CheckAbort.NONE,si,newIOContext(random()));
    si.setUseCompoundFile(true);
    for (    final String fileToDelete : filesToDelete) {
      si1.info.dir.deleteFile(fileToDelete);
    }
  }
  return new SegmentCommitInfo(si,0,-1L,-1L,-1L);
}
