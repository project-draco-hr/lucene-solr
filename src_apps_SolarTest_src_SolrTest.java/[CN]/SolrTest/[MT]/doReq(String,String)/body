{
  int start=0;
  int limit=10;
  String handler="standard";
  Map args=new HashMap();
  args.put("indent","on");
  args.put("debugQuery","on");
  args.put("fl","score");
  args.put("version","2.0");
  if (params != null) {
    String[] plist=params.split("&");
    for (    String decl : plist) {
      String[] nv=decl.split("=");
      if (nv.length == 1) {
        nv=new String[]{nv[0],""};
      }
      if (nv[0].equals("start")) {
        start=Integer.parseInt(nv[1]);
      }
 else       if (nv[0].equals("limit")) {
        limit=Integer.parseInt(nv[1]);
      }
 else       if (nv[0].equals("qt")) {
        handler=nv[1];
      }
 else {
        args.put(nv[0],nv[1]);
      }
    }
  }
  try {
    String lucene=req;
    CharArrayWriter writer=new CharArrayWriter(32000);
    System.out.println("start=" + start + " limit="+ limit+ " handler="+ handler);
    LocalSolrQueryRequest qreq=new LocalSolrQueryRequest(core,lucene,handler,start,limit,args);
    SolrQueryResponse qrsp=new SolrQueryResponse();
    try {
      core.execute(qreq,qrsp);
      if (qrsp.getException() != null)       throw qrsp.getException();
      xmlwriter.write(writer,qreq,qrsp);
    }
  finally {
      qreq.close();
    }
    if (verbose)     System.out.println("GOT:'" + writer + "'");
    if (verbose)     System.out.println("BODY chars read:" + writer.size());
    this.numBodyChars+=writer.size();
    this.numReq++;
    return writer.toCharArray();
  }
 catch (  Exception e) {
    this.numErr++;
    e.printStackTrace();
  }
  return null;
}
