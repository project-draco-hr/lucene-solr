{
  HttpRequestBase method=null;
  HttpEntity httpEntity=null;
  try {
    String urlstr=coreUrl + queryParams.toQueryString();
    boolean isPostOrPutRequest="POST".equals(req.getMethod()) || "PUT".equals(req.getMethod());
    if ("GET".equals(req.getMethod())) {
      method=new HttpGet(urlstr);
    }
 else     if ("HEAD".equals(req.getMethod())) {
      method=new HttpHead(urlstr);
    }
 else     if (isPostOrPutRequest) {
      HttpEntityEnclosingRequestBase entityRequest="POST".equals(req.getMethod()) ? new HttpPost(urlstr) : new HttpPut(urlstr);
      InputStream in=new CloseShieldInputStream(req.getInputStream());
      HttpEntity entity=new InputStreamEntity(in,req.getContentLength());
      entityRequest.setEntity(entity);
      method=entityRequest;
    }
 else     if ("DELETE".equals(req.getMethod())) {
      method=new HttpDelete(urlstr);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unexpected method type: " + req.getMethod());
    }
    for (Enumeration<String> e=req.getHeaderNames(); e.hasMoreElements(); ) {
      String headerName=e.nextElement();
      if (!"host".equalsIgnoreCase(headerName) && !"authorization".equalsIgnoreCase(headerName) && !"accept".equalsIgnoreCase(headerName)) {
        method.addHeader(headerName,req.getHeader(headerName));
      }
    }
    if (method instanceof HttpEntityEnclosingRequest) {
      method.removeHeaders(TRANSFER_ENCODING_HEADER);
      method.removeHeaders(CONTENT_LENGTH_HEADER);
    }
    final HttpResponse response=solrDispatchFilter.httpClient.execute(method,HttpClientUtil.createNewHttpClientRequestContext(cores));
    int httpStatus=response.getStatusLine().getStatusCode();
    httpEntity=response.getEntity();
    resp.setStatus(httpStatus);
    for (HeaderIterator responseHeaders=response.headerIterator(); responseHeaders.hasNext(); ) {
      Header header=responseHeaders.nextHeader();
      if (header != null && !header.getName().equalsIgnoreCase(TRANSFER_ENCODING_HEADER) && !header.getName().equalsIgnoreCase(CONNECTION_HEADER)) {
        resp.addHeader(header.getName(),header.getValue());
      }
    }
    if (httpEntity != null) {
      if (httpEntity.getContentEncoding() != null)       resp.setCharacterEncoding(httpEntity.getContentEncoding().getValue());
      if (httpEntity.getContentType() != null)       resp.setContentType(httpEntity.getContentType().getValue());
      InputStream is=httpEntity.getContent();
      OutputStream os=resp.getOutputStream();
      IOUtils.copyLarge(is,os);
    }
  }
 catch (  IOException e) {
    sendError(new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error trying to proxy request for url: " + coreUrl,e));
  }
 finally {
    Utils.consumeFully(httpEntity);
  }
}
