{
  lrf.args.put(CommonParams.VERSION,"2.2");
  makeFile("id,str_s\n100,\"quoted\"\n101,\n102,\"\"\n103,");
  loadLocal("stream.file",filename,"commit","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted']");
  assertQ(req("id:101"),"count(//str[@name='str_s'])=0");
  assertQ(req("id:102"),"count(//str[@name='str_s'])=0");
  assertQ(req("id:103"),"count(//str[@name='str_s'])=0");
  loadLocal("stream.file",filename,"commit","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  loadLocal("stream.file",filename,"commit","true","header","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  loadLocal("stream.file",filename,"commit","true","overwrite","false");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='8']");
  loadLocal("stream.file",filename,"commit","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  loadLocal("stream.file",filename,"commit","true","map","quoted:QUOTED");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='QUOTED']");
  assertQ(req("id:101"),"count(//str[@name='str_s'])=0");
  assertQ(req("id:102"),"count(//str[@name='str_s'])=0");
  assertQ(req("id:103"),"count(//str[@name='str_s'])=0");
  loadLocal("stream.file",filename,"commit","true","map","quoted:");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"count(//str[@name='str_s'])=0");
  loadLocal("stream.file",filename,"commit","true","map",":EMPTY");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[.='EMPTY']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[.='EMPTY']");
  assertQ(req("id:103"),"//arr[@name='str_s']/str[.='EMPTY']");
  loadLocal("stream.file",filename,"commit","true","map",":EMPTY","map","quoted:QUOTED");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='QUOTED']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[.='EMPTY']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[.='EMPTY']");
  assertQ(req("id:103"),"//arr[@name='str_s']/str[.='EMPTY']");
  loadLocal("stream.file",filename,"commit","true","f.str_s.keepEmpty","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[.='']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[.='']");
  assertQ(req("id:103"),"//arr[@name='str_s']/str[.='']");
  loadLocal("stream.file",filename,"commit","true","fieldnames","id,my_s","header","true","f.my_s.map",":EMPTY");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='my_s']/str[.='quoted']");
  assertQ(req("id:101"),"count(//arr[@name='str_s']/str)=0");
  assertQ(req("id:102"),"count(//arr[@name='str_s']/str)=0");
  assertQ(req("id:103"),"count(//arr[@name='str_s']/str)=0");
  assertQ(req("id:101"),"//arr[@name='my_s']/str[.='EMPTY']");
  assertQ(req("id:102"),"//arr[@name='my_s']/str[.='EMPTY']");
  assertQ(req("id:103"),"//arr[@name='my_s']/str[.='EMPTY']");
  assertQ(req("id:id"),"//*[@numFound='0']");
  loadLocal("stream.file",filename,"commit","true","keepEmpty","true","skip","str_s");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:[100 TO 110]"),"count(//str[@name='str_s']/str)=0");
  loadLocal("stream.file",filename,"commit","true","keepEmpty","true","fieldnames","id,");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:[100 TO 110]"),"count(//str[@name='str_s']/str)=0");
  loadLocal("stream.file",filename,"commit","true","fieldnames","id,my_s","header","false");
  assertQ(req("id:id"),"//*[@numFound='1']");
  assertQ(req("id:100"),"//arr[@name='my_s']/str[.='quoted']");
  loadLocal("stream.file",filename,"commit","true","fieldnames","id,my_s","header","false","skipLines","1");
  assertQ(req("id:id"),"//*[@numFound='1']");
  assertQ(req("id:100"),"//arr[@name='my_s']/str[.='quoted']");
  makeFile("id,str_s\n" + "100,\"quoted\"\n" + "101,\"a,b,c\"\n"+ "102,\"a,,b\"\n"+ "103,\n");
  loadLocal("stream.file",filename,"commit","true","f.str_s.map",":EMPTY","f.str_s.split","true");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[1][.='a']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[2][.='b']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[3][.='c']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[2][.='EMPTY']");
  assertQ(req("id:103"),"//arr[@name='str_s']/str[.='EMPTY']");
  makeFile("id|str_s\n" + "100|^quoted^\n" + "101|a;'b';c\n"+ "102|a;;b\n"+ "103|\n"+ "104|a\\\\b\n");
  loadLocal("stream.file",filename,"commit","true","separator","|","encapsulator","^","f.str_s.map",":EMPTY","f.str_s.split","true","f.str_s.separator",";","f.str_s.encapsulator","'");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='5']");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[1][.='a']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[2][.='b']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[3][.='c']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[2][.='EMPTY']");
  assertQ(req("id:103"),"//arr[@name='str_s']/str[.='EMPTY']");
  assertQ(req("id:104"),"//arr[@name='str_s']/str[.='a\\\\b']");
  makeFile("id,str_s\n" + "100,\"quoted \"\" \\ string\"\n" + "101,unquoted \"\" \\ string\n"+ "102,end quote \\\n");
  loadLocal("stream.file",filename,"commit","true");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='quoted \" \\ string']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[.='unquoted \"\" \\ string']");
  assertQ(req("id:102"),"//arr[@name='str_s']/str[.='end quote \\']");
  makeFile("id,str_s\n" + "100,\"quoted \"\" \\\" \\\\ string\"\n" + "101,unquoted \"\" \\\" \\, \\\\ string\n");
  loadLocal("stream.file",filename,"commit","true","escape","\\");
  assertQ(req("id:100"),"//arr[@name='str_s']/str[.='\"quoted \"\" \" \\ string\"']");
  assertQ(req("id:101"),"//arr[@name='str_s']/str[.='unquoted \"\" \" , \\ string']");
}
