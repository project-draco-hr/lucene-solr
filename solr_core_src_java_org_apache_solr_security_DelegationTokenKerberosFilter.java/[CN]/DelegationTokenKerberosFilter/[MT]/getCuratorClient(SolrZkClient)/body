{
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  if (zkClient == null) {
    throw new IllegalArgumentException("zkClient required");
  }
  String zkHost=zkClient.getZkServerAddress();
  String zkChroot=zkHost.substring(zkHost.indexOf("/"));
  zkChroot=zkChroot.startsWith("/") ? zkChroot.substring(1) : zkChroot;
  String zkNamespace=zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;
  String zkConnectionString=zkHost.substring(0,zkHost.indexOf("/"));
  SolrZkToCuratorCredentialsACLs curatorToSolrZk=new SolrZkToCuratorCredentialsACLs(zkClient);
  final int connectionTimeoutMs=30000;
  curatorFramework=CuratorFrameworkFactory.builder().namespace(zkNamespace).connectString(zkConnectionString).retryPolicy(retryPolicy).aclProvider(curatorToSolrZk.getACLProvider()).authorization(curatorToSolrZk.getAuthInfos()).sessionTimeoutMs(zkClient.getZkClientTimeout()).connectionTimeoutMs(connectionTimeoutMs).build();
  curatorFramework.start();
  return curatorFramework;
}
