{
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory,newIndexWriterConfig(new MockAnalyzer(random())));
  final int docs=atLeast(10);
  buildIndex(writer,docs);
  IndexReader reader=DirectoryReader.open(directory);
  LeafReader leafReader=reader.leaves().get(0).reader();
  FilterLeafReader filterReader=new FilterLeafReader(leafReader){
    @Override public Bits getDocsWithField(    String field) throws IOException {
switch (field) {
case "with_matchall":
        return new Bits.MatchAllBits(maxDoc());
case "with_matchno":
      return new Bits.MatchNoBits(maxDoc());
case "with_bitset":
    BitSet b=random().nextBoolean() ? new SparseFixedBitSet(maxDoc()) : new FixedBitSet(maxDoc());
  b.set(random().nextInt(maxDoc()));
return b;
}
return super.getDocsWithField(field);
}
}
;
Filter filter=new FieldValueFilter("with_matchall",true);
DocIdSet set=filter.getDocIdSet(filterReader.getContext(),null);
assertNull(set);
filter=new FieldValueFilter("with_matchno");
set=filter.getDocIdSet(filterReader.getContext(),null);
assertNull(set);
filter=new FieldValueFilter("with_bitset");
set=filter.getDocIdSet(filterReader.getContext(),null);
assertTrue(set instanceof BitDocIdSet);
reader.close();
directory.close();
}
