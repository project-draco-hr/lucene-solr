{
  if (runData.size() == 0) {
    return "# [NO RUN DATA]";
  }
  HashMap<String,LDCounter> resByTask=new HashMap<String,LDCounter>();
  StringBuilder sb=new StringBuilder();
  String lineSep=System.getProperty("line.separator");
  sb.append("warm = Warm Index Reader").append(lineSep).append("srch = Search Index").append(lineSep).append("trav = Traverse Hits list, optionally retrieving document").append(lineSep).append(lineSep);
  for (int i=0; i < COLS.length; i++) {
    sb.append(COLS[i]);
  }
  sb.append("\n");
  LinkedHashMap<String,TestData.LCounter[]> mapMem=new LinkedHashMap<String,TestData.LCounter[]>();
  LinkedHashMap<String,DCounter> mapSpeed=new LinkedHashMap<String,DCounter>();
  for (int i=0; i < runData.size(); i++) {
    TestRunData trd=runData.get(i);
    for (    final String label : trd.getLabels()) {
      MemUsage mem=trd.getMemUsage(label);
      if (mem != null) {
        TestData.LCounter[] tm=mapMem.get(label);
        if (tm == null) {
          tm=new TestData.LCounter[2];
          tm[0]=new TestData.LCounter();
          tm[1]=new TestData.LCounter();
          mapMem.put(label,tm);
        }
        tm[0].total+=mem.avgFree;
        tm[0].count++;
        tm[1].total+=mem.avgTotal;
        tm[1].count++;
      }
      TimeData td=trd.getTotals(label);
      if (td != null) {
        TestData.DCounter dc=mapSpeed.get(label);
        if (dc == null) {
          dc=new TestData.DCounter();
          mapSpeed.put(label,dc);
        }
        dc.count++;
        dc.total+=(td.count > 0 && td.elapsed <= 0 ? 1 : td.elapsed);
        dc.recordCount+=td.count;
      }
    }
  }
  LinkedHashMap<String,String> res=new LinkedHashMap<String,String>();
  Iterator<String> it=mapSpeed.keySet().iterator();
  while (it.hasNext()) {
    String label=it.next();
    TestData.DCounter dc=mapSpeed.get(label);
    res.put(label,format(dc.count,RUNCNT) + format(dc.recordCount / dc.count,RECCNT) + format(1,(float)(dc.recordCount * 1000.0 / (dc.total > 0 ? dc.total : 1.0)),RECSEC));
    String task=label.substring(label.lastIndexOf("-") + 1);
    LDCounter ldc=resByTask.get(task);
    if (ldc == null) {
      ldc=new LDCounter();
      resByTask.put(task,ldc);
    }
    ldc.Dcount+=dc.count;
    ldc.DrecordCount+=dc.recordCount;
    ldc.Dtotal+=(dc.count > 0 && dc.total <= 0 ? 1 : dc.total);
  }
  it=mapMem.keySet().iterator();
  while (it.hasNext()) {
    String label=it.next();
    TestData.LCounter[] lc=mapMem.get(label);
    String speed=res.get(label);
    boolean makeSpeed=false;
    if (speed == null) {
      makeSpeed=true;
      speed=format(lc[0].count,RUNCNT) + format(0,RECCNT) + format(0,(float)0.0,RECSEC);
    }
    res.put(label,speed + format(0,lc[0].total / lc[0].count,FREEMEM) + format(0,lc[1].total / lc[1].count,TOTMEM));
    String task=label.substring(label.lastIndexOf("-") + 1);
    LDCounter ldc=resByTask.get(task);
    if (ldc == null) {
      ldc=new LDCounter();
      resByTask.put(task,ldc);
      makeSpeed=true;
    }
    if (makeSpeed) {
      ldc.Dcount+=lc[0].count;
    }
    ldc.Lcount0+=lc[0].count;
    ldc.Lcount1+=lc[1].count;
    ldc.Ltotal0+=lc[0].total;
    ldc.Ltotal1+=lc[1].total;
  }
  it=res.keySet().iterator();
  while (it.hasNext()) {
    String label=it.next();
    sb.append(format(prefix,ID));
    sb.append(format(label,OP));
    sb.append(res.get(label)).append("\n");
  }
  sb.append("\n");
  for (int i=0; i < COLS.length; i++) {
    sb.append(COLS[i]);
  }
  sb.append("\n");
  it=resByTask.keySet().iterator();
  while (it.hasNext()) {
    String task=it.next();
    LDCounter ldc=resByTask.get(task);
    sb.append(format("    ",ID));
    sb.append(format(task,OP));
    sb.append(format(ldc.Dcount,RUNCNT));
    sb.append(format(ldc.DrecordCount / ldc.Dcount,RECCNT));
    sb.append(format(1,(float)(ldc.DrecordCount * 1000.0 / (ldc.Dtotal > 0 ? ldc.Dtotal : 1.0)),RECSEC));
    sb.append(format(0,ldc.Ltotal0 / ldc.Lcount0,FREEMEM));
    sb.append(format(0,ldc.Ltotal1 / ldc.Lcount1,TOTMEM));
    sb.append("\n");
  }
  return sb.toString();
}
