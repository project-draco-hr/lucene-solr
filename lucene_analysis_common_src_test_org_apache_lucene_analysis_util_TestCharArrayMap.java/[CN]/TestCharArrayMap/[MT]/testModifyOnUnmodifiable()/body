{
  CharArrayMap<Integer> map=new CharArrayMap<>(2,false);
  map.put("foo",1);
  map.put("bar",2);
  final int size=map.size();
  assertEquals(2,size);
  assertTrue(map.containsKey("foo"));
  assertEquals(1,map.get("foo").intValue());
  assertTrue(map.containsKey("bar"));
  assertEquals(2,map.get("bar").intValue());
  map=CharArrayMap.unmodifiableMap(map);
  assertEquals("Map size changed due to unmodifiableMap call",size,map.size());
  String NOT_IN_MAP="SirGallahad";
  assertFalse("Test String already exists in map",map.containsKey(NOT_IN_MAP));
  assertNull("Test String already exists in map",map.get(NOT_IN_MAP));
  try {
    map.put(NOT_IN_MAP.toCharArray(),3);
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable map",map.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map",map.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.put(NOT_IN_MAP,3);
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable map",map.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map",map.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.put(new StringBuilder(NOT_IN_MAP),3);
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable map",map.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map",map.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.clear();
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.entrySet().clear();
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.keySet().clear();
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.put((Object)NOT_IN_MAP,3);
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable map",map.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map",map.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  try {
    map.putAll(Collections.singletonMap(NOT_IN_MAP,3));
    fail("Modified unmodifiable map");
  }
 catch (  UnsupportedOperationException e) {
    assertFalse("Test String has been added to unmodifiable map",map.containsKey(NOT_IN_MAP));
    assertNull("Test String has been added to unmodifiable map",map.get(NOT_IN_MAP));
    assertEquals("Size of unmodifiable map has changed",size,map.size());
  }
  assertTrue(map.containsKey("foo"));
  assertEquals(1,map.get("foo").intValue());
  assertTrue(map.containsKey("bar"));
  assertEquals(2,map.get("bar").intValue());
}
