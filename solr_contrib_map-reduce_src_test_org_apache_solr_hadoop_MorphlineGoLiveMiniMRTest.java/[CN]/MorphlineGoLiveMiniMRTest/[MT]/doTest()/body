{
  waitForRecoveriesToFinish(false);
  FileSystem fs=dfsCluster.getFileSystem();
  Path inDir=fs.makeQualified(new Path("/user/testing/testMapperReducer/input"));
  fs.delete(inDir,true);
  String DATADIR="/user/testing/testMapperReducer/data";
  Path dataDir=fs.makeQualified(new Path(DATADIR));
  fs.delete(dataDir,true);
  Path outDir=fs.makeQualified(new Path("/user/testing/testMapperReducer/output"));
  fs.delete(outDir,true);
  assertTrue(fs.mkdirs(inDir));
  Path INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile1);
  JobConf jobConf=getJobConf();
  jobConf.set("jobclient.output.filter","ALL");
  jobConf.setMaxMapAttempts(1);
  jobConf.setMaxReduceAttempts(1);
  jobConf.setJar(SEARCH_ARCHIVES_JAR);
  MapReduceIndexerTool tool;
  int res;
  QueryResponse results;
  HttpSolrServer server=new HttpSolrServer(cloudJettys.get(0).url);
  String[] args=new String[]{};
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--log4j=" + getFile("log4j.properties").getAbsolutePath(),"--mappers=3",random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--go-live-threads",Integer.toString(random().nextInt(15) + 1),"--verbose","--go-live"};
  args=prependInitialArgs(args);
  List<String> argList=new ArrayList<>();
  getShardUrlArgs(argList);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=server.query(new SolrQuery("*:*"));
    assertEquals(20,results.getResults().getNumFound());
  }
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(inDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile2);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--mappers=3","--verbose","--go-live",random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--go-live-threads",Integer.toString(random().nextInt(15) + 1)};
  args=prependInitialArgs(args);
  argList=new ArrayList<>();
  getShardUrlArgs(argList);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    results=server.query(new SolrQuery("*:*"));
    assertEquals(22,results.getResults().getNumFound());
  }
  String collection="collection1";
  if (random().nextBoolean()) {
    createAlias("updatealias","collection1");
    collection="updatealias";
  }
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  cloudClient.deleteByQuery("*:*");
  cloudClient.commit();
  assertEquals(0,cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  args=new String[]{"--output-dir=" + outDir.toString(),"--mappers=3","--reducers=12","--fanout=2","--verbose","--go-live",random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),"--zk-host",zkServer.getZkAddress(),"--collection",collection};
  args=prependInitialArgs(args);
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    SolrDocumentList resultDocs=executeSolrQuery(cloudClient,"*:*");
    assertEquals(RECORD_COUNT,resultDocs.getNumFound());
    assertEquals(RECORD_COUNT,resultDocs.size());
    for (int i=0; i < RECORD_COUNT; i++) {
      SolrDocument doc=resultDocs.get(i);
      SolrInputDocument update=new SolrInputDocument();
      for (      Map.Entry<String,Object> entry : doc.entrySet()) {
        update.setField(entry.getKey(),entry.getValue());
      }
      update.setField("user_screen_name","Nadja" + i);
      update.removeField("_version_");
      cloudClient.add(update);
    }
    cloudClient.commit();
    SolrDocumentList resultDocs2=executeSolrQuery(cloudClient,"*:*");
    assertEquals(RECORD_COUNT,resultDocs2.getNumFound());
    assertEquals(RECORD_COUNT,resultDocs2.size());
    for (int i=0; i < RECORD_COUNT; i++) {
      SolrDocument doc=resultDocs.get(i);
      SolrDocument doc2=resultDocs2.get(i);
      assertEquals(doc.getFirstValue("id"),doc2.getFirstValue("id"));
      assertEquals("Nadja" + i,doc2.getFirstValue("user_screen_name"));
      assertEquals(doc.getFirstValue("text"),doc2.getFirstValue("text"));
      cloudClient.deleteById((String)doc.getFirstValue("id"));
    }
    cloudClient.commit();
    assertEquals(0,executeSolrQuery(cloudClient,"*:*").size());
  }
  cloudClient.deleteByQuery("*:*");
  cloudClient.commit();
  assertEquals(0,cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  server.shutdown();
  String replicatedCollection="replicated_collection";
  if (TEST_NIGHTLY) {
    createCollection(replicatedCollection,11,3,11);
  }
 else {
    createCollection(replicatedCollection,2,3,2);
  }
  waitForRecoveriesToFinish(false);
  cloudClient.setDefaultCollection(replicatedCollection);
  fs.delete(inDir,true);
  fs.delete(outDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(dataDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--mappers=3","--reducers=22","--fanout=2","--verbose","--go-live","--zk-host",zkServer.getZkAddress(),"--collection",replicatedCollection,dataDir.toString()};
  args=prependInitialArgs(args);
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    SolrDocumentList resultDocs=executeSolrQuery(cloudClient,"*:*");
    assertEquals(RECORD_COUNT,resultDocs.getNumFound());
    assertEquals(RECORD_COUNT,resultDocs.size());
    checkConsistency(replicatedCollection);
    for (int i=0; i < RECORD_COUNT; i++) {
      SolrDocument doc=resultDocs.get(i);
      SolrInputDocument update=new SolrInputDocument();
      for (      Map.Entry<String,Object> entry : doc.entrySet()) {
        update.setField(entry.getKey(),entry.getValue());
      }
      update.setField("user_screen_name","@Nadja" + i);
      update.removeField("_version_");
      cloudClient.add(update);
    }
    cloudClient.commit();
    SolrDocumentList resultDocs2=executeSolrQuery(cloudClient,"*:*");
    assertEquals(RECORD_COUNT,resultDocs2.getNumFound());
    assertEquals(RECORD_COUNT,resultDocs2.size());
    for (int i=0; i < RECORD_COUNT; i++) {
      SolrDocument doc=resultDocs.get(i);
      SolrDocument doc2=resultDocs2.get(i);
      assertEquals(doc.getFieldValues("id"),doc2.getFieldValues("id"));
      assertEquals(1,doc.getFieldValues("id").size());
      assertEquals(Arrays.asList("@Nadja" + i),doc2.getFieldValues("user_screen_name"));
      assertEquals(doc.getFieldValues("text"),doc2.getFieldValues("text"));
      cloudClient.deleteById((String)doc.getFirstValue("id"));
    }
    cloudClient.commit();
    assertEquals(0,executeSolrQuery(cloudClient,"*:*").size());
  }
  cloudClient.deleteByQuery("*:*");
  cloudClient.commit();
  assertEquals(0,executeSolrQuery(cloudClient,"*:*").getNumFound());
  assertEquals(0,executeSolrQuery(cloudClient,"*:*").size());
  fs.delete(inDir,true);
  fs.delete(dataDir,true);
  assertTrue(fs.mkdirs(dataDir));
  INPATH=upAvroFile(fs,inDir,DATADIR,dataDir,inputAvroFile3);
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--shards","2","--mappers=3","--verbose","--go-live","--go-live-threads",Integer.toString(random().nextInt(15) + 1),dataDir.toString()};
  args=prependInitialArgs(args);
  argList=new ArrayList<>();
  getShardUrlArgs(argList,replicatedCollection);
  args=concat(args,argList.toArray(new String[0]));
  if (true) {
    tool=new MapReduceIndexerTool();
    res=ToolRunner.run(jobConf,tool,args);
    assertEquals(0,res);
    assertTrue(tool.job.isComplete());
    assertTrue(tool.job.isSuccessful());
    checkConsistency(replicatedCollection);
    assertEquals(RECORD_COUNT,executeSolrQuery(cloudClient,"*:*").size());
  }
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set(CoreAdminParams.DELETE_INSTANCE_DIR,true);
  params.set(CoreAdminParams.DELETE_DATA_DIR,true);
  params.set(CoreAdminParams.DELETE_INDEX,true);
  params.set("name",replicatedCollection);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  cloudClient.request(request);
  long timeout=System.currentTimeMillis() + 10000;
  while (cloudClient.getZkStateReader().getClusterState().hasCollection(replicatedCollection)) {
    if (System.currentTimeMillis() > timeout) {
      throw new AssertionError("Timeout waiting to see removed collection leave clusterstate");
    }
    Thread.sleep(200);
    cloudClient.getZkStateReader().updateClusterState(true);
  }
  if (TEST_NIGHTLY) {
    createCollection(replicatedCollection,11,3,11);
  }
 else {
    createCollection(replicatedCollection,2,3,2);
  }
  waitForRecoveriesToFinish(replicatedCollection,false);
  printLayout();
  assertEquals(0,executeSolrQuery(cloudClient,"*:*").getNumFound());
  args=new String[]{"--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),"--output-dir=" + outDir.toString(),"--shards","2","--mappers=3","--verbose","--go-live","--go-live-threads",Integer.toString(random().nextInt(15) + 1),dataDir.toString()};
  args=prependInitialArgs(args);
  argList=new ArrayList<>();
  getShardUrlArgs(argList,replicatedCollection);
  args=concat(args,argList.toArray(new String[0]));
  tool=new MapReduceIndexerTool();
  res=ToolRunner.run(jobConf,tool,args);
  assertEquals(0,res);
  assertTrue(tool.job.isComplete());
  assertTrue(tool.job.isSuccessful());
  checkConsistency(replicatedCollection);
  assertEquals(RECORD_COUNT,executeSolrQuery(cloudClient,"*:*").size());
}
