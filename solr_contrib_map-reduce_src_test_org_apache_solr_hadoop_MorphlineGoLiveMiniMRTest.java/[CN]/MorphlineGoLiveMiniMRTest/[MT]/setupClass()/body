{
  assumeTrue("Currently this test can only be run without the lucene test security policy in place",System.getProperty("java.security.manager","").equals(""));
  assumeFalse("HDFS tests were disabled by -Dtests.disableHdfs",Boolean.parseBoolean(System.getProperty("tests.disableHdfs","false")));
  assumeFalse("FIXME: This test does not work with Windows because of native library requirements",Constants.WINDOWS);
  assumeFalse("FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301",Constants.JRE_IS_MINIMUM_JAVA8);
  assumeFalse("FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301",System.getProperty("java.vm.info","<?>").contains("IBM J9"));
  solrHomeDirectory=TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());
  AbstractZkTestCase.SOLRHOME=solrHomeDirectory;
  FileUtils.copyDirectory(MINIMR_INSTANCE_DIR,AbstractZkTestCase.SOLRHOME);
  tempDir=TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();
  FileUtils.copyFile(new File(RESOURCES_DIR + "/custom-mimetypes.xml"),new File(tempDir + "/custom-mimetypes.xml"));
  AbstractSolrMorphlineTestBase.setupMorphline(tempDir,"test-morphlines/solrCellDocumentTypes",true);
  System.setProperty("hadoop.log.dir",new File(dataDir,"logs").getAbsolutePath());
  int taskTrackers=2;
  int dataNodes=2;
  System.setProperty("solr.hdfs.blockcache.enabled","false");
  JobConf conf=new JobConf();
  conf.set("dfs.block.access.token.enable","false");
  conf.set("dfs.permissions","true");
  conf.set("hadoop.security.authentication","simple");
  conf.set(YarnConfiguration.NM_LOCAL_DIRS,dataDir + File.separator + "nm-local-dirs");
  conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS,dataDir + File.separator + "nm-logs");
  createTempDir();
  new File(dataDir + File.separator + "nm-local-dirs").mkdirs();
  System.setProperty("test.build.dir",dataDir + File.separator + "hdfs"+ File.separator+ "test-build-dir");
  System.setProperty("test.build.data",dataDir + File.separator + "hdfs"+ File.separator+ "build");
  System.setProperty("test.cache.data",dataDir + File.separator + "hdfs"+ File.separator+ "cache");
  dfsCluster=new MiniDFSCluster(conf,dataNodes,true,null);
  FileSystem fileSystem=dfsCluster.getFileSystem();
  fileSystem.mkdirs(new Path("/tmp"));
  fileSystem.mkdirs(new Path("/user"));
  fileSystem.mkdirs(new Path("/hadoop/mapred/system"));
  fileSystem.setPermission(new Path("/tmp"),FsPermission.valueOf("-rwxrwxrwx"));
  fileSystem.setPermission(new Path("/user"),FsPermission.valueOf("-rwxrwxrwx"));
  fileSystem.setPermission(new Path("/hadoop/mapred/system"),FsPermission.valueOf("-rwx------"));
  mrCluster=MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class,1,conf,new File(dataDir,"mrCluster"));
  ProxyUsers.refreshSuperUserGroupsConfiguration(conf);
}
