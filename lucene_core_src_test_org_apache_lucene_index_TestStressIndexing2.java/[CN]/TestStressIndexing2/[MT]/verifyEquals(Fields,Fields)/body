{
  if (d1 == null) {
    assertTrue(d2 == null || d2.size() == 0);
    return;
  }
  assertTrue(d2 != null);
  Iterator<String> fieldsEnum2=d2.iterator();
  for (  String field1 : d1) {
    String field2=fieldsEnum2.next();
    assertEquals(field1,field2);
    Terms terms1=d1.terms(field1);
    assertNotNull(terms1);
    TermsEnum termsEnum1=terms1.iterator(null);
    Terms terms2=d2.terms(field2);
    assertNotNull(terms2);
    TermsEnum termsEnum2=terms2.iterator(null);
    PostingsEnum dpEnum1=null;
    PostingsEnum dpEnum2=null;
    PostingsEnum dEnum1=null;
    PostingsEnum dEnum2=null;
    BytesRef term1;
    while ((term1=termsEnum1.next()) != null) {
      BytesRef term2=termsEnum2.next();
      assertEquals(term1,term2);
      assertEquals(termsEnum1.totalTermFreq(),termsEnum2.totalTermFreq());
      dpEnum1=termsEnum1.postings(null,dpEnum1,PostingsEnum.ALL);
      dpEnum2=termsEnum2.postings(null,dpEnum2,PostingsEnum.ALL);
      if (terms1.hasPositions()) {
        assertTrue(terms2.hasPositions());
        int docID1=dpEnum1.nextDoc();
        dpEnum2.nextDoc();
        assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);
        int freq1=dpEnum1.freq();
        int freq2=dpEnum2.freq();
        assertEquals(freq1,freq2);
        for (int posUpto=0; posUpto < freq1; posUpto++) {
          int pos1=dpEnum1.nextPosition();
          int pos2=dpEnum2.nextPosition();
          assertEquals(pos1,pos2);
          if (terms1.hasOffsets()) {
            assertTrue(terms2.hasOffsets());
            assertEquals(dpEnum1.startOffset(),dpEnum2.startOffset());
            assertEquals(dpEnum1.endOffset(),dpEnum2.endOffset());
          }
        }
        assertEquals(DocIdSetIterator.NO_MORE_DOCS,dpEnum1.nextDoc());
        assertEquals(DocIdSetIterator.NO_MORE_DOCS,dpEnum2.nextDoc());
      }
 else {
        dEnum1=TestUtil.docs(random(),termsEnum1,null,dEnum1,PostingsEnum.FREQS);
        dEnum2=TestUtil.docs(random(),termsEnum2,null,dEnum2,PostingsEnum.FREQS);
        assertNotNull(dEnum1);
        assertNotNull(dEnum2);
        int docID1=dEnum1.nextDoc();
        dEnum2.nextDoc();
        assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);
        int freq1=dEnum1.freq();
        int freq2=dEnum2.freq();
        assertEquals(freq1,freq2);
        assertEquals(DocIdSetIterator.NO_MORE_DOCS,dEnum1.nextDoc());
        assertEquals(DocIdSetIterator.NO_MORE_DOCS,dEnum2.nextDoc());
      }
    }
    assertNull(termsEnum2.next());
  }
  assertFalse(fieldsEnum2.hasNext());
}
