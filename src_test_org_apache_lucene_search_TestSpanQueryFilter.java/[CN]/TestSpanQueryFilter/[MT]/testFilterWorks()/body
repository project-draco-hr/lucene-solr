{
  Directory dir=new RAMDirectory();
  IndexWriter writer=new IndexWriter(dir,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED);
  for (int i=0; i < 500; i++) {
    Document document=new Document();
    document.add(new Field("field",English.intToEnglish(i) + " equals " + English.intToEnglish(i),Field.Store.NO,Field.Index.TOKENIZED));
    writer.addDocument(document);
  }
  writer.close();
  IndexReader reader=IndexReader.open(dir);
  SpanTermQuery query=new SpanTermQuery(new Term("field",English.intToEnglish(10).trim()));
  SpanQueryFilter filter=new SpanQueryFilter(query);
  SpanFilterResult result=filter.bitSpans(reader);
  BitSet bits=result.getBits();
  assertTrue("bits is null and it shouldn't be",bits != null);
  assertTrue("tenth bit is not on",bits.get(10));
  List spans=result.getPositions();
  assertTrue("spans is null and it shouldn't be",spans != null);
  assertTrue("spans Size: " + spans.size() + " is not: "+ bits.cardinality(),spans.size() == bits.cardinality());
  for (Iterator iterator=spans.iterator(); iterator.hasNext(); ) {
    SpanFilterResult.PositionInfo info=(SpanFilterResult.PositionInfo)iterator.next();
    assertTrue("info is null and it shouldn't be",info != null);
    assertTrue("Bit is not on and it should be",bits.get(info.getDoc()));
    assertTrue("info.getPositions() Size: " + info.getPositions().size() + " is not: "+ 2,info.getPositions().size() == 2);
  }
  reader.close();
}
