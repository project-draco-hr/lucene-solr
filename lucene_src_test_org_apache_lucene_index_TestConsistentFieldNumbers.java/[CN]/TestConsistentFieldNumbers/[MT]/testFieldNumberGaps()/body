{
  int numIters=atLeast(13);
  for (int i=0; i < numIters; i++) {
    Directory dir=newDirectory();
{
      IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));
      Document d=new Document();
      d.add(new Field("f1","d1 first field",TextField.TYPE_STORED));
      d.add(new Field("f2","d1 second field",TextField.TYPE_STORED));
      writer.addDocument(d);
      writer.close();
      SegmentInfos sis=new SegmentInfos();
      sis.read(dir);
      assertEquals(1,sis.size());
      FieldInfos fis1=sis.info(0).getFieldInfos();
      assertEquals("f1",fis1.fieldInfo(0).name);
      assertEquals("f2",fis1.fieldInfo(1).name);
      assertTrue(dir.fileExists("_1.fnx"));
    }
{
      IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(random.nextBoolean() ? NoMergePolicy.NO_COMPOUND_FILES : NoMergePolicy.COMPOUND_FILES));
      Document d=new Document();
      d.add(new Field("f1","d2 first field",TextField.TYPE_STORED));
      d.add(new BinaryField("f3",new byte[]{1,2,3}));
      writer.addDocument(d);
      writer.close();
      SegmentInfos sis=new SegmentInfos();
      sis.read(dir);
      assertEquals(2,sis.size());
      FieldInfos fis1=sis.info(0).getFieldInfos();
      FieldInfos fis2=sis.info(1).getFieldInfos();
      assertEquals("f1",fis1.fieldInfo(0).name);
      assertEquals("f2",fis1.fieldInfo(1).name);
      assertEquals("f1",fis2.fieldInfo(0).name);
      assertNull(fis2.fieldInfo(1));
      assertEquals("f3",fis2.fieldInfo(2).name);
      assertFalse(dir.fileExists("_1.fnx"));
      assertTrue(dir.fileExists("_2.fnx"));
    }
{
      IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(random.nextBoolean() ? NoMergePolicy.NO_COMPOUND_FILES : NoMergePolicy.COMPOUND_FILES));
      Document d=new Document();
      d.add(new Field("f1","d3 first field",TextField.TYPE_STORED));
      d.add(new Field("f2","d3 second field",TextField.TYPE_STORED));
      d.add(new BinaryField("f3",new byte[]{1,2,3,4,5}));
      writer.addDocument(d);
      writer.close();
      SegmentInfos sis=new SegmentInfos();
      sis.read(dir);
      assertEquals(3,sis.size());
      FieldInfos fis1=sis.info(0).getFieldInfos();
      FieldInfos fis2=sis.info(1).getFieldInfos();
      FieldInfos fis3=sis.info(2).getFieldInfos();
      assertEquals("f1",fis1.fieldInfo(0).name);
      assertEquals("f2",fis1.fieldInfo(1).name);
      assertEquals("f1",fis2.fieldInfo(0).name);
      assertNull(fis2.fieldInfo(1));
      assertEquals("f3",fis2.fieldInfo(2).name);
      assertEquals("f1",fis3.fieldInfo(0).name);
      assertEquals("f2",fis3.fieldInfo(1).name);
      assertEquals("f3",fis3.fieldInfo(2).name);
      assertFalse(dir.fileExists("_1.fnx"));
      assertTrue(dir.fileExists("_2.fnx"));
      assertFalse(dir.fileExists("_3.fnx"));
    }
{
      IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(random.nextBoolean() ? NoMergePolicy.NO_COMPOUND_FILES : NoMergePolicy.COMPOUND_FILES));
      writer.deleteDocuments(new Term("f1","d1"));
      writer.expungeDeletes();
      writer.close();
    }
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMergePolicy(new LogByteSizeMergePolicy()).setInfoStream(new FailOnNonBulkMergesInfoStream()));
    writer.forceMerge(1);
    writer.close();
    SegmentInfos sis=new SegmentInfos();
    sis.read(dir);
    assertEquals(1,sis.size());
    FieldInfos fis1=sis.info(0).getFieldInfos();
    assertEquals("f1",fis1.fieldInfo(0).name);
    assertEquals("f2",fis1.fieldInfo(1).name);
    assertEquals("f3",fis1.fieldInfo(2).name);
    assertFalse(dir.fileExists("_1.fnx"));
    assertTrue(dir.fileExists("_2.fnx"));
    assertFalse(dir.fileExists("_3.fnx"));
    dir.close();
  }
}
