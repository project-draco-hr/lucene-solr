{
  final int NUM_DOCS=atLeast(200);
  final int MAX_FIELDS=atLeast(50);
  int[][] docs=new int[NUM_DOCS][4];
  for (int i=0; i < docs.length; i++) {
    for (int j=0; j < docs[i].length; j++) {
      docs[i][j]=random.nextInt(MAX_FIELDS);
    }
  }
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)));
  for (int i=0; i < NUM_DOCS; i++) {
    Document d=new Document();
    for (int j=0; j < docs[i].length; j++) {
      d.add(getField(docs[i][j]));
    }
    writer.addDocument(d);
  }
  writer.optimize();
  writer.close();
  SegmentInfos sis=new SegmentInfos();
  sis.read(dir);
  for (  SegmentInfo si : sis) {
    FieldInfos fis=si.getFieldInfos();
    for (    FieldInfo fi : fis) {
      Field expected=getField(Integer.parseInt(fi.name));
      assertEquals(expected.fieldType().indexed(),fi.isIndexed);
      assertEquals(expected.fieldType().storeTermVectors(),fi.storeTermVector);
      assertEquals(expected.fieldType().storeTermVectorPositions(),fi.storePositionWithTermVector);
      assertEquals(expected.fieldType().storeTermVectorOffsets(),fi.storeOffsetWithTermVector);
    }
  }
  dir.close();
}
