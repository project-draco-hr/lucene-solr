{
  String msg=q.toString();
  SearchResults got=executeQuery(makeQuery(q),Math.max(100,q.ids.size() + 1));
  if (storeShape && got.numFound > 0) {
    assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));
  }
  if (concern.orderIsImportant) {
    Iterator<String> ids=q.ids.iterator();
    for (    SearchResult r : got.results) {
      String id=r.document.get("id");
      if (!ids.hasNext()) {
        fail(msg + " :: Did not get enough results.  Expect" + q.ids+ ", got: "+ got.toDebugString());
      }
      assertEquals("out of order: " + msg,ids.next(),id);
    }
    if (ids.hasNext()) {
      fail(msg + " :: expect more results then we got: " + ids.next());
    }
  }
 else {
    if (concern.resultsAreSuperset) {
      Set<String> found=new HashSet<>();
      for (      SearchResult r : got.results) {
        found.add(r.document.get("id"));
      }
      for (      String s : q.ids) {
        if (!found.contains(s)) {
          fail("Results are mising id: " + s + " :: "+ found);
        }
      }
    }
 else {
      List<String> found=new ArrayList<>();
      for (      SearchResult r : got.results) {
        found.add(r.document.get("id"));
      }
      Collections.sort(q.ids);
      Collections.sort(found);
      assertEquals(msg,q.ids.toString(),found.toString());
    }
  }
}
