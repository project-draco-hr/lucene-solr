{
  List<FacetResult> results=new ArrayList<FacetResult>();
  for (  FacetRequest req : searchParams.facetRequests) {
    RangeFacetRequest<?> rangeFR=(RangeFacetRequest<?>)req;
    int[] counts=new int[rangeFR.ranges.length];
    for (    MatchingDocs hits : matchingDocs) {
      FunctionValues fv=rangeFR.getValues(hits.context);
      final int length=hits.bits.length();
      int doc=0;
      while (doc < length && (doc=hits.bits.nextSetBit(doc)) != -1) {
        if (!fv.exists(doc)) {
          ++doc;
          continue;
        }
        long v=fv.longVal(doc);
        for (int j=0; j < rangeFR.ranges.length; j++) {
          if (rangeFR.ranges[j].accept(v)) {
            counts[j]++;
          }
        }
        doc++;
      }
    }
    List<FacetResultNode> nodes=new ArrayList<FacetResultNode>(rangeFR.ranges.length);
    for (int j=0; j < rangeFR.ranges.length; j++) {
      nodes.add(new RangeFacetResultNode(rangeFR.label,rangeFR.ranges[j],counts[j]));
    }
    FacetResultNode rootNode=new FacetResultNode(-1,0);
    rootNode.label=rangeFR.categoryPath;
    rootNode.subResults=nodes;
    results.add(new FacetResult(req,rootNode,nodes.size()));
  }
  return results;
}
