{
  String leaderNode=OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());
  results.add("leader",leaderNode);
  Stat stat=new Stat();
  zkStateReader.getZkClient().getData("/overseer/queue",null,stat,true);
  results.add("overseer_queue_size",stat.getNumChildren());
  stat=new Stat();
  zkStateReader.getZkClient().getData("/overseer/queue-work",null,stat,true);
  results.add("overseer_work_queue_size",stat.getNumChildren());
  stat=new Stat();
  zkStateReader.getZkClient().getData("/overseer/collection-queue-work",null,stat,true);
  results.add("overseer_collection_queue_size",stat.getNumChildren());
  NamedList overseerStats=new NamedList();
  NamedList collectionStats=new NamedList();
  NamedList stateUpdateQueueStats=new NamedList();
  NamedList workQueueStats=new NamedList();
  NamedList collectionQueueStats=new NamedList();
  for (  Map.Entry<String,Overseer.Stat> entry : stats.getStats().entrySet()) {
    String key=entry.getKey();
    NamedList<Object> lst=new SimpleOrderedMap<>();
    if (key.startsWith("collection_")) {
      collectionStats.add(key.substring(11),lst);
      int successes=stats.getSuccessCount(entry.getKey());
      int errors=stats.getErrorCount(entry.getKey());
      lst.add("requests",successes);
      lst.add("errors",errors);
      List<Overseer.FailedOp> failureDetails=stats.getFailureDetails(key);
      if (failureDetails != null) {
        List<SimpleOrderedMap<Object>> failures=new ArrayList<>();
        for (        Overseer.FailedOp failedOp : failureDetails) {
          SimpleOrderedMap<Object> fail=new SimpleOrderedMap<>();
          fail.add("request",failedOp.req.getProperties());
          fail.add("response",failedOp.resp.getResponse());
          failures.add(fail);
        }
        lst.add("recent_failures",failures);
      }
    }
 else     if (key.startsWith("/overseer/queue_")) {
      stateUpdateQueueStats.add(key.substring(16),lst);
    }
 else     if (key.startsWith("/overseer/queue-work_")) {
      workQueueStats.add(key.substring(21),lst);
    }
 else     if (key.startsWith("/overseer/collection-queue-work_")) {
      collectionQueueStats.add(key.substring(32),lst);
    }
 else {
      overseerStats.add(key,lst);
      int successes=stats.getSuccessCount(entry.getKey());
      int errors=stats.getErrorCount(entry.getKey());
      lst.add("requests",successes);
      lst.add("errors",errors);
    }
    Timer timer=entry.getValue().requestTime;
    Snapshot snapshot=timer.getSnapshot();
    lst.add("totalTime",timer.getSum());
    lst.add("avgRequestsPerMinute",timer.getMeanRate());
    lst.add("5minRateRequestsPerMinute",timer.getFiveMinuteRate());
    lst.add("15minRateRequestsPerMinute",timer.getFifteenMinuteRate());
    lst.add("avgTimePerRequest",timer.getMean());
    lst.add("medianRequestTime",snapshot.getMedian());
    lst.add("75thPctlRequestTime",snapshot.get75thPercentile());
    lst.add("95thPctlRequestTime",snapshot.get95thPercentile());
    lst.add("99thPctlRequestTime",snapshot.get99thPercentile());
    lst.add("999thPctlRequestTime",snapshot.get999thPercentile());
  }
  results.add("overseer_operations",overseerStats);
  results.add("collection_operations",collectionStats);
  results.add("overseer_queue",stateUpdateQueueStats);
  results.add("overseer_internal_queue",workQueueStats);
  results.add("collection_queue",collectionQueueStats);
}
