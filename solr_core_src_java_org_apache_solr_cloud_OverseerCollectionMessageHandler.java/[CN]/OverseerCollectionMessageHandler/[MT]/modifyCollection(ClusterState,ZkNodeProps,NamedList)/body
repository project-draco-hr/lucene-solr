{
  final String collectionName=message.getStr(ZkStateReader.COLLECTION_PROP);
  String configName=(String)message.getProperties().remove(COLL_CONF);
  if (configName != null) {
    validateConfigOrThrowSolrException(configName);
    boolean isLegacyCloud=Overseer.isLegacy(zkStateReader);
    createConfNode(configName,collectionName,isLegacyCloud);
    reloadCollection(null,new ZkNodeProps(NAME,collectionName),results);
  }
  overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));
  TimeOut timeout=new TimeOut(30,TimeUnit.SECONDS);
  boolean areChangesVisible=true;
  while (!timeout.hasTimedOut()) {
    DocCollection collection=zkStateReader.getClusterState().getCollection(collectionName);
    areChangesVisible=true;
    for (    Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {
      String updateKey=updateEntry.getKey();
      if (!updateKey.equals(ZkStateReader.COLLECTION_PROP) && !updateKey.equals(Overseer.QUEUE_OPERATION) && !collection.get(updateKey).equals(updateEntry.getValue())) {
        areChangesVisible=false;
        break;
      }
    }
    if (areChangesVisible)     break;
    Thread.sleep(100);
  }
  if (!areChangesVisible)   throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Could not modify collection " + message);
}
