{
  final String collectionName=message.getStr(NAME);
  log.info("Create collection {}",collectionName);
  if (clusterState.hasCollection(collectionName)) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"collection already exists: " + collectionName);
  }
  String configName=getConfigName(collectionName,message);
  if (configName == null) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"No config set found to associate with the collection.");
  }
 else   if (!validateConfig(configName)) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Can not find the specified config set: " + configName);
  }
  try {
    int repFactor=message.getInt(REPLICATION_FACTOR,1);
    ShardHandler shardHandler=shardHandlerFactory.getShardHandler();
    final String async=message.getStr(ASYNC);
    Integer numSlices=message.getInt(NUM_SLICES,null);
    String router=message.getStr("router.name",DocRouter.DEFAULT_NAME);
    List<String> shardNames=new ArrayList<>();
    if (ImplicitDocRouter.NAME.equals(router)) {
      ClusterStateMutator.getShardNames(shardNames,message.getStr("shards",null));
      numSlices=shardNames.size();
    }
 else {
      if (numSlices == null) {
        throw new SolrException(ErrorCode.BAD_REQUEST,NUM_SLICES + " is a required param (when using CompositeId router).");
      }
      ClusterStateMutator.getShardNames(numSlices,shardNames);
    }
    int maxShardsPerNode=message.getInt(MAX_SHARDS_PER_NODE,1);
    if (repFactor <= 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,REPLICATION_FACTOR + " must be greater than 0");
    }
    if (numSlices <= 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,NUM_SLICES + " must be > 0");
    }
    final List<String> nodeList=getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(),message,RANDOM);
    Map<Position,String> positionVsNodes;
    if (nodeList.isEmpty()) {
      log.warn("It is unusual to create a collection (" + collectionName + ") without cores.");
      positionVsNodes=new HashMap<>();
    }
 else {
      if (repFactor > nodeList.size()) {
        log.warn("Specified " + REPLICATION_FACTOR + " of "+ repFactor+ " on collection "+ collectionName+ " is higher than or equal to the number of Solr instances currently live or live and part of your "+ CREATE_NODE_SET+ "("+ nodeList.size()+ "). It's unusual to run two replica of the same slice on the same Solr-instance.");
      }
      int maxShardsAllowedToCreate=maxShardsPerNode * nodeList.size();
      int requestedShardsToCreate=numSlices * repFactor;
      if (maxShardsAllowedToCreate < requestedShardsToCreate) {
        throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot create collection " + collectionName + ". Value of "+ MAX_SHARDS_PER_NODE+ " is "+ maxShardsPerNode+ ", and the number of nodes currently live or live and part of your "+ CREATE_NODE_SET+ " is "+ nodeList.size()+ ". This allows a maximum of "+ maxShardsAllowedToCreate+ " to be created. Value of "+ NUM_SLICES+ " is "+ numSlices+ " and value of "+ REPLICATION_FACTOR+ " is "+ repFactor+ ". This requires "+ requestedShardsToCreate+ " shards to be created (higher than the allowed number)");
      }
      positionVsNodes=identifyNodes(clusterState,nodeList,message,shardNames,repFactor);
    }
    boolean isLegacyCloud=Overseer.isLegacy(zkStateReader.getClusterProps());
    createConfNode(configName,collectionName,isLegacyCloud);
    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));
    TimeOut waitUntil=new TimeOut(30,TimeUnit.SECONDS);
    boolean created=false;
    while (!waitUntil.hasTimedOut()) {
      Thread.sleep(100);
      created=zkStateReader.getClusterState().hasCollection(collectionName);
      if (created)       break;
    }
    if (!created)     throw new SolrException(ErrorCode.SERVER_ERROR,"Could not fully create collection: " + collectionName);
    if (nodeList.isEmpty()) {
      log.info("Finished create command for collection: {}",collectionName);
      return;
    }
    Map<String,String> requestMap=new HashMap<>();
    log.info(formatString("Creating SolrCores for new collection {0}, shardNames {1} , replicationFactor : {2}",collectionName,shardNames,repFactor));
    Map<String,ShardRequest> coresToCreate=new LinkedHashMap<>();
    for (    Map.Entry<Position,String> e : positionVsNodes.entrySet()) {
      Position position=e.getKey();
      String nodeName=e.getValue();
      String coreName=collectionName + "_" + position.shard+ "_replica"+ (position.index + 1);
      log.info(formatString("Creating core {0} as part of shard {1} of collection {2} on {3}",coreName,position.shard,collectionName,nodeName));
      String baseUrl=zkStateReader.getBaseUrlForNodeName(nodeName);
      if (!isLegacyCloud) {
        ZkNodeProps props=new ZkNodeProps(Overseer.QUEUE_OPERATION,ADDREPLICA.toString(),ZkStateReader.COLLECTION_PROP,collectionName,ZkStateReader.SHARD_ID_PROP,position.shard,ZkStateReader.CORE_NAME_PROP,coreName,ZkStateReader.STATE_PROP,Replica.State.DOWN.toString(),ZkStateReader.BASE_URL_PROP,baseUrl);
        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));
      }
      ModifiableSolrParams params=new ModifiableSolrParams();
      params.set(CoreAdminParams.ACTION,CoreAdminAction.CREATE.toString());
      params.set(CoreAdminParams.NAME,coreName);
      params.set(COLL_CONF,configName);
      params.set(CoreAdminParams.COLLECTION,collectionName);
      params.set(CoreAdminParams.SHARD,position.shard);
      params.set(ZkStateReader.NUM_SHARDS_PROP,numSlices);
      if (async != null) {
        String coreAdminAsyncId=async + Math.abs(System.nanoTime());
        params.add(ASYNC,coreAdminAsyncId);
        requestMap.put(nodeName,coreAdminAsyncId);
      }
      addPropertyParams(message,params);
      ShardRequest sreq=new ShardRequest();
      sreq.nodeName=nodeName;
      params.set("qt",adminPath);
      sreq.purpose=1;
      sreq.shards=new String[]{baseUrl};
      sreq.actualShards=sreq.shards;
      sreq.params=params;
      if (isLegacyCloud) {
        shardHandler.submit(sreq,sreq.shards[0],sreq.params);
      }
 else {
        coresToCreate.put(coreName,sreq);
      }
    }
    if (!isLegacyCloud) {
      Map<String,Replica> replicas=waitToSeeReplicasInState(collectionName,coresToCreate.keySet());
      for (      Map.Entry<String,ShardRequest> e : coresToCreate.entrySet()) {
        ShardRequest sreq=e.getValue();
        sreq.params.set(CoreAdminParams.CORE_NODE_NAME,replicas.get(e.getKey()).getName());
        shardHandler.submit(sreq,sreq.shards[0],sreq.params);
      }
    }
    processResponses(results,shardHandler,false,null,async,requestMap,Collections.emptySet());
    log.debug("Finished create command on all shards for collection: " + collectionName);
  }
 catch (  SolrException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new SolrException(ErrorCode.SERVER_ERROR,null,ex);
  }
}
