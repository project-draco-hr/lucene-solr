{
  int NUM_THREADS=3;
  int numIterations=TEST_NIGHTLY ? 7 : 3;
  for (int iter=0; iter < numIterations; iter++) {
    Directory dir=newDirectory();
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy(4)));
    ((ConcurrentMergeScheduler)writer.getConfig().getMergeScheduler()).setSuppressExceptions();
    IndexerThread[] threads=new IndexerThread[NUM_THREADS];
    for (int i=0; i < NUM_THREADS; i++)     threads[i]=new IndexerThread(writer,false);
    for (int i=0; i < NUM_THREADS; i++)     threads[i].start();
    boolean done=false;
    while (!done) {
      Thread.sleep(100);
      for (int i=0; i < NUM_THREADS; i++)       if (threads[i].addCount > 0) {
        done=true;
        break;
      }
 else       if (!threads[i].isAlive()) {
        fail("thread failed before indexing a single document");
      }
    }
    writer.close(false);
    for (int i=0; i < NUM_THREADS; i++) {
      threads[i].join();
      if (threads[i].isAlive())       fail("thread seems to be hung");
    }
    IndexReader reader=IndexReader.open(dir,true);
    DocsEnum tdocs=MultiFields.getTermDocsEnum(reader,MultiFields.getLiveDocs(reader),"field",new BytesRef("aaa"));
    int count=0;
    while (tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {
      count++;
    }
    assertTrue(count > 0);
    reader.close();
    dir.close();
  }
}
