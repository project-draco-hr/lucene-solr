{
  final SolrQueryRequest req=req();
  final IndexSchema schema=req.getSchema();
  final SortSpec ss=QueryParsing.parseSortSpec("str asc, float desc, id asc",req);
  final CursorMark totem=new CursorMark(schema,ss);
  try {
    totem.parseSerializedTotem("all the documents please");
    fail("didn't fail on invalid base64 totem");
  }
 catch (  SolrException e) {
    assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
    assertTrue(e.getMessage().contains("Unable to parse 'cursorMark'"));
  }
  try {
    totem.parseSerializedTotem("");
    fail("didn't fail on empty totem");
  }
 catch (  SolrException e) {
    assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
    assertTrue(e.getMessage().contains("Unable to parse 'cursorMark'"));
  }
  try {
    totem.parseSerializedTotem("       ");
    fail("didn't fail on whitespace-only totem");
  }
 catch (  SolrException e) {
    assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
    assertTrue(e.getMessage().contains("Unable to parse 'cursorMark'"));
  }
  try {
    final SortSpec otherSort=QueryParsing.parseSortSpec("double desc, id asc",req);
    final CursorMark otherTotem=new CursorMark(schema,otherSort);
    otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));
    totem.parseSerializedTotem(otherTotem.getSerializedTotem());
    fail("didn't fail on totem from incorrect sort (num clauses)");
  }
 catch (  SolrException e) {
    assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
    assertTrue(e.getMessage().contains("wrong size"));
  }
}
