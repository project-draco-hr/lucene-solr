{
  List<SchemaField> fields=ss.getSchemaFields();
  assertNotNull(fields);
  Object[] results=new Object[fields.size()];
  for (int i=0; i < results.length; i++) {
    SchemaField sf=fields.get(i);
    if (null == sf) {
      results[i]=(Float)random().nextFloat() * random().nextInt();
      break;
    }
 else     if (0 == TestUtil.nextInt(random(),0,7)) {
      results[i]=null;
    }
 else {
      final String fieldName=sf.getName();
      assertNotNull(fieldName);
      Object val=null;
      if (fieldName.equals("id")) {
        val=sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));
      }
 else       if (fieldName.startsWith("str")) {
        val=sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));
      }
 else       if (fieldName.startsWith("bin")) {
        byte[] randBytes=new byte[TestUtil.nextInt(random(),1,50)];
        random().nextBytes(randBytes);
        val=new BytesRef(randBytes);
      }
 else       if (fieldName.startsWith("bcd")) {
        if (fieldName.startsWith("bcd_long")) {
          val=Long.toString(random().nextLong());
          val=sf.getType().toInternal((String)val);
          val=sf.getType().unmarshalSortValue(val);
        }
 else {
          val=Integer.toString(random().nextInt());
          val=sf.getType().toInternal((String)val);
          val=sf.getType().unmarshalSortValue(val);
        }
      }
 else       if (fieldName.contains("int")) {
        val=random().nextInt();
        if (fieldName.startsWith("legacy")) {
          val=Integer.toString((Integer)val);
          if (fieldName.startsWith("legacy_sortable")) {
            val=sf.getType().unmarshalSortValue(val);
          }
        }
      }
 else       if (fieldName.contains("long")) {
        val=random().nextLong();
        if (fieldName.startsWith("legacy")) {
          val=Long.toString((Long)val);
          if (fieldName.startsWith("legacy_sortable")) {
            val=sf.getType().unmarshalSortValue(val);
          }
        }
      }
 else       if (fieldName.contains("float")) {
        val=random().nextFloat() * random().nextInt();
        if (fieldName.startsWith("legacy")) {
          val=Float.toString((Float)val);
          if (fieldName.startsWith("legacy_sortable")) {
            val=sf.getType().unmarshalSortValue(val);
          }
        }
      }
 else       if (fieldName.contains("double")) {
        val=random().nextDouble() * random().nextInt();
        if (fieldName.startsWith("legacy")) {
          val=Double.toString((Double)val);
          if (fieldName.startsWith("legacy_sortable")) {
            val=sf.getType().unmarshalSortValue(val);
          }
        }
      }
 else       if (fieldName.contains("date")) {
        val=random().nextLong();
        if (fieldName.startsWith("legacy_date")) {
          val=((DateField)sf.getType()).toInternal(new Date((Long)val));
          val=sf.getType().unmarshalSortValue(val);
        }
      }
 else       if (fieldName.startsWith("currency")) {
        val=random().nextDouble();
      }
 else       if (fieldName.startsWith("uuid")) {
        val=sf.getType().unmarshalSortValue(UUID.randomUUID().toString());
      }
 else       if (fieldName.startsWith("bool")) {
        val=sf.getType().unmarshalSortValue(random().nextBoolean() ? "t" : "f");
      }
 else       if (fieldName.startsWith("enum")) {
        val=random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);
      }
 else       if (fieldName.contains("collation")) {
        val=getRandomCollation(sf);
      }
 else {
        fail("fell through the rabbit hole, new field in schema? = " + fieldName);
      }
      results[i]=val;
    }
  }
  return results;
}
