{
  final SolrQueryRequest req=req();
  final IndexSchema schema=req.getSchema();
  try {
    final SortSpec ss=SortSpecParsing.parseSortSpec("str desc, score desc",req);
    final CursorMark totem=new CursorMark(schema,ss);
    fail("no failure from sort that doesn't include uniqueKey field");
  }
 catch (  SolrException e) {
    assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
    assertTrue(0 < e.getMessage().indexOf("uniqueKey"));
  }
  for (  final String dir : Arrays.asList("asc","desc")) {
    try {
      final SortSpec ss=SortSpecParsing.parseSortSpec("score " + dir,req);
      final CursorMark totem=new CursorMark(schema,ss);
      fail("no failure from score only sort: " + dir);
    }
 catch (    SolrException e) {
      assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
      assertTrue(0 < e.getMessage().indexOf("uniqueKey"));
    }
    try {
      final SortSpec ss=SortSpecParsing.parseSortSpec("_docid_ " + dir + ", id desc",req);
      final CursorMark totem=new CursorMark(schema,ss);
      fail("no failure from sort that includes _docid_: " + dir);
    }
 catch (    SolrException e) {
      assertEquals(ErrorCode.BAD_REQUEST.code,e.code());
      assertTrue(0 < e.getMessage().indexOf("_docid_"));
    }
  }
}
