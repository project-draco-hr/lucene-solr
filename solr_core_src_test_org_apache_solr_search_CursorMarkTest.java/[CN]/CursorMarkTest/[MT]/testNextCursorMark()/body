{
  final Collection<String> allFieldNames=getAllFieldNames();
  final SolrQueryRequest req=req();
  final IndexSchema schema=req.getSchema();
  final String randomSortString=CursorPagingTest.buildRandomSort(allFieldNames);
  final SortSpec ss=QueryParsing.parseSortSpec(randomSortString,req);
  final CursorMark previous=new CursorMark(schema,ss);
  previous.parseSerializedTotem(CURSOR_MARK_START);
  List<Object> nextValues=Arrays.<Object>asList(buildRandomSortObjects(ss));
  final CursorMark next=previous.createNext(nextValues);
  assertEquals("next values not correct",nextValues,next.getSortValues());
  assertEquals("next SortSpec not correct",ss,next.getSortSpec());
  try {
    final SortSpec otherSort=QueryParsing.parseSortSpec(randomSortString + ",id asc",req);
    CursorMark trash=previous.createNext(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));
    fail("didn't fail on next with incorrect num of sortvalues");
  }
 catch (  AssertionError e) {
  }
}
