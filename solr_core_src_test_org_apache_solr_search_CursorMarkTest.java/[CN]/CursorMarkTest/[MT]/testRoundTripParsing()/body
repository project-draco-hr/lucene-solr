{
  final Collection<String> allFieldNames=getAllFieldNames();
  final SolrQueryRequest req=req();
  final IndexSchema schema=req.getSchema();
  final int numRandomSorts=atLeast(50);
  final int numRandomValIters=atLeast(10);
  for (int i=0; i < numRandomSorts; i++) {
    final SortSpec ss=SortSpecParsing.parseSortSpec(CursorPagingTest.buildRandomSort(allFieldNames),req);
    final CursorMark totemIn=new CursorMark(schema,ss);
    final CursorMark totemOut=new CursorMark(schema,ss);
    totemIn.parseSerializedTotem(CURSOR_MARK_START);
    assertEquals(CURSOR_MARK_START,totemIn.getSerializedTotem());
    assertNull(totemIn.getSortValues());
    totemOut.setSortValues(null);
    assertEquals(CURSOR_MARK_START,totemOut.getSerializedTotem());
    for (int j=0; j < numRandomValIters; j++) {
      final Object[] inValues=buildRandomSortObjects(ss);
      totemIn.setSortValues(Arrays.<Object>asList(inValues));
      totemOut.parseSerializedTotem(totemIn.getSerializedTotem());
      final List<Object> out=totemOut.getSortValues();
      assertNotNull(out);
      final Object[] outValues=out.toArray();
      assertArrayEquals(inValues,outValues);
    }
  }
}
