{
  assertU(adoc("tv_text","a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all","id","1"));
  assertU(commit());
  assertU(optimize());
  HashMap<String,String> args=new HashMap<>();
  args.put("hl","true");
  args.put("hl.fl","tv_text");
  TestHarness.LocalRequestFactory sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Basic summarization",sumLRF.makeRequest("tv_text:long"),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']");
  args.put("hl.fragsize","25");
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Basic summarization",sumLRF.makeRequest("tv_text:long"),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night']");
  args.put("hl.fragsize","0");
  sumLRF=h.getRequestFactory("standard",0,200,args);
  assertQ("Basic summarization",sumLRF.makeRequest("tv_text:long"),"//lst[@name='highlighting']/lst[@name='1']","//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all']");
}
