{
  GeoArea solid;
  GeoShape shape;
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,-2.0,2.0,-2.0,2.0,-2.0,2.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.WITHIN,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,0.0,0.0,0.0,0.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,1.0,1.0,0.0,0.0,0.0,0.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,0.0,0.0,-0.1,0.1);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,0.0,0.0,-0.1,1.1);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,-Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,0.0,0.0,-1.1,1.1);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,-Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-0.1,0.1,0.0,0.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-0.1,1.1,0.0,0.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI * 0.5,0.1);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,-Math.PI * 0.5,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-1.1,1.1,0.0,0.0);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI * 0.5,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,-Math.PI * 0.5,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-0.1,0.1,-0.1,0.1);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-0.1,0.1,1.1,1.2);
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,-1.1,1.1,-1.1,1.1);
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI * 0.5,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,-Math.PI * 0.5,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,-Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  solid=GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,0.0,0.0,0.0,1.1,-1.1,1.1);
  shape=new GeoWorld(PlanetModel.SPHERE);
  assertEquals(GeoArea.CONTAINS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,0.0,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,Math.PI * 0.5,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,0.0,-Math.PI * 0.5,0.1);
  assertEquals(GeoArea.DISJOINT,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
  shape=new GeoStandardCircle(PlanetModel.SPHERE,-Math.PI * 0.5,0.0,0.1);
  assertEquals(GeoArea.OVERLAPS,solid.getRelationship(shape));
}
