{
  int numReaders=readers.size();
  docMaps=new DocMap[numReaders];
  docBase=new int[numReaders];
  maxDocs=new int[numReaders];
  fieldsProducers=new FieldsProducer[numReaders];
  normsProducers=new NormsProducer[numReaders];
  storedFieldsReaders=new StoredFieldsReader[numReaders];
  termVectorsReaders=new TermVectorsReader[numReaders];
  docValuesProducers=new DocValuesProducer[numReaders];
  fieldInfos=new FieldInfos[numReaders];
  liveDocs=new Bits[numReaders];
  for (int i=0; i < numReaders; i++) {
    final LeafReader reader=readers.get(i);
    maxDocs[i]=reader.maxDoc();
    liveDocs[i]=reader.getLiveDocs();
    fieldInfos[i]=reader.getFieldInfos();
    NormsProducer normsProducer;
    DocValuesProducer docValuesProducer;
    StoredFieldsReader storedFieldsReader;
    TermVectorsReader termVectorsReader;
    FieldsProducer fieldsProducer;
    if (reader instanceof SegmentReader) {
      SegmentReader segmentReader=(SegmentReader)reader;
      normsProducer=segmentReader.getNormsReader();
      docValuesProducer=segmentReader.getDocValuesReader();
      storedFieldsReader=segmentReader.getFieldsReader();
      termVectorsReader=segmentReader.getTermVectorsReader();
      fieldsProducer=segmentReader.fields();
    }
 else {
      normsProducer=readerToNormsProducer(reader);
      docValuesProducer=readerToDocValuesProducer(reader);
      storedFieldsReader=readerToStoredFieldsReader(reader);
      termVectorsReader=readerToTermVectorsReader(reader);
      fieldsProducer=readerToFieldsProducer(reader);
    }
    normsProducers[i]=normsProducer;
    docValuesProducers[i]=docValuesProducer;
    storedFieldsReaders[i]=storedFieldsReader;
    termVectorsReaders[i]=termVectorsReader;
    fieldsProducers[i]=fieldsProducer;
  }
  this.segmentInfo=segmentInfo;
  this.infoStream=infoStream;
  this.checkAbort=checkAbort;
  setDocMaps(readers);
}
