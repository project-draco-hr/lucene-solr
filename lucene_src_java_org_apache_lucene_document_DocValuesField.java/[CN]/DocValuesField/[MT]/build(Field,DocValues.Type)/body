{
  if (field instanceof DocValuesField) {
    return (DocValuesField)field;
  }
  final DocValuesField valField=new DocValuesField(field.name(),field.fieldType(),field.stringValue());
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_STRAIGHT:
case BYTES_VAR_DEREF:
case BYTES_VAR_STRAIGHT:
case BYTES_FIXED_SORTED:
case BYTES_VAR_SORTED:
    BytesRef ref=field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());
  valField.setBytes(ref,type);
break;
case FIXED_INTS_16:
case FIXED_INTS_32:
case FIXED_INTS_64:
case FIXED_INTS_8:
case VAR_INTS:
valField.setInt(Long.parseLong(field.stringValue()));
break;
case FLOAT_32:
valField.setFloat(Float.parseFloat(field.stringValue()));
break;
case FLOAT_64:
valField.setFloat(Double.parseDouble(field.stringValue()));
break;
default :
throw new IllegalArgumentException("unknown type: " + type);
}
return valField;
}
