{
  countOnly=freq.facetStats.size() == 0 || freq.facetStats.values().iterator().next() instanceof CountAgg;
  hasSubFacets=freq.subFacets.size() > 0;
  bucketsToSkip=freq.offset;
  createAccs(-1,1);
  if (freq.cacheDf == -1) {
    minDfFilterCache=Integer.MAX_VALUE;
  }
 else   if (freq.cacheDf == 0) {
    minDfFilterCache=Math.max(fcontext.searcher.maxDoc() >> 4,3);
  }
 else {
    minDfFilterCache=freq.cacheDf;
  }
  docs=fcontext.base;
  fastForRandomSet=null;
  if (freq.prefix != null) {
    String indexedPrefix=sf.getType().toInternal(freq.prefix);
    startTermBytes=new BytesRef(indexedPrefix);
  }
 else   if (sf.getType().getNumericType() != null) {
    String triePrefix=TrieField.getMainValuePrefix(sf.getType());
    if (triePrefix != null) {
      startTermBytes=new BytesRef(triePrefix);
    }
  }
  Fields fields=fcontext.searcher.getLeafReader().fields();
  Terms terms=fields == null ? null : fields.terms(sf.getName());
  termsEnum=null;
  deState=null;
  term=null;
  if (terms != null) {
    termsEnum=terms.iterator();
    if (startTermBytes != null) {
      if (termsEnum.seekCeil(startTermBytes) == TermsEnum.SeekStatus.END) {
        termsEnum=null;
      }
 else {
        term=termsEnum.term();
      }
    }
 else {
      term=termsEnum.next();
    }
  }
  List<LeafReaderContext> leafList=fcontext.searcher.getTopReaderContext().leaves();
  leaves=leafList.toArray(new LeafReaderContext[leafList.size()]);
}
