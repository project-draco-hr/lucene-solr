{
  CloudJettyRunner jetty=this.cloudJettys.get(0);
  Map<String,Object> params=new HashMap<>();
  params.put(CommonParams.QT,"/sql");
  params.put("numWorkers",2);
  params.put("stmt","select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_");
  SolrStream solrStream=new SolrStream(jetty.url,params);
  List<Tuple> tuples=getTuples(solrStream);
  assertEquals(2,tuples.size());
  List<String> collections=new ArrayList<>();
  collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());
  Collections.sort(collections);
  for (  Tuple tuple : tuples) {
    assertEquals(zkServer.getZkAddress(),tuple.getString("TABLE_CAT"));
    assertNull(tuple.get("TABLE_SCHEM"));
    assertTrue(collections.contains(tuple.getString("TABLE_NAME")));
    assertEquals("TABLE",tuple.getString("TABLE_TYPE"));
    assertNull(tuple.get("REMARKS"));
  }
  tuples=getTuples(solrStream);
  assertEquals(2,tuples.size());
  collections=new ArrayList<>();
  collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());
  Collections.sort(collections);
  for (  Tuple tuple : tuples) {
    assertEquals(zkServer.getZkAddress(),tuple.getString("TABLE_CAT"));
    assertNull(tuple.get("TABLE_SCHEM"));
    assertTrue(collections.contains(tuple.getString("TABLE_NAME")));
    assertEquals("TABLE",tuple.getString("TABLE_TYPE"));
    assertNull(tuple.get("REMARKS"));
  }
}
