{
  try {
    CloudJettyRunner jetty=this.cloudJettys.get(0);
    del("*:*");
    commit();
    indexr("id","1","text","XXXX XXXX","str_s","a","field_i","7");
    indexr("id","2","text","XXXX XXXX","str_s","b","field_i","8");
    indexr("id","3","text","XXXX XXXX","str_s","a","field_i","20");
    indexr("id","4","text","XXXX XXXX","str_s","b","field_i","11");
    indexr("id","5","text","XXXX XXXX","str_s","c","field_i","30");
    indexr("id","6","text","XXXX XXXX","str_s","c","field_i","40");
    indexr("id","7","text","XXXX XXXX","str_s","c","field_i","50");
    indexr("id","8","text","XXXX XXXX","str_s","c","field_i","60");
    commit();
    Map params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("sql","select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc");
    SolrStream solrStream=new SolrStream(jetty.url,params);
    List<Tuple> tuples=getTuples(solrStream);
    assert(tuples.size() == 8);
    Tuple tuple=null;
    tuple=tuples.get(0);
    assert(tuple.getLong("id") == 8);
    assert(tuple.getLong("field_i") == 60);
    assert(tuple.get("str_s").equals("c"));
    tuple=tuples.get(1);
    assert(tuple.getLong("id") == 7);
    assert(tuple.getLong("field_i") == 50);
    assert(tuple.get("str_s").equals("c"));
    tuple=tuples.get(2);
    assert(tuple.getLong("id") == 6);
    assert(tuple.getLong("field_i") == 40);
    assert(tuple.get("str_s").equals("c"));
    tuple=tuples.get(3);
    assert(tuple.getLong("id") == 5);
    assert(tuple.getLong("field_i") == 30);
    assert(tuple.get("str_s").equals("c"));
    tuple=tuples.get(4);
    assert(tuple.getLong("id") == 3);
    assert(tuple.getLong("field_i") == 20);
    assert(tuple.get("str_s").equals("a"));
    tuple=tuples.get(5);
    assert(tuple.getLong("id") == 4);
    assert(tuple.getLong("field_i") == 11);
    assert(tuple.get("str_s").equals("b"));
    tuple=tuples.get(6);
    assert(tuple.getLong("id") == 2);
    assert(tuple.getLong("field_i") == 8);
    assert(tuple.get("str_s").equals("b"));
    tuple=tuples.get(7);
    assert(tuple.getLong("id") == 1);
    assert(tuple.getLong("field_i") == 7);
    assert(tuple.get("str_s").equals("a"));
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("sql","select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 1);
    tuple=tuples.get(0);
    assert(tuple.getLong("id") == 8);
    assert(tuple.getLong("field_i") == 60);
    assert(tuple.get("str_s").equals("c"));
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("sql","select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 3);
    tuple=tuples.get(0);
    assert(tuple.getLong("id") == 3);
    assert(tuple.getLong("field_i") == 20);
    assert(tuple.get("str_s").equals("a"));
    tuple=tuples.get(1);
    assert(tuple.getLong("id") == 2);
    assert(tuple.getLong("field_i") == 8);
    assert(tuple.get("str_s").equals("b"));
    tuple=tuples.get(2);
    assert(tuple.getLong("id") == 1);
    assert(tuple.getLong("field_i") == 7);
    assert(tuple.get("str_s").equals("a"));
  }
  finally {
    delete();
  }
}
