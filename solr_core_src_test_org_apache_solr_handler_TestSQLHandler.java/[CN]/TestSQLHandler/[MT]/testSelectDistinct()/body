{
  try {
    CloudJettyRunner jetty=this.cloudJettys.get(0);
    del("*:*");
    commit();
    indexr("id","1","text","XXXX XXXX","str_s","a","field_i","1");
    indexr("id","2","text","XXXX XXXX","str_s","b","field_i","2");
    indexr("id","3","text","XXXX XXXX","str_s","a","field_i","20");
    indexr("id","4","text","XXXX XXXX","str_s","b","field_i","2");
    indexr("id","5","text","XXXX XXXX","str_s","c","field_i","30");
    indexr("id","6","text","XXXX XXXX","str_s","c","field_i","30");
    indexr("id","7","text","XXXX XXXX","str_s","c","field_i","50");
    indexr("id","8","text","XXXX XXXX","str_s","c","field_i","60");
    commit();
    Map params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc");
    SolrStream solrStream=new SolrStream(jetty.url,params);
    List<Tuple> tuples=getTuples(solrStream);
    assert(tuples.size() == 6);
    Tuple tuple=null;
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 1);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 20);
    tuple=tuples.get(2);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getLong("field_i") == 2);
    tuple=tuples.get(3);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 30);
    tuple=tuples.get(4);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 50);
    tuple=tuples.get(5);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 60);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct str_s, field_i from collection1 order by str_s desc, field_i desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 6);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 60);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 50);
    tuple=tuples.get(2);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 30);
    tuple=tuples.get(3);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getLong("field_i") == 2);
    tuple=tuples.get(4);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 20);
    tuple=tuples.get(5);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 1);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 6);
    tuple=tuples.get(0);
    assert(tuple.get("myString").equals("c"));
    assert(tuple.getLong("field_i") == 60);
    tuple=tuples.get(1);
    assert(tuple.get("myString").equals("c"));
    assert(tuple.getLong("field_i") == 50);
    tuple=tuples.get(2);
    assert(tuple.get("myString").equals("c"));
    assert(tuple.getLong("field_i") == 30);
    tuple=tuples.get(3);
    assert(tuple.get("myString").equals("b"));
    assert(tuple.getLong("field_i") == 2);
    tuple=tuples.get(4);
    assert(tuple.get("myString").equals("a"));
    assert(tuple.getLong("field_i") == 20);
    tuple=tuples.get(5);
    assert(tuple.get("myString").equals("a"));
    assert(tuple.getLong("field_i") == 1);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 60);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 50);
    new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct str_s, field_i from collection1");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 6);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 1);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 20);
    tuple=tuples.get(2);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getLong("field_i") == 2);
    tuple=tuples.get(3);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 30);
    tuple=tuples.get(4);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 50);
    tuple=tuples.get(5);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getLong("field_i") == 60);
    new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select distinct str_s, field_i from collection1 where str_s = 'a'");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 1);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getLong("field_i") == 20);
  }
  finally {
    delete();
  }
}
