{
  try {
    CloudJettyRunner jetty=this.cloudJettys.get(0);
    del("*:*");
    commit();
    indexDoc(sdoc("id","1","Text_t","XXXX XXXX","Str_s","a","Field_i","7"));
    indexDoc(sdoc("id","2","Text_t","XXXX XXXX","Str_s","b","Field_i","8"));
    indexDoc(sdoc("id","3","Text_t","XXXX XXXX","Str_s","a","Field_i","20"));
    indexDoc(sdoc("id","4","Text_t","XXXX XXXX","Str_s","b","Field_i","11"));
    indexDoc(sdoc("id","5","Text_t","XXXX XXXX","Str_s","c","Field_i","30"));
    indexDoc(sdoc("id","6","Text_t","XXXX XXXX","Str_s","c","Field_i","40"));
    indexDoc(sdoc("id","7","Text_t","XXXX XXXX","Str_s","c","Field_i","50"));
    indexDoc(sdoc("id","8","Text_t","XXXX XXXX","Str_s","c","Field_i","60"));
    commit();
    Map params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select id, Field_i, Str_s from Collection1 where Text_t='XXXX' order by Field_i desc");
    SolrStream solrStream=new SolrStream(jetty.url,params);
    List<Tuple> tuples=getTuples(solrStream);
    assert(tuples.size() == 8);
    Tuple tuple=null;
    tuple=tuples.get(0);
    assert(tuple.getLong("id") == 8);
    assert(tuple.getLong("Field_i") == 60);
    assert(tuple.get("Str_s").equals("c"));
    tuple=tuples.get(1);
    assert(tuple.getLong("id") == 7);
    assert(tuple.getLong("Field_i") == 50);
    assert(tuple.get("Str_s").equals("c"));
    tuple=tuples.get(2);
    assert(tuple.getLong("id") == 6);
    assert(tuple.getLong("Field_i") == 40);
    assert(tuple.get("Str_s").equals("c"));
    tuple=tuples.get(3);
    assert(tuple.getLong("id") == 5);
    assert(tuple.getLong("Field_i") == 30);
    assert(tuple.get("Str_s").equals("c"));
    tuple=tuples.get(4);
    assert(tuple.getLong("id") == 3);
    assert(tuple.getLong("Field_i") == 20);
    assert(tuple.get("Str_s").equals("a"));
    tuple=tuples.get(5);
    assert(tuple.getLong("id") == 4);
    assert(tuple.getLong("Field_i") == 11);
    assert(tuple.get("Str_s").equals("b"));
    tuple=tuples.get(6);
    assert(tuple.getLong("id") == 2);
    assert(tuple.getLong("Field_i") == 8);
    assert(tuple.get("Str_s").equals("b"));
    tuple=tuples.get(7);
    assert(tuple.getLong("id") == 1);
    assert(tuple.getLong("Field_i") == 7);
    assert(tuple.get("Str_s").equals("a"));
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select Str_s, sum(Field_i) from Collection1 where 'id'='(1 8)' group by Str_s having (sum(Field_i) = 7 OR 'sum(Field_i)' = 60) order by 'sum(Field_i)' desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    tuple=tuples.get(0);
    assert(tuple.get("Str_s").equals("c"));
    assert(tuple.getDouble("sum(Field_i)") == 60);
    tuple=tuples.get(1);
    assert(tuple.get("Str_s").equals("a"));
    assert(tuple.getDouble("sum(Field_i)") == 7);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("stmt","select Str_s, sum(Field_i) from Collection1 where 'id'='(1 8)' group by 'Str_s' having (sum(Field_i) = 7 OR 'sum(Field_i)' = 60) order by 'sum(Field_i)' desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    tuple=tuples.get(0);
    assert(tuple.get("Str_s").equals("c"));
    assert(tuple.getDouble("sum(Field_i)") == 60);
    tuple=tuples.get(1);
    assert(tuple.get("Str_s").equals("a"));
    assert(tuple.getDouble("sum(Field_i)") == 7);
  }
  finally {
    delete();
  }
}
