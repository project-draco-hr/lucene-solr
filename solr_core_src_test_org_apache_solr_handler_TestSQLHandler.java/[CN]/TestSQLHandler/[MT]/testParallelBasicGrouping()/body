{
  try {
    CloudJettyRunner jetty=this.cloudJettys.get(0);
    del("*:*");
    commit();
    indexr("id","1","text","XXXX XXXX","str_s","a","field_i","7");
    indexr("id","2","text","XXXX XXXX","str_s","b","field_i","8");
    indexr("id","3","text","XXXX XXXX","str_s","a","field_i","20");
    indexr("id","4","text","XXXX XXXX","str_s","b","field_i","11");
    indexr("id","5","text","XXXX XXXX","str_s","c","field_i","30");
    indexr("id","6","text","XXXX XXXX","str_s","c","field_i","40");
    indexr("id","7","text","XXXX XXXX","str_s","c","field_i","50");
    indexr("id","8","text","XXXX XXXX","str_s","c","field_i","60");
    commit();
    Map params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2");
    SolrStream solrStream=new SolrStream(jetty.url,params);
    List<Tuple> tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    Tuple tuple=null;
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 27);
    assert(tuple.getDouble("min(field_i)") == 7);
    assert(tuple.getDouble("max(field_i)") == 20);
    assert(tuple.getDouble("avg(field_i)") == 13.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum asc limit 2");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 2);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum") == 27);
    assert(tuple.getDouble("min(field_i)") == 7);
    assert(tuple.getDouble("max(field_i)") == 20);
    assert(tuple.getDouble("avg(field_i)") == 13.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by str_s desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 3);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("c"));
    assert(tuple.getDouble("count(*)") == 4);
    assert(tuple.getDouble("sum(field_i)") == 180);
    assert(tuple.getDouble("min(field_i)") == 30);
    assert(tuple.getDouble("max(field_i)") == 60);
    assert(tuple.getDouble("avg(field_i)") == 45);
    tuple=tuples.get(1);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    tuple=tuples.get(2);
    assert(tuple.get("str_s").equals("a"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 27);
    assert(tuple.getDouble("min(field_i)") == 7);
    assert(tuple.getDouble("max(field_i)") == 20);
    assert(tuple.getDouble("avg(field_i)") == 13.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s as myString, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString order by myString desc");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 3);
    tuple=tuples.get(0);
    assert(tuple.get("myString").equals("c"));
    assert(tuple.getDouble("count(*)") == 4);
    assert(tuple.getDouble("sum(field_i)") == 180);
    assert(tuple.getDouble("min(field_i)") == 30);
    assert(tuple.getDouble("max(field_i)") == 60);
    assert(tuple.getDouble("avg(field_i)") == 45);
    tuple=tuples.get(1);
    assert(tuple.get("myString").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    tuple=tuples.get(2);
    assert(tuple.get("myString").equals("a"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 27);
    assert(tuple.getDouble("min(field_i)") == 7);
    assert(tuple.getDouble("max(field_i)") == 20);
    assert(tuple.getDouble("avg(field_i)") == 13.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 1);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 1);
    tuple=tuples.get(0);
    assert(tuple.get("str_s").equals("b"));
    assert(tuple.getDouble("count(*)") == 2);
    assert(tuple.getDouble("sum(field_i)") == 19);
    assert(tuple.getDouble("min(field_i)") == 8);
    assert(tuple.getDouble("max(field_i)") == 11);
    assert(tuple.getDouble("avg(field_i)") == 9.5D);
    params=new HashMap();
    params.put(CommonParams.QT,"/sql");
    params.put("numWorkers","2");
    params.put("stmt","select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))");
    solrStream=new SolrStream(jetty.url,params);
    tuples=getTuples(solrStream);
    assert(tuples.size() == 0);
  }
  finally {
    delete();
  }
}
