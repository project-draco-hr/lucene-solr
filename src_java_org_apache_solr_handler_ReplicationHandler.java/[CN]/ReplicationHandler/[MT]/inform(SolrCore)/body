{
  this.core=core;
  registerFileStreamResponseWriter();
  registerCloseHook();
  NamedList slave=(NamedList)initArgs.get("slave");
  if (slave != null) {
    snapPuller=new SnapPuller(slave,this,core);
    isSlave=true;
  }
  NamedList master=(NamedList)initArgs.get("master");
  if (master != null) {
    String includeFiles=(String)master.get(CONF_FILES);
    if (includeFiles != null && !includeFiles.trim().equals("")) {
      includeConfFiles=Arrays.asList(includeFiles.split(","));
      LOG.info("Replication enabled for following config files: " + includeConfFiles);
    }
    List snapshot=master.getAll("snapshot");
    boolean snapshotOnCommit=snapshot.contains("commit");
    boolean snapshotOnOptimize=snapshot.contains("optimize");
    List replicateAfter=master.getAll(REPLICATE_AFTER);
    replicateOnCommit=replicateAfter.contains("commit");
    replicateOnOptimize=replicateAfter.contains("optimize");
    if (replicateOnOptimize || snapshotOnOptimize) {
      core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize,replicateOnOptimize));
    }
    if (replicateOnCommit || snapshotOnCommit) {
      replicateOnCommit=true;
      core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit,replicateOnCommit));
    }
    if (replicateAfter.contains("startup")) {
      RefCounted<SolrIndexSearcher> s=core.getNewestSearcher(false);
      try {
        indexCommitPoint=s.get().getReader().getIndexCommit();
      }
 catch (      IOException e) {
        LOG.warn("Unable to get IndexCommit on startup",e);
      }
 finally {
        s.decref();
      }
    }
    String reserve=(String)master.get(RESERVE);
    if (reserve != null && !reserve.trim().equals("")) {
      reserveCommitDuration=SnapPuller.readInterval(reserve);
    }
    LOG.info("Commits will be reserved for  " + reserveCommitDuration);
    isMaster=true;
  }
}
