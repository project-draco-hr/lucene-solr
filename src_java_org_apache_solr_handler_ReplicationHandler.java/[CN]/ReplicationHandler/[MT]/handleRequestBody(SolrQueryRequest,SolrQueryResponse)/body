{
  rsp.setHttpCaching(false);
  final SolrParams solrParams=req.getParams();
  String command=solrParams.get(COMMAND);
  if (command == null) {
    rsp.add("status","OK");
    return;
  }
  if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {
    replicationEnabled.set(true);
  }
 else   if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {
    replicationEnabled.set(false);
  }
 else   if (command.equals(CMD_INDEX_VERSION)) {
    IndexCommit commitPoint=indexCommitPoint;
    if (commitPoint != null && replicationEnabled.get()) {
      rsp.add(CMD_INDEX_VERSION,commitPoint.getVersion());
      rsp.add(GENERATION,commitPoint.getGeneration());
    }
 else {
      rsp.add(CMD_INDEX_VERSION,0L);
      rsp.add(GENERATION,0L);
    }
  }
 else   if (command.equals(CMD_GET_FILE)) {
    getFileStream(solrParams,rsp);
  }
 else   if (command.equals(CMD_GET_FILE_LIST)) {
    getFileList(solrParams,rsp);
  }
 else   if (command.equals(CMD_SNAP_SHOOT)) {
    doSnapShoot(solrParams,rsp);
  }
 else   if (command.equals(CMD_SNAP_PULL)) {
    new Thread(){
      public void run(){
        doSnapPull(solrParams);
      }
    }
.start();
    rsp.add("status","OK");
  }
 else   if (command.equals(CMD_DISABLE_POLL)) {
    if (snapPuller != null)     snapPuller.disablePoll();
  }
 else   if (command.equals(CMD_ENABLE_POLL)) {
    if (snapPuller != null)     snapPuller.enablePoll();
  }
 else   if (command.equals(CMD_ABORT_SNAP_PULL)) {
    if (snapPuller != null)     snapPuller.abortPull();
  }
 else   if (command.equals(CMD_FILE_CHECKSUM)) {
    getFileChecksum(solrParams,rsp);
  }
 else   if (command.equals(CMD_SHOW_COMMITS)) {
    rsp.add(CMD_SHOW_COMMITS,getCommits());
  }
 else   if (command.equals(CMD_DETAILS)) {
    rsp.add(CMD_DETAILS,getReplicationDetails());
    RequestHandlerUtils.addExperimentalFormatWarning(rsp);
  }
}
