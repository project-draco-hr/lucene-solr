{
  Directory dir=newDirectory();
  Analyzer analyzer=new MockAnalyzer();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setMaxBufferedDocs(2).setSimilarity(new SimpleSimilarity()));
  ((LogMergePolicy)writer.getConfig().getMergePolicy()).setMergeFactor(2);
  StringBuilder sb=new StringBuilder(265);
  String term="term";
  for (int i=0; i < 30; i++) {
    Document d=new Document();
    sb.append(term).append(" ");
    String content=sb.toString();
    Field noTf=newField("noTf",content + (i % 2 == 0 ? "" : " notf"),Field.Store.NO,Field.Index.ANALYZED);
    noTf.setOmitTermFreqAndPositions(true);
    d.add(noTf);
    Field tf=newField("tf",content + (i % 2 == 0 ? " tf" : ""),Field.Store.NO,Field.Index.ANALYZED);
    d.add(tf);
    writer.addDocument(d);
  }
  writer.optimize();
  writer.close();
  _TestUtil.checkIndex(dir);
  Searcher searcher=new IndexSearcher(dir,true);
  searcher.setSimilarity(new SimpleSimilarity());
  Term a=new Term("noTf",term);
  Term b=new Term("tf",term);
  Term c=new Term("noTf","notf");
  Term d=new Term("tf","tf");
  TermQuery q1=new TermQuery(a);
  TermQuery q2=new TermQuery(b);
  TermQuery q3=new TermQuery(c);
  TermQuery q4=new TermQuery(d);
  PhraseQuery pq=new PhraseQuery();
  pq.add(a);
  pq.add(c);
  try {
    searcher.search(pq,10);
    fail("did not hit expected exception");
  }
 catch (  IllegalStateException ise) {
  }
  searcher.search(q1,new CountingHitCollector(){
    private Scorer scorer;
    @Override public final void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      float score=scorer.score();
      assertTrue(score == 1.0f);
      super.collect(doc);
    }
  }
);
  searcher.search(q2,new CountingHitCollector(){
    private Scorer scorer;
    @Override public final void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      float score=scorer.score();
      assertTrue(score == 1.0f + doc);
      super.collect(doc);
    }
  }
);
  searcher.search(q3,new CountingHitCollector(){
    private Scorer scorer;
    @Override public final void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      float score=scorer.score();
      assertTrue(score == 1.0f);
      assertFalse(doc % 2 == 0);
      super.collect(doc);
    }
  }
);
  searcher.search(q4,new CountingHitCollector(){
    private Scorer scorer;
    @Override public final void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public final void collect(    int doc) throws IOException {
      float score=scorer.score();
      assertTrue(score == 1.0f);
      assertTrue(doc % 2 == 0);
      super.collect(doc);
    }
  }
);
  BooleanQuery bq=new BooleanQuery();
  bq.add(q1,Occur.MUST);
  bq.add(q4,Occur.MUST);
  searcher.search(bq,new CountingHitCollector(){
    @Override public final void collect(    int doc) throws IOException {
      super.collect(doc);
    }
  }
);
  assertEquals(15,CountingHitCollector.getCount());
  searcher.close();
  dir.close();
}
