{
  ensureOpen();
  OrdinalMap map=null;
synchronized (cachedOrdMaps) {
    map=cachedOrdMaps.get(field);
    if (map == null) {
      SortedDocValues dv=MultiDocValues.getSortedValues(in,field);
      if (dv instanceof MultiSortedDocValues) {
        map=((MultiSortedDocValues)dv).mapping;
        if (map.owner == getCoreCacheKey() && merging == false) {
          cachedOrdMaps.put(field,map);
        }
      }
      return dv;
    }
  }
  int size=in.leaves().size();
  final SortedDocValues[] values=new SortedDocValues[size];
  final int[] starts=new int[size + 1];
  long totalCost=0;
  for (int i=0; i < size; i++) {
    LeafReaderContext context=in.leaves().get(i);
    final LeafReader reader=context.reader();
    final FieldInfo fieldInfo=reader.getFieldInfos().fieldInfo(field);
    if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {
      return null;
    }
    SortedDocValues v=reader.getSortedDocValues(field);
    if (v == null) {
      v=DocValues.emptySorted();
    }
    totalCost+=v.cost();
    values[i]=v;
    starts[i]=context.docBase;
  }
  starts[size]=maxDoc();
  return new MultiSortedDocValues(values,starts,map,totalCost);
}
