{
  Directory directory=new RAMDirectory();
  Analyzer analyzer=new MockAnalyzer();
  IndexWriterConfig conf=new IndexWriterConfig(TEST_VERSION_CURRENT,analyzer);
  LogMergePolicy lmp=(LogMergePolicy)conf.getMergePolicy();
  lmp.setUseCompoundFile(useCompoundFile);
  lmp.setUseCompoundDocStore(useCompoundFile);
  IndexWriter writer=new IndexWriter(directory,conf);
  String[] docs={"a b c d e","a b c d e a b c d e","a b c d e f g h i j","a c e","e c a","a c e a c e","a c e a b c"};
  for (int j=0; j < docs.length; j++) {
    Document d=new Document();
    d.add(new Field("contents",docs[j],Field.Store.YES,Field.Index.ANALYZED));
    writer.addDocument(d);
  }
  writer.close();
  Searcher searcher=new IndexSearcher(directory,true);
  String[] queries={"a b","\"a b\"","\"a b c\"","a c","\"a c\"","\"a c e\""};
  ScoreDoc[] hits=null;
  QueryParser parser=new QueryParser(TEST_VERSION_CURRENT,"contents",analyzer);
  parser.setPhraseSlop(4);
  for (int j=0; j < queries.length; j++) {
    Query query=parser.parse(queries[j]);
    out.println("Query: " + query.toString("contents"));
    hits=searcher.search(query,null,1000).scoreDocs;
    out.println(hits.length + " total results");
    for (int i=0; i < hits.length && i < 10; i++) {
      Document d=searcher.doc(hits[i].doc);
      out.println(i + " " + hits[i].score+ " "+ d.get("contents"));
    }
  }
  searcher.close();
}
