{
  numRequests++;
  Query query=null;
  Filter filter=null;
  List<String> commands=StrUtils.splitSmart(req.getQueryString(),';');
  String qs=commands.size() >= 1 ? commands.get(0) : "";
  query=QueryParsing.parseQuery(qs,req.getSchema());
  Sort sort=null;
  if (commands.size() >= 2) {
    sort=QueryParsing.parseSort(commands.get(1),req.getSchema());
  }
  Hits hits=null;
  try {
    hits=req.getSearcher().search(query,filter,sort);
    int numHits=hits.length();
    int startRow=Math.min(numHits,req.getStart());
    int endRow=Math.min(numHits,req.getStart() + req.getLimit());
    int numRows=endRow - startRow;
    int[] ids=new int[numRows];
    Document[] data=new Document[numRows];
    for (int i=startRow; i < endRow; i++) {
      ids[i]=hits.id(i);
      data[i]=hits.doc(i);
    }
    rsp.add(null,new DocSlice(0,numRows,ids,null,numHits,0.0f));
  }
 catch (  IOException e) {
    rsp.setException(e);
    numErrors++;
    return;
  }
}
