{
  assertTrue(readOnly.isReadOnly());
  assertFalse(modifiable.isReadOnly());
  try {
    readOnly.add(modifiable.fieldInfo(0));
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate("bogus",random.nextBoolean());
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate("bogus",random.nextBoolean(),random.nextBoolean());
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate("bogus",random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean());
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate("bogus",random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean());
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate("bogus",random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean(),random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS,null);
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  try {
    readOnly.addOrUpdate(Arrays.asList("a","b","c"),random.nextBoolean());
    fail("instance should be read only");
  }
 catch (  IllegalStateException e) {
  }
  assertEquals(modifiable.size(),readOnly.size());
  for (  FieldInfo fi : readOnly) {
    assertEquals(fi.name,modifiable.fieldName(fi.number));
  }
}
