{
  Directory indexDir=newDirectory();
  TaxonomyWriter tw=new LuceneTaxonomyWriter(indexDir);
  fillTaxonomy(tw);
  tw.close();
  TaxonomyReader tr=new LuceneTaxonomyReader(indexDir);
  ChildrenArrays ca=tr.getChildrenArrays();
  int[] youngestChildArray=ca.getYoungestChildArray();
  assertEquals(tr.getSize(),youngestChildArray.length);
  int[] olderSiblingArray=ca.getOlderSiblingArray();
  assertEquals(tr.getSize(),olderSiblingArray.length);
  for (int i=0; i < tr.getSize(); i++) {
    int youngestChild=youngestChildArray[i];
    if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {
      assertEquals(i,tr.getParent(youngestChild));
    }
  }
  for (int i=0; i < tr.getSize(); i++) {
    assertTrue("olderSiblingArray[" + i + "] should be <"+ i,olderSiblingArray[i] < i);
  }
  for (int i=0; i < tr.getSize(); i++) {
    int sibling=olderSiblingArray[i];
    if (sibling == TaxonomyReader.INVALID_ORDINAL) {
      continue;
    }
    assertEquals(tr.getParent(i),tr.getParent(sibling));
  }
  for (int i=0; i < tr.getSize(); i++) {
    int j;
    for (j=tr.getSize() - 1; j > i; j--) {
      if (tr.getParent(j) == i) {
        break;
      }
    }
    if (j == i) {
      j=TaxonomyReader.INVALID_ORDINAL;
    }
    assertEquals(j,youngestChildArray[i]);
  }
  for (int i=0; i < tr.getSize(); i++) {
    int j;
    for (j=i - 1; j >= 0; j--) {
      if (tr.getParent(j) == tr.getParent(i)) {
        break;
      }
    }
    if (j < 0) {
      j=TaxonomyReader.INVALID_ORDINAL;
    }
    assertEquals(j,olderSiblingArray[i]);
  }
  tr.close();
  indexDir.close();
}
