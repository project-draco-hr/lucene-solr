{
  for (  String field : fields) {
    Terms terms=fields.terms(field);
    if (terms == null) {
      continue;
    }
    TermsEnum termsEnum=terms.iterator();
    FieldInfo fieldInfo=state.fieldInfos.fieldInfo(field);
    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {
      throw new UnsupportedOperationException("this codec cannot index offsets");
    }
    RAMField ramField=new RAMField(field,fieldInfo);
    postings.fieldToTerms.put(field,ramField);
    termsConsumer.reset(ramField);
    FixedBitSet docsSeen=new FixedBitSet(state.segmentInfo.maxDoc());
    long sumTotalTermFreq=0;
    long sumDocFreq=0;
    PostingsEnum postingsEnum=null;
    int enumFlags;
    IndexOptions indexOptions=fieldInfo.getIndexOptions();
    boolean writeFreqs=indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;
    boolean writePositions=indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
    boolean writeOffsets=indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
    boolean writePayloads=fieldInfo.hasPayloads();
    if (writeFreqs == false) {
      enumFlags=0;
    }
 else     if (writePositions == false) {
      enumFlags=PostingsEnum.FREQS;
    }
 else     if (writeOffsets == false) {
      if (writePayloads) {
        enumFlags=PostingsEnum.PAYLOADS;
      }
 else {
        enumFlags=0;
      }
    }
 else {
      if (writePayloads) {
        enumFlags=PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;
      }
 else {
        enumFlags=PostingsEnum.OFFSETS;
      }
    }
    while (true) {
      BytesRef term=termsEnum.next();
      if (term == null) {
        break;
      }
      RAMPostingsWriterImpl postingsWriter=termsConsumer.startTerm(term);
      postingsEnum=termsEnum.postings(postingsEnum,enumFlags);
      int docFreq=0;
      long totalTermFreq=0;
      while (true) {
        int docID=postingsEnum.nextDoc();
        if (docID == PostingsEnum.NO_MORE_DOCS) {
          break;
        }
        docsSeen.set(docID);
        docFreq++;
        int freq;
        if (writeFreqs) {
          freq=postingsEnum.freq();
          totalTermFreq+=freq;
        }
 else {
          freq=-1;
        }
        postingsWriter.startDoc(docID,freq);
        if (writePositions) {
          for (int i=0; i < freq; i++) {
            int pos=postingsEnum.nextPosition();
            BytesRef payload=writePayloads ? postingsEnum.getPayload() : null;
            int startOffset;
            int endOffset;
            if (writeOffsets) {
              startOffset=postingsEnum.startOffset();
              endOffset=postingsEnum.endOffset();
            }
 else {
              startOffset=-1;
              endOffset=-1;
            }
            postingsWriter.addPosition(pos,payload,startOffset,endOffset);
          }
        }
        postingsWriter.finishDoc();
      }
      termsConsumer.finishTerm(term,new TermStats(docFreq,totalTermFreq));
      sumDocFreq+=docFreq;
      sumTotalTermFreq+=totalTermFreq;
    }
    termsConsumer.finish(sumTotalTermFreq,sumDocFreq,docsSeen.cardinality());
  }
}
