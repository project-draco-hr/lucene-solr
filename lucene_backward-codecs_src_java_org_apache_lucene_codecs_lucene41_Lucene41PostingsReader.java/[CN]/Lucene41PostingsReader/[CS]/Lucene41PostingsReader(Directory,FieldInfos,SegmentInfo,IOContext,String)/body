{
  boolean success=false;
  IndexInput docIn=null;
  IndexInput posIn=null;
  IndexInput payIn=null;
  try {
    docIn=dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name,segmentSuffix,Lucene41PostingsFormat.DOC_EXTENSION),ioContext);
    version=CodecUtil.checkHeader(docIn,Lucene41PostingsFormat.DOC_CODEC,Lucene41PostingsFormat.VERSION_START,Lucene41PostingsFormat.VERSION_CURRENT);
    forUtil=new ForUtil(docIn);
    if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {
      CodecUtil.retrieveChecksum(docIn);
    }
    if (fieldInfos.hasProx()) {
      posIn=dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name,segmentSuffix,Lucene41PostingsFormat.POS_EXTENSION),ioContext);
      CodecUtil.checkHeader(posIn,Lucene41PostingsFormat.POS_CODEC,version,version);
      if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {
        CodecUtil.retrieveChecksum(posIn);
      }
      if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {
        payIn=dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name,segmentSuffix,Lucene41PostingsFormat.PAY_EXTENSION),ioContext);
        CodecUtil.checkHeader(payIn,Lucene41PostingsFormat.PAY_CODEC,version,version);
        if (version >= Lucene41PostingsFormat.VERSION_CHECKSUM) {
          CodecUtil.retrieveChecksum(payIn);
        }
      }
    }
    this.docIn=docIn;
    this.posIn=posIn;
    this.payIn=payIn;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(docIn,posIn,payIn);
    }
  }
}
