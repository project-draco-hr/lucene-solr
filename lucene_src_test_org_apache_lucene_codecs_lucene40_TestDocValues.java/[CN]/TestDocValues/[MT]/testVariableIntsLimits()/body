{
  long[][] minMax=new long[][]{{Long.MIN_VALUE,Long.MAX_VALUE},{Long.MIN_VALUE + 1,1},{-1,Long.MAX_VALUE},{Long.MIN_VALUE,-1},{1,Long.MAX_VALUE},{-1,Long.MAX_VALUE - 1},{Long.MIN_VALUE + 2,1}};
  Type[] expectedTypes=new Type[]{Type.FIXED_INTS_64,Type.FIXED_INTS_64,Type.FIXED_INTS_64,Type.FIXED_INTS_64,Type.VAR_INTS,Type.VAR_INTS,Type.VAR_INTS};
  DocValueHolder valueHolder=new DocValueHolder();
  for (int i=0; i < minMax.length; i++) {
    Directory dir=newDirectory();
    final Counter trackBytes=Counter.newCounter();
    DocValuesConsumer w=Ints.getWriter(dir,"test",trackBytes,Type.VAR_INTS,newIOContext(random));
    valueHolder.intValue=minMax[i][0];
    w.add(0,valueHolder);
    valueHolder.intValue=minMax[i][1];
    w.add(1,valueHolder);
    w.finish(2);
    assertEquals(0,trackBytes.get());
    DocValues r=Ints.getValues(dir,"test",2,Type.VAR_INTS,newIOContext(random));
    Source source=getSource(r);
    assertEquals(i + " with min: " + minMax[i][0]+ " max: "+ minMax[i][1],expectedTypes[i],source.type());
    assertEquals(minMax[i][0],source.getInt(0));
    assertEquals(minMax[i][1],source.getInt(1));
    r.close();
    dir.close();
  }
}
