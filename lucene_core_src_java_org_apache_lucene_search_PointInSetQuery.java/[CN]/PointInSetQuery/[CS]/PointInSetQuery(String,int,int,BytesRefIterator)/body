{
  this.field=field;
  this.bytesPerDim=bytesPerDim;
  this.numDims=numDims;
  PrefixCodedTerms.Builder builder=new PrefixCodedTerms.Builder();
  BytesRefBuilder previous=null;
  BytesRef current;
  while ((current=packedPoints.next()) != null) {
    if (current.length != numDims * bytesPerDim) {
      throw new IllegalArgumentException("packed point length should be " + (numDims * bytesPerDim) + " but got "+ current.length+ "; field=\""+ field+ "\", numDims="+ numDims+ " bytesPerDim="+ bytesPerDim);
    }
    if (previous == null) {
      previous=new BytesRefBuilder();
    }
 else     if (previous.get().equals(current)) {
      continue;
    }
    builder.add(field,current);
    previous.copyBytes(current);
  }
  sortedPackedPoints=builder.finish();
  sortedPackedPointsHashCode=sortedPackedPoints.hashCode();
}
