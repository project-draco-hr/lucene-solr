{
  return new AbstractCollection<byte[]>(){
    @Override public Iterator<byte[]> iterator(){
      int size=(int)sortedPackedPoints.size();
      PrefixCodedTerms.TermIterator iterator=sortedPackedPoints.iterator();
      return new Iterator<byte[]>(){
        int upto=0;
        @Override public boolean hasNext(){
          return upto < size;
        }
        @Override public byte[] next(){
          if (upto == size) {
            throw new NoSuchElementException();
          }
          upto++;
          BytesRef next=iterator.next();
          return Arrays.copyOfRange(next.bytes,next.offset,next.length);
        }
      }
;
    }
    @Override public int size(){
      return (int)sortedPackedPoints.size();
    }
  }
;
}
