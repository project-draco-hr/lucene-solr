{
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      LeafReader reader=context.reader();
      PointValues values=reader.getPointValues();
      if (values == null) {
        return null;
      }
      FieldInfo fieldInfo=reader.getFieldInfos().fieldInfo(field);
      if (fieldInfo == null) {
        return null;
      }
      if (fieldInfo.getPointDimensionCount() != numDims) {
        throw new IllegalArgumentException("field=\"" + field + "\" was indexed with numDims="+ fieldInfo.getPointDimensionCount()+ " but this query has numDims="+ numDims);
      }
      if (fieldInfo.getPointNumBytes() != bytesPerDim) {
        throw new IllegalArgumentException("field=\"" + field + "\" was indexed with bytesPerDim="+ fieldInfo.getPointNumBytes()+ " but this query has bytesPerDim="+ bytesPerDim);
      }
      DocIdSetBuilder result=new DocIdSetBuilder(reader.maxDoc(),values,field);
      if (numDims == 1) {
        values.intersect(field,new MergePointVisitor(sortedPackedPoints,result));
      }
 else {
        SinglePointVisitor visitor=new SinglePointVisitor(result);
        TermIterator iterator=sortedPackedPoints.iterator();
        for (BytesRef point=iterator.next(); point != null; point=iterator.next()) {
          visitor.setPoint(point);
          values.intersect(field,visitor);
        }
      }
      return new ConstantScoreScorer(this,score(),result.build().iterator());
    }
  }
;
}
