{
  MockDirectoryWrapper.Failure failure=new MockDirectoryWrapper.Failure(){
    boolean failed=false;
    @Override public MockDirectoryWrapper.Failure reset(){
      failed=false;
      return this;
    }
    @Override public void eval(    MockDirectoryWrapper dir) throws IOException {
      if (!failed) {
        failed=true;
        throw new IOException("fail in add doc");
      }
    }
  }
;
  String[] keywords={"1","2"};
  String[] unindexed={"Netherlands","Italy"};
  String[] unstored={"Amsterdam has lots of bridges","Venice has lots of canals"};
  String[] text={"Amsterdam","Venice"};
  MockDirectoryWrapper dir=newDirectory();
  IndexWriter modifier=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random,MockTokenizer.WHITESPACE,false)));
  modifier.commit();
  dir.failOn(failure.reset());
  FieldType custom1=new FieldType();
  custom1.setStored(true);
  for (int i=0; i < keywords.length; i++) {
    Document doc=new Document();
    doc.add(newField("id",keywords[i],StringField.TYPE_STORED));
    doc.add(newField("country",unindexed[i],custom1));
    doc.add(newField("contents",unstored[i],TextField.TYPE_UNSTORED));
    doc.add(newField("city",text[i],TextField.TYPE_STORED));
    try {
      modifier.addDocument(doc);
    }
 catch (    IOException io) {
      if (VERBOSE) {
        System.out.println("TEST: got expected exc:");
        io.printStackTrace(System.out);
      }
      break;
    }
  }
  modifier.close();
  TestIndexWriter.assertNoUnreferencedFiles(dir,"docsWriter.abort() failed to delete unreferenced files");
  dir.close();
}
