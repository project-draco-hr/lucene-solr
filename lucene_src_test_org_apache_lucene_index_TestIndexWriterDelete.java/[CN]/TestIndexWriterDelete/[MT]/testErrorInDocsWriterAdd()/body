{
  MockRAMDirectory.Failure failure=new MockRAMDirectory.Failure(){
    boolean failed=false;
    @Override public MockRAMDirectory.Failure reset(){
      failed=false;
      return this;
    }
    @Override public void eval(    MockRAMDirectory dir) throws IOException {
      if (!failed) {
        failed=true;
        throw new IOException("fail in add doc");
      }
    }
  }
;
  String[] keywords={"1","2"};
  String[] unindexed={"Netherlands","Italy"};
  String[] unstored={"Amsterdam has lots of bridges","Venice has lots of canals"};
  String[] text={"Amsterdam","Venice"};
  MockRAMDirectory dir=new MockRAMDirectory();
  IndexWriter modifier=new IndexWriter(dir,new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,false)));
  modifier.commit();
  dir.failOn(failure.reset());
  for (int i=0; i < keywords.length; i++) {
    Document doc=new Document();
    doc.add(new Field("id",keywords[i],Field.Store.YES,Field.Index.NOT_ANALYZED));
    doc.add(new Field("country",unindexed[i],Field.Store.YES,Field.Index.NO));
    doc.add(new Field("contents",unstored[i],Field.Store.NO,Field.Index.ANALYZED));
    doc.add(new Field("city",text[i],Field.Store.YES,Field.Index.ANALYZED));
    try {
      modifier.addDocument(doc);
    }
 catch (    IOException io) {
      break;
    }
  }
  TestIndexWriter.assertNoUnreferencedFiles(dir,"docsWriter.abort() failed to delete unreferenced files");
  modifier.close();
}
