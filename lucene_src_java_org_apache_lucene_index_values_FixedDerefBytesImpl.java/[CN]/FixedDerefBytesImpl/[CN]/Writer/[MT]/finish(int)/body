{
  boolean success=false;
  final int numValues=hash.size();
  final IndexOutput datOut=getDataOut();
  try {
    datOut.writeInt(size);
    if (size != -1) {
      final BytesRef bytesRef=new BytesRef(size);
      for (int i=0; i < numValues; i++) {
        hash.get(i,bytesRef);
        datOut.writeBytes(bytesRef.bytes,bytesRef.offset,bytesRef.length);
      }
    }
    success=true;
  }
  finally {
    IOUtils.closeSafely(!success,datOut);
    hash.close();
  }
  success=false;
  final IndexOutput idxOut=getIndexOut();
  try {
    final int count=1 + numValues;
    idxOut.writeInt(count - 1);
    final PackedInts.Writer w=PackedInts.getWriter(idxOut,docCount,PackedInts.bitsRequired(count - 1));
    final int limit=docCount > docToID.length ? docToID.length : docCount;
    for (int i=0; i < limit; i++) {
      w.add(docToID[i]);
    }
    for (int i=limit; i < docCount; i++) {
      w.add(0);
    }
    w.finish();
    success=true;
  }
  finally {
    IOUtils.closeSafely(!success,idxOut);
    bytesUsed.addAndGet((-docToID.length) * RamUsageEstimator.NUM_BYTES_INT);
    docToID=null;
  }
}
