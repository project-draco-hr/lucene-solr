{
  Directory dir=newDirectory();
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  byte[] b=new byte[50];
  for (int i=0; i < 50; i++)   b[i]=(byte)(i + 77);
  Document doc=new Document();
  FieldType customType=new FieldType(StoredField.TYPE);
  customType.setTokenized(true);
  Field f=new Field("binary",b,10,17,customType);
  customType.setIndexed(true);
  final MockTokenizer doc1field1=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc1field1.setReader(new StringReader("doc1field1"));
  f.setTokenStream(doc1field1);
  FieldType customType2=new FieldType(TextField.TYPE_STORED);
  Field f2=newField("string","value",customType2);
  final MockTokenizer doc1field2=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc1field2.setReader(new StringReader("doc1field2"));
  f2.setTokenStream(doc1field2);
  doc.add(f);
  doc.add(f2);
  w.addDocument(doc);
  final MockTokenizer doc2field1=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc2field1.setReader(new StringReader("doc2field1"));
  f.setTokenStream(doc2field1);
  final MockTokenizer doc2field2=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc2field2.setReader(new StringReader("doc2field2"));
  f2.setTokenStream(doc2field2);
  w.addDocument(doc);
  w.commit();
  final MockTokenizer doc3field1=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc3field1.setReader(new StringReader("doc3field1"));
  f.setTokenStream(doc3field1);
  final MockTokenizer doc3field2=new MockTokenizer(MockTokenizer.WHITESPACE,false);
  doc3field2.setReader(new StringReader("doc3field2"));
  f2.setTokenStream(doc3field2);
  w.addDocument(doc);
  w.commit();
  w.forceMerge(1);
  w.close();
  IndexReader ir=DirectoryReader.open(dir);
  StoredDocument doc2=ir.document(0);
  StorableField f3=doc2.getField("binary");
  b=f3.binaryValue().bytes;
  assertTrue(b != null);
  assertEquals(17,b.length,17);
  assertEquals(87,b[0]);
  assertTrue(ir.document(0).getField("binary").binaryValue() != null);
  assertTrue(ir.document(1).getField("binary").binaryValue() != null);
  assertTrue(ir.document(2).getField("binary").binaryValue() != null);
  assertEquals("value",ir.document(0).get("string"));
  assertEquals("value",ir.document(1).get("string"));
  assertEquals("value",ir.document(2).get("string"));
  assertTrue(_TestUtil.docs(random(),ir,"binary",new BytesRef("doc1field1"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertTrue(_TestUtil.docs(random(),ir,"binary",new BytesRef("doc2field1"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertTrue(_TestUtil.docs(random(),ir,"binary",new BytesRef("doc3field1"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertTrue(_TestUtil.docs(random(),ir,"string",new BytesRef("doc1field2"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertTrue(_TestUtil.docs(random(),ir,"string",new BytesRef("doc2field2"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertTrue(_TestUtil.docs(random(),ir,"string",new BytesRef("doc3field2"),null,null,DocsEnum.FLAG_NONE).nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  ir.close();
  dir.close();
}
