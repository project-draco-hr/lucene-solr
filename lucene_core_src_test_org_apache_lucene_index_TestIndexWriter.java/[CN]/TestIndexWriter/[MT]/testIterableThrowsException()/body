{
  Directory dir=newDirectory();
  IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())));
  int iters=atLeast(100);
  int docCount=0;
  int docId=0;
  Set<String> liveIds=new HashSet<>();
  for (int i=0; i < iters; i++) {
    List<Document> docs=new ArrayList<>();
    FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);
    FieldType idFt=new FieldType(TextField.TYPE_STORED);
    int numDocs=atLeast(4);
    for (int j=0; j < numDocs; j++) {
      Document doc=new Document();
      doc.add(newField("id","" + (docId++),idFt));
      doc.add(newField("foo",TestUtil.randomSimpleString(random()),ft));
      docs.add(doc);
    }
    boolean success=false;
    try {
      w.addDocuments(new RandomFailingIterable<IndexDocument>(docs,random()));
      success=true;
    }
 catch (    RuntimeException e) {
      assertEquals("boom",e.getMessage());
    }
 finally {
      if (success) {
        docCount+=docs.size();
        for (        Document indexDocument : docs) {
          liveIds.add(indexDocument.get("id"));
        }
      }
    }
  }
  DirectoryReader reader=w.getReader();
  assertEquals(docCount,reader.numDocs());
  List<LeafReaderContext> leaves=reader.leaves();
  for (  LeafReaderContext leafReaderContext : leaves) {
    LeafReader ar=leafReaderContext.reader();
    Bits liveDocs=ar.getLiveDocs();
    int maxDoc=ar.maxDoc();
    for (int i=0; i < maxDoc; i++) {
      if (liveDocs == null || liveDocs.get(i)) {
        assertTrue(liveIds.remove(ar.document(i).get("id")));
      }
    }
  }
  assertTrue(liveIds.isEmpty());
  w.close();
  IOUtils.close(reader,dir);
}
