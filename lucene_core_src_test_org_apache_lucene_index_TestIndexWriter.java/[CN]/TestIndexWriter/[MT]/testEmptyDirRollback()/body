{
  assumeFalse("test makes assumptions about file counts",Codec.getDefault() instanceof SimpleTextCodec);
  Directory dir=newDirectory();
  if (dir instanceof MockDirectoryWrapper) {
    ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);
  }
  String[] origFiles=dir.listAll();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()).setUseCompoundFile(false));
  String[] files=dir.listAll();
  final int extraFileCount=files.length - origFiles.length;
  if (extraFileCount == 1) {
    assertTrue(Arrays.asList(files).contains(IndexWriter.WRITE_LOCK_NAME));
  }
 else {
    Arrays.sort(origFiles);
    Arrays.sort(files);
    assertArrayEquals(origFiles,files);
  }
  Document doc=new Document();
  FieldType customType=new FieldType(TextField.TYPE_STORED);
  customType.setStoreTermVectors(true);
  customType.setStoreTermVectorPositions(true);
  customType.setStoreTermVectorOffsets(true);
  doc.add(newField("c","val",customType));
  writer.addDocument(doc);
  int computedExtraFileCount=0;
  for (  String file : dir.listAll()) {
    if (IndexWriter.WRITE_LOCK_NAME.equals(file) || file.startsWith(IndexFileNames.SEGMENTS) || IndexFileNames.CODEC_FILE_PATTERN.matcher(file).matches()) {
      if (file.lastIndexOf('.') < 0 || !Arrays.asList("fdx","fdt","tvx","tvd","tvf").contains(file.substring(file.lastIndexOf('.') + 1))) {
        ++computedExtraFileCount;
      }
    }
  }
  assertEquals("only the stored and term vector files should exist in the directory",extraFileCount,computedExtraFileCount);
  doc=new Document();
  doc.add(newField("c","val",customType));
  writer.addDocument(doc);
  assertTrue("flush should have occurred and files should have been created",dir.listAll().length > 5 + extraFileCount);
  writer.rollback();
  String allFiles[]=dir.listAll();
  assertEquals("no files should exist in the directory after rollback",origFiles.length + extraFileCount,allFiles.length);
  writer.close();
  allFiles=dir.listAll();
  assertEquals("expected a no-op close after IW.rollback()",origFiles.length + extraFileCount,allFiles.length);
  dir.close();
}
