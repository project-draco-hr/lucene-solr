{
  assumeFalse("test relies on exact filenames",Codec.getDefault() instanceof SimpleTextCodec);
  for (int iter=0; iter < 2; iter++) {
    Path path=createTempDir();
    FileSystem fs=new WindowsFS(path.getFileSystem()).getFileSystem(URI.create("file:///"));
    Path indexPath=new FilterPath(path,fs);
    FSDirectory dir;
    if (Constants.WINDOWS) {
      dir=new MMapDirectory(indexPath);
    }
 else {
      dir=new NIOFSDirectory(indexPath);
    }
    MergePolicy mergePolicy=newLogMergePolicy(true);
    mergePolicy.setNoCFSRatio(1.0);
    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
    IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(mergePolicy).setUseCompoundFile(true));
    Document doc=new Document();
    doc.add(newTextField("field","go",Field.Store.NO));
    w.addDocument(doc);
    DirectoryReader r;
    if (iter == 0) {
      r=w.getReader();
    }
 else {
      w.commit();
      r=DirectoryReader.open(dir);
    }
    assertTrue(Files.exists(indexPath.resolve("_0.cfs")));
    assertTrue(Files.exists(indexPath.resolve("_0.cfe")));
    assertTrue(Files.exists(indexPath.resolve("_0.si")));
    if (iter == 1) {
      assertTrue(Files.exists(indexPath.resolve("segments_1")));
    }
 else {
      assertFalse(Files.exists(indexPath.resolve("segments_1")));
    }
    w.addDocument(doc);
    w.forceMerge(1);
    if (iter == 1) {
      w.commit();
    }
    IndexReader r2=DirectoryReader.openIfChanged(r);
    assertNotNull(r2);
    assertTrue(r != r2);
    assertTrue(Files.exists(indexPath.resolve("_0.cfs")));
    w.deleteUnusedFiles();
    assertTrue(Files.exists(indexPath.resolve("_0.cfs")));
    r.close();
    if (iter == 0) {
      assertFalse(Files.exists(indexPath.resolve("_0.cfs")));
    }
 else {
      dir.deletePendingFiles();
      assertFalse(Files.exists(indexPath.resolve("_0.cfs")));
    }
    w.close();
    r2.close();
    dir.close();
  }
}
