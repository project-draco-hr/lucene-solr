{
  for (int iter=0; iter < 2; iter++) {
    Directory dir=newMockDirectory();
    MergePolicy mergePolicy=newLogMergePolicy(true);
    mergePolicy.setNoCFSRatio(1.0);
    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);
    IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(mergePolicy).setUseCompoundFile(true));
    Document doc=new Document();
    doc.add(newTextField("field","go",Field.Store.NO));
    w.addDocument(doc);
    DirectoryReader r;
    if (iter == 0) {
      r=w.getReader();
    }
 else {
      w.commit();
      r=DirectoryReader.open(dir);
    }
    List<String> files=new ArrayList<>(Arrays.asList(dir.listAll()));
    files.remove("write.lock");
    assertTrue(files.contains("_0.cfs"));
    assertTrue(files.contains("_0.cfe"));
    assertTrue(files.contains("_0.si"));
    if (iter == 1) {
      assertTrue(files.contains("segments_1"));
      assertTrue(files.contains("segments.gen"));
      assertEquals(files.toString(),files.size(),5);
    }
 else {
      assertEquals(files.toString(),files.size(),3);
    }
    w.addDocument(doc);
    w.forceMerge(1);
    if (iter == 1) {
      w.commit();
    }
    IndexReader r2=DirectoryReader.openIfChanged(r);
    assertNotNull(r2);
    assertTrue(r != r2);
    files=Arrays.asList(dir.listAll());
    assertTrue(files.contains("_0.cfs"));
    w.deleteUnusedFiles();
    files=Arrays.asList(dir.listAll());
    assertTrue(files.contains("_0.cfs"));
    r.close();
    if (iter == 0) {
      files=Arrays.asList(dir.listAll());
      assertFalse(files.contains("_0.cfs"));
    }
 else {
      w.deleteUnusedFiles();
      files=Arrays.asList(dir.listAll());
      assertFalse(files.contains("_0.cfs"));
    }
    w.shutdown();
    r2.close();
    dir.close();
  }
}
