{
  SolrParams q=SolrTestCaseJ4.params("q","*:*","rows","0","tests","checkShardConsistency(vsControl)");
  SolrDocumentList controlDocList=controlClient.query(q).getResults();
  long controlDocs=controlDocList.getNumFound();
  SolrDocumentList cloudDocList=cloudClient.query(q).getResults();
  long cloudClientDocs=cloudDocList.getNumFound();
  q=SolrTestCaseJ4.params("q","*:*","rows","100000","fl","id","tests","checkShardConsistency(vsControl)/getIds");
  controlDocList=controlClient.query(q).getResults();
  if (controlDocs != controlDocList.getNumFound()) {
    log.error("Something changed! control now " + controlDocList.getNumFound());
  }
  cloudDocList=cloudClient.query(q).getResults();
  if (cloudClientDocs != cloudDocList.getNumFound()) {
    log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());
  }
  if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {
    boolean legal=CloudInspectUtil.checkIfDiffIsLegal(controlDocList,cloudDocList,"controlDocList","cloudDocList",addFails,deleteFails);
    if (legal) {
      return false;
    }
  }
  Set<Map> differences=CloudInspectUtil.showDiff(controlDocList,cloudDocList,"controlDocList","cloudDocList");
  try {
    boolean foundId=false;
    StringBuilder ids=new StringBuilder("id:(");
    for (    Map doc : differences) {
      ids.append(" ").append(doc.get("id"));
      foundId=true;
    }
    ids.append(")");
    if (foundId) {
      q=SolrTestCaseJ4.params("q",ids.toString(),"rows","100000","fl","id,_version_","sort","id asc","tests","checkShardConsistency(vsControl)/getVers");
      SolrDocumentList a=controlClient.query(q,SolrRequest.METHOD.POST).getResults();
      SolrDocumentList b=cloudClient.query(q,SolrRequest.METHOD.POST).getResults();
      log.error("controlClient :" + a + "\n\tcloudClient :"+ b);
    }
  }
 catch (  Exception e) {
    log.error("Unable to find versions for mismatched ids",e);
  }
  return true;
}
