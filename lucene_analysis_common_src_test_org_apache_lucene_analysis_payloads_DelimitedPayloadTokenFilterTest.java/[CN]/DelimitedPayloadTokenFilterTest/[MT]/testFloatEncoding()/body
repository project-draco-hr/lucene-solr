{
  String test="The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7";
  DelimitedPayloadTokenFilter filter=new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test),MockTokenizer.WHITESPACE,false),'|',new FloatEncoder());
  CharTermAttribute termAtt=filter.getAttribute(CharTermAttribute.class);
  PayloadAttribute payAtt=filter.getAttribute(PayloadAttribute.class);
  filter.reset();
  assertTermEquals("The",filter,termAtt,payAtt,null);
  assertTermEquals("quick",filter,termAtt,payAtt,PayloadHelper.encodeFloat(1.0f));
  assertTermEquals("red",filter,termAtt,payAtt,PayloadHelper.encodeFloat(2.0f));
  assertTermEquals("fox",filter,termAtt,payAtt,PayloadHelper.encodeFloat(3.5f));
  assertTermEquals("jumped",filter,termAtt,payAtt,PayloadHelper.encodeFloat(0.5f));
  assertTermEquals("over",filter,termAtt,payAtt,null);
  assertTermEquals("the",filter,termAtt,payAtt,null);
  assertTermEquals("lazy",filter,termAtt,payAtt,PayloadHelper.encodeFloat(5.0f));
  assertTermEquals("brown",filter,termAtt,payAtt,PayloadHelper.encodeFloat(99.3f));
  assertTermEquals("dogs",filter,termAtt,payAtt,PayloadHelper.encodeFloat(83.7f));
  assertFalse(filter.incrementToken());
  filter.end();
  filter.close();
}
