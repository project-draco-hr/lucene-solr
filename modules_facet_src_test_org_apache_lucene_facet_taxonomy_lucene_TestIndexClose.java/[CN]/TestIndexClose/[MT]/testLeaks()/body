{
  LeakChecker checker=new LeakChecker();
  Directory dir=newDirectory();
  LuceneTaxonomyWriter tw=checker.openWriter(dir);
  tw.close();
  assertEquals(0,checker.nopen());
  tw=checker.openWriter(dir);
  tw.addCategory(new CategoryPath("animal","dog"));
  tw.close();
  assertEquals(0,checker.nopen());
  LuceneTaxonomyReader tr=checker.openReader(dir);
  tr.getPath(1);
  tr.refresh();
  tr.close();
  assertEquals(0,checker.nopen());
  tr=checker.openReader(dir);
  tw=checker.openWriter(dir);
  tw.addCategory(new CategoryPath("animal","cat"));
  tr.refresh();
  tw.commit();
  tw.close();
  tr.refresh();
  tr.close();
  assertEquals(0,checker.nopen());
  tw=checker.openWriter(dir);
  for (int i=0; i < 10000; i++) {
    tw.addCategory(new CategoryPath("number",Integer.toString(i)));
  }
  tw.close();
  assertEquals(0,checker.nopen());
  tw=checker.openWriter(dir);
  for (int i=0; i < 10000; i++) {
    tw.addCategory(new CategoryPath("number",Integer.toString(i * 2)));
  }
  tw.close();
  assertEquals(0,checker.nopen());
  dir.close();
}
