{
  final int[] orderedEntries=new int[size()];
  for (int i=0; i < orderedEntries.length; i++) {
    orderedEntries[i]=i;
  }
  new IntroSorter(){
    @Override protected void swap(    int i,    int j){
      final int o=orderedEntries[i];
      orderedEntries[i]=orderedEntries[j];
      orderedEntries[j]=o;
    }
    @Override protected int compare(    int i,    int j){
      final int idx1=orderedEntries[i], idx2=orderedEntries[j];
      return comp.compare(get(scratch1,idx1),get(scratch2,idx2));
    }
    @Override protected void setPivot(    int i){
      final int index=orderedEntries[i];
      get(pivot,index);
    }
    @Override protected int comparePivot(    int j){
      final int index=orderedEntries[j];
      return comp.compare(pivot,get(scratch2,index));
    }
    private final BytesRef pivot=new BytesRef(), scratch1=new BytesRef(), scratch2=new BytesRef();
  }
.sort(0,size());
  return orderedEntries;
}
