{
  int numPatterns=10 + random().nextInt(20);
  Random random=new Random(random().nextLong());
  for (int i=0; i < numPatterns; i++) {
    final Pattern p=TestUtil.randomPattern(random());
    final String replacement=TestUtil.randomSimpleString(random);
    Analyzer a=new Analyzer(){
      @Override protected TokenStreamComponents createComponents(      String fieldName){
        Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);
        return new TokenStreamComponents(tokenizer,tokenizer);
      }
      @Override protected Reader initReader(      String fieldName,      Reader reader){
        return new PatternReplaceCharFilter(p,replacement,reader);
      }
    }
;
    final int maxInputLength=30;
    final boolean asciiOnly=true;
    checkRandomData(random,a,250 * RANDOM_MULTIPLIER,maxInputLength,asciiOnly);
  }
}
