{
  int end=0;
  if (checkedRepeats && repeats == null) {
    pq.clear();
    for (PhrasePositions pp=first; pp != null; pp=pp.next) {
      pp.firstPosition();
      if (pp.position > end)       end=pp.position;
      pq.put(pp);
    }
    return end;
  }
  for (PhrasePositions pp=first; pp != null; pp=pp.next)   pp.firstPosition();
  if (!checkedRepeats) {
    checkedRepeats=true;
    HashMap m=null;
    for (PhrasePositions pp=first; pp != null; pp=pp.next) {
      int tpPos=pp.position + pp.offset;
      for (PhrasePositions pp2=pp.next; pp2 != null; pp2=pp2.next) {
        int tpPos2=pp2.position + pp2.offset;
        if (tpPos2 == tpPos) {
          if (m == null)           m=new HashMap();
          pp.repeats=true;
          pp2.repeats=true;
          m.put(pp,null);
          m.put(pp2,null);
        }
      }
    }
    if (m != null)     repeats=(PhrasePositions[])m.keySet().toArray(new PhrasePositions[0]);
  }
  if (repeats != null) {
    for (int i=0; i < repeats.length; i++) {
      PhrasePositions pp=repeats[i];
      PhrasePositions pp2;
      while ((pp2=termPositionsDiffer(pp)) != null) {
        if (!pp2.nextPosition())         return -1;
      }
    }
  }
  pq.clear();
  for (PhrasePositions pp=first; pp != null; pp=pp.next) {
    if (pp.position > end)     end=pp.position;
    pq.put(pp);
  }
  if (repeats != null) {
    tmpPos=new PhrasePositions[pq.size()];
  }
  return end;
}
