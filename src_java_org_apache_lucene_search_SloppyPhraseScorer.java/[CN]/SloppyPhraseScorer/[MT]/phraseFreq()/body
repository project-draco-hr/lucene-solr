{
  int end=initPhrasePositions();
  float freq=0.0f;
  boolean done=(end < 0);
  while (!done) {
    PhrasePositions pp=(PhrasePositions)pq.pop();
    int start=pp.position;
    int next=((PhrasePositions)pq.top()).position;
    boolean tpsDiffer=true;
    for (int pos=start; pos <= next || !tpsDiffer; pos=pp.position) {
      if (pos <= next && tpsDiffer)       start=pos;
      if (!pp.nextPosition()) {
        done=true;
        break;
      }
      tpsDiffer=!pp.repeats || termPositionsDiffer(pp);
    }
    int matchLength=end - start;
    if (matchLength <= slop)     freq+=getSimilarity().sloppyFreq(matchLength);
    if (pp.position > end)     end=pp.position;
    pq.put(pp);
  }
  return freq;
}
