{
  Directory dir=new AppendingRAMDirectory(random,new RAMDirectory());
  IndexWriterConfig cfg=new IndexWriterConfig(Version.LUCENE_40,new MockAnalyzer(random));
  cfg.setCodecProvider(new AppendingCodecProvider());
  ((TieredMergePolicy)cfg.getMergePolicy()).setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(dir,cfg);
  Document doc=new Document();
  doc.add(newField("f",text,Store.YES,Index.ANALYZED,TermVector.WITH_POSITIONS_OFFSETS));
  writer.addDocument(doc);
  writer.commit();
  writer.addDocument(doc);
  writer.optimize();
  writer.close();
  IndexReader reader=IndexReader.open(dir,null,true,1,new AppendingCodecProvider());
  assertEquals(2,reader.numDocs());
  doc=reader.document(0);
  assertEquals(text,doc.get("f"));
  Fields fields=MultiFields.getFields(reader);
  Terms terms=fields.terms("f");
  assertNotNull(terms);
  TermsEnum te=terms.iterator();
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("quick")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("brown")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("fox")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("jumped")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("over")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("lazy")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("dog")));
  assertEquals(SeekStatus.FOUND,te.seekCeil(new BytesRef("the")));
  DocsEnum de=te.docs(null,null);
  assertTrue(de.advance(0) != DocsEnum.NO_MORE_DOCS);
  assertEquals(2,de.freq());
  assertTrue(de.advance(1) != DocsEnum.NO_MORE_DOCS);
  assertTrue(de.advance(2) == DocsEnum.NO_MORE_DOCS);
  reader.close();
}
