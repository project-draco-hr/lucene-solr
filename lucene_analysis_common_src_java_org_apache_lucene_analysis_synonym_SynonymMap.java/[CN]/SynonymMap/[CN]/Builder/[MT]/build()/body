{
  ByteSequenceOutputs outputs=ByteSequenceOutputs.getSingleton();
  org.apache.lucene.util.fst.Builder<BytesRef> builder=new org.apache.lucene.util.fst.Builder<>(FST.INPUT_TYPE.BYTE4,outputs);
  BytesRefBuilder scratch=new BytesRefBuilder();
  ByteArrayDataOutput scratchOutput=new ByteArrayDataOutput();
  final Set<Integer> dedupSet;
  if (dedup) {
    dedupSet=new HashSet<>();
  }
 else {
    dedupSet=null;
  }
  final byte[] spare=new byte[5];
  Set<CharsRef> keys=workingSet.keySet();
  CharsRef sortedKeys[]=keys.toArray(new CharsRef[keys.size()]);
  Arrays.sort(sortedKeys,CharsRef.getUTF16SortedAsUTF8Comparator());
  final IntsRefBuilder scratchIntsRef=new IntsRefBuilder();
  for (int keyIdx=0; keyIdx < sortedKeys.length; keyIdx++) {
    CharsRef input=sortedKeys[keyIdx];
    MapEntry output=workingSet.get(input);
    int numEntries=output.ords.size();
    int estimatedSize=5 + numEntries * 5;
    scratch.grow(estimatedSize);
    scratchOutput.reset(scratch.bytes());
    int count=0;
    for (int i=0; i < numEntries; i++) {
      if (dedupSet != null) {
        final Integer ent=output.ords.get(i);
        if (dedupSet.contains(ent)) {
          continue;
        }
        dedupSet.add(ent);
      }
      scratchOutput.writeVInt(output.ords.get(i));
      count++;
    }
    final int pos=scratchOutput.getPosition();
    scratchOutput.writeVInt(count << 1 | (output.includeOrig ? 0 : 1));
    final int pos2=scratchOutput.getPosition();
    final int vIntLen=pos2 - pos;
    System.arraycopy(scratch.bytes(),pos,spare,0,vIntLen);
    System.arraycopy(scratch.bytes(),0,scratch.bytes(),vIntLen,pos);
    System.arraycopy(spare,0,scratch.bytes(),0,vIntLen);
    if (dedupSet != null) {
      dedupSet.clear();
    }
    scratch.setLength(scratchOutput.getPosition());
    builder.add(Util.toUTF32(input,scratchIntsRef),scratch.toBytesRef());
  }
  FST<BytesRef> fst=builder.finish();
  return new SynonymMap(fst,words,maxHorizontalContext);
}
