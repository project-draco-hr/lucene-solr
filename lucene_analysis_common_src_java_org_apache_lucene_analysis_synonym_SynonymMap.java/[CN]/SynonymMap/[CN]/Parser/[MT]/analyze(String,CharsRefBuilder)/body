{
  try (TokenStream ts=analyzer.tokenStream("",text)){
    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);
    PositionIncrementAttribute posIncAtt=ts.addAttribute(PositionIncrementAttribute.class);
    ts.reset();
    reuse.clear();
    while (ts.incrementToken()) {
      int length=termAtt.length();
      if (length == 0) {
        throw new IllegalArgumentException("term: " + text + " analyzed to a zero-length token");
      }
      if (posIncAtt.getPositionIncrement() != 1) {
        throw new IllegalArgumentException("term: " + text + " analyzed to a token with posinc != 1");
      }
      reuse.grow(reuse.length() + length + 1);
      int end=reuse.length();
      if (reuse.length() > 0) {
        reuse.setCharAt(end++,SynonymMap.WORD_SEPARATOR);
        reuse.setLength(reuse.length() + 1);
      }
      System.arraycopy(termAtt.buffer(),0,reuse.chars(),end,length);
      reuse.setLength(reuse.length() + length);
    }
    ts.end();
  }
   if (reuse.length() == 0) {
    throw new IllegalArgumentException("term: " + text + " was completely eliminated by analyzer");
  }
  return reuse.get();
}
