{
  FileBasedSpellChecker checker=new FileBasedSpellChecker();
  NamedList spellchecker=new NamedList();
  spellchecker.add("classname",FileBasedSpellChecker.class.getName());
  spellchecker.add(SolrSpellChecker.DICTIONARY_NAME,"external");
  File spelling=new File("spellings.txt");
  spellchecker.add(AbstractLuceneSpellChecker.LOCATION,spelling.getAbsolutePath());
  spellchecker.add(IndexBasedSpellChecker.FIELD,"teststop");
  spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING,"UTF-8");
  File tmpDir=new File(System.getProperty("java.io.tmpdir"));
  File indexDir=new File(tmpDir,"spellingIdx" + new Date().getTime());
  indexDir.mkdirs();
  spellchecker.add(FileBasedSpellChecker.INDEX_DIR,indexDir.getAbsolutePath());
  SolrCore core=h.getCore();
  String dictName=checker.init(spellchecker,core.getResourceLoader());
  assertTrue(dictName + " is not equal to " + "external",dictName.equals("external") == true);
  checker.build(core,null);
  IndexReader reader=core.getSearcher().get().getReader();
  Collection<Token> tokens=queryConverter.convert("fob");
  SpellingResult result=checker.getSuggestions(tokens,reader);
  assertTrue("result is null and it shouldn't be",result != null);
  Map<String,Integer> suggestions=result.get(tokens.iterator().next());
  Map.Entry<String,Integer> entry=suggestions.entrySet().iterator().next();
  assertTrue(entry.getKey() + " is not equal to " + "foo",entry.getKey().equals("foo") == true);
  assertTrue(entry.getValue() + " does not equal: " + SpellingResult.NO_FREQUENCY_INFO,entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);
  tokens=queryConverter.convert("super");
  result=checker.getSuggestions(tokens,reader);
  assertTrue("result is null and it shouldn't be",result != null);
  suggestions=result.get(tokens.iterator().next());
  assertTrue("suggestions is not null and it should be",suggestions == null);
}
