{
  StringBuilder sb=new StringBuilder();
  for (int pos=startPos + 1; pos <= endPosData.pos; pos++) {
    final Position posData=positions.get(pos);
    for (int idx=0; idx < posData.count; idx++) {
      sb.append("  ");
      sb.append(getNodeID(pos,idx));
      sb.append(" [label=\"");
      sb.append(pos);
      sb.append(": ");
      sb.append(posData.lastRightID[idx]);
      sb.append("\"]\n");
    }
  }
  for (int pos=endPosData.pos; pos > startPos; pos--) {
    final Position posData=positions.get(pos);
    for (int idx=0; idx < posData.count; idx++) {
      final Position backPosData=positions.get(posData.backPos[idx]);
      final String toNodeID=getNodeID(pos,idx);
      final String fromNodeID=getNodeID(posData.backPos[idx],posData.backIndex[idx]);
      sb.append("  ");
      sb.append(fromNodeID);
      sb.append(" -> ");
      sb.append(toNodeID);
      final String attrs;
      if (toNodeID.equals(bestPathMap.get(fromNodeID))) {
        attrs=" color=\"#40e050\" fontcolor=\"#40a050\" penwidth=3 fontsize=20";
      }
 else {
        attrs="";
      }
      final Dictionary dict=tok.getDict(posData.backType[idx]);
      final int wordCost=dict.getWordCost(posData.backID[idx]);
      final int bgCost=costs.get(backPosData.lastRightID[posData.backIndex[idx]],dict.getLeftId(posData.backID[idx]));
      final String surfaceForm=new String(fragment,posData.backPos[idx] - startPos,pos - posData.backPos[idx]);
      sb.append(" [label=\"");
      sb.append(surfaceForm);
      sb.append(' ');
      sb.append(wordCost);
      if (bgCost >= 0) {
        sb.append('+');
      }
      sb.append(bgCost);
      sb.append("\"");
      sb.append(attrs);
      sb.append("]\n");
    }
  }
  return sb.toString();
}
