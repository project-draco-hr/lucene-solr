{
  boolean addedToken=false;
  do {
    Token token=getNextToken();
    if (token != null) {
      shingleBuf.add(token);
      if (shingleBuf.size() > maxShingleSize) {
        shingleBuf.remove(0);
      }
      addedToken=true;
    }
 else {
      break;
    }
  }
 while (shingleBuf.size() < maxShingleSize);
  if (!addedToken) {
    if (shingleBuf.isEmpty()) {
      return;
    }
 else {
      shingleBuf.remove(0);
    }
  }
  clearShingles();
  int[] endOffsets=new int[shingleBuf.size()];
  for (int i=0; i < endOffsets.length; i++) {
    endOffsets[i]=0;
  }
  int i=0;
  Token token=null;
  for (Iterator it=shingleBuf.iterator(); it.hasNext(); ) {
    token=(Token)it.next();
    for (int j=i; j < shingles.length; j++) {
      if (shingles[j].length() != 0) {
        shingles[j].append(TOKEN_SEPARATOR);
      }
      shingles[j].append(token.termBuffer(),0,token.termLength());
    }
    endOffsets[i]=token.endOffset();
    i++;
  }
  if ((!shingleBuf.isEmpty()) && outputUnigrams) {
    Token unigram=(Token)shingleBuf.getFirst();
    unigram.setPositionIncrement(1);
    outputBuf.add(unigram);
  }
  for (int j=1; j < shingleBuf.size(); j++) {
    Token shingle=new Token(shingles[j].toString(),((Token)shingleBuf.get(0)).startOffset(),endOffsets[j],tokenType);
    if ((!outputUnigrams) && j == 1) {
      shingle.setPositionIncrement(1);
    }
 else {
      shingle.setPositionIncrement(0);
    }
    outputBuf.add(shingle);
  }
}
