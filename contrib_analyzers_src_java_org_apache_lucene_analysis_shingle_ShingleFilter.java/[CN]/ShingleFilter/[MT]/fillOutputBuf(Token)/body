{
  boolean addedToken=false;
  do {
    token=getNextToken(token);
    if (token != null) {
      shingleBuf.add(token.clone());
      if (shingleBuf.size() > maxShingleSize) {
        shingleBuf.remove(0);
      }
      addedToken=true;
    }
 else {
      break;
    }
  }
 while (shingleBuf.size() < maxShingleSize);
  if (!addedToken) {
    if (shingleBuf.isEmpty()) {
      return;
    }
 else {
      shingleBuf.remove(0);
    }
  }
  clearShingles();
  int[] endOffsets=new int[shingleBuf.size()];
  for (int i=0; i < endOffsets.length; i++) {
    endOffsets[i]=0;
  }
  int i=0;
  Token shingle=null;
  for (Iterator it=shingleBuf.iterator(); it.hasNext(); ) {
    shingle=(Token)it.next();
    for (int j=i; j < shingles.length; j++) {
      if (shingles[j].length() != 0) {
        shingles[j].append(TOKEN_SEPARATOR);
      }
      shingles[j].append(shingle.termBuffer(),0,shingle.termLength());
    }
    endOffsets[i]=shingle.endOffset();
    i++;
  }
  if ((!shingleBuf.isEmpty()) && outputUnigrams) {
    Token unigram=(Token)shingleBuf.getFirst();
    unigram.setPositionIncrement(1);
    outputBuf.add(unigram);
  }
  if (!shingleBuf.isEmpty()) {
    Token firstShingle=(Token)shingleBuf.get(0);
    shingle=(Token)firstShingle.clone();
    shingle.setType(tokenType);
  }
  for (int j=1; j < shingleBuf.size(); j++) {
    shingle.setEndOffset(endOffsets[j]);
    StringBuffer buf=shingles[j];
    int termLength=buf.length();
    char[] termBuffer=shingle.termBuffer();
    if (termBuffer.length < termLength)     termBuffer=shingle.resizeTermBuffer(termLength);
    buf.getChars(0,termLength,termBuffer,0);
    shingle.setTermLength(termLength);
    if ((!outputUnigrams) && j == 1) {
      shingle.setPositionIncrement(1);
    }
 else {
      shingle.setPositionIncrement(0);
    }
    outputBuf.add(shingle.clone());
  }
}
