{
  Random r=random();
  Client client=Client.localClient;
  double price_low=11000;
  double price_high=100000;
  ModifiableSolrParams p=params("make_s","make_s","model_s","model_s","price_low",Double.toString(price_low),"price_high",Double.toString(price_high));
  MacroExpander m=new MacroExpander(p.getMap());
  String make_s=m.expand("${make_s}");
  String model_s=m.expand("${model_s}");
  client.deleteByQuery("*:*",null);
  int nDocs=99;
  String[] makes={"honda","toyota","ford",null};
  Double[] prices={10000.0,30000.0,50000.0,0.0,null};
  String[] honda_models={"accord","civic","fit","pilot",null};
  String[] other_models={"z1","z2","z3","z4","z5","z6",null};
  int nHonda=0;
  final int[] honda_model_counts=new int[honda_models.length];
  for (int i=0; i < nDocs; i++) {
    SolrInputDocument doc=sdoc("id",Integer.toString(i));
    Double price=rand(prices);
    if (price != null) {
      doc.addField("cost_f",price);
    }
    boolean matches_price=price != null && price >= price_low && price <= price_high;
    String make=rand(makes);
    if (make != null) {
      doc.addField(make_s,make);
    }
    if ("honda".equals(make)) {
      int modelNum=r.nextInt(honda_models.length);
      String model=honda_models[modelNum];
      if (model != null) {
        doc.addField(model_s,model);
      }
      if (matches_price) {
        nHonda++;
        honda_model_counts[modelNum]++;
      }
    }
 else     if (make == null) {
      doc.addField(model_s,rand(honda_models));
    }
 else {
      doc.addField(model_s,rand(other_models));
    }
    client.add(doc,null);
    if (r.nextInt(10) == 0) {
      client.add(doc,null);
    }
    if (r.nextInt(20) == 0) {
      client.commit();
    }
  }
  client.commit();
  List<Integer> idx=new ArrayList<>();
  for (int i=0; i < honda_model_counts.length - 1; i++) {
    idx.add(i);
  }
  Collections.sort(idx,new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      int cmp=honda_model_counts[o2] - honda_model_counts[o1];
      return cmp == 0 ? o1 - o2 : cmp;
    }
  }
);
  client.testJQ(params(p,"q","*:*","rows","0","fq","+${make_s}:honda +cost_f:[${price_low} TO ${price_high}]","json.facet","{makes:{terms:{field:${make_s}, facet:{models:{terms:{field:${model_s}, limit:2, mincount:0}}}}}}}","facet","true","facet.pivot","make_s,model_s","facet.limit","2"),"facets=={count:" + nHonda + ", makes:{buckets:[{val:honda, count:"+ nHonda+ ", models:{buckets:["+ "{val:"+ honda_models[idx.get(0)]+ ", count:"+ honda_model_counts[idx.get(0)]+ "},"+ "{val:"+ honda_models[idx.get(1)]+ ", count:"+ honda_model_counts[idx.get(1)]+ "}]}"+ "}]}}");
}
