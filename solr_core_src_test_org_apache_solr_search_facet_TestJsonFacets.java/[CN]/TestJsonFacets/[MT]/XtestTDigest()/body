{
  AVLTreeDigest t1=new AVLTreeDigest(100);
  t1.add(10,1);
  t1.add(90,1);
  t1.add(50,1);
  System.out.println(t1.quantile(0.1));
  System.out.println(t1.quantile(0.5));
  System.out.println(t1.quantile(0.9));
  assertEquals(t1.quantile(0.5),50.0,0.01);
  AVLTreeDigest t2=new AVLTreeDigest(100);
  t2.add(130,1);
  t2.add(170,1);
  t2.add(90,1);
  System.out.println(t2.quantile(0.1));
  System.out.println(t2.quantile(0.5));
  System.out.println(t2.quantile(0.9));
  AVLTreeDigest top=new AVLTreeDigest(100);
  t1.compress();
  ByteBuffer buf=ByteBuffer.allocate(t1.byteSize());
  t1.asSmallBytes(buf);
  byte[] arr1=Arrays.copyOf(buf.array(),buf.position());
  ByteBuffer rbuf=ByteBuffer.wrap(arr1);
  top.add(AVLTreeDigest.fromBytes(rbuf));
  System.out.println(top.quantile(0.1));
  System.out.println(top.quantile(0.5));
  System.out.println(top.quantile(0.9));
  t2.compress();
  ByteBuffer buf2=ByteBuffer.allocate(t2.byteSize());
  t2.asSmallBytes(buf2);
  byte[] arr2=Arrays.copyOf(buf2.array(),buf2.position());
  ByteBuffer rbuf2=ByteBuffer.wrap(arr2);
  top.add(AVLTreeDigest.fromBytes(rbuf2));
  System.out.println(top.quantile(0.1));
  System.out.println(top.quantile(0.5));
  System.out.println(top.quantile(0.9));
}
