{
  LevenshteinAutomata builder=new LevenshteinAutomata(s,false);
  LevenshteinAutomata tbuilder=new LevenshteinAutomata(s,true);
  LightAutomaton automata[]=new LightAutomaton[maxDistance + 1];
  LightAutomaton tautomata[]=new LightAutomaton[maxDistance + 1];
  for (int n=0; n < automata.length; n++) {
    automata[n]=builder.toAutomaton(n);
    tautomata[n]=tbuilder.toAutomaton(n);
    assertNotNull(automata[n]);
    assertNotNull(tautomata[n]);
    assertTrue(automata[n].isDeterministic());
    assertTrue(tautomata[n].isDeterministic());
    assertTrue(SpecialOperations.isFinite(automata[n]));
    assertTrue(SpecialOperations.isFinite(tautomata[n]));
    assertFalse(BasicOperations.hasDeadStatesFromInitial(automata[n]));
    assertFalse(BasicOperations.hasDeadStatesFromInitial(tautomata[n]));
    if (n > 0) {
      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n - 1]),BasicOperations.removeDeadStates(automata[n])));
      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n - 1]),BasicOperations.removeDeadStates(tautomata[n])));
      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n - 1]),BasicOperations.removeDeadStates(automata[n])));
      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n - 1]),BasicOperations.removeDeadStates(tautomata[n])));
      assertNotSame(automata[n - 1],automata[n]);
    }
    assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n]),BasicOperations.removeDeadStates(tautomata[n])));
switch (n) {
case 0:
      assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s),BasicOperations.removeDeadStates(automata[0])));
    assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s),BasicOperations.removeDeadStates(tautomata[0])));
  break;
case 1:
assertTrue(BasicOperations.sameLanguage(naiveLev1(s),BasicOperations.removeDeadStates(automata[1])));
assertTrue(BasicOperations.sameLanguage(naiveLev1T(s),BasicOperations.removeDeadStates(tautomata[1])));
break;
default :
assertBruteForce(s,automata[n],n);
assertBruteForceT(s,tautomata[n],n);
break;
}
}
}
