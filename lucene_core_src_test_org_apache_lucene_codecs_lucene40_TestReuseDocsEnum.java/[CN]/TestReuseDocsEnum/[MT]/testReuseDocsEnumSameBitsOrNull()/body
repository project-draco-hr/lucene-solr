{
  Directory dir=newDirectory();
  Codec cp=_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat());
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setCodec(cp));
  int numdocs=atLeast(20);
  createRandomIndex(numdocs,writer,random());
  writer.commit();
  DirectoryReader open=DirectoryReader.open(dir);
  for (  AtomicReaderContext ctx : open.leaves()) {
    Terms terms=ctx.reader().terms("body");
    TermsEnum iterator=terms.iterator(null);
    IdentityHashMap<DocsEnum,Boolean> enums=new IdentityHashMap<DocsEnum,Boolean>();
    MatchNoBits bits=new Bits.MatchNoBits(open.maxDoc());
    DocsEnum docs=null;
    while ((iterator.next()) != null) {
      docs=iterator.docs(bits,docs,random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);
      enums.put(docs,true);
    }
    assertEquals(1,enums.size());
    enums.clear();
    iterator=terms.iterator(null);
    docs=null;
    while ((iterator.next()) != null) {
      docs=iterator.docs(new Bits.MatchNoBits(open.maxDoc()),docs,random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);
      enums.put(docs,true);
    }
    assertEquals(terms.size(),enums.size());
    enums.clear();
    iterator=terms.iterator(null);
    docs=null;
    while ((iterator.next()) != null) {
      docs=iterator.docs(null,docs,random().nextBoolean() ? DocsEnum.FLAG_FREQS : 0);
      enums.put(docs,true);
    }
    assertEquals(1,enums.size());
  }
  IOUtils.close(writer,open,dir);
}
