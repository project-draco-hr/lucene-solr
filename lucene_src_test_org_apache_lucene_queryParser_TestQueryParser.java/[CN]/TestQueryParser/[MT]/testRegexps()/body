{
  QueryParser qp=new QueryParser(TEST_VERSION_CURRENT,"field",new MockAnalyzer(MockTokenizer.WHITESPACE,false));
  RegexpQuery q=new RegexpQuery(new Term("field","[a-z][123]"));
  assertEquals(q,qp.parse("/[a-z][123]/"));
  qp.setLowercaseExpandedTerms(true);
  assertEquals(q,qp.parse("/[A-Z][123]/"));
  q.setBoost(0.5f);
  assertEquals(q,qp.parse("/[A-Z][123]/^0.5"));
  qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
  q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);
  assertTrue(qp.parse("/[A-Z][123]/^0.5") instanceof RegexpQuery);
  assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((RegexpQuery)qp.parse("/[A-Z][123]/^0.5")).getRewriteMethod());
  assertEquals(q,qp.parse("/[A-Z][123]/^0.5"));
  qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);
  Query escaped=new RegexpQuery(new Term("field","[a-z]\\/[123]"));
  assertEquals(escaped,qp.parse("/[a-z]\\/[123]/"));
  Query escaped2=new RegexpQuery(new Term("field","[a-z]\\*[123]"));
  assertEquals(escaped2,qp.parse("/[a-z]\\*[123]/"));
  BooleanQuery complex=new BooleanQuery();
  complex.add(new RegexpQuery(new Term("field","[a-z]\\/[123]")),Occur.MUST);
  complex.add(new TermQuery(new Term("path","/etc/init.d/")),Occur.MUST);
  complex.add(new TermQuery(new Term("field","/etc/init[.]d/lucene/")),Occur.SHOULD);
  assertEquals(complex,qp.parse("/[a-z]\\/[123]/ AND path:/etc/init.d/ OR /etc\\/init\\[.\\]d/lucene/ "));
}
