{
  final int[] type=new int[1];
  QueryParser qp=new QueryParser(TEST_VERSION_CURRENT,"field",new MockAnalyzer(MockTokenizer.WHITESPACE,false)){
    @Override protected Query getWildcardQuery(    String field,    String termStr) throws ParseException {
      type[0]=1;
      return new TermQuery(new Term(field,termStr));
    }
    @Override protected Query getPrefixQuery(    String field,    String termStr) throws ParseException {
      type[0]=2;
      return new TermQuery(new Term(field,termStr));
    }
    @Override protected Query getFieldQuery(    String field,    String queryText) throws ParseException {
      type[0]=3;
      return super.getFieldQuery(field,queryText);
    }
  }
;
  TermQuery tq;
  tq=(TermQuery)qp.parse("foo:zoo*");
  assertEquals("zoo",tq.getTerm().text());
  assertEquals(2,type[0]);
  tq=(TermQuery)qp.parse("foo:zoo*^2");
  assertEquals("zoo",tq.getTerm().text());
  assertEquals(2,type[0]);
  assertEquals(tq.getBoost(),2,0);
  tq=(TermQuery)qp.parse("foo:*");
  assertEquals("*",tq.getTerm().text());
  assertEquals(1,type[0]);
  tq=(TermQuery)qp.parse("foo:*^2");
  assertEquals("*",tq.getTerm().text());
  assertEquals(1,type[0]);
  assertEquals(tq.getBoost(),2,0);
  tq=(TermQuery)qp.parse("*:foo");
  assertEquals("*",tq.getTerm().field());
  assertEquals("foo",tq.getTerm().text());
  assertEquals(3,type[0]);
  tq=(TermQuery)qp.parse("*:*");
  assertEquals("*",tq.getTerm().field());
  assertEquals("*",tq.getTerm().text());
  assertEquals(1,type[0]);
  tq=(TermQuery)qp.parse("(*:*)");
  assertEquals("*",tq.getTerm().field());
  assertEquals("*",tq.getTerm().text());
  assertEquals(1,type[0]);
}
