{
  return new FieldComparator<Integer>(){
    FieldCache.DocTermsIndex idIndex;
    private final int[] values=new int[numHits];
    private final BytesRef tempBR=new BytesRef();
    int bottomVal;
    @Override public int compare(    int slot1,    int slot2){
      return values[slot2] - values[slot1];
    }
    @Override public void setBottom(    int slot){
      bottomVal=values[slot];
    }
    private int docVal(    int doc) throws IOException {
      int ord=idIndex.getOrd(doc);
      if (ord == 0) {
        return 0;
      }
 else {
        BytesRef id=idIndex.lookup(ord,tempBR);
        Integer prio=priority.get(id);
        return prio == null ? 0 : prio.intValue();
      }
    }
    @Override public int compareBottom(    int doc) throws IOException {
      return docVal(doc) - bottomVal;
    }
    @Override public void copy(    int slot,    int doc) throws IOException {
      values[slot]=docVal(doc);
    }
    @Override public FieldComparator setNextReader(    AtomicReaderContext context) throws IOException {
      idIndex=FieldCache.DEFAULT.getTermsIndex(context.reader,fieldname);
      return this;
    }
    @Override public Integer value(    int slot){
      return Integer.valueOf(values[slot]);
    }
  }
;
}
