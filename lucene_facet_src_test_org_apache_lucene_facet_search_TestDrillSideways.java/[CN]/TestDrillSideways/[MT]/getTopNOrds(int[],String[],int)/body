{
  final int[] ids=new int[counts.length];
  for (int i=0; i < ids.length; i++) {
    ids[i]=i;
  }
  new SorterTemplate(){
    private int pivot;
    @Override protected void swap(    int i,    int j){
      int id=ids[i];
      ids[i]=ids[j];
      ids[j]=id;
    }
    @Override protected int compare(    int i,    int j){
      int counti=counts[ids[i]];
      int countj=counts[ids[j]];
      if (counti > countj) {
        return -1;
      }
 else       if (counti < countj) {
        return 1;
      }
 else {
        return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));
      }
    }
    @Override protected void setPivot(    int i){
      pivot=ids[i];
    }
    @Override protected int comparePivot(    int j){
      int counti=counts[pivot];
      int countj=counts[ids[j]];
      if (counti > countj) {
        return -1;
      }
 else       if (counti < countj) {
        return 1;
      }
 else {
        return new BytesRef(values[pivot]).compareTo(new BytesRef(values[ids[j]]));
      }
    }
  }
.mergeSort(0,ids.length - 1);
  if (topN > ids.length) {
    topN=ids.length;
  }
  int numSet=topN;
  for (int i=0; i < topN; i++) {
    if (counts[ids[i]] == 0) {
      numSet=i;
      break;
    }
  }
  int[] topNIDs=new int[numSet];
  System.arraycopy(ids,0,topNIDs,0,topNIDs.length);
  return topNIDs;
}
