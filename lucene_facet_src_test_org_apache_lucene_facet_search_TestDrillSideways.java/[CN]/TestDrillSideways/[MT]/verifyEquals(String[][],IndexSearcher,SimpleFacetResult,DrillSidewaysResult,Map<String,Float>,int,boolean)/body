{
  if (VERBOSE) {
    System.out.println("  verify totHits=" + expected.hits.size());
  }
  assertEquals(expected.hits.size(),actual.hits.totalHits);
  assertEquals(expected.hits.size(),actual.hits.scoreDocs.length);
  for (int i=0; i < expected.hits.size(); i++) {
    if (VERBOSE) {
      System.out.println("    hit " + i + " expected="+ expected.hits.get(i).id);
    }
    assertEquals(expected.hits.get(i).id,s.doc(actual.hits.scoreDocs[i].doc).get("id"));
    assertEquals(scores.get(expected.hits.get(i).id),actual.hits.scoreDocs[i].score,0.0f);
  }
  assertEquals(expected.counts.length,actual.facetResults.size());
  for (int dim=0; dim < expected.counts.length; dim++) {
    FacetResult fr=actual.facetResults.get(dim);
    List<FacetResultNode> subResults=fr.getFacetResultNode().subResults;
    if (VERBOSE) {
      System.out.println("    dim" + dim);
      System.out.println("      actual");
    }
    Map<String,Integer> actualValues=new HashMap<String,Integer>();
    int idx=0;
    for (    FacetResultNode childNode : subResults) {
      actualValues.put(childNode.label.components[1],(int)childNode.value);
      if (VERBOSE) {
        System.out.println("        " + idx + ": "+ new BytesRef(childNode.label.components[1])+ ": "+ (int)childNode.value);
        idx++;
      }
    }
    if (topN != -1) {
      int[] topNIDs=getTopNOrds(expected.counts[dim],dimValues[dim],topN);
      if (VERBOSE) {
        idx=0;
        System.out.println("      expected (sorted)");
        for (int i=0; i < topNIDs.length; i++) {
          int expectedOrd=topNIDs[i];
          String value=dimValues[dim][expectedOrd];
          System.out.println("        " + idx + ": "+ new BytesRef(value)+ ": "+ expected.counts[dim][expectedOrd]);
          idx++;
        }
      }
      if (VERBOSE) {
        System.out.println("      topN=" + topN + " expectedTopN="+ topNIDs.length);
      }
      assertEquals(topNIDs.length,subResults.size());
      for (int i=0; i < topNIDs.length; i++) {
        FacetResultNode node=subResults.get(i);
        int expectedOrd=topNIDs[i];
        assertEquals(expected.counts[dim][expectedOrd],(int)node.value);
        assertEquals(2,node.label.length);
        if (isSortedSetDV) {
          assertEquals("value @ idx=" + i,dimValues[dim][expectedOrd],node.label.components[1]);
        }
      }
    }
 else {
      if (VERBOSE) {
        idx=0;
        System.out.println("      expected (unsorted)");
        for (int i=0; i < dimValues[dim].length; i++) {
          String value=dimValues[dim][i];
          if (expected.counts[dim][i] != 0) {
            System.out.println("        " + idx + ": "+ new BytesRef(value)+ ": "+ expected.counts[dim][i]);
            idx++;
          }
        }
      }
      int setCount=0;
      for (int i=0; i < dimValues[dim].length; i++) {
        String value=dimValues[dim][i];
        if (expected.counts[dim][i] != 0) {
          assertTrue(actualValues.containsKey(value));
          assertEquals(expected.counts[dim][i],actualValues.get(value).intValue());
          setCount++;
        }
 else {
          assertFalse(actualValues.containsKey(value));
        }
      }
      assertEquals(setCount,actualValues.size());
    }
  }
}
