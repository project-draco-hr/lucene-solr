{
  if (VERBOSE) {
    System.out.println("  verify totHits=" + expected.hits.size());
  }
  assertEquals(expected.hits.size(),actual.hits.totalHits);
  assertEquals(expected.hits.size(),actual.hits.scoreDocs.length);
  for (int i=0; i < expected.hits.size(); i++) {
    if (VERBOSE) {
      System.out.println("    hit " + i + " expected="+ expected.hits.get(i).id);
    }
    assertEquals(expected.hits.get(i).id,s.doc(actual.hits.scoreDocs[i].doc).get("id"));
    assertEquals(scores.get(expected.hits.get(i).id),actual.hits.scoreDocs[i].score,0.0f);
  }
  assertEquals(expected.counts.length,actual.facetResults.size());
  for (int dim=0; dim < expected.counts.length; dim++) {
    if (VERBOSE) {
      System.out.println("    dim" + dim);
      System.out.println("      actual");
    }
    FacetResult fr=actual.facetResults.get(dim);
    Map<String,Integer> actualValues=new HashMap<String,Integer>();
    for (    FacetResultNode childNode : fr.getFacetResultNode().subResults) {
      actualValues.put(childNode.label.components[1],(int)childNode.value);
      if (VERBOSE) {
        System.out.println("        " + childNode.label.components[1] + ": "+ (int)childNode.value);
      }
    }
    if (VERBOSE) {
      System.out.println("      expected");
    }
    int setCount=0;
    for (int i=0; i < dimValues[dim].length; i++) {
      String value=dimValues[dim][i];
      if (expected.counts[dim][i] != 0) {
        if (VERBOSE) {
          System.out.println("        " + value + ": "+ expected.counts[dim][i]);
        }
        assertTrue(actualValues.containsKey(value));
        assertEquals(expected.counts[dim][i],actualValues.get(value).intValue());
        setCount++;
      }
 else {
        assertFalse(actualValues.containsKey(value));
      }
    }
    assertEquals(setCount,actualValues.size());
  }
}
