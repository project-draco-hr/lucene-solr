{
  Directory dir=newDirectory();
  Writer w=Floats.getWriter(dir,"test",precision);
  final int NUM_VALUES=1000;
  final double[] values=new double[NUM_VALUES];
  for (int i=0; i < NUM_VALUES; i++) {
    final double v=precision == 4 ? random.nextFloat() : random.nextDouble();
    values[i]=v;
    w.add(i,v);
  }
  final int additionalValues=1 + random.nextInt(10);
  w.finish(NUM_VALUES + additionalValues);
  Reader r=Floats.getReader(dir,"test",NUM_VALUES + additionalValues);
  for (int iter=0; iter < 2; iter++) {
    Source s=r.load();
    for (int i=0; i < NUM_VALUES; i++) {
      assertEquals(values[i],s.floats(i),0.0f);
    }
  }
  for (int iter=0; iter < 2; iter++) {
    ValuesEnum fEnum=r.getEnum();
    ValuesAttribute attr=fEnum.addAttribute(ValuesAttribute.class);
    FloatsRef floats=attr.floats();
    for (int i=0; i < NUM_VALUES; i++) {
      assertEquals(i,fEnum.nextDoc());
      assertEquals(values[i],floats.get(),delta);
    }
    for (int i=NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {
      assertEquals(i,fEnum.nextDoc());
      assertEquals(0.0,floats.get(),delta);
    }
    fEnum.close();
  }
  for (int iter=0; iter < 2; iter++) {
    ValuesEnum fEnum=r.getEnum();
    ValuesAttribute attr=fEnum.addAttribute(ValuesAttribute.class);
    FloatsRef floats=attr.floats();
    for (int i=0; i < NUM_VALUES; i+=1 + random.nextInt(25)) {
      assertEquals(i,fEnum.advance(i));
      assertEquals(values[i],floats.get(),delta);
    }
    for (int i=NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {
      assertEquals(i,fEnum.advance(i));
      assertEquals(0.0,floats.get(),delta);
    }
    fEnum.close();
  }
  r.close();
  dir.close();
}
