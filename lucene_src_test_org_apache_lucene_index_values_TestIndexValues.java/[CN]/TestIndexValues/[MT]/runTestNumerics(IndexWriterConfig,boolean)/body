{
  Directory d=newDirectory();
  IndexWriter w=new IndexWriter(d,cfg);
  final int numValues=350;
  final List<Values> numVariantList=new ArrayList<Values>(NUMERICS);
  Collections.shuffle(numVariantList,random);
  for (  Values val : numVariantList) {
    OpenBitSet deleted=indexValues(w,numValues,val,numVariantList,withDeletions,7);
    List<Closeable> closeables=new ArrayList<Closeable>();
    IndexReader r=IndexReader.open(w);
    final int numRemainingValues=(int)(numValues - deleted.cardinality());
    final int base=r.numDocs() - numRemainingValues;
switch (val) {
case PACKED_INTS:
case PACKED_INTS_FIXED:
{
        if (val == Values.PACKED_INTS_FIXED)         getDocValues(r,val.name());
        DocValues intsReader=getDocValues(r,val.name());
        Source ints=getSource(intsReader);
        ValuesEnum intsEnum=intsReader.getEnum();
        assertNotNull(intsEnum);
        LongsRef enumRef=intsEnum.addAttribute(ValuesAttribute.class).ints();
        for (int i=0; i < base; i++) {
          assertEquals("index " + i,0,ints.getInt(i));
          assertEquals(val.name() + " base: " + base+ " index: "+ i,i,random.nextBoolean() ? intsEnum.advance(i) : intsEnum.nextDoc());
          assertEquals(0,enumRef.get());
        }
        int expected=0;
        for (int i=base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals("advance failed at index: " + i + " of "+ r.numDocs()+ " docs",i,intsEnum.advance(i));
          assertEquals(expected,enumRef.get());
          assertEquals(expected,ints.getInt(i));
        }
      }
    break;
case SIMPLE_FLOAT_4BYTE:
case SIMPLE_FLOAT_8BYTE:
{
    DocValues floatReader=getDocValues(r,val.name());
    assertNotNull(floatReader);
    Source floats=getSource(floatReader);
    ValuesEnum floatEnum=floatReader.getEnum();
    assertNotNull(floatEnum);
    FloatsRef enumRef=floatEnum.addAttribute(ValuesAttribute.class).floats();
    for (int i=0; i < base; i++) {
      assertEquals(" floats failed for doc: " + i + " base: "+ base,0.0d,floats.getFloat(i),0.0d);
      assertEquals(i,random.nextBoolean() ? floatEnum.advance(i) : floatEnum.nextDoc());
      assertEquals("index " + i,0.0,enumRef.get(),0.0);
    }
    int expected=0;
    for (int i=base; i < r.numDocs(); i++, expected++) {
      while (deleted.get(expected)) {
        expected++;
      }
      assertEquals("advance failed at index: " + i + " of "+ r.numDocs()+ " docs base:"+ base,i,floatEnum.advance(i));
      assertEquals("index " + i,2.0 * expected,enumRef.get(),0.00001);
      assertEquals("index " + i,2.0 * expected,floats.getFloat(i),0.00001);
    }
  }
break;
default :
fail("unexpected value " + val);
}
closeables.add(r);
for (Closeable toClose : closeables) {
toClose.close();
}
}
w.close();
d.close();
}
