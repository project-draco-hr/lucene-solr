{
  if (simplify) {
    if (BasicOperations.isEmpty(automaton)) {
      type=AUTOMATON_TYPE.NONE;
      term=null;
      commonSuffixRef=null;
      runAutomaton=null;
      lightAutomaton=null;
      this.finite=null;
      return;
    }
 else     if (BasicOperations.isTotal(automaton)) {
      type=AUTOMATON_TYPE.ALL;
      term=null;
      commonSuffixRef=null;
      runAutomaton=null;
      lightAutomaton=null;
      this.finite=null;
      return;
    }
 else {
      final String commonPrefix;
      final String singleton;
      if (automaton.getSingleton() == null) {
        commonPrefix=SpecialOperations.getCommonPrefix(automaton);
        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton,BasicAutomata.makeString(commonPrefix))) {
          singleton=commonPrefix;
        }
 else {
          singleton=null;
        }
      }
 else {
        commonPrefix=null;
        singleton=automaton.getSingleton();
      }
      if (singleton != null) {
        type=AUTOMATON_TYPE.SINGLE;
        term=new BytesRef(singleton);
        commonSuffixRef=null;
        runAutomaton=null;
        lightAutomaton=null;
        this.finite=null;
        return;
      }
 else       if (BasicOperations.sameLanguage(automaton,BasicOperations.concatenate(BasicAutomata.makeString(commonPrefix),BasicAutomata.makeAnyString()))) {
        type=AUTOMATON_TYPE.PREFIX;
        term=new BytesRef(commonPrefix);
        commonSuffixRef=null;
        runAutomaton=null;
        lightAutomaton=null;
        this.finite=null;
        return;
      }
    }
  }
  type=AUTOMATON_TYPE.NORMAL;
  term=null;
  LightAutomaton la=automaton.toLightAutomaton();
  if (finite == null) {
    this.finite=SpecialOperations.isFinite(la);
  }
 else {
    this.finite=finite;
  }
  LightAutomaton utf8=new UTF32ToUTF8Light().convert(la);
  if (this.finite) {
    commonSuffixRef=null;
  }
 else {
    commonSuffixRef=null;
  }
  runAutomaton=new ByteRunAutomaton(utf8,true);
  lightAutomaton=runAutomaton.a;
}
