{
  super.cancelElection();
synchronized (lock) {
    if (leaderZkNodeParentVersion != null) {
      try {
        log.info("Removing leader registration node on cancel: {} {}",leaderPath,leaderZkNodeParentVersion);
        List<Op> ops=new ArrayList<>(2);
        ops.add(Op.check(new Path(leaderPath).getParent().toString(),leaderZkNodeParentVersion));
        ops.add(Op.delete(leaderPath,-1));
        zkClient.multi(ops,true);
      }
 catch (      KeeperException.NoNodeException nne) {
        log.info("No leader registration node found to remove: {}",leaderPath);
      }
catch (      KeeperException.BadVersionException bve) {
        log.info("Cannot remove leader registration node because the current registered node is not ours: {}",leaderPath);
      }
catch (      InterruptedException e) {
        throw e;
      }
catch (      Exception e) {
        SolrException.log(log,e);
      }
      leaderZkNodeParentVersion=null;
    }
 else {
      log.info("No version found for ephemeral leader parent node, won't remove previous leader registration.");
    }
  }
}
