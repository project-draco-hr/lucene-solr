{
  log.info("Checking if I should try and be the leader.");
  if (isClosed) {
    log.info("Bailing on leader process because we have been closed");
    return false;
  }
  ClusterState clusterState=zkController.getZkStateReader().getClusterState();
  Map<String,Slice> slices=clusterState.getSlices(this.collection);
  Slice slice=slices.get(shardId);
  Map<String,ZkNodeProps> shards=slice.getShards();
  boolean foundSomeoneElseActive=false;
  for (  Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {
    String state=shard.getValue().get(ZkStateReader.STATE_PROP);
    if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(new ZkCoreNodeProps(leaderProps).getCoreUrl())) {
      if (state.equals(ZkStateReader.ACTIVE) && clusterState.liveNodesContain(shard.getValue().get(ZkStateReader.NODE_NAME_PROP))) {
        log.info("I am Active and live, it's okay to be the leader.");
        return true;
      }
    }
    if ((state.equals(ZkStateReader.ACTIVE)) && clusterState.liveNodesContain(shard.getValue().get(ZkStateReader.NODE_NAME_PROP)) && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(new ZkCoreNodeProps(leaderProps).getCoreUrl())) {
      foundSomeoneElseActive=true;
    }
  }
  if (!foundSomeoneElseActive) {
    log.info("I am not Active but no one else is either, it's okay to be the leader");
    try {
      zkController.publish(core.getCoreDescriptor(),ZkStateReader.ACTIVE);
    }
 catch (    KeeperException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new RuntimeException(e);
    }
  }
 else {
    log.info("I am not Active and someone else appears to be a better leader candidate.");
  }
  return !foundSomeoneElseActive;
}
