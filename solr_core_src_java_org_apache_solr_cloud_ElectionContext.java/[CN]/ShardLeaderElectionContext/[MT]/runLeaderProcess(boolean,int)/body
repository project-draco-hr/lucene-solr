{
  String coreName=leaderProps.getStr(ZkStateReader.CORE_NAME_PROP);
  ActionThrottle lt;
  try (SolrCore core=cc.getCore(coreName)){
    if (core == null) {
      if (cc.isShutDown()) {
        return;
      }
 else {
        throw new SolrException(ErrorCode.SERVER_ERROR,"SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
      }
    }
    MDCLoggingContext.setCore(core);
    lt=core.getUpdateHandler().getSolrCoreState().getLeaderThrottle();
  }
   try {
    lt.minimumWaitBetweenActions();
    lt.markAttemptingAction();
    int leaderVoteWait=cc.getZkController().getLeaderVoteWait();
    log.debug("Running the leader process for shard={} and weAreReplacement={} and leaderVoteWait={}",shardId,weAreReplacement,leaderVoteWait);
    ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,OverseerAction.LEADER.toLower(),ZkStateReader.SHARD_ID_PROP,shardId,ZkStateReader.COLLECTION_PROP,collection);
    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));
    boolean allReplicasInLine=false;
    if (!weAreReplacement) {
      allReplicasInLine=waitForReplicasToComeUp(leaderVoteWait);
    }
 else {
      allReplicasInLine=areAllReplicasParticipating();
    }
    if (isClosed) {
      return;
    }
    try (SolrCore core=cc.getCore(coreName)){
      if (core == null) {
        if (!zkController.getCoreContainer().isShutDown()) {
          cancelElection();
          throw new SolrException(ErrorCode.SERVER_ERROR,"SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
        }
 else {
          return;
        }
      }
      if (weAreReplacement && !shouldIBeLeader(leaderProps,core,weAreReplacement)) {
        rejoinLeaderElection(core);
        return;
      }
      log.info("I may be the new leader - try and sync");
      core.getUpdateHandler().getSolrCoreState().cancelRecovery();
      if (weAreReplacement) {
        try {
          Thread.sleep(2500);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,e);
        }
      }
      PeerSync.PeerSyncResult result=null;
      boolean success=false;
      try {
        result=syncStrategy.sync(zkController,core,leaderProps,weAreReplacement);
        success=result.isSuccess();
      }
 catch (      Exception e) {
        SolrException.log(log,"Exception while trying to sync",e);
        result=PeerSync.PeerSyncResult.failure();
      }
      UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
      if (!success) {
        boolean hasRecentUpdates=false;
        if (ulog != null) {
          try (UpdateLog.RecentUpdates recentUpdates=ulog.getRecentUpdates()){
            hasRecentUpdates=!recentUpdates.getVersions(1).isEmpty();
          }
         }
        if (!hasRecentUpdates) {
          if (result.getOtherHasVersions().orElse(false)) {
            log.info("We failed sync, but we have no versions - we can't sync in that case. But others have some versions, so we should not become leader");
            success=false;
          }
 else {
            log.info("We failed sync, but we have no versions - we can't sync in that case - we were active before, so become leader anyway");
            success=true;
          }
        }
      }
      if (log.isDebugEnabled()) {
        try {
          RefCounted<SolrIndexSearcher> searchHolder=core.getNewestSearcher(false);
          SolrIndexSearcher searcher=searchHolder.get();
          try {
            log.debug(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + " synched " + searcher.search(new MatchAllDocsQuery(),1).totalHits);
          }
  finally {
            searchHolder.decref();
          }
        }
 catch (        Exception e) {
          log.error("Error in solrcloud_debug block",e);
        }
      }
      if (!success) {
        rejoinLeaderElection(core);
        return;
      }
    }
     boolean isLeader=true;
    if (!isClosed) {
      try {
        checkLIR(coreName,allReplicasInLine);
        super.runLeaderProcess(weAreReplacement,0);
        try (SolrCore core=cc.getCore(coreName)){
          core.getCoreDescriptor().getCloudDescriptor().setLeader(true);
          publishActiveIfRegisteredAndNotActive(core);
        }
         log.info("I am the new leader: " + ZkCoreNodeProps.getCoreUrl(leaderProps) + " "+ shardId);
        syncStrategy.requestRecoveries();
      }
 catch (      Exception e) {
        isLeader=false;
        SolrException.log(log,"There was a problem trying to register as the leader",e);
        try (SolrCore core=cc.getCore(coreName)){
          if (core == null) {
            log.debug("SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
            return;
          }
          core.getCoreDescriptor().getCloudDescriptor().setLeader(false);
          rejoinLeaderElection(core);
        }
       }
      if (isLeader) {
        try {
          startLeaderInitiatedRecoveryOnReplicas(coreName);
        }
 catch (        Exception exc) {
        }
      }
    }
 else {
      cancelElection();
    }
  }
  finally {
    MDCLoggingContext.clear();
  }
}
