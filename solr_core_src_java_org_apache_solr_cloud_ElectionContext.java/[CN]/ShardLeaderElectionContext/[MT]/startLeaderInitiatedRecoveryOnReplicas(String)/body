{
  try (SolrCore core=cc.getCore(coreName)){
    CloudDescriptor cloudDesc=core.getCoreDescriptor().getCloudDescriptor();
    String coll=cloudDesc.getCollectionName();
    String shardId=cloudDesc.getShardId();
    String coreNodeName=cloudDesc.getCoreNodeName();
    if (coll == null || shardId == null) {
      log.error("Cannot start leader-initiated recovery on new leader (core=" + coreName + ",coreNodeName="+ coreNodeName+ ") because collection and/or shard is null!");
      return;
    }
    String znodePath=zkController.getLeaderInitiatedRecoveryZnodePath(coll,shardId);
    List<String> replicas=null;
    try {
      replicas=zkClient.getChildren(znodePath,null,false);
    }
 catch (    NoNodeException nne) {
    }
    if (replicas != null && replicas.size() > 0) {
      for (      String replicaCoreNodeName : replicas) {
        if (coreNodeName.equals(replicaCoreNodeName))         continue;
        String lirState=zkController.getLeaderInitiatedRecoveryState(coll,shardId,replicaCoreNodeName);
        if (ZkStateReader.DOWN.equals(lirState) || ZkStateReader.RECOVERY_FAILED.equals(lirState)) {
          log.info("After core={} coreNodeName={} was elected leader, a replica coreNodeName={} was found in state: " + lirState + " and needing recovery.",coreName,coreNodeName,replicaCoreNodeName);
          List<ZkCoreNodeProps> replicaProps=zkController.getZkStateReader().getReplicaProps(collection,shardId,coreNodeName);
          if (replicaProps != null && replicaProps.size() > 0) {
            ZkCoreNodeProps coreNodeProps=null;
            for (            ZkCoreNodeProps p : replicaProps) {
              if (((Replica)p.getNodeProps()).getName().equals(replicaCoreNodeName)) {
                coreNodeProps=p;
                break;
              }
            }
            LeaderInitiatedRecoveryThread lirThread=new LeaderInitiatedRecoveryThread(zkController,cc,collection,shardId,coreNodeProps,120,coreNodeName);
            zkController.ensureReplicaInLeaderInitiatedRecovery(collection,shardId,coreNodeProps.getCoreUrl(),coreNodeProps,false);
            ExecutorService executor=cc.getUpdateShardHandler().getUpdateExecutor();
            executor.execute(lirThread);
          }
        }
      }
    }
  }
 }
