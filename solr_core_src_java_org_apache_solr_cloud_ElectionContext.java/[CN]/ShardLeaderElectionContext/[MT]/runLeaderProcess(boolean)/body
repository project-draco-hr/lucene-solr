{
  log.info("Running the leader process for shard " + shardId);
  String coreName=leaderProps.getStr(ZkStateReader.CORE_NAME_PROP);
  ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,ZkStateReader.LEADER_PROP,ZkStateReader.SHARD_ID_PROP,shardId,ZkStateReader.COLLECTION_PROP,collection);
  Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));
  int leaderVoteWait=cc.getZkController().getLeaderVoteWait();
  if (!weAreReplacement) {
    waitForReplicasToComeUp(weAreReplacement,leaderVoteWait);
  }
  SolrCore core=null;
  try {
    core=cc.getCore(coreName);
    if (core == null) {
      cancelElection();
      throw new SolrException(ErrorCode.SERVER_ERROR,"Fatal Error, SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
    }
    if (weAreReplacement && !shouldIBeLeader(leaderProps,core,weAreReplacement)) {
      rejoinLeaderElection(leaderSeqPath,core);
      return;
    }
    log.info("I may be the new leader - try and sync");
    core.getUpdateHandler().getSolrCoreState().cancelRecovery();
    if (weAreReplacement) {
      try {
        Thread.sleep(2500);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,e);
      }
    }
    boolean success=false;
    try {
      success=syncStrategy.sync(zkController,core,leaderProps);
    }
 catch (    Throwable t) {
      SolrException.log(log,"Exception while trying to sync",t);
      success=false;
    }
    UpdateLog ulog=core.getUpdateHandler().getUpdateLog();
    if (!success) {
      boolean hasRecentUpdates=false;
      if (ulog != null) {
        UpdateLog.RecentUpdates recentUpdates=ulog.getRecentUpdates();
        try {
          hasRecentUpdates=!recentUpdates.getVersions(1).isEmpty();
        }
  finally {
          recentUpdates.close();
        }
      }
      if (!hasRecentUpdates) {
        log.info("We failed sync, but we have no versions - we can't sync in that case - we were active before, so become leader anyway");
        success=true;
      }
    }
    if (log.isDebugEnabled()) {
      try {
        RefCounted<SolrIndexSearcher> searchHolder=core.getNewestSearcher(false);
        SolrIndexSearcher searcher=searchHolder.get();
        try {
          log.debug(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + " synched " + searcher.search(new MatchAllDocsQuery(),1).totalHits);
        }
  finally {
          searchHolder.decref();
        }
      }
 catch (      Exception e) {
        throw new SolrException(ErrorCode.SERVER_ERROR,null,e);
      }
    }
    if (!success) {
      rejoinLeaderElection(leaderSeqPath,core);
      return;
    }
    log.info("I am the new leader: " + ZkCoreNodeProps.getCoreUrl(leaderProps) + " "+ shardId);
    core.getCoreDescriptor().getCloudDescriptor().setLeader(true);
  }
  finally {
    if (core != null) {
      core.close();
    }
  }
  try {
    super.runLeaderProcess(weAreReplacement);
  }
 catch (  Throwable t) {
    SolrException.log(log,"There was a problem trying to register as the leader",t);
    cancelElection();
    try {
      core=cc.getCore(coreName);
      if (core == null) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"Fatal Error, SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
      }
      core.getCoreDescriptor().getCloudDescriptor().setLeader(false);
      rejoinLeaderElection(leaderSeqPath,core);
    }
  finally {
      if (core != null) {
        core.close();
      }
    }
  }
}
