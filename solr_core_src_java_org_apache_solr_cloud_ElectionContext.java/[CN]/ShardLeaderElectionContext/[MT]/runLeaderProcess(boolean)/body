{
  log.info("Running the leader process.");
  String coreName=leaderProps.getStr(ZkStateReader.CORE_NAME_PROP);
  ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,"leader",ZkStateReader.SHARD_ID_PROP,shardId,ZkStateReader.COLLECTION_PROP,collection);
  Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));
  String leaderVoteWait=cc.getZkController().getLeaderVoteWait();
  if (!weAreReplacement && leaderVoteWait != null) {
    waitForReplicasToComeUp(weAreReplacement,leaderVoteWait);
  }
  SolrCore core=null;
  try {
    core=cc.getCore(coreName);
    if (core == null) {
      cancelElection();
      throw new SolrException(ErrorCode.SERVER_ERROR,"Fatal Error, SolrCore not found:" + coreName + " in "+ cc.getCoreNames());
    }
    if (weAreReplacement && !shouldIBeLeader(leaderProps,core)) {
      rejoinLeaderElection(leaderSeqPath,core);
      return;
    }
    log.info("I may be the new leader - try and sync");
    core.getUpdateHandler().getSolrCoreState().cancelRecovery();
    boolean success=false;
    try {
      success=syncStrategy.sync(zkController,core,leaderProps);
    }
 catch (    Throwable t) {
      SolrException.log(log,"Exception while trying to sync",t);
      success=false;
    }
    if (!success && !areAnyOtherReplicasActive(zkController,leaderProps,collection,shardId)) {
      log.info("Sync was not a success but no one else is active! I am the leader");
      success=true;
    }
    if (!success) {
      rejoinLeaderElection(leaderSeqPath,core);
      return;
    }
    log.info("I am the new leader: " + ZkCoreNodeProps.getCoreUrl(leaderProps));
    core.getCoreDescriptor().getCloudDescriptor().isLeader=true;
  }
  finally {
    if (core != null) {
      core.close();
    }
  }
  try {
    super.runLeaderProcess(weAreReplacement);
  }
 catch (  Throwable t) {
    try {
      core=cc.getCore(coreName);
      core.getCoreDescriptor().getCloudDescriptor().isLeader=false;
      rejoinLeaderElection(coreName,core);
    }
  finally {
      if (core != null) {
        core.close();
      }
    }
  }
}
