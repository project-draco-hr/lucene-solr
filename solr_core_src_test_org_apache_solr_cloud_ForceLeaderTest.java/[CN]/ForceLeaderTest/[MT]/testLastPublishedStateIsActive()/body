{
  handle.put("maxScore",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  String testCollectionName="forceleader_last_published";
  createCollection(testCollectionName,1,3,1);
  cloudClient.setDefaultCollection(testCollectionName);
  log.info("Collection created: " + testCollectionName);
  try {
    List<Replica> notLeaders=ensureAllReplicasAreActive(testCollectionName,SHARD1,1,3,maxWaitSecsToSeeAllActive);
    assertEquals("Expected 2 replicas for collection " + testCollectionName + " but found "+ notLeaders.size()+ "; clusterState: "+ printClusterStateInfo(testCollectionName),2,notLeaders.size());
    Replica leader=cloudClient.getZkStateReader().getLeaderRetry(testCollectionName,SHARD1);
    JettySolrRunner notLeader0=getJettyOnPort(getReplicaPort(notLeaders.get(0)));
    ZkController zkController=notLeader0.getCoreContainer().getZkController();
    setReplicaState(testCollectionName,SHARD1,leader,State.DOWN);
    for (    Replica rep : notLeaders) {
      setReplicaState(testCollectionName,SHARD1,rep,State.DOWN);
    }
    zkController.getZkStateReader().forceUpdateCollection(testCollectionName);
    assertEquals(0,getActiveOrRecoveringReplicas(testCollectionName,SHARD1).size());
    doForceLeader(cloudClient,testCollectionName,SHARD1);
    for (    Replica rep : notLeaders) {
      assertEquals(Replica.State.ACTIVE,getLastPublishedState(testCollectionName,SHARD1,rep));
    }
  }
  finally {
    log.info("Cleaning up after the test.");
    try {
      CollectionAdminRequest.Delete req=new CollectionAdminRequest.Delete();
      req.setCollectionName(testCollectionName);
      req.process(cloudClient);
    }
 catch (    Exception e) {
      log.warn("Could not delete collection {} after test completed",testCollectionName);
    }
  }
}
