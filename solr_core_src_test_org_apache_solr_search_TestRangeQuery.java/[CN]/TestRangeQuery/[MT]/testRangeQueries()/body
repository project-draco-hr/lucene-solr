{
  int i=2000000000;
  long l=500000000000000000L;
  double d=0.3333333333333333;
  String[] ints={"" + (i - 1),"" + (i),"" + (i + 1),"" + (i - 2),"" + (i + 2)};
  String[] longs={"" + (l - 1),"" + (l),"" + (l + 1),"" + (l - 2),"" + (l + 2)};
  String[] doubles={"" + (d - 1e-16),"" + (d),"" + (d + 1e-16),"" + (d - 2e-16),"" + (d + 2e-16)};
  String[] strings={"aaa","bbb","ccc","aa","cccc"};
  String[] dates={"0299-12-31T23:59:59.999Z","2000-01-01T00:00:00.000Z","2000-01-01T00:00:00.001Z","0299-12-31T23:59:59.998Z","2000-01-01T00:00:00.002Z"};
  Map<String,String[]> norm_fields=new HashMap<>();
  norm_fields.put("foo_i",ints);
  norm_fields.put("foo_l",longs);
  norm_fields.put("foo_d",doubles);
  norm_fields.put("foo_ti",ints);
  norm_fields.put("foo_tl",longs);
  norm_fields.put("foo_td",doubles);
  norm_fields.put("foo_tdt",dates);
  norm_fields.put("foo_s",strings);
  norm_fields.put("foo_dt",dates);
  Map<String,String[]> frange_fields=new HashMap<>();
  frange_fields.put("foo_i",ints);
  frange_fields.put("foo_l",longs);
  frange_fields.put("foo_d",doubles);
  frange_fields.put("foo_ti",ints);
  frange_fields.put("foo_tl",longs);
  frange_fields.put("foo_td",doubles);
  frange_fields.put("foo_tdt",dates);
  frange_fields.put("foo_pi",ints);
  frange_fields.put("foo_pl",longs);
  frange_fields.put("foo_pd",doubles);
  frange_fields.put("foo_s",strings);
  frange_fields.put("foo_dt",dates);
  Map<String,String[]> all_fields=new HashMap<>();
  all_fields.putAll(norm_fields);
  all_fields.putAll(frange_fields);
  for (int j=0; j < ints.length - 2; j++) {
    List<String> fields=new ArrayList<>();
    fields.add("id");
    fields.add("" + j);
    for (    Map.Entry<String,String[]> entry : all_fields.entrySet()) {
      fields.add(entry.getKey());
      fields.add(entry.getValue()[j]);
    }
    assertU(adoc(fields.toArray(new String[fields.size()])));
  }
  assertU(commit());
  assertQ(req("{!frange l=0 u=2}id"),"*[count(//doc)=3]");
  assertQ(req("{!frange l=0 u=2}product(id,2)"),"*[count(//doc)=2]");
  assertQ(req("{!frange l=100 u=102}sum(id,100)"),"*[count(//doc)=3]");
  for (  Map.Entry<String,String[]> entry : norm_fields.entrySet()) {
    String f=entry.getKey();
    String[] v=entry.getValue();
    assertQ(req(f + ":[* TO *]"),"*[count(//doc)=3]");
    assertQ(req(f + ":[" + v[0]+ " TO "+ v[2]+ "]"),"*[count(//doc)=3]");
    assertQ(req(f + ":[" + v[1]+ " TO "+ v[2]+ "]"),"*[count(//doc)=2]");
    assertQ(req(f + ":[" + v[0]+ " TO "+ v[1]+ "]"),"*[count(//doc)=2]");
    assertQ(req(f + ":[" + v[0]+ " TO "+ v[0]+ "]"),"*[count(//doc)=1]");
    assertQ(req(f + ":[" + v[1]+ " TO "+ v[1]+ "]"),"*[count(//doc)=1]");
    assertQ(req(f + ":[" + v[2]+ " TO "+ v[2]+ "]"),"*[count(//doc)=1]");
    assertQ(req(f + ":[" + v[3]+ " TO "+ v[3]+ "]"),"*[count(//doc)=0]");
    assertQ(req(f + ":[" + v[4]+ " TO "+ v[4]+ "]"),"*[count(//doc)=0]");
    assertQ(req(f + ":{" + v[0]+ " TO "+ v[2]+ "}"),"*[count(//doc)=1]");
    assertQ(req(f + ":{" + v[1]+ " TO "+ v[2]+ "}"),"*[count(//doc)=0]");
    assertQ(req(f + ":{" + v[0]+ " TO "+ v[1]+ "}"),"*[count(//doc)=0]");
    assertQ(req(f + ":{" + v[3]+ " TO "+ v[4]+ "}"),"*[count(//doc)=3]");
  }
  for (  Map.Entry<String,String[]> entry : frange_fields.entrySet()) {
    String f=entry.getKey();
    String[] v=entry.getValue();
    assertQ(req("{!frange}" + f),"*[count(//doc)=3]");
    assertQ(req("{!frange" + " l=" + v[0] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange" + " l=" + v[1] + "}"+ f),"*[count(//doc)=2]");
    assertQ(req("{!frange" + " l=" + v[2] + "}"+ f),"*[count(//doc)=1]");
    assertQ(req("{!frange" + " l=" + v[3] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange" + " l=" + v[4] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange" + " u=" + v[0] + "}"+ f),"*[count(//doc)=1]");
    assertQ(req("{!frange" + " u=" + v[1] + "}"+ f),"*[count(//doc)=2]");
    assertQ(req("{!frange" + " u=" + v[2] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange" + " u=" + v[3] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange" + " u=" + v[4] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange incl=false" + " l=" + v[0] + "}"+ f),"*[count(//doc)=2]");
    assertQ(req("{!frange incl=false" + " l=" + v[1] + "}"+ f),"*[count(//doc)=1]");
    assertQ(req("{!frange incl=false" + " l=" + v[2] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange incl=false" + " l=" + v[3] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange incl=false" + " l=" + v[4] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange incu=false" + " u=" + v[0] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange incu=false" + " u=" + v[1] + "}"+ f),"*[count(//doc)=1]");
    assertQ(req("{!frange incu=false" + " u=" + v[2] + "}"+ f),"*[count(//doc)=2]");
    assertQ(req("{!frange incu=false" + " u=" + v[3] + "}"+ f),"*[count(//doc)=0]");
    assertQ(req("{!frange incu=false" + " u=" + v[4] + "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange incl=true incu=true" + " l=" + v[0] + " u="+ v[2]+ "}"+ f),"*[count(//doc)=3]");
    assertQ(req("{!frange incl=false incu=false" + " l=" + v[0] + " u="+ v[2]+ "}"+ f),"*[count(//doc)=1]");
    assertQ(req("{!frange incl=false incu=false" + " l=" + v[3] + " u="+ v[4]+ "}"+ f),"*[count(//doc)=3]");
  }
}
