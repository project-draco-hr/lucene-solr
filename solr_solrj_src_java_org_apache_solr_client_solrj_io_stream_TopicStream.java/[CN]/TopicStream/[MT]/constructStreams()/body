{
  try {
    ZkStateReader zkStateReader=cloudSolrClient.getZkStateReader();
    ClusterState clusterState=zkStateReader.getClusterState();
    Set<String> liveNodes=clusterState.getLiveNodes();
    Collection<Slice> slices=clusterState.getActiveSlices(this.collection);
    if (slices == null) {
      Map<String,DocCollection> collectionsMap=clusterState.getCollectionsMap();
      for (      Map.Entry<String,DocCollection> entry : collectionsMap.entrySet()) {
        if (entry.getKey().equalsIgnoreCase(collection)) {
          slices=entry.getValue().getActiveSlices();
          break;
        }
      }
      if (slices == null) {
        throw new Exception("Collection not found:" + this.collection);
      }
    }
    ModifiableSolrParams mParams=new ModifiableSolrParams(params);
    mParams.set("distrib","false");
    String fl=mParams.get("fl");
    mParams.set("sort","_version_ asc");
    if (!fl.contains("_version_")) {
      fl+=",_version_";
    }
    mParams.set("fl",fl);
    Random random=new Random();
    for (    Slice slice : slices) {
      ModifiableSolrParams localParams=new ModifiableSolrParams(mParams);
      long checkpoint=checkpoints.get(slice.getName());
      Collection<Replica> replicas=slice.getReplicas();
      List<Replica> shuffler=new ArrayList();
      for (      Replica replica : replicas) {
        if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))         shuffler.add(replica);
      }
      Replica rep=shuffler.get(random.nextInt(shuffler.size()));
      ZkCoreNodeProps zkProps=new ZkCoreNodeProps(rep);
      String url=zkProps.getCoreUrl();
      SolrStream solrStream=new SolrStream(url,localParams);
      solrStream.setSlice(slice.getName());
      solrStream.setCheckpoint(checkpoint);
      solrStream.setTrace(true);
      if (streamContext != null) {
        solrStream.setStreamContext(streamContext);
      }
      solrStreams.add(solrStream);
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
