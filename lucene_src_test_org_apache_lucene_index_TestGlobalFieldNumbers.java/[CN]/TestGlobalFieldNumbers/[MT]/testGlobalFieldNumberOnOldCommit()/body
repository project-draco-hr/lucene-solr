{
  int num=atLeast(3);
  for (int i=0; i < num; i++) {
    Directory dir=newDirectory();
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setIndexDeletionPolicy(new KeepAllDeletionPolicy()));
    Document d=new Document();
    d.add(new Field("f1","d1 first field",Store.YES,Index.ANALYZED,TermVector.NO));
    d.add(new Field("f2","d1 second field",Store.YES,Index.ANALYZED,TermVector.NO));
    writer.addDocument(d);
    writer.commit();
    assertFNXFiles(dir,"1.fnx");
    d=new Document();
    d.add(new Field("f1","d2 first field",Store.YES,Index.ANALYZED,TermVector.NO));
    d.add(new Field("f3",new byte[]{1,2,3}));
    writer.addDocument(d);
    assertFNXFiles(dir,"1.fnx");
    writer.close();
    assertFNXFiles(dir,"1.fnx","2.fnx");
    List<IndexCommit> listCommits=IndexReader.listCommits(dir);
    assertEquals(2,listCommits.size());
    writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setIndexDeletionPolicy(new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));
    d=new Document();
    d.add(new Field("f1","d2 first field",Store.YES,Index.ANALYZED,TermVector.NO));
    d.add(new Field("f3",new byte[]{1,2,3}));
    writer.addDocument(d);
    writer.commit();
    assertFNXFiles(dir,"1.fnx","2.fnx","3.fnx");
    writer.close();
    assertFNXFiles(dir,"1.fnx","2.fnx","3.fnx");
    writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)));
    writer.commit();
    listCommits=IndexReader.listCommits(dir);
    assertEquals(1,listCommits.size());
    assertFNXFiles(dir,"3.fnx");
    writer.close();
    assertFNXFiles(dir,"3.fnx");
    dir.close();
  }
}
