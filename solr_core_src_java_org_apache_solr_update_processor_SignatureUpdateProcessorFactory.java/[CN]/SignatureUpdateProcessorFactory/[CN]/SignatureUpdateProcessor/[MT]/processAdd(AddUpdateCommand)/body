{
  if (enabled) {
    SolrInputDocument doc=cmd.getSolrInputDocument();
    List<String> currDocSigFields=null;
    boolean isPartialUpdate=DistributedUpdateProcessor.isAtomicUpdate(cmd);
    if (sigFields == null || sigFields.size() == 0) {
      if (isPartialUpdate) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"Can't use SignatureUpdateProcessor with partial updates on signature fields");
      }
      Collection<String> docFields=doc.getFieldNames();
      currDocSigFields=new ArrayList<String>(docFields.size());
      currDocSigFields.addAll(docFields);
      Collections.sort(currDocSigFields);
    }
 else {
      currDocSigFields=sigFields;
    }
    Signature sig=req.getCore().getResourceLoader().newInstance(signatureClass,Signature.class);
    sig.init(params);
    for (    String field : currDocSigFields) {
      SolrInputField f=doc.getField(field);
      if (f != null) {
        if (isPartialUpdate) {
          throw new SolrException(ErrorCode.SERVER_ERROR,"Can't use SignatureUpdateProcessor with partial update request " + "containing signature field: " + field);
        }
        sig.add(field);
        Object o=f.getValue();
        if (o instanceof Collection) {
          for (          Object oo : (Collection)o) {
            sig.add(String.valueOf(oo));
          }
        }
 else {
          sig.add(String.valueOf(o));
        }
      }
    }
    byte[] signature=sig.getSignature();
    char[] arr=new char[signature.length << 1];
    for (int i=0; i < signature.length; i++) {
      int b=signature[i];
      int idx=i << 1;
      arr[idx]=StrUtils.HEX_DIGITS[(b >> 4) & 0xf];
      arr[idx + 1]=StrUtils.HEX_DIGITS[b & 0xf];
    }
    String sigString=new String(arr);
    doc.addField(signatureField,sigString);
    if (overwriteDupes) {
      cmd.updateTerm=new Term(signatureField,sigString);
    }
  }
  if (next != null)   next.processAdd(cmd);
}
