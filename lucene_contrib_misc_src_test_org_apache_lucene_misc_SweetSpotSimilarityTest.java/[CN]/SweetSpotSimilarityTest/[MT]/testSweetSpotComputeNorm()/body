{
  SweetSpotSimilarity ss=new SweetSpotSimilarity();
  ss.setLengthNormFactors(1,1,0.5f);
  Similarity d=new DefaultSimilarity();
  Similarity s=ss;
  final FieldInvertState invertState=new FieldInvertState();
  invertState.setBoost(1.0f);
  for (int i=1; i < 1000; i++) {
    invertState.setLength(i);
    assertEquals("base case: i=" + i,d.computeNorm("foo",invertState),s.computeNorm("foo",invertState),0.0f);
  }
  ss.setLengthNormFactors(3,10,0.5f);
  for (int i=3; i <= 10; i++) {
    invertState.setLength(i);
    assertEquals("3,10: spot i=" + i,1.0f,s.computeNorm("foo",invertState),0.0f);
  }
  for (int i=10; i < 1000; i++) {
    invertState.setLength(i - 9);
    final float normD=d.computeNorm("foo",invertState);
    invertState.setLength(i);
    final float normS=s.computeNorm("foo",invertState);
    assertEquals("3,10: 10<x : i=" + i,normD,normS,0.0f);
  }
  ss.setLengthNormFactors("bar",8,13,0.5f,false);
  ss.setLengthNormFactors("yak",6,9,0.5f,false);
  for (int i=3; i <= 10; i++) {
    invertState.setLength(i);
    assertEquals("f: 3,10: spot i=" + i,1.0f,s.computeNorm("foo",invertState),0.0f);
  }
  for (int i=10; i < 1000; i++) {
    invertState.setLength(i - 9);
    final float normD=d.computeNorm("foo",invertState);
    invertState.setLength(i);
    final float normS=s.computeNorm("foo",invertState);
    assertEquals("f: 3,10: 10<x : i=" + i,normD,normS,0.0f);
  }
  for (int i=8; i <= 13; i++) {
    invertState.setLength(i);
    assertEquals("f: 8,13: spot i=" + i,1.0f,s.computeNorm("bar",invertState),0.0f);
  }
  for (int i=6; i <= 9; i++) {
    invertState.setLength(i);
    assertEquals("f: 6,9: spot i=" + i,1.0f,s.computeNorm("yak",invertState),0.0f);
  }
  for (int i=13; i < 1000; i++) {
    invertState.setLength(i - 12);
    final float normD=d.computeNorm("foo",invertState);
    invertState.setLength(i);
    final float normS=s.computeNorm("bar",invertState);
    assertEquals("f: 8,13: 13<x : i=" + i,normD,normS,0.0f);
  }
  for (int i=9; i < 1000; i++) {
    invertState.setLength(i - 8);
    final float normD=d.computeNorm("foo",invertState);
    invertState.setLength(i);
    final float normS=s.computeNorm("yak",invertState);
    assertEquals("f: 6,9: 9<x : i=" + i,normD,normS,0.0f);
  }
  ss.setLengthNormFactors("a",5,8,0.5f,false);
  ss.setLengthNormFactors("b",5,8,0.1f,false);
  for (int i=9; i < 1000; i++) {
    invertState.setLength(i);
    final float normSS=ss.computeNorm("a",invertState);
    final float normS=s.computeNorm("b",invertState);
    assertTrue("s: i=" + i + " : a="+ normSS+ " < b="+ normS,normSS < normS);
  }
}
