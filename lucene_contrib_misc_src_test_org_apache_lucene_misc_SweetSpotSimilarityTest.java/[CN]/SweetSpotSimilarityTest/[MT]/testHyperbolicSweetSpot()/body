{
  SweetSpotSimilarity ss=new SweetSpotSimilarity(){
    @Override public float tf(    int freq){
      return hyperbolicTf(freq);
    }
  }
;
  ss.setHyperbolicTfFactors(3.3f,7.7f,Math.E,5.0f);
  TFIDFSimilarity s=ss;
  for (int i=1; i <= 1000; i++) {
    assertTrue("MIN tf: i=" + i + " : s="+ s.tf(i),3.3f <= s.tf(i));
    assertTrue("MAX tf: i=" + i + " : s="+ s.tf(i),s.tf(i) <= 7.7f);
  }
  assertEquals("MID tf",3.3f + (7.7f - 3.3f) / 2.0f,s.tf(5),0.00001f);
  assertEquals("tf zero",0.0f,s.tf(0),0.0f);
}
