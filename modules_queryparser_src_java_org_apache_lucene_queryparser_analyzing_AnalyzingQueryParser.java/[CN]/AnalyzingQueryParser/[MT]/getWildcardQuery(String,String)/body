{
  List<String> tlist=new ArrayList<String>();
  List<String> wlist=new ArrayList<String>();
  boolean isWithinToken=(!termStr.startsWith("?") && !termStr.startsWith("*"));
  StringBuilder tmpBuffer=new StringBuilder();
  char[] chars=termStr.toCharArray();
  for (int i=0; i < termStr.length(); i++) {
    if (chars[i] == '?' || chars[i] == '*') {
      if (isWithinToken) {
        tlist.add(tmpBuffer.toString());
        tmpBuffer.setLength(0);
      }
      isWithinToken=false;
    }
 else {
      if (!isWithinToken) {
        wlist.add(tmpBuffer.toString());
        tmpBuffer.setLength(0);
      }
      isWithinToken=true;
    }
    tmpBuffer.append(chars[i]);
  }
  if (isWithinToken) {
    tlist.add(tmpBuffer.toString());
  }
 else {
    wlist.add(tmpBuffer.toString());
  }
  TokenStream source;
  int countTokens=0;
  try {
    source=getAnalyzer().tokenStream(field,new StringReader(termStr));
    source.reset();
  }
 catch (  IOException e1) {
    throw new RuntimeException(e1);
  }
  CharTermAttribute termAtt=source.addAttribute(CharTermAttribute.class);
  while (true) {
    try {
      if (!source.incrementToken())       break;
    }
 catch (    IOException e) {
      break;
    }
    String term=termAtt.toString();
    if (!"".equals(term)) {
      try {
        tlist.set(countTokens++,term);
      }
 catch (      IndexOutOfBoundsException ioobe) {
        countTokens=-1;
      }
    }
  }
  try {
    source.end();
    source.close();
  }
 catch (  IOException e) {
  }
  if (countTokens != tlist.size()) {
    throw new ParseException("Cannot build WildcardQuery with analyzer " + getAnalyzer().getClass() + " - tokens added or lost");
  }
  if (tlist.size() == 0) {
    return null;
  }
 else   if (tlist.size() == 1) {
    if (wlist != null && wlist.size() == 1) {
      return super.getWildcardQuery(field,tlist.get(0) + wlist.get(0).toString());
    }
 else {
      throw new IllegalArgumentException("getWildcardQuery called without wildcard");
    }
  }
 else {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < tlist.size(); i++) {
      sb.append(tlist.get(i));
      if (wlist != null && wlist.size() > i) {
        sb.append(wlist.get(i));
      }
    }
    return super.getWildcardQuery(field,sb.toString());
  }
}
