{
  int sz=shardCounts.size();
  int numReceived=sz;
  OpenBitSet terms=new OpenBitSet(termNum + sz);
  long last=0;
  for (int i=0; i < sz; i++) {
    String name=shardCounts.getName(i);
    long count=((Number)shardCounts.getVal(i)).longValue();
    if (name == null) {
      missingCount+=count;
      numReceived--;
    }
 else {
      ShardFacetCount sfc=counts.get(name);
      if (sfc == null) {
        sfc=new ShardFacetCount();
        sfc.name=name;
        sfc.termNum=termNum++;
        counts.put(name,sfc);
      }
      sfc.count+=count;
      terms.fastSet(sfc.termNum);
      last=count;
    }
  }
  if (numRequested != 0 && numReceived < numRequested) {
    last=0;
  }
  missingMaxPossible+=last;
  missingMax[shardNum]=last;
  counted[shardNum]=terms;
}
