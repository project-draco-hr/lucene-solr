{
  Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);
  conf.setCodec(new Lucene46Codec(){
    @Override public DocValuesFormat getDocValuesFormatForField(    String field){
      return new Lucene45DocValuesFormat();
    }
  }
);
  IndexWriter writer=new IndexWriter(dir,conf.clone());
  Document doc=new Document();
  doc.add(new StringField("id","d0",Store.NO));
  doc.add(new NumericDocValuesField("f1",5L));
  doc.add(new NumericDocValuesField("f2",13L));
  writer.addDocument(doc);
  writer.shutdown();
  conf.setCodec(new Lucene46Codec(){
    @Override public DocValuesFormat getDocValuesFormatForField(    String field){
      return new AssertingDocValuesFormat();
    }
  }
);
  writer=new IndexWriter(dir,conf.clone());
  doc=new Document();
  doc.add(new StringField("id","d1",Store.NO));
  doc.add(new NumericDocValuesField("f1",17L));
  doc.add(new NumericDocValuesField("f2",2L));
  writer.addDocument(doc);
  writer.updateNumericDocValue(new Term("id","d0"),"f1",12L);
  writer.shutdown();
  DirectoryReader reader=DirectoryReader.open(dir);
  AtomicReader r=SlowCompositeReaderWrapper.wrap(reader);
  NumericDocValues f1=r.getNumericDocValues("f1");
  NumericDocValues f2=r.getNumericDocValues("f2");
  assertEquals(12L,f1.get(0));
  assertEquals(13L,f2.get(0));
  assertEquals(17L,f1.get(1));
  assertEquals(2L,f2.get(1));
  reader.close();
  dir.close();
}
