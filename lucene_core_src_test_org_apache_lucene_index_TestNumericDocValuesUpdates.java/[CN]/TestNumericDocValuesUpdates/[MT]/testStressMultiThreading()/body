{
  final Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  final IndexWriter writer=new IndexWriter(dir,conf);
  final int numThreads=atLeast(3);
  final int numDocs=atLeast(2000);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    double group=random().nextDouble();
    String g;
    if (group < 0.1)     g="g0";
 else     if (group < 0.5)     g="g1";
 else     if (group < 0.8)     g="g2";
 else     g="g3";
    doc.add(new StringField("updKey",g,Store.NO));
    for (int j=0; j < numThreads; j++) {
      long value=random().nextInt();
      doc.add(new NumericDocValuesField("f" + j,value));
      doc.add(new NumericDocValuesField("cf" + j,value * 2));
    }
    writer.addDocument(doc);
  }
  final CountDownLatch done=new CountDownLatch(numThreads);
  Thread[] threads=new Thread[numThreads];
  for (int i=0; i < threads.length; i++) {
    final String f="f" + i;
    final String cf="cf" + i;
    final int numThreadUpdates=atLeast(40);
    threads[i]=new Thread("UpdateThread-" + i){
      @Override public void run(){
        try {
          Random random=random();
          int numUpdates=numThreadUpdates;
          while (numUpdates-- > 0) {
            double group=random.nextDouble();
            Term t;
            if (group < 0.1)             t=new Term("updKey","g0");
 else             if (group < 0.5)             t=new Term("updKey","g1");
 else             if (group < 0.8)             t=new Term("updKey","g2");
 else             t=new Term("updKey","g3");
            long updValue=random.nextInt();
            writer.updateNumericDocValue(t,f,updValue);
            writer.updateNumericDocValue(t,cf,updValue * 2);
            if (random.nextDouble() < 0.2) {
              int doc=random.nextInt(numDocs);
              writer.deleteDocuments(new Term("id","doc" + doc));
            }
            if (random.nextDouble() < 0.1) {
              writer.commit();
            }
            if (random.nextDouble() < 0.3) {
              DirectoryReader.open(writer,true).close();
            }
          }
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
 finally {
          done.countDown();
        }
      }
    }
;
  }
  for (  Thread t : threads)   t.start();
  done.await();
  writer.close();
  DirectoryReader reader=DirectoryReader.open(dir);
  for (  AtomicReaderContext context : reader.leaves()) {
    AtomicReader r=context.reader();
    for (int i=0; i < numThreads; i++) {
      NumericDocValues ndv=r.getNumericDocValues("f" + i);
      NumericDocValues control=r.getNumericDocValues("cf" + i);
      Bits liveDocs=r.getLiveDocs();
      for (int j=0; j < r.maxDoc(); j++) {
        if (liveDocs == null || liveDocs.get(j)) {
          assertEquals(control.get(j),ndv.get(j) * 2);
        }
      }
    }
  }
  reader.close();
  dir.close();
}
