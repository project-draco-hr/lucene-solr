{
  final int N=10;
  for (int pass=0; pass < 2; pass++) {
    boolean useCompoundFile=(pass % 2) != 0;
    Directory dir=newDirectory();
    if (dir instanceof MockDirectoryWrapper) {
      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);
    }
    IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(new KeepLastNDeletionPolicy(N)).setMaxBufferedDocs(10);
    MergePolicy mp=conf.getMergePolicy();
    mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
    IndexWriter writer=new IndexWriter(dir,conf);
    KeepLastNDeletionPolicy policy=(KeepLastNDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
    writer.close();
    Term searchTerm=new Term("content","aaa");
    Query query=new TermQuery(searchTerm);
    for (int i=0; i < N + 1; i++) {
      conf=newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy).setMaxBufferedDocs(10);
      mp=conf.getMergePolicy();
      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
      writer=new IndexWriter(dir,conf);
      policy=(KeepLastNDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
      for (int j=0; j < 17; j++) {
        addDocWithID(writer,i * (N + 1) + j);
      }
      writer.close();
      conf=new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(policy).setMergePolicy(NoMergePolicy.INSTANCE);
      writer=new IndexWriter(dir,conf);
      policy=(KeepLastNDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
      writer.deleteDocuments(new Term("id","" + (i * (N + 1) + 3)));
      writer.close();
      IndexReader reader=DirectoryReader.open(dir);
      IndexSearcher searcher=newSearcher(reader);
      ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
      assertEquals(16,hits.length);
      reader.close();
      writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));
      policy=(KeepLastNDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
      writer.close();
    }
    assertEquals(3 * (N + 1) + 1,policy.numOnInit);
    assertEquals(3 * (N + 1) + 1,policy.numOnCommit);
    IndexReader rwReader=DirectoryReader.open(dir);
    IndexSearcher searcher=newSearcher(rwReader);
    ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
    assertEquals(0,hits.length);
    long gen=SegmentInfos.getLastCommitGeneration(dir);
    int expectedCount=0;
    rwReader.close();
    for (int i=0; i < N + 1; i++) {
      try {
        IndexReader reader=DirectoryReader.open(dir);
        searcher=newSearcher(reader);
        hits=searcher.search(query,null,1000).scoreDocs;
        assertEquals(expectedCount,hits.length);
        if (expectedCount == 0) {
          expectedCount=16;
        }
 else         if (expectedCount == 16) {
          expectedCount=17;
        }
 else         if (expectedCount == 17) {
          expectedCount=0;
        }
        reader.close();
        if (i == N) {
          fail("should have failed on commits before last " + N);
        }
      }
 catch (      IOException e) {
        if (i != N) {
          throw e;
        }
      }
      if (i < N) {
        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      }
      gen--;
    }
    dir.close();
  }
}
