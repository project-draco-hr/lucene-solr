{
  final double SECONDS=2.0;
  Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(new ExpirationTimeDeletionPolicy(dir,SECONDS));
  MergePolicy mp=conf.getMergePolicy();
  mp.setNoCFSRatio(1.0);
  IndexWriter writer=new IndexWriter(dir,conf);
  ExpirationTimeDeletionPolicy policy=(ExpirationTimeDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
  Map<String,String> commitData=new HashMap<>();
  commitData.put("commitTime",String.valueOf(System.currentTimeMillis()));
  writer.setCommitData(commitData);
  writer.commit();
  writer.close();
  long lastDeleteTime=0;
  final int targetNumDelete=TestUtil.nextInt(random(),1,5);
  while (policy.numDelete < targetNumDelete) {
    lastDeleteTime=System.currentTimeMillis();
    conf=newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
    mp=conf.getMergePolicy();
    mp.setNoCFSRatio(1.0);
    writer=new IndexWriter(dir,conf);
    policy=(ExpirationTimeDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
    for (int j=0; j < 17; j++) {
      addDoc(writer);
    }
    commitData=new HashMap<>();
    commitData.put("commitTime",String.valueOf(System.currentTimeMillis()));
    writer.setCommitData(commitData);
    writer.commit();
    writer.close();
    Thread.sleep((int)(1000.0 * (SECONDS / 5.0)));
  }
  long gen=SegmentInfos.getLastCommitGeneration(dir);
  String fileName=IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen);
  dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
  boolean oneSecondResolution=true;
  while (gen > 0) {
    try {
      IndexReader reader=DirectoryReader.open(dir);
      reader.close();
      fileName=IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen);
      SegmentInfos sis=new SegmentInfos();
      sis.read(dir,fileName);
      long modTime=Long.parseLong(sis.getUserData().get("commitTime"));
      oneSecondResolution&=(modTime % 1000) == 0;
      final long leeway=(long)((SECONDS + (oneSecondResolution ? 1.0 : 0.0)) * 1000);
      assertTrue("commit point was older than " + SECONDS + " seconds ("+ (lastDeleteTime - modTime)+ " msec) but did not get deleted ",lastDeleteTime - modTime <= leeway);
    }
 catch (    IOException e) {
      break;
    }
    dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
    gen--;
  }
  dir.close();
}
