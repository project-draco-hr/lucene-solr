{
  final int N=5;
  for (int pass=0; pass < 2; pass++) {
    boolean useCompoundFile=(pass % 2) != 0;
    Directory dir=newDirectory();
    KeepLastNDeletionPolicy policy=new KeepLastNDeletionPolicy(N);
    for (int j=0; j < N + 1; j++) {
      IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy).setMaxBufferedDocs(10);
      MergePolicy mp=conf.getMergePolicy();
      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
      IndexWriter writer=new IndexWriter(dir,conf);
      policy=(KeepLastNDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
      for (int i=0; i < 17; i++) {
        addDoc(writer);
      }
      writer.forceMerge(1);
      writer.close();
    }
    assertTrue(policy.numDelete > 0);
    assertEquals(N + 1,policy.numOnInit);
    assertEquals(N + 1,policy.numOnCommit);
    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
    long gen=SegmentInfos.getLastCommitGeneration(dir);
    for (int i=0; i < N + 1; i++) {
      try {
        IndexReader reader=DirectoryReader.open(dir);
        reader.close();
        if (i == N) {
          fail("should have failed on commits prior to last " + N);
        }
      }
 catch (      IOException e) {
        if (i != N) {
          throw e;
        }
      }
      if (i < N) {
        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      }
      gen--;
    }
    dir.close();
  }
}
