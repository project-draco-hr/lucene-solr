{
  for (int pass=0; pass < 2; pass++) {
    if (VERBOSE) {
      System.out.println("TEST: cycle pass=" + pass);
    }
    boolean useCompoundFile=(pass % 2) != 0;
    Directory dir=newDirectory();
    IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).setMaxBufferedDocs(10).setMergeScheduler(new SerialMergeScheduler());
    MergePolicy mp=conf.getMergePolicy();
    mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
    IndexWriter writer=new IndexWriter(dir,conf);
    KeepAllDeletionPolicy policy=(KeepAllDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
    for (int i=0; i < 107; i++) {
      addDoc(writer);
    }
    writer.close();
    final boolean needsMerging;
{
      DirectoryReader r=DirectoryReader.open(dir);
      needsMerging=r.leaves().size() != 1;
      r.close();
    }
    if (needsMerging) {
      conf=newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
      mp=conf.getMergePolicy();
      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);
      if (VERBOSE) {
        System.out.println("TEST: open writer for forceMerge");
      }
      writer=new IndexWriter(dir,conf);
      policy=(KeepAllDeletionPolicy)writer.getConfig().getIndexDeletionPolicy();
      writer.forceMerge(1);
      writer.close();
    }
    assertEquals(needsMerging ? 2 : 1,policy.numOnInit);
    assertEquals(1 + (needsMerging ? 1 : 0),policy.numOnCommit);
    Collection<IndexCommit> commits=DirectoryReader.listCommits(dir);
    assertEquals(1 + (needsMerging ? 1 : 0),commits.size());
    for (    final IndexCommit commit : commits) {
      IndexReader r=DirectoryReader.open(commit);
      r.close();
    }
    long gen=SegmentInfos.getLastCommitGeneration(dir);
    while (gen > 0) {
      IndexReader reader=DirectoryReader.open(dir);
      reader.close();
      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      gen--;
      if (gen > 0) {
        int preCount=dir.listAll().length;
        writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));
        writer.close();
        int postCount=dir.listAll().length;
        assertTrue(postCount < preCount);
      }
    }
    dir.close();
  }
}
