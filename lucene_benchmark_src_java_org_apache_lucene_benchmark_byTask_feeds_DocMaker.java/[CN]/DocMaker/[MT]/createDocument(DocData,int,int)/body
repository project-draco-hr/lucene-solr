{
  final DocState ds=getDocState();
  final Document doc=reuseFields ? ds.doc : new Document();
  doc.clear();
  FieldType ft=new FieldType(valType);
  ft.setIndexed(true);
  ft.setStored(true);
  Field idField=ds.getField(ID_FIELD,ft);
  int id;
  if (r != null) {
    id=r.nextInt(updateDocIDLimit);
  }
 else {
    id=docData.getID();
    if (id == -1) {
      id=numDocsCreated.getAndIncrement();
    }
  }
  idField.setStringValue(Integer.toString(id));
  doc.add(idField);
  String name=docData.getName();
  if (name == null)   name="";
  name=cnt < 0 ? name : name + "_" + cnt;
  Field nameField=ds.getField(NAME_FIELD,valType);
  nameField.setStringValue(name);
  doc.add(nameField);
  DateUtil util=dateParsers.get();
  if (util == null) {
    util=new DateUtil();
    dateParsers.set(util);
  }
  Date date=null;
  String dateString=docData.getDate();
  if (dateString != null) {
    util.pos.setIndex(0);
    date=util.parser.parse(dateString,util.pos);
  }
 else {
    dateString="";
  }
  Field dateStringField=ds.getField(DATE_FIELD,valType);
  dateStringField.setStringValue(dateString);
  doc.add(dateStringField);
  if (date == null) {
    date=new Date();
  }
  Field dateField=ds.getNumericField(DATE_MSEC_FIELD,NumericType.LONG);
  dateField.setLongValue(date.getTime());
  doc.add(dateField);
  util.cal.setTime(date);
  final int sec=util.cal.get(Calendar.HOUR_OF_DAY) * 3600 + util.cal.get(Calendar.MINUTE) * 60 + util.cal.get(Calendar.SECOND);
  Field timeSecField=ds.getNumericField(TIME_SEC_FIELD,NumericType.INT);
  timeSecField.setIntValue(sec);
  doc.add(timeSecField);
  String title=docData.getTitle();
  Field titleField=ds.getField(TITLE_FIELD,valType);
  titleField.setStringValue(title == null ? "" : title);
  doc.add(titleField);
  String body=docData.getBody();
  if (body != null && body.length() > 0) {
    String bdy;
    if (size <= 0 || size >= body.length()) {
      bdy=body;
      docData.setBody("");
    }
 else {
      for (int n=size - 1; n < size + 20 && n < body.length(); n++) {
        if (Character.isWhitespace(body.charAt(n))) {
          size=n;
          break;
        }
      }
      bdy=body.substring(0,size);
      docData.setBody(body.substring(size));
    }
    Field bodyField=ds.getField(BODY_FIELD,bodyValType);
    bodyField.setStringValue(bdy);
    doc.add(bodyField);
    if (storeBytes) {
      Field bytesField=ds.getField(BYTES_FIELD,StringField.TYPE_STORED);
      bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));
      doc.add(bytesField);
    }
  }
  if (indexProperties) {
    Properties props=docData.getProps();
    if (props != null) {
      for (      final Map.Entry<Object,Object> entry : props.entrySet()) {
        Field f=ds.getField((String)entry.getKey(),valType);
        f.setStringValue((String)entry.getValue());
        doc.add(f);
      }
      docData.setProps(null);
    }
  }
  return doc;
}
