{
  this.config=config;
  this.source=source;
  boolean stored=config.get("doc.stored",false);
  boolean bodyStored=config.get("doc.body.stored",stored);
  boolean tokenized=config.get("doc.tokenized",true);
  boolean bodyTokenized=config.get("doc.body.tokenized",tokenized);
  boolean norms=config.get("doc.tokenized.norms",false);
  boolean bodyNorms=config.get("doc.body.tokenized.norms",true);
  boolean bodyOffsets=config.get("doc.body.offsets",false);
  boolean termVec=config.get("doc.term.vector",false);
  boolean termVecPositions=config.get("doc.term.vector.positions",false);
  boolean termVecOffsets=config.get("doc.term.vector.offsets",false);
  valType=new FieldType(TextField.TYPE_NOT_STORED);
  valType.setStored(stored);
  valType.setTokenized(tokenized);
  valType.setOmitNorms(!norms);
  valType.setStoreTermVectors(termVec);
  valType.setStoreTermVectorPositions(termVecPositions);
  valType.setStoreTermVectorOffsets(termVecOffsets);
  valType.freeze();
  bodyValType=new FieldType(TextField.TYPE_NOT_STORED);
  bodyValType.setStored(bodyStored);
  bodyValType.setTokenized(bodyTokenized);
  bodyValType.setOmitNorms(!bodyNorms);
  if (bodyTokenized && bodyOffsets) {
    bodyValType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  }
  bodyValType.setStoreTermVectors(termVec);
  bodyValType.setStoreTermVectorPositions(termVecPositions);
  bodyValType.setStoreTermVectorOffsets(termVecOffsets);
  bodyValType.freeze();
  storeBytes=config.get("doc.store.body.bytes",false);
  reuseFields=config.get("doc.reuse.fields",true);
  docState=new ThreadLocal<>();
  indexProperties=config.get("doc.index.props",false);
  updateDocIDLimit=config.get("doc.random.id.limit",-1);
  if (updateDocIDLimit != -1) {
    r=new Random(179);
  }
}
