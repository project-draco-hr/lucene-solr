{
  String fieldName[]=new String[]{"floatdv","doubledv"};
  String largestNegative[]=new String[]{String.valueOf(0f - Float.MIN_NORMAL),String.valueOf(0f - Double.MIN_NORMAL)};
  String negativeInfinity[]=new String[]{String.valueOf(Float.NEGATIVE_INFINITY),String.valueOf(Double.NEGATIVE_INFINITY)};
  String largestValue[]=new String[]{String.valueOf(Float.MAX_VALUE),String.valueOf(Double.MAX_VALUE)};
  for (int i=0; i < fieldName.length; i++) {
    assertU(adoc("id","1",fieldName[i],"2"));
    assertU(adoc("id","2",fieldName[i],"-5"));
    assertU(adoc("id","3",fieldName[i],"3"));
    assertU(adoc("id","4",fieldName[i],"3"));
    assertU(adoc("id","5",fieldName[i],largestNegative[i]));
    assertU(adoc("id","6",fieldName[i],negativeInfinity[i]));
    assertU(adoc("id","7",fieldName[i],largestValue[i]));
    assertU(commit());
    assertQ(req("q",fieldName[i] + ":[-0.0 TO 2.5]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=1]");
    assertQ(req("q",fieldName[i] + ":[-6 TO 0]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=2]","//result/doc[2]/int[@name='id'][.=5]");
    assertQ(req("q",fieldName[i] + ":[-6 TO 2.5]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='3']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=2]","//result/doc[3]/int[@name='id'][.=5]");
    assertQ(req("q",fieldName[i] + ":[2 TO 3]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='3']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=3]","//result/doc[3]/int[@name='id'][.=4]");
    assertQ(req("q",fieldName[i] + ":[2 TO *]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='4']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=3]","//result/doc[3]/int[@name='id'][.=4]","//result/doc[4]/int[@name='id'][.=7]");
    assertQ(req("q",fieldName[i] + ":[* TO -1]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=2]","//result/doc[2]/int[@name='id'][.=6]");
    assertQ(req("q",fieldName[i] + ":[* TO 2]","sort","id asc","fl","id," + fieldName[i]),"//*[@numFound='4']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=2]","//result/doc[3]/int[@name='id'][.=5]","//result/doc[4]/int[@name='id'][.=6]");
    assertQ(req("q",fieldName[i] + ":[* TO 2}","sort","id asc","fl","id," + fieldName[i]),"//*[@numFound='3']","//result/doc[1]/int[@name='id'][.=2]","//result/doc[2]/int[@name='id'][.=5]","//result/doc[3]/int[@name='id'][.=6]");
    assertQ(req("q",fieldName[i] + ":[-6 TO *]","sort","id asc","fl","id," + fieldName[i]),"//*[@numFound='6']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=2]","//result/doc[3]/int[@name='id'][.=3]","//result/doc[4]/int[@name='id'][.=4]","//result/doc[5]/int[@name='id'][.=5]","//result/doc[6]/int[@name='id'][.=7]");
    assertQ(req("q",fieldName[i] + ":[* TO *]","sort","id asc","fl","id," + fieldName[i] + ",score"),"//*[@numFound='7']","//result/doc[1]/int[@name='id'][.=1]","//result/doc[2]/int[@name='id'][.=2]","//result/doc[3]/int[@name='id'][.=3]","//result/doc[4]/int[@name='id'][.=4]","//result/doc[5]/int[@name='id'][.=5]","//result/doc[6]/int[@name='id'][.=6]","//result/doc[7]/int[@name='id'][.=7]","//result/doc[1]/float[@name='score'][.=1.0]","//result/doc[2]/float[@name='score'][.=1.0]","//result/doc[3]/float[@name='score'][.=1.0]","//result/doc[4]/float[@name='score'][.=1.0]","//result/doc[5]/float[@name='score'][.=1.0]","//result/doc[6]/float[@name='score'][.=1.0]","//result/doc[7]/float[@name='score'][.=1.0]");
  }
}
