{
  if (acceptDocs == null) {
    return new DocIdSetIterator(){
      private int doc=-1;
      @Override public int docID(){
        return doc;
      }
      @Override public int nextDoc(){
        do {
          doc++;
          if (doc >= maxDoc) {
            return doc=NO_MORE_DOCS;
          }
        }
 while (!matchDoc(doc));
        return doc;
      }
      @Override public int advance(      int target){
        for (doc=target; doc < maxDoc; doc++) {
          if (matchDoc(doc)) {
            return doc;
          }
        }
        return doc=NO_MORE_DOCS;
      }
      @Override public long cost(){
        return maxDoc;
      }
    }
;
  }
 else   if (acceptDocs instanceof FixedBitSet) {
    return new FilteredDocIdSetIterator(new FixedBitDocIdSet((FixedBitSet)acceptDocs).iterator()){
      @Override protected boolean match(      int doc){
        return DocValuesDocIdSet.this.matchDoc(doc);
      }
    }
;
  }
 else {
    return new DocIdSetIterator(){
      private int doc=-1;
      @Override public int docID(){
        return doc;
      }
      @Override public int nextDoc(){
        do {
          doc++;
          if (doc >= maxDoc) {
            return doc=NO_MORE_DOCS;
          }
        }
 while (!(matchDoc(doc) && acceptDocs.get(doc)));
        return doc;
      }
      @Override public int advance(      int target){
        for (doc=target; doc < maxDoc; doc++) {
          if (matchDoc(doc) && acceptDocs.get(doc)) {
            return doc;
          }
        }
        return doc=NO_MORE_DOCS;
      }
      @Override public long cost(){
        return maxDoc;
      }
    }
;
  }
}
