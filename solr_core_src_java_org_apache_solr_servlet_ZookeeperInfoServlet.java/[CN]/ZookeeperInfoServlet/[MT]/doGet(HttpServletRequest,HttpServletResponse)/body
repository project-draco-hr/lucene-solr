{
  CoreContainer cores=(CoreContainer)request.getAttribute("org.apache.solr.CoreContainer");
  if (cores == null) {
    throw new ServletException("Missing request attribute org.apache.solr.CoreContainer.");
  }
synchronized (this) {
    if (pagingSupport == null) {
      pagingSupport=new PagedCollectionSupport();
      ZkController zkController=cores.getZkController();
      if (zkController != null) {
        zkController.addOnReconnectListener(pagingSupport);
      }
    }
  }
  final SolrParams params;
  try {
    params=SolrRequestParsers.DEFAULT.parse(null,request.getServletPath(),request).getParams();
  }
 catch (  Exception e) {
    int code=500;
    if (e instanceof SolrException) {
      code=Math.min(599,Math.max(100,((SolrException)e).code()));
    }
    response.sendError(code,e.toString());
    return;
  }
  String path=params.get("path");
  String addr=params.get("addr");
  if (addr != null && addr.length() == 0) {
    addr=null;
  }
  String detailS=params.get("detail");
  boolean detail=detailS != null && detailS.equals("true");
  String dumpS=params.get("dump");
  boolean dump=dumpS != null && dumpS.equals("true");
  int start=paramAsInt("start",params,0);
  int rows=paramAsInt("rows",params,-1);
  String filterType=params.get("filterType");
  if (filterType != null) {
    filterType=filterType.trim().toLowerCase(Locale.ROOT);
    if (filterType.length() == 0)     filterType=null;
  }
  FilterType type=(filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;
  String filter=(type != FilterType.none) ? params.get("filter") : null;
  if (filter != null) {
    filter=filter.trim();
    if (filter.length() == 0)     filter=null;
  }
  response.setCharacterEncoding("UTF-8");
  response.setContentType("application/json");
  Writer out=new FastWriter(new OutputStreamWriter(response.getOutputStream(),StandardCharsets.UTF_8));
  ZKPrinter printer=new ZKPrinter(response,out,cores.getZkController(),addr);
  printer.detail=detail;
  printer.dump=dump;
  boolean isGraphView="graph".equals(params.get("view"));
  printer.page=(isGraphView && "/clusterstate.json".equals(path)) ? new PageOfCollections(start,rows,type,filter) : null;
  printer.pagingSupport=pagingSupport;
  try {
    printer.print(path);
  }
  finally {
    printer.close();
  }
  out.flush();
}
