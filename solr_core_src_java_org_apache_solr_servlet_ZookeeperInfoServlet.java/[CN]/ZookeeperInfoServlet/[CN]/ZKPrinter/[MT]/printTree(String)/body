{
  String label=path;
  if (!fullpath) {
    int idx=path.lastIndexOf('/');
    label=idx > 0 ? path.substring(idx + 1) : path;
  }
  out.println("{");
  out.println("\"data\" : \"" + label + "\"");
  Stat stat=new Stat();
  try {
    byte[] data=zkClient.getData(path,null,stat,true);
    if (stat.getEphemeralOwner() != 0) {
      out.println(", \"ephemeral\" : true");
      out.println(", \"version\" : \"" + stat.getVersion() + "\"");
    }
    if (stat.getDataLength() != 0) {
      String str;
      try {
        str=new String(data,"UTF-8");
        str=str.replaceAll("\\\"","\\\\\"");
        out.print(", \"content\" : \"");
        out.print(compress(str));
        out.println("\"");
      }
 catch (      UnsupportedEncodingException e) {
        StringBuilder sb=new StringBuilder("BIN(");
        sb.append("len=" + data.length);
        sb.append("hex=");
        int limit=Math.min(data.length,maxData / 2);
        for (int i=0; i < limit; i++) {
          byte b=data[i];
          sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);
          sb.append(StrUtils.HEX_DIGITS[b & 0xf]);
        }
        if (limit != data.length) {
          sb.append("...");
        }
        sb.append(")");
        str=sb.toString();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    out.println("(path gone)");
  }
catch (  KeeperException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (stat.getNumChildren() > 0) {
    out.print(", \"children\" : [");
    List<String> children=null;
    try {
      children=zkClient.getChildren(path,null,true);
    }
 catch (    KeeperException e) {
      exception(e);
      return;
    }
catch (    InterruptedException e) {
      exception(e);
    }
catch (    IllegalArgumentException e) {
      out.println("(children gone)");
    }
    Integer i=0;
    for (    String child : children) {
      if (0 != i) {
        out.print(", ");
      }
      String childPath=path + (path.endsWith("/") ? "" : "/") + child;
      printTree(childPath);
      i++;
    }
    out.println("]");
  }
  out.println("}");
}
