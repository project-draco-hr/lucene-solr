{
  try {
    Stat stat=new Stat();
    byte[] data=zkClient.getData(path,null,stat,true);
    out.println("\"znode\" : {");
    out.print("\"path\" : \"");
    xmlescape(path);
    out.println("\"");
    out.println(", \"version\" : \"" + stat.getVersion() + "\"");
    out.println(", \"aversion\" : \"" + stat.getAversion() + "\"");
    out.println(", \"cversion\" : \"" + stat.getCversion() + "\"");
    out.println(", \"ctime\" : \"" + time(stat.getCtime()) + "\"");
    out.println(", \"mtime\" : \"" + time(stat.getMtime()) + "\"");
    out.println(", \"czxid\" : \"" + stat.getCzxid() + "\"");
    out.println(", \"mzxid\" : \"" + stat.getMzxid() + "\"");
    out.println(", \"pzxid\" : \"" + stat.getPzxid() + "\"");
    out.println(", \"children_count\" : \"" + stat.getNumChildren() + "\"");
    out.println(", \"ephemeralOwner\" : \"" + stat.getEphemeralOwner() + "\"");
    out.println(", \"dataLength\" : \"" + stat.getDataLength() + "\"");
    if (stat.getDataLength() != 0) {
      boolean isBinary=false;
      String str;
      try {
        str=new String(data,"UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        StringBuilder sb=new StringBuilder(data.length * 2);
        for (int i=0; i < data.length; i++) {
          byte b=data[i];
          sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);
          sb.append(StrUtils.HEX_DIGITS[b & 0xf]);
          if ((i & 0x3f) == 0x3f) {
            sb.append("\n");
          }
        }
        str=sb.toString();
      }
      str=str.replaceAll("\\\"","\\\\\"");
      out.print(", \"data\" : \"");
      out.print(str);
      out.println("\"");
    }
    out.println("}");
  }
 catch (  KeeperException e) {
    exception(e);
    return;
  }
catch (  InterruptedException e) {
    exception(e);
  }
}
