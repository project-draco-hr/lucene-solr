{
  NumericRangeQueryNode numericRangeNode=(NumericRangeQueryNode)queryNode;
  NumericQueryNode lowerNumericNode=numericRangeNode.getLowerBound();
  NumericQueryNode upperNumericNode=numericRangeNode.getUpperBound();
  Number lowerNumber=lowerNumericNode.getValue();
  Number upperNumber=upperNumericNode.getValue();
  NumericConfig numericConfig=numericRangeNode.getNumericConfig();
  NumericField.DataType numberType=numericConfig.getType();
  String field=StringUtils.toString(numericRangeNode.getField());
  boolean minInclusive=numericRangeNode.isLowerInclusive();
  boolean maxInclusive=numericRangeNode.isUpperInclusive();
  int precisionStep=numericConfig.getPrecisionStep();
switch (numberType) {
case LONG:
    return NumericRangeQuery.newLongRange(field,precisionStep,(Long)lowerNumber,(Long)upperNumber,minInclusive,maxInclusive);
case INT:
  return NumericRangeQuery.newIntRange(field,precisionStep,(Integer)lowerNumber,(Integer)upperNumber,minInclusive,maxInclusive);
case FLOAT:
return NumericRangeQuery.newFloatRange(field,precisionStep,(Float)lowerNumber,(Float)upperNumber,minInclusive,maxInclusive);
case DOUBLE:
return NumericRangeQuery.newDoubleRange(field,precisionStep,(Double)lowerNumber,(Double)upperNumber,minInclusive,maxInclusive);
default :
throw new QueryNodeException(new MessageImpl(QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE,numberType));
}
}
