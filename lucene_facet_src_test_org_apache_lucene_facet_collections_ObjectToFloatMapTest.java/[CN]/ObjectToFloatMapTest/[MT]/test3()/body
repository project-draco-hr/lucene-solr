{
  ObjectToFloatMap<Integer> map=new ObjectToFloatMap<Integer>();
  int length=100;
  for (int i=0; i < length; ++i) {
    map.put(i * 64,100 + i);
  }
  HashSet<Integer> keySet=new HashSet<Integer>();
  for (Iterator<Integer> iit=map.keyIterator(); iit.hasNext(); ) {
    keySet.add(iit.next());
  }
  assertEquals(length,keySet.size());
  for (int i=0; i < length; ++i) {
    assertTrue(keySet.contains(i * 64));
  }
  HashSet<Float> valueSet=new HashSet<Float>();
  for (FloatIterator iit=map.iterator(); iit.hasNext(); ) {
    valueSet.add(iit.next());
  }
  assertEquals(length,valueSet.size());
  float[] array=map.toArray();
  assertEquals(length,array.length);
  for (  float value : array) {
    assertTrue(valueSet.contains(value));
  }
  float[] array2=new float[80];
  array2=map.toArray(array2);
  assertEquals(80,array2.length);
  for (  float value : array2) {
    assertTrue(valueSet.contains(value));
  }
  float[] array3=new float[120];
  array3=map.toArray(array3);
  for (int i=0; i < length; ++i) {
    assertTrue(valueSet.contains(array3[i]));
  }
  assertNaN(array3[length]);
  for (int i=0; i < length; ++i) {
    assertTrue(map.containsValue(i + 100));
    assertTrue(map.containsKey(i * 64));
  }
  for (Iterator<Integer> iit=map.keyIterator(); iit.hasNext(); ) {
    iit.next();
    iit.remove();
  }
  assertTrue(map.isEmpty());
  assertEquals(0,map.size());
}
