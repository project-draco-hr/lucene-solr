{
  lowerVal=lowerVal == null ? null : toTerm(lowerVal);
  upperVal=upperVal == null ? null : toTerm(upperVal);
  int lower=Integer.MIN_VALUE;
  if (lowerVal != null) {
    lower=termsIndex.lookupTerm(new BytesRef(lowerVal));
    if (lower < 0) {
      lower=-lower - 1;
    }
 else     if (!includeLower) {
      lower++;
    }
  }
  int upper=Integer.MAX_VALUE;
  if (upperVal != null) {
    upper=termsIndex.lookupTerm(new BytesRef(upperVal));
    if (upper < 0) {
      upper=-upper - 2;
    }
 else     if (!includeUpper) {
      upper--;
    }
  }
  final int ll=lower;
  final int uu=upper;
  return new ValueSourceScorer(readerContext,this){
    final SortedDocValues values=readerContext.reader().getSortedDocValues(field);
    private int lastDocID;
    @Override public boolean matches(    int doc) throws IOException {
      if (doc < lastDocID) {
        throw new IllegalArgumentException("docs were sent out-of-order: lastDocID=" + lastDocID + " vs docID="+ doc);
      }
      if (doc > values.docID()) {
        values.advance(doc);
      }
      if (doc == values.docID()) {
        int ord=values.ordValue();
        return ord >= ll && ord <= uu;
      }
 else {
        return false;
      }
    }
  }
;
}
