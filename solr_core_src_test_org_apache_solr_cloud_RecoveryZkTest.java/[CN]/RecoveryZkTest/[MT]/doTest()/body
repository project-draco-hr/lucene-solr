{
  handle.clear();
  handle.put("timestamp",SKIPVAL);
  int[] maxDocList=new int[]{300,700,1200,1350,3000};
  int[] maxDocNightlyList=new int[]{3000,7000,12000,30000,45000,60000};
  int maxDoc;
  if (!TEST_NIGHTLY) {
    maxDoc=maxDocList[random().nextInt(maxDocList.length - 1)];
  }
 else {
    maxDoc=maxDocNightlyList[random().nextInt(maxDocList.length - 1)];
  }
  indexThread=new StopableIndexingThread(controlClient,cloudClient,"1",true,maxDoc);
  indexThread.start();
  indexThread2=new StopableIndexingThread(controlClient,cloudClient,"2",true,maxDoc);
  indexThread2.start();
  int[] waitTimes=new int[]{200,2000,3000};
  Thread.sleep(waitTimes[random().nextInt(waitTimes.length - 1)]);
  JettySolrRunner replica=chaosMonkey.stopShard("shard1",1).jetty;
  Thread.sleep(waitTimes[random().nextInt(waitTimes.length - 1)]);
  replica.start();
  Thread.sleep(3000);
  ZkStateReader zkStateReader=cloudClient.getZkStateReader();
  indexThread.safeStop();
  indexThread2.safeStop();
  indexThread.join();
  indexThread2.join();
  Thread.sleep(1000);
  waitForThingsToLevelOut(120);
  Thread.sleep(2000);
  waitForThingsToLevelOut(30);
  Thread.sleep(5000);
  waitForRecoveriesToFinish(DEFAULT_COLLECTION,zkStateReader,false,true);
  String fail=checkShardConsistency("shard1",false,false);
  if (fail != null) {
    fail(fail);
  }
  SolrQuery query=new SolrQuery("*:*");
  query.setParam("distrib","false");
  long client1Docs=shardToJetty.get("shard1").get(0).client.solrClient.query(query).getResults().getNumFound();
  long client2Docs=shardToJetty.get("shard1").get(1).client.solrClient.query(query).getResults().getNumFound();
  assertTrue(client1Docs > 0);
  assertEquals(client1Docs,client2Docs);
}
