{
  List<CountsForEachShard> l=new ArrayList<>();
  l.add(new CountsForEachShard(1,3,1));
  l.add(new CountsForEachShard(0,3,2));
  l.add(new CountsForEachShard(0,3,3));
  l.add(new CountsForEachShard(0,3,4));
  l.add(new CountsForEachShard(1,0,2));
  l.add(new CountsForEachShard(1,0,1));
  l.add(new CountsForEachShard(2,5,1));
  l.add(new CountsForEachShard(2,4,2));
  l.add(new CountsForEachShard(2,3,3));
  List<CountsForEachShard> expected=Arrays.asList(new CountsForEachShard(0,3,2),new CountsForEachShard(0,3,3),new CountsForEachShard(0,3,4),new CountsForEachShard(1,3,1),new CountsForEachShard(2,5,1),new CountsForEachShard(2,4,2),new CountsForEachShard(2,3,3),new CountsForEachShard(1,0,1),new CountsForEachShard(1,0,2));
  for (int i=0; i < 10; i++) {
    List<CountsForEachShard> copy=new ArrayList<>(l);
    Collections.shuffle(copy,random());
    Collections.sort(copy,CoreSorter.countsComparator);
    for (int j=0; j < copy.size(); j++) {
      assertEquals(expected.get(j),copy.get(j));
    }
  }
}
