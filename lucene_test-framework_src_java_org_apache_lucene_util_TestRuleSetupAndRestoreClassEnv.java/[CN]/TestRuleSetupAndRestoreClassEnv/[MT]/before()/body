{
  restoreProperties.put("solr.directoryFactory",System.getProperty("solr.directoryFactory"));
  if (System.getProperty("solr.directoryFactory") == null) {
    System.setProperty("solr.directoryFactory","org.apache.solr.core.MockDirectoryFactory");
  }
  try {
    final java.lang.reflect.Field spiLoaderField=Codec.class.getDeclaredField("loader");
    spiLoaderField.setAccessible(true);
    final Object spiLoader=spiLoaderField.get(null);
    final java.lang.reflect.Field modifiableServicesField=NamedSPILoader.class.getDeclaredField("modifiableServices");
    modifiableServicesField.setAccessible(true);
    @SuppressWarnings({"unchecked","rawtypes"}) final Map<String,Codec> serviceMap=(Map)modifiableServicesField.get(spiLoader);
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot access internals of Codec and NamedSPILoader classes",e);
  }
  if (VERBOSE) {
    Set<String> codecs=Codec.availableCodecs();
    for (    String codec : codecs) {
      System.out.println("Loaded codec: '" + codec + "': "+ Codec.forName(codec).getClass().getName());
    }
    Set<String> postingsFormats=PostingsFormat.availablePostingsFormats();
    for (    String postingsFormat : postingsFormats) {
      System.out.println("Loaded postingsFormat: '" + postingsFormat + "': "+ PostingsFormat.forName(postingsFormat).getClass().getName());
    }
  }
  savedInfoStream=InfoStream.getDefault();
  final Random random=RandomizedContext.current().getRandom();
  final boolean v=random.nextBoolean();
  if (INFOSTREAM) {
    InfoStream.setDefault(new PrintStreamInfoStream(System.out){
      @Override public void message(      String component,      String message){
        final String name;
        if (Thread.currentThread().getName().startsWith("TEST-")) {
          name="main";
        }
 else {
          name=Thread.currentThread().getName();
        }
        stream.println(component + " " + messageID+ " ["+ new Date()+ "; "+ name+ "]: "+ message);
      }
    }
);
  }
 else   if (v) {
    InfoStream.setDefault(new NullInfoStream());
  }
  Class<?> targetClass=RandomizedContext.current().getTargetClass();
  avoidCodecs=new HashSet<String>();
  if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {
    SuppressCodecs a=targetClass.getAnnotation(SuppressCodecs.class);
    avoidCodecs.addAll(Arrays.asList(a.value()));
    System.err.println("NOTE: Suppressing codecs " + Arrays.toString(a.value()) + " for "+ targetClass.getSimpleName()+ ".");
  }
  PREFLEX_IMPERSONATION_IS_ACTIVE=false;
  savedCodec=Codec.getDefault();
  final Codec codec;
  int randomVal=random.nextInt(10);
  if ("SimpleText".equals(TEST_CODEC) || ("random".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec("SimpleText"))) {
    codec=new SimpleTextCodec();
  }
 else   if ("Appending".equals(TEST_CODEC) || ("random".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec("Appending"))) {
    codec=new AppendingCodec();
  }
 else   if (!"random".equals(TEST_CODEC)) {
    codec=Codec.forName(TEST_CODEC);
  }
 else   if ("random".equals(TEST_POSTINGSFORMAT)) {
    codec=new RandomCodec(random,avoidCodecs);
  }
 else {
    codec=new Lucene40Codec(){
      private final PostingsFormat format=PostingsFormat.forName(TEST_POSTINGSFORMAT);
      @Override public PostingsFormat getPostingsFormatForField(      String field){
        return format;
      }
      @Override public String toString(){
        return super.toString() + ": " + format.toString();
      }
    }
;
  }
  Codec.setDefault(codec);
  String testLocale=System.getProperty("tests.locale","random");
  String testTimeZone=System.getProperty("tests.timezone","random");
  savedLocale=Locale.getDefault();
  Locale randomLocale=randomLocale(random);
  locale=testLocale.equals("random") ? randomLocale : localeForName(testLocale);
  Locale.setDefault(locale);
  restoreProperties.put("user.timezone",System.getProperty("user.timezone"));
  savedTimeZone=TimeZone.getDefault();
  TimeZone randomTimeZone=randomTimeZone(random());
  timeZone=testTimeZone.equals("random") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);
  TimeZone.setDefault(timeZone);
  similarity=random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());
}
