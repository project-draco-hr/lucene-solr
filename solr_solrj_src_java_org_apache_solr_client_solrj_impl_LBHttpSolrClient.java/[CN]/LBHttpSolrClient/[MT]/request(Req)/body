{
  Rsp rsp=new Rsp();
  Exception ex=null;
  boolean isUpdate=req.request instanceof IsUpdateRequest;
  List<ServerWrapper> skipped=null;
  long timeAllowedNano=getTimeAllowedInNanos(req.getRequest());
  long timeOutTime=System.nanoTime() + timeAllowedNano;
  for (  String serverStr : req.getServers()) {
    if (isTimeExceeded(timeAllowedNano,timeOutTime)) {
      break;
    }
    serverStr=normalize(serverStr);
    ServerWrapper wrapper=zombieServers.get(serverStr);
    if (wrapper != null) {
      final int numDeadServersToTry=req.getNumDeadServersToTry();
      if (numDeadServersToTry > 0) {
        if (skipped == null) {
          skipped=new ArrayList<>(numDeadServersToTry);
          skipped.add(wrapper);
        }
 else         if (skipped.size() < numDeadServersToTry) {
          skipped.add(wrapper);
        }
      }
      continue;
    }
    rsp.server=serverStr;
    HttpSolrClient client=makeSolrClient(serverStr);
    ex=doRequest(client,req,rsp,isUpdate,false,null);
    if (ex == null) {
      return rsp;
    }
  }
  if (skipped != null) {
    for (    ServerWrapper wrapper : skipped) {
      if (isTimeExceeded(timeAllowedNano,timeOutTime)) {
        break;
      }
      ex=doRequest(wrapper.client,req,rsp,isUpdate,true,wrapper.getKey());
      if (ex == null) {
        return rsp;
      }
    }
  }
  if (ex == null) {
    throw new SolrServerException("No live SolrServers available to handle this request");
  }
 else {
    throw new SolrServerException("No live SolrServers available to handle this request:" + zombieServers.keySet(),ex);
  }
}
