{
  MockDirectoryWrapper dir=newDirectory();
  IndexWriterConfig config=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  Similarity provider=new MySimProvider();
  config.setSimilarity(provider);
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,config);
  final LineFileDocs docs=new LineFileDocs(random());
  int num=atLeast(100);
  for (int i=0; i < num; i++) {
    Document doc=docs.nextDoc();
    float nextFloat=random().nextFloat();
    Field f=new TextField(floatTestField,"" + nextFloat,Field.Store.YES);
    f.setBoost(nextFloat);
    doc.add(f);
    writer.addDocument(doc);
    doc.removeField(floatTestField);
    if (rarely()) {
      writer.commit();
    }
  }
  writer.commit();
  writer.close();
  AtomicReader open=SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));
  DocValues normValues=open.normValues(floatTestField);
  assertNotNull(normValues);
  Source source=normValues.getSource();
  assertTrue(source.hasArray());
  assertEquals(Type.FLOAT_32,normValues.getType());
  float[] norms=(float[])source.getArray();
  for (int i=0; i < open.maxDoc(); i++) {
    StoredDocument document=open.document(i);
    float expected=Float.parseFloat(document.get(floatTestField));
    assertEquals(expected,norms[i],0.0f);
  }
  open.close();
  dir.close();
  docs.close();
}
