{
  SolrCore core=h.getCore();
  IndexSchema schema=core.getSchema();
  SolrInputDocument doc=new SolrInputDocument();
  final float DOC_BOOST=3.0F;
  doc.setDocumentBoost(DOC_BOOST);
  doc.addField("id","42");
  SolrInputField inTitle=new SolrInputField("title");
  inTitle.addValue("titleA",2.0F);
  inTitle.addValue("titleB",7.0F);
  final float TITLE_BOOST=2.0F * 7.0F;
  assertEquals(TITLE_BOOST,inTitle.getBoost(),0.0F);
  doc.put(inTitle.getName(),inTitle);
  SolrInputField inFoo=new SolrInputField("foo_t");
  inFoo.addValue("summer time",1.0F);
  inFoo.addValue("in the city",5.0F);
  inFoo.addValue("living is easy",11.0F);
  final float FOO_BOOST=1.0F * 5.0F * 11.0F;
  assertEquals(FOO_BOOST,inFoo.getBoost(),0.0F);
  doc.put(inFoo.getName(),inFoo);
  Document out=DocumentBuilder.toDocument(doc,core.getSchema());
  IndexableField[] outTitle=out.getFields(inTitle.getName());
  assertEquals("wrong number of title values",2,outTitle.length);
  IndexableField[] outNoNorms=out.getFields("title_stringNoNorms");
  assertEquals("wrong number of nonorms values",2,outNoNorms.length);
  IndexableField[] outFoo=out.getFields(inFoo.getName());
  assertEquals("wrong number of foo values",3,outFoo.length);
  IndexableField[] outText=out.getFields("text");
  assertEquals("wrong number of text values",5,outText.length);
  assertEquals(TITLE_BOOST * DOC_BOOST,outTitle[0].boost(),0.0F);
  assertEquals(1.0F,outTitle[1].boost(),0.0F);
  assertEquals(FOO_BOOST * DOC_BOOST,outFoo[0].boost(),0.0F);
  assertEquals(1.0F,outFoo[1].boost(),0.0F);
  assertEquals(1.0F,outFoo[2].boost(),0.0F);
  assertEquals(TITLE_BOOST * DOC_BOOST,outText[0].boost(),0.0F);
  assertEquals(1.0F,outText[1].boost(),0.0F);
  assertEquals(FOO_BOOST,outText[2].boost(),0.0F);
  assertEquals(1.0F,outText[3].boost(),0.0F);
  assertEquals(1.0F,outText[4].boost(),0.0F);
  assertEquals(1.0F,outNoNorms[0].boost(),0.0F);
  assertEquals(1.0F,outNoNorms[1].boost(),0.0F);
  assertU(adoc(doc));
  assertU(commit());
  SolrQueryRequest req=req("q","id:42");
  try {
    SolrQueryResponse rsp=new SolrQueryResponse();
    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)),req,rsp);
    DocList dl=((ResultContext)rsp.getValues().get("response")).docs;
    assertTrue("can't find the doc we just added",1 == dl.size());
    int docid=dl.iterator().nextDoc();
    SolrIndexSearcher searcher=req.getSearcher();
    AtomicReader reader=SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());
    assertTrue("similarity doesn't extend DefaultSimilarity, " + "config or defaults have changed since test was written",searcher.getSimilarity() instanceof DefaultSimilarity);
    DefaultSimilarity sim=(DefaultSimilarity)searcher.getSimilarity();
    NumericDocValues titleNorms=reader.getNormValues("title");
    NumericDocValues fooNorms=reader.getNormValues("foo_t");
    NumericDocValues textNorms=reader.getNormValues("text");
    assertEquals(expectedNorm(sim,2,TITLE_BOOST * DOC_BOOST),titleNorms.get(docid));
    assertEquals(expectedNorm(sim,8 - 3,FOO_BOOST * DOC_BOOST),fooNorms.get(docid));
    assertEquals(expectedNorm(sim,2 + 8 - 3,TITLE_BOOST * FOO_BOOST * DOC_BOOST),textNorms.get(docid));
  }
  finally {
    req.close();
  }
}
