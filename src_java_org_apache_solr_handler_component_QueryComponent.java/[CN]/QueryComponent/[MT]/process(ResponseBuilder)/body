{
  SolrQueryRequest req=rb.req;
  SolrQueryResponse rsp=rb.rsp;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  SolrIndexSearcher searcher=req.getSearcher();
  if (rb.getQueryCommand().getOffset() < 0) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"'start' parameter cannot be negative");
  }
  long timeAllowed=(long)params.getInt(CommonParams.TIME_ALLOWED,-1);
  String ids=params.get(ShardParams.IDS);
  if (ids != null) {
    SchemaField idField=req.getSchema().getUniqueKeyField();
    List<String> idArr=StrUtils.splitSmart(ids,",",true);
    int[] luceneIds=new int[idArr.size()];
    int docs=0;
    for (int i=0; i < idArr.size(); i++) {
      int id=req.getSearcher().getFirstMatch(new Term(idField.getName(),idField.getType().toInternal(idArr.get(i))));
      if (id >= 0)       luceneIds[docs++]=id;
    }
    DocListAndSet res=new DocListAndSet();
    res.docList=new DocSlice(0,docs,luceneIds,null,docs,0);
    if (rb.isNeedDocSet()) {
      List<Query> queries=new ArrayList<Query>();
      queries.add(rb.getQuery());
      List<Query> filters=rb.getFilters();
      if (filters != null)       queries.addAll(filters);
      res.docSet=searcher.getDocSet(queries);
    }
    rb.setResults(res);
    rsp.add("response",rb.getResults().docList);
    return;
  }
  SolrIndexSearcher.QueryCommand cmd=rb.getQueryCommand();
  cmd.setTimeAllowed(timeAllowed);
  SolrIndexSearcher.QueryResult result=new SolrIndexSearcher.QueryResult();
  searcher.search(result,cmd);
  rb.setResult(result);
  rsp.add("response",rb.getResults().docList);
  rsp.getToLog().add("hits",rb.getResults().docList.matches());
  boolean fsv=req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);
  if (fsv) {
    Sort sort=rb.getSortSpec().getSort();
    SortField[] sortFields=sort == null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();
    NamedList sortVals=new NamedList();
    Field field=new Field("dummy","",Field.Store.YES,Field.Index.NO);
    SolrIndexReader reader=searcher.getReader();
    SolrIndexReader[] readers=reader.getLeafReaders();
    SolrIndexReader subReader=reader;
    if (readers.length == 1) {
      subReader=readers[0];
      readers=null;
    }
    int[] offsets=reader.getLeafOffsets();
    for (    SortField sortField : sortFields) {
      int type=sortField.getType();
      if (type == SortField.SCORE || type == SortField.DOC)       continue;
      FieldComparator comparator=null;
      FieldComparator comparators[]=(readers == null) ? null : new FieldComparator[readers.length];
      String fieldname=sortField.getField();
      FieldType ft=fieldname == null ? null : req.getSchema().getFieldTypeNoEx(fieldname);
      DocList docList=rb.getResults().docList;
      ArrayList<Object> vals=new ArrayList<Object>(docList.size());
      DocIterator it=rb.getResults().docList.iterator();
      int offset=0;
      int idx=0;
      while (it.hasNext()) {
        int doc=it.nextDoc();
        if (readers != null) {
          idx=SolrIndexReader.readerIndex(doc,offsets);
          subReader=readers[idx];
          offset=offsets[idx];
          comparator=comparators[idx];
        }
        if (comparator == null) {
          comparator=sortField.getComparator(1,0,sortField.getReverse());
          comparator.setNextReader(subReader,offset,0);
          if (comparators != null)           comparators[idx]=comparator;
        }
        doc-=offset;
        comparator.copy(0,doc);
        Object val=comparator.value(0);
        if (val instanceof String) {
          field.setValue((String)val);
          val=ft.toObject(field);
        }
        vals.add(val);
      }
      sortVals.add(fieldname,vals);
    }
    rsp.add("sort_values",sortVals);
  }
  if (!req.getParams().getBool(ShardParams.IS_SHARD,false) && rb.getResults().docList != null && rb.getResults().docList.size() <= 50) {
    SolrPluginUtils.optimizePreFetchDocs(rb.getResults().docList,rb.getQuery(),req,rsp);
  }
}
