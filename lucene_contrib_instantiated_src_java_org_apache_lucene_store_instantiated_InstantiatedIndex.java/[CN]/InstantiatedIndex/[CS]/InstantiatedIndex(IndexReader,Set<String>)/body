{
  if (!sourceIndexReader.isOptimized()) {
    System.out.println(("Source index is not optimized."));
  }
  initialize();
  Collection<String> allFieldNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.ALL);
  Collection<String> indexedNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.INDEXED);
  for (  String name : indexedNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.indexed=true;
  }
  Collection<String> indexedNoVecNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR);
  for (  String name : indexedNoVecNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storeTermVector=false;
    setting.indexed=true;
  }
  Collection<String> indexedVecNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);
  for (  String name : indexedVecNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storeTermVector=true;
    setting.indexed=true;
  }
  Collection<String> payloadNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS);
  for (  String name : payloadNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storePayloads=true;
  }
  Collection<String> termVecNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);
  for (  String name : termVecNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storeTermVector=true;
  }
  Collection<String> termVecOffsetNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);
  for (  String name : termVecOffsetNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storeOffsetWithTermVector=true;
  }
  Collection<String> termVecPosNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);
  for (  String name : termVecPosNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storePositionWithTermVector=true;
  }
  Collection<String> termVecPosOffNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);
  for (  String name : termVecPosOffNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.storeOffsetWithTermVector=true;
    setting.storePositionWithTermVector=true;
  }
  Collection<String> unindexedNames=sourceIndexReader.getFieldNames(IndexReader.FieldOption.UNINDEXED);
  for (  String name : unindexedNames) {
    FieldSetting setting=fieldSettings.get(name,true);
    setting.indexed=false;
  }
  documentsByNumber=new InstantiatedDocument[sourceIndexReader.maxDoc()];
  if (sourceIndexReader.hasDeletions()) {
    deletedDocuments=new BitVector(sourceIndexReader.maxDoc());
  }
  for (int i=0; i < sourceIndexReader.maxDoc(); i++) {
    if (sourceIndexReader.hasDeletions() && sourceIndexReader.isDeleted(i)) {
      deletedDocuments.set(i);
    }
 else {
      InstantiatedDocument document=new InstantiatedDocument();
      Document sourceDocument=sourceIndexReader.document(i);
      for (      Fieldable field : sourceDocument.getFields()) {
        if (fields == null || fields.contains(field.name())) {
          document.getDocument().add(field);
        }
      }
      document.setDocumentNumber(i);
      documentsByNumber[i]=document;
      for (      Fieldable field : document.getDocument().getFields()) {
        if (fields == null || fields.contains(field.name())) {
          if (field.isTermVectorStored()) {
            if (document.getVectorSpace() == null) {
              document.setVectorSpace(new HashMap<String,List<InstantiatedTermDocumentInformation>>());
            }
            document.getVectorSpace().put(field.name(),new ArrayList<InstantiatedTermDocumentInformation>());
          }
        }
      }
    }
  }
  for (  String fieldName : allFieldNames) {
    if (fields == null || fields.contains(fieldName)) {
      getNormsByFieldNameAndDocumentNumber().put(fieldName,sourceIndexReader.norms(fieldName));
    }
  }
  for (  String fieldName : allFieldNames) {
    if (fields == null || fields.contains(fieldName)) {
      getTermsByFieldAndText().put(fieldName,new HashMap<String,InstantiatedTerm>(5000));
    }
  }
  List<InstantiatedTerm> terms=new ArrayList<InstantiatedTerm>(5000 * getTermsByFieldAndText().size());
  Fields fieldsC=MultiFields.getFields(sourceIndexReader);
  if (fieldsC != null) {
    FieldsEnum fieldsEnum=fieldsC.iterator();
    String field;
    while ((field=fieldsEnum.next()) != null) {
      if (fields == null || fields.contains(field)) {
        TermsEnum termsEnum=fieldsEnum.terms();
        BytesRef text;
        while ((text=termsEnum.next()) != null) {
          String termText=text.utf8ToString();
          InstantiatedTerm instantiatedTerm=new InstantiatedTerm(field,termText);
          getTermsByFieldAndText().get(field).put(termText,instantiatedTerm);
          instantiatedTerm.setTermIndex(terms.size());
          terms.add(instantiatedTerm);
          instantiatedTerm.setAssociatedDocuments(new InstantiatedTermDocumentInformation[termsEnum.docFreq()]);
        }
      }
    }
  }
  orderedTerms=terms.toArray(new InstantiatedTerm[terms.size()]);
  for (  InstantiatedTerm term : orderedTerms) {
    DocsAndPositionsEnum termPositions=MultiFields.getTermPositionsEnum(sourceIndexReader,MultiFields.getDeletedDocs(sourceIndexReader),term.getTerm().field(),new BytesRef(term.getTerm().text()));
    int position=0;
    while (termPositions.nextDoc() != DocsEnum.NO_MORE_DOCS) {
      InstantiatedDocument document=documentsByNumber[termPositions.docID()];
      byte[][] payloads=new byte[termPositions.freq()][];
      int[] positions=new int[termPositions.freq()];
      for (int i=0; i < termPositions.freq(); i++) {
        positions[i]=termPositions.nextPosition();
        if (termPositions.hasPayload()) {
          BytesRef br=termPositions.getPayload();
          payloads[i]=new byte[br.length];
          System.arraycopy(br.bytes,br.offset,payloads[i],0,br.length);
        }
      }
      InstantiatedTermDocumentInformation termDocumentInformation=new InstantiatedTermDocumentInformation(term,document,positions,payloads);
      term.getAssociatedDocuments()[position++]=termDocumentInformation;
      if (document.getVectorSpace() != null && document.getVectorSpace().containsKey(term.field())) {
        document.getVectorSpace().get(term.field()).add(termDocumentInformation);
      }
    }
  }
  for (  InstantiatedDocument document : getDocumentsByNumber()) {
    if (document == null) {
      continue;
    }
    for (    Fieldable field : document.getDocument().getFields()) {
      if (field.isTermVectorStored() && field.isStoreOffsetWithTermVector()) {
        TermPositionVector termPositionVector=(TermPositionVector)sourceIndexReader.getTermFreqVector(document.getDocumentNumber(),field.name());
        if (termPositionVector != null) {
          for (int i=0; i < termPositionVector.getTerms().length; i++) {
            String token=termPositionVector.getTerms()[i];
            InstantiatedTerm term=findTerm(field.name(),token);
            InstantiatedTermDocumentInformation termDocumentInformation=term.getAssociatedDocument(document.getDocumentNumber());
            termDocumentInformation.setTermOffsets(termPositionVector.getOffsets(i));
          }
        }
      }
    }
  }
}
