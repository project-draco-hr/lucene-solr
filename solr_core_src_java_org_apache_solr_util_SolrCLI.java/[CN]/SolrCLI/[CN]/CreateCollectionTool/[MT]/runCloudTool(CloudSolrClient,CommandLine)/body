{
  Set<String> liveNodes=cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();
  if (liveNodes.isEmpty())   throw new IllegalStateException("No live nodes found! Cannot create a collection until " + "there is at least 1 live node in the cluster.");
  String firstLiveNode=liveNodes.iterator().next();
  int numShards=optionAsInt(cli,"shards",1);
  int replicationFactor=optionAsInt(cli,"replicationFactor",1);
  int maxShardsPerNode=-1;
  if (cli.hasOption("maxShardsPerNode")) {
    maxShardsPerNode=Integer.parseInt(cli.getOptionValue("maxShardsPerNode"));
  }
 else {
    int numNodes=liveNodes.size();
    maxShardsPerNode=((numShards * replicationFactor) + numNodes - 1) / numNodes;
  }
  String configSet=cli.getOptionValue("config",DEFAULT_CONFIG_SET);
  String configSetNameInZk=configSet;
  File configSetDir=null;
  File possibleConfigDir=new File(configSet);
  if (possibleConfigDir.isDirectory()) {
    configSetDir=possibleConfigDir;
    configSetNameInZk=possibleConfigDir.getName();
  }
 else {
    File configsetsDir=new File(cli.getOptionValue("configsetsDir"));
    if (!configsetsDir.isDirectory())     throw new FileNotFoundException(configsetsDir.getAbsolutePath() + " not found!");
    configSetDir=new File(configsetsDir,configSet);
    if (!configSetDir.isDirectory()) {
      throw new FileNotFoundException("Specified config " + configSet + " not found in "+ configsetsDir.getAbsolutePath());
    }
  }
  File confDir=new File(configSetDir,"conf");
  if (!confDir.isDirectory()) {
    if ((new File(configSetDir,"solrconfig.xml")).isFile()) {
      confDir=configSetDir;
    }
 else {
      System.err.println("Specified configuration directory " + configSetDir.getAbsolutePath() + " is invalid;\nit should contain either conf sub-directory or solrconfig.xml");
      return 1;
    }
  }
  if (!cloudSolrClient.getZkStateReader().getZkClient().exists("/configs/" + configSetNameInZk,true)) {
    System.out.println("Uploading " + confDir.getAbsolutePath() + " for config "+ configSetNameInZk+ " to ZooKeeper at "+ cloudSolrClient.getZkHost());
    ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(),confDir,configSetNameInZk);
  }
  String baseUrl=cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);
  String collectionName=cli.getOptionValue("name");
  String collectionListUrl=baseUrl + "/admin/collections?action=list";
  if (safeCheckCollectionExists(collectionListUrl,collectionName)) {
    System.err.println("\nCollection '" + collectionName + "' already exists!");
    System.err.println("\nChecked collection existence using Collections API command:\n" + collectionListUrl);
    System.err.println();
    return 1;
  }
  String createCollectionUrl=String.format(Locale.ROOT,"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s",baseUrl,collectionName,numShards,replicationFactor,maxShardsPerNode,configSetNameInZk);
  System.out.println("\nCreating new collection '" + collectionName + "' using command:\n"+ createCollectionUrl+ "\n");
  Map<String,Object> json=null;
  try {
    json=getJson(createCollectionUrl);
  }
 catch (  SolrServerException sse) {
    if (safeCheckCollectionExists(collectionListUrl,collectionName)) {
      System.err.println("Collection '" + collectionName + "' already exists!");
      System.err.println("\nChecked collection existence using Collections API command:\n" + collectionListUrl);
    }
 else {
      System.err.println("Failed to create collection '" + collectionName + "' due to: "+ sse.getMessage());
    }
    System.err.println();
    return 1;
  }
  CharArr arr=new CharArr();
  new JSONWriter(arr,2).write(json);
  System.out.println(arr.toString());
  System.out.println();
  return 0;
}
