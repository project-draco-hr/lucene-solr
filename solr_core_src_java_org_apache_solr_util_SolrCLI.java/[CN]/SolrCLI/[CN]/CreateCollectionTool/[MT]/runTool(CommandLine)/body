{
  LogManager.getLogger("org.apache.zookeeper").setLevel(Level.ERROR);
  LogManager.getLogger("org.apache.solr.common.cloud").setLevel(Level.WARN);
  String zkHost=cli.getOptionValue("zkHost");
  if (zkHost == null) {
    String solrUrl=cli.getOptionValue("solrUrl");
    if (solrUrl == null)     throw new IllegalStateException("Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!");
    if (!solrUrl.endsWith("/"))     solrUrl+="/";
    String systemInfoUrl=solrUrl + "admin/info/system";
    HttpClient httpClient=getHttpClient();
    try {
      Map<String,Object> systemInfo=getJson(httpClient,systemInfoUrl,2);
      StatusTool statusTool=new StatusTool();
      Map<String,Object> status=statusTool.reportStatus(solrUrl,systemInfo,httpClient);
      Map<String,Object> cloud=(Map<String,Object>)status.get("cloud");
      if (cloud == null) {
        System.err.println("\nERROR: Solr at " + solrUrl + " is running in standalone server mode, please use the create_core command instead;\n"+ "create_collection can only be used when running in SolrCloud mode.\n");
        return 1;
      }
      String zookeeper=(String)cloud.get("ZooKeeper");
      if (zookeeper.endsWith("(embedded)")) {
        zookeeper=zookeeper.substring(0,zookeeper.length() - "(embedded)".length());
      }
      zkHost=zookeeper;
    }
  finally {
      closeHttpClient(httpClient);
    }
  }
  int toolExitStatus=0;
  CloudSolrServer cloudSolrServer=null;
  try {
    cloudSolrServer=new CloudSolrServer(zkHost);
    System.out.println("Connecting to ZooKeeper at " + zkHost);
    cloudSolrServer.connect();
    toolExitStatus=runCloudTool(cloudSolrServer,cli);
  }
 catch (  Exception exc) {
    String excMsg=exc.getMessage();
    if (excMsg != null) {
      System.err.println("\nERROR: " + excMsg + "\n");
      toolExitStatus=1;
    }
 else {
      throw exc;
    }
  }
 finally {
    if (cloudSolrServer != null) {
      try {
        cloudSolrServer.shutdown();
      }
 catch (      Exception ignore) {
      }
    }
  }
  return toolExitStatus;
}
