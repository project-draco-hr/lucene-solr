{
  Map<String,Object> status=new LinkedHashMap<String,Object>();
  status.put("version",asString("/lucene/solr-impl-version",info));
  status.put("startTime",asString("/jvm/jmx/startTime",info));
  status.put("uptime",uptime(asLong("/jvm/jmx/upTimeMS",info)));
  String usedMemory=asString("/jvm/memory/used",info);
  String totalMemory=asString("/jvm/memory/total",info);
  status.put("memory",usedMemory + " of " + totalMemory);
  if ("solrcloud".equals(info.get("mode"))) {
    String zkHost=null;
    List<String> args=asList("/jvm/jmx/commandLineArgs",info);
    if (args != null) {
      for (      String arg : args) {
        if (arg.startsWith("-DzkHost=")) {
          zkHost=arg.substring("-DzkHost=".length());
          break;
        }
 else         if (arg.startsWith("-DzkRun")) {
          URL serverUrl=new URL(solrUrl);
          String host=serverUrl.getHost();
          int port=serverUrl.getPort();
          zkHost=host + ":" + (port + 1000)+ " (embedded)";
          break;
        }
      }
    }
    status.put("cloud",getCloudStatus(httpClient,solrUrl,zkHost));
  }
  return status;
}
