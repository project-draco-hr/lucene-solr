{
  if (segmentPolicy.shouldCache(filter,context,set) == false) {
    return false;
  }
  final int frequency;
synchronized (this) {
    frequency=recentlyUsedFilters.frequency(filter.hashCode());
  }
  if (frequency >= minFrequencyOtherFilters) {
    return true;
  }
 else   if (isCostly(filter) && frequency >= minFrequencyCostlyFilters) {
    return true;
  }
 else   if (isCheapToCache(set) && frequency >= minFrequencyCheapFilters) {
    return true;
  }
  return false;
}
