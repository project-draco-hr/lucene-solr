{
  this.segmentPolicy=segmentPolicy;
  if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {
    throw new IllegalArgumentException("it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache");
  }
  if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {
    throw new IllegalArgumentException("The minimum frequencies should be less than the size of the history of filters that are being tracked");
  }
  this.recentlyUsedFilters=new FrequencyTrackingRingBuffer<>(historySize);
  this.minFrequencyCostlyFilters=minFrequencyCostlyFilters;
  this.minFrequencyCheapFilters=minFrequencyCheapFilters;
  this.minFrequencyOtherFilters=minFrequencyOtherFilters;
}
