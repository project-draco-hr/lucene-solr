{
  TestSpellChecker checker=new TestSpellChecker();
  NamedList spellchecker=new NamedList();
  spellchecker.add("classname",IndexBasedSpellChecker.class.getName());
  File indexDir=createTempDir().toFile();
  spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR,indexDir.getAbsolutePath());
  spellchecker.add(AbstractLuceneSpellChecker.FIELD,"title");
  spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME,spellchecker);
  spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE,JaroWinklerDistance.class.getName());
  SolrCore core=h.getCore();
  String dictName=checker.init(spellchecker,core);
  assertTrue(dictName + " is not equal to " + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);
  RefCounted<SolrIndexSearcher> holder=core.getSearcher();
  SolrIndexSearcher searcher=holder.get();
  try {
    checker.build(core,searcher);
    SpellChecker sc=checker.getSpellChecker();
    assertTrue("sc is null and it shouldn't be",sc != null);
    StringDistance sd=sc.getStringDistance();
    assertTrue("sd is null and it shouldn't be",sd != null);
    assertTrue("sd is not an instance of " + JaroWinklerDistance.class.getName(),sd instanceof JaroWinklerDistance);
  }
  finally {
    holder.decref();
  }
}
