{
  Set<String> fileExtensions=new HashSet<>();
  fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);
  fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);
  MockDirectoryWrapper primaryDir=new MockDirectoryWrapper(random(),new RAMDirectory());
  primaryDir.setCheckIndexOnClose(false);
  MockDirectoryWrapper secondaryDir=new MockDirectoryWrapper(random(),new RAMDirectory());
  secondaryDir.setCheckIndexOnClose(false);
  FileSwitchDirectory fsd=new FileSwitchDirectory(fileExtensions,primaryDir,secondaryDir,true);
  IndexWriter writer=new IndexWriter(fsd,new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName("Lucene410")).setUseCompoundFile(false));
  TestIndexWriterReader.createIndexNoClose(true,"ram",writer);
  IndexReader reader=DirectoryReader.open(writer,true);
  assertEquals(100,reader.maxDoc());
  writer.commit();
  String[] files=primaryDir.listAll();
  assertTrue(files.length > 0);
  for (int x=0; x < files.length; x++) {
    String ext=FileSwitchDirectory.getExtension(files[x]);
    assertTrue(fileExtensions.contains(ext));
  }
  files=secondaryDir.listAll();
  assertTrue(files.length > 0);
  for (int x=0; x < files.length; x++) {
    String ext=FileSwitchDirectory.getExtension(files[x]);
    assertFalse(fileExtensions.contains(ext));
  }
  reader.close();
  writer.close();
  files=fsd.listAll();
  for (int i=0; i < files.length; i++) {
    assertNotNull(files[i]);
  }
  fsd.close();
}
