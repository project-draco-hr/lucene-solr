{
  final int[] docids=sampleSet;
  Arrays.sort(docids);
  final float[] scores=new float[docids.length];
  ScoredDocIDsIterator it=allDocIds.iterator();
  int n=0;
  while (it.next() && n < docids.length) {
    int doc=it.getDocID();
    if (doc == docids[n]) {
      scores[n]=it.getScore();
      ++n;
    }
  }
  final int size=n;
  return new ScoredDocIDs(){
    public DocIdSet getDocIDs(){
      return new DocIdSet(){
        @Override public boolean isCacheable(){
          return true;
        }
        @Override public DocIdSetIterator iterator() throws IOException {
          return new DocIdSetIterator(){
            private int next=-1;
            @Override public int advance(            int target) throws IOException {
              while (next < size && docids[next++] < target) {
              }
              return next == size ? NO_MORE_DOCS : docids[next];
            }
            @Override public int docID(){
              return docids[next];
            }
            @Override public int nextDoc() throws IOException {
              if (++next >= size) {
                return NO_MORE_DOCS;
              }
              return docids[next];
            }
          }
;
        }
      }
;
    }
    public ScoredDocIDsIterator iterator() throws IOException {
      return new ScoredDocIDsIterator(){
        int next=-1;
        public boolean next(){
          return ++next < size;
        }
        public float getScore(){
          return scores[next];
        }
        public int getDocID(){
          return docids[next];
        }
      }
;
    }
    public int size(){
      return size;
    }
  }
;
}
