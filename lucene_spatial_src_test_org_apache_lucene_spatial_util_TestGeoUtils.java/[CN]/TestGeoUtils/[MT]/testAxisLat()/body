{
  double earthCircumference=2D * Math.PI * GeoUtils.EARTH_MEAN_RADIUS_METERS;
  assertEquals(90,GeoRect.axisLat(0,earthCircumference / 4),0.0D);
  for (int i=0; i < 100; ++i) {
    boolean reallyBig=random().nextInt(10) == 0;
    final double maxRadius=reallyBig ? 1.1 * earthCircumference : earthCircumference / 8;
    final double radius=maxRadius * random().nextDouble();
    double prevAxisLat=GeoRect.axisLat(0.0D,radius);
    for (double lat=0.1D; lat < 90D; lat+=0.1D) {
      double nextAxisLat=GeoRect.axisLat(lat,radius);
      GeoRect bbox=GeoRect.fromPointDistance(lat,180D,radius);
      double dist=SloppyMath.haversinMeters(lat,180D,nextAxisLat,bbox.maxLon);
      if (nextAxisLat < GeoUtils.MAX_LAT_INCL) {
        assertEquals("lat = " + lat,dist,radius,0.1D);
      }
      assertTrue("lat = " + lat,prevAxisLat <= nextAxisLat);
      prevAxisLat=nextAxisLat;
    }
    prevAxisLat=GeoRect.axisLat(-0.0D,radius);
    for (double lat=-0.1D; lat > -90D; lat-=0.1D) {
      double nextAxisLat=GeoRect.axisLat(lat,radius);
      GeoRect bbox=GeoRect.fromPointDistance(lat,180D,radius);
      double dist=SloppyMath.haversinMeters(lat,180D,nextAxisLat,bbox.maxLon);
      if (nextAxisLat > GeoUtils.MIN_LAT_INCL) {
        assertEquals("lat = " + lat,dist,radius,0.1D);
      }
      assertTrue("lat = " + lat,prevAxisLat >= nextAxisLat);
      prevAxisLat=nextAxisLat;
    }
  }
}
