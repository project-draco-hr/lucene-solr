{
  int numPoints=atLeast(100);
  String randomGeoHashString;
  String mortonGeoHash;
  long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;
  int randomLevel;
  for (int i=0; i < numPoints; ++i) {
    double lat=randomLat(false);
    double lon=randomLon(false);
    randomGeoHashString=GeoHashUtils.stringEncode(lon,lat,randomLevel=random().nextInt(12 - 1) + 1);
    mortonGeoHash=GeoHashUtils.stringEncodeFromMortonLong(GeoEncodingUtils.mortonHash(lon,lat),randomLevel);
    assertEquals(randomGeoHashString,mortonGeoHash);
    geoHashLong=(random().nextBoolean()) ? GeoHashUtils.longEncode(lon,lat,randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);
    assertEquals(randomGeoHashString,GeoHashUtils.stringEncode(geoHashLong));
    mortonLongFromGHString=GeoHashUtils.mortonEncode(randomGeoHashString);
    mortonLongFromGHLong=GeoHashUtils.mortonEncode(geoHashLong);
    assertEquals(mortonLongFromGHLong,mortonLongFromGHString);
    assertEquals(GeoEncodingUtils.mortonUnhashLat(mortonLongFromGHString),GeoEncodingUtils.mortonUnhashLat(mortonLongFromGHLong),0);
    assertEquals(GeoEncodingUtils.mortonUnhashLon(mortonLongFromGHString),GeoEncodingUtils.mortonUnhashLon(mortonLongFromGHLong),0);
  }
}
