{
  rootTransformerName=random().nextBoolean() ? null : "AddAColumnTransformer";
  int numChildren=random().nextInt(1) + 1;
  int numDatabaseRequests=1;
  if (underlyingDataModified) {
    if (countryEntity) {
      if (cached) {
        numDatabaseRequests++;
      }
 else {
        numDatabaseRequests+=totalPeople();
      }
    }
    if (sportsEntity) {
      if (cached) {
        numDatabaseRequests++;
      }
 else {
        numDatabaseRequests+=totalPeople();
      }
    }
  }
 else {
    countryEntity=true;
    sportsEntity=true;
    if (countryZipper || sportsZipper) {
      countryEntity=countryZipper;
      sportsEntity=sportsZipper;
    }
 else {
      if (numChildren == 1) {
        countryEntity=random().nextBoolean();
        sportsEntity=!countryEntity;
      }
    }
    if (countryEntity) {
      countryTransformer=random().nextBoolean();
      if (cached) {
        numDatabaseRequests++;
        countryCached=true;
      }
 else {
        numDatabaseRequests+=totalPeople();
      }
    }
    if (sportsEntity) {
      sportsTransformer=random().nextBoolean();
      if (cached) {
        numDatabaseRequests++;
        sportsCached=true;
      }
 else {
        numDatabaseRequests+=totalPeople();
      }
    }
  }
  h.query("/dataimport",generateRequest());
  assertQ("There should be 1 document per person in the database: " + totalPeople(),req("*:*"),"//*[@numFound='" + (totalPeople()) + "']");
  if (!underlyingDataModified && "AddAColumnTransformer".equals(rootTransformerName)) {
    assertQ("There should be 1 document with a transformer-added column per person is the database: " + totalPeople(),req("AddAColumn_s:Added"),"//*[@numFound='" + (totalPeople()) + "']");
  }
  if (countryEntity) {
{
      String[] people=getStringsFromQuery("SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'");
      String man=people[random().nextInt(people.length)];
      String[] countryNames=getStringsFromQuery("SELECT C.COUNTRY_NAME FROM PEOPLE P " + "INNER JOIN COUNTRIES C ON P.COUNTRY_CODE=C.CODE " + "WHERE P.DELETED!='Y' AND C.DELETED!='Y' AND P.NAME='" + man + "'");
      assertQ(req("{!term f=NAME_mult_s}" + man),"//*[@numFound='1']",countryNames.length > 0 ? "//doc/str[@name='COUNTRY_NAME_s']='" + countryNames[random().nextInt(countryNames.length)] + "'" : "//doc[count(*[@name='COUNTRY_NAME_s'])=0]");
    }
{
      String[] countryCodes=getStringsFromQuery("SELECT CODE FROM COUNTRIES WHERE DELETED != 'Y'");
      String theCode=countryCodes[random().nextInt(countryCodes.length)];
      int num=numberPeopleByCountryCode(theCode);
      if (num > 0) {
        String nrName=countryNameByCode(theCode);
        assertQ(req("COUNTRY_CODES_mult_s:" + theCode),"//*[@numFound='" + num + "']","//doc/str[@name='COUNTRY_NAME_s']='" + nrName + "'");
      }
 else {
        assertQ(req("COUNTRY_CODES_mult_s:" + theCode),"//*[@numFound='" + num + "']");
      }
    }
    if (countryTransformer && !underlyingDataModified) {
      assertQ(req("countryAdded_s:country_added"),"//*[@numFound='" + totalPeople() + "']");
    }
  }
  if (sportsEntity) {
    if (!underlyingDataModified) {
      assertQ(req("SPORT_NAME_mult_s:Sailing"),"//*[@numFound='2']");
    }
    String[] names=getStringsFromQuery("SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'");
    String name=names[random().nextInt(names.length)];
    int personId=getIntFromQuery("SELECT ID FROM PEOPLE WHERE DELETED != 'Y' AND NAME='" + name + "'");
    String[] michaelsSports=sportNamesByPersonId(personId);
    String[] xpath=new String[michaelsSports.length + 1];
    xpath[0]="//*[@numFound='1']";
    int i=1;
    for (    String ms : michaelsSports) {
      xpath[i]="//doc/arr[@name='SPORT_NAME_mult_s']/str='" + ms + "'";
      i++;
    }
    assertQ(req("NAME_mult_s:" + name.replaceAll("\\W","\\\\$0")),xpath);
    if (!underlyingDataModified && sportsTransformer) {
      assertQ(req("sportsAdded_s:sport_added"),"//*[@numFound='" + (totalSportsmen()) + "']");
    }
    assertQ("checking orphan sport is absent",req("{!term f=SPORT_NAME_mult_s}No Fishing"),"//*[@numFound='0']");
  }
  if (checkDatabaseRequests) {
    Assert.assertTrue("Expecting " + numDatabaseRequests + " database calls, but DIH reported "+ totalDatabaseRequests(),totalDatabaseRequests() == numDatabaseRequests);
  }
}
