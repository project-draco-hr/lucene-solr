{
  if (token.length() < this.minWordSize) {
    return;
  }
  char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.buffer());
  for (int i=0; i < token.length() - this.minSubwordSize; ++i) {
    Token longestMatchToken=null;
    for (int j=this.minSubwordSize - 1; j < this.maxSubwordSize; ++j) {
      if (i + j > token.length()) {
        break;
      }
      if (dictionary.contains(lowerCaseTermBuffer,i,j)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.length() < j) {
              longestMatchToken=createToken(i,j,token);
            }
          }
 else {
            longestMatchToken=createToken(i,j,token);
          }
        }
 else {
          tokens.add(createToken(i,j,token));
        }
      }
    }
    if (this.onlyLongestMatch && longestMatchToken != null) {
      tokens.add(longestMatchToken);
    }
  }
}
