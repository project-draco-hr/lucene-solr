{
  EntityProcessorWrapper entityProcessor=getEntityProcessor(entity);
  ContextImpl ctx=new ContextImpl(entity,vr,null,pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,session,parentCtx,this);
  entityProcessor.init(ctx);
  Context.CURRENT_CONTEXT.set(ctx);
  if (requestParameters.start > 0) {
    getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING,null,null);
  }
  if (verboseDebug) {
    getDebugLogger().log(DIHLogLevels.START_ENTITY,entity.name,null);
  }
  int seenDocCount=0;
  try {
    while (true) {
      if (stop.get())       return;
      if (importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows))       break;
      try {
        seenDocCount++;
        if (seenDocCount > requestParameters.start) {
          getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING,null,null);
        }
        if (verboseDebug && entity.isDocRoot) {
          getDebugLogger().log(DIHLogLevels.START_DOC,entity.name,null);
        }
        if (doc == null && entity.isDocRoot) {
          doc=new DocWrapper();
          ctx.setDoc(doc);
          DataConfig.Entity e=entity;
          while (e.parentEntity != null) {
            addFields(e.parentEntity,doc,(Map<String,Object>)vr.resolve(e.parentEntity.name),vr);
            e=e.parentEntity;
          }
        }
        Map<String,Object> arow=entityProcessor.nextRow();
        if (arow == null) {
          break;
        }
        if (entity.isDocRoot) {
          if (seenDocCount <= requestParameters.start)           continue;
          if (seenDocCount > requestParameters.start + requestParameters.rows) {
            LOG.info("Indexing stopped at docCount = " + importStatistics.docCount);
            break;
          }
        }
        if (verboseDebug) {
          getDebugLogger().log(DIHLogLevels.ENTITY_OUT,entity.name,arow);
        }
        importStatistics.rowsCount.incrementAndGet();
        if (doc != null) {
          handleSpecialCommands(arow,doc);
          addFields(entity,doc,arow,vr);
        }
        if (entity.entities != null) {
          vr.addNamespace(entity.name,arow);
          for (          DataConfig.Entity child : entity.entities) {
            buildDocument(vr,doc,child.isDocRoot ? pk : null,child,false,ctx);
          }
          vr.removeNamespace(entity.name);
        }
        Context.CURRENT_CONTEXT.set(ctx);
        if (entity.isDocRoot) {
          if (stop.get())           return;
          if (!doc.isEmpty()) {
            boolean result=writer.upload(doc);
            if (reqParams.debug) {
              reqParams.debugDocuments.add(doc);
            }
            doc=null;
            if (result) {
              importStatistics.docCount.incrementAndGet();
            }
 else {
              importStatistics.failedDocCount.incrementAndGet();
            }
          }
        }
      }
 catch (      DataImportHandlerException e) {
        if (verboseDebug) {
          getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION,entity.name,e);
        }
        if (e.getErrCode() == DataImportHandlerException.SKIP_ROW) {
          continue;
        }
        if (isRoot) {
          if (e.getErrCode() == DataImportHandlerException.SKIP) {
            importStatistics.skipDocCount.getAndIncrement();
            doc=null;
          }
 else {
            SolrException.log(LOG,"Exception while processing: " + entity.name + " document : "+ doc,e);
          }
          if (e.getErrCode() == DataImportHandlerException.SEVERE)           throw e;
        }
 else         throw e;
      }
catch (      Throwable t) {
        if (verboseDebug) {
          getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION,entity.name,t);
        }
        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,t);
      }
 finally {
        if (verboseDebug) {
          getDebugLogger().log(DIHLogLevels.ROW_END,entity.name,null);
          if (entity.isDocRoot)           getDebugLogger().log(DIHLogLevels.END_DOC,null,null);
          Context.CURRENT_CONTEXT.remove();
        }
      }
    }
  }
  finally {
    if (verboseDebug) {
      getDebugLogger().log(DIHLogLevels.END_ENTITY,null,null);
    }
    entityProcessor.destroy();
  }
}
