{
  try {
    dataImporter.store(DataImporter.STATUS_MSGS,statusMessages);
    document=dataImporter.getConfig().document;
    final AtomicLong startTime=new AtomicLong(System.currentTimeMillis());
    statusMessages.put(TIME_ELAPSED,new Object(){
      @Override public String toString(){
        return getTimeElapsedSince(startTime.get());
      }
    }
);
    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,importStatistics.queryCount);
    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,importStatistics.rowsCount);
    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,importStatistics.docCount);
    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,importStatistics.skipDocCount);
    List<String> entities=requestParameters.entities;
    if (document.onImportStart != null) {
      invokeEventListener(document.onImportStart);
    }
    AtomicBoolean fullCleanDone=new AtomicBoolean(false);
    Properties lastIndexTimeProps=new Properties();
    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));
    for (    DataConfig.Entity e : document.entities) {
      if (entities != null && !entities.contains(e.name))       continue;
      lastIndexTimeProps.setProperty(e.name + "." + LAST_INDEX_KEY,DataImporter.DATE_TIME_FORMAT.get().format(new Date()));
      root=e;
      String delQuery=e.allAttributes.get("preImportDeleteQuery");
      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {
        cleanByQuery(delQuery,fullCleanDone);
        doDelta();
        delQuery=e.allAttributes.get("postImportDeleteQuery");
        if (delQuery != null) {
          fullCleanDone.set(false);
          cleanByQuery(delQuery,fullCleanDone);
        }
      }
 else {
        cleanByQuery(delQuery,fullCleanDone);
        doFullDump();
        delQuery=e.allAttributes.get("postImportDeleteQuery");
        if (delQuery != null) {
          fullCleanDone.set(false);
          cleanByQuery(delQuery,fullCleanDone);
        }
      }
      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);
    }
    if (stop.get()) {
      statusMessages.put("Aborted",DataImporter.DATE_TIME_FORMAT.get().format(new Date()));
      rollback();
    }
 else {
      if (!requestParameters.clean) {
        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {
          finish(lastIndexTimeProps);
        }
      }
 else {
        finish(lastIndexTimeProps);
      }
      if (document.onImportEnd != null) {
        invokeEventListener(document.onImportEnd);
      }
    }
    statusMessages.remove(TIME_ELAPSED);
    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,"" + importStatistics.docCount.get());
    if (importStatistics.failedDocCount.get() > 0)     statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS,"" + importStatistics.failedDocCount.get());
    statusMessages.put("Time taken ",getTimeElapsedSince(startTime.get()));
    LOG.info("Time taken = " + getTimeElapsedSince(startTime.get()));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    if (writer != null) {
      writer.close();
    }
    if (requestParameters.debug) {
      requestParameters.debugVerboseOutput=getDebugLogger().output;
    }
  }
}
