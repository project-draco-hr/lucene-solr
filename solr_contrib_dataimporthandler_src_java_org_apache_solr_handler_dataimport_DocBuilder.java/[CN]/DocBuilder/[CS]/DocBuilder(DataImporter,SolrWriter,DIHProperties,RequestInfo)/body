{
  INSTANCE.set(this);
  this.dataImporter=dataImporter;
  this.reqParams=reqParams;
  this.propWriter=propWriter;
  DataImporter.QUERY_COUNT.set(importStatistics.queryCount);
  verboseDebug=reqParams.isDebug() && reqParams.getDebugInfo().verbose;
  persistedProperties=propWriter.readIndexerProperties();
  functionsNamespace=EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(),this,getVariableResolver());
  String writerClassStr=null;
  if (reqParams != null && reqParams.getRawParams() != null) {
    writerClassStr=(String)reqParams.getRawParams().get(PARAM_WRITER_IMPL);
  }
  if (writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + "." + DEFAULT_WRITER_NAME)) {
    try {
      Class<DIHWriter> writerClass=loadClass(writerClassStr,dataImporter.getCore());
      this.writer=writerClass.newInstance();
    }
 catch (    Exception e) {
      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Unable to load Writer implementation:" + writerClassStr,e);
    }
  }
 else {
    writer=solrWriter;
  }
  ContextImpl ctx=new ContextImpl(null,null,null,null,reqParams.getRawParams(),null,this);
  writer.init(ctx);
}
