{
  int numPositiveScores=0;
  for (int i=0; i < scores.length; i++) {
    if (scores[i] > 0) {
      ++numPositiveScores;
    }
  }
  Directory directory=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);
  writer.addDocument(new Document());
  writer.commit();
  IndexReader ir=writer.getReader();
  writer.close();
  IndexSearcher searcher=newSearcher(ir);
  Weight fake=new TermQuery(new Term("fake","weight")).createWeight(searcher,true,1f);
  Scorer s=new SimpleScorer(fake);
  TopDocsCollector<ScoreDoc> tdc=TopScoreDocCollector.create(scores.length);
  Collector c=new PositiveScoresOnlyCollector(tdc);
  LeafCollector ac=c.getLeafCollector(ir.leaves().get(0));
  ac.setScorer(s);
  while (s.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
    ac.collect(0);
  }
  TopDocs td=tdc.topDocs();
  ScoreDoc[] sd=td.scoreDocs;
  assertEquals(numPositiveScores,td.totalHits);
  for (int i=0; i < sd.length; i++) {
    assertTrue("only positive scores should return: " + sd[i].score,sd[i].score > 0);
  }
  ir.close();
  directory.close();
}
