{
  return new NodeStatusUpdaterImpl(context,dispatcher,healthChecker,metrics){
    @Override protected ResourceTracker getRMClient(){
      final ResourceTrackerService rt=resourceManager.getResourceTrackerService();
      final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
      return new ResourceTracker(){
        @Override public NodeHeartbeatResponse nodeHeartbeat(        NodeHeartbeatRequest request) throws YarnException, IOException {
          NodeHeartbeatResponse response=recordFactory.newRecordInstance(NodeHeartbeatResponse.class);
          try {
            response=rt.nodeHeartbeat(request);
          }
 catch (          YarnException e) {
            LOG.info("Exception in heartbeat from node " + request.getNodeStatus().getNodeId(),e);
            throw e;
          }
          return response;
        }
        @Override public RegisterNodeManagerResponse registerNodeManager(        RegisterNodeManagerRequest request) throws YarnException, IOException {
          RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
          try {
            response=rt.registerNodeManager(request);
          }
 catch (          YarnException e) {
            LOG.info("Exception in node registration from " + request.getNodeId().toString(),e);
            throw e;
          }
          return response;
        }
      }
;
    }
    @Override protected void stopRMProxy(){
      return;
    }
  }
;
}
