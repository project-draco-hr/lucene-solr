{
  checkNotNull(coreDescriptor,"coreDescriptor cannot be null");
  this.coreDescriptor=coreDescriptor;
  setName(name);
  MDCUtils.setCore(name);
  resourceLoader=config.getResourceLoader();
  this.solrConfig=config;
  if (updateHandler == null) {
    directoryFactory=initDirectoryFactory();
    solrCoreState=new DefaultSolrCoreState(directoryFactory);
  }
 else {
    solrCoreState=updateHandler.getSolrCoreState();
    directoryFactory=solrCoreState.getDirectoryFactory();
    isReloaded=true;
  }
  this.dataDir=initDataDir(dataDir,config,coreDescriptor);
  this.ulogDir=initUpdateLogDir(coreDescriptor);
  log.info("[{}] Opening new SolrCore at [{}], dataDir=[{}]",logid,resourceLoader.getInstanceDir(),dataDir);
  checkVersionFieldExistsInSchema(schema,coreDescriptor);
  this.infoRegistry=initInfoRegistry(name,config);
  infoRegistry.put("fieldCache",new SolrFieldCacheMBean());
  this.schema=initSchema(config,schema);
  this.startTime=System.currentTimeMillis();
  this.maxWarmingSearchers=config.maxWarmingSearchers;
  this.slowQueryThresholdMillis=config.slowQueryThresholdMillis;
  booleanQueryMaxClauseCount();
  final CountDownLatch latch=new CountDownLatch(1);
  try {
    initListeners();
    this.solrDelPolicy=initDeletionPolicy(delPolicy);
    this.codec=initCodec(solrConfig,this.schema);
    memClassLoader=new MemClassLoader(PluginBag.RuntimeLib.getLibObjects(this,solrConfig.getPluginInfos(PluginBag.RuntimeLib.class.getName())),getResourceLoader());
    initIndex(prev != null);
    initWriters();
    qParserPlugins.init(createInstances(QParserPlugin.standardPlugins),this);
    valueSourceParsers.init(ValueSourceParser.standardValueSourceParsers,this);
    transformerFactories.init(TransformerFactory.defaultFactories,this);
    loadSearchComponents();
    updateProcessors.init(Collections.emptyMap(),this);
    updateProcessorChains=loadUpdateProcessorChains();
    reqHandlers=new RequestHandlers(this);
    reqHandlers.initHandlersFromConfig(solrConfig);
    initDeprecatedSupport();
    statsCache=initStatsCache();
    searcherExecutor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        latch.await();
        return null;
      }
    }
);
    this.updateHandler=initUpdateHandler(updateHandler);
    initSearcher(prev);
    restManager=initRestManager();
    resourceLoader.inform(resourceLoader);
    resourceLoader.inform(this);
  }
 catch (  Throwable e) {
    latch.countDown();
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
    try {
      close();
    }
 catch (    Throwable t) {
      if (t instanceof OutOfMemoryError) {
        throw (OutOfMemoryError)t;
      }
      log.error("Error while closing",t);
    }
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e.getMessage(),e);
  }
 finally {
    latch.countDown();
  }
  infoRegistry.put("core",this);
  resourceLoader.inform(infoRegistry);
  bufferUpdatesIfConstructing(coreDescriptor);
  this.ruleExpiryLock=new ReentrantLock();
  registerConfListener();
}
