{
  int prune=0;
  int limit=Integer.MAX_VALUE;
  int inputMode=0;
  boolean storeOrds=false;
  boolean storeDocFreqs=false;
  boolean verify=true;
  boolean doPack=false;
  boolean noArcArrays=false;
  String wordsFileIn=null;
  String dirOut=null;
  int idx=0;
  while (idx < args.length) {
    if (args[idx].equals("-prune")) {
      prune=Integer.valueOf(args[1 + idx]);
      idx++;
    }
 else     if (args[idx].equals("-limit")) {
      limit=Integer.valueOf(args[1 + idx]);
      idx++;
    }
 else     if (args[idx].equals("-utf8")) {
      inputMode=0;
    }
 else     if (args[idx].equals("-utf32")) {
      inputMode=1;
    }
 else     if (args[idx].equals("-docFreq")) {
      storeDocFreqs=true;
    }
 else     if (args[idx].equals("-noArcArrays")) {
      noArcArrays=true;
    }
 else     if (args[idx].equals("-ords")) {
      storeOrds=true;
    }
 else     if (args[idx].equals("-noverify")) {
      verify=false;
    }
 else     if (args[idx].equals("-pack")) {
      doPack=true;
    }
 else     if (args[idx].startsWith("-")) {
      System.err.println("Unrecognized option: " + args[idx]);
      System.exit(-1);
    }
 else {
      if (wordsFileIn == null) {
        wordsFileIn=args[idx];
      }
 else       if (dirOut == null) {
        dirOut=args[idx];
      }
 else {
        System.err.println("Too many arguments, expected: input [output]");
        System.exit(-1);
      }
    }
    idx++;
  }
  if (wordsFileIn == null) {
    System.err.println("No input file.");
    System.exit(-1);
  }
  if (storeOrds && storeDocFreqs) {
    final PositiveIntOutputs o1=PositiveIntOutputs.getSingleton(true);
    final PositiveIntOutputs o2=PositiveIntOutputs.getSingleton(false);
    final PairOutputs<Long,Long> outputs=new PairOutputs<Long,Long>(o1,o2);
    new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut,wordsFileIn,inputMode,prune,outputs,doPack,noArcArrays){
      Random rand;
      @Override public PairOutputs.Pair<Long,Long> getOutput(      IntsRef input,      int ord){
        if (ord == 0) {
          rand=new Random(17);
        }
        return outputs.newPair((long)ord,(long)_TestUtil.nextInt(rand,1,5000));
      }
    }
.run(limit,verify);
  }
 else   if (storeOrds) {
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
    new VisitTerms<Long>(dirOut,wordsFileIn,inputMode,prune,outputs,doPack,noArcArrays){
      @Override public Long getOutput(      IntsRef input,      int ord){
        return (long)ord;
      }
    }
.run(limit,verify);
  }
 else   if (storeDocFreqs) {
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(false);
    new VisitTerms<Long>(dirOut,wordsFileIn,inputMode,prune,outputs,doPack,noArcArrays){
      Random rand;
      @Override public Long getOutput(      IntsRef input,      int ord){
        if (ord == 0) {
          rand=new Random(17);
        }
        return (long)_TestUtil.nextInt(rand,1,5000);
      }
    }
.run(limit,verify);
  }
 else {
    final NoOutputs outputs=NoOutputs.getSingleton();
    final Object NO_OUTPUT=outputs.getNoOutput();
    new VisitTerms<Object>(dirOut,wordsFileIn,inputMode,prune,outputs,doPack,noArcArrays){
      @Override public Object getOutput(      IntsRef input,      int ord){
        return NO_OUTPUT;
      }
    }
.run(limit,verify);
  }
}
