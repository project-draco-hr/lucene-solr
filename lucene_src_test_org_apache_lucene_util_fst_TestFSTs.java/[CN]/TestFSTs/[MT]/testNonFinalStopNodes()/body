{
  final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
  final Long nothing=outputs.getNoOutput();
  final Builder<Long> b=new Builder<Long>(FST.INPUT_TYPE.BYTE1,0,0,true,outputs);
  final FST<Long> fst=new FST<Long>(FST.INPUT_TYPE.BYTE1,outputs);
  final Builder.UnCompiledNode<Long> rootNode=new Builder.UnCompiledNode<Long>(b,0);
{
    final Builder.UnCompiledNode<Long> node=new Builder.UnCompiledNode<Long>(b,0);
    node.isFinal=true;
    rootNode.addArc('a',node);
    final Builder.CompiledNode frozen=new Builder.CompiledNode();
    frozen.address=fst.addNode(node);
    rootNode.arcs[0].nextFinalOutput=outputs.get(17);
    rootNode.arcs[0].isFinal=true;
    rootNode.arcs[0].output=nothing;
    rootNode.arcs[0].target=frozen;
  }
{
    final Builder.UnCompiledNode<Long> node=new Builder.UnCompiledNode<Long>(b,0);
    rootNode.addArc('b',node);
    final Builder.CompiledNode frozen=new Builder.CompiledNode();
    frozen.address=fst.addNode(node);
    rootNode.arcs[1].nextFinalOutput=nothing;
    rootNode.arcs[1].output=outputs.get(42);
    rootNode.arcs[1].target=frozen;
  }
  fst.finish(fst.addNode(rootNode));
  checkStopNodes(fst,outputs);
  Directory dir=newDirectory();
  IndexOutput out=dir.createOutput("fst");
  fst.save(out);
  out.close();
  IndexInput in=dir.openInput("fst");
  final FST<Long> fst2=new FST<Long>(in,outputs);
  checkStopNodes(fst2,outputs);
  in.close();
  dir.close();
}
