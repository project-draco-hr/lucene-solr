{
  int numFields=100;
  Info info=new Info("");
  for (int fieldNum=0; fieldNum <= numFields; ++fieldNum) {
    RestTestHarness publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    Operation.randomOperation().execute(publisher,fieldNum,info);
  }
  String[] expectedAddFields=getExpectedFieldResponses(info);
  String[] expectedAddDynamicFields=getExpectedDynamicFieldResponses(info);
  String[] expectedCopyFields=getExpectedCopyFieldResponses(info);
  boolean success=false;
  long maxTimeoutMillis=100000;
  long startTime=System.nanoTime();
  String request=null;
  String response=null;
  String result=null;
  while (!success && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime,TimeUnit.NANOSECONDS) < maxTimeoutMillis) {
    Thread.sleep(100);
    for (    RestTestHarness client : restTestHarnesses) {
      request="/schema/fields?wt=xml";
      response=client.query(request);
      result=BaseTestHarness.validateXPath(response,expectedAddFields);
      if (result != null) {
        break;
      }
      request="/schema/dynamicfields?wt=xml";
      response=client.query(request);
      result=BaseTestHarness.validateXPath(response,expectedAddDynamicFields);
      if (result != null) {
        break;
      }
      request="/schema/copyfields?wt=xml";
      response=client.query(request);
      result=BaseTestHarness.validateXPath(response,expectedCopyFields);
      if (result != null) {
        break;
      }
    }
    success=(result == null);
  }
  if (!success) {
    String msg="QUERY FAILED: xpath=" + result + "  request="+ request+ "  response="+ response;
    log.error(msg);
    fail(msg);
  }
}
