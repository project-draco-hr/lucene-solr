{
  int numFields=5;
  Info info=new Info("Thread");
  for (int i=0; i <= numFields; ++i) {
    RestTestHarness publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PostFieldThread postFieldThread=new PostFieldThread(publisher,info);
    postFieldThread.start();
    publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PutFieldThread putFieldThread=new PutFieldThread(publisher,info);
    putFieldThread.start();
    publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PostDynamicFieldThread postDynamicFieldThread=new PostDynamicFieldThread(publisher,info);
    postDynamicFieldThread.start();
    publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PutDynamicFieldThread putDynamicFieldThread=new PutDynamicFieldThread(publisher,info);
    putDynamicFieldThread.start();
    publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PostFieldTypeThread postFieldTypeThread=new PostFieldTypeThread(publisher,info);
    postFieldTypeThread.start();
    publisher=restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
    PutFieldTypeThread putFieldTypeThread=new PutFieldTypeThread(publisher,info);
    putFieldTypeThread.start();
    postFieldThread.join();
    putFieldThread.join();
    postDynamicFieldThread.join();
    putDynamicFieldThread.join();
    postFieldTypeThread.join();
    putFieldTypeThread.join();
    String[] expectedAddFields=getExpectedFieldResponses(info);
    String[] expectedAddFieldTypes=getExpectedFieldTypeResponses(info);
    String[] expectedAddDynamicFields=getExpectedDynamicFieldResponses(info);
    boolean success=false;
    long maxTimeoutMillis=100000;
    long startTime=System.nanoTime();
    String request=null;
    String response=null;
    String result=null;
    while (!success && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime,TimeUnit.NANOSECONDS) < maxTimeoutMillis) {
      Thread.sleep(10);
      for (      RestTestHarness client : restTestHarnesses) {
        request="/schema/fields?wt=xml";
        response=client.query(request);
        result=BaseTestHarness.validateXPath(response,expectedAddFields);
        if (result != null) {
          break;
        }
        request="/schema/dynamicfields?wt=xml";
        response=client.query(request);
        result=BaseTestHarness.validateXPath(response,expectedAddDynamicFields);
        if (result != null) {
          break;
        }
        request="/schema/fieldtypes?wt=xml";
        response=client.query(request);
        result=BaseTestHarness.validateXPath(response,expectedAddFieldTypes);
        if (result != null) {
          break;
        }
      }
      success=(result == null);
    }
    if (!success) {
      String msg="QUERY FAILED: xpath=" + result + "  request="+ request+ "  response="+ response;
      log.error(msg);
      fail(msg);
    }
  }
}
