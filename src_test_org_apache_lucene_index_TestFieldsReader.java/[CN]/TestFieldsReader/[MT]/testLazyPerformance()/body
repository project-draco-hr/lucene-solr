{
  String tmpIODir=System.getProperty("java.io.tmpdir");
  String path=tmpIODir + File.separator + "lazyDir";
  File file=new File(path);
  FSDirectory tmpDir=FSDirectory.getDirectory(file,true);
  assertTrue(tmpDir != null);
  DocumentWriter writer=new DocumentWriter(tmpDir,new WhitespaceAnalyzer(),Similarity.getDefault(),50);
  assertTrue(writer != null);
  writer.addDocument("test",testDoc);
  assertTrue(fieldInfos != null);
  FieldsReader reader;
  long lazyTime=0;
  long regularTime=0;
  int length=50;
  Set lazyFieldNames=new HashSet();
  lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);
  SetBasedFieldSelector fieldSelector=new SetBasedFieldSelector(Collections.EMPTY_SET,lazyFieldNames);
  for (int i=0; i < length; i++) {
    reader=new FieldsReader(tmpDir,"test",fieldInfos);
    assertTrue(reader != null);
    assertTrue(reader.size() == 1);
    Document doc;
    doc=reader.doc(0,null);
    assertTrue("doc is null and it shouldn't be",doc != null);
    Fieldable field=doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
    assertTrue("field is lazy",field.isLazy() == false);
    String value;
    long start;
    long finish;
    start=System.currentTimeMillis();
    value=field.stringValue();
    finish=System.currentTimeMillis();
    assertTrue("value is null and it shouldn't be",value != null);
    assertTrue("field is null and it shouldn't be",field != null);
    regularTime+=(finish - start);
    reader.close();
    reader=null;
    doc=null;
    System.gc();
    reader=new FieldsReader(tmpDir,"test",fieldInfos);
    doc=reader.doc(0,fieldSelector);
    field=doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);
    assertTrue("field is not lazy",field.isLazy() == true);
    start=System.currentTimeMillis();
    value=field.stringValue();
    finish=System.currentTimeMillis();
    assertTrue("value is null and it shouldn't be",value != null);
    lazyTime+=(finish - start);
    reader.close();
  }
  System.out.println("Average Non-lazy time (should be very close to zero): " + regularTime / length + " ms for " + length + " reads");
  System.out.println("Average Lazy Time (should be greater than zero): " + lazyTime / length + " ms for " + length + " reads");
}
