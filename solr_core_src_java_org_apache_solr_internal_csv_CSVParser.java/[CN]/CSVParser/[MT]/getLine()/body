{
  String[] ret=EMPTY_STRING_ARRAY;
  record.clear();
  while (true) {
    reusableToken.reset();
    nextToken(reusableToken);
switch (reusableToken.type) {
case TT_TOKEN:
      record.add(reusableToken.content.toString());
    break;
case TT_EORECORD:
  record.add(reusableToken.content.toString());
break;
case TT_EOF:
if (reusableToken.isReady) {
record.add(reusableToken.content.toString());
}
 else {
ret=null;
}
break;
case TT_INVALID:
default :
throw new IOException("(line " + getLineNumber() + ") invalid parse sequence");
}
if (reusableToken.type != TT_TOKEN) {
break;
}
}
if (!record.isEmpty()) {
ret=(String[])record.toArray(new String[record.size()]);
}
return ret;
}
