{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  int termCount=0;
  for (int i=0; i < 50; i++) {
    long lower=(long)(rnd.nextDouble() * noDocs * distance) + startOffset;
    long upper=(long)(rnd.nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      long a=lower;
      lower=upper;
      upper=a;
    }
    LongTrieRangeFilter tf=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,true);
    RangeQuery cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),true,true);
    cq.setConstantScoreRewrite(true);
    TopDocs tTopDocs=searcher.search(tf.asQuery(),1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,false);
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),false,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,true);
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),false,true);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,false);
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),true,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
  }
  System.out.println("Average number of terms during random search on '" + field + "': "+ (((double)termCount) / (50 * 4)));
}
