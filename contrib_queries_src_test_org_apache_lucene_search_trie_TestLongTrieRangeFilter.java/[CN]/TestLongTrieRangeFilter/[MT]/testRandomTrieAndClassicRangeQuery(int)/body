{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  for (int i=0; i < 50; i++) {
    long lower=(long)(rnd.nextDouble() * noDocs * distance) + startOffset;
    long upper=(long)(rnd.nextDouble() * noDocs * distance) + startOffset;
    Query tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,true).asQuery();
    RangeQuery cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),true,true);
    cq.setConstantScoreRewrite(true);
    TopDocs tTopDocs=searcher.search(tq,1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,false).asQuery();
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),false,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,true).asQuery();
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),false,true);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,false).asQuery();
    cq=new RangeQuery(field,TrieUtils.longToPrefixCoded(lower),TrieUtils.longToPrefixCoded(upper),true,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for LongTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
  }
}
