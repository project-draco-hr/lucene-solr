{
  final Random rnd=newRandom();
  String field="ascfield" + precisionStep;
  for (int i=0; i < 50; i++) {
    long lower=(long)(rnd.nextDouble() * noDocs - noDocs / 2);
    long upper=(long)(rnd.nextDouble() * noDocs - noDocs / 2);
    if (lower > upper) {
      long a=lower;
      lower=upper;
      upper=a;
    }
    Query tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,true).asQuery();
    TopDocs tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to inclusive range length",upper - lower + 1,tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,false).asQuery();
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to exclusive range length",Math.max(upper - lower - 1,0),tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),false,true).asQuery();
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to half exclusive range length",upper - lower,tTopDocs.totalHits);
    tq=new LongTrieRangeFilter(field,precisionStep,new Long(lower),new Long(upper),true,false).asQuery();
    tTopDocs=searcher.search(tq,1);
    assertEquals("Returned count of range query must be equal to half exclusive range length",upper - lower,tTopDocs.totalHits);
  }
}
