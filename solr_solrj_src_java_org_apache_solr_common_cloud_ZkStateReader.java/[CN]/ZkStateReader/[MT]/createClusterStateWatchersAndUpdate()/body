{
  LOG.info("Updating cluster state from ZooKeeper... ");
  if (!zkClient.exists(CLUSTER_STATE,true)) {
    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Cannot connect to cluster at " + zkClient.getZkServerAddress() + ": cluster not found/not ready");
  }
  refreshLegacyClusterState(new LegacyClusterStateWatcher());
  refreshStateFormat2Collections();
  refreshCollectionList(new CollectionsChildWatcher());
  refreshLiveNodes(new LiveNodeWatcher());
synchronized (ZkStateReader.this.getUpdateLock()) {
    constructState();
    zkClient.exists(ALIASES,new Watcher(){
      @Override public void process(      WatchedEvent event){
        if (EventType.None.equals(event.getType())) {
          return;
        }
        try {
synchronized (ZkStateReader.this.getUpdateLock()) {
            LOG.info("Updating aliases... ");
            final Watcher thisWatch=this;
            final Stat stat=new Stat();
            final byte[] data=zkClient.getData(ALIASES,thisWatch,stat,true);
            ZkStateReader.this.aliases=ClusterState.load(data);
          }
        }
 catch (        KeeperException.ConnectionLossException|KeeperException.SessionExpiredException e) {
          LOG.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]",e.getMessage());
        }
catch (        KeeperException e) {
          LOG.error("A ZK error has occurred",e);
          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"A ZK error has occurred",e);
        }
catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          LOG.warn("Interrupted",e);
        }
      }
    }
,true);
  }
  updateAliases();
  if (securityNodeListener != null) {
    addSecuritynodeWatcher(new Callable<Pair<byte[],Stat>>(){
      @Override public void call(      Pair<byte[],Stat> pair){
        ConfigData cd=new ConfigData();
        cd.data=pair.getKey() == null || pair.getKey().length == 0 ? EMPTY_MAP : Utils.getDeepCopy((Map)fromJSON(pair.getKey()),4,false);
        cd.version=pair.getValue() == null ? -1 : pair.getValue().getVersion();
        securityData=cd;
        securityNodeListener.run();
      }
    }
);
    securityData=getSecurityProps(true);
  }
}
