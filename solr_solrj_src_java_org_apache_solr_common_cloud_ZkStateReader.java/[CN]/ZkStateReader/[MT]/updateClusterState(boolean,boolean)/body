{
  if (immediate) {
    ClusterState clusterState;
synchronized (getUpdateLock()) {
      List<String> liveNodes=zkClient.getChildren(LIVE_NODES_ZKNODE,null,true);
      Set<String> liveNodesSet=new HashSet<>();
      liveNodesSet.addAll(liveNodes);
      if (!onlyLiveNodes) {
        log.info("Updating cloud state from ZooKeeper... ");
        clusterState=ClusterState.load(zkClient,liveNodesSet,this);
      }
 else {
        log.info("Updating live nodes from ZooKeeper... ({})",liveNodesSet.size());
        clusterState=this.clusterState;
        clusterState.setLiveNodes(liveNodesSet);
      }
      this.clusterState=clusterState;
    }
  }
 else {
    if (clusterStateUpdateScheduled) {
      log.info("Cloud state update for ZooKeeper already scheduled");
      return;
    }
    log.info("Scheduling cloud state update from ZooKeeper...");
    clusterStateUpdateScheduled=true;
    updateCloudExecutor.schedule(new Runnable(){
      @Override public void run(){
        log.info("Updating cluster state from ZooKeeper...");
synchronized (getUpdateLock()) {
          clusterStateUpdateScheduled=false;
          ClusterState clusterState;
          try {
            List<String> liveNodes=zkClient.getChildren(LIVE_NODES_ZKNODE,null,true);
            Set<String> liveNodesSet=new HashSet<>();
            liveNodesSet.addAll(liveNodes);
            if (!onlyLiveNodes) {
              log.info("Updating cloud state from ZooKeeper... ");
              clusterState=ClusterState.load(zkClient,liveNodesSet,ZkStateReader.this);
            }
 else {
              log.info("Updating live nodes from ZooKeeper... ");
              clusterState=ZkStateReader.this.clusterState;
              clusterState.setLiveNodes(liveNodesSet);
            }
            ZkStateReader.this.clusterState=clusterState;
          }
 catch (          KeeperException e) {
            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {
              log.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK");
              return;
            }
            log.error("",e);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
          }
catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error("",e);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
          }
          ZkStateReader.this.clusterState=clusterState;
        }
      }
    }
,SOLRCLOUD_UPDATE_DELAY,TimeUnit.MILLISECONDS);
  }
}
