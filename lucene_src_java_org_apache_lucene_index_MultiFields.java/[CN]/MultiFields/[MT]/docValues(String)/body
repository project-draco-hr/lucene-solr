{
  final DocValues result;
  if (!docValues.containsKey(field)) {
    final List<MultiDocValues.DocValuesIndex> docValuesIndex=new ArrayList<MultiDocValues.DocValuesIndex>();
    int docsUpto=0;
    Values type=null;
    for (int i=0; i < subs.length; i++) {
      DocValues values=subs[i].docValues(field);
      final int start=subSlices[i].start;
      final int length=subSlices[i].length;
      if (values != null) {
        if (docsUpto != start) {
          type=values.type();
          docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start,type),docsUpto,start - docsUpto));
        }
        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values,start,length));
        docsUpto=start + length;
      }
 else       if (i + 1 == subs.length && !docValuesIndex.isEmpty()) {
        docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start,type),docsUpto,start - docsUpto));
      }
    }
    result=docValuesIndex.isEmpty() ? null : new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));
    docValues.put(field,result);
  }
 else {
    result=docValues.get(field);
  }
  return result;
}
