{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  int termCountT=0, termCountC=0;
  for (int i=0; i < 50; i++) {
    int lower=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    int upper=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      int a=lower;
      lower=upper;
      upper=a;
    }
    NumericRangeQuery tq=NumericRangeQuery.newIntRange(field,precisionStep,new Integer(lower),new Integer(upper),true,true);
    TermRangeQuery cq=new TermRangeQuery(field,NumericUtils.intToPrefixCoded(lower),NumericUtils.intToPrefixCoded(upper),true,true);
    cq.setConstantScoreRewrite(true);
    TopDocs tTopDocs=searcher.search(tq,1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,new Integer(lower),new Integer(upper),false,false);
    cq=new TermRangeQuery(field,NumericUtils.intToPrefixCoded(lower),NumericUtils.intToPrefixCoded(upper),false,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,new Integer(lower),new Integer(upper),false,true);
    cq=new TermRangeQuery(field,NumericUtils.intToPrefixCoded(lower),NumericUtils.intToPrefixCoded(upper),false,true);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
    tq=NumericRangeQuery.newIntRange(field,precisionStep,new Integer(lower),new Integer(upper),true,false);
    cq=new TermRangeQuery(field,NumericUtils.intToPrefixCoded(lower),NumericUtils.intToPrefixCoded(upper),true,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCountT+=tq.getTotalNumberOfTerms();
    termCountC+=cq.getTotalNumberOfTerms();
  }
  if (precisionStep == Integer.MAX_VALUE) {
    assertEquals("Total number of terms should be equal for unlimited precStep",termCountT,termCountC);
  }
 else {
    System.out.println("Average number of terms during random search on '" + field + "':");
    System.out.println(" Trie query: " + (((double)termCountT) / (50 * 4)));
    System.out.println(" Classical query: " + (((double)termCountC) / (50 * 4)));
  }
}
