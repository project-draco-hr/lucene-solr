{
  SchemaField sf=searcher.getSchema().getField(fieldName);
  FieldCache.DocTermsIndex si;
  try {
    si=FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()),fieldName);
  }
 catch (  IOException e) {
    throw new RuntimeException("failed to open field cache for: " + fieldName,e);
  }
  StatsValues allstats=StatsValuesFactory.createStatsValues(sf);
  final int nTerms=si.numOrd();
  if (nTerms <= 0 || docs.size() <= 0)   return allstats.getStatsValues();
  List<FieldFacetStats> facetStats=new ArrayList<FieldFacetStats>();
  FieldCache.DocTermsIndex facetTermsIndex;
  for (  String facetField : facet) {
    SchemaField fsf=searcher.getSchema().getField(facetField);
    FieldType facetFieldType=fsf.getType();
    if (facetFieldType.isTokenized() || facetFieldType.isMultiValued()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Stats can only facet on single-valued fields, not: " + facetField + "["+ facetFieldType+ "]");
    }
    try {
      facetTermsIndex=FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(searcher.getIndexReader()),facetField);
    }
 catch (    IOException e) {
      throw new RuntimeException("failed to open field cache for: " + facetField,e);
    }
    facetStats.add(new FieldFacetStats(facetField,facetTermsIndex,sf,fsf,nTerms));
  }
  final BytesRef tempBR=new BytesRef();
  DocIterator iter=docs.iterator();
  while (iter.hasNext()) {
    int docID=iter.nextDoc();
    BytesRef raw=si.lookup(si.getOrd(docID),tempBR);
    if (raw.length > 0) {
      allstats.accumulate(raw);
    }
 else {
      allstats.missing();
    }
    for (    FieldFacetStats f : facetStats) {
      f.facet(docID,raw);
    }
  }
  for (  FieldFacetStats f : facetStats) {
    allstats.addFacet(f.name,f.facetStatsValues);
  }
  return allstats.getStatsValues();
}
