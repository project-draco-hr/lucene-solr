{
  MergePolicy policy;
  String mpClassName=mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;
  try {
    policy=(MergePolicy)schema.getResourceLoader().newInstance(mpClassName,null,new Class[]{IndexWriter.class},new Object[]{this});
  }
 catch (  Exception e) {
    policy=(MergePolicy)schema.getResourceLoader().newInstance(mpClassName);
  }
  if (mergePolicyInfo != null)   SolrPluginUtils.invokeSetters(policy,mergePolicyInfo.initArgs);
  if (policy instanceof LogMergePolicy) {
    LogMergePolicy logMergePolicy=(LogMergePolicy)policy;
    if (maxMergeDocs != -1)     logMergePolicy.setMaxMergeDocs(maxMergeDocs);
    logMergePolicy.setUseCompoundFile(useCompoundFile);
    if (mergeFactor != -1)     logMergePolicy.setMergeFactor(mergeFactor);
  }
 else {
    log.warn("Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.");
  }
  return policy;
}
