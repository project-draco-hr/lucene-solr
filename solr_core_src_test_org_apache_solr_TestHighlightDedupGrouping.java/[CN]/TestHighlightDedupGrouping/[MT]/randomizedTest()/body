{
  del("*:*");
  commit();
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  handle.put("grouped",UNORDERED);
  int numDocs=_TestUtil.nextInt(random(),100,1000);
  int numGroups=_TestUtil.nextInt(random(),1,numDocs / 50);
  int[] docsInGroup=new int[numGroups + 1];
  int percentDuplicates=_TestUtil.nextInt(random(),1,25);
  for (int docid=0; docid < numDocs; ++docid) {
    int group=_TestUtil.nextInt(random(),1,numGroups);
    ++docsInGroup[group];
    boolean makeDuplicate=0 == _TestUtil.nextInt(random(),0,numDocs / percentDuplicates);
    if (makeDuplicate) {
      for (int shard=0; shard < shardCount; ++shard) {
        addDoc(docid,group,shard);
      }
    }
 else {
      int shard=_TestUtil.nextInt(random(),0,shardCount - 1);
      addDoc(docid,group,shard);
    }
  }
  for (int shard=0; shard < shardCount; ++shard) {
    clients.get(shard).commit();
  }
  for (int group=1; group <= numGroups; ++group) {
    QueryResponse rsp=queryServer(params("q",group_ti1 + ":" + group+ " AND "+ id_s1+ ":[* TO *]","start","0","rows","" + numDocs,"fl",id_s1 + "," + shard_i1,"sort",id_s1 + " asc","shards",shards,"group","true","group.field",id_s1,"group.limit","" + numDocs,"hl","true","hl.fl","*","hl.requireFieldMatch","true"));
    assertEquals(docsInGroup[group],rsp.getHighlighting().values().size());
  }
}
