{
  super(searcher,docs,request);
  this.analyticsRequest=request;
  this.queryRequest=queryRequest;
  basicsAndFieldFacetsComputed=false;
  List<FieldFacetRequest> fieldFreqs=request.getFieldFacets();
  List<RangeFacetRequest> rangeFreqs=request.getRangeFacets();
  List<QueryFacetRequest> queryFreqs=request.getQueryFacets();
  this.fieldFacetExpressions=new TreeMap<>();
  this.rangeFacetExpressions=new LinkedHashMap<>(rangeFreqs.size());
  this.queryFacetExpressions=new LinkedHashMap<>(queryFreqs.size());
  this.fieldFacetCollectors=new LinkedHashMap<>(fieldFreqs.size());
  this.rangeFacetCollectors=new LinkedHashMap<>(rangeFreqs.size());
  this.queryFacetCollectors=new LinkedHashMap<>(queryFreqs.size());
  this.facetAccumulators=new ArrayList<>();
  this.hiddenFieldFacets=new HashSet<>();
  for (  FieldFacetRequest freq : fieldFreqs) {
    final FieldFacetRequest fr=(FieldFacetRequest)freq;
    if (fr.isHidden()) {
      hiddenFieldFacets.add(fr.getName());
    }
    final SchemaField ff=fr.getField();
    final FieldFacetAccumulator facc=FieldFacetAccumulator.create(searcher,this,ff);
    facetAccumulators.add(facc);
    fieldFacetExpressions.put(freq.getName(),new TreeMap<String,Expression[]>());
    fieldFacetCollectors.put(freq.getName(),new TreeMap<String,StatsCollector[]>());
  }
  for (  RangeFacetRequest freq : rangeFreqs) {
    if (rangeFacets == null)     rangeFacets=new ArrayList<>();
    rangeFacets.add(freq);
    rangeFacetExpressions.put(freq.getName(),new LinkedHashMap<String,Expression[]>());
    rangeFacetCollectors.put(freq.getName(),new LinkedHashMap<String,StatsCollector[]>());
  }
  for (  QueryFacetRequest freq : queryFreqs) {
    if (queryFacets == null)     queryFacets=new ArrayList<>();
    queryFacets.add(freq);
    queryFacetExpressions.put(freq.getName(),new LinkedHashMap<String,Expression[]>());
    queryFacetCollectors.put(freq.getName(),new LinkedHashMap<String,StatsCollector[]>());
  }
  this.queryCount=0l;
}
