{
  if (returnTimings) {
    times[0]=System.currentTimeMillis();
  }
  int sampleSize=sample.length;
  IntPriorityQueue pq=new IntPriorityQueue(sampleSize);
  ScoredDocIDsIterator it=collection.iterator();
  MI mi=null;
  while (it.next()) {
    if (mi == null) {
      mi=new MI();
    }
    mi.value=(int)(it.getDocID() * PHI_32) & 0x7FFFFFFF;
    mi=pq.insertWithOverflow(mi);
  }
  if (returnTimings) {
    times[1]=System.currentTimeMillis();
  }
  Object[] heap=pq.getHeap();
  for (int si=0; si < sampleSize; si++) {
    sample[si]=(int)(((MI)heap[si + 1]).value * PHI_32I) & 0x7FFFFFFF;
  }
  if (returnTimings) {
    times[2]=System.currentTimeMillis();
  }
}
