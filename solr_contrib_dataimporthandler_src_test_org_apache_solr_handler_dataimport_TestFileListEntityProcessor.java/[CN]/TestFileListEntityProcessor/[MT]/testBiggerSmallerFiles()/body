{
  File tmpdir=File.createTempFile("test","tmp",dataDir);
  tmpdir.delete();
  tmpdir.mkdir();
  tmpdir.deleteOnExit();
  long minLength=Long.MAX_VALUE;
  String smallestFile="";
  byte[] content="abcdefgij".getBytes(StandardCharsets.UTF_8);
  createFile(tmpdir,"a.xml",content,false);
  if (minLength > content.length) {
    minLength=content.length;
    smallestFile="a.xml";
  }
  content="abcdefgij".getBytes(StandardCharsets.UTF_8);
  createFile(tmpdir,"b.xml",content,false);
  if (minLength > content.length) {
    minLength=content.length;
    smallestFile="b.xml";
  }
  content="abc".getBytes(StandardCharsets.UTF_8);
  createFile(tmpdir,"c.props",content,false);
  if (minLength > content.length) {
    minLength=content.length;
    smallestFile="c.props";
  }
  Map attrs=createMap(FileListEntityProcessor.FILE_NAME,".*",FileListEntityProcessor.BASE_DIR,tmpdir.getAbsolutePath(),FileListEntityProcessor.BIGGER_THAN,String.valueOf(minLength));
  List<String> fList=getFiles(null,attrs);
  assertEquals(2,fList.size());
  Set<String> l=new HashSet<>();
  l.add(new File(tmpdir,"a.xml").getAbsolutePath());
  l.add(new File(tmpdir,"b.xml").getAbsolutePath());
  assertEquals(l,new HashSet<>(fList));
  attrs=createMap(FileListEntityProcessor.FILE_NAME,".*",FileListEntityProcessor.BASE_DIR,tmpdir.getAbsolutePath(),FileListEntityProcessor.SMALLER_THAN,String.valueOf(minLength + 1));
  fList=getFiles(null,attrs);
  l.clear();
  l.add(new File(tmpdir,smallestFile).getAbsolutePath());
  assertEquals(l,new HashSet<>(fList));
  attrs=createMap(FileListEntityProcessor.FILE_NAME,".*",FileListEntityProcessor.BASE_DIR,tmpdir.getAbsolutePath(),FileListEntityProcessor.SMALLER_THAN,"${a.x}");
  VariableResolver resolver=new VariableResolver();
  resolver.addNamespace("a",createMap("x","4"));
  fList=getFiles(resolver,attrs);
  assertEquals(l,new HashSet<>(fList));
}
