{
  List<Class<?>> analysisClasses=new ArrayList<Class<?>>();
  getClassesForPackage("org.apache.lucene.analysis",analysisClasses);
  tokenizers=new ArrayList<Constructor<? extends Tokenizer>>();
  tokenfilters=new ArrayList<Constructor<? extends TokenFilter>>();
  charfilters=new ArrayList<Constructor<? extends CharStream>>();
  for (  final Class<?> c : analysisClasses) {
    final int modifiers=c.getModifiers();
    if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers) || c.isSynthetic()|| c.isAnonymousClass()|| c.isMemberClass()|| c.isInterface()|| brokenComponents.contains(c)|| c.isAnnotationPresent(Deprecated.class)|| !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharStream.class.isAssignableFrom(c))) {
      continue;
    }
    for (    final Constructor<?> ctor : c.getConstructors()) {
      if (ctor.isSynthetic() || ctor.isAnnotationPresent(Deprecated.class)) {
        continue;
      }
      if (Tokenizer.class.isAssignableFrom(c)) {
        assertTrue(ctor.toGenericString() + " has unsupported parameter types",allowedTokenizerArgs.containsAll(Arrays.asList(ctor.getParameterTypes())));
        tokenizers.add(castConstructor(Tokenizer.class,ctor));
      }
 else       if (TokenFilter.class.isAssignableFrom(c)) {
        assertTrue(ctor.toGenericString() + " has unsupported parameter types",allowedTokenFilterArgs.containsAll(Arrays.asList(ctor.getParameterTypes())));
        tokenfilters.add(castConstructor(TokenFilter.class,ctor));
      }
 else       if (CharStream.class.isAssignableFrom(c)) {
        assertTrue(ctor.toGenericString() + " has unsupported parameter types",allowedCharFilterArgs.containsAll(Arrays.asList(ctor.getParameterTypes())));
        charfilters.add(castConstructor(CharStream.class,ctor));
      }
 else {
        fail("Cannot get here");
      }
    }
  }
  final Comparator<Constructor<?>> ctorComp=new Comparator<Constructor<?>>(){
    @Override public int compare(    Constructor<?> arg0,    Constructor<?> arg1){
      return arg0.toGenericString().compareTo(arg1.toGenericString());
    }
  }
;
  Collections.sort(tokenizers,ctorComp);
  Collections.sort(tokenfilters,ctorComp);
  Collections.sort(charfilters,ctorComp);
  if (VERBOSE) {
    System.out.println("tokenizers = " + tokenizers);
    System.out.println("tokenfilters = " + tokenfilters);
    System.out.println("charfilters = " + charfilters);
  }
}
