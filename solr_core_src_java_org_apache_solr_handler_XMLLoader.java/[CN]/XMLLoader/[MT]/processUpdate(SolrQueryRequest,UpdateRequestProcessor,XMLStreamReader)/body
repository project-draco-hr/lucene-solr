{
  AddUpdateCommand addCmd=null;
  SolrParams params=req.getParams();
  while (true) {
    int event=parser.next();
switch (event) {
case XMLStreamConstants.END_DOCUMENT:
      parser.close();
    return;
case XMLStreamConstants.START_ELEMENT:
  String currTag=parser.getLocalName();
if (currTag.equals(XmlUpdateRequestHandler.ADD)) {
  XmlUpdateRequestHandler.log.trace("SolrCore.update(add)");
  addCmd=new AddUpdateCommand(req);
  addCmd.commitWithin=params.getInt(UpdateParams.COMMIT_WITHIN,-1);
  addCmd.overwrite=params.getBool(UpdateParams.OVERWRITE,true);
  for (int i=0; i < parser.getAttributeCount(); i++) {
    String attrName=parser.getAttributeLocalName(i);
    String attrVal=parser.getAttributeValue(i);
    if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {
      addCmd.overwrite=StrUtils.parseBoolean(attrVal);
    }
 else     if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {
      addCmd.commitWithin=Integer.parseInt(attrVal);
    }
 else {
      XmlUpdateRequestHandler.log.warn("Unknown attribute id in add:" + attrName);
    }
  }
}
 else if ("doc".equals(currTag)) {
  if (addCmd != null) {
    XmlUpdateRequestHandler.log.trace("adding doc...");
    addCmd.clear();
    addCmd.solrDoc=readDoc(parser);
    processor.processAdd(addCmd);
  }
 else {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unexpected <doc> tag without an <add> tag surrounding it.");
  }
}
 else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {
  XmlUpdateRequestHandler.log.trace("parsing " + currTag);
  CommitUpdateCommand cmd=new CommitUpdateCommand(req,XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));
  ModifiableSolrParams mp=new ModifiableSolrParams();
  for (int i=0; i < parser.getAttributeCount(); i++) {
    String attrName=parser.getAttributeLocalName(i);
    String attrVal=parser.getAttributeValue(i);
    mp.set(attrName,attrVal);
  }
  RequestHandlerUtils.validateCommitParams(mp);
  SolrParams p=SolrParams.wrapDefaults(mp,req.getParams());
  RequestHandlerUtils.updateCommit(cmd,p);
  processor.processCommit(cmd);
}
 else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {
  XmlUpdateRequestHandler.log.trace("parsing " + currTag);
  RollbackUpdateCommand cmd=new RollbackUpdateCommand(req);
  processor.processRollback(cmd);
}
 else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {
  XmlUpdateRequestHandler.log.trace("parsing delete");
  processDelete(req,processor,parser);
}
break;
}
}
}
