{
  final IndexReader reader=searcher.getIndexReader();
  final ScoreDoc scoreDocs[]=topDocs.scoreDocs;
  query=rewrite(query);
  SortedSet<Term> terms=new TreeSet<Term>();
  query.extractTerms(terms);
  terms=terms.subSet(floor,ceiling);
  Term termTexts[]=terms.toArray(new Term[terms.size()]);
  int docids[]=new int[scoreDocs.length];
  for (int i=0; i < docids.length; i++) {
    docids[i]=scoreDocs[i].doc;
  }
  IndexReaderContext readerContext=reader.getContext();
  List<AtomicReaderContext> leaves=readerContext.leaves();
  Arrays.sort(docids);
  LimitedStoredFieldVisitor visitor=new LimitedStoredFieldVisitor(field,maxLength);
  String contents[]=new String[docids.length];
  for (int i=0; i < contents.length; i++) {
    reader.document(docids[i],visitor);
    contents[i]=visitor.getValue();
    visitor.reset();
  }
  BreakIterator bi=(BreakIterator)breakIterator.clone();
  Map<Integer,String> highlights=new HashMap<Integer,String>();
  DocsAndPositionsEnum postings[]=null;
  TermsEnum termsEnum=null;
  int lastLeaf=-1;
  for (int i=0; i < docids.length; i++) {
    String content=contents[i];
    if (content.length() == 0) {
      continue;
    }
    bi.setText(content);
    int doc=docids[i];
    int leaf=ReaderUtil.subIndex(doc,leaves);
    AtomicReaderContext subContext=leaves.get(leaf);
    AtomicReader r=subContext.reader();
    Terms t=r.terms(field);
    if (t == null) {
      continue;
    }
    if (leaf != lastLeaf) {
      termsEnum=t.iterator(null);
      postings=new DocsAndPositionsEnum[terms.size()];
    }
    Passage passages[]=highlightDoc(termTexts,content.length(),bi,doc - subContext.docBase,termsEnum,postings,maxPassages);
    if (passages.length > 0) {
      highlights.put(doc,formatter.format(passages,content));
    }
    lastLeaf=leaf;
  }
  String[] result=new String[scoreDocs.length];
  for (int i=0; i < scoreDocs.length; i++) {
    result[i]=highlights.get(scoreDocs[i].doc);
  }
  return result;
}
