{
  super(in);
  this.storeOffsets=storeOffsets;
  if (reuse != null) {
    docs=reuse.docs;
    offsets=reuse.offsets;
    payload=reuse.payload;
    file=reuse.file;
  }
 else {
    docs=new int[32];
    offsets=new long[32];
    payload=new BytesRef(32);
    file=new RAMFile();
  }
  final IndexOutput out=new RAMOutputStream(file);
  int doc;
  int i=0;
  while ((doc=in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
    if (i == docs.length) {
      final int newLength=ArrayUtil.oversize(i + 1,4);
      docs=Arrays.copyOf(docs,newLength);
      offsets=Arrays.copyOf(offsets,newLength);
    }
    docs[i]=docMap.oldToNew(doc);
    offsets[i]=out.getFilePointer();
    addPositions(in,out);
    i++;
  }
  upto=i;
  new DocOffsetSorterTemplate(docs,offsets).timSort(0,upto - 1);
  out.close();
  this.postingInput=new RAMInputStream("",file);
}
