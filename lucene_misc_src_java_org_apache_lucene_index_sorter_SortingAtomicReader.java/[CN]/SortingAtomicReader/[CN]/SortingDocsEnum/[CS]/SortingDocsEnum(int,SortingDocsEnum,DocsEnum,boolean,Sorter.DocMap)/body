{
  super(in);
  this.maxDoc=maxDoc;
  this.withFreqs=withFreqs;
  if (reuse != null) {
    if (reuse.maxDoc == maxDoc) {
      sorter=reuse.sorter;
    }
 else {
      sorter=new DocFreqSorter(maxDoc);
    }
    docs=reuse.docs;
    freqs=reuse.freqs;
  }
 else {
    docs=new int[64];
    sorter=new DocFreqSorter(maxDoc);
  }
  docIt=-1;
  int i=0;
  int doc;
  if (withFreqs) {
    if (freqs == null || freqs.length < docs.length) {
      freqs=new int[docs.length];
    }
    while ((doc=in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      if (i >= docs.length) {
        docs=ArrayUtil.grow(docs,docs.length + 1);
        freqs=ArrayUtil.grow(freqs,freqs.length + 1);
      }
      docs[i]=docMap.oldToNew(doc);
      freqs[i]=in.freq();
      ++i;
    }
  }
 else {
    freqs=null;
    while ((doc=in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      if (i >= docs.length) {
        docs=ArrayUtil.grow(docs,docs.length + 1);
      }
      docs[i++]=docMap.oldToNew(doc);
    }
  }
  sorter.reset(docs,freqs);
  sorter.sort(0,i);
  upto=i;
}
