{
  final BinaryDocValues binary=getBinary(field);
  return new SortedNumericDocValues(){
    @Override public int nextDoc() throws IOException {
      int doc=binary.nextDoc();
      setCurrentDoc();
      return doc;
    }
    @Override public int docID(){
      return binary.docID();
    }
    @Override public long cost(){
      return binary.cost();
    }
    @Override public int advance(    int target) throws IOException {
      int doc=binary.advance(target);
      setCurrentDoc();
      return doc;
    }
    @Override public boolean advanceExact(    int target) throws IOException {
      if (binary.advanceExact(target)) {
        setCurrentDoc();
        return true;
      }
      return false;
    }
    long values[];
    int index;
    private void setCurrentDoc() throws IOException {
      if (docID() == NO_MORE_DOCS) {
        return;
      }
      String csv=binary.binaryValue().utf8ToString();
      if (csv.length() == 0) {
        values=new long[0];
      }
 else {
        String s[]=csv.split(",");
        values=new long[s.length];
        for (int i=0; i < values.length; i++) {
          values[i]=Long.parseLong(s[i]);
        }
      }
      index=0;
    }
    @Override public long nextValue() throws IOException {
      return values[index++];
    }
    @Override public int docValueCount(){
      return values.length;
    }
  }
;
}
