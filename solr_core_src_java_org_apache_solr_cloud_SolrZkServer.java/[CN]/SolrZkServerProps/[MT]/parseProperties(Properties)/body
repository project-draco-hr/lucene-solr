{
  for (  Entry<Object,Object> entry : zkProp.entrySet()) {
    String key=entry.getKey().toString().trim();
    String value=entry.getValue().toString().trim();
    if (key.equals("dataDir")) {
      dataDir=value;
    }
 else     if (key.equals("dataLogDir")) {
      dataLogDir=value;
    }
 else     if (key.equals("clientPort")) {
      setClientPort(Integer.parseInt(value));
    }
 else     if (key.equals("tickTime")) {
      tickTime=Integer.parseInt(value);
    }
 else     if (key.equals("initLimit")) {
      initLimit=Integer.parseInt(value);
    }
 else     if (key.equals("syncLimit")) {
      syncLimit=Integer.parseInt(value);
    }
 else     if (key.equals("electionAlg")) {
      electionAlg=Integer.parseInt(value);
    }
 else     if (key.equals("maxClientCnxns")) {
      maxClientCnxns=Integer.parseInt(value);
    }
 else     if (key.startsWith("server.")) {
      int dot=key.indexOf('.');
      long sid=Long.parseLong(key.substring(dot + 1));
      String parts[]=value.split(":");
      if ((parts.length != 2) && (parts.length != 3)) {
        LOG.error(value + " does not have the form host:port or host:port:port");
      }
      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));
      if (parts.length == 2) {
        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr));
      }
 else       if (parts.length == 3) {
        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));
        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr,electionAddr));
      }
    }
 else     if (key.startsWith("group")) {
      int dot=key.indexOf('.');
      long gid=Long.parseLong(key.substring(dot + 1));
      numGroups++;
      String parts[]=value.split(":");
      for (      String s : parts) {
        long sid=Long.parseLong(s);
        if (serverGroup.containsKey(sid))         throw new ConfigException("Server " + sid + "is in multiple groups");
 else         serverGroup.put(sid,gid);
      }
    }
 else     if (key.startsWith("weight")) {
      int dot=key.indexOf('.');
      long sid=Long.parseLong(key.substring(dot + 1));
      serverWeight.put(sid,Long.parseLong(value));
    }
 else {
      System.setProperty("zookeeper." + key,value);
    }
  }
  if (dataDir == null) {
    throw new IllegalArgumentException("dataDir is not set");
  }
  if (dataLogDir == null) {
    dataLogDir=dataDir;
  }
 else {
    if (!new File(dataLogDir).isDirectory()) {
      throw new IllegalArgumentException("dataLogDir " + dataLogDir + " is missing.");
    }
  }
  if (tickTime == 0) {
    throw new IllegalArgumentException("tickTime is not set");
  }
  if (servers.size() > 1) {
    if (initLimit == 0) {
      throw new IllegalArgumentException("initLimit is not set");
    }
    if (syncLimit == 0) {
      throw new IllegalArgumentException("syncLimit is not set");
    }
    if (electionAlg != 0) {
      for (      QuorumPeer.QuorumServer s : servers.values()) {
        if (s.electionAddr == null)         throw new IllegalArgumentException("Missing election port for server: " + s.id);
      }
    }
    if (serverGroup.size() > 0) {
      if (servers.size() != serverGroup.size())       throw new ConfigException("Every server must be in exactly one group");
      for (      QuorumPeer.QuorumServer s : servers.values()) {
        if (!serverWeight.containsKey(s.id))         serverWeight.put(s.id,(long)1);
      }
      quorumVerifier=new QuorumHierarchical(numGroups,serverWeight,serverGroup);
    }
 else {
      LOG.info("Defaulting to majority quorums");
      quorumVerifier=new QuorumMaj(servers.size());
    }
    File myIdFile=new File(dataDir,"myid");
    if (!myIdFile.exists()) {
      Long myid=getMySeverId();
      if (myid != null) {
        serverId=myid;
        return;
      }
      if (zkRun == null)       return;
      throw new IllegalArgumentException(myIdFile.toString() + " file is missing");
    }
    BufferedReader br=new BufferedReader(new FileReader(myIdFile));
    String myIdString;
    try {
      myIdString=br.readLine();
    }
  finally {
      br.close();
    }
    try {
      serverId=Long.parseLong(myIdString);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("serverid " + myIdString + " is not a number");
    }
  }
}
