{
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  int num=atLeast(100);
  final boolean singleField=random().nextBoolean();
  List<Term> terms=new ArrayList<Term>();
  for (int i=0; i < num; i++) {
    String field="field" + (singleField ? "1" : random().nextInt(100));
    String string=_TestUtil.randomRealisticUnicodeString(random());
    terms.add(new Term(field,string));
    Document doc=new Document();
    doc.add(newStringField(field,string,Field.Store.YES));
    w.addDocument(doc);
  }
  IndexReader reader=w.getReader();
  w.close();
  IndexSearcher searcher=newSearcher(reader);
  int numQueries=atLeast(10);
  for (int i=0; i < numQueries; i++) {
    Collections.shuffle(terms,random());
    int numTerms=1 + random().nextInt(Math.min(BooleanQuery.getMaxClauseCount(),terms.size()));
    BooleanQuery bq=new BooleanQuery();
    for (int j=0; j < numTerms; j++) {
      bq.add(new BooleanClause(new TermQuery(terms.get(j)),Occur.SHOULD));
    }
    TopDocs queryResult=searcher.search(new ConstantScoreQuery(bq),reader.maxDoc());
    MatchAllDocsQuery matchAll=new MatchAllDocsQuery();
    final TermsFilter filter=termsFilter(singleField,terms.subList(0,numTerms));
    ;
    TopDocs filterResult=searcher.search(matchAll,filter,reader.maxDoc());
    assertEquals(filterResult.totalHits,queryResult.totalHits);
    ScoreDoc[] scoreDocs=filterResult.scoreDocs;
    for (int j=0; j < scoreDocs.length; j++) {
      assertEquals(scoreDocs[j].doc,queryResult.scoreDocs[j].doc);
    }
  }
  reader.close();
  dir.close();
}
