{
  shardHandlerFactoryMock.getShardHandler();
  expectLastCall().andAnswer(new IAnswer<ShardHandler>(){
    @Override public ShardHandler answer() throws Throwable {
      log.info("SHARDHANDLER");
      return shardHandlerMock;
    }
  }
).anyTimes();
  workQueueMock.peekTopN(EasyMock.anyInt(),anyObject(Set.class),EasyMock.anyLong());
  expectLastCall().andAnswer(new IAnswer<List>(){
    @Override public List answer() throws Throwable {
      Object result;
      int count=0;
      while ((result=queue.peek()) == null) {
        Thread.sleep(1000);
        count++;
        if (count > 1)         return null;
      }
      return Arrays.asList(result);
    }
  }
).anyTimes();
  workQueueMock.getTailId();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      Object result=null;
      Iterator iter=queue.iterator();
      while (iter.hasNext()) {
        result=iter.next();
      }
      return result == null ? null : ((QueueEvent)result).getId();
    }
  }
).anyTimes();
  workQueueMock.peek(true);
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      Object result;
      while ((result=queue.peek()) == null) {
        Thread.sleep(1000);
      }
      return result;
    }
  }
).anyTimes();
  workQueueMock.remove(anyObject(QueueEvent.class));
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      queue.remove((QueueEvent)getCurrentArguments()[0]);
      return null;
    }
  }
).anyTimes();
  workQueueMock.poll();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return queue.poll();
    }
  }
).anyTimes();
  zkStateReaderMock.getClusterState();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return clusterStateMock;
    }
  }
).anyTimes();
  zkStateReaderMock.getZkClient();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return solrZkClientMock;
    }
  }
).anyTimes();
  clusterStateMock.getCollections();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return collectionsSet;
    }
  }
).anyTimes();
  final Set<String> liveNodes=new HashSet<>();
  for (int i=0; i < liveNodesCount; i++) {
    final String address="localhost:" + (8963 + i) + "_solr";
    liveNodes.add(address);
    zkStateReaderMock.getBaseUrlForNodeName(address);
    expectLastCall().andAnswer(new IAnswer<Object>(){
      @Override public Object answer() throws Throwable {
        return address.replaceAll("_","/");
      }
    }
).anyTimes();
  }
  zkStateReaderMock.getClusterProps();
  expectLastCall().andAnswer(new IAnswer<Map>(){
    @Override public Map answer() throws Throwable {
      return new HashMap();
    }
  }
);
  solrZkClientMock.getZkClientTimeout();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return 30000;
    }
  }
).anyTimes();
  clusterStateMock.hasCollection(anyObject(String.class));
  expectLastCall().andAnswer(new IAnswer<Boolean>(){
    @Override public Boolean answer() throws Throwable {
      String key=(String)getCurrentArguments()[0];
      return collectionsSet.contains(key);
    }
  }
).anyTimes();
  clusterStateMock.getLiveNodes();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return liveNodes;
    }
  }
).anyTimes();
  solrZkClientMock.create(anyObject(String.class),anyObject(byte[].class),anyObject(CreateMode.class),anyBoolean());
  expectLastCall().andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      String key=(String)getCurrentArguments()[0];
      zkMap.put(key,null);
      handleCrateCollMessage((byte[])getCurrentArguments()[1]);
      return key;
    }
  }
).anyTimes();
  solrZkClientMock.makePath(anyObject(String.class),anyObject(byte[].class),anyBoolean());
  expectLastCall().andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      String key=(String)getCurrentArguments()[0];
      return key;
    }
  }
).anyTimes();
  solrZkClientMock.exists(anyObject(String.class),anyBoolean());
  expectLastCall().andAnswer(new IAnswer<Boolean>(){
    @Override public Boolean answer() throws Throwable {
      String key=(String)getCurrentArguments()[0];
      return zkMap.containsKey(key);
    }
  }
).anyTimes();
  return liveNodes;
}
