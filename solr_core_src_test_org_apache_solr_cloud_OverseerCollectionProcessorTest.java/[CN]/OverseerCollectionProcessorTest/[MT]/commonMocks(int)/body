{
  workQueueMock.peek(true);
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      Object result;
      while ((result=queue.peek()) == null) {
        Thread.sleep(1000);
      }
      return result;
    }
  }
).anyTimes();
  workQueueMock.remove();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return queue.poll();
    }
  }
).anyTimes();
  zkStateReaderMock.getClusterState();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return clusterStateMock;
    }
  }
).anyTimes();
  clusterStateMock.getCollections();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return new HashSet<String>();
    }
  }
).anyTimes();
  final Set<String> liveNodes=new HashSet<String>();
  for (int i=0; i < liveNodesCount; i++) {
    liveNodes.add("localhost:" + (8963 + i) + "_solr");
  }
  clusterStateMock.getLiveNodes();
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      return liveNodes;
    }
  }
).anyTimes();
  return liveNodes;
}
