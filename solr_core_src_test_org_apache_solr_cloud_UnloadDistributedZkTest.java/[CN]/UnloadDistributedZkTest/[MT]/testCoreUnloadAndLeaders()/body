{
  SolrServer client=clients.get(0);
  String url1=getBaseUrl(client);
  HttpSolrServer server=new HttpSolrServer(url1);
  server.setConnectionTimeout(15000);
  server.setSoTimeout(60000);
  Create createCmd=new Create();
  createCmd.setCoreName("unloadcollection1");
  createCmd.setCollection("unloadcollection");
  createCmd.setNumShards(1);
  String core1DataDir=dataDir.getAbsolutePath() + File.separator + System.currentTimeMillis()+ "unloadcollection1"+ "_1n";
  createCmd.setDataDir(getDataDir(core1DataDir));
  server.request(createCmd);
  ZkStateReader zkStateReader=getCommonCloudSolrServer().getZkStateReader();
  zkStateReader.updateClusterState(true);
  int slices=zkStateReader.getClusterState().getCollection("unloadcollection").getSlices().size();
  assertEquals(1,slices);
  client=clients.get(1);
  String url2=getBaseUrl(client);
  server=new HttpSolrServer(url2);
  createCmd=new Create();
  createCmd.setCoreName("unloadcollection2");
  createCmd.setCollection("unloadcollection");
  String core2dataDir=dataDir.getAbsolutePath() + File.separator + System.currentTimeMillis()+ "unloadcollection1"+ "_2n";
  createCmd.setDataDir(getDataDir(core2dataDir));
  server.request(createCmd);
  zkStateReader.updateClusterState(true);
  slices=zkStateReader.getClusterState().getCollection("unloadcollection").getSlices().size();
  assertEquals(1,slices);
  waitForRecoveriesToFinish("unloadcollection",zkStateReader,false);
  ZkCoreNodeProps leaderProps=getLeaderUrlFromZk("unloadcollection","shard1");
  Random random=random();
  HttpSolrServer collectionClient;
  if (random.nextBoolean()) {
    collectionClient=new HttpSolrServer(leaderProps.getCoreUrl());
    SolrInputDocument doc1=getDoc(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
    SolrInputDocument doc2=getDoc(id,7,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls");
    SolrInputDocument doc3=getDoc(id,8,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled");
    collectionClient.add(doc1);
    collectionClient.add(doc2);
    collectionClient.add(doc3);
    collectionClient.commit();
  }
  client=clients.get(2);
  String url3=getBaseUrl(client);
  server=new HttpSolrServer(url3);
  createCmd=new Create();
  createCmd.setCoreName("unloadcollection3");
  createCmd.setCollection("unloadcollection");
  String core3dataDir=dataDir.getAbsolutePath() + File.separator + System.currentTimeMillis()+ "unloadcollection"+ "_3n";
  createCmd.setDataDir(getDataDir(core3dataDir));
  server.request(createCmd);
  waitForRecoveriesToFinish("unloadcollection",zkStateReader,false);
  DirectUpdateHandler2.commitOnClose=false;
  HttpSolrServer addClient=new HttpSolrServer(url3 + "/unloadcollection3");
  addClient.setConnectionTimeout(30000);
  for (int x=20; x < 100; x++) {
    SolrInputDocument doc1=getDoc(id,x,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
    addClient.add(doc1);
  }
  collectionClient=new HttpSolrServer(leaderProps.getBaseUrl());
  collectionClient.setConnectionTimeout(15000);
  collectionClient.setSoTimeout(30000);
  Unload unloadCmd=new Unload(false);
  unloadCmd.setCoreName(leaderProps.getCoreName());
  ModifiableSolrParams p=(ModifiableSolrParams)unloadCmd.getParams();
  collectionClient.request(unloadCmd);
  int tries=50;
  while (leaderProps.getCoreUrl().equals(zkStateReader.getLeaderUrl("unloadcollection","shard1",15000))) {
    Thread.sleep(100);
    if (tries-- == 0) {
      fail("Leader never changed");
    }
  }
  zkStateReader.getLeaderRetry("unloadcollection","shard1",15000);
  addClient=new HttpSolrServer(url2 + "/unloadcollection2");
  addClient.setConnectionTimeout(30000);
  addClient.setSoTimeout(90000);
  for (int x=101; x < 200; x++) {
    SolrInputDocument doc1=getDoc(id,x,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
    addClient.add(doc1);
  }
  client=clients.get(3);
  String url4=getBaseUrl(client);
  server=new HttpSolrServer(url4);
  server.setConnectionTimeout(15000);
  server.setSoTimeout(30000);
  createCmd=new Create();
  createCmd.setCoreName("unloadcollection4");
  createCmd.setCollection("unloadcollection");
  String core4dataDir=dataDir.getAbsolutePath() + File.separator + System.currentTimeMillis()+ "unloadcollection"+ "_4n";
  createCmd.setDataDir(getDataDir(core4dataDir));
  server.request(createCmd);
  waitForRecoveriesToFinish("unloadcollection",zkStateReader,false);
  leaderProps=getLeaderUrlFromZk("unloadcollection","shard1");
  collectionClient=new HttpSolrServer(leaderProps.getBaseUrl());
  collectionClient.setConnectionTimeout(15000);
  collectionClient.setSoTimeout(30000);
  unloadCmd=new Unload(false);
  unloadCmd.setCoreName(leaderProps.getCoreName());
  p=(ModifiableSolrParams)unloadCmd.getParams();
  collectionClient.request(unloadCmd);
  tries=50;
  while (leaderProps.getCoreUrl().equals(zkStateReader.getLeaderUrl("unloadcollection","shard1",15000))) {
    Thread.sleep(100);
    if (tries-- == 0) {
      fail("Leader never changed");
    }
  }
  zkStateReader.getLeaderRetry("unloadcollection","shard1",15000);
  DirectUpdateHandler2.commitOnClose=true;
  server=new HttpSolrServer(leaderProps.getBaseUrl());
  server.setConnectionTimeout(15000);
  server.setSoTimeout(30000);
  createCmd=new Create();
  createCmd.setCoreName(leaderProps.getCoreName());
  createCmd.setCollection("unloadcollection");
  createCmd.setDataDir(getDataDir(core1DataDir));
  server.request(createCmd);
  waitForRecoveriesToFinish("unloadcollection",zkStateReader,false);
  server=new HttpSolrServer(url2 + "/unloadcollection");
  server.setConnectionTimeout(15000);
  server.setSoTimeout(30000);
  server.commit();
  SolrQuery q=new SolrQuery("*:*");
  q.set("distrib",false);
  long found1=server.query(q).getResults().getNumFound();
  server=new HttpSolrServer(url3 + "/unloadcollection");
  server.setConnectionTimeout(15000);
  server.setSoTimeout(30000);
  server.commit();
  q=new SolrQuery("*:*");
  q.set("distrib",false);
  long found3=server.query(q).getResults().getNumFound();
  server=new HttpSolrServer(url4 + "/unloadcollection");
  server.setConnectionTimeout(15000);
  server.setSoTimeout(30000);
  server.commit();
  q=new SolrQuery("*:*");
  q.set("distrib",false);
  long found4=server.query(q).getResults().getNumFound();
  assertEquals(found1,found3);
  assertEquals(found3,found4);
}
