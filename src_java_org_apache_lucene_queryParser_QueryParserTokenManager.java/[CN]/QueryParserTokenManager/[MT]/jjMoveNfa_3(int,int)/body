{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=36;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 36:
case 25:
          if ((0xfbfffcf8ffffd9ffL & l) == 0L)           break;
        if (kind > 21)         kind=21;
      jjCheckNAddTwoStates(25,26);
    break;
case 0:
  if ((0xfbffd4f8ffffd9ffL & l) != 0L) {
    if (kind > 21)     kind=21;
    jjCheckNAddTwoStates(25,26);
  }
 else   if ((0x100002600L & l) != 0L) {
    if (kind > 6)     kind=6;
  }
 else   if (curChar == 34)   jjCheckNAddTwoStates(15,17);
 else   if (curChar == 33) {
    if (kind > 9)     kind=9;
  }
if ((0x7bffd0f8ffffd9ffL & l) != 0L) {
  if (kind > 18)   kind=18;
  jjCheckNAddStates(0,4);
}
 else if (curChar == 42) {
  if (kind > 20)   kind=20;
}
if (curChar == 38) jjstateSet[jjnewStateCnt++]=4;
break;
case 4:
if (curChar == 38 && kind > 7) kind=7;
break;
case 5:
if (curChar == 38) jjstateSet[jjnewStateCnt++]=4;
break;
case 13:
if (curChar == 33 && kind > 9) kind=9;
break;
case 14:
if (curChar == 34) jjCheckNAddTwoStates(15,17);
break;
case 15:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddStates(5,7);
break;
case 16:
if (curChar == 34) jjCheckNAddStates(5,7);
break;
case 18:
if (curChar == 34 && kind > 17) kind=17;
break;
case 20:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 19) kind=19;
jjAddStates(8,9);
break;
case 21:
if (curChar == 46) jjCheckNAdd(22);
break;
case 22:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 19) kind=19;
jjCheckNAdd(22);
break;
case 23:
if (curChar == 42 && kind > 20) kind=20;
break;
case 24:
if ((0xfbffd4f8ffffd9ffL & l) == 0L) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 27:
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 28:
if ((0x7bffd0f8ffffd9ffL & l) == 0L) break;
if (kind > 18) kind=18;
jjCheckNAddStates(0,4);
break;
case 29:
if ((0x7bfff8f8ffffd9ffL & l) == 0L) break;
if (kind > 18) kind=18;
jjCheckNAddTwoStates(29,30);
break;
case 31:
if (kind > 18) kind=18;
jjCheckNAddTwoStates(29,30);
break;
case 32:
if ((0x7bfff8f8ffffd9ffL & l) != 0L) jjCheckNAddStates(10,12);
break;
case 34:
jjCheckNAddStates(10,12);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 36:
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
}
 else if (curChar == 92) jjCheckNAddTwoStates(27,27);
break;
case 0:
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 18) kind=18;
jjCheckNAddStates(0,4);
}
 else if (curChar == 92) jjCheckNAddStates(13,15);
 else if (curChar == 126) {
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=20;
}
if ((0x97ffffff87ffffffL & l) != 0L) {
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
}
if (curChar == 78) jjstateSet[jjnewStateCnt++]=11;
 else if (curChar == 124) jjstateSet[jjnewStateCnt++]=8;
 else if (curChar == 79) jjstateSet[jjnewStateCnt++]=6;
 else if (curChar == 65) jjstateSet[jjnewStateCnt++]=2;
break;
case 1:
if (curChar == 68 && kind > 7) kind=7;
break;
case 2:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=1;
break;
case 3:
if (curChar == 65) jjstateSet[jjnewStateCnt++]=2;
break;
case 6:
if (curChar == 82 && kind > 8) kind=8;
break;
case 7:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=6;
break;
case 8:
if (curChar == 124 && kind > 8) kind=8;
break;
case 9:
if (curChar == 124) jjstateSet[jjnewStateCnt++]=8;
break;
case 10:
if (curChar == 84 && kind > 9) kind=9;
break;
case 11:
if (curChar == 79) jjstateSet[jjnewStateCnt++]=10;
break;
case 12:
if (curChar == 78) jjstateSet[jjnewStateCnt++]=11;
break;
case 15:
jjAddStates(5,7);
break;
case 17:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=16;
break;
case 19:
if (curChar != 126) break;
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=20;
break;
case 24:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 25:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 26:
if (curChar == 92) jjCheckNAddTwoStates(27,27);
break;
case 27:
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 28:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 18) kind=18;
jjCheckNAddStates(0,4);
break;
case 29:
if ((0x97ffffff87ffffffL & l) == 0L) break;
if (kind > 18) kind=18;
jjCheckNAddTwoStates(29,30);
break;
case 30:
if (curChar == 92) jjCheckNAddTwoStates(31,31);
break;
case 31:
if (kind > 18) kind=18;
jjCheckNAddTwoStates(29,30);
break;
case 32:
if ((0x97ffffff87ffffffL & l) != 0L) jjCheckNAddStates(10,12);
break;
case 33:
if (curChar == 92) jjCheckNAddTwoStates(34,34);
break;
case 34:
jjCheckNAddStates(10,12);
break;
case 35:
if (curChar == 92) jjCheckNAddStates(13,15);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 36:
case 25:
case 27:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 0:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
}
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
if (kind > 18) kind=18;
jjCheckNAddStates(0,4);
}
break;
case 15:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(5,7);
break;
case 24:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 21) kind=21;
jjCheckNAddTwoStates(25,26);
break;
case 28:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 18) kind=18;
jjCheckNAddStates(0,4);
break;
case 29:
case 31:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 18) kind=18;
jjCheckNAddTwoStates(29,30);
break;
case 32:
case 34:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(10,12);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=36 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
