{
  close();
  createIndex(size);
  req=lrf.makeRequest("q","*:*");
  SortedSetDocValues dv=DocValues.getSortedSet(req.getSearcher().getLeafReader(),proto.field());
  assertEquals(size,dv.getValueCount());
  TermsEnum te=dv.termsEnum();
  Random r=new Random(size);
  for (int i=0; i < size * 2 + 10; i++) {
    int rnum=r.nextInt(size + 2);
    String s=t(rnum);
    final BytesRef br;
    if (te == null) {
      br=null;
    }
 else {
      TermsEnum.SeekStatus status=te.seekCeil(new BytesRef(s));
      if (status == TermsEnum.SeekStatus.END) {
        br=null;
      }
 else {
        br=te.term();
      }
    }
    assertEquals(br != null,rnum < size);
    if (rnum < size) {
      assertEquals(rnum,(int)te.ord());
      assertEquals(s,te.term().utf8ToString());
    }
  }
  if (size > 0) {
    assertEquals(size > 0,te.seekCeil(new BytesRef("000")) != TermsEnum.SeekStatus.END);
    assertEquals(0,te.ord());
    assertEquals(t(0),te.term().utf8ToString());
  }
  if (size > 0) {
    for (int i=0; i < size * 2 + 10; i++) {
      int rnum=r.nextInt(size);
      String s=t(rnum);
      te.seekExact((long)rnum);
      BytesRef br=te.term();
      assertNotNull(br);
      assertEquals(rnum,(int)te.ord());
      assertEquals(s,te.term().utf8ToString());
    }
  }
}
