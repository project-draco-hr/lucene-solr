{
  Directory dir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  final int numDocs=atLeast(500);
  final Number[] answers=new Number[numDocs];
  final Class<?>[] typeAnswers=new Class<?>[numDocs];
  for (int id=0; id < numDocs; id++) {
    Document doc=new Document();
    final Field nf;
    final Number answer;
    final Class<?> typeAnswer;
    if (random().nextBoolean()) {
      if (random().nextBoolean()) {
        final float f=random().nextFloat();
        answer=Float.valueOf(f);
        nf=new StoredField("nf",f);
        typeAnswer=Float.class;
      }
 else {
        final double d=random().nextDouble();
        answer=Double.valueOf(d);
        nf=new StoredField("nf",d);
        typeAnswer=Double.class;
      }
    }
 else {
      if (random().nextBoolean()) {
        final int i=random().nextInt();
        answer=Integer.valueOf(i);
        nf=new StoredField("nf",i);
        typeAnswer=Integer.class;
      }
 else {
        final long l=random().nextLong();
        answer=Long.valueOf(l);
        nf=new StoredField("nf",l);
        typeAnswer=Long.class;
      }
    }
    doc.add(nf);
    answers[id]=answer;
    typeAnswers[id]=typeAnswer;
    doc.add(new StoredField("id",id));
    doc.add(new IntPoint("id",id));
    doc.add(new NumericDocValuesField("id",id));
    w.addDocument(doc);
  }
  final DirectoryReader r=w.getReader();
  w.close();
  assertEquals(numDocs,r.numDocs());
  for (  LeafReaderContext ctx : r.leaves()) {
    final LeafReader sub=ctx.reader();
    final NumericDocValues ids=DocValues.getNumeric(sub,"id");
    for (int docID=0; docID < sub.numDocs(); docID++) {
      final Document doc=sub.document(docID);
      final Field f=(Field)doc.getField("nf");
      assertTrue("got f=" + f,f instanceof StoredField);
      assertEquals(docID,ids.nextDoc());
      assertEquals(answers[(int)ids.longValue()],f.numericValue());
    }
  }
  r.close();
  dir.close();
}
