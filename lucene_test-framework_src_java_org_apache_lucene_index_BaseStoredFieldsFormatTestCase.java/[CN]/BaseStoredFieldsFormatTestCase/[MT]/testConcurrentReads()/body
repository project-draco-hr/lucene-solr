{
  Directory dir=newDirectory();
  IndexWriterConfig iwConf=newIndexWriterConfig(new MockAnalyzer(random()));
  iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(),2,30));
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwConf);
  final Document doc=new Document();
  final Field field=new StringField("fld","",Store.YES);
  doc.add(field);
  final int numDocs=atLeast(1000);
  for (int i=0; i < numDocs; ++i) {
    field.setStringValue("" + i);
    iw.addDocument(doc);
  }
  iw.commit();
  final DirectoryReader rd=DirectoryReader.open(dir);
  final IndexSearcher searcher=new IndexSearcher(rd);
  final int concurrentReads=atLeast(5);
  final int readsPerThread=atLeast(50);
  final List<Thread> readThreads=new ArrayList<>();
  final AtomicReference<Exception> ex=new AtomicReference<>();
  for (int i=0; i < concurrentReads; ++i) {
    readThreads.add(new Thread(){
      int[] queries;
{
        queries=new int[readsPerThread];
        for (int i=0; i < queries.length; ++i) {
          queries[i]=random().nextInt(numDocs);
        }
      }
      @Override public void run(){
        for (        int q : queries) {
          final Query query=new TermQuery(new Term("fld","" + q));
          try {
            final TopDocs topDocs=searcher.search(query,1);
            if (topDocs.totalHits != 1) {
              throw new IllegalStateException("Expected 1 hit, got " + topDocs.totalHits);
            }
            final StoredDocument sdoc=rd.document(topDocs.scoreDocs[0].doc);
            if (sdoc == null || sdoc.get("fld") == null) {
              throw new IllegalStateException("Could not find document " + q);
            }
            if (!Integer.toString(q).equals(sdoc.get("fld"))) {
              throw new IllegalStateException("Expected " + q + ", but got "+ sdoc.get("fld"));
            }
          }
 catch (          Exception e) {
            ex.compareAndSet(null,e);
          }
        }
      }
    }
);
  }
  for (  Thread thread : readThreads) {
    thread.start();
  }
  for (  Thread thread : readThreads) {
    thread.join();
  }
  rd.close();
  if (ex.get() != null) {
    throw ex.get();
  }
  iw.shutdown();
  dir.close();
}
