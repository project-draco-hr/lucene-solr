{
  final NumericDocValues arr=cache.getNumerics(readerContext.reader(),field,parser,true);
  final Bits valid=cache.getDocsWithField(readerContext.reader(),field);
  return new LongDocValues(this){
    @Override public long longVal(    int doc){
      return arr.get(doc);
    }
    @Override public boolean exists(    int doc){
      return valid.get(doc);
    }
    @Override public Object objectVal(    int doc){
      return exists(doc) ? longToObject(arr.get(doc)) : null;
    }
    @Override public String strVal(    int doc){
      return exists(doc) ? longToString(arr.get(doc)) : null;
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueDate mval=new MutableValueDate();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=arr.get(doc);
          mval.exists=exists(doc);
        }
      }
;
    }
  }
;
}
