{
  UpdateRequest update=null;
  JavaBinUpdateRequestCodec.StreamingUpdateHandler handler=new JavaBinUpdateRequestCodec.StreamingUpdateHandler(){
    private AddUpdateCommand addCmd=null;
    @Override public void update(    SolrInputDocument document,    UpdateRequest updateRequest,    Integer commitWithin,    Boolean overwrite){
      if (document == null) {
        try {
          RequestHandlerUtils.handleCommit(req,processor,updateRequest.getParams(),false);
          RequestHandlerUtils.handleRollback(req,processor,updateRequest.getParams(),false);
        }
 catch (        IOException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"ERROR handling commit/rollback");
        }
        return;
      }
      if (addCmd == null) {
        addCmd=getAddCommand(req,updateRequest.getParams());
      }
      addCmd.solrDoc=document;
      if (commitWithin != null) {
        addCmd.commitWithin=commitWithin;
      }
      if (overwrite != null) {
        addCmd.overwrite=overwrite;
      }
      try {
        processor.processAdd(addCmd);
        addCmd.clear();
      }
 catch (      IOException e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"ERROR adding document " + document,e);
      }
    }
  }
;
  FastInputStream in=FastInputStream.wrap(stream);
  for (; ; ) {
    try {
      update=new JavaBinUpdateRequestCodec().unmarshal(in,handler);
    }
 catch (    EOFException e) {
      break;
    }
    if (update.getDeleteByIdMap() != null || update.getDeleteQuery() != null) {
      delete(req,update,processor);
    }
  }
}
