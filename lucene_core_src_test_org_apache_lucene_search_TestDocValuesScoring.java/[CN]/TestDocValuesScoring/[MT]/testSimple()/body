{
  Directory dir=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
  Document doc=new Document();
  Field field=newTextField("foo","",Field.Store.NO);
  doc.add(field);
  Field dvField=new FloatDocValuesField("foo_boost",0.0F);
  doc.add(dvField);
  Field field2=newTextField("bar","",Field.Store.NO);
  doc.add(field2);
  field.setStringValue("quick brown fox");
  field2.setStringValue("quick brown fox");
  dvField.setFloatValue(2f);
  iw.addDocument(doc);
  field.setStringValue("jumps over lazy brown dog");
  field2.setStringValue("jumps over lazy brown dog");
  dvField.setFloatValue(4f);
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  iw.shutdown();
  IndexSearcher searcher1=newSearcher(ir,false);
  final Similarity base=searcher1.getSimilarity();
  IndexSearcher searcher2=newSearcher(ir,false);
  searcher2.setSimilarity(new PerFieldSimilarityWrapper(){
    final Similarity fooSim=new BoostingSimilarity(base,"foo_boost");
    @Override public Similarity get(    String field){
      return "foo".equals(field) ? fooSim : base;
    }
    @Override public float coord(    int overlap,    int maxOverlap){
      return base.coord(overlap,maxOverlap);
    }
    @Override public float queryNorm(    float sumOfSquaredWeights){
      return base.queryNorm(sumOfSquaredWeights);
    }
  }
);
  TermQuery tq=new TermQuery(new Term("foo","quick"));
  QueryUtils.check(random(),tq,searcher1);
  QueryUtils.check(random(),tq,searcher2);
  TopDocs noboost=searcher1.search(tq,10);
  TopDocs boost=searcher2.search(tq,10);
  assertEquals(1,noboost.totalHits);
  assertEquals(1,boost.totalHits);
  assertEquals(boost.scoreDocs[0].score,noboost.scoreDocs[0].score * 2f,SCORE_EPSILON);
  tq=new TermQuery(new Term("foo","jumps"));
  QueryUtils.check(random(),tq,searcher1);
  QueryUtils.check(random(),tq,searcher2);
  noboost=searcher1.search(tq,10);
  boost=searcher2.search(tq,10);
  assertEquals(1,noboost.totalHits);
  assertEquals(1,boost.totalHits);
  assertEquals(boost.scoreDocs[0].score,noboost.scoreDocs[0].score * 4f,SCORE_EPSILON);
  tq=new TermQuery(new Term("bar","quick"));
  QueryUtils.check(random(),tq,searcher1);
  QueryUtils.check(random(),tq,searcher2);
  noboost=searcher1.search(tq,10);
  boost=searcher2.search(tq,10);
  assertEquals(1,noboost.totalHits);
  assertEquals(1,boost.totalHits);
  assertEquals(boost.scoreDocs[0].score,noboost.scoreDocs[0].score,SCORE_EPSILON);
  ir.close();
  dir.close();
}
