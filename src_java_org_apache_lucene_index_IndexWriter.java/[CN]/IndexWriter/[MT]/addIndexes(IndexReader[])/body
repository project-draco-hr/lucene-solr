{
  optimize();
  final String mergedName=newSegmentName();
  SegmentMerger merger=new SegmentMerger(this,mergedName);
  final Vector segmentsToDelete=new Vector();
  IndexReader sReader=null;
  if (segmentInfos.size() == 1) {
    sReader=SegmentReader.get(segmentInfos.info(0));
    merger.add(sReader);
    segmentsToDelete.addElement(sReader);
  }
  for (int i=0; i < readers.length; i++)   merger.add(readers[i]);
  SegmentInfo info;
  String segmentsInfosFileName=segmentInfos.getCurrentSegmentFileName();
  boolean success=false;
  startTransaction();
  try {
    int docCount=merger.merge();
    segmentInfos.setSize(0);
    info=new SegmentInfo(mergedName,docCount,directory,false);
    segmentInfos.addElement(info);
    commitPending=true;
    if (sReader != null)     sReader.close();
    success=true;
  }
  finally {
    if (!success) {
      rollbackTransaction();
    }
 else {
      commitTransaction();
    }
  }
  deleter.deleteFile(segmentsInfosFileName);
  deleter.deleteSegments(segmentsToDelete);
  if (useCompoundFile) {
    success=false;
    segmentsInfosFileName=segmentInfos.getCurrentSegmentFileName();
    Vector filesToDelete;
    startTransaction();
    try {
      filesToDelete=merger.createCompoundFile(mergedName + ".cfs");
      info.setUseCompoundFile(true);
      commitPending=true;
      success=true;
    }
  finally {
      if (!success) {
        rollbackTransaction();
      }
 else {
        commitTransaction();
      }
    }
    deleter.deleteFile(segmentsInfosFileName);
    deleter.deleteFiles(filesToDelete);
  }
}
