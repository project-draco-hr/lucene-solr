{
  final String mergedName=newSegmentName();
  if (infoStream != null)   infoStream.print("merging segments");
  SegmentMerger merger=new SegmentMerger(this,mergedName);
  final Vector segmentsToDelete=new Vector();
  for (int i=minSegment; i < end; i++) {
    SegmentInfo si=sourceSegments.info(i);
    if (infoStream != null)     infoStream.print(" " + si.name + " ("+ si.docCount+ " docs)");
    IndexReader reader=SegmentReader.get(si);
    merger.add(reader);
    if ((reader.directory() == this.directory) || (reader.directory() == this.ramDirectory))     segmentsToDelete.addElement(reader);
  }
  int mergedDocCount=merger.merge();
  if (infoStream != null) {
    infoStream.println(" into " + mergedName + " ("+ mergedDocCount+ " docs)");
  }
  SegmentInfo newSegment=new SegmentInfo(mergedName,mergedDocCount,directory,false);
  if (sourceSegments == ramSegmentInfos) {
    sourceSegments.removeAllElements();
    segmentInfos.addElement(newSegment);
  }
 else {
    for (int i=end - 1; i > minSegment; i--)     sourceSegments.remove(i);
    segmentInfos.set(minSegment,newSegment);
  }
  merger.closeReaders();
  String segmentsInfosFileName=segmentInfos.getCurrentSegmentFileName();
  segmentInfos.write(directory);
  deleter.deleteFile(segmentsInfosFileName);
  deleter.deleteSegments(segmentsToDelete);
  if (useCompoundFile) {
    Vector filesToDelete=merger.createCompoundFile(mergedName + ".cfs");
    segmentsInfosFileName=segmentInfos.getCurrentSegmentFileName();
    newSegment.setUseCompoundFile(true);
    segmentInfos.write(directory);
    deleter.deleteFile(segmentsInfosFileName);
    deleter.deleteFiles(filesToDelete);
  }
  return mergedDocCount;
}
