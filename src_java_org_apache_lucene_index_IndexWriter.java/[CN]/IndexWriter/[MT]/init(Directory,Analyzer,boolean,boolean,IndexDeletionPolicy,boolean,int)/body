{
  this.closeDir=closeDir;
  directory=d;
  analyzer=a;
  this.infoStream=defaultInfoStream;
  this.maxFieldLength=maxFieldLength;
  setMessageID();
  if (create) {
    directory.clearLock(IndexWriter.WRITE_LOCK_NAME);
  }
  Lock writeLock=directory.makeLock(IndexWriter.WRITE_LOCK_NAME);
  if (!writeLock.obtain(writeLockTimeout))   throw new LockObtainFailedException("Index locked for write: " + writeLock);
  this.writeLock=writeLock;
  try {
    if (create) {
      try {
        segmentInfos.read(directory);
        segmentInfos.clear();
      }
 catch (      IOException e) {
      }
      segmentInfos.write(directory);
    }
 else {
      segmentInfos.read(directory);
    }
    this.autoCommit=autoCommit;
    if (!autoCommit) {
      rollbackSegmentInfos=(SegmentInfos)segmentInfos.clone();
    }
    docWriter=new DocumentsWriter(directory,this);
    docWriter.setInfoStream(infoStream);
    deleter=new IndexFileDeleter(directory,deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,segmentInfos,infoStream,docWriter);
    pushMaxBufferedDocs();
    if (infoStream != null) {
      message("init: create=" + create);
      messageState();
    }
  }
 catch (  IOException e) {
    this.writeLock.release();
    this.writeLock=null;
    throw e;
  }
}
