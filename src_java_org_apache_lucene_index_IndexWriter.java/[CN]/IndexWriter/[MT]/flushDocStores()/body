{
  boolean useCompoundDocStore=false;
  String docStoreSegment;
  boolean success=false;
  try {
    docStoreSegment=docWriter.closeDocStore();
    success=true;
  }
  finally {
    if (!success && infoStream != null) {
      message("hit exception closing doc store segment");
    }
  }
  useCompoundDocStore=mergePolicy.useCompoundDocStore(segmentInfos);
  if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {
    if (infoStream != null) {
      message("create compound file " + IndexFileNames.segmentFileName(docStoreSegment,IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));
    }
    success=false;
    final int numSegments=segmentInfos.size();
    final String compoundFileName=IndexFileNames.segmentFileName(docStoreSegment,IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);
    try {
      CompoundFileWriter cfsWriter=new CompoundFileWriter(directory,compoundFileName);
      for (      final String file : docWriter.closedFiles()) {
        cfsWriter.addFile(file);
      }
      cfsWriter.close();
      success=true;
    }
  finally {
      if (!success) {
        if (infoStream != null)         message("hit exception building compound file doc store for segment " + docStoreSegment);
        deleter.deleteFile(compoundFileName);
        docWriter.abort();
      }
    }
    for (int i=0; i < numSegments; i++) {
      SegmentInfo si=segmentInfos.info(i);
      if (si.getDocStoreOffset() != -1 && si.getDocStoreSegment().equals(docStoreSegment))       si.setDocStoreIsCompoundFile(true);
    }
    checkpoint();
    deleter.deleteNewFiles(docWriter.closedFiles());
  }
  return useCompoundDocStore;
}
