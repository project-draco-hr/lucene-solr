{
  List files=docWriter.files();
  boolean useCompoundDocStore=false;
  if (files.size() > 0) {
    String docStoreSegment;
    boolean success=false;
    try {
      docStoreSegment=docWriter.closeDocStore();
      success=true;
    }
  finally {
      if (!success) {
        if (infoStream != null)         message("hit exception closing doc store segment");
        docWriter.abort(null);
      }
    }
    useCompoundDocStore=mergePolicy.useCompoundDocStore(segmentInfos);
    if (useCompoundDocStore && docStoreSegment != null) {
      success=false;
      final int numSegments=segmentInfos.size();
      final String compoundFileName=docStoreSegment + "." + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;
      try {
        CompoundFileWriter cfsWriter=new CompoundFileWriter(directory,compoundFileName);
        final int size=files.size();
        for (int i=0; i < size; i++)         cfsWriter.addFile((String)files.get(i));
        cfsWriter.close();
        success=true;
      }
  finally {
        if (!success) {
          if (infoStream != null)           message("hit exception building compound file doc store for segment " + docStoreSegment);
          deleter.deleteFile(compoundFileName);
        }
      }
      for (int i=0; i < numSegments; i++) {
        SegmentInfo si=segmentInfos.info(i);
        if (si.getDocStoreOffset() != -1 && si.getDocStoreSegment().equals(docStoreSegment))         si.setDocStoreIsCompoundFile(true);
      }
      checkpoint();
    }
  }
  return useCompoundDocStore;
}
