{
  del("*:*");
  index(id,"1","lowerfilt","toyota","lowerfilt1","x");
  index(id,"2","lowerfilt","chevrolet","lowerfilt1","x");
  index(id,"3","lowerfilt","suzuki","lowerfilt1","x");
  index(id,"4","lowerfilt","ford","lowerfilt1","x");
  index(id,"5","lowerfilt","ferrari","lowerfilt1","x");
  index(id,"6","lowerfilt","jaguar","lowerfilt1","x");
  index(id,"7","lowerfilt","mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too","lowerfilt1","x");
  index(id,"8","lowerfilt","sonata","lowerfilt1","x");
  index(id,"9","lowerfilt","The quick red fox jumped over the lazy big and large brown dogs.","lowerfilt1","x");
  index(id,"10","lowerfilt","blue","lowerfilt1","x");
  index(id,"12","lowerfilt","glue","lowerfilt1","x");
  index(id,"13","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"14","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"15","lowerfilt","The fat red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"16","lowerfilt","The slim red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"17","lowerfilt","The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon","lowerfilt1","y");
  index(id,"18","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"19","lowerfilt","The hose red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"20","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"21","lowerfilt","The court red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"22","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"23","lowerfilt","The quote red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"24","lowerfilt","The file red fox jumped over the lazy brown dogs.","lowerfilt1","y");
  index(id,"25","lowerfilt","rod fix","lowerfilt1","y");
  commit();
  handle.clear();
  handle.put("timestamp",SKIPVAL);
  handle.put("maxScore",SKIPVAL);
  handle.put("response",SKIP);
  handle.put("17",UNORDERED);
  query("q","match_none","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName);
  query("q","lowerfilt:sonata","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName);
  handle.put("24",UNORDERED);
  handle.put("23",UNORDERED);
  handle.put("22",UNORDERED);
  handle.put("21",UNORDERED);
  handle.put("20",UNORDERED);
  handle.put("19",UNORDERED);
  handle.put("18",UNORDERED);
  handle.put("17",UNORDERED);
  handle.put("16",UNORDERED);
  handle.put("15",UNORDERED);
  handle.put("14",UNORDERED);
  handle.put("13",UNORDERED);
  handle.put("7",UNORDERED);
  query("q","lowerfilt:moon","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,2,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  query("q","lowerfilt:fox","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,1,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  query("q","lowerfilt:the red fox","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,1,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  query("q","lowerfilt:blue moon","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,1,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  QueryResponse response=query("q","lowerfilt:moon","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,2,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt1,lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  NamedList<Object> moreLikeThis=(NamedList<Object>)response.getResponse().get("moreLikeThis");
  Map<String,Long> idVsMLTCount=new HashMap<>();
  for (  Map.Entry<String,Object> entry : moreLikeThis) {
    SolrDocumentList docList=(SolrDocumentList)entry.getValue();
    idVsMLTCount.put(entry.getKey(),docList.getNumFound());
  }
  response=query("q","lowerfilt:moon","fl",id,MoreLikeThisParams.MIN_TERM_FREQ,2,MoreLikeThisParams.MIN_DOC_FREQ,1,"sort","id desc","mlt","true","mlt.fl","lowerfilt1","mlt.fl","lowerfilt","qt",requestHandlerName,"shards.qt",requestHandlerName,"mlt.count","20");
  moreLikeThis=(NamedList<Object>)response.getResponse().get("moreLikeThis");
  for (  Map.Entry<String,Object> entry : moreLikeThis) {
    String key=entry.getKey();
    Long expected=idVsMLTCount.get(key);
    Long actual=((SolrDocumentList)entry.getValue()).getNumFound();
    assertEquals("MLT mismatch for id=" + key,expected,actual);
  }
}
