{
  String uri="/solr/select";
  String contentType="application/x-www-form-urlencoded";
  int contentLength=-1;
  HttpServletRequest request=createMock(HttpServletRequest.class);
  expect(request.getHeader("User-Agent")).andReturn(userAgent).anyTimes();
  expect(request.getHeader("Content-Length")).andReturn(null).anyTimes();
  expect(request.getRequestURI()).andReturn(uri).anyTimes();
  expect(request.getContentType()).andReturn(contentType).anyTimes();
  expect(request.getContentLength()).andReturn(contentLength).anyTimes();
  expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();
  expect(request.getMethod()).andReturn(method).anyTimes();
  expect(request.getQueryString()).andReturn("foo=1&bar=2").anyTimes();
  expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));
  replay(request);
  SolrRequestParsers parsers=new SolrRequestParsers(h.getCore().getSolrConfig());
  SolrQueryRequest req=parsers.parse(h.getCore(),"/select",request);
  int num=0;
  if (expectedContentType != null) {
    for (    ContentStream cs : req.getContentStreams()) {
      num++;
      assertTrue(cs.getContentType().startsWith(expectedContentType));
      String returnedBody=IOUtils.toString(cs.getReader());
      assertEquals(body,returnedBody);
    }
    assertEquals(1,num);
  }
  assertEquals("1",req.getParams().get("foo"));
  assertEquals("2",req.getParams().get("bar"));
  if (expectedKey != null) {
    assertEquals(expectedValue,req.getParams().get(expectedKey));
  }
  req.close();
}
