{
  HashMap<Object,String> uniqueDoc=new HashMap<>();
  NamedList<Object> shardInfo=null;
  if (rb.req.getParams().getBool(ShardParams.SHARDS_INFO,false)) {
    shardInfo=new SimpleOrderedMap<>();
    rb.rsp.getValues().add(ShardParams.SHARDS_INFO,shardInfo);
  }
  IndexSchema schema=rb.req.getSchema();
  SchemaField uniqueKeyField=schema.getUniqueKeyField();
  long numFound=0;
  Float maxScore=null;
  boolean partialResults=false;
  List<ShardDoc> shardDocs=new ArrayList();
  for (  ShardResponse srsp : sreq.responses) {
    SolrDocumentList docs=null;
    if (shardInfo != null) {
      SimpleOrderedMap<Object> nl=new SimpleOrderedMap<>();
      if (srsp.getException() != null) {
        Throwable t=srsp.getException();
        if (t instanceof SolrServerException) {
          t=((SolrServerException)t).getCause();
        }
        nl.add("error",t.toString());
        StringWriter trace=new StringWriter();
        t.printStackTrace(new PrintWriter(trace));
        nl.add("trace",trace.toString());
        if (srsp.getShardAddress() != null) {
          nl.add("shardAddress",srsp.getShardAddress());
        }
      }
 else {
        docs=(SolrDocumentList)srsp.getSolrResponse().getResponse().get("response");
        nl.add("numFound",docs.getNumFound());
        nl.add("maxScore",docs.getMaxScore());
        nl.add("shardAddress",srsp.getShardAddress());
      }
      if (srsp.getSolrResponse() != null) {
        nl.add("time",srsp.getSolrResponse().getElapsedTime());
      }
      shardInfo.add(srsp.getShard(),nl);
    }
    if (srsp.getException() != null) {
      partialResults=true;
      continue;
    }
    if (docs == null) {
      docs=(SolrDocumentList)srsp.getSolrResponse().getResponse().get("response");
    }
    NamedList<?> responseHeader=(NamedList<?>)srsp.getSolrResponse().getResponse().get("responseHeader");
    if (responseHeader != null && Boolean.TRUE.equals(responseHeader.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {
      partialResults=true;
    }
    if (docs.getMaxScore() != null) {
      maxScore=maxScore == null ? docs.getMaxScore() : Math.max(maxScore,docs.getMaxScore());
    }
    numFound+=docs.getNumFound();
    for (int i=0; i < docs.size(); i++) {
      SolrDocument doc=docs.get(i);
      Object id=doc.getFieldValue(uniqueKeyField.getName());
      String prevShard=uniqueDoc.put(id,srsp.getShard());
      if (prevShard != null) {
        numFound--;
        continue;
      }
      ShardDoc shardDoc=new ShardDoc();
      shardDoc.id=id;
      shardDoc.shard=srsp.getShard();
      shardDoc.orderInShard=i;
      Object scoreObj=doc.getFieldValue("score");
      if (scoreObj != null) {
        if (scoreObj instanceof String) {
          shardDoc.score=Float.parseFloat((String)scoreObj);
        }
 else {
          shardDoc.score=(Float)scoreObj;
        }
      }
      shardDocs.add(shardDoc);
    }
  }
  Collections.sort(shardDocs,new Comparator<ShardDoc>(){
    @Override public int compare(    ShardDoc o1,    ShardDoc o2){
      if (o1.score < o2.score) {
        return 1;
      }
 else       if (o1.score > o2.score) {
        return -1;
      }
 else {
        return 0;
      }
    }
  }
);
  int resultSize=shardDocs.size();
  Map<Object,ShardDoc> resultIds=new HashMap<>();
  for (int i=0; i < shardDocs.size(); i++) {
    ShardDoc shardDoc=shardDocs.get(i);
    shardDoc.positionInResponse=i;
    resultIds.put(shardDoc.id.toString(),shardDoc);
  }
  rb.rsp.addToLog("hits",numFound);
  SolrDocumentList responseDocs=new SolrDocumentList();
  if (maxScore != null)   responseDocs.setMaxScore(maxScore);
  responseDocs.setNumFound(numFound);
  responseDocs.setStart(0);
  for (int i=0; i < resultSize; i++)   responseDocs.add(null);
  rb.resultIds=resultIds;
  rb.setResponseDocs(responseDocs);
  if (partialResults) {
    rb.rsp.getResponseHeader().add(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY,Boolean.TRUE);
  }
}
