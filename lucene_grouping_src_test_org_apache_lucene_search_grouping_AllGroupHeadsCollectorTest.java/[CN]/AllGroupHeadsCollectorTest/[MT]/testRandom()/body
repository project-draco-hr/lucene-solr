{
  int numberOfRuns=TestUtil.nextInt(random(),3,6);
  for (int iter=0; iter < numberOfRuns; iter++) {
    if (VERBOSE) {
      System.out.println(String.format(Locale.ROOT,"TEST: iter=%d total=%d",iter,numberOfRuns));
    }
    final int numDocs=TestUtil.nextInt(random(),100,1000) * RANDOM_MULTIPLIER;
    final int numGroups=TestUtil.nextInt(random(),1,numDocs);
    if (VERBOSE) {
      System.out.println("TEST: numDocs=" + numDocs + " numGroups="+ numGroups);
    }
    final List<BytesRef> groups=new ArrayList<>();
    for (int i=0; i < numGroups; i++) {
      String randomValue;
      do {
        randomValue=TestUtil.randomRealisticUnicodeString(random());
      }
 while ("".equals(randomValue));
      groups.add(new BytesRef(randomValue));
    }
    final String[] contentStrings=new String[TestUtil.nextInt(random(),2,20)];
    if (VERBOSE) {
      System.out.println("TEST: create fake content");
    }
    for (int contentIDX=0; contentIDX < contentStrings.length; contentIDX++) {
      final StringBuilder sb=new StringBuilder();
      sb.append("real").append(random().nextInt(3)).append(' ');
      final int fakeCount=random().nextInt(10);
      for (int fakeIDX=0; fakeIDX < fakeCount; fakeIDX++) {
        sb.append("fake ");
      }
      contentStrings[contentIDX]=sb.toString();
      if (VERBOSE) {
        System.out.println("  content=" + sb.toString());
      }
    }
    Directory dir=newDirectory();
    RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())));
    DocValuesType valueType=DocValuesType.SORTED;
    Document doc=new Document();
    Document docNoGroup=new Document();
    Field valuesField=null;
    valuesField=new SortedDocValuesField("group",new BytesRef());
    doc.add(valuesField);
    Field sort1=new SortedDocValuesField("sort1",new BytesRef());
    doc.add(sort1);
    docNoGroup.add(sort1);
    Field sort2=new SortedDocValuesField("sort2",new BytesRef());
    doc.add(sort2);
    docNoGroup.add(sort2);
    Field sort3=new SortedDocValuesField("sort3",new BytesRef());
    doc.add(sort3);
    docNoGroup.add(sort3);
    Field content=newTextField("content","",Field.Store.NO);
    doc.add(content);
    docNoGroup.add(content);
    NumericDocValuesField idDV=new NumericDocValuesField("id",0);
    doc.add(idDV);
    docNoGroup.add(idDV);
    final GroupDoc[] groupDocs=new GroupDoc[numDocs];
    for (int i=0; i < numDocs; i++) {
      final BytesRef groupValue;
      if (random().nextInt(24) == 17) {
        groupValue=null;
      }
 else {
        groupValue=groups.get(random().nextInt(groups.size()));
      }
      final GroupDoc groupDoc=new GroupDoc(i,groupValue,groups.get(random().nextInt(groups.size())),groups.get(random().nextInt(groups.size())),new BytesRef(String.format(Locale.ROOT,"%05d",i)),contentStrings[random().nextInt(contentStrings.length)]);
      if (VERBOSE) {
        System.out.println("  doc content=" + groupDoc.content + " id="+ i+ " group="+ (groupDoc.group == null ? "null" : groupDoc.group.utf8ToString())+ " sort1="+ groupDoc.sort1.utf8ToString()+ " sort2="+ groupDoc.sort2.utf8ToString()+ " sort3="+ groupDoc.sort3.utf8ToString());
      }
      groupDocs[i]=groupDoc;
      if (groupDoc.group != null) {
        valuesField.setBytesValue(new BytesRef(groupDoc.group.utf8ToString()));
      }
      sort1.setBytesValue(groupDoc.sort1);
      sort2.setBytesValue(groupDoc.sort2);
      sort3.setBytesValue(groupDoc.sort3);
      content.setStringValue(groupDoc.content);
      idDV.setLongValue(groupDoc.id);
      if (groupDoc.group == null) {
        w.addDocument(docNoGroup);
      }
 else {
        w.addDocument(doc);
      }
    }
    final DirectoryReader r=w.getReader();
    w.close();
    NumericDocValues values=MultiDocValues.getNumericValues(r,"id");
    final int[] docIDToFieldId=new int[numDocs];
    final int[] fieldIdToDocID=new int[numDocs];
    for (int i=0; i < numDocs; i++) {
      assertEquals(i,values.nextDoc());
      int fieldId=(int)values.longValue();
      docIDToFieldId[i]=fieldId;
      fieldIdToDocID[fieldId]=i;
    }
    final IndexSearcher s=newSearcher(r);
    Set<Integer> seenIDs=new HashSet<>();
    for (int contentID=0; contentID < 3; contentID++) {
      final ScoreDoc[] hits=s.search(new TermQuery(new Term("content","real" + contentID)),numDocs).scoreDocs;
      for (      ScoreDoc hit : hits) {
        int idValue=docIDToFieldId[hit.doc];
        final GroupDoc gd=groupDocs[idValue];
        assertEquals(gd.id,idValue);
        seenIDs.add(idValue);
        assertTrue(gd.score == 0.0);
        gd.score=hit.score;
      }
    }
    assertEquals(groupDocs.length,seenIDs.size());
    for (    GroupDoc gd : groupDocs) {
      assertTrue(Float.isFinite(gd.score));
      assertTrue(gd.score >= 0.0);
    }
    for (int searchIter=0; searchIter < 100; searchIter++) {
      if (VERBOSE) {
        System.out.println("TEST: searchIter=" + searchIter);
      }
      final String searchTerm="real" + random().nextInt(3);
      boolean sortByScoreOnly=random().nextBoolean();
      Sort sortWithinGroup=getRandomSort(sortByScoreOnly);
      AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector=createRandomCollector("group",sortWithinGroup);
      s.search(new TermQuery(new Term("content",searchTerm)),allGroupHeadsCollector);
      int[] expectedGroupHeads=createExpectedGroupHeads(searchTerm,groupDocs,sortWithinGroup,sortByScoreOnly,fieldIdToDocID);
      int[] actualGroupHeads=allGroupHeadsCollector.retrieveGroupHeads();
      for (int i=0; i < actualGroupHeads.length; i++) {
        actualGroupHeads[i]=docIDToFieldId[actualGroupHeads[i]];
      }
      Arrays.sort(expectedGroupHeads);
      Arrays.sort(actualGroupHeads);
      if (VERBOSE) {
        System.out.println("Collector: " + allGroupHeadsCollector.getClass().getSimpleName());
        System.out.println("Sort within group: " + sortWithinGroup);
        System.out.println("Num group: " + numGroups);
        System.out.println("Num doc: " + numDocs);
        System.out.println("\n=== Expected: \n");
        for (        int expectedDocId : expectedGroupHeads) {
          GroupDoc expectedGroupDoc=groupDocs[expectedDocId];
          String expectedGroup=expectedGroupDoc.group == null ? null : expectedGroupDoc.group.utf8ToString();
          System.out.println(String.format(Locale.ROOT,"Group:%10s score%5f Sort1:%10s Sort2:%10s Sort3:%10s doc:%5d",expectedGroup,expectedGroupDoc.score,expectedGroupDoc.sort1.utf8ToString(),expectedGroupDoc.sort2.utf8ToString(),expectedGroupDoc.sort3.utf8ToString(),expectedDocId));
        }
        System.out.println("\n=== Actual: \n");
        for (        int actualDocId : actualGroupHeads) {
          GroupDoc actualGroupDoc=groupDocs[actualDocId];
          String actualGroup=actualGroupDoc.group == null ? null : actualGroupDoc.group.utf8ToString();
          System.out.println(String.format(Locale.ROOT,"Group:%10s score%5f Sort1:%10s Sort2:%10s Sort3:%10s doc:%5d",actualGroup,actualGroupDoc.score,actualGroupDoc.sort1.utf8ToString(),actualGroupDoc.sort2.utf8ToString(),actualGroupDoc.sort3.utf8ToString(),actualDocId));
        }
        System.out.println("\n===================================================================================");
      }
      assertArrayEquals(expectedGroupHeads,actualGroupHeads);
    }
    r.close();
    dir.close();
  }
}
