{
  Directory dir=newDirectory();
  Directory taxoDir=newDirectory();
  final IndexWriter w=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  final DirectoryTaxonomyWriter tw=new DirectoryTaxonomyWriter(taxoDir);
  final FacetFields facetFields=new FacetFields(tw);
  final AtomicBoolean stop=new AtomicBoolean();
  Thread indexer=new Thread(){
    @Override public void run(){
      Set<String> seen=new HashSet<String>();
      List<String> paths=new ArrayList<String>();
      while (!stop.get()) {
        Document doc=new Document();
        List<CategoryPath> docPaths=new ArrayList<CategoryPath>();
        int numPaths=_TestUtil.nextInt(random(),1,5);
        for (int i=0; i < numPaths; i++) {
          String path;
          if (!paths.isEmpty() && random().nextInt(5) != 4) {
            path=paths.get(random().nextInt(paths.size()));
          }
 else {
            path=null;
            while (true) {
              path=_TestUtil.randomRealisticUnicodeString(random());
              if (path.length() != 0 && !seen.contains(path) && path.indexOf(FacetIndexingParams.DEFAULT_FACET_DELIM_CHAR) == -1) {
                seen.add(path);
                paths.add(path);
                break;
              }
            }
          }
          docPaths.add(new CategoryPath("field",path));
        }
        try {
          facetFields.addFields(doc,docPaths);
          w.addDocument(doc);
        }
 catch (        IOException ioe) {
          throw new RuntimeException(ioe);
        }
      }
    }
  }
;
  final SearcherTaxonomyManager mgr=new SearcherTaxonomyManager(w,true,null,tw);
  Thread reopener=new Thread(){
    @Override public void run(){
      while (!stop.get()) {
        try {
          Thread.sleep(random().nextInt(20));
          if (VERBOSE) {
            System.out.println("TEST: reopen");
          }
          mgr.maybeRefresh();
          if (VERBOSE) {
            System.out.println("TEST: reopen done");
          }
        }
 catch (        Exception ioe) {
          throw new RuntimeException(ioe);
        }
      }
    }
  }
;
  reopener.start();
  float runTimeSec=TEST_NIGHTLY ? 10.0f : 2.0f;
  long stopTime=System.currentTimeMillis() + (int)(runTimeSec * 1000);
  indexer.start();
  try {
    while (System.currentTimeMillis() < stopTime) {
      SearcherAndTaxonomy pair=mgr.acquire();
      try {
        int topN;
        if (random().nextBoolean()) {
          topN=_TestUtil.nextInt(random(),1,20);
        }
 else {
          topN=Integer.MAX_VALUE;
        }
        FacetSearchParams fsp=new FacetSearchParams(new CountFacetRequest(new CategoryPath("field"),topN));
        FacetsCollector fc=FacetsCollector.create(fsp,pair.searcher.getIndexReader(),pair.taxonomyReader);
        pair.searcher.search(new MatchAllDocsQuery(),fc);
        List<FacetResult> results=fc.getFacetResults();
        FacetResult fr=results.get(0);
        FacetResultNode root=results.get(0).getFacetResultNode();
        assertTrue(root.ordinal != 0);
        if (pair.searcher.getIndexReader().numDocs() > 0) {
          assertTrue(fr.getNumValidDescendants() > 0);
          assertFalse(root.subResults.isEmpty());
        }
      }
  finally {
        mgr.release(pair);
      }
    }
  }
  finally {
    stop.set(true);
    indexer.join();
    reopener.join();
  }
  if (VERBOSE) {
    System.out.println("TEST: now stop");
  }
  IOUtils.close(mgr,tw,w,taxoDir,dir);
}
