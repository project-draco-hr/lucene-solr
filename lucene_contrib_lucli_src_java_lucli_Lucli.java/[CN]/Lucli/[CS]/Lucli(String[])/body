{
  String line;
  historyFile=System.getProperty("user.home") + File.separator + HISTORYFILE;
  addCommand("info",INFO,"Display info about the current Lucene index. Example: info");
  addCommand("search",SEARCH,"Search the current index. Example: search foo",1);
  addCommand("count",COUNT,"Return the number of hits for a search. Example: count foo",1);
  addCommand("optimize",OPTIMIZE,"Optimize the current index");
  addCommand("quit",QUIT,"Quit/exit the program");
  addCommand("help",HELP,"Display help about commands");
  addCommand("terms",TERMS,"Show the first " + MAX_TERMS + " terms in this index. Supply a field name to only show terms in a specific field. Example: terms");
  addCommand("index",INDEX,"Choose a different lucene index. Example index my_index",1);
  addCommand("tokens",TOKENS,"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo",1);
  addCommand("explain",EXPLAIN,"Explanation that describes how the document scored against query. Example: explain foo",1);
  addCommand("analyzer",ANALYZER,"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer",1);
  parseArgs(args);
  ConsoleReader cr=new ConsoleReader();
  cr.setHistory(new History(new File(historyFile)));
  Completor[] comp=new Completor[]{new SimpleCompletor(getCommandsAsArray()),new FileNameCompletor()};
  cr.addCompletor(new ArgumentCompletor(comp));
  luceneMethods=new LuceneMethods(DEFAULT_INDEX);
  while (true) {
    try {
      line=cr.readLine("lucli> ");
      if (line != null) {
        handleCommand(line,cr);
      }
    }
 catch (    java.io.EOFException eof) {
      System.out.println("");
      exit();
    }
catch (    UnsupportedEncodingException enc) {
      enc.printStackTrace(System.err);
    }
catch (    ParseException pe) {
      pe.printStackTrace(System.err);
    }
catch (    IOException ioe) {
      ioe.printStackTrace(System.err);
    }
  }
}
