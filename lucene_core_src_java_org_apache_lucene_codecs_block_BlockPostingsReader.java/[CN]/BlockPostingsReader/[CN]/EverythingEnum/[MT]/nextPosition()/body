{
  if (DEBUG) {
    System.out.println("    FPR.nextPosition posPendingCount=" + posPendingCount + " posBufferUpto="+ posBufferUpto+ " payloadByteUpto="+ payloadByteUpto);
  }
  if (posPendingFP != -1) {
    if (DEBUG) {
      System.out.println("      seek pos to pendingFP=" + posPendingFP);
    }
    posIn.seek(posPendingFP);
    posPendingFP=-1;
    if (payPendingFP != -1) {
      if (DEBUG) {
        System.out.println("      seek pay to pendingFP=" + payPendingFP);
      }
      payIn.seek(payPendingFP);
      payPendingFP=-1;
    }
    posBufferUpto=blockSize;
  }
  if (indexHasPayloads) {
    if (DEBUG) {
      if (payloadLength != 0) {
        System.out.println("      skip unread payload length=" + payloadLength);
      }
    }
    payloadByteUpto+=payloadLength;
    payloadLength=0;
  }
  if (posPendingCount > freq) {
    skipPositions();
    posPendingCount=freq;
  }
  if (posBufferUpto == blockSize) {
    refillPositions();
    posBufferUpto=0;
  }
  position+=posDeltaBuffer[posBufferUpto];
  if (indexHasPayloads) {
    payloadLength=payloadLengthBuffer[posBufferUpto];
  }
  if (indexHasOffsets) {
    startOffset=lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];
    endOffset=startOffset + offsetLengthBuffer[posBufferUpto];
    lastStartOffset=startOffset;
  }
  posBufferUpto++;
  posPendingCount--;
  if (DEBUG) {
    System.out.println("      return pos=" + position);
  }
  return position;
}
