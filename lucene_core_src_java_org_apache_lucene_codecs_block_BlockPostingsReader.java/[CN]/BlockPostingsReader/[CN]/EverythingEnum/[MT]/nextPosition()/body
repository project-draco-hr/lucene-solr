{
  if (posPendingFP != -1) {
    posIn.seek(posPendingFP);
    posPendingFP=-1;
    if (payPendingFP != -1) {
      payIn.seek(payPendingFP);
      payPendingFP=-1;
    }
    posBufferUpto=BLOCK_SIZE;
  }
  if (posPendingCount > freq) {
    skipPositions();
    posPendingCount=freq;
  }
  if (posBufferUpto == BLOCK_SIZE) {
    refillPositions();
    posBufferUpto=0;
  }
  position+=posDeltaBuffer[posBufferUpto];
  if (indexHasPayloads) {
    payloadLength=payloadLengthBuffer[posBufferUpto];
    payload.bytes=payloadBytes;
    payload.offset=payloadByteUpto;
    payload.length=payloadLength;
    payloadByteUpto+=payloadLength;
  }
  if (indexHasOffsets) {
    startOffset=lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];
    endOffset=startOffset + offsetLengthBuffer[posBufferUpto];
    lastStartOffset=startOffset;
  }
  posBufferUpto++;
  posPendingCount--;
  return position;
}
