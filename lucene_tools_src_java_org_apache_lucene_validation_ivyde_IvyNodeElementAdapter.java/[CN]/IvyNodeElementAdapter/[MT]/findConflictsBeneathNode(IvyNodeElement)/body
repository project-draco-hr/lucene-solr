{
  Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap=new HashMap<>();
  IvyNodeElement[] deepDependencies=node.getDeepDependencies();
  for (int i=0; i < deepDependencies.length; i++) {
    if (deepDependencies[i].isEvicted())     continue;
    ModuleId moduleId=deepDependencies[i].getModuleRevisionId().getModuleId();
    if (moduleRevisionMap.containsKey(moduleId)) {
      Collection<IvyNodeElement> conflicts=moduleRevisionMap.get(moduleId);
      conflicts.add(deepDependencies[i]);
      for (Iterator iter=conflicts.iterator(); iter.hasNext(); ) {
        IvyNodeElement conflict=(IvyNodeElement)iter.next();
        conflict.setConflicts(conflicts);
      }
    }
 else {
      List<IvyNodeElement> immutableMatchingSet=Arrays.asList(deepDependencies[i]);
      moduleRevisionMap.put(moduleId,new HashSet<>(immutableMatchingSet));
    }
  }
}
