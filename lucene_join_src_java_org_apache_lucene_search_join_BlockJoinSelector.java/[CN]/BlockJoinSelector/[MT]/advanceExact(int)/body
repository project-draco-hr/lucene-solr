{
  if (targetParentDocID < docID) {
    throw new IllegalArgumentException("target must be after the current document: current=" + docID + " target="+ targetParentDocID);
  }
  int previousDocId=docID;
  docID=targetParentDocID;
  if (targetParentDocID == previousDocId) {
    return ord != -1;
  }
  docID=targetParentDocID;
  ord=-1;
  if (parents.get(targetParentDocID) == false) {
    return false;
  }
  int prevParentDocId=docID == 0 ? -1 : parents.prevSetBit(docID - 1);
  int childDoc=values.docID();
  if (childDoc <= prevParentDocId) {
    childDoc=values.advance(prevParentDocId + 1);
  }
  if (childDoc >= docID) {
    return false;
  }
  boolean hasValue=false;
  for (int doc=values.docID(); doc < docID; doc=values.nextDoc()) {
    if (children.get(doc)) {
      ord=values.ordValue();
      hasValue=true;
      values.nextDoc();
      break;
    }
  }
  if (hasValue == false) {
    return false;
  }
  for (int doc=values.docID(); doc < docID; doc=values.nextDoc()) {
    if (children.get(doc)) {
switch (selection) {
case MIN:
        ord=Math.min(ord,values.ordValue());
      break;
case MAX:
    ord=Math.max(ord,values.ordValue());
  break;
default :
throw new AssertionError();
}
}
}
return true;
}
