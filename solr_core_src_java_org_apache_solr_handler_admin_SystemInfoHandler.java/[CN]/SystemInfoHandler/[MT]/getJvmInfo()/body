{
  SimpleOrderedMap<Object> jvm=new SimpleOrderedMap<Object>();
  jvm.add("version",System.getProperty("java.vm.version"));
  jvm.add("name",System.getProperty("java.vm.name"));
  Runtime runtime=Runtime.getRuntime();
  jvm.add("processors",runtime.availableProcessors());
  DecimalFormat df=new DecimalFormat("#.#",DecimalFormatSymbols.getInstance(Locale.ROOT));
  SimpleOrderedMap<Object> mem=new SimpleOrderedMap<Object>();
  SimpleOrderedMap<Object> raw=new SimpleOrderedMap<Object>();
  long free=runtime.freeMemory();
  long max=runtime.maxMemory();
  long total=runtime.totalMemory();
  long used=total - free;
  double percentUsed=((double)(used) / (double)max) * 100;
  raw.add("free",free);
  mem.add("free",humanReadableUnits(free,df));
  raw.add("total",total);
  mem.add("total",humanReadableUnits(total,df));
  raw.add("max",max);
  mem.add("max",humanReadableUnits(max,df));
  raw.add("used",used);
  mem.add("used",humanReadableUnits(used,df) + " (%" + df.format(percentUsed)+ ")");
  raw.add("used%",percentUsed);
  mem.add("raw",raw);
  jvm.add("memory",mem);
  SimpleOrderedMap<Object> jmx=new SimpleOrderedMap<Object>();
  try {
    RuntimeMXBean mx=ManagementFactory.getRuntimeMXBean();
    jmx.add("bootclasspath",mx.getBootClassPath());
    jmx.add("classpath",mx.getClassPath());
    jmx.add("commandLineArgs",mx.getInputArguments());
    jmx.add("startTime",new Date(mx.getStartTime()));
    jmx.add("upTimeMS",mx.getUptime());
  }
 catch (  Exception e) {
    log.warn("Error getting JMX properties",e);
  }
  jvm.add("jmx",jmx);
  return jvm;
}
