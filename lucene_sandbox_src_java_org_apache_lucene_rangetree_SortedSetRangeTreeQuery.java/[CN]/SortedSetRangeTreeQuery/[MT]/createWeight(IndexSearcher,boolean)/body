{
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      LeafReader reader=context.reader();
      final SortedSetDocValues ssdv=reader.getSortedSetDocValues(field);
      if (ssdv == null) {
        return null;
      }
      if (ssdv instanceof RangeTreeSortedSetDocValues == false) {
        throw new IllegalStateException("field \"" + field + "\" was not indexed with RangeTreeDocValuesFormat: got: "+ ssdv);
      }
      RangeTreeSortedSetDocValues treeDV=(RangeTreeSortedSetDocValues)ssdv;
      RangeTreeReader tree=treeDV.getRangeTreeReader();
      final long minOrdIncl;
      if (minValue == null) {
        minOrdIncl=0;
      }
 else {
        long ord=ssdv.lookupTerm(minValue);
        if (ord >= 0) {
          if (minInclusive) {
            minOrdIncl=ord;
          }
 else {
            minOrdIncl=ord + 1;
          }
        }
 else {
          minOrdIncl=-ord - 1;
        }
      }
      final long maxOrdIncl;
      if (maxValue == null) {
        maxOrdIncl=Long.MAX_VALUE;
      }
 else {
        long ord=ssdv.lookupTerm(maxValue);
        if (ord >= 0) {
          if (maxInclusive) {
            maxOrdIncl=ord;
          }
 else {
            maxOrdIncl=ord - 1;
          }
        }
 else {
          maxOrdIncl=-ord - 2;
        }
      }
      if (maxOrdIncl < minOrdIncl) {
        return null;
      }
      SortedNumericDocValues ords=new SortedNumericDocValues(){
        private long[] ords=new long[2];
        private int count;
        @Override public void setDocument(        int doc){
          ssdv.setDocument(doc);
          long ord;
          count=0;
          while ((ord=ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
            if (count == ords.length) {
              ords=ArrayUtil.grow(ords,count + 1);
            }
            ords[count++]=ord;
          }
        }
        @Override public int count(){
          return count;
        }
        @Override public long valueAt(        int index){
          return ords[index];
        }
      }
;
      DocIdSet result=tree.intersect(minOrdIncl,maxOrdIncl,ords,context.reader().maxDoc());
      final DocIdSetIterator disi=result.iterator();
      return new ConstantScoreScorer(this,score(),disi);
    }
  }
;
}
