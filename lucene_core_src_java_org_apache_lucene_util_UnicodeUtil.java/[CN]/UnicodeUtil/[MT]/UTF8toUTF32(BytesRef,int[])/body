{
  int utf32Count=0;
  int utf8Upto=utf8.offset;
  final byte[] bytes=utf8.bytes;
  final int utf8Limit=utf8.offset + utf8.length;
  while (utf8Upto < utf8Limit) {
    final int numBytes=utf8CodeLength[bytes[utf8Upto] & 0xFF];
    int v=0;
switch (numBytes) {
case 1:
      ints[utf32Count++]=bytes[utf8Upto++];
    continue;
case 2:
  v=bytes[utf8Upto++] & 31;
break;
case 3:
v=bytes[utf8Upto++] & 15;
break;
case 4:
v=bytes[utf8Upto++] & 7;
break;
default :
throw new IllegalArgumentException("invalid utf8");
}
final int limit=utf8Upto + numBytes - 1;
while (utf8Upto < limit) {
v=v << 6 | bytes[utf8Upto++] & 63;
}
ints[utf32Count++]=v;
}
return utf32Count;
}
