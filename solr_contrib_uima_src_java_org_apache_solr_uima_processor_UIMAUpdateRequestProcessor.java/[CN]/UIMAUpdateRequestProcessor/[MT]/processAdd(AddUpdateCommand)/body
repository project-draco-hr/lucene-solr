{
  String text=null;
  try {
    SolrInputDocument solrInputDocument=cmd.getSolrInputDocument();
    String[] texts=getTextsToAnalyze(solrInputDocument);
    for (    String currentText : texts) {
      text=currentText;
      if (text != null && text.length() > 0) {
        JCas jcas=pool.getJCas(0);
        try {
          processText(text,jcas);
          UIMAToSolrMapper uimaToSolrMapper=new UIMAToSolrMapper(solrInputDocument,jcas);
          Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap=solrUIMAConfiguration.getTypesFeaturesFieldsMapping();
          for (          Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap.entrySet()) {
            uimaToSolrMapper.map(entry.getKey(),entry.getValue());
          }
        }
  finally {
          pool.releaseJCas(jcas);
        }
      }
    }
  }
 catch (  Exception e) {
    String logField=solrUIMAConfiguration.getLogField();
    if (logField == null) {
      SchemaField uniqueKeyField=cmd.getReq().getSchema().getUniqueKeyField();
      if (uniqueKeyField != null) {
        logField=uniqueKeyField.getName();
      }
    }
    String optionalFieldInfo=logField == null ? "." : new StringBuilder(". ").append(logField).append("=").append((String)cmd.getSolrInputDocument().getField(logField).getValue()).append(", ").toString();
    int len;
    String debugString;
    if (text != null && text.length() > 0) {
      len=Math.min(text.length(),100);
      debugString=new StringBuilder(" text=\"").append(text.substring(0,len)).append("...\"").toString();
    }
 else {
      debugString=" null text";
    }
    if (solrUIMAConfiguration.isIgnoreErrors()) {
      log.warn("skip the text processing due to {}",new StringBuilder().append(e.getLocalizedMessage()).append(optionalFieldInfo).append(debugString));
    }
 else {
      throw new SolrException(ErrorCode.SERVER_ERROR,new StringBuilder("processing error ").append(e.getLocalizedMessage()).append(optionalFieldInfo).append(debugString).toString(),e);
    }
  }
  super.processAdd(cmd);
}
