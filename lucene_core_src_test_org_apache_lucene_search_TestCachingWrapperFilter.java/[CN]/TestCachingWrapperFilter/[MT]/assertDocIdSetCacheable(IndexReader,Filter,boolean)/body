{
  assertTrue(reader.getContext() instanceof LeafReaderContext);
  LeafReaderContext context=(LeafReaderContext)reader.getContext();
  final CachingWrapperFilter cacher=new CachingWrapperFilter(filter,FilterCachingPolicy.ALWAYS_CACHE);
  final DocIdSet originalSet=filter.getDocIdSet(context,context.reader().getLiveDocs());
  final DocIdSet cachedSet=cacher.getDocIdSet(context,context.reader().getLiveDocs());
  if (originalSet == null) {
    assertNull(cachedSet);
  }
  if (cachedSet == null) {
    assertTrue(originalSet == null || originalSet.iterator() == null);
  }
 else {
    assertTrue(cachedSet.isCacheable());
    assertEquals(shouldCacheable,originalSet.isCacheable());
    if (originalSet.isCacheable()) {
      assertEquals("Cached DocIdSet must be of same class like uncached, if cacheable",originalSet.getClass(),cachedSet.getClass());
    }
 else {
      assertTrue("Cached DocIdSet must be a RoaringDocIdSet if the original one was not cacheable",cachedSet instanceof RoaringDocIdSet || cachedSet == null);
    }
  }
}
