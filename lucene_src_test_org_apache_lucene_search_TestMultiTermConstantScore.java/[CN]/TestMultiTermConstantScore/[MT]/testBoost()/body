{
  IndexSearcher search=newSearcher(reader);
  final SimilarityProvider delegate=search.getSimilarityProvider();
  search.setSimilarityProvider(new DefaultSimilarityProvider(){
    @Override public float coord(    int overlap,    int maxOverlap){
      return delegate.coord(overlap,maxOverlap);
    }
    @Override public Similarity get(    String field){
      return delegate.get(field);
    }
  }
);
  Query q=csrq("data","1","6",T,T);
  q.setBoost(100);
  search.search(q,null,new Collector(){
    private int base=0;
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer) throws IOException {
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      assertEquals("score for doc " + (doc + base) + " was not correct",1.0f,scorer.score(),SCORE_COMP_THRESH);
    }
    @Override public void setNextReader(    AtomicReaderContext context){
      base=context.docBase;
    }
    @Override public boolean acceptsDocsOutOfOrder(){
      return true;
    }
  }
);
  Query q1=csrq("data","A","A",T,T);
  q1.setBoost(.1f);
  Query q2=csrq("data","Z","Z",T,T);
  BooleanQuery bq=new BooleanQuery(true);
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  ScoreDoc[] hits=search.search(bq,null,1000).scoreDocs;
  Assert.assertEquals(1,hits[0].doc);
  Assert.assertEquals(0,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
  q1=csrq("data","A","A",T,T,MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
  q1.setBoost(.1f);
  q2=csrq("data","Z","Z",T,T,MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);
  bq=new BooleanQuery(true);
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  hits=search.search(bq,null,1000).scoreDocs;
  Assert.assertEquals(1,hits[0].doc);
  Assert.assertEquals(0,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
  q1=csrq("data","A","A",T,T);
  q1.setBoost(10f);
  q2=csrq("data","Z","Z",T,T);
  bq=new BooleanQuery(true);
  bq.add(q1,BooleanClause.Occur.SHOULD);
  bq.add(q2,BooleanClause.Occur.SHOULD);
  hits=search.search(bq,null,1000).scoreDocs;
  Assert.assertEquals(0,hits[0].doc);
  Assert.assertEquals(1,hits[1].doc);
  assertTrue(hits[0].score > hits[1].score);
}
