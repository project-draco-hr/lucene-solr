{
  int current;
  int nodeCount=getToCount();
  List<PathNode> path=new ArrayList<PathNode>();
  PathNode zeroPath=new PathNode();
  zeroPath.weight=0;
  zeroPath.preNode=0;
  path.add(zeroPath);
  for (current=1; current <= nodeCount; current++) {
    double weight;
    List<SegTokenPair> edges=getToList(current);
    double minWeight=Double.MAX_VALUE;
    SegTokenPair minEdge=null;
    for (    SegTokenPair edge : edges) {
      weight=edge.weight;
      PathNode preNode=path.get(edge.from);
      if (preNode.weight + weight < minWeight) {
        minWeight=preNode.weight + weight;
        minEdge=edge;
      }
    }
    PathNode newNode=new PathNode();
    newNode.weight=minWeight;
    newNode.preNode=minEdge.from;
    path.add(newNode);
  }
  int preNode, lastNode;
  lastNode=path.size() - 1;
  current=lastNode;
  List<Integer> rpath=new ArrayList<Integer>();
  List<SegToken> resultPath=new ArrayList<SegToken>();
  rpath.add(current);
  while (current != 0) {
    PathNode currentPathNode=path.get(current);
    preNode=currentPathNode.preNode;
    rpath.add(Integer.valueOf(preNode));
    current=preNode;
  }
  for (int j=rpath.size() - 1; j >= 0; j--) {
    Integer idInteger=(Integer)rpath.get(j);
    int id=idInteger.intValue();
    SegToken t=segTokenList.get(id);
    resultPath.add(t);
  }
  return resultPath;
}
