def checkAll(dirName):
    '\n  Checks *.html (recursively) under this directory.\n  '
    global failures
    print ()
    print 'Crawl/parse...'
    allFiles = {}
    if os.path.isfile(dirName):
        (root, fileName) = os.path.split(dirName)
        iter = ((root, [], [fileName]),)
    else:
        iter = os.walk(dirName)
    for (root, dirs, files) in iter:
        for f in files:
            (main, ext) = os.path.splitext(f)
            ext = ext.lower()
            if ((ext in ('.htm', '.html')) and (not f.startswith('.#')) and (main not in ('deprecated-list',))):
                fullPath = os.path.join(root, f).replace(os.path.sep, '/')
                fullPath = ('file:%s' % urlparse.quote(fullPath))
                fullPath = urlparse.urlunparse(urlparse.urlparse(fullPath))
                allFiles[fullPath] = parse(fullPath, open(('%s/%s' % (root, f)), encoding='UTF-8').read())
    print ()
    print 'Verify...'
    for (fullPath, (links, anchors)) in allFiles.items():
        printed = False
        for link in links:
            origLink = link
            idx = link.find('#')
            if (idx != (-1)):
                anchor = link[(idx + 1):]
                link = link[:idx]
            else:
                anchor = None
            link = ''.join(link.split())
            idx = link.find('?')
            if (idx != (-1)):
                link = link[:idx]
            if (link.startswith('http://') or link.startswith('https://')):
                if (link.find('lucene.apache.org/java/docs/mailinglists.html') != (-1)):
                    pass
                elif (link == 'http://lucene.apache.org/core/'):
                    pass
                elif (link == 'http://lucene.apache.org/solr/'):
                    pass
                elif (link.find('lucene.apache.org/java/docs/discussion.html') != (-1)):
                    pass
                elif (link.find('lucene.apache.org/core/discussion.html') != (-1)):
                    pass
                elif (link.find('lucene.apache.org/solr/mirrors-solr-latest-redir.html') != (-1)):
                    pass
                elif (link.find('lucene.apache.org/solr/quickstart.html') != (-1)):
                    pass
                elif (((link.find('svn.apache.org') != (-1)) or (link.find('lucene.apache.org') != (-1))) and (os.path.basename(fullPath) != 'Changes.html')):
                    if (not printed):
                        printed = True
                        print ()
                        print fullPath
                    print ('  BAD EXTERNAL LINK: %s' % link)
            elif link.startswith('mailto:'):
                if ((link.find('@lucene.apache.org') == (-1)) and (link.find('@apache.org') != (-1))):
                    if (not printed):
                        printed = True
                        print ()
                        print fullPath
                    print ('  BROKEN MAILTO (?): %s' % link)
            elif link.startswith('javascript:'):
                pass
            elif ('org/apache/solr/client/solrj/beans/Field.html' in link):
                pass
            elif link.startswith('file:'):
                if (link not in allFiles):
                    filepath = urlparse.unquote(urlparse.urlparse(link).path)
                    if (not (os.path.exists(filepath) or os.path.exists(filepath[1:]))):
                        if (not printed):
                            printed = True
                            print ()
                            print fullPath
                        print ('  BROKEN LINK: %s' % link)
            elif ((anchor is not None) and (anchor not in allFiles[link][1])):
                if (not printed):
                    printed = True
                    print ()
                    print fullPath
                print ('  BROKEN ANCHOR: %s' % origLink)
            else:
                if (not printed):
                    printed = True
                    print ()
                    print fullPath
                print ('  BROKEN URL SCHEME: %s' % origLink)
        failures = (failures or printed)
    return failures
