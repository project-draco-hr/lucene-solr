{
  boolean useNarrowRange=random().nextBoolean();
  final Integer valueMin;
  final Integer valueMax;
  int numValues;
  if (useNarrowRange) {
    int gap=random().nextInt(100);
    valueMin=random().nextInt(Integer.MAX_VALUE - gap);
    valueMax=valueMin + gap;
    numValues=TestUtil.nextInt(random(),1,gap + 1);
  }
 else {
    valueMin=null;
    valueMax=null;
    numValues=TestUtil.nextInt(random(),1,100);
  }
  final Set<Integer> valuesSet=new HashSet<>();
  while (valuesSet.size() < numValues) {
    valuesSet.add(randomIntValue(valueMin,valueMax));
  }
  int[] values=toArray(valuesSet);
  int numDocs=TestUtil.nextInt(random(),1,10000);
  if (VERBOSE) {
    System.out.println("TEST: numValues=" + numValues + " numDocs="+ numDocs);
  }
  Directory dir;
  if (numDocs > 100000) {
    dir=newFSDirectory(createTempDir("TestPointQueries"));
  }
 else {
    dir=newDirectory();
  }
  IndexWriterConfig iwc=newIndexWriterConfig();
  iwc.setCodec(getCodec());
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,iwc);
  int[] docValues=new int[numDocs];
  for (int i=0; i < numDocs; i++) {
    int x=values[random().nextInt(values.length)];
    Document doc=new Document();
    doc.add(new IntPoint("int",x));
    docValues[i]=x;
    w.addDocument(doc);
  }
  if (random().nextBoolean()) {
    if (VERBOSE) {
      System.out.println("  forceMerge(1)");
    }
    w.forceMerge(1);
  }
  final IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r,false);
  int numThreads=TestUtil.nextInt(random(),2,5);
  if (VERBOSE) {
    System.out.println("TEST: use " + numThreads + " query threads; searcher="+ s);
  }
  List<Thread> threads=new ArrayList<>();
  final int iters=atLeast(100);
  final CountDownLatch startingGun=new CountDownLatch(1);
  final AtomicBoolean failed=new AtomicBoolean();
  for (int i=0; i < numThreads; i++) {
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          _run();
        }
 catch (        Exception e) {
          failed.set(true);
          throw new RuntimeException(e);
        }
      }
      private void _run() throws Exception {
        startingGun.await();
        for (int iter=0; iter < iters && failed.get() == false; iter++) {
          int numValidValuesToQuery=random().nextInt(values.length);
          Set<Integer> valuesToQuery=new HashSet<>();
          while (valuesToQuery.size() < numValidValuesToQuery) {
            valuesToQuery.add(values[random().nextInt(values.length)]);
          }
          int numExtraValuesToQuery=random().nextInt(20);
          while (valuesToQuery.size() < numValidValuesToQuery + numExtraValuesToQuery) {
            valuesToQuery.add(random().nextInt());
          }
          int expectedCount=0;
          for (          int value : docValues) {
            if (valuesToQuery.contains(value)) {
              expectedCount++;
            }
          }
          if (VERBOSE) {
            System.out.println("TEST: thread=" + Thread.currentThread() + " values="+ valuesToQuery+ " expectedCount="+ expectedCount);
          }
          assertEquals(expectedCount,s.count(IntPoint.newSetQuery("int",toArray(valuesToQuery))));
        }
      }
    }
;
    thread.setName("T" + i);
    thread.start();
    threads.add(thread);
  }
  startingGun.countDown();
  for (  Thread thread : threads) {
    thread.join();
  }
  IOUtils.close(r,dir);
}
