{
  IndexWriterConfig iwc=newIndexWriterConfig();
  int numDims=docValues[0].length;
  int bytesPerDim=docValues[0][0].length;
  int mbd=iwc.getMaxBufferedDocs();
  if (mbd != -1 && mbd < docValues.length / 100) {
    iwc.setMaxBufferedDocs(docValues.length / 100);
  }
  iwc.setCodec(getCodec());
  Directory dir;
  if (docValues.length > 100000) {
    dir=newFSDirectory(createTempDir("TestPointQueries"));
  }
 else {
    dir=newDirectory();
  }
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,iwc);
  int numValues=docValues.length;
  if (VERBOSE) {
    System.out.println("TEST: numValues=" + numValues + " numDims="+ numDims+ " numBytesPerDim="+ numBytesPerDim);
  }
  int missingPct=random().nextInt(100);
  int deletedPct=random().nextInt(100);
  if (VERBOSE) {
    System.out.println("  missingPct=" + missingPct);
    System.out.println("  deletedPct=" + deletedPct);
  }
  BitSet missing=new BitSet();
  BitSet deleted=new BitSet();
  Document doc=null;
  int lastID=-1;
  for (int ord=0; ord < numValues; ord++) {
    int id=ids[ord];
    if (id != lastID) {
      if (random().nextInt(100) < missingPct) {
        missing.set(id);
        if (VERBOSE) {
          System.out.println("  missing id=" + id);
        }
      }
      if (doc != null) {
        w.addDocument(doc);
        if (random().nextInt(100) < deletedPct) {
          int idToDelete=random().nextInt(id);
          w.deleteDocuments(new Term("id","" + idToDelete));
          deleted.set(idToDelete);
          if (VERBOSE) {
            System.out.println("  delete id=" + idToDelete);
          }
        }
      }
      doc=new Document();
      doc.add(newStringField("id","" + id,Field.Store.NO));
      doc.add(new NumericDocValuesField("id",id));
      lastID=id;
    }
    if (missing.get(id) == false) {
      doc.add(new BinaryPoint("value",docValues[ord]));
      if (VERBOSE) {
        System.out.println("id=" + id);
        for (int dim=0; dim < numDims; dim++) {
          System.out.println("  dim=" + dim + " value="+ bytesToString(docValues[ord][dim]));
        }
      }
    }
  }
  w.addDocument(doc);
  if (random().nextBoolean()) {
    if (VERBOSE) {
      System.out.println("  forceMerge(1)");
    }
    w.forceMerge(1);
  }
  final IndexReader r=w.getReader();
  w.close();
  IndexSearcher s=newSearcher(r,false);
  int numThreads=TestUtil.nextInt(random(),2,5);
  if (VERBOSE) {
    System.out.println("TEST: use " + numThreads + " query threads; searcher="+ s);
  }
  List<Thread> threads=new ArrayList<>();
  final int iters=atLeast(100);
  final CountDownLatch startingGun=new CountDownLatch(1);
  final AtomicBoolean failed=new AtomicBoolean();
  for (int i=0; i < numThreads; i++) {
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          _run();
        }
 catch (        Exception e) {
          failed.set(true);
          throw new RuntimeException(e);
        }
      }
      private void _run() throws Exception {
        startingGun.await();
        NumericDocValues docIDToID=MultiDocValues.getNumericValues(r,"id");
        for (int iter=0; iter < iters && failed.get() == false; iter++) {
          byte[][] lower=new byte[numDims][];
          byte[][] upper=new byte[numDims][];
          for (int dim=0; dim < numDims; dim++) {
            lower[dim]=new byte[bytesPerDim];
            random().nextBytes(lower[dim]);
            upper[dim]=new byte[bytesPerDim];
            random().nextBytes(upper[dim]);
            if (StringHelper.compare(bytesPerDim,lower[dim],0,upper[dim],0) > 0) {
              byte[] x=lower[dim];
              lower[dim]=upper[dim];
              upper[dim]=x;
            }
          }
          if (VERBOSE) {
            System.out.println("\n" + Thread.currentThread().getName() + ": TEST: iter="+ iter);
            for (int dim=0; dim < numDims; dim++) {
              System.out.println("  dim=" + dim + " "+ bytesToString(lower[dim])+ " TO "+ bytesToString(upper[dim]));
            }
          }
          Query query=BinaryPoint.newRangeQuery("value",lower,upper);
          if (VERBOSE) {
            System.out.println(Thread.currentThread().getName() + ":  using query: " + query);
          }
          final BitSet hits=new BitSet();
          s.search(query,new SimpleCollector(){
            private int docBase;
            @Override public boolean needsScores(){
              return false;
            }
            @Override protected void doSetNextReader(            LeafReaderContext context) throws IOException {
              docBase=context.docBase;
            }
            @Override public void collect(            int doc){
              hits.set(docBase + doc);
            }
          }
);
          if (VERBOSE) {
            System.out.println(Thread.currentThread().getName() + ":  hitCount: " + hits.cardinality());
          }
          BitSet expected=new BitSet();
          for (int ord=0; ord < numValues; ord++) {
            int id=ids[ord];
            if (missing.get(id) == false && deleted.get(id) == false && matches(bytesPerDim,lower,upper,docValues[ord])) {
              expected.set(id);
            }
          }
          int failCount=0;
          for (int docID=0; docID < r.maxDoc(); docID++) {
            int id=(int)docIDToID.get(docID);
            if (hits.get(docID) != expected.get(id)) {
              System.out.println("FAIL: iter=" + iter + " id="+ id+ " docID="+ docID+ " expected="+ expected.get(id)+ " but got "+ hits.get(docID)+ " deleted?="+ deleted.get(id)+ " missing?="+ missing.get(id));
              for (int dim=0; dim < numDims; dim++) {
                System.out.println("  dim=" + dim + " range: "+ bytesToString(lower[dim])+ " TO "+ bytesToString(upper[dim]));
                failCount++;
              }
            }
          }
          if (failCount != 0) {
            fail(failCount + " hits were wrong");
          }
        }
      }
    }
;
    thread.setName("T" + i);
    thread.start();
    threads.add(thread);
  }
  startingGun.countDown();
  for (  Thread thread : threads) {
    thread.join();
  }
  IOUtils.close(r,dir);
}
