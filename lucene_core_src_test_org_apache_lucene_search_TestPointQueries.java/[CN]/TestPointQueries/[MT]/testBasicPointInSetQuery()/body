{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig();
  iwc.setCodec(getCodec());
  IndexWriter w=new IndexWriter(dir,iwc);
  Document doc=new Document();
  doc.add(new IntPoint("int",17));
  doc.add(new LongPoint("long",17L));
  doc.add(new FloatPoint("float",17.0f));
  doc.add(new DoublePoint("double",17.0));
  doc.add(new BinaryPoint("bytes",new byte[]{0,17}));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new IntPoint("int",42));
  doc.add(new LongPoint("long",42L));
  doc.add(new FloatPoint("float",42.0f));
  doc.add(new DoublePoint("double",42.0));
  doc.add(new BinaryPoint("bytes",new byte[]{0,42}));
  w.addDocument(doc);
  doc=new Document();
  doc.add(new IntPoint("int",97));
  doc.add(new LongPoint("long",97L));
  doc.add(new FloatPoint("float",97.0f));
  doc.add(new DoublePoint("double",97.0));
  doc.add(new BinaryPoint("bytes",new byte[]{0,97}));
  w.addDocument(doc);
  IndexReader r=DirectoryReader.open(w);
  IndexSearcher s=newSearcher(r);
  assertEquals(0,s.count(IntPoint.newSetQuery("int",16)));
  assertEquals(1,s.count(IntPoint.newSetQuery("int",17)));
  assertEquals(3,s.count(IntPoint.newSetQuery("int",17,97,42)));
  assertEquals(3,s.count(IntPoint.newSetQuery("int",-7,17,42,97)));
  assertEquals(3,s.count(IntPoint.newSetQuery("int",17,20,42,97)));
  assertEquals(3,s.count(IntPoint.newSetQuery("int",17,105,42,97)));
  assertEquals(0,s.count(LongPoint.newSetQuery("long",16)));
  assertEquals(1,s.count(LongPoint.newSetQuery("long",17)));
  assertEquals(3,s.count(LongPoint.newSetQuery("long",17,97,42)));
  assertEquals(3,s.count(LongPoint.newSetQuery("long",-7,17,42,97)));
  assertEquals(3,s.count(LongPoint.newSetQuery("long",17,20,42,97)));
  assertEquals(3,s.count(LongPoint.newSetQuery("long",17,105,42,97)));
  assertEquals(0,s.count(FloatPoint.newSetQuery("float",16)));
  assertEquals(1,s.count(FloatPoint.newSetQuery("float",17)));
  assertEquals(3,s.count(FloatPoint.newSetQuery("float",17,97,42)));
  assertEquals(3,s.count(FloatPoint.newSetQuery("float",-7,17,42,97)));
  assertEquals(3,s.count(FloatPoint.newSetQuery("float",17,20,42,97)));
  assertEquals(3,s.count(FloatPoint.newSetQuery("float",17,105,42,97)));
  assertEquals(0,s.count(DoublePoint.newSetQuery("double",16)));
  assertEquals(1,s.count(DoublePoint.newSetQuery("double",17)));
  assertEquals(3,s.count(DoublePoint.newSetQuery("double",17,97,42)));
  assertEquals(3,s.count(DoublePoint.newSetQuery("double",-7,17,42,97)));
  assertEquals(3,s.count(DoublePoint.newSetQuery("double",17,20,42,97)));
  assertEquals(3,s.count(DoublePoint.newSetQuery("double",17,105,42,97)));
  assertEquals(0,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,16})));
  assertEquals(1,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,17})));
  assertEquals(3,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,17},new byte[]{0,97},new byte[]{0,42})));
  assertEquals(3,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,-7},new byte[]{0,17},new byte[]{0,42},new byte[]{0,97})));
  assertEquals(3,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,17},new byte[]{0,20},new byte[]{0,42},new byte[]{0,97})));
  assertEquals(3,s.count(BinaryPoint.newSetQuery("bytes",new byte[]{0,17},new byte[]{0,105},new byte[]{0,42},new byte[]{0,97})));
  w.close();
  r.close();
  dir.close();
}
