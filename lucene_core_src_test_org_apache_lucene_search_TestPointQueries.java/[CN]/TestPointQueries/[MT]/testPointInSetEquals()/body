{
  Query q1=IntPoint.newSetQuery("a",0,1000,17);
  Query q2=IntPoint.newSetQuery("a",17,0,1000);
  assertEquals(q1,q2);
  assertEquals(q1.hashCode(),q2.hashCode());
  assertFalse(q1.equals(IntPoint.newSetQuery("a",1,17,1000)));
  q1=LongPoint.newSetQuery("a",0,1000,17);
  q2=LongPoint.newSetQuery("a",17,0,1000);
  assertEquals(q1,q2);
  assertEquals(q1.hashCode(),q2.hashCode());
  assertFalse(q1.equals(LongPoint.newSetQuery("a",1,17,1000)));
  q1=FloatPoint.newSetQuery("a",0,1000,17);
  q2=FloatPoint.newSetQuery("a",17,0,1000);
  assertEquals(q1,q2);
  assertEquals(q1.hashCode(),q2.hashCode());
  assertFalse(q1.equals(FloatPoint.newSetQuery("a",1,17,1000)));
  q1=DoublePoint.newSetQuery("a",0,1000,17);
  q2=DoublePoint.newSetQuery("a",17,0,1000);
  assertEquals(q1,q2);
  assertEquals(q1.hashCode(),q2.hashCode());
  assertFalse(q1.equals(DoublePoint.newSetQuery("a",1,17,1000)));
  byte[] zeros=new byte[5];
  byte[] ones=new byte[5];
  Arrays.fill(ones,(byte)0xff);
  q1=BinaryPoint.newSetQuery("a",new byte[][]{zeros,ones});
  q2=BinaryPoint.newSetQuery("a",new byte[][]{zeros,ones});
  assertEquals(q1,q2);
  assertEquals(q1.hashCode(),q2.hashCode());
  byte[] other=ones.clone();
  other[2]=(byte)5;
  assertFalse(q1.equals(BinaryPoint.newSetQuery("a",new byte[][]{zeros,other})));
}
