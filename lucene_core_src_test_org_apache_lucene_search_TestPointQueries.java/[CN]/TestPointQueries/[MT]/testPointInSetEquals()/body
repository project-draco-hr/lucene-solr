{
  Query q=IntPoint.newSetQuery("a",0,1000,17);
  assertEquals(q,IntPoint.newSetQuery("a",17,0,1000));
  assertFalse(q.equals(IntPoint.newSetQuery("a",1,17,1000)));
  q=LongPoint.newSetQuery("a",0,1000,17);
  assertEquals(q,LongPoint.newSetQuery("a",17,0,1000));
  assertFalse(q.equals(LongPoint.newSetQuery("a",1,17,1000)));
  q=FloatPoint.newSetQuery("a",0,1000,17);
  assertEquals(q,FloatPoint.newSetQuery("a",17,0,1000));
  assertFalse(q.equals(FloatPoint.newSetQuery("a",1,17,1000)));
  q=DoublePoint.newSetQuery("a",0,1000,17);
  assertEquals(q,DoublePoint.newSetQuery("a",17,0,1000));
  assertFalse(q.equals(DoublePoint.newSetQuery("a",1,17,1000)));
  byte[] zeros=new byte[5];
  byte[] ones=new byte[5];
  Arrays.fill(ones,(byte)0xff);
  q=BinaryPoint.newSetQuery("a",new byte[][]{zeros,ones});
  assertEquals(q,BinaryPoint.newSetQuery("a",new byte[][]{zeros,ones}));
  byte[] other=ones.clone();
  other[2]=(byte)5;
  assertFalse(q.equals(BinaryPoint.newSetQuery("a",new byte[][]{zeros,other})));
}
