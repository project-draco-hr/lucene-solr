{
  return new FieldComparator.TermOrdValComparator(numHits,getField(),missingValue == STRING_LAST){
    @Override protected SortedDocValues getSortedDocValues(    AtomicReaderContext context,    String field) throws IOException {
      SortedSetDocValues sortedSet=FieldCache.DEFAULT.getDocTermOrds(context.reader(),field);
      if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {
        throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) + " unique terms are unsupported");
      }
      if (sortedSet instanceof SingletonSortedSetDocValues) {
        return ((SingletonSortedSetDocValues)sortedSet).getSortedDocValues();
      }
 else       if (selector == Selector.MIN) {
        return new MinValue(sortedSet);
      }
 else {
        if (sortedSet instanceof RandomAccessOrds == false) {
          throw new UnsupportedOperationException("codec does not support random access ordinals, cannot use selector: " + selector);
        }
        RandomAccessOrds randomOrds=(RandomAccessOrds)sortedSet;
switch (selector) {
case MAX:
          return new MaxValue(randomOrds);
case MIDDLE_MIN:
        return new MiddleMinValue(randomOrds);
case MIDDLE_MAX:
      return new MiddleMaxValue(randomOrds);
case MIN:
default :
    throw new AssertionError();
}
}
}
}
;
}
