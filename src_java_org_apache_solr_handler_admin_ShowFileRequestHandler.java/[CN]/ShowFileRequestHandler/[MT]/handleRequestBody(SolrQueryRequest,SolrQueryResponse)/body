{
  File adminFile=null;
  final SolrResourceLoader loader=req.getCore().getResourceLoader();
  File configdir=new File(loader.getConfigDir());
  String fname=req.getParams().get("file",null);
  if (fname == null) {
    adminFile=configdir;
  }
 else {
    fname=fname.replace('\\','/');
    if (hiddenFiles.contains(fname.toUpperCase())) {
      throw new SolrException(ErrorCode.FORBIDDEN,"Can not access: " + fname);
    }
    if (fname.indexOf("..") >= 0) {
      throw new SolrException(ErrorCode.FORBIDDEN,"Invalid path: " + fname);
    }
    adminFile=new File(configdir,fname);
  }
  if (!adminFile.exists()) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Can not find: " + adminFile.getName() + " ["+ adminFile.getAbsolutePath()+ "]");
  }
  if (!adminFile.canRead() || adminFile.isHidden()) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Can not show: " + adminFile.getName() + " ["+ adminFile.getAbsolutePath()+ "]");
  }
  RequestHandlerUtils.addExperimentalFormatWarning(rsp);
  if (adminFile.isDirectory()) {
    int basePath=configdir.getAbsolutePath().length() + 1;
    NamedList<SimpleOrderedMap<Object>> files=new SimpleOrderedMap<SimpleOrderedMap<Object>>();
    for (    File f : adminFile.listFiles()) {
      String path=f.getAbsolutePath().substring(basePath);
      path=path.replace('\\','/');
      if (hiddenFiles.contains(path.toUpperCase())) {
        continue;
      }
      if (f.isHidden() || f.getName().startsWith(".")) {
        continue;
      }
      SimpleOrderedMap<Object> fileInfo=new SimpleOrderedMap<Object>();
      files.add(path,fileInfo);
      if (f.isDirectory()) {
        fileInfo.add("directory",true);
      }
 else {
        fileInfo.add("size",f.length());
      }
      fileInfo.add("modified",new Date(f.lastModified()));
    }
    rsp.add("files",files);
  }
 else {
    final String contentType=req.getParams().get(USE_CONTENT_TYPE);
    final File file=adminFile;
    ContentStream stream=new ContentStream(){
      public String getName(){
        return file.getName();
      }
      public Long getSize(){
        return file.length();
      }
      public String getSourceInfo(){
        return null;
      }
      public String getContentType(){
        if (contentType != null) {
          return contentType;
        }
        return null;
      }
      public InputStream getStream() throws IOException {
        return loader.openResource(file.getPath());
      }
      public Reader getReader() throws IOException {
        return new FileReader(file);
      }
    }
;
    rsp.add(RawResponseWriter.CONTENT,stream);
  }
}
