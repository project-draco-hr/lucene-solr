{
  final Document doc2=new Document();
  for (  IndexableField f : doc1.getFields()) {
    final Field field1=(Field)f;
    final Field field2;
    final DocValuesType dvType=field1.fieldType().docValuesType();
    final int dimCount=field1.fieldType().dimensionCount();
    final LegacyNumericType numType=field1.fieldType().numericType();
    if (dvType != DocValuesType.NONE) {
switch (dvType) {
case NUMERIC:
        field2=new NumericDocValuesField(field1.name(),field1.numericValue().longValue());
      break;
case BINARY:
    field2=new BinaryDocValuesField(field1.name(),field1.binaryValue());
  break;
case SORTED:
field2=new SortedDocValuesField(field1.name(),field1.binaryValue());
break;
default :
throw new IllegalStateException("unknown Type: " + dvType);
}
}
 else if (dimCount != 0) {
BytesRef br=field1.binaryValue();
byte[] bytes=new byte[br.length];
System.arraycopy(br.bytes,br.offset,bytes,0,br.length);
field2=new DimensionalBinaryField(field1.name(),bytes,field1.fieldType());
}
 else if (numType != null) {
switch (numType) {
case INT:
field2=new LegacyIntField(field1.name(),field1.numericValue().intValue(),field1.fieldType());
break;
case FLOAT:
field2=new LegacyFloatField(field1.name(),field1.numericValue().intValue(),field1.fieldType());
break;
case LONG:
field2=new LegacyLongField(field1.name(),field1.numericValue().intValue(),field1.fieldType());
break;
case DOUBLE:
field2=new LegacyDoubleField(field1.name(),field1.numericValue().intValue(),field1.fieldType());
break;
default :
throw new IllegalStateException("unknown Type: " + numType);
}
}
 else {
field2=new Field(field1.name(),field1.stringValue(),field1.fieldType());
}
doc2.add(field2);
}
return doc2;
}
