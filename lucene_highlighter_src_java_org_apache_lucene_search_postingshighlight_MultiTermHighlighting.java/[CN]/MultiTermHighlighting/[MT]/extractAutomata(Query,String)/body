{
  List<CharacterRunAutomaton> list=new ArrayList<>();
  if (query instanceof BooleanQuery) {
    BooleanClause clauses[]=((BooleanQuery)query).getClauses();
    for (    BooleanClause clause : clauses) {
      if (!clause.isProhibited()) {
        list.addAll(Arrays.asList(extractAutomata(clause.getQuery(),field)));
      }
    }
  }
 else   if (query instanceof FilteredQuery) {
    list.addAll(Arrays.asList(extractAutomata(((FilteredQuery)query).getQuery(),field)));
  }
 else   if (query instanceof ConstantScoreQuery) {
    list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery)query).getQuery(),field)));
  }
 else   if (query instanceof DisjunctionMaxQuery) {
    for (    Query sub : ((DisjunctionMaxQuery)query).getDisjuncts()) {
      list.addAll(Arrays.asList(extractAutomata(sub,field)));
    }
  }
 else   if (query instanceof SpanOrQuery) {
    for (    Query sub : ((SpanOrQuery)query).getClauses()) {
      list.addAll(Arrays.asList(extractAutomata(sub,field)));
    }
  }
 else   if (query instanceof SpanNearQuery) {
    for (    Query sub : ((SpanNearQuery)query).getClauses()) {
      list.addAll(Arrays.asList(extractAutomata(sub,field)));
    }
  }
 else   if (query instanceof SpanNotQuery) {
    list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery)query).getInclude(),field)));
  }
 else   if (query instanceof SpanPositionCheckQuery) {
    list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery)query).getMatch(),field)));
  }
 else   if (query instanceof SpanMultiTermQueryWrapper) {
    list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>)query).getWrappedQuery(),field)));
  }
 else   if (query instanceof AutomatonQuery) {
    final AutomatonQuery aq=(AutomatonQuery)query;
    if (aq.getField().equals(field)) {
      list.add(new CharacterRunAutomaton(aq.getLightAutomaton()){
        @Override public String toString(){
          return aq.toString();
        }
      }
);
    }
  }
 else   if (query instanceof PrefixQuery) {
    final PrefixQuery pq=(PrefixQuery)query;
    Term prefix=pq.getPrefix();
    if (prefix.field().equals(field)) {
      list.add(new CharacterRunAutomaton(BasicOperations.concatenateLight(BasicAutomata.makeStringLight(prefix.text()),BasicAutomata.makeAnyStringLight())){
        @Override public String toString(){
          return pq.toString();
        }
      }
);
    }
  }
 else   if (query instanceof FuzzyQuery) {
    final FuzzyQuery fq=(FuzzyQuery)query;
    if (fq.getField().equals(field)) {
      String utf16=fq.getTerm().text();
      int termText[]=new int[utf16.codePointCount(0,utf16.length())];
      for (int cp, i=0, j=0; i < utf16.length(); i+=Character.charCount(cp)) {
        termText[j++]=cp=utf16.codePointAt(i);
      }
      int termLength=termText.length;
      int prefixLength=Math.min(fq.getPrefixLength(),termLength);
      String suffix=UnicodeUtil.newString(termText,prefixLength,termText.length - prefixLength);
      LevenshteinAutomata builder=new LevenshteinAutomata(suffix,fq.getTranspositions());
      LightAutomaton automaton=builder.toLightAutomaton(fq.getMaxEdits());
      if (prefixLength > 0) {
        LightAutomaton prefix=BasicAutomata.makeStringLight(UnicodeUtil.newString(termText,0,prefixLength));
        automaton=BasicOperations.concatenateLight(prefix,automaton);
      }
      list.add(new CharacterRunAutomaton(automaton){
        @Override public String toString(){
          return fq.toString();
        }
      }
);
    }
  }
 else   if (query instanceof TermRangeQuery) {
    final TermRangeQuery tq=(TermRangeQuery)query;
    if (tq.getField().equals(field)) {
      final CharsRef lowerBound;
      if (tq.getLowerTerm() == null) {
        lowerBound=null;
      }
 else {
        lowerBound=new CharsRef(tq.getLowerTerm().utf8ToString());
      }
      final CharsRef upperBound;
      if (tq.getUpperTerm() == null) {
        upperBound=null;
      }
 else {
        upperBound=new CharsRef(tq.getUpperTerm().utf8ToString());
      }
      final boolean includeLower=tq.includesLower();
      final boolean includeUpper=tq.includesUpper();
      final CharsRef scratch=new CharsRef();
      final Comparator<CharsRef> comparator=CharsRef.getUTF16SortedAsUTF8Comparator();
      list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()){
        @Override public boolean run(        char[] s,        int offset,        int length){
          scratch.chars=s;
          scratch.offset=offset;
          scratch.length=length;
          if (lowerBound != null) {
            int cmp=comparator.compare(scratch,lowerBound);
            if (cmp < 0 || (!includeLower && cmp == 0)) {
              return false;
            }
          }
          if (upperBound != null) {
            int cmp=comparator.compare(scratch,upperBound);
            if (cmp > 0 || (!includeUpper && cmp == 0)) {
              return false;
            }
          }
          return true;
        }
        @Override public String toString(){
          return tq.toString();
        }
      }
);
    }
  }
  return list.toArray(new CharacterRunAutomaton[list.size()]);
}
