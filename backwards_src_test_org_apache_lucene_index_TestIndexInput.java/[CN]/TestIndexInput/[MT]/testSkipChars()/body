{
  byte[] bytes=new byte[]{(byte)0x80,0x01,(byte)0xFF,0x7F,(byte)0x80,(byte)0x80,0x01,(byte)0x81,(byte)0x80,0x01,0x06,'L','u','c','e','n','e'};
  String utf8Str="\u0634\u1ea1";
  byte[] utf8Bytes=utf8Str.getBytes("UTF-8");
  byte[] theBytes=new byte[bytes.length + 1 + utf8Bytes.length];
  System.arraycopy(bytes,0,theBytes,0,bytes.length);
  theBytes[bytes.length]=(byte)utf8Str.length();
  System.arraycopy(utf8Bytes,0,theBytes,bytes.length + 1,utf8Bytes.length);
  IndexInput is=new MockIndexInput(theBytes);
  assertEquals(128,is.readVInt());
  assertEquals(16383,is.readVInt());
  assertEquals(16384,is.readVInt());
  assertEquals(16385,is.readVInt());
  int charsToRead=is.readVInt();
  assertTrue(0x06 + " does not equal: " + charsToRead,0x06 == charsToRead);
  is.skipChars(3);
  char[] chars=new char[3];
  is.readChars(chars,0,3);
  String tmpStr=new String(chars);
  assertTrue(tmpStr + " is not equal to " + "ene",tmpStr.equals("ene") == true);
  charsToRead=is.readVInt() - 1;
  is.skipChars(1);
  assertTrue(utf8Str.length() - 1 + " does not equal: " + charsToRead,utf8Str.length() - 1 == charsToRead);
  chars=new char[charsToRead];
  is.readChars(chars,0,charsToRead);
  tmpStr=new String(chars);
  assertTrue(tmpStr + " is not equal to " + utf8Str.substring(1),tmpStr.equals(utf8Str.substring(1)) == true);
}
