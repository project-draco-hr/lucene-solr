{
  List<Class> analysisClasses=getClassesForPackage("org.apache.lucene.analysis");
  List<Class> tokenizersList=new ArrayList<Class>();
  List<Class> tokenfiltersList=new ArrayList<Class>();
  List<Class> charfiltersList=new ArrayList<Class>();
  for (  Class c : analysisClasses) {
    if (Modifier.isAbstract(c.getModifiers()) || c.getAnnotation(Deprecated.class) != null || c.equals(EmptyTokenizer.class) || c.equals(CachingTokenFilter.class) || c.equals(NGramTokenizer.class) || c.equals(NGramTokenFilter.class) || c.equals(EdgeNGramTokenizer.class) || c.equals(EdgeNGramTokenFilter.class)) {
      continue;
    }
    if (Tokenizer.class.isAssignableFrom(c)) {
      tokenizersList.add(c);
    }
 else     if (TokenFilter.class.isAssignableFrom(c)) {
      tokenfiltersList.add(c);
    }
 else     if (CharStream.class.isAssignableFrom(c)) {
      charfiltersList.add(c);
    }
  }
  tokenizers=tokenizersList.toArray(new Class[0]);
  Arrays.sort(tokenizers,new Comparator<Class>(){
    @Override public int compare(    Class arg0,    Class arg1){
      return arg0.getName().compareTo(arg1.getName());
    }
  }
);
  tokenfilters=tokenfiltersList.toArray(new Class[0]);
  Arrays.sort(tokenfilters,new Comparator<Class>(){
    @Override public int compare(    Class arg0,    Class arg1){
      return arg0.getName().compareTo(arg1.getName());
    }
  }
);
  charfilters=charfiltersList.toArray(new Class[0]);
  Arrays.sort(charfilters,new Comparator<Class>(){
    @Override public int compare(    Class arg0,    Class arg1){
      return arg0.getName().compareTo(arg1.getName());
    }
  }
);
  if (VERBOSE) {
    System.out.println("tokenizers = " + Arrays.toString(tokenizers));
    System.out.println("tokenfilters = " + Arrays.toString(tokenfilters));
    System.out.println("charfilters = " + Arrays.toString(charfilters));
  }
}
