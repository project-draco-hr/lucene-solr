{
  List<Class<?>> analysisClasses=getClassesForPackage("org.apache.lucene.analysis");
  tokenizers=new ArrayList<Class<? extends Tokenizer>>();
  tokenfilters=new ArrayList<Class<? extends TokenFilter>>();
  charfilters=new ArrayList<Class<? extends CharStream>>();
  for (  Class<?> c : analysisClasses) {
    final int modifiers=c.getModifiers();
    if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers) || c.getAnnotation(Deprecated.class) != null || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface() || c.equals(EmptyTokenizer.class) || c.equals(CachingTokenFilter.class) || c.equals(NGramTokenizer.class) || c.equals(NGramTokenFilter.class) || c.equals(EdgeNGramTokenizer.class) || c.equals(EdgeNGramTokenFilter.class)) {
      continue;
    }
    if (Tokenizer.class.isAssignableFrom(c)) {
      tokenizers.add(c.asSubclass(Tokenizer.class));
    }
 else     if (TokenFilter.class.isAssignableFrom(c)) {
      tokenfilters.add(c.asSubclass(TokenFilter.class));
    }
 else     if (CharStream.class.isAssignableFrom(c)) {
      charfilters.add(c.asSubclass(CharStream.class));
    }
  }
  final Comparator<Class<?>> classComp=new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> arg0,    Class<?> arg1){
      return arg0.getName().compareTo(arg1.getName());
    }
  }
;
  Collections.sort(tokenizers,classComp);
  Collections.sort(tokenfilters,classComp);
  Collections.sort(charfilters,classComp);
  if (VERBOSE) {
    System.out.println("tokenizers = " + tokenizers);
    System.out.println("tokenfilters = " + tokenfilters);
    System.out.println("charfilters = " + charfilters);
  }
}
