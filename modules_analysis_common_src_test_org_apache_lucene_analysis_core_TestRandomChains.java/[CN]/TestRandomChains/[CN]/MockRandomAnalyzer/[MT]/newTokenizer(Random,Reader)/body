{
  TokenizerSpec spec=new TokenizerSpec();
  boolean success=false;
  while (!success) {
    try {
      final Constructor<? extends Tokenizer> ctor=tokenizers.get(random.nextInt(tokenizers.size()));
      final Object args[]=newTokenizerArgs(random,reader,ctor.getParameterTypes());
      spec.tokenizer=ctor.newInstance(args);
      spec.toString=ctor.getDeclaringClass().getName() + ("(" + Arrays.toString(args) + ")");
      success=true;
    }
 catch (    InvocationTargetException ite) {
      final Throwable cause=ite.getCause();
      if (cause instanceof IllegalArgumentException || cause instanceof UnsupportedOperationException) {
        if (VERBOSE) {
          System.err.println("Ignoring IAE/UOE from ctor:");
          cause.printStackTrace(System.err);
        }
      }
 else {
        Rethrow.rethrow(cause);
      }
    }
catch (    IllegalAccessException iae) {
      Rethrow.rethrow(iae);
    }
catch (    InstantiationException ie) {
      Rethrow.rethrow(ie);
    }
  }
  return spec;
}
