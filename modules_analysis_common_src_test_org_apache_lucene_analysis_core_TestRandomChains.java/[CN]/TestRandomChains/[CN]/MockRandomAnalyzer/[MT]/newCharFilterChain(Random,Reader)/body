{
  CharFilterSpec spec=new CharFilterSpec();
  spec.reader=reader;
  StringBuilder descr=new StringBuilder();
  int numFilters=random.nextInt(3);
  for (int i=0; i < numFilters; i++) {
    boolean success=false;
    while (!success) {
      try {
        final Constructor<? extends CharStream> ctor=charfilters.get(random.nextInt(charfilters.size()));
        final Object args[]=newCharFilterArgs(random,spec.reader,ctor.getParameterTypes());
        spec.reader=ctor.newInstance(args);
        if (descr.length() > 0) {
          descr.append(",");
        }
        descr.append(ctor.getDeclaringClass().getName());
        descr.append("(" + Arrays.toString(args) + ")");
        success=true;
      }
 catch (      InvocationTargetException ite) {
        final Throwable cause=ite.getCause();
        if (cause instanceof IllegalArgumentException || cause instanceof UnsupportedOperationException) {
          if (VERBOSE) {
            System.err.println("Ignoring IAE/UOE from ctor:");
            cause.printStackTrace(System.err);
          }
        }
 else {
          Rethrow.rethrow(cause);
        }
      }
catch (      IllegalAccessException iae) {
        Rethrow.rethrow(iae);
      }
catch (      InstantiationException ie) {
        Rethrow.rethrow(ie);
      }
    }
  }
  spec.toString=descr.toString();
  return spec;
}
