{
  this.docWriter=docWriter;
  this.infoStream=infoStream;
  if (infoStream != null)   message("init: current segments file is \"" + segmentInfos.getCurrentSegmentFileName() + "\"; deletionPolicy="+ policy);
  this.policy=policy;
  this.directory=directory;
  long currentGen=segmentInfos.getGeneration();
  indexFilenameFilter=new IndexFileNameFilter(codecs);
  CommitPoint currentCommitPoint=null;
  boolean seenIndexFiles=false;
  for (  String fileName : directory.listAll()) {
    if ((indexFilenameFilter.accept(null,fileName)) && !fileName.endsWith("write.lock") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {
      seenIndexFiles=true;
      getRefCount(fileName);
      if (fileName.startsWith(IndexFileNames.SEGMENTS)) {
        if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {
          if (infoStream != null) {
            message("init: load commit \"" + fileName + "\"");
          }
          SegmentInfos sis=new SegmentInfos();
          try {
            sis.read(directory,fileName,codecs);
          }
 catch (          FileNotFoundException e) {
            if (infoStream != null) {
              message("init: hit FileNotFoundException when loading commit \"" + fileName + "\"; skipping this commit point");
            }
            sis=null;
          }
          if (sis != null) {
            CommitPoint commitPoint=new CommitPoint(commitsToDelete,directory,sis);
            if (sis.getGeneration() == segmentInfos.getGeneration()) {
              currentCommitPoint=commitPoint;
            }
            commits.add(commitPoint);
            incRef(sis,true);
          }
        }
      }
    }
  }
  if (currentCommitPoint == null && seenIndexFiles) {
    SegmentInfos sis=new SegmentInfos();
    try {
      sis.read(directory,segmentInfos.getCurrentSegmentFileName(),codecs);
    }
 catch (    IOException e) {
      throw new CorruptIndexException("failed to locate current segments_N file");
    }
    if (infoStream != null)     message("forced open of current segments file " + segmentInfos.getCurrentSegmentFileName());
    currentCommitPoint=new CommitPoint(commitsToDelete,directory,sis);
    commits.add(currentCommitPoint);
    incRef(sis,true);
  }
  Collections.sort(commits);
  for (  Map.Entry<String,RefCount> entry : refCounts.entrySet()) {
    RefCount rc=entry.getValue();
    final String fileName=entry.getKey();
    if (0 == rc.count) {
      if (infoStream != null) {
        message("init: removing unreferenced file \"" + fileName + "\"");
      }
      deleteFile(fileName);
    }
  }
  if (seenIndexFiles) {
    policy.onInit(commits);
  }
  checkpoint(segmentInfos,false);
  startingCommitDeleted=currentCommitPoint == null ? false : currentCommitPoint.isDeleted();
  deleteCommits();
}
