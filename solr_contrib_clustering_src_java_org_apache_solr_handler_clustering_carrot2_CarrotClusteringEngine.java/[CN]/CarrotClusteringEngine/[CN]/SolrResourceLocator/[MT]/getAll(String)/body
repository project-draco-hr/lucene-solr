{
  final String resourceName=carrot2ResourcesDir + "/" + resource;
  log.debug("Looking for Solr resource: " + resourceName);
  InputStream resourceStream=null;
  final byte[] asBytes;
  try {
    resourceStream=resourceLoader.openResource(resourceName);
    asBytes=IOUtils.toByteArray(resourceStream);
  }
 catch (  RuntimeException e) {
    log.debug("Resource not found in Solr's config: " + resourceName + ". Using the default "+ resource+ " from Carrot JAR.");
    return new IResource[]{};
  }
catch (  IOException e) {
    log.warn("Could not read Solr resource " + resourceName);
    return new IResource[]{};
  }
 finally {
    if (resourceStream != null)     Closeables.closeQuietly(resourceStream);
  }
  log.info("Loaded Solr resource: " + resourceName);
  final IResource foundResource=new IResource(){
    @Override public InputStream open(){
      return new ByteArrayInputStream(asBytes);
    }
    @Override public int hashCode(){
      return super.hashCode();
    }
    @Override public boolean equals(    Object obj){
      return super.equals(obj);
    }
    @Override public String toString(){
      return "Solr config resource: " + resourceName;
    }
  }
;
  return new IResource[]{foundResource};
}
