{
  this.core=core;
  String result=super.init(config,core);
  final SolrParams initParams=SolrParams.toSolrParams(config);
  HashMap<String,Object> initAttributes=new HashMap<String,Object>();
  extractCarrotAttributes(initParams,initAttributes);
  final AttributeBuilder attributeBuilder=BasicPreprocessingPipelineDescriptor.attributeBuilder(initAttributes);
  attributeBuilder.lexicalDataFactory(SolrStopwordsCarrot2LexicalDataFactory.class);
  if (!initAttributes.containsKey(BasicPreprocessingPipelineDescriptor.Keys.TOKENIZER_FACTORY)) {
    attributeBuilder.tokenizerFactory(LuceneCarrot2TokenizerFactory.class);
  }
  if (!initAttributes.containsKey(BasicPreprocessingPipelineDescriptor.Keys.STEMMER_FACTORY)) {
    attributeBuilder.stemmerFactory(LuceneCarrot2StemmerFactory.class);
  }
  initAttributes.put("solrIndexSchema",core.getSchema());
  DefaultLexicalDataFactoryDescriptor.attributeBuilder(initAttributes).resourceLookup(new ResourceLookup(new SolrResourceLocator(core,initParams),new ClassLoaderLocator(core.getResourceLoader().getClassLoader())));
  Thread ct=Thread.currentThread();
  ClassLoader prev=ct.getContextClassLoader();
  try {
    ct.setContextClassLoader(core.getResourceLoader().getClassLoader());
    this.controller.init(initAttributes);
  }
  finally {
    ct.setContextClassLoader(prev);
  }
  SchemaField uniqueField=core.getSchema().getUniqueKeyField();
  if (uniqueField == null) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,CarrotClusteringEngine.class.getSimpleName() + " requires the schema to have a uniqueKeyField");
  }
  this.idFieldName=uniqueField.getName();
  String carrotAlgorithmClassName=initParams.get(CarrotParams.ALGORITHM);
  this.clusteringAlgorithmClass=core.getResourceLoader().findClass(carrotAlgorithmClassName,IClusteringAlgorithm.class);
  return result;
}
