{
  String result=super.init(config,core);
  final SolrParams initParams=SolrParams.toSolrParams(config);
  HashMap<String,Object> initAttributes=new HashMap<String,Object>();
  extractCarrotAttributes(initParams,initAttributes);
  BasicPreprocessingPipelineDescriptor.attributeBuilder(initAttributes).stemmerFactory(LuceneCarrot2StemmerFactory.class).tokenizerFactory(LuceneCarrot2TokenizerFactory.class).lexicalDataFactory(SolrStopwordsCarrot2LexicalDataFactory.class);
  initAttributes.put("solrIndexSchema",core.getSchema());
  DefaultLexicalDataFactoryDescriptor.attributeBuilder(initAttributes).resourceLookup(new ResourceLookup(new IResourceLocator(){
    @Override public IResource[] getAll(    final String resource){
      final SolrResourceLoader resourceLoader=core.getResourceLoader();
      final String carrot2ResourcesDir=initParams.get(CarrotParams.LEXICAL_RESOURCES_DIR,CARROT_RESOURCES_PREFIX);
      try {
        log.debug("Looking for " + resource + " in "+ carrot2ResourcesDir);
        final InputStream resourceStream=resourceLoader.openResource(carrot2ResourcesDir + "/" + resource);
        log.info(resource + " loaded from " + carrot2ResourcesDir);
        final IResource foundResource=new IResource(){
          @Override public InputStream open() throws IOException {
            return resourceStream;
          }
        }
;
        return new IResource[]{foundResource};
      }
 catch (      RuntimeException e) {
        log.debug(resource + " not found in " + carrot2ResourcesDir+ ". Using the default "+ resource+ " from Carrot JAR.");
        return new IResource[]{};
      }
    }
  }
,new ClassLoaderLocator(core.getResourceLoader().getClassLoader())));
  this.controller.init(initAttributes);
  this.idFieldName=core.getSchema().getUniqueKeyField().getName();
  String carrotAlgorithmClassName=initParams.get(CarrotParams.ALGORITHM);
  Class<?> algorithmClass=core.getResourceLoader().findClass(carrotAlgorithmClassName);
  if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {
    throw new IllegalArgumentException("Class provided as " + CarrotParams.ALGORITHM + " must implement "+ IClusteringAlgorithm.class.getName());
  }
  this.clusteringAlgorithmClass=(Class<? extends IClusteringAlgorithm>)algorithmClass;
  return result;
}
