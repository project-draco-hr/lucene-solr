{
  this.core=core;
  String result=super.init(config,core);
  final SolrParams initParams=SolrParams.toSolrParams(config);
  HashMap<String,Object> initAttributes=new HashMap<>();
  ResourceLookup resourceLookup=new ResourceLookup(new SolrResourceLocator(core,initParams),new ClassLoaderLocator(core.getResourceLoader().getClassLoader()));
  DefaultLexicalDataFactoryDescriptor.attributeBuilder(initAttributes).resourceLookup(resourceLookup);
  String componentName=initParams.get(ClusteringEngine.ENGINE_NAME);
  log.info("Initializing Clustering Engine '" + Objects.firstNonNull(componentName,"<no 'name' attribute>") + "'");
  if (!Strings.isNullOrEmpty(componentName)) {
    IResource[] attributeXmls=resourceLookup.getAll(componentName + "-attributes.xml");
    if (attributeXmls.length > 0) {
      if (attributeXmls.length > 1) {
        log.warn("More than one attribute file found, first one will be used: " + Arrays.toString(attributeXmls));
      }
      Thread ct=Thread.currentThread();
      ClassLoader prev=ct.getContextClassLoader();
      try {
        ct.setContextClassLoader(core.getResourceLoader().getClassLoader());
        AttributeValueSets avs=AttributeValueSets.deserialize(attributeXmls[0].open());
        AttributeValueSet defaultSet=avs.getDefaultAttributeValueSet();
        initAttributes.putAll(defaultSet.getAttributeValues());
      }
 catch (      Exception e) {
        throw new SolrException(ErrorCode.SERVER_ERROR,"Could not read attributes XML for clustering component: " + componentName,e);
      }
 finally {
        ct.setContextClassLoader(prev);
      }
    }
  }
  extractCarrotAttributes(initParams,initAttributes);
  final AttributeBuilder attributeBuilder=BasicPreprocessingPipelineDescriptor.attributeBuilder(initAttributes);
  attributeBuilder.lexicalDataFactory(SolrStopwordsCarrot2LexicalDataFactory.class);
  if (!initAttributes.containsKey(BasicPreprocessingPipelineDescriptor.Keys.TOKENIZER_FACTORY)) {
    attributeBuilder.tokenizerFactory(LuceneCarrot2TokenizerFactory.class);
  }
  if (!initAttributes.containsKey(BasicPreprocessingPipelineDescriptor.Keys.STEMMER_FACTORY)) {
    attributeBuilder.stemmerFactory(LuceneCarrot2StemmerFactory.class);
  }
  initAttributes.put("solrCore",core);
  Thread ct=Thread.currentThread();
  ClassLoader prev=ct.getContextClassLoader();
  try {
    ct.setContextClassLoader(core.getResourceLoader().getClassLoader());
    this.controller.init(initAttributes);
  }
  finally {
    ct.setContextClassLoader(prev);
  }
  SchemaField uniqueField=core.getLatestSchema().getUniqueKeyField();
  if (uniqueField == null) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,CarrotClusteringEngine.class.getSimpleName() + " requires the schema to have a uniqueKeyField");
  }
  this.idFieldName=uniqueField.getName();
  String carrotAlgorithmClassName=initParams.get(CarrotParams.ALGORITHM);
  this.clusteringAlgorithmClass=core.getResourceLoader().findClass(carrotAlgorithmClassName,IClusteringAlgorithm.class);
  return result;
}
