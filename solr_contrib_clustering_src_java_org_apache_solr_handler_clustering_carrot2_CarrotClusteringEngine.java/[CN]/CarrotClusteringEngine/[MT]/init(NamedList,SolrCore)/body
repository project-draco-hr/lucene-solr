{
  String result=super.init(config,core);
  final SolrParams initParams=SolrParams.toSolrParams(config);
  HashMap<String,Object> initAttributes=new HashMap<String,Object>();
  extractCarrotAttributes(initParams,initAttributes);
  BasicPreprocessingPipelineDescriptor.attributeBuilder(initAttributes).stemmerFactory(LuceneCarrot2StemmerFactory.class).tokenizerFactory(LuceneCarrot2TokenizerFactory.class).lexicalDataFactory(SolrStopwordsCarrot2LexicalDataFactory.class);
  initAttributes.put("solrIndexSchema",core.getSchema());
  DefaultLexicalDataFactoryDescriptor.attributeBuilder(initAttributes).resourceLookup(new ResourceLookup(new SolrResourceLocator(core,initParams),new ClassLoaderLocator(core.getResourceLoader().getClassLoader())));
  this.controller.init(initAttributes);
  SchemaField uniqueField=core.getSchema().getUniqueKeyField();
  if (uniqueField == null) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,CarrotClusteringEngine.class.getSimpleName() + " requires the schema to have a uniqueKeyField");
  }
  this.idFieldName=uniqueField.getName();
  String carrotAlgorithmClassName=initParams.get(CarrotParams.ALGORITHM);
  this.clusteringAlgorithmClass=core.getResourceLoader().findClass(carrotAlgorithmClassName,IClusteringAlgorithm.class);
  return result;
}
