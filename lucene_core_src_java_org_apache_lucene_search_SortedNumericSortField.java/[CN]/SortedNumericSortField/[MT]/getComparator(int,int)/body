{
switch (type) {
case INT:
    return new FieldComparator.IntComparator(numHits,getField(),(Integer)missingValue){
      @Override protected NumericDocValues getNumericDocValues(      LeafReaderContext context,      String field) throws IOException {
        return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(),field),selector,type);
      }
    }
;
case FLOAT:
  return new FieldComparator.FloatComparator(numHits,getField(),(Float)missingValue){
    @Override protected NumericDocValues getNumericDocValues(    LeafReaderContext context,    String field) throws IOException {
      return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(),field),selector,type);
    }
  }
;
case LONG:
return new FieldComparator.LongComparator(numHits,getField(),(Long)missingValue){
  @Override protected NumericDocValues getNumericDocValues(  LeafReaderContext context,  String field) throws IOException {
    return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(),field),selector,type);
  }
}
;
case DOUBLE:
return new FieldComparator.DoubleComparator(numHits,getField(),(Double)missingValue){
@Override protected NumericDocValues getNumericDocValues(LeafReaderContext context,String field) throws IOException {
  return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(),field),selector,type);
}
}
;
default :
throw new AssertionError();
}
}
