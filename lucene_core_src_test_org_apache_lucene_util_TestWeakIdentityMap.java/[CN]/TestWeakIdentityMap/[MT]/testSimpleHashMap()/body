{
  final WeakIdentityMap<String,String> map=WeakIdentityMap.newHashMap();
  String key1=new String("foo");
  String key2=new String("foo");
  String key3=new String("foo");
  assertNotSame(key1,key2);
  assertEquals(key1,key2);
  assertNotSame(key1,key3);
  assertEquals(key1,key3);
  assertNotSame(key2,key3);
  assertEquals(key2,key3);
  map.put(null,"null");
{
    Iterator<String> it=map.keyIterator();
    assertTrue(it.hasNext());
    assertNull(it.next());
    assertFalse(it.hasNext());
    assertFalse(it.hasNext());
  }
  map.put(key1,"bar1");
  map.put(key2,"bar2");
  assertEquals(3,map.size());
  assertEquals("bar1",map.get(key1));
  assertEquals("bar2",map.get(key2));
  assertEquals(null,map.get(key3));
  assertEquals("null",map.get(null));
  assertTrue(map.containsKey(key1));
  assertTrue(map.containsKey(key2));
  assertFalse(map.containsKey(key3));
  assertTrue(map.containsKey(null));
  map.put(key1,"bar1");
  map.put(key2,"bar2");
  map.put(null,"null");
  assertEquals(3,map.size());
  assertEquals("bar1",map.get(key1));
  assertEquals("bar2",map.get(key2));
  assertEquals(null,map.get(key3));
  assertEquals("null",map.get(null));
  assertTrue(map.containsKey(key1));
  assertTrue(map.containsKey(key2));
  assertFalse(map.containsKey(key3));
  assertTrue(map.containsKey(null));
  map.remove(null);
  assertEquals(2,map.size());
  map.remove(key1);
  assertEquals(1,map.size());
  map.put(key1,"bar1");
  map.put(key2,"bar2");
  map.put(key3,"bar3");
  assertEquals(3,map.size());
  int c=0, keysAssigned=0;
  for (Iterator<String> it=map.keyIterator(); it.hasNext(); ) {
    assertTrue(it.hasNext());
    final String k=it.next();
    assertTrue(k == key1 || k == key2 | k == key3);
    keysAssigned+=(k == key1) ? 1 : ((k == key2) ? 2 : 4);
    c++;
  }
  assertEquals(3,c);
  assertEquals("all keys must have been seen",1 + 2 + 4,keysAssigned);
  c=0;
  for (Iterator<String> it=map.valueIterator(); it.hasNext(); ) {
    final String v=it.next();
    assertTrue(v.startsWith("bar"));
    c++;
  }
  assertEquals(3,c);
  key1=key2=key3=null;
  int size=map.size();
  for (int i=0; size > 0 && i < 10; i++)   try {
    System.runFinalization();
    System.gc();
    Thread.sleep(100L);
    c=0;
    for (Iterator<String> it=map.keyIterator(); it.hasNext(); ) {
      assertNotNull(it.next());
      c++;
    }
    assertTrue(size >= c);
    assertTrue(c >= map.size());
    size=map.size();
  }
 catch (  InterruptedException ie) {
  }
  map.clear();
  assertEquals(0,map.size());
  assertTrue(map.isEmpty());
  Iterator<String> it=map.keyIterator();
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should throw NoSuchElementException");
  }
 catch (  NoSuchElementException nse) {
  }
  key1=new String("foo");
  key2=new String("foo");
  map.put(key1,"bar1");
  map.put(key2,"bar2");
  assertEquals(2,map.size());
  map.clear();
  assertEquals(0,map.size());
  assertTrue(map.isEmpty());
}
