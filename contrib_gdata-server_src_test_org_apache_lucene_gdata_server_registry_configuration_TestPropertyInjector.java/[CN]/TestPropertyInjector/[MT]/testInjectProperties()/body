{
  ComponentConfiguration bean=new ComponentConfiguration();
  bean.set("someValue","bla");
  try {
    this.injector.injectProperties(bean);
    fail("target is not set");
  }
 catch (  IllegalStateException e) {
  }
  TestBean testBean=new TestBean();
  this.injector.setTargetObject(testBean);
  try {
    this.injector.injectProperties(null);
    fail("object is null");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    this.injector.injectProperties(bean);
    fail("requiered Property is not available in config bean");
  }
 catch (  InjectionException e) {
  }
  bean.set("test","fooBar");
  bean.set("testClass","java.lang.Object");
  this.injector.injectProperties(bean);
  assertEquals("fooBar",testBean.getTest());
  assertEquals(Object.class,testBean.getTestClass());
  this.injector=new PropertyInjector();
  SubTestBean subTestBean=new SubTestBean();
  this.injector.setTargetObject(subTestBean);
  bean.set("number","333");
  this.injector.injectProperties(bean);
  assertEquals("fooBar",subTestBean.getTest());
  assertEquals(Object.class,subTestBean.getTestClass());
  assertEquals(333,subTestBean.getNumber());
  bean=new ComponentConfiguration();
  bean.set("test","fooBar");
  bean.set("number","333");
  bean.set("wrapper","1.2");
  subTestBean=new SubTestBean();
  this.injector.setTargetObject(subTestBean);
  this.injector.injectProperties(bean);
  assertEquals("fooBar",subTestBean.getTest());
  assertEquals(333,subTestBean.getNumber());
  assertEquals(new Float(1.2),subTestBean.getWrapper());
}
