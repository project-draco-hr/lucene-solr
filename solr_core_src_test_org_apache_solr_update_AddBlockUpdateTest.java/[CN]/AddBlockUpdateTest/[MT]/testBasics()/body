{
  List<Document> blocks=new ArrayList<Document>(Arrays.asList(block("abcD"),block("efgH"),merge(block("ijkL"),block("mnoP")),merge(block("qrsT"),block("uvwX")),block("Y"),block("Z")));
  Collections.shuffle(blocks);
  log.trace("{}",blocks);
  for (  Future<Void> f : exe.invokeAll(callables(blocks))) {
    f.get();
  }
  assertU(commit());
  final SolrIndexSearcher searcher=getSearcher();
  int parentsNum="DHLPTXYZ".length();
  assertQ(req(parent + ":[* TO *]"),"//*[@numFound='" + parentsNum + "']");
  assertQ(req(child + ":[* TO *]"),"//*[@numFound='" + (('z' - 'a' + 1) - parentsNum) + "']");
  assertQ(req("*:*"),"//*[@numFound='" + ('z' - 'a' + 1) + "']");
  assertSingleParentOf(searcher,one("abc"),"D");
  assertSingleParentOf(searcher,one("efg"),"H");
  assertSingleParentOf(searcher,one("ijk"),"L");
  assertSingleParentOf(searcher,one("mno"),"P");
  assertSingleParentOf(searcher,one("qrs"),"T");
  assertSingleParentOf(searcher,one("uvw"),"X");
  assertQ(req("q",child + ":(a b c)","sort","_docid_ asc"),"//*[@numFound='3']","//doc[1]/arr[@name='child_s']/str[text()='a']","//doc[2]/arr[@name='child_s']/str[text()='b']","//doc[3]/arr[@name='child_s']/str[text()='c']");
}
