{
  UpdateRequest req=new UpdateRequest();
  List<SolrInputDocument> docs=new ArrayList<>();
  SolrInputDocument document1=new SolrInputDocument(){
{
      final String id=id();
      addField("id",id);
      addField("parent_s","X");
      ArrayList<SolrInputDocument> ch1=new ArrayList<>(Arrays.asList(new SolrInputDocument(){
{
          addField("id",id());
          addField("child_s","y");
        }
      }
,new SolrInputDocument(){
{
          addField("id",id());
          addField("child_s","z");
        }
      }
));
      Collections.shuffle(ch1,random());
      addChildDocuments(ch1);
    }
  }
;
  SolrInputDocument document2=new SolrInputDocument(){
{
      final String id=id();
      addField("id",id);
      addField("parent_s","A");
      addChildDocument(new SolrInputDocument(){
{
          addField("id",id());
          addField("child_s","b");
        }
      }
);
      addChildDocument(new SolrInputDocument(){
{
          addField("id",id());
          addField("child_s","c");
        }
      }
);
    }
  }
;
  docs.add(document1);
  docs.add(document2);
  Collections.shuffle(docs,random());
  req.add(docs);
  RequestWriter requestWriter=new RequestWriter();
  OutputStream os=new ByteArrayOutputStream();
  requestWriter.write(req,os);
  assertBlockU(os.toString());
  assertU(commit());
  final SolrIndexSearcher searcher=getSearcher();
  assertSingleParentOf(searcher,one("yz"),"X");
  assertSingleParentOf(searcher,one("bc"),"A");
}
