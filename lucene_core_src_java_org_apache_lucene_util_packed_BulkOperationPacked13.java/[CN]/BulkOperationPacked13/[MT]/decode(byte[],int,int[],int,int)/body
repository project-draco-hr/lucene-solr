{
  for (int i=0; i < 8 * iterations; ++i) {
    final int byte0=blocks[blocksOffset++] & 0xFF;
    final int byte1=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=(byte0 << 5) | (byte1 >>> 3);
    final int byte2=blocks[blocksOffset++] & 0xFF;
    final int byte3=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte1 & 7) << 10) | (byte2 << 2) | (byte3 >>> 6);
    final int byte4=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte3 & 63) << 7) | (byte4 >>> 1);
    final int byte5=blocks[blocksOffset++] & 0xFF;
    final int byte6=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte4 & 1) << 12) | (byte5 << 4) | (byte6 >>> 4);
    final int byte7=blocks[blocksOffset++] & 0xFF;
    final int byte8=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte6 & 15) << 9) | (byte7 << 1) | (byte8 >>> 7);
    final int byte9=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte8 & 127) << 6) | (byte9 >>> 2);
    final int byte10=blocks[blocksOffset++] & 0xFF;
    final int byte11=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte9 & 3) << 11) | (byte10 << 3) | (byte11 >>> 5);
    final int byte12=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte11 & 31) << 8) | byte12;
  }
}
