{
  try {
    init("schema12.xml");
    assertU(adoc("id","a","title","ipod trash trash","str_s1","a"));
    assertU(adoc("id","b","title","ipod ipod  trash","str_s1","b"));
    assertU(adoc("id","c","title","ipod ipod  ipod ","str_s1","c"));
    assertU(adoc("id","x","title","boosted","str_s1","x"));
    assertU(adoc("id","y","title","boosted boosted","str_s1","y"));
    assertU(adoc("id","z","title","boosted boosted boosted","str_s1","z"));
    assertU(commit());
    String query="title:ipod";
    Map<String,String> args=new HashMap<>();
    args.put(CommonParams.Q,query);
    args.put(CommonParams.QT,"/elevate");
    args.put(CommonParams.FL,"id,score");
    args.put("indent","true");
    SolrQueryRequest req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    IndexReader reader=req.getSearcher().getIndexReader();
    QueryElevationComponent booster=(QueryElevationComponent)req.getCore().getSearchComponent("elevate");
    assertQ("Make sure standard sort works as expected",req,"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.='c']","//result/doc[2]/str[@name='id'][.='b']","//result/doc[3]/str[@name='id'][.='a']");
    booster.elevationCache.clear();
    booster.setTopQueryResults(reader,query,new String[]{"x","y","z"},null);
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ("All six should make it",req,"//*[@numFound='6']","//result/doc[1]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='y']","//result/doc[3]/str[@name='id'][.='z']","//result/doc[4]/str[@name='id'][.='c']","//result/doc[5]/str[@name='id'][.='b']","//result/doc[6]/str[@name='id'][.='a']");
    booster.elevationCache.clear();
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    booster.setTopQueryResults(reader,query,new String[]{"a","x"},null);
    assertQ("All four should make it",req,"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.='a']","//result/doc[2]/str[@name='id'][.='x']","//result/doc[3]/str[@name='id'][.='c']","//result/doc[4]/str[@name='id'][.='b']");
    args.put(CommonParams.SORT,"score asc");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ("All four should make it",req,"//*[@numFound='4']","//result/doc[4]/str[@name='id'][.='a']","//result/doc[3]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='c']","//result/doc[1]/str[@name='id'][.='b']");
    assertEquals(false,booster.forceElevation);
    args.put(CommonParams.SORT,"str_s1 asc");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ(null,req,"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.='a']","//result/doc[2]/str[@name='id'][.='b']","//result/doc[3]/str[@name='id'][.='c']","//result/doc[4]/str[@name='id'][.='x']");
    args.put(CommonParams.SORT,"id asc");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ(null,req,"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.='a']","//result/doc[2]/str[@name='id'][.='b']","//result/doc[3]/str[@name='id'][.='c']","//result/doc[4]/str[@name='id'][.='x']");
    booster.forceElevation=true;
    args.put(CommonParams.SORT,"id asc");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ(null,req,"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.='a']","//result/doc[2]/str[@name='id'][.='x']","//result/doc[3]/str[@name='id'][.='b']","//result/doc[4]/str[@name='id'][.='c']");
    args.put(QueryElevationParams.EXCLUSIVE,"true");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    booster.setTopQueryResults(reader,query,new String[]{"x","a"},new String[]{});
    assertQ(null,req,"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='a']");
    booster.elevationCache.clear();
    args.remove(CommonParams.SORT);
    args.remove(QueryElevationParams.EXCLUSIVE);
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    booster.setTopQueryResults(reader,query,new String[]{"x"},new String[]{"a"});
    assertQ(null,req,"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='c']","//result/doc[3]/str[@name='id'][.='b']");
    booster.elevationCache.clear();
    args.put(QueryElevationParams.IDS,"x,y,z");
    args.put(QueryElevationParams.EXCLUDE,"b");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ("All five should make it",req,"//*[@numFound='5']","//result/doc[1]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='y']","//result/doc[3]/str[@name='id'][.='z']","//result/doc[4]/str[@name='id'][.='c']","//result/doc[5]/str[@name='id'][.='a']");
    args.put(QueryElevationParams.IDS,"x,z,y");
    args.put(QueryElevationParams.EXCLUDE,"b,c");
    req.close();
    req=new LocalSolrQueryRequest(h.getCore(),new MapSolrParams(args));
    assertQ("All four should make it",req,"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.='x']","//result/doc[2]/str[@name='id'][.='z']","//result/doc[3]/str[@name='id'][.='y']","//result/doc[4]/str[@name='id'][.='a']");
    req.close();
  }
  finally {
    delete();
  }
}
