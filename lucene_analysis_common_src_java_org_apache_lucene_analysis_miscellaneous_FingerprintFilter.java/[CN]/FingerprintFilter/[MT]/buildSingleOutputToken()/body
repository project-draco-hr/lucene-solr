{
  inputEnded=false;
  char clonedLastTerm[]=null;
  uniqueTerms=new CharArraySet(8,false);
  int outputTokenSize=0;
  while (input.incrementToken()) {
    if (outputTokenSize > maxOutputTokenSize) {
      continue;
    }
    final char term[]=termAttribute.buffer();
    final int length=termAttribute.length();
    if (!uniqueTerms.contains(term,0,length)) {
      clonedLastTerm=new char[length];
      System.arraycopy(term,0,clonedLastTerm,0,length);
      if (uniqueTerms.size() > 0) {
        outputTokenSize++;
      }
      uniqueTerms.add(clonedLastTerm);
      outputTokenSize+=length;
    }
  }
  input.end();
  inputEnded=true;
  offsetAtt.setOffset(0,offsetAtt.endOffset());
  posLenAtt.setPositionLength(1);
  posIncrAtt.setPositionIncrement(1);
  typeAtt.setType("fingerprint");
  if (uniqueTerms.size() < 1) {
    termAttribute.setEmpty();
    return false;
  }
  if (outputTokenSize > maxOutputTokenSize) {
    termAttribute.setEmpty();
    uniqueTerms.clear();
    return false;
  }
  if (uniqueTerms.size() == 1) {
    termAttribute.setEmpty().append(new String(clonedLastTerm));
    uniqueTerms.clear();
    return true;
  }
  Object[] items=uniqueTerms.toArray();
  Arrays.sort(items,new Comparator<Object>(){
    @Override public int compare(    Object o1,    Object o2){
      char v1[]=(char[])o1;
      char v2[]=(char[])o2;
      int len1=v1.length;
      int len2=v2.length;
      int lim=Math.min(len1,len2);
      int k=0;
      while (k < lim) {
        char c1=v1[k];
        char c2=v2[k];
        if (c1 != c2) {
          return c1 - c2;
        }
        k++;
      }
      return len1 - len2;
    }
  }
);
  StringBuilder sb=new StringBuilder();
  for (  Object item : items) {
    if (sb.length() >= 1) {
      sb.append(separator);
    }
    sb.append((char[])item);
  }
  termAttribute.setEmpty().append(sb);
  uniqueTerms.clear();
  return true;
}
