{
  Directory dir=newDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  int numDocs=atLeast(300);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    Field idField=new StringField("id",Integer.toString(i),Field.Store.NO);
    doc.add(idField);
    final int length;
    if (minLength == maxLength) {
      length=minLength;
    }
 else {
      length=TestUtil.nextInt(random(),minLength,maxLength);
    }
    int numValues=random().nextInt(17);
    List<String> values=new ArrayList<>();
    for (int v=0; v < numValues; v++) {
      values.add(TestUtil.randomSimpleString(random(),length));
    }
    ArrayList<String> unordered=new ArrayList<>(values);
    Collections.shuffle(unordered,random());
    for (    String v : values) {
      doc.add(newStringField("indexed",v,Field.Store.NO));
    }
    ArrayList<String> unordered2=new ArrayList<>(values);
    Collections.shuffle(unordered2,random());
    for (    String v : unordered2) {
      doc.add(new SortedSetDocValuesField("dv",new BytesRef(v)));
    }
    writer.addDocument(doc);
    if (random().nextInt(31) == 0) {
      writer.commit();
    }
  }
  int numDeletions=random().nextInt(numDocs / 10);
  for (int i=0; i < numDeletions; i++) {
    int id=random().nextInt(numDocs);
    writer.deleteDocuments(new Term("id",Integer.toString(id)));
  }
  DirectoryReader ir=writer.getReader();
  for (  AtomicReaderContext context : ir.leaves()) {
    AtomicReader r=context.reader();
    SortedSetDocValues expected=FieldCache.DEFAULT.getDocTermOrds(r,"indexed",null);
    SortedSetDocValues actual=r.getSortedSetDocValues("dv");
    assertEquals(r.maxDoc(),expected,actual);
  }
  ir.close();
  writer.forceMerge(1);
  ir=writer.getReader();
  AtomicReader ar=getOnlySegmentReader(ir);
  SortedSetDocValues expected=FieldCache.DEFAULT.getDocTermOrds(ar,"indexed",null);
  SortedSetDocValues actual=ar.getSortedSetDocValues("dv");
  assertEquals(ir.maxDoc(),expected,actual);
  ir.close();
  writer.shutdown();
  dir.close();
}
