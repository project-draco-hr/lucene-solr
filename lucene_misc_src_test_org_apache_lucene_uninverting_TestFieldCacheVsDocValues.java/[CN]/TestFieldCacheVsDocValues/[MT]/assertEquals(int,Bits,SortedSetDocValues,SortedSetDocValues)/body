{
  if (actual == null) {
    assertEquals(DocValues.EMPTY_SORTED_SET,expected);
    return;
  }
  FixedBitSet liveOrdsExpected=new FixedBitSet((int)expected.getValueCount());
  FixedBitSet liveOrdsActual=new FixedBitSet((int)actual.getValueCount());
  BytesRef expectedBytes=new BytesRef();
  BytesRef actualBytes=new BytesRef();
  for (int i=0; i < maxDoc; i++) {
    if (liveDocs != null && liveDocs.get(i) == false) {
      continue;
    }
    expected.setDocument(i);
    actual.setDocument(i);
    long expectedOrd;
    while ((expectedOrd=expected.nextOrd()) != NO_MORE_ORDS) {
      expected.lookupOrd(expectedOrd,expectedBytes);
      long actualOrd=actual.nextOrd();
      assertTrue(actualOrd != NO_MORE_ORDS);
      actual.lookupOrd(actualOrd,actualBytes);
      assertEquals(expectedBytes,actualBytes);
      liveOrdsExpected.set((int)expectedOrd);
      liveOrdsActual.set((int)actualOrd);
    }
    assertEquals(NO_MORE_ORDS,actual.nextOrd());
  }
  assertEquals(liveOrdsExpected.cardinality(),liveOrdsActual.cardinality());
  int expectedOrd=0;
  int actualOrd=0;
  while (expectedOrd < expected.getValueCount()) {
    expectedOrd=liveOrdsExpected.nextSetBit(expectedOrd);
    if (expectedOrd == -1) {
      break;
    }
    actualOrd=liveOrdsActual.nextSetBit(actualOrd);
    expected.lookupOrd(expectedOrd,expectedBytes);
    actual.lookupOrd(actualOrd,actualBytes);
    assertEquals(expectedBytes,actualBytes);
    expectedOrd++;
    actualOrd++;
  }
  assertTrue(actualOrd == actual.getValueCount() || liveOrdsActual.nextSetBit(actualOrd) == -1);
  assertEquals(expected.getValueCount(),expected.termsEnum(),liveOrdsExpected,actual.termsEnum(),liveOrdsActual);
}
