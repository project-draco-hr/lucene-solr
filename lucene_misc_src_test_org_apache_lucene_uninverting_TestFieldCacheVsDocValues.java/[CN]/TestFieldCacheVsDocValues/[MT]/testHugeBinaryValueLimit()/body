{
  assumeFalse("test requires codec with limits on max binary field length",codecAcceptsHugeBinaryValues("field"));
  Analyzer analyzer=new MockAnalyzer(random());
  Directory d=newFSDirectory(createTempDir("hugeBinaryValues"));
  boolean doFixed=random().nextBoolean();
  int numDocs;
  int fixedLength=0;
  if (doFixed) {
    numDocs=TestUtil.nextInt(random(),10,20);
    fixedLength=LARGE_BINARY_FIELD_LENGTH;
  }
 else {
    numDocs=TestUtil.nextInt(random(),100,200);
  }
  IndexWriter w=new IndexWriter(d,newIndexWriterConfig(analyzer));
  List<byte[]> docBytes=new ArrayList<>();
  long totalBytes=0;
  for (int docID=0; docID < numDocs; docID++) {
    int numBytes;
    if (doFixed) {
      numBytes=fixedLength;
    }
 else     if (docID == 0 || random().nextInt(5) == 3) {
      numBytes=LARGE_BINARY_FIELD_LENGTH;
    }
 else {
      numBytes=TestUtil.nextInt(random(),1,LARGE_BINARY_FIELD_LENGTH);
    }
    totalBytes+=numBytes;
    if (totalBytes > 5 * 1024 * 1024) {
      break;
    }
    byte[] bytes=new byte[numBytes];
    random().nextBytes(bytes);
    docBytes.add(bytes);
    Document doc=new Document();
    BytesRef b=new BytesRef(bytes);
    b.length=bytes.length;
    doc.add(new BinaryDocValuesField("field",b));
    doc.add(new StringField("id","" + docID,Field.Store.YES));
    w.addDocument(doc);
  }
  DirectoryReader r=DirectoryReader.open(w,true);
  w.close();
  LeafReader ar=SlowCompositeReaderWrapper.wrap(r);
  TestUtil.checkReader(ar);
  BinaryDocValues s=FieldCache.DEFAULT.getTerms(ar,"field",false);
  for (int docID=0; docID < docBytes.size(); docID++) {
    Document doc=ar.document(docID);
    BytesRef bytes=s.get(docID);
    byte[] expected=docBytes.get(Integer.parseInt(doc.get("id")));
    assertEquals(expected.length,bytes.length);
    assertEquals(new BytesRef(expected),bytes);
  }
  ar.close();
  d.close();
}
