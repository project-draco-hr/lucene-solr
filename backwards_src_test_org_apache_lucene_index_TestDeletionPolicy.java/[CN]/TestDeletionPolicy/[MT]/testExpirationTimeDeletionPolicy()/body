{
  final double SECONDS=2.0;
  boolean useCompoundFile=true;
  Directory dir=new RAMDirectory();
  ExpirationTimeDeletionPolicy policy=new ExpirationTimeDeletionPolicy(dir,SECONDS);
  IndexWriter writer=new IndexWriter(dir,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.UNLIMITED);
  writer.setUseCompoundFile(useCompoundFile);
  writer.close();
  long lastDeleteTime=0;
  for (int i=0; i < 7; i++) {
    lastDeleteTime=System.currentTimeMillis();
    writer=new IndexWriter(dir,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.UNLIMITED);
    writer.setUseCompoundFile(useCompoundFile);
    for (int j=0; j < 17; j++) {
      addDoc(writer);
    }
    writer.close();
    Thread.sleep((int)(1000.0 * (SECONDS / 5.0)));
  }
  assertTrue("no commits were deleted",policy.numDelete > 0);
  long gen=SegmentInfos.getCurrentSegmentGeneration(dir);
  String fileName=IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen);
  dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
  while (gen > 0) {
    try {
      IndexReader reader=IndexReader.open(dir,true);
      reader.close();
      fileName=IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen);
      long modTime=dir.fileModified(fileName);
      assertTrue("commit point was older than " + SECONDS + " seconds ("+ (lastDeleteTime - modTime)+ " msec) but did not get deleted",lastDeleteTime - modTime <= (SECONDS * 1000));
    }
 catch (    IOException e) {
      break;
    }
    dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
    gen--;
  }
  dir.close();
}
