{
  this.point=point;
  final SidedPlane candidate1=SidedPlane.constructNormalizedThreePointSidedPlane(point,prevUpperGeoPoint,nextUpperGeoPoint,nextLowerGeoPoint);
  final SidedPlane candidate2=SidedPlane.constructNormalizedThreePointSidedPlane(point,nextUpperGeoPoint,nextLowerGeoPoint,prevLowerGeoPoint);
  final SidedPlane candidate3=SidedPlane.constructNormalizedThreePointSidedPlane(point,nextLowerGeoPoint,prevLowerGeoPoint,prevUpperGeoPoint);
  final SidedPlane candidate4=SidedPlane.constructNormalizedThreePointSidedPlane(point,prevLowerGeoPoint,prevUpperGeoPoint,nextUpperGeoPoint);
  final boolean cand1IsOtherWithin=candidate1.isWithin(prevLowerGeoPoint);
  final boolean cand2IsOtherWithin=candidate2.isWithin(prevUpperGeoPoint);
  final boolean cand3IsOtherWithin=candidate3.isWithin(nextUpperGeoPoint);
  final boolean cand4IsOtherWithin=candidate4.isWithin(nextLowerGeoPoint);
  if (cand1IsOtherWithin && cand2IsOtherWithin && cand3IsOtherWithin&& cand4IsOtherWithin) {
    this.circlePlane=candidate1;
    this.notablePoints=new GeoPoint[]{prevUpperGeoPoint,nextUpperGeoPoint,prevLowerGeoPoint,nextLowerGeoPoint};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane),new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand1IsOtherWithin) {
    this.circlePlane=candidate1;
    this.notablePoints=new GeoPoint[]{prevUpperGeoPoint,nextUpperGeoPoint,nextLowerGeoPoint};
    this.cutoffPlanes=new Membership[]{new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand2IsOtherWithin) {
    this.circlePlane=candidate2;
    this.notablePoints=new GeoPoint[]{nextUpperGeoPoint,nextLowerGeoPoint,prevLowerGeoPoint};
    this.cutoffPlanes=new Membership[]{new SidedPlane(nextCutoffPlane)};
  }
 else   if (cand3IsOtherWithin) {
    this.circlePlane=candidate3;
    this.notablePoints=new GeoPoint[]{nextLowerGeoPoint,prevLowerGeoPoint,prevUpperGeoPoint};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane)};
  }
 else   if (cand4IsOtherWithin) {
    this.circlePlane=candidate4;
    this.notablePoints=new GeoPoint[]{prevLowerGeoPoint,prevUpperGeoPoint,nextUpperGeoPoint};
    this.cutoffPlanes=new Membership[]{new SidedPlane(prevCutoffPlane)};
  }
 else {
    throw new RuntimeException("Couldn't come up with a plane through three points that included the fourth");
  }
}
