{
  this.start=start;
  this.end=end;
  this.planeBoundingOffset=planeBoundingOffset;
  this.arcWidth=arcWidth;
  this.chordDistance=chordDistance;
  fullDistance=start.arcDistance(end);
  fullNormalDistance=start.normalDistance(end);
  fullLinearDistance=start.linearDistance(end);
  normalizedConnectingPlane=new Plane(start,end).normalize();
  if (normalizedConnectingPlane == null) {
    upperConnectingPlane=null;
    lowerConnectingPlane=null;
    startCutoffPlane=null;
    endCutoffPlane=null;
    invertedStartCutoffPlane=null;
    invertedEndCutoffPlane=null;
  }
 else {
    upperConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);
    lowerConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);
    startCutoffPlane=new SidedPlane(end,normalizedConnectingPlane,start);
    endCutoffPlane=new SidedPlane(start,normalizedConnectingPlane,end);
    invertedStartCutoffPlane=new SidedPlane(startCutoffPlane);
    invertedEndCutoffPlane=new SidedPlane(endCutoffPlane);
  }
}
