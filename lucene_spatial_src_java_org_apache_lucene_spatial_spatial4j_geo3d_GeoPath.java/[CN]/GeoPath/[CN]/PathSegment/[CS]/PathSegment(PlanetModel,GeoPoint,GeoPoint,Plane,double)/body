{
  this.start=start;
  this.end=end;
  this.normalizedConnectingPlane=normalizedConnectingPlane;
  this.planeBoundingOffset=planeBoundingOffset;
  upperConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);
  lowerConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);
  startCutoffPlane=new SidedPlane(end,normalizedConnectingPlane,start);
  endCutoffPlane=new SidedPlane(start,normalizedConnectingPlane,end);
  final Membership[] upperSide=new Membership[]{upperConnectingPlane};
  final Membership[] lowerSide=new Membership[]{lowerConnectingPlane};
  final Membership[] startSide=new Membership[]{startCutoffPlane};
  final Membership[] endSide=new Membership[]{endCutoffPlane};
  GeoPoint[] points;
  points=upperConnectingPlane.findIntersections(planetModel,startCutoffPlane,lowerSide,endSide);
  if (points.length == 0) {
    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");
  }
  this.ULHC=points[0];
  points=upperConnectingPlane.findIntersections(planetModel,endCutoffPlane,lowerSide,startSide);
  if (points.length == 0) {
    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");
  }
  this.URHC=points[0];
  points=lowerConnectingPlane.findIntersections(planetModel,startCutoffPlane,upperSide,endSide);
  if (points.length == 0) {
    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");
  }
  this.LLHC=points[0];
  points=lowerConnectingPlane.findIntersections(planetModel,endCutoffPlane,upperSide,startSide);
  if (points.length == 0) {
    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");
  }
  this.LRHC=points[0];
  upperConnectingPlanePoints=new GeoPoint[]{ULHC,URHC};
  lowerConnectingPlanePoints=new GeoPoint[]{LLHC,LRHC};
  startCutoffPlanePoints=new GeoPoint[]{ULHC,LLHC};
  endCutoffPlanePoints=new GeoPoint[]{URHC,LRHC};
}
