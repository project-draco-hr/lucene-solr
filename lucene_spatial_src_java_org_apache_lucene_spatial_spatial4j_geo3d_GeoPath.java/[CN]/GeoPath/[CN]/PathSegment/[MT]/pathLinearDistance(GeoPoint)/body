{
  if (!isWithin(point))   return Double.MAX_VALUE;
  final double perpX=normalizedConnectingPlane.y * point.z - normalizedConnectingPlane.z * point.y;
  final double perpY=normalizedConnectingPlane.z * point.x - normalizedConnectingPlane.x * point.z;
  final double perpZ=normalizedConnectingPlane.x * point.y - normalizedConnectingPlane.y * point.x;
  if (Math.abs(perpX) < Vector.MINIMUM_RESOLUTION && Math.abs(perpY) < Vector.MINIMUM_RESOLUTION && Math.abs(perpZ) < Vector.MINIMUM_RESOLUTION)   return point.linearDistance(start);
  final double lineX=normalizedConnectingPlane.y * perpZ - normalizedConnectingPlane.z * perpY;
  final double lineY=normalizedConnectingPlane.z * perpX - normalizedConnectingPlane.x * perpZ;
  final double lineZ=normalizedConnectingPlane.x * perpY - normalizedConnectingPlane.y * perpX;
  final double normalizer=1.0 / Math.sqrt(lineX * lineX + lineY * lineY + lineZ * lineZ);
  double normLineX=lineX * normalizer;
  double normLineY=lineY * normalizer;
  double normLineZ=lineZ * normalizer;
  if (!startCutoffPlane.isWithin(normLineX,normLineY,normLineZ) || !endCutoffPlane.isWithin(normLineX,normLineY,normLineZ)) {
    normLineX=-normLineX;
    normLineY=-normLineY;
    normLineZ=-normLineZ;
  }
  return point.linearDistance(normLineX,normLineY,normLineZ) + start.linearDistance(normLineX,normLineY,normLineZ);
}
