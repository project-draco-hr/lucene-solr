{
  @SuppressWarnings("unchecked") NamedList<Object> sugg=(NamedList<Object>)spellInfo.get("suggestions");
  if (sugg == null) {
    correctlySpelled=true;
    return;
  }
  for (int i=0; i < sugg.size(); i++) {
    String n=sugg.getName(i);
    @SuppressWarnings("unchecked") Suggestion s=new Suggestion(n,(NamedList<Object>)sugg.getVal(i));
    suggestionMap.put(n,s);
    suggestions.add(s);
  }
  Boolean correctlySpelled=(Boolean)spellInfo.get("correctlySpelled");
  if (correctlySpelled != null) {
    this.correctlySpelled=correctlySpelled;
  }
  @SuppressWarnings("unchecked") NamedList<Object> coll=(NamedList<Object>)spellInfo.get("collations");
  if (coll != null) {
    List<Object> collationInfo=coll.getAll("collation");
    collations=new ArrayList<>(collationInfo.size());
    for (    Object o : collationInfo) {
      if (o instanceof String) {
        collations.add(new Collation().setCollationQueryString((String)o));
      }
 else       if (o instanceof NamedList) {
        @SuppressWarnings("unchecked") NamedList<Object> expandedCollation=(NamedList<Object>)o;
        String collationQuery=(String)expandedCollation.get("collationQuery");
        int hits=(Integer)expandedCollation.get("hits");
        @SuppressWarnings("unchecked") NamedList<String> misspellingsAndCorrections=(NamedList<String>)expandedCollation.get("misspellingsAndCorrections");
        Collation collation=new Collation();
        collation.setCollationQueryString(collationQuery);
        collation.setNumberOfHits(hits);
        for (int ii=0; ii < misspellingsAndCorrections.size(); ii++) {
          String misspelling=misspellingsAndCorrections.getName(ii);
          String correction=misspellingsAndCorrections.getVal(ii);
          collation.addMisspellingsAndCorrection(new Correction(misspelling,correction));
        }
        collations.add(collation);
      }
 else {
        throw new AssertionError("Should get Lists of Strings or List of NamedLists here.");
      }
    }
  }
}
