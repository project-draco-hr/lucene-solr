{
  int cardinality=100000;
  String[] fields=new String[]{"test_s_dv","test_i_dv","test_l_dv","test_f_dv","test_d_dv","test_ss_dv","test_is_dv","test_fs_dv","test_ls_dv","test_ds_dv","test_s","test_i","test_l","test_f","test_d","test_ss","test_is","test_fs","test_ls","test_ds"};
  for (int i=0; i < atLeast(500); i++) {
    if (random().nextInt(50) == 0) {
      assertU(adoc("id",String.valueOf(i)));
      continue;
    }
    if (random().nextInt(100) == 0 && i > 0) {
      assertU(delI(String.valueOf(i - 1)));
    }
    String[] docFields=new String[(random().nextInt(5)) * 10 + 12];
    docFields[0]="id";
    docFields[1]=String.valueOf(i);
    docFields[2]="test_s";
    docFields[3]=String.valueOf(random().nextInt(cardinality));
    docFields[4]="test_i";
    docFields[5]=String.valueOf(random().nextInt(cardinality));
    docFields[6]="test_l";
    docFields[7]=String.valueOf(random().nextInt(cardinality));
    docFields[8]="test_f";
    docFields[9]=String.valueOf(random().nextFloat() * cardinality);
    docFields[10]="test_d";
    docFields[11]=String.valueOf(random().nextDouble() * cardinality);
    for (int j=12; j < docFields.length; ) {
      docFields[j++]="test_ss";
      docFields[j++]=String.valueOf(random().nextInt(cardinality));
      docFields[j++]="test_is";
      docFields[j++]=String.valueOf(random().nextInt(cardinality));
      docFields[j++]="test_ls";
      docFields[j++]=String.valueOf(random().nextInt(cardinality));
      docFields[j++]="test_fs";
      docFields[j++]=String.valueOf(random().nextFloat() * cardinality);
      docFields[j++]="test_ds";
      docFields[j++]=String.valueOf(random().nextDouble() * cardinality);
    }
    assertU(adoc(docFields));
    if (random().nextInt(50) == 0) {
      assertU(commit());
    }
  }
  assertU(commit());
  for (int i=0; i < atLeast(100); i++) {
    doTestQuery(cardinality,fields);
  }
}
