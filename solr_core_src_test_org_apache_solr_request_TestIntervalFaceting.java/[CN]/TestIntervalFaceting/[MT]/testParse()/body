{
  assertInterval("test_l_dv","(0,2)",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(0,2]",new long[]{1,2},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[0,2]",new long[]{0,1,2},new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[0,2)",new long[]{0,1},new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(0,*)",new long[]{1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{-1,0,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{});
  assertInterval("test_l_dv","(*,2)",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE,0,1},new long[]{},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(*,*)",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE,0,1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{},new long[]{});
  assertInterval("test_l_dv","[0,*]",new long[]{0,1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{});
  assertInterval("test_l_dv","[*,2]",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE,0,1,2},new long[]{},new long[]{3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[*,*]",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE,0,1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{},new long[]{});
  assertInterval("test_l_dv","(2,2)",new long[]{},new long[]{2,1,0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(0,0)",new long[]{},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(0," + Long.MAX_VALUE + "]",new long[]{1,2,3,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{});
  assertInterval("test_l_dv","(0," + Long.MAX_VALUE + ")",new long[]{1,2,3,Integer.MAX_VALUE},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{Long.MAX_VALUE});
  assertInterval("test_l_dv","(" + Long.MIN_VALUE + ",0)",new long[]{-1,Integer.MIN_VALUE},new long[]{Long.MIN_VALUE},new long[]{1,2,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[" + Long.MIN_VALUE + ",0)",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{},new long[]{1,2,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[" + Long.MIN_VALUE + ","+ Long.MAX_VALUE+ "]",new long[]{-1,Integer.MIN_VALUE,Long.MIN_VALUE,1,2,Integer.MAX_VALUE,Long.MAX_VALUE},new long[]{},new long[]{});
  assertInterval("test_l_dv","(" + Long.MIN_VALUE + ","+ Long.MAX_VALUE+ ")",new long[]{-1,Integer.MIN_VALUE,1,2,Integer.MAX_VALUE},new long[]{Long.MIN_VALUE},new long[]{Long.MAX_VALUE});
  assertInterval("test_l_dv","( 0,2)",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(   0,2)",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(0,   2)",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","(  0  ,   2  )",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","  (  0  ,   2  )  ",new long[]{1},new long[]{0,-1,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertInterval("test_l_dv","[-1,1]",new long[]{-1,0,1},new long[]{-2,Integer.MIN_VALUE,Long.MIN_VALUE},new long[]{2,3,Integer.MAX_VALUE,Long.MAX_VALUE});
  assertStringInterval("test_s_dv","[A,B]","A","B");
  assertStringInterval("test_s_dv","[A,b]","A","b");
  assertStringInterval("test_s_dv","[A\\,,B]","A,","B");
  assertStringInterval("test_s_dv","[A\\),B]","A)","B");
  assertStringInterval("test_s_dv","['A',B]","'A'","B");
  assertStringInterval("test_s_dv","[\"A\",B]","\"A\"","B");
  assertStringInterval("test_s_dv","[A B C,B]","A B C","B");
  assertStringInterval("test_s_dv","[ A B C ,B]","A B C","B");
  assertBadInterval("test_l_dv","0,2)","Invalid start character");
  assertBadInterval("test_l_dv","{0,2)","Invalid start character");
  assertBadInterval("test_l_dv","(0,2","Invalid end character");
  assertBadInterval("test_l_dv","(0,2}","Invalid end character");
  assertBadInterval("test_l_dv","(0, )","Empty interval limit");
  assertBadInterval("test_l_dv","(0)","Missing unescaped comma separating interval");
  assertBadInterval("test_l_dv","(,0)","Empty interval limit");
  assertBadInterval("test_l_dv","(0 2)","Missing unescaped comma separating interval");
  assertBadInterval("test_l_dv","(0 TO 2)","Missing unescaped comma separating interval");
  assertBadInterval("test_l_dv","(0 \\, 2)","Missing unescaped comma separating interval");
  assertBadInterval("test_l_dv","(A, 2)","Invalid start interval for key");
  assertBadInterval("test_l_dv","(2, A)","Invalid end interval for key");
  assertBadInterval("test_l_dv","(0,)","Empty interval limit");
  assertBadInterval("test_l_dv","(0,-1)","Start is higher than end in interval for key");
  assertBadInterval("test_s_dv","A,B)","Invalid start character");
  assertBadInterval("test_s_dv","(B,A)","Start is higher than end in interval for key");
  assertBadInterval("test_s_dv","(a,B)","Start is higher than end in interval for key");
  assertU(adoc("id","1","test_s_dv","dog","test_l_dv","1"));
  assertU(adoc("id","2","test_s_dv","cat","test_l_dv","2"));
  assertU(adoc("id","3","test_s_dv","bird","test_l_dv","3"));
  assertU(adoc("id","4","test_s_dv","turtle","test_l_dv","4"));
  assertU(adoc("id","5","test_s_dv","\\goodbye,","test_l_dv","5"));
  assertU(adoc("id","6","test_s_dv",",hello\\","test_l_dv","6"));
  assertU(adoc("id","7","test_s_dv","dog","test_l_dv","7"));
  assertU(adoc("id","8","test_s_dv","dog","test_l_dv","8"));
  assertU(adoc("id","9","test_s_dv","cat","test_l_dv","9"));
  assertU(adoc("id","10"));
  assertU(commit());
  assertQ(req("q","*:*","facet","true","f.test_s_dv.facet.interval.set","[cat,dog]","f.test_l_dv.facet.interval.set","[3,6]","f.test_l_dv.facet.interval.set","[5,9]"),"count(//lst[@name='facet_intervals']/lst)=0");
  assertQ(req("q","*:*","facet","true","facet.interval","test_s_dv","f.test_s_dv.facet.interval.set","[cat,dog]","f.test_l_dv.facet.interval.set","[3,6]","f.test_l_dv.facet.interval.set","[5,9]"),"count(//lst[@name='facet_intervals']/lst)=1","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]");
  assertQEx("Unexpected exception","Missing required parameter: f.test_l_dv.facet.interval.set (or default: facet.interval.set)",req("q","*:*","facet","true","facet.interval","test_s_dv","facet.interval","test_l_dv","f.test_s_dv.facet.interval.set","[cat,dog]"),SolrException.ErrorCode.BAD_REQUEST);
  assertQ(req("q","*:*","facet","true","facet.interval","test_s_dv","facet.interval","test_l_dv","facet.interval.set","[1,2]"),"count(//lst[@name='facet_intervals']/lst)=2","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]");
  assertQ(req("q","*:*","facet","true","facet.interval","test_s_dv","facet.interval","test_l_dv","facet.interval.set","[1,2]","facet.interval.set","[2,3]","facet.interval.set","[3,4]"),"count(//lst[@name='facet_intervals']/lst)=2","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[2,3]'][.=0]","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[3,4]'][.=0]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]");
  assertQ(req("q","*:*","facet","true","facet.interval","test_s_dv","facet.interval","test_l_dv","facet.interval.set","[1,2]","f.test_l_dv.facet.interval.set","[3,4]","f.test_l_dv.facet.interval.set","[4,5]"),"count(//lst[@name='facet_intervals']/lst)=2","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]","count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=2","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[4,5]'][.=2]");
  assertQ(req("q","*:*","facet","true","facet.interval","test_s_dv","facet.interval","test_l_dv","facet.interval.set","[1,2]","facet.interval.set","[2,3]","facet.interval.set","[3,4]","f.test_s_dv.facet.interval.set","[cat,dog]"),"count(//lst[@name='facet_intervals']/lst)=2","count(//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int)=1","//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]","count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=3","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]","//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]");
  assertQEx("Unexpected Exception","Invalid start interval",req("q","*:*","facet","true","facet.interval","test_l_dv","f.test_l_dv.facet.interval.set","[cat,dog]"),SolrException.ErrorCode.BAD_REQUEST);
}
