{
  String[] startOptions=new String[]{"(","["};
  String[] endOptions=new String[]{")","]"};
  Integer[] qRange=getRandomRange(cardinality,"id");
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("q","id:[" + qRange[0] + " TO "+ qRange[1]+ "]");
  params.set("facet","true");
  String field=fields[random().nextInt(fields.length)];
  params.set("facet.interval",field);
  for (int i=0; i < 1 + random().nextInt(20); i++) {
    Integer[] interval=getRandomRange(cardinality,field);
    String open=startOptions[interval[0] % 2];
    String close=endOptions[interval[1] % 2];
    params.add("f." + field + ".facet.interval.set",open + interval[0] + ","+ interval[1]+ close);
    params.add("facet.query",field + ":" + open.replace('(','{')+ interval[0]+ " TO "+ interval[1]+ close.replace(')','}'));
  }
  SolrQueryRequest req=req(params);
  try {
    SolrQueryResponse rsp=h.queryAndResponse("standard",req);
    NamedList<Object> facetQueries=(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_queries");
    NamedList<Object> facetIntervals=(NamedList<Object>)((NamedList<Object>)(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_intervals")).get(field);
    assertEquals("Responses don't have the same number of facets: \n" + facetQueries + "\n"+ facetIntervals,facetQueries.size(),facetIntervals.size());
    for (int i=0; i < facetIntervals.size(); i++) {
      assertEquals("Interval did not match: " + facetIntervals.getName(i),facetIntervals.getVal(i).toString(),facetQueries.get(field + ":" + facetIntervals.getName(i).replace(","," TO ").replace('(','{').replace(')','}')).toString());
    }
  }
  finally {
    req.close();
  }
}
