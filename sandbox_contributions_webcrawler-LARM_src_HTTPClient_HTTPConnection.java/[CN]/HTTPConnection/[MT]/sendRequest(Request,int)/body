{
  ByteArrayOutputStream hdr_buf=new ByteArrayOutputStream(600);
  Response resp=null;
  boolean keep_alive;
  if (early_stall != null) {
    try {
      Log.write(Log.CONN,"Conn:  Early-stalling Request: " + req.getMethod() + " "+ req.getRequestURI());
synchronized (early_stall) {
        try {
          early_stall.getVersion();
        }
 catch (        IOException ioe) {
        }
        early_stall=null;
      }
    }
 catch (    NullPointerException npe) {
    }
  }
  String[] con_hdrs=assembleHeaders(req,hdr_buf);
  try {
    if (ServerProtocolVersion >= HTTP_1_1 && !Util.hasToken(con_hdrs[0],"close") || ServerProtocolVersion == HTTP_1_0 && Util.hasToken(con_hdrs[0],"keep-alive")) {
      keep_alive=true;
    }
 else {
      keep_alive=false;
    }
  }
 catch (  ParseException pe) {
    throw new IOException(pe.toString());
  }
synchronized (this) {
    if (late_stall != null) {
      if (input_demux != null || keepAliveUnknown) {
        Log.write(Log.CONN,"Conn:  Stalling Request: " + req.getMethod() + " "+ req.getRequestURI());
        try {
          late_stall.getVersion();
          if (keepAliveUnknown) {
            determineKeepAlive(late_stall);
          }
        }
 catch (        IOException ioe) {
        }
      }
      late_stall=null;
    }
    if ((req.getMethod().equals("POST") || req.dont_pipeline) && prev_resp != null && input_demux != null) {
      Log.write(Log.CONN,"Conn:  Stalling Request: " + req.getMethod() + " "+ req.getRequestURI());
      try {
        prev_resp.getVersion();
      }
 catch (      IOException ioe) {
      }
    }
    if (!output_finished) {
      try {
        wait();
      }
 catch (      InterruptedException ie) {
        throw new IOException(ie.toString());
      }
    }
    if (req.aborted) {
      throw new IOException("Request aborted by user");
    }
    int try_count=3;
    while (try_count-- > 0) {
      try {
        Socket sock;
        if (input_demux == null || (sock=input_demux.getSocket()) == null) {
          sock=getSocket(con_timeout);
          if (Protocol == HTTPS) {
            if (Proxy_Host != null) {
              Socket[] sarr={sock};
              resp=enableSSLTunneling(sarr,req,con_timeout);
              if (resp != null) {
                resp.final_resp=true;
                return resp;
              }
              sock=sarr[0];
            }
            sock.setSoTimeout(con_timeout);
          }
          input_demux=new StreamDemultiplexor(Protocol,sock,this);
          DemuxList.addToEnd(input_demux);
          keepAliveReqLeft=keepAliveReqMax;
        }
        if (req.aborted) {
          throw new IOException("Request aborted by user");
        }
        Log.write(Log.CONN,"Conn:  Sending Request: ",hdr_buf);
        OutputStream sock_out=sock.getOutputStream();
        if (haveMSLargeWritesBug) {
          sock_out=new MSLargeWritesBugStream(sock_out);
        }
        hdr_buf.writeTo(sock_out);
        try {
          if (ServProtVersKnown && ServerProtocolVersion >= HTTP_1_1 && Util.hasToken(con_hdrs[1],"100-continue")) {
            resp=new Response(req,(Proxy_Host != null && Protocol != HTTPS),input_demux);
            resp.timeout=60;
            if (resp.getContinue() != 100) {
              break;
            }
          }
        }
 catch (        ParseException pe) {
          throw new IOException(pe.toString());
        }
catch (        InterruptedIOException iioe) {
        }
 finally {
          if (resp != null) {
            resp.timeout=0;
          }
        }
        if (req.getData() != null && req.getData().length > 0) {
          if (req.delay_entity > 0) {
            long num_units=req.delay_entity / 100;
            long one_unit=req.delay_entity / num_units;
            for (int idx=0; idx < num_units; idx++) {
              if (input_demux.available(null) != 0) {
                break;
              }
              try {
                Thread.sleep(one_unit);
              }
 catch (              InterruptedException ie) {
              }
            }
            if (input_demux.available(null) == 0) {
              sock_out.write(req.getData());
            }
 else {
              keep_alive=false;
            }
          }
 else {
            sock_out.write(req.getData());
          }
        }
        if (req.getStream() != null) {
          req.getStream().goAhead(req,sock_out,0);
        }
 else {
          sock_out.flush();
        }
        if (resp == null) {
          resp=new Response(req,(Proxy_Host != null && Protocol != HTTPS),input_demux);
        }
      }
 catch (      IOException ioe) {
        Log.write(Log.CONN,"Conn:  ",ioe);
        closeDemux(ioe,true);
        if (try_count == 0 || ioe instanceof UnknownHostException || ioe instanceof ConnectException || ioe instanceof NoRouteToHostException || ioe instanceof InterruptedIOException || req.aborted) {
          throw ioe;
        }
        Log.write(Log.CONN,"Conn:  Retrying request");
        continue;
      }
      break;
    }
    prev_resp=resp;
    if ((!keepAliveUnknown && !doesKeepAlive) || !keep_alive || (keepAliveReqMax != -1 && keepAliveReqLeft-- == 0)) {
      input_demux.markForClose(resp);
      input_demux=null;
    }
 else {
      input_demux.restartTimer();
    }
    if (keepAliveReqMax != -1) {
      Log.write(Log.CONN,"Conn:  Number of requests left: " + keepAliveReqLeft);
    }
    if (!ServProtVersKnown) {
      early_stall=resp;
      resp.markAsFirstResponse(req);
    }
    if (keepAliveUnknown || !IdempotentSequence.methodIsIdempotent(req.getMethod()) || req.dont_pipeline|| neverPipeline) {
      late_stall=resp;
    }
    if (req.getStream() != null) {
      output_finished=false;
    }
 else {
      output_finished=true;
      notify();
    }
    Log.write(Log.CONN,"Conn:  Request sent");
  }
  return resp;
}
