{
  String rulesColl="ipRuleColl";
  String baseUrl=getBaseUrl((HttpSolrClient)clients.get(0));
  String ip_1="-1";
  String ip_2="-1";
  Matcher hostAndPortMatcher=Pattern.compile("(?:https?://)?([^:]+):(\\d+)").matcher(baseUrl);
  if (hostAndPortMatcher.find()) {
    String[] ipFragments=hostAndPortMatcher.group(1).split("\\.");
    ip_1=ipFragments[ipFragments.length - 1];
    ip_2=ipFragments[ipFragments.length - 2];
  }
  try (SolrClient client=createNewSolrClient("",baseUrl)){
    CollectionAdminResponse rsp;
    CollectionAdminRequest.Create create=new CollectionAdminRequest.Create();
    create.setCollectionName(rulesColl);
    create.setShards("shard1");
    create.setRouterName(ImplicitDocRouter.NAME);
    create.setReplicationFactor(2);
    create.setRule("ip_2:" + ip_2,"ip_1:" + ip_1);
    create.setSnitch("class:ImplicitSnitch");
    rsp=create.process(client);
    assertEquals(0,rsp.getStatus());
    assertTrue(rsp.isSuccess());
  }
   DocCollection rulesCollection=cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);
  List<Map> list=(List<Map>)rulesCollection.get("rule");
  assertEquals(2,list.size());
  assertEquals(ip_2,list.get(0).get("ip_2"));
  assertEquals(ip_1,list.get(1).get("ip_1"));
  list=(List)rulesCollection.get("snitch");
  assertEquals(1,list.size());
  assertEquals("ImplicitSnitch",list.get(0).get("class"));
}
