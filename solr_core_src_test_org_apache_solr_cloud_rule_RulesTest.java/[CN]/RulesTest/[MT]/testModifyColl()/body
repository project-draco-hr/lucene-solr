{
  final long minGB1=(random().nextBoolean() ? 1 : 0);
  final long minGB2=5;
  assumeTrue("testModifyColl needs minGB1=" + minGB1 + " usable disk space",ImplicitSnitch.getUsableSpaceInGB(Paths.get("/")) > minGB1);
  assumeTrue("testModifyColl needs minGB2=" + minGB2 + " usable disk space",ImplicitSnitch.getUsableSpaceInGB(Paths.get("/")) > minGB2);
  String rulesColl="modifyColl";
  CollectionAdminRequest.createCollection(rulesColl,"conf",1,2).setRule("cores:<4","node:*,replica:1","freedisk:>" + minGB1).setSnitch("class:ImplicitSnitch").process(cluster.getSolrClient());
  ModifiableSolrParams p=new ModifiableSolrParams();
  p.add("collection",rulesColl);
  p.add("action","MODIFYCOLLECTION");
  p.add("rule","cores:<5");
  p.add("rule","node:*,replica:1");
  p.add("rule","freedisk:>" + minGB2);
  p.add("autoAddReplicas","true");
  cluster.getSolrClient().request(new GenericSolrRequest(POST,COLLECTIONS_HANDLER_PATH,p));
  DocCollection rulesCollection=getCollectionState(rulesColl);
  log.info("version_of_coll {}  ",rulesCollection.getZNodeVersion());
  List list=(List)rulesCollection.get("rule");
  assertEquals(3,list.size());
  assertEquals("<5",((Map)list.get(0)).get("cores"));
  assertEquals("1",((Map)list.get(1)).get("replica"));
  assertEquals(">" + minGB2,((Map)list.get(2)).get("freedisk"));
  assertEquals("true",String.valueOf(rulesCollection.getProperties().get("autoAddReplicas")));
  list=(List)rulesCollection.get("snitch");
  assertEquals(1,list.size());
  assertEquals("ImplicitSnitch",((Map)list.get(0)).get("class"));
  CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());
}
