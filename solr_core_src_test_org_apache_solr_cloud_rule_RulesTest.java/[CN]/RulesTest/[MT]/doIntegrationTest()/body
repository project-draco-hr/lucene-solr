{
  final long minGB=(random().nextBoolean() ? 1 : 0);
  assumeTrue("doIntegrationTest needs minGB=" + minGB + " usable disk space",ImplicitSnitch.getUsableSpaceInGB(Paths.get("/")) > minGB);
  String rulesColl="rulesColl";
  try (SolrClient client=createNewSolrClient("",getBaseUrl((HttpSolrClient)clients.get(0)))){
    CollectionAdminResponse rsp;
    CollectionAdminRequest.Create create=new CollectionAdminRequest.Create().setCollectionName(rulesColl).setShards("shard1").setRouterName(ImplicitDocRouter.NAME).setReplicationFactor(2).setRule("cores:<4","node:*,replica:<2","freedisk:>" + minGB).setSnitch("class:ImplicitSnitch");
    rsp=create.process(client);
    assertEquals(0,rsp.getStatus());
    assertTrue(rsp.isSuccess());
  }
   DocCollection rulesCollection=cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);
  List list=(List)rulesCollection.get("rule");
  assertEquals(3,list.size());
  assertEquals("<4",((Map)list.get(0)).get("cores"));
  assertEquals("<2",((Map)list.get(1)).get("replica"));
  assertEquals(">" + minGB,((Map)list.get(2)).get("freedisk"));
  list=(List)rulesCollection.get("snitch");
  assertEquals(1,list.size());
  assertEquals("ImplicitSnitch",((Map)list.get(0)).get("class"));
  try (SolrClient client=createNewSolrClient("",getBaseUrl((HttpSolrClient)clients.get(0)))){
    CollectionAdminResponse rsp;
    CollectionAdminRequest.CreateShard createShard=new CollectionAdminRequest.CreateShard().setCollectionName(rulesColl).setShardName("shard2");
    rsp=createShard.process(client);
    assertEquals(0,rsp.getStatus());
    assertTrue(rsp.isSuccess());
    CollectionAdminRequest.AddReplica addReplica=new CollectionAdminRequest.AddReplica().setCollectionName(rulesColl).setShardName("shard2");
    rsp=addReplica.process(client);
    assertEquals(0,rsp.getStatus());
    assertTrue(rsp.isSuccess());
  }
 }
