{
  addCommands.incrementAndGet();
  addCommandsCumulative.incrementAndGet();
  int rc=-1;
  if (idField == null) {
    cmd.allowDups=true;
    cmd.overwriteCommitted=false;
    cmd.overwritePending=false;
  }
  iwAccess.lock();
  try {
synchronized (this) {
      if (!cmd.allowDups && !cmd.overwritePending && !cmd.overwriteCommitted) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unsupported param combo:" + cmd);
      }
 else       if (!cmd.allowDups && !cmd.overwritePending && cmd.overwriteCommitted) {
        rc=addConditionally(cmd);
      }
 else       if (!cmd.allowDups && cmd.overwritePending && !cmd.overwriteCommitted) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unsupported param combo:" + cmd);
      }
 else       if (!cmd.allowDups && cmd.overwritePending && cmd.overwriteCommitted) {
        rc=overwriteBoth(cmd);
      }
 else       if (cmd.allowDups && !cmd.overwritePending && !cmd.overwriteCommitted) {
        rc=allowDups(cmd);
      }
 else       if (cmd.allowDups && !cmd.overwritePending && cmd.overwriteCommitted) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unsupported param combo:" + cmd);
      }
 else       if (cmd.allowDups && cmd.overwritePending && !cmd.overwriteCommitted) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unsupported param combo:" + cmd);
      }
 else       if (cmd.allowDups && cmd.overwritePending && cmd.overwriteCommitted) {
        rc=overwriteBoth(cmd);
      }
      if (rc == -1)       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unsupported param combo:" + cmd);
      if (rc == 1) {
        closeSearcher();
        openWriter();
        tracker.addedDocument();
      }
 else {
        return rc;
      }
    }
    assert(rc == 1);
    writer.addDocument(cmd.doc);
  }
  finally {
    iwAccess.unlock();
    if (rc != 1) {
      numErrors.incrementAndGet();
      numErrorsCumulative.incrementAndGet();
    }
 else {
      numDocsPending.incrementAndGet();
    }
  }
  if (maxPendingDeletes > 0 && pset.size() > maxPendingDeletes) {
    iwCommit.lock();
    try {
      doDeletions();
    }
  finally {
      iwCommit.unlock();
    }
  }
  return rc;
}
