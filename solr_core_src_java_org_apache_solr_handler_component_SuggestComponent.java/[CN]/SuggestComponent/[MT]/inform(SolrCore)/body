{
  if (initParams != null) {
    LOG.info("Initializing SuggestComponent");
    boolean hasDefault=false;
    for (int i=0; i < initParams.size(); i++) {
      if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {
        NamedList suggesterParams=(NamedList)initParams.getVal(i);
        SolrSuggester suggester=new SolrSuggester();
        String dictionary=suggester.init(suggesterParams,core);
        if (dictionary != null) {
          boolean isDefault=dictionary.equals(DEFAULT_DICT_NAME);
          if (isDefault && !hasDefault) {
            hasDefault=true;
          }
 else           if (isDefault) {
            throw new RuntimeException("More than one dictionary is missing name.");
          }
          suggesters.put(dictionary,suggester);
        }
 else {
          if (!hasDefault) {
            suggesters.put(DEFAULT_DICT_NAME,suggester);
            hasDefault=true;
          }
 else {
            throw new RuntimeException("More than one dictionary is missing name.");
          }
        }
        boolean buildOnStartup;
        Object buildOnStartupObj=suggesterParams.get(BUILD_ON_STARTUP_LABEL);
        if (buildOnStartupObj == null) {
          File storeFile=suggester.getStoreFile();
          buildOnStartup=storeFile == null || !storeFile.exists();
        }
 else {
          buildOnStartup=Boolean.parseBoolean((String)buildOnStartupObj);
        }
        boolean buildOnCommit=Boolean.parseBoolean((String)suggesterParams.get(BUILD_ON_COMMIT_LABEL));
        boolean buildOnOptimize=Boolean.parseBoolean((String)suggesterParams.get(BUILD_ON_OPTIMIZE_LABEL));
        if (buildOnCommit || buildOnOptimize || buildOnStartup) {
          SuggesterListener listener=new SuggesterListener(core,suggester,buildOnCommit,buildOnOptimize,buildOnStartup,core.isReloaded());
          LOG.info("Registering searcher listener for suggester: " + suggester.getName() + " - "+ listener);
          core.registerFirstSearcherListener(listener);
          core.registerNewSearcherListener(listener);
        }
      }
    }
  }
}
