{
  SuggesterResult result=new SuggesterResult();
  if (suggestionsMap == null) {
    return result;
  }
  for (  Map.Entry<String,SimpleOrderedMap<NamedList<Object>>> entry : suggestionsMap.entrySet()) {
    String suggesterName=entry.getKey();
    for (Iterator<Map.Entry<String,NamedList<Object>>> suggestionsIter=entry.getValue().iterator(); suggestionsIter.hasNext(); ) {
      Map.Entry<String,NamedList<Object>> suggestions=suggestionsIter.next();
      String tokenString=suggestions.getKey();
      List<LookupResult> lookupResults=new ArrayList<LookupResult>();
      NamedList<Object> suggestion=suggestions.getValue();
      for (int j=0; j < suggestion.size(); j++) {
        String property=suggestion.getName(j);
        if (property.equals(SuggesterResultLabels.SUGGESTIONS)) {
          @SuppressWarnings("unchecked") List<NamedList<Object>> suggestionEntries=(List<NamedList<Object>>)suggestion.getVal(j);
          for (          NamedList<Object> suggestionEntry : suggestionEntries) {
            String term=(String)suggestionEntry.get(SuggesterResultLabels.SUGGESTION_TERM);
            Long weight=(Long)suggestionEntry.get(SuggesterResultLabels.SUGGESTION_WEIGHT);
            String payload=(String)suggestionEntry.get(SuggesterResultLabels.SUGGESTION_PAYLOAD);
            LookupResult res=new LookupResult(new CharsRef(term),weight,new BytesRef(payload));
            lookupResults.add(res);
          }
        }
        result.add(suggesterName,tokenString,lookupResults);
      }
    }
  }
  return result;
}
