{
  return new Spans(){
    private Spans includeSpans=include.getSpans(reader);
    private boolean moreInclude=true;
    private Spans excludeSpans=exclude.getSpans(reader);
    private boolean moreExclude=excludeSpans.next();
    public boolean next() throws IOException {
      if (moreInclude)       moreInclude=includeSpans.next();
      while (moreInclude && moreExclude) {
        if (includeSpans.doc() > excludeSpans.doc())         moreExclude=excludeSpans.skipTo(includeSpans.doc());
        while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
          moreExclude=excludeSpans.next();
        }
        if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())         break;
        moreInclude=includeSpans.next();
      }
      return moreInclude;
    }
    public boolean skipTo(    int target) throws IOException {
      if (moreInclude)       moreInclude=includeSpans.skipTo(target);
      if (!moreInclude)       return false;
      if (moreExclude && includeSpans.doc() > excludeSpans.doc())       moreExclude=excludeSpans.skipTo(includeSpans.doc());
      while (moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
        moreExclude=excludeSpans.next();
      }
      if (!moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())       return true;
      return next();
    }
    public int doc(){
      return includeSpans.doc();
    }
    public int start(){
      return includeSpans.start();
    }
    public int end(){
      return includeSpans.end();
    }
    public Collection<byte[]> getPayload() throws IOException {
      ArrayList<byte[]> result=null;
      if (includeSpans.isPayloadAvailable()) {
        result=new ArrayList<byte[]>(includeSpans.getPayload());
      }
      return result;
    }
    public boolean isPayloadAvailable(){
      return includeSpans.isPayloadAvailable();
    }
    public String toString(){
      return "spans(" + SpanNotQuery.this.toString() + ")";
    }
  }
;
}
