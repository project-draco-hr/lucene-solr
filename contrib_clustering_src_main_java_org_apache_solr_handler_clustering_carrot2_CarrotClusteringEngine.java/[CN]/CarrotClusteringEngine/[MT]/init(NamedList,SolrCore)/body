{
  String result=super.init(config,core);
  SolrParams initParams=SolrParams.toSolrParams(config);
  HashMap<String,Object> initAttributes=new HashMap<String,Object>();
  extractCarrotAttributes(initParams,initAttributes);
  this.controller.init(initAttributes);
  this.core=core;
  this.idFieldName=core.getSchema().getUniqueKeyField().getName();
  String carrotAlgorithmClassName=initParams.get(CarrotParams.ALGORITHM);
  try {
    Class<?> algorithmClass=Thread.currentThread().getContextClassLoader().loadClass(carrotAlgorithmClassName);
    if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {
      throw new IllegalArgumentException("Class provided as " + CarrotParams.ALGORITHM + " must implement "+ IClusteringAlgorithm.class.getName());
    }
    this.clusteringAlgorithmClass=(Class<? extends IClusteringAlgorithm>)algorithmClass;
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Failed to load Carrot clustering algorithm class",e);
  }
  return result;
}
