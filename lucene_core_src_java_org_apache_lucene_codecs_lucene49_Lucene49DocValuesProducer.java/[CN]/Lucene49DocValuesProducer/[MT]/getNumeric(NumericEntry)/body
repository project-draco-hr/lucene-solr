{
  RandomAccessInput slice=this.data.randomAccessSlice(entry.offset,entry.endOffset - entry.offset);
switch (entry.format) {
case DELTA_COMPRESSED:
    final long delta=entry.minValue;
  final LongValues values=DirectReader.getInstance(slice,entry.bitsPerValue);
return new LongValues(){
  @Override public long get(  long id){
    return delta + values.get(id);
  }
}
;
case GCD_COMPRESSED:
final long min=entry.minValue;
final long mult=entry.gcd;
final LongValues quotientReader=DirectReader.getInstance(slice,entry.bitsPerValue);
return new LongValues(){
@Override public long get(long id){
return min + mult * quotientReader.get(id);
}
}
;
case TABLE_COMPRESSED:
final long table[]=entry.table;
final LongValues ords=DirectReader.getInstance(slice,entry.bitsPerValue);
return new LongValues(){
@Override public long get(long id){
return table[(int)ords.get(id)];
}
}
;
default :
throw new AssertionError();
}
}
