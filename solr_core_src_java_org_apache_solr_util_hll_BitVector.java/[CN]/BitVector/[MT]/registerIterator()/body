{
  return new LongIterator(){
    final int registerWidth=BitVector.this.registerWidth;
    final long[] words=BitVector.this.words;
    final long registerMask=BitVector.this.registerMask;
    long registerIndex=0;
    int wordIndex=0;
    int remainingWordBits=BITS_PER_WORD;
    long word=words[wordIndex];
    @Override public long next(){
      long register;
      if (remainingWordBits >= registerWidth) {
        register=word & registerMask;
        word>>>=registerWidth;
        remainingWordBits-=registerWidth;
      }
 else {
        wordIndex++;
        register=(word | (words[wordIndex] << remainingWordBits)) & registerMask;
        word=words[wordIndex] >>> (registerWidth - remainingWordBits);
        remainingWordBits+=BITS_PER_WORD - registerWidth;
      }
      registerIndex++;
      return register;
    }
    @Override public boolean hasNext(){
      return registerIndex < count;
    }
  }
;
}
