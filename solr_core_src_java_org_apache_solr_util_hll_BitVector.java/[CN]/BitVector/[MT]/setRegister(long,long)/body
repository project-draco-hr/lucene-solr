{
  final long bitIndex=registerIndex * registerWidth;
  final int firstWordIndex=(int)(bitIndex >>> LOG2_BITS_PER_WORD);
  final int secondWordIndex=(int)((bitIndex + registerWidth - 1) >>> LOG2_BITS_PER_WORD);
  final int bitRemainder=(int)(bitIndex & BITS_PER_WORD_MASK);
  final long words[]=this.words;
  if (firstWordIndex == secondWordIndex) {
    words[firstWordIndex]&=~(registerMask << bitRemainder);
    words[firstWordIndex]|=(value << bitRemainder);
  }
 else {
    words[firstWordIndex]&=(1L << bitRemainder) - 1;
    words[firstWordIndex]|=(value << bitRemainder);
    words[secondWordIndex]&=~(registerMask >>> (BITS_PER_WORD - bitRemainder));
    words[secondWordIndex]|=(value >>> (BITS_PER_WORD - bitRemainder));
  }
}
