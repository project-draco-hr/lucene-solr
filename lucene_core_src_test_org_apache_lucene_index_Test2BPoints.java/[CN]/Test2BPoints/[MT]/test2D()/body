{
  Directory dir=FSDirectory.open(createTempDir("2BPoints2D"));
  IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random())).setCodec(getCodec()).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setRAMBufferSizeMB(256.0).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy(false,10)).setOpenMode(IndexWriterConfig.OpenMode.CREATE);
  ((ConcurrentMergeScheduler)iwc.getMergeScheduler()).setMaxMergesAndThreads(6,3);
  IndexWriter w=new IndexWriter(dir,iwc);
  MergePolicy mp=w.getConfig().getMergePolicy();
  if (mp instanceof LogByteSizeMergePolicy) {
    ((LogByteSizeMergePolicy)mp).setMaxMergeMB(1024 * 1024 * 1024);
  }
  final int numDocs=(Integer.MAX_VALUE / 26) + 1;
  long counter=0;
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    for (int j=0; j < 26; j++) {
      doc.add(new LongPoint("long",counter,2 * counter + 1));
      counter++;
    }
    w.addDocument(doc);
    if (VERBOSE && i % 100000 == 0) {
      System.out.println(i + " of " + numDocs+ "...");
    }
  }
  w.forceMerge(1);
  DirectoryReader r=DirectoryReader.open(w);
  IndexSearcher s=new IndexSearcher(r);
  assertEquals(1250,s.count(LongPoint.newRangeQuery("long",new long[]{33640828,33673327},new long[]{Long.MIN_VALUE,Long.MAX_VALUE})));
  assertTrue(r.leaves().get(0).reader().getPointValues().size("long") > Integer.MAX_VALUE);
  r.close();
  w.close();
  System.out.println("TEST: now CheckIndex");
  TestUtil.checkIndex(dir);
  dir.close();
}
