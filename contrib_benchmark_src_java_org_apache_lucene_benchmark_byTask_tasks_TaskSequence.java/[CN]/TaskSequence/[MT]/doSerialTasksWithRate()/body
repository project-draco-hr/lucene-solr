{
  initTasksArray();
  long delayStep=(perMin ? 60000 : 1000) / rate;
  long nextStartTime=System.currentTimeMillis();
  int count=0;
  final long t0=System.currentTimeMillis();
  for (int k=0; (repetitions == REPEAT_EXHAUST && !exhausted) || k < repetitions; k++) {
    if (stopNow) {
      break;
    }
    for (int l=0; l < tasksArray.length; l++) {
      final PerfTask task=tasksArray[l];
      while (!stopNow) {
        long waitMore=nextStartTime - System.currentTimeMillis();
        if (waitMore > 0) {
          Thread.sleep(1);
        }
 else {
          break;
        }
      }
      if (stopNow) {
        break;
      }
      nextStartTime+=delayStep;
      try {
        final int inc=task.runAndMaybeStats(letChildReport);
        count+=inc;
        if (countsByTime != null) {
          final int slot=(int)((System.currentTimeMillis() - t0) / logByTimeMsec);
          if (slot >= countsByTime.length) {
            countsByTime=ArrayUtil.grow(countsByTime,1 + slot);
          }
          countsByTime[slot]+=inc;
        }
        if (anyExhaustibleTasks)         updateExhausted(task);
      }
 catch (      NoMoreDataException e) {
        exhausted=true;
      }
    }
  }
  stopNow=false;
  return count;
}
