{
  initTasksArray();
  final int count[]={0};
  Thread t[]=new Thread[repetitions * tasks.size()];
  int indx=0;
  for (int k=0; k < repetitions; k++) {
    for (int i=0; i < tasksArray.length; i++) {
      final PerfTask task=(PerfTask)tasksArray[i].clone();
      t[indx++]=new Thread(){
        @Override public void run(){
          try {
            int n=task.runAndMaybeStats(letChildReport);
            if (anyExhaustibleTasks)             updateExhausted(task);
synchronized (count) {
              count[0]+=n;
            }
          }
 catch (          NoMoreDataException e) {
            exhausted=true;
          }
catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
;
    }
  }
  startThreads(t);
  for (int i=0; i < t.length; i++) {
    t[i].join();
  }
  return count[0];
}
