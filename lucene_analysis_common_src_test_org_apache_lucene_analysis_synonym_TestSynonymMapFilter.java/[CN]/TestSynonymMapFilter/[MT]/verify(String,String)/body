{
  if (VERBOSE) {
    System.out.println("TEST: verify input=" + input + " expectedOutput="+ output);
  }
  tokensIn.reset(new StringReader(input));
  tokensOut.reset();
  final String[] expected=output.split(" ");
  int expectedUpto=0;
  while (tokensOut.incrementToken()) {
    if (VERBOSE) {
      System.out.println("  incr token=" + termAtt.toString() + " posIncr="+ posIncrAtt.getPositionIncrement()+ " startOff="+ offsetAtt.startOffset()+ " endOff="+ offsetAtt.endOffset());
    }
    assertTrue(expectedUpto < expected.length);
    final int startOffset=offsetAtt.startOffset();
    final int endOffset=offsetAtt.endOffset();
    final String[] expectedAtPos=expected[expectedUpto++].split("/");
    for (int atPos=0; atPos < expectedAtPos.length; atPos++) {
      if (atPos > 0) {
        assertTrue(tokensOut.incrementToken());
        if (VERBOSE) {
          System.out.println("  incr token=" + termAtt.toString() + " posIncr="+ posIncrAtt.getPositionIncrement()+ " startOff="+ offsetAtt.startOffset()+ " endOff="+ offsetAtt.endOffset());
        }
      }
      final int colonIndex=expectedAtPos[atPos].indexOf(':');
      final int underbarIndex=expectedAtPos[atPos].indexOf('_');
      final String expectedToken;
      final int expectedEndOffset;
      final int expectedPosLen;
      if (colonIndex != -1) {
        expectedToken=expectedAtPos[atPos].substring(0,colonIndex);
        if (underbarIndex != -1) {
          expectedEndOffset=Integer.parseInt(expectedAtPos[atPos].substring(1 + colonIndex,underbarIndex));
          expectedPosLen=Integer.parseInt(expectedAtPos[atPos].substring(1 + underbarIndex));
        }
 else {
          expectedEndOffset=Integer.parseInt(expectedAtPos[atPos].substring(1 + colonIndex));
          expectedPosLen=1;
        }
      }
 else {
        expectedToken=expectedAtPos[atPos];
        expectedEndOffset=endOffset;
        expectedPosLen=1;
      }
      assertEquals(expectedToken,termAtt.toString());
      assertEquals(atPos == 0 ? 1 : 0,posIncrAtt.getPositionIncrement());
      assertEquals(startOffset,offsetAtt.startOffset());
      assertEquals(expectedEndOffset,offsetAtt.endOffset());
      assertEquals(expectedPosLen,posLenAtt.getPositionLength());
    }
  }
  tokensOut.end();
  tokensOut.close();
  if (VERBOSE) {
    System.out.println("  incr: END");
  }
  assertEquals(expectedUpto,expected.length);
}
