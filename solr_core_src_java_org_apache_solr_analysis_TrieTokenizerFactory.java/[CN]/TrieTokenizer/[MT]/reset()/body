{
  super.reset();
  try {
    int upto=0;
    char[] buf=termAtt.buffer();
    while (true) {
      final int length=input.read(buf,upto,buf.length - upto);
      if (length == -1)       break;
      upto+=length;
      if (upto == buf.length)       buf=termAtt.resizeBuffer(1 + buf.length);
    }
    termAtt.setLength(upto);
    this.startOfs=correctOffset(0);
    this.endOfs=correctOffset(upto);
    if (upto == 0) {
      hasValue=false;
      return;
    }
    final String v=new String(buf,0,upto);
    try {
switch (type) {
case INTEGER:
        ts.setIntValue(Integer.parseInt(v));
      break;
case FLOAT:
    ts.setFloatValue(Float.parseFloat(v));
  break;
case LONG:
ts.setLongValue(Long.parseLong(v));
break;
case DOUBLE:
ts.setDoubleValue(Double.parseDouble(v));
break;
case DATE:
ts.setLongValue(dateField.parseMath(null,v).getTime());
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field");
}
}
 catch (NumberFormatException nfe) {
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Number: " + v);
}
hasValue=true;
ts.reset();
}
 catch (IOException e) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to create TrieIndexTokenizer",e);
}
}
