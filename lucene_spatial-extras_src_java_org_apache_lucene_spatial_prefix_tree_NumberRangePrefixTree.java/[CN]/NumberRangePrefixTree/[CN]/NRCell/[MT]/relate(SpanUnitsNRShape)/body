{
  assertDecoded();
  int startCmp=comparePrefix(spanShape.getMinUnit(),this);
  if (startCmp > 0) {
    return SpatialRelation.DISJOINT;
  }
  int endCmp=comparePrefix(spanShape.getMaxUnit(),this);
  if (endCmp < 0) {
    return SpatialRelation.DISJOINT;
  }
  int nrMinLevel=spanShape.getMinUnit().getLevel();
  int nrMaxLevel=spanShape.getMaxUnit().getLevel();
  if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel()) && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))   return SpatialRelation.WITHIN;
  if (startCmp != 0 || endCmp != 0)   return SpatialRelation.INTERSECTS;
  for (; nrMinLevel < getLevel(); nrMinLevel++) {
    if (getValAtLevel(nrMinLevel + 1) != 0)     return SpatialRelation.INTERSECTS;
  }
  for (; nrMaxLevel < getLevel(); nrMaxLevel++) {
    if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)     return SpatialRelation.INTERSECTS;
  }
  return SpatialRelation.CONTAINS;
}
