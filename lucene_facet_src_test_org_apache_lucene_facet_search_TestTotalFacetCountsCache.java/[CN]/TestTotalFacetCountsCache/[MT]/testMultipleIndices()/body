{
  Directory[][] dirs=FacetTestUtils.createIndexTaxonomyDirs(2);
  IndexTaxonomyWriterPair[] writers=FacetTestUtils.createIndexTaxonomyWriterPair(dirs);
  FacetIndexingParams iParams=FacetIndexingParams.ALL_PARENTS;
  addFacets(iParams,writers[0].indexWriter,writers[0].taxWriter,"a","b");
  addFacets(iParams,writers[1].indexWriter,writers[1].taxWriter,"d","e");
  writers[0].indexWriter.commit();
  writers[0].taxWriter.commit();
  writers[1].indexWriter.commit();
  writers[1].taxWriter.commit();
  IndexTaxonomyReaderPair[] readers=FacetTestUtils.createIndexTaxonomyReaderPair(dirs);
  TotalFacetCounts totalCounts0=TFC.getTotalCounts(readers[0].indexReader,readers[0].taxReader,iParams,null);
  int prevGen=-1;
  prevGen=assertRecomputed(totalCounts0,prevGen,"after attempt 1");
  assertTrue("attempt 1b for same input [0] shout find it in cache",totalCounts0 == TFC.getTotalCounts(readers[0].indexReader,readers[0].taxReader,iParams,null));
  TotalFacetCounts totalCounts1=TFC.getTotalCounts(readers[1].indexReader,readers[1].taxReader,iParams,null);
  prevGen=assertRecomputed(totalCounts1,prevGen,"after attempt 2");
  assertTrue("attempt 2b for same input [1] shout find it in cache",totalCounts1 == TFC.getTotalCounts(readers[1].indexReader,readers[1].taxReader,iParams,null));
  totalCounts0=TFC.getTotalCounts(readers[0].indexReader,readers[0].taxReader,iParams,null);
  prevGen=assertRecomputed(totalCounts0,prevGen,"after attempt 3");
  totalCounts1=TFC.getTotalCounts(readers[1].indexReader,readers[1].taxReader,iParams,null);
  prevGen=assertRecomputed(totalCounts1,prevGen,"after attempt 4");
  TFC.setCacheSize(2);
  totalCounts0=TFC.getTotalCounts(readers[0].indexReader,readers[0].taxReader,iParams,null);
  prevGen=assertRecomputed(totalCounts0,prevGen,"after attempt 5");
  totalCounts1=TFC.getTotalCounts(readers[1].indexReader,readers[1].taxReader,iParams,null);
  assertTrue("with cache of size 2 res no. 0 should come from cache",totalCounts0 == TFC.getTotalCounts(readers[0].indexReader,readers[0].taxReader,iParams,null));
  assertTrue("with cache of size 2 res no. 1 should come from cache",totalCounts1 == TFC.getTotalCounts(readers[1].indexReader,readers[1].taxReader,iParams,null));
  writers[0].close();
  writers[1].close();
  readers[0].close();
  readers[1].close();
  for (  Directory[] dirset : dirs) {
    IOUtils.close(dirset);
  }
}
