{
  InputStream mapIS=null, dictIS=null, posIS=null, inflIS=null;
  IOException priorE=null;
  int[] targetMapOffsets=null, targetMap=null;
  String[] posDict=null;
  String[] inflFormDict=null;
  String[] inflTypeDict=null;
  ByteBuffer buffer=null;
  try {
    mapIS=getResource(TARGETMAP_FILENAME_SUFFIX);
    mapIS=new BufferedInputStream(mapIS);
    DataInput in=new InputStreamDataInput(mapIS);
    CodecUtil.checkHeader(in,TARGETMAP_HEADER,VERSION,VERSION);
    targetMap=new int[in.readVInt()];
    targetMapOffsets=new int[in.readVInt()];
    int accum=0, sourceId=0;
    for (int ofs=0; ofs < targetMap.length; ofs++) {
      final int val=in.readVInt();
      if ((val & 0x01) != 0) {
        targetMapOffsets[sourceId]=ofs;
        sourceId++;
      }
      accum+=val >>> 1;
      targetMap[ofs]=accum;
    }
    if (sourceId + 1 != targetMapOffsets.length)     throw new IOException("targetMap file format broken");
    targetMapOffsets[sourceId]=targetMap.length;
    mapIS.close();
    mapIS=null;
    posIS=getResource(POSDICT_FILENAME_SUFFIX);
    posIS=new BufferedInputStream(posIS);
    in=new InputStreamDataInput(posIS);
    CodecUtil.checkHeader(in,POSDICT_HEADER,VERSION,VERSION);
    posDict=new String[in.readVInt()];
    for (int j=0; j < posDict.length; j++) {
      posDict[j]=in.readString();
    }
    posIS.close();
    posIS=null;
    inflIS=getResource(INFLDICT_FILENAME_SUFFIX);
    inflIS=new BufferedInputStream(inflIS);
    in=new InputStreamDataInput(inflIS);
    CodecUtil.checkHeader(in,INFLDICT_HEADER,VERSION,VERSION);
    int length=in.readVInt();
    inflTypeDict=new String[length];
    inflFormDict=new String[length];
    for (int j=0; j < length; j++) {
      inflTypeDict[j]=in.readString();
      inflFormDict[j]=in.readString();
    }
    inflIS.close();
    inflIS=null;
    dictIS=getResource(DICT_FILENAME_SUFFIX);
    in=new InputStreamDataInput(dictIS);
    CodecUtil.checkHeader(in,DICT_HEADER,VERSION,VERSION);
    final int size=in.readVInt();
    final ByteBuffer tmpBuffer=ByteBuffer.allocateDirect(size);
    final ReadableByteChannel channel=Channels.newChannel(dictIS);
    final int read=channel.read(tmpBuffer);
    if (read != size) {
      throw new EOFException("Cannot read whole dictionary");
    }
    dictIS.close();
    dictIS=null;
    buffer=tmpBuffer.asReadOnlyBuffer();
  }
 catch (  IOException ioe) {
    priorE=ioe;
  }
 finally {
    IOUtils.closeWhileHandlingException(priorE,mapIS,posIS,inflIS,dictIS);
  }
  this.targetMap=targetMap;
  this.targetMapOffsets=targetMapOffsets;
  this.posDict=posDict;
  this.inflTypeDict=inflTypeDict;
  this.inflFormDict=inflFormDict;
  this.buffer=buffer;
}
