{
  waitForThingsToLevelOut(30000);
  log.info("testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic");
  String testCollectionName="c8n_1x1";
  String shardId="shard1";
  createCollectionRetry(testCollectionName,1,1,1);
  cloudClient.setDefaultCollection(testCollectionName);
  Replica leader=getShardLeader(testCollectionName,shardId,30);
  boolean wasReloaded=reloadCollection(leader,testCollectionName);
  assertTrue("Collection '" + testCollectionName + "' failed to reload within a reasonable amount of time!",wasReloaded);
  chaosMonkey.expireSession(getJettyOnPort(getReplicaPort(leader)));
  Thread.sleep(15000);
  String replicaState=null;
  int timeoutSecs=15;
  long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutSecs,TimeUnit.SECONDS);
  while (System.nanoTime() < timeout) {
    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);
    ClusterState cs=cloudClient.getZkStateReader().getClusterState();
    Slice slice=cs.getSlice(testCollectionName,shardId);
    replicaState=slice.getReplica(leader.getName()).getStr(ZkStateReader.STATE_PROP);
    if ("active".equals(replicaState))     break;
    Thread.sleep(1000);
  }
  assertEquals("Leader state should be active after recovering from ZK session loss, but after " + timeoutSecs + " seconds, it is "+ replicaState,"active",replicaState);
  try {
    new CollectionAdminRequest.Delete().setCollectionName(testCollectionName).process(cloudClient);
  }
 catch (  Exception e) {
    log.warn("Could not delete collection {} after test completed",testCollectionName);
  }
  log.info("testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!");
}
