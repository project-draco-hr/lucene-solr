{
  List<Integer> expected=new ArrayList<Integer>();
  Random random=new Random(random().nextLong());
  int numLists=itrsWithVal + random.nextInt(1000 - itrsWithVal);
  @SuppressWarnings({"rawtypes","unchecked"}) List<Integer>[] lists=new List[numLists];
  for (int i=0; i < numLists; i++) {
    lists[i]=new ArrayList<Integer>();
  }
  int start=random.nextInt(1000000);
  int end=start + VALS_TO_MERGE / itrsWithVal / Math.abs(specifiedValsOnItr);
  for (int i=start; i < end; i++) {
    int maxList=lists.length;
    int maxValsOnItr=0;
    int sumValsOnItr=0;
    for (int itrWithVal=0; itrWithVal < itrsWithVal; itrWithVal++) {
      int list=random.nextInt(maxList);
      int valsOnItr=specifiedValsOnItr < 0 ? (1 + random.nextInt(-specifiedValsOnItr)) : specifiedValsOnItr;
      maxValsOnItr=Math.max(maxValsOnItr,valsOnItr);
      sumValsOnItr+=valsOnItr;
      for (int valOnItr=0; valOnItr < valsOnItr; valOnItr++) {
        lists[list].add(i);
      }
      maxList=maxList - 1;
      ArrayUtil.swap(lists,list,maxList);
    }
    int maxCount=removeDups ? maxValsOnItr : sumValsOnItr;
    for (int count=0; count < maxCount; count++) {
      expected.add(i);
    }
  }
  @SuppressWarnings({"rawtypes","unchecked"}) Iterator<Integer>[] itrs=new Iterator[numLists];
  for (int i=0; i < numLists; i++) {
    itrs[i]=lists[i].iterator();
  }
  MergedIterator<Integer> mergedItr=new MergedIterator<Integer>(removeDups,itrs);
  Iterator<Integer> expectedItr=expected.iterator();
  while (expectedItr.hasNext()) {
    assertTrue(mergedItr.hasNext());
    assertEquals(expectedItr.next(),mergedItr.next());
  }
  assertFalse(mergedItr.hasNext());
}
