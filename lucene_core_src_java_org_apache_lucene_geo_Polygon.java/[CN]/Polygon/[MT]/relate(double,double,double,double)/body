{
  if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {
    return Relation.CELL_OUTSIDE_QUERY;
  }
  if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {
    return Relation.CELL_CROSSES_QUERY;
  }
  for (  Polygon hole : holes) {
    Relation holeRelation=hole.relate(minLat,maxLat,minLon,maxLon);
    if (holeRelation == Relation.CELL_CROSSES_QUERY) {
      return Relation.CELL_CROSSES_QUERY;
    }
 else     if (holeRelation == Relation.CELL_INSIDE_QUERY) {
      return Relation.CELL_OUTSIDE_QUERY;
    }
  }
  int numCorners=numberOfCorners(minLat,maxLat,minLon,maxLon);
  if (numCorners == 4) {
    if (crossesSlowly(minLat,maxLat,minLon,maxLon)) {
      return Relation.CELL_CROSSES_QUERY;
    }
    return Relation.CELL_INSIDE_QUERY;
  }
 else   if (numCorners > 0) {
    return Relation.CELL_CROSSES_QUERY;
  }
  if (crossesSlowly(minLat,maxLat,minLon,maxLon)) {
    return Relation.CELL_CROSSES_QUERY;
  }
  return Relation.CELL_OUTSIDE_QUERY;
}
