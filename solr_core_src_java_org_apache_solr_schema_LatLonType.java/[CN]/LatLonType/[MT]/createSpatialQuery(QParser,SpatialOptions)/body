{
  double[] point=null;
  try {
    point=ParseUtils.parseLatitudeLongitude(options.pointStr);
  }
 catch (  InvalidShapeException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  double latCenter=point[LAT];
  double lonCenter=point[LON];
  DistanceCalculator distCalc=new GeodesicSphereDistCalc.Haversine(options.units.earthRadius());
  SpatialContext ctx=new SimpleSpatialContext(options.units,distCalc,null);
  Rectangle bbox=DistanceUtils.calcBoxByDistFromPtDEG(latCenter,lonCenter,options.distance,ctx);
  double latMin=bbox.getMinY();
  double latMax=bbox.getMaxY();
  double lonMin, lonMax, lon2Min, lon2Max;
  if (bbox.getCrossesDateLine()) {
    lonMin=-180;
    lonMax=bbox.getMaxX();
    lon2Min=bbox.getMinX();
    lon2Max=180;
  }
 else {
    lonMin=bbox.getMinX();
    lonMax=bbox.getMaxX();
    lon2Min=-180;
    lon2Max=180;
  }
  SchemaField latField=subField(options.field,LAT);
  SchemaField lonField=subField(options.field,LON);
  SpatialDistanceQuery spatial=new SpatialDistanceQuery();
  if (options.bbox) {
    BooleanQuery result=new BooleanQuery();
    Query latRange=latField.getType().getRangeQuery(parser,latField,String.valueOf(latMin),String.valueOf(latMax),true,true);
    result.add(latRange,BooleanClause.Occur.MUST);
    if (lonMin != -180 || lonMax != 180) {
      Query lonRange=lonField.getType().getRangeQuery(parser,lonField,String.valueOf(lonMin),String.valueOf(lonMax),true,true);
      if (lon2Min != -180 || lon2Max != 180) {
        BooleanQuery bothLons=new BooleanQuery();
        bothLons.add(lonRange,BooleanClause.Occur.SHOULD);
        lonRange=lonField.getType().getRangeQuery(parser,lonField,String.valueOf(lon2Min),String.valueOf(lon2Max),true,true);
        bothLons.add(lonRange,BooleanClause.Occur.SHOULD);
        lonRange=bothLons;
      }
      result.add(lonRange,BooleanClause.Occur.MUST);
    }
    spatial.bboxQuery=result;
  }
  spatial.origField=options.field.getName();
  spatial.latSource=latField.getType().getValueSource(latField,parser);
  spatial.lonSource=lonField.getType().getValueSource(lonField,parser);
  spatial.latMin=latMin;
  spatial.latMax=latMax;
  spatial.lonMin=lonMin;
  spatial.lonMax=lonMax;
  spatial.lon2Min=lon2Min;
  spatial.lon2Max=lon2Max;
  spatial.lon2=lon2Min != -180 || lon2Max != 180;
  spatial.latCenter=latCenter;
  spatial.lonCenter=lonCenter;
  spatial.dist=options.distance;
  spatial.planetRadius=options.radius;
  spatial.calcDist=!options.bbox;
  return spatial;
}
