{
  if (hasMoreTokensInClone) {
    int start=breaker.current();
    int end=breaker.next();
    if (end != BreakIterator.DONE) {
      clonedToken.copyTo(this);
      termAtt.copyBuffer(clonedTermAtt.buffer(),start,end - start);
      if (hasIllegalOffsets) {
        offsetAtt.setOffset(clonedOffsetAtt.startOffset(),clonedOffsetAtt.endOffset());
      }
 else {
        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start,clonedOffsetAtt.startOffset() + end);
      }
      posAtt.setPositionIncrement(1);
      return true;
    }
    hasMoreTokensInClone=false;
  }
  if (!input.incrementToken()) {
    return false;
  }
  if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {
    return true;
  }
  hasMoreTokensInClone=true;
  hasIllegalOffsets=offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();
  if (clonedToken == null) {
    clonedToken=cloneAttributes();
    clonedTermAtt=clonedToken.getAttribute(CharTermAttribute.class);
    clonedOffsetAtt=clonedToken.getAttribute(OffsetAttribute.class);
  }
 else {
    this.copyTo(clonedToken);
  }
  charIterator.setText(clonedTermAtt.buffer(),0,clonedTermAtt.length());
  breaker.setText(charIterator);
  int end=breaker.next();
  if (end != BreakIterator.DONE) {
    termAtt.setLength(end);
    if (hasIllegalOffsets) {
      offsetAtt.setOffset(clonedOffsetAtt.startOffset(),clonedOffsetAtt.endOffset());
    }
 else {
      offsetAtt.setOffset(clonedOffsetAtt.startOffset(),clonedOffsetAtt.startOffset() + end);
    }
    return true;
  }
  return false;
}
