{
  BufferedInputStream configurationStream=null;
  try {
    configurationStream=new BufferedInputStream(new FileInputStream(src));
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setValidating(false);
    factory.setNamespaceAware(false);
    DocumentBuilder builder=factory.newDocumentBuilder();
    document=builder.parse(configurationStream);
    Element topElement=document.getDocumentElement();
    NodeList topChildren=topElement.getChildNodes();
    int numChildren=topChildren.getLength();
    log("Using prefix: \"" + prefix + "\"",Project.MSG_VERBOSE);
    String prefixToUse="";
    if (!(prefix.equals(""))) {
      prefixToUse=prefix;
    }
    log("Prefix to use 1: \"" + prefixToUse + "\"",Project.MSG_VERBOSE);
    if ((!(prefix.equals(""))) && keepRoot) {
      prefixToUse+=".";
    }
    log("Prefix to use 2: \"" + prefixToUse + "\"",Project.MSG_VERBOSE);
    if (keepRoot) {
      prefixToUse+=(topElement.getNodeName());
    }
    log("Prefix to use 3: \"" + prefixToUse + "\"",Project.MSG_VERBOSE);
    for (int i=0; i < numChildren; i++) {
      addNodeRecursively(topChildren.item(i),prefixToUse,0);
    }
  }
 catch (  SAXException sxe) {
    Exception x=sxe;
    if (sxe.getException() != null)     x=sxe.getException();
    throw new BuildException(x);
  }
catch (  ParserConfigurationException pce) {
    throw new BuildException(pce);
  }
catch (  IOException ioe) {
    throw new BuildException(ioe);
  }
 finally {
    if (configurationStream != null) {
      try {
        configurationStream.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
