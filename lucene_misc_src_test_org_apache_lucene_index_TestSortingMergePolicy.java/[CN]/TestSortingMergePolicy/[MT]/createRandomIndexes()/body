{
  dir1=newDirectory();
  dir2=newDirectory();
  final int numDocs=atLeast(150);
  final int numTerms=TestUtil.nextInt(random(),1,numDocs / 5);
  Set<String> randomTerms=new HashSet<>();
  while (randomTerms.size() < numTerms) {
    randomTerms.add(TestUtil.randomSimpleString(random()));
  }
  terms=new ArrayList<>(randomTerms);
  final long seed=random().nextLong();
  final IndexWriterConfig iwc1=newIndexWriterConfig(new MockAnalyzer(new Random(seed)));
  final IndexWriterConfig iwc2=newIndexWriterConfig(new MockAnalyzer(new Random(seed)));
  iwc2.setMergePolicy(newSortingMergePolicy(sort));
  final RandomIndexWriter iw1=new RandomIndexWriter(new Random(seed),dir1,iwc1);
  final RandomIndexWriter iw2=new RandomIndexWriter(new Random(seed),dir2,iwc2);
  for (int i=0; i < numDocs; ++i) {
    if (random().nextInt(5) == 0 && i != numDocs - 1) {
      final String term=RandomPicks.randomFrom(random(),terms);
      iw1.deleteDocuments(new Term("s",term));
      iw2.deleteDocuments(new Term("s",term));
    }
    final Document doc=randomDocument();
    iw1.addDocument(doc);
    iw2.addDocument(doc);
    if (random().nextInt(8) == 0) {
      iw1.commit();
      iw2.commit();
    }
  }
  iw1.commit();
  iw2.commit();
  final Document doc=randomDocument();
  iw1.w.addDocument(doc);
  iw2.w.addDocument(doc);
  final long value=random().nextLong();
  final String term=RandomPicks.randomFrom(random(),terms);
  iw1.w.updateNumericDocValue(new Term("s",term),"ndv",value);
  iw2.w.updateNumericDocValue(new Term("s",term),"ndv",value);
  iw1.forceMerge(1);
  iw2.forceMerge(1);
  iw1.close();
  iw2.close();
  reader=DirectoryReader.open(dir1);
  sortedReader=DirectoryReader.open(dir2);
}
