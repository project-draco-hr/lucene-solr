{
  return new FieldComparator<Integer>(){
    private final int[] values=new int[numHits];
    int bottomVal;
    @Override public LeafFieldComparator getLeafComparator(    LeafReaderContext context) throws IOException {
      final SortedDocValues idIndex=DocValues.getSorted(context.reader(),fieldname);
      return new LeafFieldComparator(){
        @Override public void setBottom(        int slot){
          bottomVal=values[slot];
        }
        @Override public int compareTop(        int doc){
          throw new UnsupportedOperationException();
        }
        private int docVal(        int doc){
          int ord=idIndex.getOrd(doc);
          if (ord == -1) {
            return 0;
          }
 else {
            final BytesRef term=idIndex.lookupOrd(ord);
            Integer prio=priority.get(term);
            return prio == null ? 0 : prio.intValue();
          }
        }
        @Override public int compareBottom(        int doc){
          return docVal(doc) - bottomVal;
        }
        @Override public void copy(        int slot,        int doc){
          values[slot]=docVal(doc);
        }
        @Override public void setScorer(        Scorer scorer){
        }
      }
;
    }
    @Override public int compare(    int slot1,    int slot2){
      return values[slot2] - values[slot1];
    }
    @Override public void setTopValue(    Integer value){
      throw new UnsupportedOperationException();
    }
    @Override public Integer value(    int slot){
      return Integer.valueOf(values[slot]);
    }
  }
;
}
