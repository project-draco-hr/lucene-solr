{
  Directory d=newDirectory();
  IndexWriterConfig iwConfig=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  final int nDocs=atLeast(50);
  final Field id=new IntDocValuesField("id",0);
  final Field f;
switch (type) {
case BYTES_FIXED_DEREF:
    f=new DerefBytesDocValuesField("dv",new BytesRef(),true);
  break;
case BYTES_FIXED_SORTED:
f=new SortedBytesDocValuesField("dv",new BytesRef(),true);
break;
case BYTES_FIXED_STRAIGHT:
f=new StraightBytesDocValuesField("dv",new BytesRef(),true);
break;
case BYTES_VAR_DEREF:
f=new DerefBytesDocValuesField("dv",new BytesRef(),false);
break;
case BYTES_VAR_SORTED:
f=new SortedBytesDocValuesField("dv",new BytesRef(),false);
break;
case BYTES_VAR_STRAIGHT:
f=new StraightBytesDocValuesField("dv",new BytesRef(),false);
break;
case FIXED_INTS_8:
f=new ByteDocValuesField("dv",(byte)0);
break;
case FIXED_INTS_16:
f=new ShortDocValuesField("dv",(short)0);
break;
case FIXED_INTS_32:
f=new IntDocValuesField("dv",0);
break;
case FIXED_INTS_64:
f=new LongDocValuesField("dv",0L);
break;
case VAR_INTS:
f=new PackedLongDocValuesField("dv",0L);
break;
case FLOAT_32:
f=new FloatDocValuesField("dv",0f);
break;
case FLOAT_64:
f=new DoubleDocValuesField("dv",0d);
break;
default :
throw new AssertionError();
}
Document document=new Document();
document.add(id);
document.add(f);
final Object[] vals=new Object[nDocs];
RandomIndexWriter iw=new RandomIndexWriter(random(),d,iwConfig);
for (int i=0; i < nDocs; ++i) {
id.setIntValue(i);
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
vals[i]=_TestUtil.randomFixedByteLengthUnicodeString(random(),10);
f.setBytesValue(new BytesRef((String)vals[i]));
break;
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
vals[i]=_TestUtil.randomSimpleString(random(),20);
f.setBytesValue(new BytesRef((String)vals[i]));
break;
case FIXED_INTS_8:
vals[i]=(byte)random().nextInt(256);
f.setByteValue((Byte)vals[i]);
break;
case FIXED_INTS_16:
vals[i]=(short)random().nextInt(1 << 16);
f.setShortValue((Short)vals[i]);
break;
case FIXED_INTS_32:
vals[i]=random().nextInt();
f.setIntValue((Integer)vals[i]);
break;
case FIXED_INTS_64:
case VAR_INTS:
final int bitsPerValue=RandomInts.randomIntBetween(random(),1,31);
vals[i]=(long)random().nextInt((int)PackedInts.maxValue(bitsPerValue));
f.setLongValue((Long)vals[i]);
break;
case FLOAT_32:
vals[i]=random().nextFloat();
f.setFloatValue((Float)vals[i]);
break;
case FLOAT_64:
vals[i]=random().nextDouble();
f.setDoubleValue((Double)vals[i]);
break;
}
iw.addDocument(document);
if (random().nextBoolean() && i % 10 == 9) {
iw.commit();
}
}
iw.close();
DirectoryReader rd=DirectoryReader.open(d);
for (AtomicReaderContext leave : rd.leaves()) {
final FunctionValues ids=new NumericDocValuesFieldSource("id",false).getValues(null,leave);
final ValueSource vs;
final boolean direct=random().nextBoolean();
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
vs=new StrDocValuesFieldSource("dv",direct);
break;
case FLOAT_32:
case FLOAT_64:
case FIXED_INTS_8:
case FIXED_INTS_16:
case FIXED_INTS_32:
vs=new NumericDocValuesFieldSource("dv",direct);
break;
case FIXED_INTS_64:
case VAR_INTS:
if (random().nextBoolean()) {
vs=new NumericDocValuesFieldSource("dv",direct);
}
 else {
vs=new DateDocValuesFieldSource("dv",direct);
}
break;
default :
throw new AssertionError();
}
final FunctionValues values=vs.getValues(null,leave);
BytesRef bytes=new BytesRef();
for (int i=0; i < leave.reader().maxDoc(); ++i) {
assertTrue(values.exists(i));
if (vs instanceof StrDocValuesFieldSource) {
assertTrue(values.objectVal(i) instanceof String);
}
 else if (vs instanceof NumericDocValuesFieldSource) {
assertTrue(values.objectVal(i) instanceof Number);
switch (type) {
case FIXED_INTS_8:
assertTrue(values.objectVal(i) instanceof Byte);
assertTrue(values.bytesVal(i,bytes));
assertEquals(1,bytes.length);
break;
case FIXED_INTS_16:
assertTrue(values.objectVal(i) instanceof Short);
assertTrue(values.bytesVal(i,bytes));
assertEquals(2,bytes.length);
break;
case FIXED_INTS_32:
assertTrue(values.objectVal(i) instanceof Integer);
assertTrue(values.bytesVal(i,bytes));
assertEquals(4,bytes.length);
break;
case FIXED_INTS_64:
case VAR_INTS:
assertTrue(values.objectVal(i) instanceof Long);
assertTrue(values.bytesVal(i,bytes));
assertEquals(8,bytes.length);
break;
case FLOAT_32:
assertTrue(values.objectVal(i) instanceof Float);
assertTrue(values.bytesVal(i,bytes));
assertEquals(4,bytes.length);
break;
case FLOAT_64:
assertTrue(values.objectVal(i) instanceof Double);
assertTrue(values.bytesVal(i,bytes));
assertEquals(8,bytes.length);
break;
default :
throw new AssertionError();
}
}
 else if (vs instanceof DateDocValuesFieldSource) {
assertTrue(values.objectVal(i) instanceof Date);
}
 else {
throw new AssertionError();
}
Object expected=vals[ids.intVal(i)];
switch (type) {
case BYTES_VAR_SORTED:
case BYTES_FIXED_SORTED:
values.ordVal(i);
assertTrue(values.numOrd() >= 1);
case BYTES_FIXED_DEREF:
case BYTES_FIXED_STRAIGHT:
case BYTES_VAR_DEREF:
case BYTES_VAR_STRAIGHT:
assertEquals(expected,values.objectVal(i));
assertEquals(expected,values.strVal(i));
assertEquals(expected,values.objectVal(i));
assertEquals(expected,values.strVal(i));
assertTrue(values.bytesVal(i,bytes));
assertEquals(new BytesRef((String)expected),bytes);
break;
case FLOAT_32:
assertEquals(((Number)expected).floatValue(),values.floatVal(i),0.001);
break;
case FLOAT_64:
assertEquals(((Number)expected).doubleValue(),values.doubleVal(i),0.001d);
break;
case FIXED_INTS_8:
case FIXED_INTS_16:
case FIXED_INTS_32:
case FIXED_INTS_64:
case VAR_INTS:
assertEquals(((Number)expected).longValue(),values.longVal(i));
break;
}
}
}
rd.close();
d.close();
}
