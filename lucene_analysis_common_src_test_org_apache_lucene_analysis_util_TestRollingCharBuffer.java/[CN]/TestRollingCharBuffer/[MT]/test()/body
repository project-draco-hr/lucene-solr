{
  final int ITERS=atLeast(1000);
  RollingCharBuffer buffer=new RollingCharBuffer();
  Random random=random();
  for (int iter=0; iter < ITERS; iter++) {
    final int stringLen=random.nextBoolean() ? random.nextInt(50) : random.nextInt(20000);
    final String s;
    if (stringLen == 0) {
      s="";
    }
 else {
      s=_TestUtil.randomUnicodeString(random,stringLen);
    }
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter + " s.length()="+ s.length());
    }
    buffer.reset(new StringReader(s));
    int nextRead=0;
    int availCount=0;
    while (nextRead < s.length()) {
      if (VERBOSE) {
        System.out.println("  cycle nextRead=" + nextRead + " avail="+ availCount);
      }
      if (availCount == 0 || random.nextBoolean()) {
        if (VERBOSE) {
          System.out.println("    new char");
        }
        assertEquals(s.charAt(nextRead),buffer.get(nextRead));
        nextRead++;
        availCount++;
      }
 else       if (random.nextBoolean()) {
        int pos=_TestUtil.nextInt(random,nextRead - availCount,nextRead - 1);
        if (VERBOSE) {
          System.out.println("    old char pos=" + pos);
        }
        assertEquals(s.charAt(pos),buffer.get(pos));
      }
 else {
        int length;
        if (availCount == 1) {
          length=1;
        }
 else {
          length=_TestUtil.nextInt(random,1,availCount);
        }
        int start;
        if (length == availCount) {
          start=nextRead - availCount;
        }
 else {
          start=nextRead - availCount + random.nextInt(availCount - length);
        }
        if (VERBOSE) {
          System.out.println("    slice start=" + start + " length="+ length);
        }
        assertEquals(s.substring(start,start + length),new String(buffer.get(start,length)));
      }
      if (availCount > 0 && random.nextInt(20) == 17) {
        final int toFree=random.nextInt(availCount);
        if (VERBOSE) {
          System.out.println("    free " + toFree + " (avail="+ (availCount - toFree)+ ")");
        }
        buffer.freeBefore(nextRead - (availCount - toFree));
        availCount-=toFree;
      }
    }
  }
}
