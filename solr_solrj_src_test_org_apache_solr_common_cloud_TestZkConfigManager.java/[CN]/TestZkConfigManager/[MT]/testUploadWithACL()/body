{
  zkServer.ensurePathExists("/acl");
  final String readOnlyUsername="readonly";
  final String readOnlyPassword="readonly";
  final String writeableUsername="writeable";
  final String writeablePassword="writeable";
  ZkACLProvider aclProvider=new DefaultZkACLProvider(){
    @Override protected List<ACL> createGlobalACLsToAdd(){
      try {
        List<ACL> result=new ArrayList<>();
        result.add(new ACL(ZooDefs.Perms.ALL,new Id("digest",DigestAuthenticationProvider.generateDigest(writeableUsername + ":" + writeablePassword))));
        result.add(new ACL(ZooDefs.Perms.READ,new Id("digest",DigestAuthenticationProvider.generateDigest(readOnlyUsername + ":" + readOnlyPassword))));
        return result;
      }
 catch (      NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  ZkCredentialsProvider readonly=new DefaultZkCredentialsProvider(){
    @Override protected Collection<ZkCredentials> createCredentials(){
      List<ZkCredentials> credentials=new ArrayList<>();
      credentials.add(new ZkCredentials("digest",(readOnlyUsername + ":" + readOnlyPassword).getBytes(StandardCharsets.UTF_8)));
      return credentials;
    }
  }
;
  ZkCredentialsProvider writeable=new DefaultZkCredentialsProvider(){
    @Override protected Collection<ZkCredentials> createCredentials(){
      List<ZkCredentials> credentials=new ArrayList<>();
      credentials.add(new ZkCredentials("digest",(writeableUsername + ":" + writeablePassword).getBytes(StandardCharsets.UTF_8)));
      return credentials;
    }
  }
;
  Path configPath=createTempDir("acl-config");
  Files.createFile(configPath.resolve("file1"));
  try (SolrZkClient client=buildZkClient(zkServer.getZkAddress("/acl"),aclProvider,writeable)){
    ZkConfigManager configManager=new ZkConfigManager(client);
    configManager.uploadConfigDir(configPath,"acltest");
    assertEquals(1,configManager.listConfigs().size());
  }
   try (SolrZkClient client=buildZkClient(zkServer.getZkAddress("/acl"),aclProvider,readonly)){
    ZkConfigManager configManager=new ZkConfigManager(client);
    assertEquals(1,configManager.listConfigs().size());
    configManager.uploadConfigDir(configPath,"acltest2");
    fail("Should have thrown an ACL exception");
  }
 catch (  IOException e) {
    assertEquals(KeeperException.NoAuthException.class,Throwables.getRootCause(e).getClass());
  }
  try (SolrZkClient client=new SolrZkClient(zkServer.getZkAddress("/acl"),10000)){
    ZkConfigManager configManager=new ZkConfigManager(client);
    configManager.listConfigs();
    fail("Should have thrown an ACL exception");
  }
 catch (  IOException e) {
    assertEquals(KeeperException.NoAuthException.class,Throwables.getRootCause(e).getClass());
  }
}
