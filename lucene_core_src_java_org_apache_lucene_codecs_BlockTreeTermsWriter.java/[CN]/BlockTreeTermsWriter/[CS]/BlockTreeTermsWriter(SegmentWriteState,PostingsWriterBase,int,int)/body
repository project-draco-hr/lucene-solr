{
  super(state);
  if (minItemsInBlock <= 1) {
    throw new IllegalArgumentException("minItemsInBlock must be >= 2; got " + minItemsInBlock);
  }
  if (maxItemsInBlock <= 0) {
    throw new IllegalArgumentException("maxItemsInBlock must be >= 1; got " + maxItemsInBlock);
  }
  if (minItemsInBlock > maxItemsInBlock) {
    throw new IllegalArgumentException("maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=" + maxItemsInBlock + " minItemsInBlock="+ minItemsInBlock);
  }
  if (2 * (minItemsInBlock - 1) > maxItemsInBlock) {
    throw new IllegalArgumentException("maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=" + maxItemsInBlock + " minItemsInBlock="+ minItemsInBlock);
  }
  final String termsFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_EXTENSION);
  out=state.directory.createOutput(termsFileName,state.context);
  boolean success=false;
  IndexOutput indexOut=null;
  try {
    fieldInfos=state.fieldInfos;
    this.minItemsInBlock=minItemsInBlock;
    this.maxItemsInBlock=maxItemsInBlock;
    writeHeader(out);
    final String termsIndexFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_INDEX_EXTENSION);
    indexOut=state.directory.createOutput(termsIndexFileName,state.context);
    writeIndexHeader(indexOut);
    currentField=null;
    this.postingsWriter=postingsWriter;
    postingsWriter.init(out);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(out,indexOut);
    }
  }
  this.indexOut=indexOut;
}
