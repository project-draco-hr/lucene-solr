{
  Document d=new Document();
  ArrayList fields=new ArrayList();
  String idString=getIdString();
  Field idField=new Field(idTerm.field(),idString,Field.Store.YES,Field.Index.NO_NORMS);
  fields.add(idField);
  int nFields=nextInt(maxFields);
  for (int i=0; i < nFields; i++) {
    Field.TermVector tvVal=Field.TermVector.NO;
switch (nextInt(4)) {
case 0:
      tvVal=Field.TermVector.NO;
    break;
case 1:
  tvVal=Field.TermVector.YES;
break;
case 2:
tvVal=Field.TermVector.WITH_POSITIONS;
break;
case 3:
tvVal=Field.TermVector.WITH_POSITIONS_OFFSETS;
break;
}
switch (nextInt(4)) {
case 0:
fields.add(new Field("f" + nextInt(100),getString(1),Field.Store.YES,Field.Index.NO_NORMS,tvVal));
break;
case 1:
fields.add(new Field("f" + nextInt(100),getString(0),Field.Store.NO,Field.Index.TOKENIZED,tvVal));
break;
case 2:
fields.add(new Field("f" + nextInt(100),getString(0),Field.Store.YES,Field.Index.NO,Field.TermVector.NO));
break;
case 3:
fields.add(new Field("f" + nextInt(100),getString(bigFieldSize),Field.Store.YES,Field.Index.TOKENIZED,tvVal));
break;
}
}
if (sameFieldOrder) {
Collections.sort(fields,fieldNameComparator);
}
 else {
Collections.swap(fields,nextInt(fields.size()),0);
}
for (int i=0; i < fields.size(); i++) {
d.add((Fieldable)fields.get(i));
}
w.updateDocument(idTerm.createTerm(idString),d);
docs.put(idString,d);
}
