{
  if (d1 == null) {
    assertTrue(d2 == null);
    return;
  }
  assertTrue(d2 != null);
  assertEquals(d1.length,d2.length);
  for (int i=0; i < d1.length; i++) {
    TermFreqVector v1=d1[i];
    TermFreqVector v2=d2[i];
    if (v1 == null || v2 == null)     System.out.println("v1=" + v1 + " v2="+ v2+ " i="+ i+ " of "+ d1.length);
    assertEquals(v1.size(),v2.size());
    int numTerms=v1.size();
    String[] terms1=v1.getTerms();
    String[] terms2=v2.getTerms();
    int[] freq1=v1.getTermFrequencies();
    int[] freq2=v2.getTermFrequencies();
    for (int j=0; j < numTerms; j++) {
      if (!terms1[j].equals(terms2[j]))       assertEquals(terms1[j],terms2[j]);
      assertEquals(freq1[j],freq2[j]);
    }
    if (v1 instanceof TermPositionVector) {
      assertTrue(v2 instanceof TermPositionVector);
      TermPositionVector tpv1=(TermPositionVector)v1;
      TermPositionVector tpv2=(TermPositionVector)v2;
      for (int j=0; j < numTerms; j++) {
        int[] pos1=tpv1.getTermPositions(j);
        int[] pos2=tpv2.getTermPositions(j);
        assertEquals(pos1.length,pos2.length);
        TermVectorOffsetInfo[] offsets1=tpv1.getOffsets(j);
        TermVectorOffsetInfo[] offsets2=tpv2.getOffsets(j);
        if (offsets1 == null)         assertTrue(offsets2 == null);
 else         assertTrue(offsets2 != null);
        for (int k=0; k < pos1.length; k++) {
          assertEquals(pos1[k],pos2[k]);
          if (offsets1 != null) {
            assertEquals(offsets1[k].getStartOffset(),offsets2[k].getStartOffset());
            assertEquals(offsets1[k].getEndOffset(),offsets2[k].getEndOffset());
          }
        }
      }
    }
  }
}
