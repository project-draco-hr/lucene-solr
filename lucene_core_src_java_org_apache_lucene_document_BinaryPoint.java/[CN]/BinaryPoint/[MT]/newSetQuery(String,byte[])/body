{
  int bytesPerDim=-1;
  for (  byte[] value : values) {
    if (bytesPerDim == -1) {
      bytesPerDim=value.length;
    }
 else     if (value.length != bytesPerDim) {
      throw new IllegalArgumentException("all byte[] must be the same length, but saw " + bytesPerDim + " and "+ value.length);
    }
  }
  if (bytesPerDim == -1) {
    return new MatchNoDocsQuery();
  }
  byte[][] sortedValues=values.clone();
  Arrays.sort(sortedValues,new Comparator<byte[]>(){
    @Override public int compare(    byte[] a,    byte[] b){
      return StringHelper.compare(a.length,a,0,b,0);
    }
  }
);
  final BytesRef encoded=new BytesRef(new byte[bytesPerDim]);
  return new PointInSetQuery(field,1,bytesPerDim,new PointInSetQuery.Stream(){
    int upto;
    @Override public BytesRef next(){
      if (upto == sortedValues.length) {
        return null;
      }
 else {
        encoded.bytes=sortedValues[upto];
        upto++;
        return encoded;
      }
    }
  }
){
    @Override protected String toString(    byte[] value){
      return new BytesRef(value).toString();
    }
  }
;
}
