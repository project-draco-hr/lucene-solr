{
  final List<AtomicReaderContext> leaves=r.leaves();
  boolean anyReal=false;
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  for (  AtomicReaderContext ctx : leaves) {
    NumericDocValues norms=ctx.reader().simpleNormValues(field);
    if (norms == null) {
      norms=new NumericDocValues.EMPTY(ctx.reader().maxDoc());
    }
 else {
      anyReal=true;
    }
    maxValue=Math.max(norms.maxValue(),maxValue);
    minValue=Math.min(norms.minValue(),minValue);
  }
  if (!anyReal) {
    return null;
  }
 else {
    final long finalMaxValue=maxValue;
    final long finalMinValue=minValue;
    return new NumericDocValues(){
      @Override public long get(      int docID){
        int subIndex=ReaderUtil.subIndex(docID,leaves);
        NumericDocValues norms;
        try {
          norms=leaves.get(subIndex).reader().simpleNormValues(field);
        }
 catch (        IOException ioe) {
          throw new RuntimeException(ioe);
        }
        if (norms == null) {
          return 0;
        }
 else {
          return norms.get(docID - leaves.get(subIndex).docBase);
        }
      }
      @Override public int size(){
        return r.maxDoc();
      }
      @Override public long minValue(){
        return finalMinValue;
      }
      @Override public long maxValue(){
        return finalMaxValue;
      }
    }
;
  }
}
