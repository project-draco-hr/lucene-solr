{
  dir1=newDirectory();
  dir2=newDirectory();
  final int numDocs=atLeast(100);
  final long seed=random().nextLong();
  final IndexWriterConfig iwc1=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(new Random(seed)));
  final IndexWriterConfig iwc2=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(new Random(seed)));
  iwc2.setMergePolicy(new SortingMergePolicy(iwc2.getMergePolicy(),sorter));
  iwc2.setMergeScheduler(new SerialMergeScheduler());
  final RandomIndexWriter iw1=new RandomIndexWriter(new Random(seed),dir1,iwc1);
  final RandomIndexWriter iw2=new RandomIndexWriter(new Random(seed),dir2,iwc2);
  for (int i=0; i < numDocs; ++i) {
    final Document doc=randomDocument();
    iw1.addDocument(doc);
    iw2.addDocument(doc);
    if (i == numDocs / 2 || (i != numDocs - 1 && rarely())) {
      iw1.commit();
      iw2.commit();
    }
  }
  iw1.deleteDocuments(new Term("s",DELETE_TERM));
  iw2.deleteDocuments(new Term("s",DELETE_TERM));
  iw1.forceMerge(1);
  iw2.forceMerge(1);
  iw1.close();
  iw2.close();
  reader=DirectoryReader.open(dir1);
  sortedReader=DirectoryReader.open(dir2);
}
