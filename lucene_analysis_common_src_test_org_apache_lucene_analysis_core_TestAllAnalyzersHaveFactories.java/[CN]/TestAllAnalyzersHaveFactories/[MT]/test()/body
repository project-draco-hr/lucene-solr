{
  List<Class<?>> analysisClasses=TestRandomChains.getClassesForPackage("org.apache.lucene.analysis");
  for (  final Class<?> c : analysisClasses) {
    final int modifiers=c.getModifiers();
    if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers) || c.isSynthetic()|| c.isAnonymousClass()|| c.isMemberClass()|| c.isInterface()|| testComponents.contains(c)|| crazyComponents.contains(c)|| oddlyNamedComponents.contains(c)|| tokenFiltersWithoutFactory.contains(c)|| c.isAnnotationPresent(Deprecated.class)|| !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))) {
      continue;
    }
    Map<String,String> args=new HashMap<>();
    args.put("luceneMatchVersion",Version.LATEST.toString());
    if (Tokenizer.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("Tokenizer"));
      String simpleName=clazzName.substring(0,clazzName.length() - 9);
      assertNotNull(TokenizerFactory.lookupClass(simpleName));
      TokenizerFactory instance=null;
      try {
        instance=TokenizerFactory.forName(simpleName,args);
        assertNotNull(instance);
        if (instance instanceof ResourceLoaderAware) {
          ((ResourceLoaderAware)instance).inform(loader);
        }
        assertSame(c,instance.create().getClass());
      }
 catch (      IllegalArgumentException e) {
        if (e.getCause() instanceof NoSuchMethodException) {
          throw e;
        }
      }
    }
 else     if (TokenFilter.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("Filter"));
      String simpleName=clazzName.substring(0,clazzName.length() - (clazzName.endsWith("TokenFilter") ? 11 : 6));
      assertNotNull(TokenFilterFactory.lookupClass(simpleName));
      TokenFilterFactory instance=null;
      try {
        instance=TokenFilterFactory.forName(simpleName,args);
        assertNotNull(instance);
        if (instance instanceof ResourceLoaderAware) {
          ((ResourceLoaderAware)instance).inform(loader);
        }
        Class<? extends TokenStream> createdClazz=instance.create(new KeywordTokenizer()).getClass();
        if (KeywordTokenizer.class != createdClazz) {
          assertSame(c,createdClazz);
        }
      }
 catch (      IllegalArgumentException e) {
        if (e.getCause() instanceof NoSuchMethodException) {
          throw e;
        }
      }
    }
 else     if (CharFilter.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("CharFilter"));
      String simpleName=clazzName.substring(0,clazzName.length() - 10);
      assertNotNull(CharFilterFactory.lookupClass(simpleName));
      CharFilterFactory instance=null;
      try {
        instance=CharFilterFactory.forName(simpleName,args);
        assertNotNull(instance);
        if (instance instanceof ResourceLoaderAware) {
          ((ResourceLoaderAware)instance).inform(loader);
        }
        Class<? extends Reader> createdClazz=instance.create(new StringReader("")).getClass();
        if (StringReader.class != createdClazz) {
          assertSame(c,createdClazz);
        }
      }
 catch (      IllegalArgumentException e) {
        if (e.getCause() instanceof NoSuchMethodException) {
          throw e;
        }
      }
    }
  }
}
