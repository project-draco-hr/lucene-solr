{
  List<Class<?>> analysisClasses=new ArrayList<Class<?>>();
  TestRandomChains.getClassesForPackage("org.apache.lucene.analysis",analysisClasses);
  for (  final Class<?> c : analysisClasses) {
    final int modifiers=c.getModifiers();
    if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers) || c.isSynthetic()|| c.isAnonymousClass()|| c.isMemberClass()|| c.isInterface()|| testComponents.contains(c)|| crazyComponents.contains(c)|| oddlyNamedComponents.contains(c)|| !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))) {
      continue;
    }
    if (Tokenizer.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("Tokenizer"));
      String simpleName=clazzName.substring(0,clazzName.length() - 9);
      TokenizerFactory instance=TokenizerFactory.forName(simpleName);
      assertNotNull(instance);
      try {
        instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);
        instance.init(Collections.<String,String>emptyMap());
        if (!(instance instanceof ResourceLoaderAware)) {
          assertSame(c,instance.create(new StringReader("")).getClass());
        }
      }
 catch (      IllegalArgumentException e) {
      }
    }
 else     if (TokenFilter.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("Filter"));
      String simpleName=clazzName.substring(0,clazzName.length() - (clazzName.endsWith("TokenFilter") ? 11 : 6));
      TokenFilterFactory instance=TokenFilterFactory.forName(simpleName);
      assertNotNull(instance);
      try {
        instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);
        instance.init(Collections.<String,String>emptyMap());
        if (!(instance instanceof ResourceLoaderAware)) {
          Class<? extends TokenStream> createdClazz=instance.create(new KeywordTokenizer(new StringReader(""))).getClass();
          if (KeywordTokenizer.class != createdClazz) {
            assertSame(c,createdClazz);
          }
        }
      }
 catch (      IllegalArgumentException e) {
      }
    }
 else     if (CharFilter.class.isAssignableFrom(c)) {
      String clazzName=c.getSimpleName();
      assertTrue(clazzName.endsWith("CharFilter"));
      String simpleName=clazzName.substring(0,clazzName.length() - 10);
      CharFilterFactory instance=CharFilterFactory.forName(simpleName);
      assertNotNull(instance);
      try {
        instance.setLuceneMatchVersion(TEST_VERSION_CURRENT);
        instance.init(Collections.<String,String>emptyMap());
        if (!(instance instanceof ResourceLoaderAware)) {
          Class<? extends Reader> createdClazz=instance.create(new StringReader("")).getClass();
          if (StringReader.class != createdClazz) {
            assertSame(c,createdClazz);
          }
        }
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
}
