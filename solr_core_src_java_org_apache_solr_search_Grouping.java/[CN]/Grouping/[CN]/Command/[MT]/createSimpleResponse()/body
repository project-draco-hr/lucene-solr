{
  GroupDocs[] groups=result != null ? result.groups : new GroupDocs[0];
  List<Integer> ids=new ArrayList<Integer>();
  List<Float> scores=new ArrayList<Float>();
  int docsToGather=getMax(offset,numGroups,maxDoc);
  int docsGathered=0;
  float maxScore=Float.NEGATIVE_INFINITY;
  outer:   for (  GroupDocs group : groups) {
    if (group.maxScore > maxScore) {
      maxScore=group.maxScore;
    }
    for (    ScoreDoc scoreDoc : group.scoreDocs) {
      if (docsGathered >= docsToGather) {
        break outer;
      }
      ids.add(scoreDoc.doc);
      scores.add(scoreDoc.score);
      docsGathered++;
    }
  }
  int len=docsGathered > offset ? docsGathered - offset : 0;
  int[] docs=ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));
  float[] docScores=ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));
  DocSlice docSlice=new DocSlice(offset,len,docs,docScores,getMatches(),maxScore);
  if (getDocList) {
    for (int i=offset; i < docs.length; i++) {
      idSet.add(docs[i]);
    }
  }
  return docSlice;
}
