{
  if (actualGroupsToFind <= 0) {
    allGroupsCollector=new FunctionAllGroupsCollector(groupBy,context);
    return totalCount == TotalCount.grouped ? allGroupsCollector : null;
  }
  topGroups=format == Format.grouped ? firstPass.getTopGroups(offset,false) : firstPass.getTopGroups(0,false);
  if (topGroups == null) {
    if (totalCount == TotalCount.grouped) {
      allGroupsCollector=new FunctionAllGroupsCollector(groupBy,context);
      fallBackCollector=new TotalHitCountCollector();
      return MultiCollector.wrap(allGroupsCollector,fallBackCollector);
    }
 else {
      fallBackCollector=new TotalHitCountCollector();
      return fallBackCollector;
    }
  }
  int groupdDocsToCollect=getMax(groupOffset,docsPerGroup,maxDoc);
  groupdDocsToCollect=Math.max(groupdDocsToCollect,1);
  secondPass=new FunctionSecondPassGroupingCollector(topGroups,sort,groupSort,groupdDocsToCollect,needScores,needScores,false,groupBy,context);
  if (totalCount == TotalCount.grouped) {
    allGroupsCollector=new FunctionAllGroupsCollector(groupBy,context);
    return MultiCollector.wrap(secondPass,allGroupsCollector);
  }
 else {
    return secondPass;
  }
}
