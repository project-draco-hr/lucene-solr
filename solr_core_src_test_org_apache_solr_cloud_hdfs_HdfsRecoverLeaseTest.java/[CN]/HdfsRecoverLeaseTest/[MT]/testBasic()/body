{
  long startRecoverLeaseSuccessCount=FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get();
  URI uri=dfsCluster.getURI();
  Path path=new Path(uri);
  Configuration conf=new Configuration();
  conf.setBoolean("fs.hdfs.impl.disable.cache",true);
  FileSystem fs1=FileSystem.get(path.toUri(),conf);
  Path testFile=new Path(uri.toString() + "/testfile");
  FSDataOutputStream out=fs1.create(testFile);
  out.write(5);
  out.hflush();
  out.close();
  FSHDFSUtils.recoverFileLease(fs1,testFile,conf,new CallerInfo(){
    @Override public boolean isCallerClosed(){
      return false;
    }
  }
);
  assertEquals(0,FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);
  fs1.close();
  FileSystem fs2=FileSystem.get(path.toUri(),conf);
  Path testFile2=new Path(uri.toString() + "/testfile2");
  FSDataOutputStream out2=fs2.create(testFile2);
  if (random().nextBoolean()) {
    int cnt=random().nextInt(100);
    for (int i=0; i < cnt; i++) {
      out2.write(random().nextInt(20000));
    }
    out2.hflush();
  }
  FileSystem fs3=FileSystem.get(path.toUri(),conf);
  FSHDFSUtils.recoverFileLease(fs3,testFile2,conf,new CallerInfo(){
    @Override public boolean isCallerClosed(){
      return false;
    }
  }
);
  assertEquals(1,FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);
  fs3.close();
  fs2.close();
}
