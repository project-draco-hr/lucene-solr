{
  final PointValues delegate=this.delegate.getValues(fieldName);
  if (delegate == null) {
    return null;
  }
  return new PointValues(){
    @Override public void intersect(    IntersectVisitor visitor) throws IOException {
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
      delegate.intersect(visitor);
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
    }
    @Override public byte[] getMinPackedValue() throws IOException {
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
      return delegate.getMinPackedValue();
    }
    @Override public byte[] getMaxPackedValue() throws IOException {
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
      return delegate.getMaxPackedValue();
    }
    @Override public int getNumDimensions() throws IOException {
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
      return delegate.getNumDimensions();
    }
    @Override public int getBytesPerDimension() throws IOException {
      if (random.nextInt(100) == 0) {
        throw new IOException("Fake IOException");
      }
      return delegate.getBytesPerDimension();
    }
    @Override public long size(){
      return delegate.size();
    }
    @Override public int getDocCount(){
      return delegate.getDocCount();
    }
  }
;
}
