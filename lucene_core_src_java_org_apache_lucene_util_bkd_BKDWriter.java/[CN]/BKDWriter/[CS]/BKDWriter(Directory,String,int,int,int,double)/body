{
  verifyParams(numDims,maxPointsInLeafNode,maxMBSortInHeap);
  this.tempDir=new TrackingDirectoryWrapper(tempDir);
  this.tempFileNamePrefix=tempFileNamePrefix;
  this.maxPointsInLeafNode=maxPointsInLeafNode;
  this.numDims=numDims;
  this.bytesPerDim=bytesPerDim;
  packedBytesLength=numDims * bytesPerDim;
  scratchDiff=new byte[bytesPerDim];
  scratchPackedValue=new byte[packedBytesLength];
  scratch1=new byte[packedBytesLength];
  scratch2=new byte[packedBytesLength];
  bytesPerDoc=packedBytesLength + RamUsageEstimator.NUM_BYTES_LONG + RamUsageEstimator.NUM_BYTES_INT;
  maxPointsSortInHeap=(int)(0.5 * (maxMBSortInHeap * 1024 * 1024) / (bytesPerDoc * numDims));
  if (maxPointsSortInHeap < maxPointsInLeafNode) {
    throw new IllegalArgumentException("maxMBSortInHeap=" + maxMBSortInHeap + " only allows for maxPointsSortInHeap="+ maxPointsSortInHeap+ ", but this is less than maxPointsInLeafNode="+ maxPointsInLeafNode+ "; either increase maxMBSortInHeap or decrease maxPointsInLeafNode");
  }
  heapPointWriter=new HeapPointWriter(16,maxPointsSortInHeap,packedBytesLength);
}
