{
  if (packedValue.length != packedBytesLength) {
    throw new IllegalArgumentException("packedValue should be length=" + packedBytesLength + " (got: "+ packedValue.length+ ")");
  }
  if (pointCount >= maxPointsSortInHeap) {
    if (offlinePointWriter == null) {
      switchToOffline();
    }
    offlinePointWriter.append(packedValue,pointCount,docID);
  }
 else {
    heapPointWriter.append(packedValue,pointCount,docID);
  }
  if (pointCount == 0) {
    System.arraycopy(packedValue,0,minPackedValue,0,packedBytesLength);
    System.arraycopy(packedValue,0,maxPackedValue,0,packedBytesLength);
  }
 else {
    for (int dim=0; dim < numDims; dim++) {
      int offset=dim * bytesPerDim;
      if (StringHelper.compare(bytesPerDim,packedValue,offset,minPackedValue,offset) < 0) {
        System.arraycopy(packedValue,offset,minPackedValue,offset,bytesPerDim);
      }
      if (StringHelper.compare(bytesPerDim,packedValue,offset,maxPackedValue,offset) > 0) {
        System.arraycopy(packedValue,offset,maxPackedValue,offset,bytesPerDim);
      }
    }
  }
  pointCount++;
  docsSeen.set(docID);
}
