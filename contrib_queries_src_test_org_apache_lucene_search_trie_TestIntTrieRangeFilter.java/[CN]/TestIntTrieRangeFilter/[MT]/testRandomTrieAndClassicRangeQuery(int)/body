{
  final Random rnd=newRandom();
  String field="field" + precisionStep;
  int termCount=0;
  for (int i=0; i < 50; i++) {
    int lower=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    int upper=(int)(rnd.nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      int a=lower;
      lower=upper;
      upper=a;
    }
    IntTrieRangeFilter tf=new IntTrieRangeFilter(field,precisionStep,new Integer(lower),new Integer(upper),true,true);
    RangeQuery cq=new RangeQuery(field,TrieUtils.intToPrefixCoded(lower),TrieUtils.intToPrefixCoded(upper),true,true);
    cq.setConstantScoreRewrite(true);
    TopDocs tTopDocs=searcher.search(tf.asQuery(),1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for IntTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new IntTrieRangeFilter(field,precisionStep,new Integer(lower),new Integer(upper),false,false);
    cq=new RangeQuery(field,TrieUtils.intToPrefixCoded(lower),TrieUtils.intToPrefixCoded(upper),false,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for IntTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new IntTrieRangeFilter(field,precisionStep,new Integer(lower),new Integer(upper),false,true);
    cq=new RangeQuery(field,TrieUtils.intToPrefixCoded(lower),TrieUtils.intToPrefixCoded(upper),false,true);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for IntTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
    tf=new IntTrieRangeFilter(field,precisionStep,new Integer(lower),new Integer(upper),true,false);
    cq=new RangeQuery(field,TrieUtils.intToPrefixCoded(lower),TrieUtils.intToPrefixCoded(upper),true,false);
    cq.setConstantScoreRewrite(true);
    tTopDocs=searcher.search(tf.asQuery(),1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for IntTrieRangeFilter and RangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    termCount+=tf.getLastNumberOfTerms();
  }
  System.out.println("Average number of terms during random search: " + (((double)termCount) / (50 * 4)));
}
