{
  final String TEXT="the fox jumped";
  final Directory directory=newDirectory();
  final IndexWriter indexWriter=new IndexWriter(directory,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false)));
  try {
    final Document document=new Document();
    FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);
    customType.setStoreTermVectorOffsets(true);
    customType.setStoreTermVectorPositions(true);
    customType.setStoreTermVectors(true);
    document.add(new Field(FIELD,new TokenStreamConcurrent(),customType));
    indexWriter.addDocument(document);
  }
  finally {
    indexWriter.shutdown();
  }
  final IndexReader indexReader=DirectoryReader.open(directory);
  try {
    assertEquals(1,indexReader.numDocs());
    final IndexSearcher indexSearcher=newSearcher(indexReader);
    final Query phraseQuery=new SpanNearQuery(new SpanQuery[]{new SpanTermQuery(new Term(FIELD,"fox")),new SpanTermQuery(new Term(FIELD,"jumped"))},0,true);
    final FixedBitSet bitset=new FixedBitSet(indexReader.maxDoc());
    indexSearcher.search(phraseQuery,new SimpleCollector(){
      private int baseDoc;
      @Override public boolean acceptsDocsOutOfOrder(){
        return true;
      }
      @Override public void collect(      int i){
        bitset.set(this.baseDoc + i);
      }
      @Override protected void doSetNextReader(      AtomicReaderContext context) throws IOException {
        this.baseDoc=context.docBase;
      }
      @Override public void setScorer(      org.apache.lucene.search.Scorer scorer){
      }
    }
);
    assertEquals(1,bitset.cardinality());
    final int maxDoc=indexReader.maxDoc();
    final Highlighter highlighter=new Highlighter(new SimpleHTMLFormatter(),new SimpleHTMLEncoder(),new QueryScorer(phraseQuery));
    for (int position=bitset.nextSetBit(0); position >= 0 && position < maxDoc - 1; position=bitset.nextSetBit(position + 1)) {
      assertEquals(0,position);
      final TokenStream tokenStream=TokenSources.getTokenStream(indexReader.getTermVector(position,FIELD),false);
      assertEquals(highlighter.getBestFragment(new TokenStreamConcurrent(),TEXT),highlighter.getBestFragment(tokenStream,TEXT));
    }
  }
  finally {
    indexReader.close();
    directory.close();
  }
}
