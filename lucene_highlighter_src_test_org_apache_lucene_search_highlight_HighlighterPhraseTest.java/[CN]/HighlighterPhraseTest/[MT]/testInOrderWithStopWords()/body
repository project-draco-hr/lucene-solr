{
  MockAnalyzer stopAnalyzer=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,MockTokenFilter.ENGLISH_STOPSET);
  final String TEXT="the cd the ab the the the the the the the ab the cd the";
  final Directory directory=newDirectory();
  try (IndexWriter indexWriter=new IndexWriter(directory,newIndexWriterConfig(stopAnalyzer))){
    final Document document=new Document();
    document.add(newTextField(FIELD,TEXT,Store.YES));
    indexWriter.addDocument(document);
  }
   try (IndexReader indexReader=DirectoryReader.open(directory)){
    assertEquals(1,indexReader.numDocs());
    final IndexSearcher indexSearcher=newSearcher(indexReader);
    final PhraseQuery phraseQuery=new PhraseQuery.Builder().add(new Term(FIELD,"ab"),0).add(new Term(FIELD,"cd"),2).build();
    TopDocs hits=indexSearcher.search(phraseQuery,100);
    assertEquals(1,hits.totalHits);
    final Highlighter highlighter=new Highlighter(new SimpleHTMLFormatter(),new SimpleHTMLEncoder(),new QueryScorer(phraseQuery));
    String[] frags=highlighter.getBestFragments(stopAnalyzer,FIELD,TEXT,10);
    assertEquals(1,frags.length);
    assertTrue("contains <B>ab</B> the <B>cd</B>",(frags[0].contains("<B>ab</B> the <B>cd</B>")));
    assertTrue("does not contain <B>cd</B> the <B>ab</B>",(!frags[0].contains("<B>cd</B> the <B>ab</B>")));
  }
  finally {
    directory.close();
  }
}
