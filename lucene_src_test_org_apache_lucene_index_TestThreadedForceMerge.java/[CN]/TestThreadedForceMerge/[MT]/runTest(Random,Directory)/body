{
  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(TEST_VERSION_CURRENT,ANALYZER).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));
  for (int iter=0; iter < NUM_ITER; iter++) {
    final int iterFinal=iter;
    ((LogMergePolicy)writer.getConfig().getMergePolicy()).setMergeFactor(1000);
    final FieldType customType=new FieldType(StringField.TYPE_STORED);
    customType.setOmitNorms(true);
    for (int i=0; i < 200; i++) {
      Document d=new Document();
      d.add(newField("id",Integer.toString(i),customType));
      d.add(newField("contents",English.intToEnglish(i),customType));
      writer.addDocument(d);
    }
    ((LogMergePolicy)writer.getConfig().getMergePolicy()).setMergeFactor(4);
    Thread[] threads=new Thread[NUM_THREADS];
    for (int i=0; i < NUM_THREADS; i++) {
      final int iFinal=i;
      final IndexWriter writerFinal=writer;
      threads[i]=new Thread(){
        @Override public void run(){
          try {
            for (int j=0; j < NUM_ITER2; j++) {
              writerFinal.forceMerge(1,false);
              for (int k=0; k < 17 * (1 + iFinal); k++) {
                Document d=new Document();
                d.add(newField("id",iterFinal + "_" + iFinal+ "_"+ j+ "_"+ k,customType));
                d.add(newField("contents",English.intToEnglish(iFinal + k),customType));
                writerFinal.addDocument(d);
              }
              for (int k=0; k < 9 * (1 + iFinal); k++)               writerFinal.deleteDocuments(new Term("id",iterFinal + "_" + iFinal+ "_"+ j+ "_"+ k));
              writerFinal.forceMerge(1);
            }
          }
 catch (          Throwable t) {
            setFailed();
            System.out.println(Thread.currentThread().getName() + ": hit exception");
            t.printStackTrace(System.out);
          }
        }
      }
;
    }
    for (int i=0; i < NUM_THREADS; i++)     threads[i].start();
    for (int i=0; i < NUM_THREADS; i++)     threads[i].join();
    assertTrue(!failed);
    final int expectedDocCount=(int)((1 + iter) * (200 + 8 * NUM_ITER2 * (NUM_THREADS / 2.0)* (1 + NUM_THREADS)));
    assertEquals("index=" + writer.segString() + " numDocs="+ writer.numDocs()+ " maxDoc="+ writer.maxDoc()+ " config="+ writer.getConfig(),expectedDocCount,writer.numDocs());
    assertEquals("index=" + writer.segString() + " numDocs="+ writer.numDocs()+ " maxDoc="+ writer.maxDoc()+ " config="+ writer.getConfig(),expectedDocCount,writer.maxDoc());
    writer.close();
    writer=new IndexWriter(directory,newIndexWriterConfig(TEST_VERSION_CURRENT,ANALYZER).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));
    DirectoryReader reader=IndexReader.open(directory);
    assertEquals("reader=" + reader,1,reader.getSequentialSubReaders().length);
    assertEquals(expectedDocCount,reader.numDocs());
    reader.close();
  }
  writer.close();
}
