{
  return new SolrZkClient(zkServerAddress,zkClientTimeout){
    @Override protected ZkCredentialsProvider createZkCredentialsToAddAutomatically(){
      return new DefaultZkCredentialsProvider(){
        @Override protected Collection<ZkCredentials> createCredentials(){
          List<ZkCredentials> result=new ArrayList<ZkCredentials>();
          if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {
            try {
              result.add(new ZkCredentials("digest",(digestUsername + ":" + digestPassword).getBytes("UTF-8")));
            }
 catch (            UnsupportedEncodingException e) {
              throw new RuntimeException(e);
            }
          }
          return result;
        }
      }
;
    }
    @Override public ZkACLProvider createZkACLProvider(){
      return new VMParamsAllAndReadonlyDigestZkACLProvider(){
        @Override protected List<ACL> createNonSecurityACLsToAdd(){
          return createACLsToAdd(true,digestUsername,digestPassword,digestReadonlyUsername,digestReadonlyPassword);
        }
        /** 
 * @return Set of ACLs to return security-related znodes
 */
        @Override protected List<ACL> createSecurityACLsToAdd(){
          return createACLsToAdd(false,digestUsername,digestPassword,digestReadonlyUsername,digestReadonlyPassword);
        }
      }
;
    }
  }
;
}
