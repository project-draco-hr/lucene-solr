{
  return new Iterator<Map<String,Object>>(){
    private Iterator<Map.Entry<Object,List<Map<String,Object>>>> theMapIter;
    private List<Map<String,Object>> currentKeyResult=null;
    private Iterator<Map<String,Object>> currentKeyResultIter=null;
{
      theMapIter=theMap.entrySet().iterator();
    }
    @Override public boolean hasNext(){
      if (currentKeyResultIter != null) {
        if (currentKeyResultIter.hasNext()) {
          return true;
        }
 else {
          currentKeyResult=null;
          currentKeyResultIter=null;
        }
      }
      Map.Entry<Object,List<Map<String,Object>>> next=null;
      if (theMapIter.hasNext()) {
        next=theMapIter.next();
        currentKeyResult=next.getValue();
        currentKeyResultIter=currentKeyResult.iterator();
        if (currentKeyResultIter.hasNext()) {
          return true;
        }
      }
      return false;
    }
    @Override public Map<String,Object> next(){
      if (currentKeyResultIter != null) {
        if (currentKeyResultIter.hasNext()) {
          return currentKeyResultIter.next();
        }
 else {
          currentKeyResult=null;
          currentKeyResultIter=null;
        }
      }
      Map.Entry<Object,List<Map<String,Object>>> next=null;
      if (theMapIter.hasNext()) {
        next=theMapIter.next();
        currentKeyResult=next.getValue();
        currentKeyResultIter=currentKeyResult.iterator();
        if (currentKeyResultIter.hasNext()) {
          return currentKeyResultIter.next();
        }
      }
      return null;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
