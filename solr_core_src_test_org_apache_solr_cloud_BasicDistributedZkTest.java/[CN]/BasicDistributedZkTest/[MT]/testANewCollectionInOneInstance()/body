{
  log.info("### STARTING testANewCollectionInOneInstance");
  List<SolrServer> collectionClients=new ArrayList<>();
  SolrServer client=clients.get(0);
  final String baseUrl=((HttpSolrServer)client).getBaseURL().substring(0,((HttpSolrServer)client).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
  createCollection(oneInstanceCollection,collectionClients,baseUrl,1);
  createCollection(oneInstanceCollection,collectionClients,baseUrl,2);
  createCollection(oneInstanceCollection,collectionClients,baseUrl,3);
  createCollection(oneInstanceCollection,collectionClients,baseUrl,4);
  while (pending != null && pending.size() > 0) {
    Future<Object> future=completionService.take();
    if (future == null)     return;
    pending.remove(future);
  }
  SolrServer client1=collectionClients.get(0);
  SolrServer client2=collectionClients.get(1);
  SolrServer client3=collectionClients.get(2);
  SolrServer client4=collectionClients.get(3);
  waitForRecoveriesToFinish(oneInstanceCollection,getCommonCloudSolrServer().getZkStateReader(),false);
  assertAllActive(oneInstanceCollection,getCommonCloudSolrServer().getZkStateReader());
  client2.add(getDoc(id,"1"));
  client3.add(getDoc(id,"2"));
  client4.add(getDoc(id,"3"));
  client1.commit();
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  long oneDocs=client1.query(query).getResults().getNumFound();
  long twoDocs=client2.query(query).getResults().getNumFound();
  long threeDocs=client3.query(query).getResults().getNumFound();
  long fourDocs=client4.query(query).getResults().getNumFound();
  query.set("collection",oneInstanceCollection);
  query.set("distrib",true);
  long allDocs=getCommonCloudSolrServer().query(query).getResults().getNumFound();
  assertEquals(3,allDocs);
  for (  SolrServer newCollectionClient : collectionClients) {
    newCollectionClient.shutdown();
  }
}
