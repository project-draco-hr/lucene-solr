{
  String collection="oneInstanceCollection";
  List<SolrServer> collectionClients=new ArrayList<SolrServer>();
  SolrServer client=clients.get(0);
  oneInstanceCollectionClients.put(collection,collectionClients);
  String baseUrl=((CommonsHttpSolrServer)client).getBaseURL();
  createCollection(collection,collectionClients,baseUrl,1);
  createCollection(collection,collectionClients,baseUrl,2);
  createCollection(collection,collectionClients,baseUrl,3);
  createCollection(collection,collectionClients,baseUrl,4);
  SolrServer client1=createNewSolrServer(collection + "1",baseUrl);
  SolrServer client2=createNewSolrServer(collection + "2",baseUrl);
  SolrServer client3=createNewSolrServer(collection + "3",baseUrl);
  SolrServer client4=createNewSolrServer(collection + "4",baseUrl);
  client2.add(getDoc(id,"1"));
  client3.add(getDoc(id,"2"));
  client4.add(getDoc(id,"3"));
  client1.commit();
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  long oneDocs=client1.query(query).getResults().getNumFound();
  long twoDocs=client2.query(query).getResults().getNumFound();
  long threeDocs=client3.query(query).getResults().getNumFound();
  long fourDocs=client4.query(query).getResults().getNumFound();
  query.set("collection",collection);
  query.set("distrib",true);
  long allDocs=solrj.query(query).getResults().getNumFound();
  assertEquals(oneDocs,threeDocs);
  assertEquals(twoDocs,fourDocs);
  assertNotSame(oneDocs,twoDocs);
  assertEquals(3,allDocs);
}
