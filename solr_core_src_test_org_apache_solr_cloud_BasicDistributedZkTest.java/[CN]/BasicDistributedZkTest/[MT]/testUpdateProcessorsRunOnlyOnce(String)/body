{
  final String fieldA="regex_dup_A_s";
  final String fieldB="regex_dup_B_s";
  final String val="x";
  final String expected="x_x";
  final ModifiableSolrParams updateParams=new ModifiableSolrParams();
  updateParams.add(UpdateParams.UPDATE_CHAIN,chain);
  final int numLoops=atLeast(50);
  for (int i=1; i < numLoops; i++) {
    SolrServer updateClient=clients.get(random().nextInt(clients.size()));
    SolrInputDocument doc=new SolrInputDocument();
    addFields(doc,id,i,fieldA,val,fieldB,val);
    UpdateResponse ures=add(updateClient,updateParams,doc);
    assertEquals(chain + ": update failed",0,ures.getStatus());
    ures=updateClient.commit();
    assertEquals(chain + ": commit failed",0,ures.getStatus());
  }
  for (int i=1; i < numLoops; i++) {
    final String query=id + ":" + i;
    QueryResponse qres=queryServer(new SolrQuery(query));
    assertEquals(chain + ": query failed: " + query,0,qres.getStatus());
    assertEquals(chain + ": didn't find correct # docs with query: " + query,1,qres.getResults().getNumFound());
    SolrDocument doc=qres.getResults().get(0);
    for (    String field : new String[]{fieldA,fieldB}) {
      assertEquals(chain + ": doc#" + i+ " has wrong value for "+ field,expected,doc.getFirstValue(field));
    }
  }
}
