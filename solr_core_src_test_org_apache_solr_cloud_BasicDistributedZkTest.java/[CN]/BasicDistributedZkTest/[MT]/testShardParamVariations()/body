{
  SolrQuery query=new SolrQuery("*:*");
  Map<String,Long> shardCounts=new HashMap<>();
  for (  String shard : shardToJetty.keySet()) {
    List<SolrClient> solrclients=new ArrayList<>(this.clients);
    Collections.shuffle(solrclients,random());
    for (    SolrClient client : solrclients) {
      query.set("shards",shard);
      long numDocs=client.query(query).getResults().getNumFound();
      assertTrue("numDocs < 0 for shard " + shard + " via "+ client,0 <= numDocs);
      if (!shardCounts.containsKey(shard)) {
        shardCounts.put(shard,numDocs);
      }
      assertEquals("inconsitent numDocs for shard " + shard + " via "+ client,shardCounts.get(shard).longValue(),numDocs);
      List<CloudJettyRunner> replicaJetties=new ArrayList<>(shardToJetty.get(shard));
      Collections.shuffle(replicaJetties,random());
      ArrayList<String> replicaAlts=new ArrayList<>(replicaJetties.size() * 2);
      for (      CloudJettyRunner replicaJetty : shardToJetty.get(shard)) {
        String replica=replicaJetty.url;
        query.set("shards",replica);
        if (0 == random().nextInt(3) || replicaAlts.size() < 2) {
          replicaAlts.add(replica);
        }
        numDocs=client.query(query).getResults().getNumFound();
        assertTrue("numDocs < 0 for replica " + replica + " via "+ client,0 <= numDocs);
        assertEquals("inconsitent numDocs for shard " + shard + " in replica "+ replica+ " via "+ client,shardCounts.get(shard).longValue(),numDocs);
      }
      String replicas=StringUtils.join(replicaAlts.toArray(),"|");
      query.set("shards",replicas);
      numDocs=client.query(query).getResults().getNumFound();
      assertTrue("numDocs < 0 for replicas " + replicas + " via "+ client,0 <= numDocs);
      assertEquals("inconsitent numDocs for replicas " + replicas + " via "+ client,shardCounts.get(shard).longValue(),numDocs);
    }
  }
  long randomShardCountsExpected=0;
  ArrayList<String> randomShards=new ArrayList<>(shardCounts.size());
  for (  Map.Entry<String,Long> shardData : shardCounts.entrySet()) {
    if (random().nextBoolean() || randomShards.size() < 2) {
      String shard=shardData.getKey();
      randomShardCountsExpected+=shardData.getValue();
      if (random().nextBoolean()) {
        randomShards.add(shard);
      }
 else {
        ArrayList<String> replicas=new ArrayList<>(7);
        for (        CloudJettyRunner replicaJetty : shardToJetty.get(shard)) {
          if (0 == random().nextInt(3) || 0 == replicas.size()) {
            replicas.add(replicaJetty.url);
          }
        }
        Collections.shuffle(replicas,random());
        randomShards.add(StringUtils.join(replicas,"|"));
      }
    }
  }
  String randShards=StringUtils.join(randomShards,",");
  query.set("shards",randShards);
  for (  SolrClient client : this.clients) {
    assertEquals("numDocs for " + randShards + " via "+ client,randomShardCountsExpected,client.query(query).getResults().getNumFound());
  }
  query=new SolrQuery("*:*");
  long totalShardNumDocs=0;
  for (  Long c : shardCounts.values()) {
    totalShardNumDocs+=c;
  }
  for (  SolrClient client : clients) {
    assertEquals("sum of shard numDocs on client: " + client,totalShardNumDocs,client.query(query).getResults().getNumFound());
  }
  assertTrue("total numDocs <= 0, WTF? Test is useless",0 < totalShardNumDocs);
}
