{
  final List<SolrServer> collectionClients=new ArrayList<SolrServer>();
  otherCollectionClients.put(collection,collectionClients);
  int unique=0;
  for (  final SolrServer client : clients) {
    unique++;
    final String baseUrl=((HttpSolrServer)client).getBaseURL().substring(0,((HttpSolrServer)client).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
    final int frozeUnique=unique;
    Callable call=new Callable(){
      @Override public Object call(){
        HttpSolrServer server=null;
        try {
          server=new HttpSolrServer(baseUrl);
          server.setConnectionTimeout(15000);
          server.setSoTimeout(60000);
          Create createCmd=new Create();
          createCmd.setCoreName(collection);
          createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator + collection+ frozeUnique));
          server.request(createCmd);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          if (server != null) {
            server.shutdown();
          }
        }
        return null;
      }
    }
;
    collectionClients.add(createNewSolrServer(collection,baseUrl));
    pending.add(completionService.submit(call));
    while (pending != null && pending.size() > 0) {
      Future<Object> future=completionService.take();
      if (future == null)       return;
      pending.remove(future);
    }
  }
}
