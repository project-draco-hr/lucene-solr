{
  final List<SolrClient> collectionClients=new ArrayList<>();
  otherCollectionClients.put(collection,collectionClients);
  int unique=0;
  for (  final SolrClient client : clients) {
    unique++;
    final String baseUrl=((HttpSolrClient)client).getBaseURL().substring(0,((HttpSolrClient)client).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
    final int frozeUnique=unique;
    Callable call=new Callable(){
      @Override public Object call(){
        try (HttpSolrClient client=new HttpSolrClient(baseUrl)){
          client.setConnectionTimeout(15000);
          client.setSoTimeout(60000);
          Create createCmd=new Create();
          createCmd.setCoreName(collection);
          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));
          client.request(createCmd);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        return null;
      }
    }
;
    collectionClients.add(createNewSolrClient(collection,baseUrl));
    pending.add(completionService.submit(call));
    while (pending != null && pending.size() > 0) {
      Future<Object> future=completionService.take();
      if (future == null)       return;
      pending.remove(future);
    }
  }
}
