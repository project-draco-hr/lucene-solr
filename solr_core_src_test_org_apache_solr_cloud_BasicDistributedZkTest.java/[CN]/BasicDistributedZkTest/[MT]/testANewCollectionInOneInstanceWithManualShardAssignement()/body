{
  List<SolrServer> collectionClients=new ArrayList<SolrServer>();
  SolrServer client=clients.get(0);
  otherCollectionClients.put(oneInstanceCollection2,collectionClients);
  String baseUrl=((HttpSolrServer)client).getBaseURL();
  createCollection(oneInstanceCollection2,collectionClients,baseUrl,1,"slice1");
  createCollection(oneInstanceCollection2,collectionClients,baseUrl,2,"slice2");
  createCollection(oneInstanceCollection2,collectionClients,baseUrl,3,"slice2");
  createCollection(oneInstanceCollection2,collectionClients,baseUrl,4,"slice1");
  while (pending != null && pending.size() > 0) {
    Future<Request> future=completionService.take();
    pending.remove(future);
  }
  SolrServer client1=createNewSolrServer(oneInstanceCollection2 + "1",baseUrl);
  SolrServer client2=createNewSolrServer(oneInstanceCollection2 + "2",baseUrl);
  SolrServer client3=createNewSolrServer(oneInstanceCollection2 + "3",baseUrl);
  SolrServer client4=createNewSolrServer(oneInstanceCollection2 + "4",baseUrl);
  waitForRecoveriesToFinish(oneInstanceCollection2,solrj.getZkStateReader(),false,true);
  assertAllActive(oneInstanceCollection2,solrj.getZkStateReader());
  client2.add(getDoc(id,"1"));
  client3.add(getDoc(id,"2"));
  client4.add(getDoc(id,"3"));
  client1.commit();
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  long oneDocs=client1.query(query).getResults().getNumFound();
  long twoDocs=client2.query(query).getResults().getNumFound();
  long threeDocs=client3.query(query).getResults().getNumFound();
  long fourDocs=client4.query(query).getResults().getNumFound();
  query.set("collection",oneInstanceCollection2);
  query.set("distrib",true);
  long allDocs=solrj.query(query).getResults().getNumFound();
  assertEquals(3,allDocs);
  ZkStateReader zkStateReader=solrj.getZkStateReader();
  zkStateReader.updateCloudState(true);
  Map<String,Slice> slices=zkStateReader.getCloudState().getSlices(oneInstanceCollection2);
  assertNotNull(slices);
  String roles=slices.get("slice1").getShards().values().iterator().next().get(ZkStateReader.ROLES_PROP);
  assertEquals("none",roles);
}
