{
  System.clearProperty("numShards");
  List<SolrServer> collectionClients=new ArrayList<SolrServer>();
  SolrServer client=clients.get(0);
  otherCollectionClients.put(oneInstanceCollection2,collectionClients);
  final String baseUrl=((HttpSolrServer)client).getBaseURL().substring(0,((HttpSolrServer)client).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,1,"slice1");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,2,"slice2");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,3,"slice2");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,4,"slice1");
  while (pending != null && pending.size() > 0) {
    Future<Request> future=completionService.take();
    pending.remove(future);
  }
  SolrServer client1=createNewSolrServer(oneInstanceCollection2 + "1",baseUrl);
  SolrServer client2=createNewSolrServer(oneInstanceCollection2 + "2",baseUrl);
  SolrServer client3=createNewSolrServer(oneInstanceCollection2 + "3",baseUrl);
  SolrServer client4=createNewSolrServer(oneInstanceCollection2 + "4",baseUrl);
  waitForRecoveriesToFinish(oneInstanceCollection2,solrj.getZkStateReader(),false,true);
  assertAllActive(oneInstanceCollection2,solrj.getZkStateReader());
  client2.add(getDoc(id,"1"));
  client3.add(getDoc(id,"2"));
  client4.add(getDoc(id,"3"));
  client1.commit();
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  long oneDocs=client1.query(query).getResults().getNumFound();
  long twoDocs=client2.query(query).getResults().getNumFound();
  long threeDocs=client3.query(query).getResults().getNumFound();
  long fourDocs=client4.query(query).getResults().getNumFound();
  query.set("collection",oneInstanceCollection2);
  query.set("distrib",true);
  long allDocs=solrj.query(query).getResults().getNumFound();
  assertEquals(3,allDocs);
  ZkStateReader zkStateReader=solrj.getZkStateReader();
  zkStateReader.updateClusterState(true);
  Map<String,Slice> slices=zkStateReader.getClusterState().getSlices(oneInstanceCollection2);
  assertNotNull(slices);
  String roles=slices.get("slice1").getReplicasMap().values().iterator().next().getStr(ZkStateReader.ROLES_PROP);
  assertEquals("none",roles);
  ZkCoreNodeProps props=new ZkCoreNodeProps(solrj.getZkStateReader().getClusterState().getLeader(oneInstanceCollection2,"slice1"));
  HttpSolrServer server=new HttpSolrServer(baseUrl);
  Unload unloadCmd=new Unload(true);
  unloadCmd.setCoreName(props.getCoreName());
  String leader=props.getCoreUrl();
  server.request(unloadCmd);
  int tries=50;
  while (leader.equals(zkStateReader.getLeaderUrl(oneInstanceCollection2,"slice1",10000))) {
    Thread.sleep(100);
    if (tries-- == 0) {
      fail("Leader never changed");
    }
  }
}
