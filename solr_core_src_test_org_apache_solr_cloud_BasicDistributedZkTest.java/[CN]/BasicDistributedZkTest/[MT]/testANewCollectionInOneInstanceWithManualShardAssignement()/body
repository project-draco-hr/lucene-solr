{
  log.info("### STARTING testANewCollectionInOneInstanceWithManualShardAssignement");
  System.clearProperty("numShards");
  List<SolrClient> collectionClients=new ArrayList<>();
  SolrClient client=clients.get(0);
  final String baseUrl=((HttpSolrClient)client).getBaseURL().substring(0,((HttpSolrClient)client).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,1,"slice1");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,2,"slice2");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,3,"slice2");
  createSolrCore(oneInstanceCollection2,collectionClients,baseUrl,4,"slice1");
  while (pending != null && pending.size() > 0) {
    Future<Object> future=completionService.take();
    pending.remove(future);
  }
  SolrClient client1=collectionClients.get(0);
  SolrClient client2=collectionClients.get(1);
  SolrClient client3=collectionClients.get(2);
  SolrClient client4=collectionClients.get(3);
  waitForRecoveriesToFinish(oneInstanceCollection2,getCommonCloudSolrClient().getZkStateReader(),false,true);
  assertAllActive(oneInstanceCollection2,getCommonCloudSolrClient().getZkStateReader());
  client2.add(getDoc(id,"1"));
  client3.add(getDoc(id,"2"));
  client4.add(getDoc(id,"3"));
  client1.commit();
  SolrQuery query=new SolrQuery("*:*");
  query.set("distrib",false);
  long oneDocs=client1.query(query).getResults().getNumFound();
  long twoDocs=client2.query(query).getResults().getNumFound();
  long threeDocs=client3.query(query).getResults().getNumFound();
  long fourDocs=client4.query(query).getResults().getNumFound();
  query.set("collection",oneInstanceCollection2);
  query.set("distrib",true);
  long allDocs=getCommonCloudSolrClient().query(query).getResults().getNumFound();
  assertEquals(3,allDocs);
  ZkStateReader zkStateReader=getCommonCloudSolrClient().getZkStateReader();
  zkStateReader.forceUpdateCollection(oneInstanceCollection2);
  Map<String,Slice> slices=zkStateReader.getClusterState().getSlicesMap(oneInstanceCollection2);
  assertNotNull(slices);
  String roles=slices.get("slice1").getReplicasMap().values().iterator().next().getStr(ZkStateReader.ROLES_PROP);
  assertEquals("none",roles);
  ZkCoreNodeProps props=new ZkCoreNodeProps(getCommonCloudSolrClient().getZkStateReader().getClusterState().getLeader(oneInstanceCollection2,"slice1"));
  try (HttpSolrClient unloadClient=getHttpSolrClient(baseUrl)){
    unloadClient.setConnectionTimeout(15000);
    unloadClient.setSoTimeout(60000);
    Unload unloadCmd=new Unload(true);
    unloadCmd.setCoreName(props.getCoreName());
    String leader=props.getCoreUrl();
    unloadClient.request(unloadCmd);
    int tries=50;
    while (leader.equals(zkStateReader.getLeaderUrl(oneInstanceCollection2,"slice1",10000))) {
      Thread.sleep(100);
      if (tries-- == 0) {
        fail("Leader never changed");
      }
    }
  }
   IOUtils.close(collectionClients);
}
