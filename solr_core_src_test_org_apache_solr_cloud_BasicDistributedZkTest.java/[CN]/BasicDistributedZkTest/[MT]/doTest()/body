{
  ZkStateReader zkStateReader=cloudClient.getZkStateReader();
  for (int j=1; j < sliceCount; j++) {
    zkStateReader.getLeaderRetry(DEFAULT_COLLECTION,"shard" + j,10000);
  }
  waitForRecoveriesToFinish(false);
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  del("*:*");
  queryAndCompareShards(params("q","*:*","distrib","false","sanity_check","is_empty"));
  int foo_i_counter=0;
  for (  SolrServer server : clients) {
    foo_i_counter++;
    indexDoc(server,params("commit","true"),sdoc(id,1,i1,100,tlong,100,"foo_i",foo_i_counter));
    queryAndCompareShards(params("q","id:1","distrib","false","sanity_check","non_distrib_id_1_lookup"));
    queryAndCompareShards(params("q","id:1","sanity_check","distrib_id_1_lookup"));
  }
  indexr(id,1,i1,100,tlong,100,t1,"now is the time for all good men","foo_f",1.414f,"foo_b","true","foo_d",1.414d);
  indexr(id,2,i1,50,tlong,50,t1,"to come to the aid of their country.");
  indexr(id,3,i1,2,tlong,2,t1,"how now brown cow");
  indexr(id,4,i1,-100,tlong,101,t1,"the quick fox jumped over the lazy dog");
  indexr(id,5,i1,500,tlong,500,t1,"the quick fox jumped way over the lazy dog");
  indexr(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
  indexr(id,7,i1,123,tlong,123,t1,"humpty dumpy had a great fall");
  indexr(id,8,i1,876,tlong,876,t1,"all the kings horses and all the kings men");
  indexr(id,9,i1,7,tlong,7,t1,"couldn't put humpty together again");
  indexr(id,10,i1,4321,tlong,4321,t1,"this too shall pass");
  indexr(id,11,i1,-987,tlong,987,t1,"An eye for eye only ends up making the whole world blind.");
  indexr(id,12,i1,379,tlong,379,t1,"Great works are performed, not by strength, but by perseverance.");
  indexr(id,13,i1,232,tlong,232,t1,"no eggs on wall, lesson learned",oddField,"odd man out");
  indexr(id,14,"SubjectTerms_mfacet",new String[]{"mathematical models","mathematical analysis"});
  indexr(id,15,"SubjectTerms_mfacet",new String[]{"test 1","test 2","test3"});
  indexr(id,16,"SubjectTerms_mfacet",new String[]{"test 1","test 2","test3"});
  String[] vals=new String[100];
  for (int i=0; i < 100; i++) {
    vals[i]="test " + i;
  }
  indexr(id,17,"SubjectTerms_mfacet",vals);
  for (int i=100; i < 150; i++) {
    indexr(id,i);
  }
  commit();
  queryAndCompareShards(params("q","*:*","sort","id desc","distrib","false","sanity_check","is_empty"));
  for (  String f : fieldNames) {
    query(false,new String[]{"q","*:*","sort",f + " desc"});
    query(false,new String[]{"q","*:*","sort",f + " asc"});
  }
  query(false,new String[]{"q","*:*","sort",i1 + " desc"});
  query(false,new String[]{"q","*:*","sort",i1 + " asc"});
  query(false,new String[]{"q","*:*","sort",i1 + " desc","fl","*,score"});
  query(false,new String[]{"q","*:*","sort","n_tl1 asc","fl","*,score"});
  query(false,new String[]{"q","*:*","sort","n_tl1 desc"});
  handle.put("maxScore",SKIPVAL);
  query(false,new String[]{"q","{!func}" + i1});
  handle.remove("maxScore");
  query(false,new String[]{"q","{!func}" + i1,"fl","*,score"});
  handle.put("highlighting",UNORDERED);
  handle.put("response",UNORDERED);
  handle.put("maxScore",SKIPVAL);
  query(false,new String[]{"q","quick"});
  query(false,new String[]{"q","all","fl","id","start","0"});
  query(false,new String[]{"q","all","fl","foofoofoo","start","0"});
  query(false,new String[]{"q","all","fl","id","start","100"});
  handle.put("score",SKIPVAL);
  query(false,new String[]{"q","quick","fl","*,score"});
  query(false,new String[]{"q","all","fl","*,score","start","1"});
  query(false,new String[]{"q","all","fl","*,score","start","100"});
  query(false,new String[]{"q","now their fox sat had put","fl","*,score","hl","true","hl.fl",t1});
  query(false,new String[]{"q","now their fox sat had put","fl","foofoofoo","hl","true","hl.fl",t1});
  query(false,new String[]{"q","matchesnothing","fl","*,score"});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.limit",-1,"facet.sort","count"});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.limit",-1,"facet.sort","count","facet.mincount",2});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.limit",-1,"facet.sort","index"});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.limit",-1,"facet.sort","index","facet.mincount",2});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.limit",1});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.query","quick","facet.query","all","facet.query","*:*"});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.offset",1});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",t1,"facet.mincount",2});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.query","quick","facet.query","all","facet.query","*:*","facet.field",t1});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.query","{!key=myquick}quick","facet.query","{!key=myall ex=a}all","facet.query","*:*","facet.field","{!key=mykey ex=a}" + t1,"facet.field","{!key=other ex=b}" + t1,"facet.field","{!key=again ex=a,b}" + t1,"facet.field",t1,"fq","{!tag=a}id:[1 TO 7]","fq","{!tag=b}id:[3 TO 9]"});
  query(false,new Object[]{"q","*:*","facet","true","facet.field","{!ex=t1}SubjectTerms_mfacet","fq","{!tag=t1}SubjectTerms_mfacet:(test 1)","facet.limit","10","facet.mincount","1"});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",missingField,"facet.mincount",2});
  query(false,new Object[]{"q","*:*","rows",100,"facet","true","facet.field",oddField,"facet.mincount",2});
  query(false,new Object[]{"q","*:*","sort",i1 + " desc","stats","true","stats.field",i1});
  handle.put("facet_fields",SKIPVAL);
  query(false,new Object[]{"q","*:*","rows",0,"facet","true","facet.field",t1,"facet.limit",5,"facet.shard.limit",5});
  query(false,new Object[]{"q","*:*","rows",0,"facet","true","facet.field","{!key='a b/c \\' \\} foo'}" + t1,"facet.limit",5,"facet.shard.limit",5});
  handle.remove("facet_fields");
  if (clients.size() >= 2) {
    index(id,100,i1,107,t1,"oh no, a duplicate!");
    for (int i=0; i < clients.size(); i++) {
      index_specific(i,id,100,i1,107,t1,"oh no, a duplicate!");
    }
    commit();
    query(false,new Object[]{"q","duplicate","hl","true","hl.fl",t1});
    query(false,new Object[]{"q","fox duplicate horses","hl","true","hl.fl",t1});
    query(false,new Object[]{"q","*:*","rows",100});
  }
  handle.put("explain",SKIPVAL);
  handle.put("debug",UNORDERED);
  handle.put("time",SKIPVAL);
  handle.put("track",SKIP);
  query(false,new Object[]{"q","now their fox sat had put","fl","*,score",CommonParams.DEBUG_QUERY,"true"});
  query(false,new Object[]{"q","id:[1 TO 5]",CommonParams.DEBUG_QUERY,"true"});
  query(false,new Object[]{"q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.TIMING});
  query(false,new Object[]{"q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.RESULTS});
  query(false,new Object[]{"q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.QUERY});
  long before=cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("commitWithin",10);
  add(cloudClient,params,getDoc("id",300));
  long timeout=System.currentTimeMillis() + 15000;
  while (cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound() != before + 1) {
    if (timeout <= System.currentTimeMillis()) {
      fail("commitWithin did not work");
    }
    Thread.sleep(100);
  }
  for (  SolrServer client : clients) {
    assertEquals("commitWithin did not work",before + 1,client.query(new SolrQuery("*:*")).getResults().getNumFound());
  }
  doOptimisticLockingAndUpdating();
  testShardParamVariations();
  testMultipleCollections();
  testANewCollectionInOneInstance();
  testSearchByCollectionName();
  testUpdateByCollectionName();
  testANewCollectionInOneInstanceWithManualShardAssignement();
  testNumberOfCommitsWithCommitAfterAdd();
  testUpdateProcessorsRunOnlyOnce("distrib-dup-test-chain-explicit");
  testUpdateProcessorsRunOnlyOnce("distrib-dup-test-chain-implicit");
  testStopAndStartCoresInOneInstance();
  testFailedCoreCreateCleansUp();
  if (DEBUG) {
    super.printLayout();
  }
}
