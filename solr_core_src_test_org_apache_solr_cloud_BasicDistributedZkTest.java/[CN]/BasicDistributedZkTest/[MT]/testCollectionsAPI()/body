{
  Map<String,List<Integer>> collectionInfos=new HashMap<String,List<Integer>>();
  int cnt=atLeast(3);
  for (int i=0; i < cnt; i++) {
    int numShards=_TestUtil.nextInt(random(),0,shardCount) + 1;
    int numReplica=_TestUtil.nextInt(random(),0,3) + 1;
    int maxShardsPerNode=(((numShards * (numReplica + 1)) / getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
    createCollection(collectionInfos,i,numShards,numReplica,maxShardsPerNode);
  }
  Set<Entry<String,List<Integer>>> collectionInfosEntrySet=collectionInfos.entrySet();
  for (  Entry<String,List<Integer>> entry : collectionInfosEntrySet) {
    String collection=entry.getKey();
    List<Integer> list=entry.getValue();
    checkForCollection(collection,list);
    String url=getUrlFromZk(collection);
    HttpSolrServer collectionClient=new HttpSolrServer(url);
    waitForNon403or404or503(collectionClient);
  }
  ZkStateReader zkStateReader=getCommonCloudSolrServer().getZkStateReader();
  for (int j=0; j < cnt; j++) {
    waitForRecoveriesToFinish("awholynewcollection_" + j,zkStateReader,false);
  }
  List<String> collectionNameList=new ArrayList<String>();
  collectionNameList.addAll(collectionInfos.keySet());
  String collectionName=collectionNameList.get(random().nextInt(collectionNameList.size()));
  String url=getUrlFromZk(collectionName);
  HttpSolrServer collectionClient=new HttpSolrServer(url);
  SolrInputDocument doc1=getDoc(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
  SolrInputDocument doc2=getDoc(id,7,i1,-600,tlong,600,t1,"humpty dumpy3 sat on a walls");
  SolrInputDocument doc3=getDoc(id,8,i1,-600,tlong,600,t1,"humpty dumpy2 sat on a walled");
  collectionClient.add(doc1);
  collectionClient.add(doc2);
  collectionClient.add(doc3);
  collectionClient.commit();
  assertEquals(3,collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
  Map<String,Long> urlToTimeBefore=new HashMap<String,Long>();
  collectStartTimes(collectionName,urlToTimeBefore);
  assertTrue(urlToTimeBefore.size() > 0);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set("action",CollectionAction.RELOAD.toString());
  params.set("name",collectionName);
  QueryRequest request=new QueryRequest(params);
  request.setPath("/admin/collections");
  final String baseUrl=((HttpSolrServer)clients.get(0)).getBaseURL().substring(0,((HttpSolrServer)clients.get(0)).getBaseURL().length() - DEFAULT_COLLECTION.length() - 1);
  createNewSolrServer("",baseUrl).request(request);
  boolean allTimesAreCorrect=waitForReloads(collectionName,urlToTimeBefore);
  assertTrue("some core start times did not change on reload",allTimesAreCorrect);
  waitForRecoveriesToFinish("awholynewcollection_" + (cnt - 1),zkStateReader,false);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set("name",collectionName);
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  createNewSolrServer("",baseUrl).request(request);
  checkForMissingCollection(collectionName);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.DELETE.toString());
  params.set("name","unknown_collection");
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  createNewSolrServer("",baseUrl).request(request);
  params=new ModifiableSolrParams();
  params.set("action",CollectionAction.CREATE.toString());
  params.set("numShards",1);
  params.set(OverseerCollectionProcessor.REPLICATION_FACTOR,1);
  collectionName="acollectionafterbaddelete";
  params.set("name",collectionName);
  request=new QueryRequest(params);
  request.setPath("/admin/collections");
  createNewSolrServer("",baseUrl).request(request);
  List<Integer> list=new ArrayList<Integer>(2);
  list.add(1);
  list.add(1);
  checkForCollection(collectionName,list);
  url=getUrlFromZk(collectionName);
  collectionClient=new HttpSolrServer(url);
  waitForNon403or404or503(collectionClient);
  for (int j=0; j < cnt; j++) {
    waitForRecoveriesToFinish(collectionName,zkStateReader,false);
  }
  int liveNodes=getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size();
  int numShards=(liveNodes / 2) + 1;
  int numReplica=1;
  int maxShardsPerNode=1;
  collectionInfos=new HashMap<String,List<Integer>>();
  createCollection(collectionInfos,cnt,numShards,numReplica,maxShardsPerNode);
}
