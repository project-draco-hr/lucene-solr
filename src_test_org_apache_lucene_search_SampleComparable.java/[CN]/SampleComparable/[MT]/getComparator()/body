{
  return new SortComparatorSource(){
    public ScoreDocLookupComparator newComparator(    final IndexReader reader,    String fieldname) throws IOException {
      final String field=fieldname.intern();
      final TermEnum enumerator=reader.terms(new Term(fieldname,""));
      try {
        return new ScoreDocLookupComparator(){
          protected Comparable[] cachedValues=fillCache(reader,enumerator,field);
          public boolean sizeMatches(          int n){
            return (cachedValues.length == n);
          }
          public int compare(          ScoreDoc i,          ScoreDoc j){
            return cachedValues[i.doc].compareTo(cachedValues[j.doc]);
          }
          public int compareReverse(          ScoreDoc i,          ScoreDoc j){
            return cachedValues[j.doc].compareTo(cachedValues[i.doc]);
          }
          public Comparable sortValue(          ScoreDoc i){
            return cachedValues[i.doc];
          }
          public int sortType(){
            return SortField.CUSTOM;
          }
        }
;
      }
  finally {
        enumerator.close();
      }
    }
    /** 
 * Returns an array of objects which represent that natural order
 * of the term values in the given field.
 * @param reader     Terms are in this index.
 * @param enumerator Use this to get the term values and TermDocs.
 * @param fieldname  Comparables should be for this field.
 * @return Array of objects representing natural order of terms in field.
 * @throws IOException If an error occurs reading the index.
 */
    protected Comparable[] fillCache(    IndexReader reader,    TermEnum enumerator,    String fieldname) throws IOException {
      final String field=fieldname.intern();
      Comparable[] retArray=new Comparable[reader.maxDoc()];
      if (retArray.length > 0) {
        TermDocs termDocs=reader.termDocs();
        try {
          if (enumerator.term() == null) {
            throw new RuntimeException("no terms in field " + field);
          }
          do {
            Term term=enumerator.term();
            if (term.field() != field)             break;
            Comparable termval=getComparable(term.text());
            termDocs.seek(enumerator);
            while (termDocs.next()) {
              retArray[termDocs.doc()]=termval;
            }
          }
 while (enumerator.next());
        }
  finally {
          termDocs.close();
        }
      }
      return retArray;
    }
    Comparable getComparable(    String termtext){
      return new SampleComparable(termtext);
    }
  }
;
}
