{
  ClusterState clusterState=zkStateReader.getClusterState();
  String autoAddReplicas=(String)zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);
  if (autoAddReplicas != null && autoAddReplicas.equals("false")) {
    return;
  }
  if (clusterState != null) {
    if (clusterState.getZkClusterStateVersion() != null && clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 && liveNodes.equals(clusterState.getLiveNodes())) {
      return;
    }
    liveNodes=clusterState.getLiveNodes();
    lastClusterStateVersion=clusterState.getZkClusterStateVersion();
    Set<String> collections=clusterState.getCollections();
    for (    final String collection : collections) {
      DocCollection docCollection=clusterState.getCollection(collection);
      if (!docCollection.getAutoAddReplicas()) {
        continue;
      }
      if (docCollection.getReplicationFactor() == null) {
        log.debug("Skipping collection because it has no defined replicationFactor, name={}",docCollection.getName());
        continue;
      }
      log.debug("Found collection, name={} replicationFactor=",collection,docCollection.getReplicationFactor());
      Collection<Slice> slices=docCollection.getSlices();
      for (      Slice slice : slices) {
        if (slice.getState().equals(Slice.ACTIVE)) {
          final Collection<DownReplica> downReplicas=new ArrayList<DownReplica>();
          int goodReplicas=findDownReplicasInSlice(clusterState,docCollection,slice,downReplicas);
          log.debug("replicationFactor={} goodReplicaCount={}",docCollection.getReplicationFactor(),goodReplicas);
          if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {
            processBadReplicas(collection,downReplicas);
          }
 else           if (goodReplicas > docCollection.getReplicationFactor()) {
            log.debug("There are too many replicas");
          }
        }
      }
    }
  }
}
