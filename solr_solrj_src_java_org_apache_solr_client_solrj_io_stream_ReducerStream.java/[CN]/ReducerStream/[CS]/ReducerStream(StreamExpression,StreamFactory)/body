{
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  StreamExpressionNamedParameter byExpression=factory.getNamedOperand(expression,"by");
  List<StreamExpression> operationExpressions=factory.getExpressionOperandsRepresentingTypes(expression,ReduceOperation.class);
  if (expression.getParameters().size() != streamExpressions.size() + 2) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found",expression));
  }
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression,streamExpressions.size()));
  }
  if (null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one",expression));
  }
  ReduceOperation reduceOperation=null;
  if (operationExpressions != null && operationExpressions.size() == 1) {
    StreamExpression ex=operationExpressions.get(0);
    StreamOperation operation=factory.constructOperation(ex);
    if (operation instanceof ReduceOperation) {
      reduceOperation=(ReduceOperation)operation;
    }
 else {
      throw new IOException("The ReducerStream requires a ReduceOperation. A StreamOperation was provided.");
    }
  }
 else {
    throw new IOException("The ReducerStream requires a ReduceOperation.");
  }
  init(factory.constructStream(streamExpressions.get(0)),factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(),FieldEqualitor.class),reduceOperation);
}
