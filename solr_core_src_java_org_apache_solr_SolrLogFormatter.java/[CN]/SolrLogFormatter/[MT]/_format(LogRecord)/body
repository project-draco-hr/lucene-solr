{
  String message=record.getMessage();
  StringBuilder sb=new StringBuilder(message.length() + 80);
  long now=record.getMillis();
  long timeFromStart=now - startTime;
  long timeSinceLast=now - lastTime;
  lastTime=now;
  String shortClassName=getShortClassName(record.getSourceClassName(),record.getSourceMethodName());
  SolrRequestInfo requestInfo=SolrRequestInfo.getRequestInfo();
  SolrQueryRequest req=requestInfo == null ? null : requestInfo.getReq();
  SolrCore core=req == null ? null : req.getCore();
  ZkController zkController=null;
  CoreInfo info=null;
  if (core != null) {
    info=coreInfoMap.get(core);
    if (info == null) {
      info=new CoreInfo();
      info.shortId="C" + Integer.toString(CoreInfo.maxCoreNum++);
      coreInfoMap.put(core,info);
      if (sb.length() == 0)       sb.append("ASYNC ");
      sb.append(" NEW_CORE " + info.shortId);
      sb.append(" name=" + core.getName());
      sb.append(" " + core);
    }
    if (zkController == null) {
      zkController=core.getCoreDescriptor().getCoreContainer().getZkController();
    }
    if (zkController != null) {
      if (info.url == null) {
        info.url=zkController.getBaseUrl() + "/" + core.getName();
        sb.append(" url=" + info.url + " node="+ zkController.getNodeName());
      }
      CoreState coreState=zkController.getCoreState(core.getName());
      if (coreState != info.coreState) {
        sb.append(" " + info.shortId + "_STATE="+ coreState);
        info.coreState=coreState;
      }
    }
  }
  if (sb.length() > 0)   sb.append('\n');
  sb.append(timeFromStart);
  appendThread(sb,record);
  if (info != null) {
    sb.append(' ').append(info.shortId);
  }
  if (zkController != null) {
    sb.append(" P").append(zkController.getHostPort());
  }
  sb.append(' ').append(shortClassName);
  if (record.getLevel() != Level.INFO) {
    sb.append(' ').append(record.getLevel());
  }
  sb.append(' ');
  appendMultiLineString(sb,message);
  Throwable th=record.getThrown();
  if (th != null) {
    sb.append(' ');
    String err=SolrException.toStr(th);
    String ignoredMsg=SolrException.doIgnore(th,err);
    if (ignoredMsg != null) {
      sb.append(ignoredMsg);
    }
 else {
      sb.append(err);
    }
  }
  sb.append('\n');
  return sb.toString();
}
