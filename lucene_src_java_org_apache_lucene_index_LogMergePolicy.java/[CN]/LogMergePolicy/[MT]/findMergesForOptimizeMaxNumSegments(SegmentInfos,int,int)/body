{
  MergeSpecification spec=new MergeSpecification();
  while (last - maxNumSegments + 1 >= mergeFactor) {
    spec.add(new OneMerge(infos.range(last - mergeFactor,last)));
    last-=mergeFactor;
  }
  if (0 == spec.merges.size()) {
    if (maxNumSegments == 1) {
      if (last > 1 || !isOptimized(infos.info(0))) {
        spec.add(new OneMerge(infos.range(0,last)));
      }
    }
 else     if (last > maxNumSegments) {
      final int finalMergeSize=last - maxNumSegments + 1;
      long bestSize=0;
      int bestStart=0;
      for (int i=0; i < last - finalMergeSize + 1; i++) {
        long sumSize=0;
        for (int j=0; j < finalMergeSize; j++)         sumSize+=size(infos.info(j + i));
        if (i == 0 || (sumSize < 2 * size(infos.info(i - 1)) && sumSize < bestSize)) {
          bestStart=i;
          bestSize=sumSize;
        }
      }
      spec.add(new OneMerge(infos.range(bestStart,bestStart + finalMergeSize)));
    }
  }
  return spec.merges.size() == 0 ? null : spec;
}
