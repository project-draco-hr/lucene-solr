{
  final TieredMergePolicy defaultTMP=new TieredMergePolicy();
  final int testMaxMergeAtOnce=defaultTMP.getMaxMergeAtOnce() * 2;
  final double testMaxMergedSegmentMB=defaultTMP.getMaxMergedSegmentMB() * 10;
  final MergePolicyFactoryArgs args=new MergePolicyFactoryArgs();
  args.add(WrapperMergePolicyFactory.WRAPPED_PREFIX,"test");
  args.add("test.class",TieredMergePolicyFactory.class.getName());
  args.add("test.maxMergeAtOnce",testMaxMergeAtOnce);
  args.add("test.maxMergedSegmentMB",testMaxMergedSegmentMB);
  MergePolicyFactory mpf=new DefaultingWrapperMergePolicyFactory(resourceLoader,args,null){
    @Override protected MergePolicy getDefaultWrappedMergePolicy(){
      throw new IllegalStateException("Should not have reached here!");
    }
  }
;
  final MergePolicy mp=mpf.getMergePolicy();
  assertSame(mp.getClass(),TieredMergePolicy.class);
  final TieredMergePolicy tmp=(TieredMergePolicy)mp;
  assertEquals("maxMergeAtOnce",testMaxMergeAtOnce,tmp.getMaxMergeAtOnce());
  assertEquals("maxMergedSegmentMB",testMaxMergedSegmentMB,tmp.getMaxMergedSegmentMB(),0.0d);
}
