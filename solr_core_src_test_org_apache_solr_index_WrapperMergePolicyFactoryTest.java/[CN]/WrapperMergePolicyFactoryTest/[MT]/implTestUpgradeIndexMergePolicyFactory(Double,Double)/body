{
  final MergePolicyFactoryArgs args=new MergePolicyFactoryArgs();
  if (wrappingNoCFSRatio != null) {
    args.add("noCFSRatio",wrappingNoCFSRatio);
  }
  args.add(WrapperMergePolicyFactory.WRAPPED_PREFIX,"wrapped");
  args.add("wrapped.class",TieredMergePolicyFactory.class.getName());
  if (wrappedNoCFSRatio != null) {
    args.add("wrapped.noCFSRatio",wrappedNoCFSRatio);
  }
  MergePolicyFactory mpf;
  try {
    mpf=new UpgradeIndexMergePolicyFactory(resourceLoader,args,null);
    assertFalse("Should only reach here if wrapping and wrapped args don't overlap!",(wrappingNoCFSRatio != null && wrappedNoCFSRatio != null));
    for (int ii=1; ii <= 2; ++ii) {
      final MergePolicy mp=mpf.getMergePolicy();
      if (wrappingNoCFSRatio != null) {
        assertEquals("#" + ii + " wrappingNoCFSRatio",wrappingNoCFSRatio.doubleValue(),mp.getNoCFSRatio(),0.0d);
      }
      if (wrappedNoCFSRatio != null) {
        assertEquals("#" + ii + " wrappedNoCFSRatio",wrappedNoCFSRatio.doubleValue(),mp.getNoCFSRatio(),0.0d);
      }
      assertSame(mp.getClass(),UpgradeIndexMergePolicy.class);
    }
  }
 catch (  IllegalArgumentException iae) {
    assertEquals("Wrapping and wrapped merge policy args overlap! [noCFSRatio]",iae.getMessage());
    assertTrue("Should only reach here if wrapping and wrapped args do overlap!",(wrappingNoCFSRatio != null && wrappedNoCFSRatio != null));
  }
}
