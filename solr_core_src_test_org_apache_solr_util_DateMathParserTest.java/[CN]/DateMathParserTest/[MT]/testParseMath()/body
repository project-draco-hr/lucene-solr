{
  DateMathParser p=new DateMathParser(UTC,Locale.US);
  p.setNow(parser.parse("2001-07-04T12:08:56.235"));
  assertMath("2001-07-04T12:08:56.235",p,"");
  assertMath("2001-07-04T12:08:56.000",p,"/SECOND");
  assertMath("2001-07-04T12:08:00.000",p,"/MINUTE");
  assertMath("2001-07-04T12:00:00.000",p,"/HOUR");
  assertMath("2001-07-04T00:00:00.000",p,"/DAY");
  assertMath("2001-07-01T00:00:00.000",p,"/MONTH");
  assertMath("2001-01-01T00:00:00.000",p,"/YEAR");
  assertMath("2001-07-04T12:08:56.236",p,"+1MILLISECOND");
  assertMath("2001-07-04T12:08:57.235",p,"+1SECOND");
  assertMath("2001-07-04T12:09:56.235",p,"+1MINUTE");
  assertMath("2001-07-04T13:08:56.235",p,"+1HOUR");
  assertMath("2001-07-05T12:08:56.235",p,"+1DAY");
  assertMath("2001-08-04T12:08:56.235",p,"+1MONTH");
  assertMath("2002-07-04T12:08:56.235",p,"+1YEAR");
  assertMath("2001-07-04T12:08:56.234",p,"-1MILLISECOND");
  assertMath("2001-07-04T12:08:55.235",p,"-1SECOND");
  assertMath("2001-07-04T12:07:56.235",p,"-1MINUTE");
  assertMath("2001-07-04T11:08:56.235",p,"-1HOUR");
  assertMath("2001-07-03T12:08:56.235",p,"-1DAY");
  assertMath("2001-06-04T12:08:56.235",p,"-1MONTH");
  assertMath("2000-07-04T12:08:56.235",p,"-1YEAR");
  assertMath("2001-07-04T12:08:56.235",p,"+1MILLISECOND-1MILLISECOND");
  assertMath("2001-07-04T12:08:56.235",p,"+1SECOND-1SECOND");
  assertMath("2001-07-04T12:08:56.235",p,"+1MINUTE-1MINUTE");
  assertMath("2001-07-04T12:08:56.235",p,"+1HOUR-1HOUR");
  assertMath("2001-07-04T12:08:56.235",p,"+1DAY-1DAY");
  assertMath("2001-07-04T12:08:56.235",p,"+1MONTH-1MONTH");
  assertMath("2001-07-04T12:08:56.235",p,"+1YEAR-1YEAR");
  assertMath("2001-07-04T12:08:56.235",p,"-1MILLISECOND+1MILLISECOND");
  assertMath("2001-07-04T12:08:56.235",p,"-1SECOND+1SECOND");
  assertMath("2001-07-04T12:08:56.235",p,"-1MINUTE+1MINUTE");
  assertMath("2001-07-04T12:08:56.235",p,"-1HOUR+1HOUR");
  assertMath("2001-07-04T12:08:56.235",p,"-1DAY+1DAY");
  assertMath("2001-07-04T12:08:56.235",p,"-1MONTH+1MONTH");
  assertMath("2001-07-04T12:08:56.235",p,"-1YEAR+1YEAR");
  assertMath("2000-07-04T12:08:56.236",p,"+1MILLISECOND-1YEAR");
  assertMath("2000-07-04T12:08:57.235",p,"+1SECOND-1YEAR");
  assertMath("2000-07-04T12:09:56.235",p,"+1MINUTE-1YEAR");
  assertMath("2000-07-04T13:08:56.235",p,"+1HOUR-1YEAR");
  assertMath("2000-07-05T12:08:56.235",p,"+1DAY-1YEAR");
  assertMath("2000-08-04T12:08:56.235",p,"+1MONTH-1YEAR");
  assertMath("2000-07-04T12:08:56.236",p,"-1YEAR+1MILLISECOND");
  assertMath("2000-07-04T12:08:57.235",p,"-1YEAR+1SECOND");
  assertMath("2000-07-04T12:09:56.235",p,"-1YEAR+1MINUTE");
  assertMath("2000-07-04T13:08:56.235",p,"-1YEAR+1HOUR");
  assertMath("2000-07-05T12:08:56.235",p,"-1YEAR+1DAY");
  assertMath("2000-08-04T12:08:56.235",p,"-1YEAR+1MONTH");
  assertMath("2000-07-01T00:00:00.000",p,"-1YEAR+1MILLISECOND/MONTH");
  assertMath("2000-07-04T00:00:00.000",p,"-1YEAR+1SECOND/DAY");
  assertMath("2000-07-04T00:00:00.000",p,"-1YEAR+1MINUTE/DAY");
  assertMath("2000-07-04T13:00:00.000",p,"-1YEAR+1HOUR/HOUR");
  assertMath("2000-07-05T12:08:56.000",p,"-1YEAR+1DAY/SECOND");
  assertMath("2000-08-04T12:08:56.000",p,"-1YEAR+1MONTH/SECOND");
  p.setNow(parser.parse("2006-01-31T17:09:59.999"));
  assertMath("2006-02-28T17:09:59.999",p,"+1MONTH");
  assertMath("2008-02-29T17:09:59.999",p,"+25MONTH");
  assertMath("2006-02-01T00:00:00.000",p,"/MONTH+35DAYS/MONTH");
  assertMath("2006-01-31T17:10:00.000",p,"+3MILLIS/MINUTE");
}
