{
  BoostingTermQuery query=new BoostingTermQuery(new Term("multiField","seventy"));
  TopDocs hits=searcher.search(query,null,100);
  assertTrue("hits is null and it shouldn't be",hits != null);
  assertTrue("hits Size: " + hits.totalHits + " is not: "+ 100,hits.totalHits == 100);
  assertTrue(hits.getMaxScore() + " does not equal: " + 3,hits.getMaxScore() == 3);
  int numTens=0;
  for (int i=0; i < hits.scoreDocs.length; i++) {
    ScoreDoc doc=hits.scoreDocs[i];
    if (doc.doc % 10 == 0) {
      numTens++;
      assertTrue(doc.score + " does not equal: " + 3,doc.score == 3);
    }
 else {
      assertTrue(doc.score + " does not equal: " + 2,doc.score == 2);
    }
  }
  assertTrue(numTens + " does not equal: " + 10,numTens == 10);
  CheckHits.checkExplanations(query,"field",searcher,true);
  Spans spans=query.getSpans(searcher.getIndexReader());
  assertTrue("spans is null and it shouldn't be",spans != null);
  assertTrue("spans is not an instanceof " + TermSpans.class,spans instanceof TermSpans);
  int count=0;
  while (spans.next()) {
    count++;
  }
  assertTrue(count + " does not equal: " + 200,count == 200);
}
