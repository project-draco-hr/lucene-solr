{
  Iterator<int[]> shardPermutations=nonWildCardShardRules > 0 ? permutations(shardNames.size()) : singletonList(shardOrder).iterator();
  for (; shardPermutations.hasNext(); ) {
    int[] p=shardPermutations.next();
    List<Position> positions=new ArrayList<>();
    for (    int pos : p) {
      for (int j=0; j < shardVsReplicaCount.get(shardNames.get(pos)); j++) {
        positions.add(new Position(shardNames.get(pos),j));
      }
    }
    Collections.sort(positions);
    for (Iterator<int[]> it=permutations(rules.size()); it.hasNext(); ) {
      int[] permutation=it.next();
      Map<Position,String> result=tryAPermutationOfRules(permutation,positions,fuzzyPhase);
      if (result != null)       return result;
    }
  }
  return null;
}
