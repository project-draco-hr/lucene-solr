{
  for (int i=0; !hasChanges && i < subReaders.length; i++) {
    hasChanges|=subReaders[i].hasChanges;
  }
  if (hasChanges) {
    segmentInfos.setUserData(commitUserData);
    IndexFileDeleter deleter=new IndexFileDeleter(directory,deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,segmentInfos,null,codecs);
    segmentInfos.updateGeneration(deleter.getLastSegmentInfos());
    segmentInfos.changed();
    startCommit();
    boolean success=false;
    try {
      for (int i=0; i < subReaders.length; i++)       subReaders[i].commit();
      segmentInfos.pruneDeletedSegments();
      directory.sync(segmentInfos.files(directory,false));
      segmentInfos.commit(directory);
      success=true;
    }
  finally {
      if (!success) {
        rollbackCommit();
        deleter.refresh();
      }
    }
    deleter.checkpoint(segmentInfos,true);
    deleter.close();
    maxIndexVersion=segmentInfos.getVersion();
    if (writeLock != null) {
      writeLock.release();
      writeLock=null;
    }
  }
  hasChanges=false;
}
