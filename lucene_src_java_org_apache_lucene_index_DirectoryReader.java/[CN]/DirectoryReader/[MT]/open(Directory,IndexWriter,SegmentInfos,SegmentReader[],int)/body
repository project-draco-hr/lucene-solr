{
  final Map<String,Integer> segmentReaders=new HashMap<String,Integer>();
  if (oldReaders != null) {
    for (int i=0; i < oldReaders.length; i++) {
      segmentReaders.put(oldReaders[i].getSegmentName(),Integer.valueOf(i));
    }
  }
  SegmentReader[] newReaders=new SegmentReader[infos.size()];
  boolean[] readerShared=new boolean[infos.size()];
  for (int i=infos.size() - 1; i >= 0; i--) {
    Integer oldReaderIndex=segmentReaders.get(infos.info(i).name);
    if (oldReaderIndex == null) {
      newReaders[i]=null;
    }
 else {
      newReaders[i]=oldReaders[oldReaderIndex.intValue()];
    }
    boolean success=false;
    IOException prior=null;
    try {
      SegmentReader newReader;
      if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {
        newReader=new SegmentReader(infos.info(i),termInfosIndexDivisor,IOContext.READ);
        readerShared[i]=false;
        newReaders[i]=newReader;
      }
 else {
        if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {
          readerShared[i]=true;
          newReaders[i].incRef();
        }
 else {
          readerShared[i]=false;
          newReaders[i]=new SegmentReader(infos.info(i),newReaders[i],IOContext.READ);
        }
      }
      success=true;
    }
 catch (    IOException ex) {
      prior=ex;
    }
 finally {
      if (!success) {
        for (i++; i < infos.size(); i++) {
          if (newReaders[i] != null) {
            try {
              if (!readerShared[i]) {
                newReaders[i].close();
              }
 else {
                newReaders[i].decRef();
              }
            }
 catch (            IOException ex) {
              if (prior == null)               prior=ex;
            }
          }
        }
      }
      if (prior != null)       throw prior;
    }
  }
  return new DirectoryReader(newReaders,directory,writer,infos,termInfosIndexDivisor,false);
}
