{
  assertQueryEquals("term term term",null,"term term term");
  assertQueryEquals("t??rm term term",new MockAnalyzer(random()),"t??rm term term");
  assertQueryEquals("??mlaut",new MockAnalyzer(random()),"??mlaut");
  assertQueryEquals("a AND b",null,"+a +b");
  assertQueryEquals("(a AND b)",null,"+a +b");
  assertQueryEquals("c OR (a AND b)",null,"c (+a +b)");
  assertQueryEquals("a AND NOT b",null,"+a -b");
  assertQueryEquals("a AND -b",null,"+a -b");
  assertQueryEquals("a AND !b",null,"+a -b");
  assertQueryEquals("a && b",null,"+a +b");
  assertQueryEquals("a OR b",null,"a b");
  assertQueryEquals("a || b",null,"a b");
  assertQueryEquals("a OR !b",null,"a -b");
  assertQueryEquals("a OR -b",null,"a -b");
  Analyzer a=new Analyzer(){
    @Override public TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      return new TokenStreamComponents(new MockTokenizer(reader,MockTokenizer.WHITESPACE,false));
    }
  }
;
  assertQueryEquals("a - b",a,"a - b");
  assertQueryEquals("a + b",a,"a + b");
  assertQueryEquals("a ! b",a,"a ! b");
  assertQueryEquals("+term -term term",null,"+term -term term");
  assertQueryEquals("foo:term AND field:anotherTerm",null,"+foo:term +anotherterm");
  assertQueryEquals("term AND \"phrase phrase\"",null,"+term +\"phrase phrase\"");
  assertQueryEquals("\"hello there\"",null,"\"hello there\"");
  assertTrue(getQuery("a AND b",null) instanceof BooleanQuery);
  assertTrue(getQuery("hello",null) instanceof TermQuery);
  assertTrue(getQuery("\"hello there\"",null) instanceof PhraseQuery);
  assertQueryEquals("germ term^2.0",null,"germ term^2.0");
  assertQueryEquals("(term)^2.0",null,"term^2.0");
  assertQueryEquals("(germ term)^2.0",null,"(germ term)^2.0");
  assertQueryEquals("term^2.0",null,"term^2.0");
  assertQueryEquals("term^2",null,"term^2.0");
  assertQueryEquals("\"germ term\"^2.0",null,"\"germ term\"^2.0");
  assertQueryEquals("\"term germ\"^2",null,"\"term germ\"^2.0");
  assertQueryEquals("(foo OR bar) AND (baz OR boo)",null,"+(foo bar) +(baz boo)");
  assertQueryEquals("((a OR b) AND NOT c) OR d",null,"(+(a b) -c) d");
  assertQueryEquals("+(apple \"steve jobs\") -(foo bar baz)",null,"+(apple \"steve jobs\") -(foo bar baz)");
  assertQueryEquals("+title:(dog OR cat) -author:\"bob dole\"",null,"+(title:dog title:cat) -author:\"bob dole\"");
  QueryParser qp=new QueryParser(TEST_VERSION_CURRENT,"field",new MockAnalyzer(random()));
  assertEquals(QueryParserBase.OR_OPERATOR,qp.getDefaultOperator());
  qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);
  assertEquals(QueryParserBase.AND_OPERATOR,qp.getDefaultOperator());
  qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);
  assertEquals(QueryParserBase.OR_OPERATOR,qp.getDefaultOperator());
}
