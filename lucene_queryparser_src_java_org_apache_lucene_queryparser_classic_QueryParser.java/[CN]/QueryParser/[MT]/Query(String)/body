{
  List<BooleanClause> clauses=new ArrayList<BooleanClause>();
  Query q, firstQuery=null;
  int conj, mods;
  if (jj_2_1(2)) {
    firstQuery=MultiTerm(field,clauses);
  }
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NOT:
case PLUS:
case MINUS:
case BAREOPER:
case LPAREN:
case STAR:
case QUOTED:
case TERM:
case PREFIXTERM:
case WILDTERM:
case REGEXPTERM:
case RANGEIN_START:
case RANGEEX_START:
case NUMBER:
      mods=Modifiers();
    q=Clause(field);
  addClause(clauses,CONJ_NONE,mods,q);
if (mods == MOD_NONE) {
  firstQuery=q;
}
break;
default :
jj_la1[4]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
label_1: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case AND:
case OR:
case NOT:
case PLUS:
case MINUS:
case BAREOPER:
case LPAREN:
case STAR:
case QUOTED:
case TERM:
case PREFIXTERM:
case WILDTERM:
case REGEXPTERM:
case RANGEIN_START:
case RANGEEX_START:
case NUMBER:
;
break;
default :
jj_la1[5]=jj_gen;
break label_1;
}
if (jj_2_2(2)) {
MultiTerm(field,clauses);
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case AND:
case OR:
case NOT:
case PLUS:
case MINUS:
case BAREOPER:
case LPAREN:
case STAR:
case QUOTED:
case TERM:
case PREFIXTERM:
case WILDTERM:
case REGEXPTERM:
case RANGEIN_START:
case RANGEEX_START:
case NUMBER:
conj=Conjunction();
mods=Modifiers();
q=Clause(field);
addClause(clauses,conj,mods,q);
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
if (clauses.size() == 1 && firstQuery != null) {
{
if (true) return firstQuery;
}
}
 else {
{
if (true) return getBooleanQuery(clauses);
}
}
throw new Error("Missing return statement in function");
}
