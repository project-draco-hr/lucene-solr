{
  List<CloudJettyRunner> solrJetties=shardToJetty.get(shard);
  if (solrJetties == null) {
    throw new RuntimeException("shard not found:" + shard + " keys:"+ shardToJetty.keySet());
  }
  long num=-1;
  long lastNum=-1;
  String failMessage=null;
  if (verbose)   System.err.println("check const of " + shard);
  int cnt=0;
  ZkStateReader zkStateReader=cloudClient.getZkStateReader();
  assertEquals("The client count does not match up with the shard count for slice:" + shard,zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION,shard).getReplicasMap().size(),solrJetties.size());
  CloudJettyRunner lastJetty=null;
  for (  CloudJettyRunner cjetty : solrJetties) {
    ZkNodeProps props=cjetty.info;
    if (verbose)     System.err.println("client" + cnt++);
    if (verbose)     System.err.println("PROPS:" + props);
    try {
      SolrParams query=params("q","*:*","rows","0","distrib","false","tests","checkShardConsistency");
      num=cjetty.client.solrClient.query(query).getResults().getNumFound();
    }
 catch (    SolrServerException e) {
      if (verbose)       System.err.println("error contacting client: " + e.getMessage() + "\n");
      continue;
    }
catch (    SolrException e) {
      if (verbose)       System.err.println("error contacting client: " + e.getMessage() + "\n");
      continue;
    }
    boolean live=false;
    String nodeName=props.getStr(ZkStateReader.NODE_NAME_PROP);
    if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {
      live=true;
    }
    if (verbose)     System.err.println(" live:" + live);
    if (verbose)     System.err.println(" num:" + num + "\n");
    boolean active=Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;
    if (active && live) {
      if (lastNum > -1 && lastNum != num && failMessage == null) {
        failMessage=shard + " is not consistent.  Got " + lastNum+ " from "+ lastJetty.url+ "lastClient"+ " and got "+ num+ " from "+ cjetty.url;
        if (!expectFailure || verbose) {
          System.err.println("######" + failMessage);
          SolrQuery query=new SolrQuery("*:*");
          query.set("distrib",false);
          query.set("fl","id,_version_");
          query.set("rows","100000");
          query.set("sort","id asc");
          query.set("tests","checkShardConsistency/showDiff");
          SolrDocumentList lst1=lastJetty.client.solrClient.query(query).getResults();
          SolrDocumentList lst2=cjetty.client.solrClient.query(query).getResults();
          CloudInspectUtil.showDiff(lst1,lst2,lastJetty.url,cjetty.url);
        }
      }
      lastNum=num;
      lastJetty=cjetty;
    }
  }
  return failMessage;
}
