{
  ZkStateReader zkStateReader=cloudClient.getZkStateReader();
  zkStateReader.updateClusterState(true);
  cloudJettys.clear();
  shardToJetty.clear();
  ClusterState clusterState=zkStateReader.getClusterState();
  DocCollection coll=clusterState.getCollection(DEFAULT_COLLECTION);
  List<CloudSolrServerClient> theClients=new ArrayList<CloudSolrServerClient>();
  for (  SolrServer client : clients) {
    nextClient:     for (    Slice slice : coll.getSlices()) {
      for (      Replica replica : slice.getReplicas()) {
        int port=new URI(((HttpSolrServer)client).getBaseURL()).getPort();
        if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(":" + port)) {
          CloudSolrServerClient csc=new CloudSolrServerClient();
          csc.solrClient=client;
          csc.port=port;
          csc.shardName=replica.getStr(ZkStateReader.NODE_NAME_PROP);
          csc.info=replica;
          theClients.add(csc);
          break nextClient;
        }
      }
    }
  }
  for (  JettySolrRunner jetty : jettys) {
    int port=jetty.getLocalPort();
    if (port == -1) {
      throw new RuntimeException("Cannot find the port for jetty");
    }
    nextJetty:     for (    Slice slice : coll.getSlices()) {
      Set<Entry<String,Replica>> entries=slice.getReplicasMap().entrySet();
      for (      Entry<String,Replica> entry : entries) {
        Replica replica=entry.getValue();
        if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(":" + port)) {
          List<CloudJettyRunner> list=shardToJetty.get(slice.getName());
          if (list == null) {
            list=new ArrayList<CloudJettyRunner>();
            shardToJetty.put(slice.getName(),list);
          }
          boolean isLeader=slice.getLeader() == replica;
          CloudJettyRunner cjr=new CloudJettyRunner();
          cjr.jetty=jetty;
          cjr.info=replica;
          cjr.nodeName=replica.getStr(ZkStateReader.NODE_NAME_PROP);
          cjr.coreNodeName=entry.getKey();
          cjr.url=replica.getStr(ZkStateReader.BASE_URL_PROP) + "/" + replica.getStr(ZkStateReader.CORE_NAME_PROP);
          cjr.client=findClientByPort(port,theClients);
          list.add(cjr);
          if (isLeader) {
            shardToLeaderJetty.put(slice.getName(),cjr);
          }
          cloudJettys.add(cjr);
          break nextJetty;
        }
      }
    }
  }
  for (  Slice slice : coll.getSlices()) {
    List<CloudJettyRunner> jetties=shardToJetty.get(slice.getName());
    if (!allowOverSharding) {
      assertNotNull("Test setup problem: We found no jetties for shard: " + slice.getName() + " just:"+ shardToJetty.keySet(),jetties);
      assertEquals("slice:" + slice.getName(),slice.getReplicas().size(),jetties.size());
    }
  }
}
