{
  if (zkStateReader == null) {
synchronized (this) {
      if (zkStateReader != null) {
        return;
      }
      zkStateReader=new ZkStateReader(zkServer.getZkAddress(),10000,AbstractZkTestCase.TIMEOUT);
      zkStateReader.createClusterStateWatchersAndUpdate();
    }
    chaosMonkey=new ChaosMonkey(zkServer,zkStateReader,DEFAULT_COLLECTION,shardToJetty,shardToLeaderJetty);
  }
  int cnt=30;
  while (!zkStateReader.getClusterState().getCollections().contains(DEFAULT_COLLECTION)) {
    if (cnt == 0) {
      throw new RuntimeException("timeout waiting for collection1 in cluster state");
    }
    cnt--;
    Thread.sleep(500);
  }
  cnt=30;
  while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {
    if (cnt == 0) {
      throw new RuntimeException("timeout waiting for collection shards to come up");
    }
    cnt--;
    Thread.sleep(500);
  }
  if (cloudClient == null) {
synchronized (this) {
      if (cloudClient != null) {
        return;
      }
      try {
        CloudSolrServer server=new CloudSolrServer(zkServer.getZkAddress());
        server.setDefaultCollection(DEFAULT_COLLECTION);
        server.getLbServer().getHttpClient().getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,5000);
        server.getLbServer().getHttpClient().getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,15000);
        cloudClient=server;
      }
 catch (      MalformedURLException e) {
        throw new RuntimeException(e);
      }
    }
  }
}
