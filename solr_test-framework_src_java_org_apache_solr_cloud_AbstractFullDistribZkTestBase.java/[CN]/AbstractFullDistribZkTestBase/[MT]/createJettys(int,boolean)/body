{
  List<JettySolrRunner> jettys=new ArrayList<>();
  List<SolrServer> clients=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  for (int i=1; i <= numJettys; i++) {
    if (sb.length() > 0)     sb.append(',');
    int cnt=this.jettyIntCntr.incrementAndGet();
    File jettyDir=new File(TEMP_DIR,getClass().getName() + "-jetty" + cnt+ "-"+ System.currentTimeMillis());
    jettyDir.mkdirs();
    setupJettySolrHome(jettyDir);
    log.info("create jetty " + i);
    JettySolrRunner j=createJetty(jettyDir,useJettyDataDir ? getDataDir(testDir + "/jetty" + cnt) : null,null,"solrconfig.xml",null);
    jettys.add(j);
    SolrServer client=createNewSolrServer(j.getLocalPort());
    clients.add(client);
  }
  this.jettys.addAll(jettys);
  this.clients.addAll(clients);
  int numShards=getTotalReplicas(DEFAULT_COLLECTION);
  if (checkCreatedVsState) {
    int retries=0;
    while (numShards != shardCount) {
      numShards=getTotalReplicas(DEFAULT_COLLECTION);
      if (numShards == shardCount)       break;
      if (retries++ == 60) {
        printLayoutOnTearDown=true;
        fail("Shards in the state does not match what we set:" + numShards + " vs "+ shardCount);
      }
      Thread.sleep(500);
    }
    ZkStateReader zkStateReader=cloudClient.getZkStateReader();
    for (int i=1; i <= sliceCount; i++) {
      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION,"shard" + i,10000);
    }
  }
  if (numShards > 0) {
    updateMappingsFromZk(this.jettys,this.clients);
  }
  for (int i=1; i <= numJettys / 2; i++) {
    JettySolrRunner j=this.jettys.get(i);
    JettySolrRunner j2=this.jettys.get(i + (numJettys / 2 - 1));
    if (sb.length() > 0)     sb.append(',');
    sb.append(buildUrl(j.getLocalPort()));
    sb.append("|").append(buildUrl(j2.getLocalPort()));
  }
  shards=sb.toString();
  return jettys;
}
