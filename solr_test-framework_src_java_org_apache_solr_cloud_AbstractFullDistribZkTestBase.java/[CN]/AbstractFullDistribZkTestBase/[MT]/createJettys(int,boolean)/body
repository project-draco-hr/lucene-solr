{
  List<JettySolrRunner> jettys=new ArrayList<JettySolrRunner>();
  List<SolrServer> clients=new ArrayList<SolrServer>();
  StringBuilder sb=new StringBuilder();
  for (int i=1; i <= numJettys; i++) {
    if (sb.length() > 0)     sb.append(',');
    int cnt=this.jettyIntCntr.incrementAndGet();
    File jettyDir=new File(TEMP_DIR,"solrtest-" + "jetty" + cnt + "-"+ System.currentTimeMillis());
    jettyDir.mkdirs();
    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()),jettyDir);
    JettySolrRunner j=createJetty(jettyDir,testDir + "/jetty" + cnt,null,"solrconfig.xml",null);
    jettys.add(j);
    SolrServer client=createNewSolrServer(j.getLocalPort());
    clients.add(client);
  }
  initCloud();
  this.jettys.addAll(jettys);
  this.clients.addAll(clients);
  if (checkCreatedVsState) {
    int numShards=getNumShards(DEFAULT_COLLECTION);
    int retries=0;
    while (numShards != shardCount) {
      numShards=getNumShards(DEFAULT_COLLECTION);
      if (numShards == shardCount)       break;
      if (retries++ == 60) {
        printLayoutOnTearDown=true;
        fail("Shards in the state does not match what we set:" + numShards + " vs "+ shardCount);
      }
      Thread.sleep(500);
    }
    for (int i=1; i <= sliceCount; i++) {
      zkStateReader.getLeaderProps(DEFAULT_COLLECTION,"shard" + i,10000);
    }
  }
  updateMappingsFromZk(this.jettys,this.clients);
  for (int i=1; i <= numJettys / 2; i++) {
    JettySolrRunner j=this.jettys.get(i);
    JettySolrRunner j2=this.jettys.get(i + (numJettys / 2 - 1));
    if (sb.length() > 0)     sb.append(',');
    sb.append("localhost:").append(j.getLocalPort()).append(context);
    sb.append("|localhost:").append(j2.getLocalPort()).append(context);
  }
  shards=sb.toString();
  return jettys;
}
