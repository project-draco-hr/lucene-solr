{
  final RTimer timer=new RTimer();
  Map<String,Replica> notLeaders=new HashMap<>();
  ZkStateReader zkr=cloudClient.getZkStateReader();
  zkr.updateClusterState();
  ClusterState cs=zkr.getClusterState();
  Collection<Slice> slices=cs.getActiveSlices(testCollectionName);
  assertTrue(slices.size() == shards);
  boolean allReplicasUp=false;
  long waitMs=0L;
  long maxWaitMs=maxWaitSecs * 1000L;
  Replica leader=null;
  while (waitMs < maxWaitMs && !allReplicasUp) {
    if (waitMs % 2000 == 0)     cloudClient.getZkStateReader().updateClusterState();
    cs=cloudClient.getZkStateReader().getClusterState();
    assertNotNull(cs);
    Slice shard=cs.getSlice(testCollectionName,shardId);
    assertNotNull("No Slice for " + shardId,shard);
    allReplicasUp=true;
    Collection<Replica> replicas=shard.getReplicas();
    assertTrue("Did not find correct number of replicas. Expected:" + rf + " Found:"+ replicas.size(),replicas.size() == rf);
    leader=shard.getLeader();
    assertNotNull(leader);
    log.info("Found " + replicas.size() + " replicas and leader on "+ leader.getNodeName()+ " for "+ shardId+ " in "+ testCollectionName);
    for (    Replica replica : replicas) {
      if (replica.getState() != Replica.State.ACTIVE) {
        log.info("Replica {} is currently {}",replica.getName(),replica.getState());
        allReplicasUp=false;
      }
      if (!leader.equals(replica))       notLeaders.put(replica.getName(),replica);
    }
    if (!allReplicasUp) {
      try {
        Thread.sleep(500L);
      }
 catch (      Exception ignoreMe) {
      }
      waitMs+=500L;
    }
  }
  if (!allReplicasUp)   fail("Didn't see all replicas for shard " + shardId + " in "+ testCollectionName+ " come up within "+ maxWaitMs+ " ms! ClusterState: "+ printClusterStateInfo());
  if (notLeaders.isEmpty())   fail("Didn't isolate any replicas that are not the leader! ClusterState: " + printClusterStateInfo());
  log.info("Took {} ms to see all replicas become active.",timer.getTime());
  List<Replica> replicas=new ArrayList<>();
  replicas.addAll(notLeaders.values());
  return replicas;
}
