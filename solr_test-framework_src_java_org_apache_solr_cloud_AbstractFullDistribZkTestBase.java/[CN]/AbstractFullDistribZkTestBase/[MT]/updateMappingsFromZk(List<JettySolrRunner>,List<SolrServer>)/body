{
  ZkStateReader zkStateReader=cloudClient.getZkStateReader();
  zkStateReader.updateClusterState(true);
  cloudJettys.clear();
  shardToJetty.clear();
  ClusterState clusterState=zkStateReader.getClusterState();
  Map<String,Slice> slices=clusterState.getSlicesMap(DEFAULT_COLLECTION);
  if (slices == null) {
    throw new RuntimeException("No slices found for collection " + DEFAULT_COLLECTION + " in "+ clusterState.getCollections());
  }
  List<CloudSolrServerClient> theClients=new ArrayList<CloudSolrServerClient>();
  for (  SolrServer client : clients) {
    nextClient:     for (    Map.Entry<String,Slice> slice : slices.entrySet()) {
      Map<String,Replica> theShards=slice.getValue().getReplicasMap();
      for (      Map.Entry<String,Replica> shard : theShards.entrySet()) {
        int port=new URI(((HttpSolrServer)client).getBaseURL()).getPort();
        if (shard.getKey().contains(":" + port + "_")) {
          CloudSolrServerClient csc=new CloudSolrServerClient();
          csc.solrClient=client;
          csc.port=port;
          csc.shardName=shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);
          csc.info=shard.getValue();
          theClients.add(csc);
          break nextClient;
        }
      }
    }
  }
  for (  JettySolrRunner jetty : jettys) {
    int port=jetty.getLocalPort();
    if (port == -1) {
      throw new RuntimeException("Cannot find the port for jetty");
    }
    nextJetty:     for (    Map.Entry<String,Slice> slice : slices.entrySet()) {
      Map<String,Replica> theShards=slice.getValue().getReplicasMap();
      for (      Map.Entry<String,Replica> shard : theShards.entrySet()) {
        if (shard.getKey().contains(":" + port + "_")) {
          List<CloudJettyRunner> list=shardToJetty.get(slice.getKey());
          if (list == null) {
            list=new ArrayList<CloudJettyRunner>();
            shardToJetty.put(slice.getKey(),list);
          }
          boolean isLeader=shard.getValue().containsKey(ZkStateReader.LEADER_PROP);
          CloudJettyRunner cjr=new CloudJettyRunner();
          cjr.jetty=jetty;
          cjr.info=shard.getValue();
          cjr.nodeName=shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);
          cjr.coreNodeName=shard.getKey();
          cjr.url=shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + "/" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);
          cjr.client=findClientByPort(port,theClients);
          list.add(cjr);
          if (isLeader) {
            shardToLeaderJetty.put(slice.getKey(),cjr);
          }
          cloudJettys.add(cjr);
          break nextJetty;
        }
      }
    }
  }
  for (  Map.Entry<String,Slice> slice : slices.entrySet()) {
    List<CloudJettyRunner> jetties=shardToJetty.get(slice.getKey());
    assertNotNull("Test setup problem: We found no jetties for shard: " + slice.getKey() + " just:"+ shardToJetty.keySet(),jetties);
    assertEquals(slice.getValue().getReplicasMap().size(),jetties.size());
  }
}
