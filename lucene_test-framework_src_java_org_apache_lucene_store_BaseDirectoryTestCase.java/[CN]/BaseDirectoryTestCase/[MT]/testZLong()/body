{
  final long[] longs=new long[random().nextInt(10)];
  for (int i=0; i < longs.length; ++i) {
switch (random().nextInt(3)) {
case 0:
      longs[i]=random().nextLong();
    break;
case 1:
  longs[i]=random().nextBoolean() ? Long.MIN_VALUE : Long.MAX_VALUE;
break;
case 2:
longs[i]=(random().nextBoolean() ? -1 : 1) * random().nextInt(1024);
break;
default :
throw new AssertionError();
}
}
Directory dir=getDirectory(createTempDir("testZLong"));
IndexOutput output=dir.createOutput("zlong",newIOContext(random()));
for (long l : longs) {
output.writeZLong(l);
}
output.close();
IndexInput input=dir.openInput("zlong",newIOContext(random()));
for (long l : longs) {
assertEquals(l,input.readZLong());
}
assertEquals(input.length(),input.getFilePointer());
input.close();
dir.close();
}
