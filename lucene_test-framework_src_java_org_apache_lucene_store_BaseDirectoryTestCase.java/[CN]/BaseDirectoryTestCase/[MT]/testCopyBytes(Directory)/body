{
  IndexOutput out=dir.createOutput("test",newIOContext(random()));
  byte[] bytes=new byte[TestUtil.nextInt(random(),1,77777)];
  final int size=TestUtil.nextInt(random(),1,1777777);
  int upto=0;
  int byteUpto=0;
  while (upto < size) {
    bytes[byteUpto++]=value(upto);
    upto++;
    if (byteUpto == bytes.length) {
      out.writeBytes(bytes,0,bytes.length);
      byteUpto=0;
    }
  }
  out.writeBytes(bytes,0,byteUpto);
  assertEquals(size,out.getFilePointer());
  out.close();
  assertEquals(size,dir.fileLength("test"));
  final IndexInput in=dir.openInput("test",newIOContext(random()));
  out=dir.createOutput("test2",newIOContext(random()));
  upto=0;
  while (upto < size) {
    if (random().nextBoolean()) {
      out.writeByte(in.readByte());
      upto++;
    }
 else {
      final int chunk=Math.min(TestUtil.nextInt(random(),1,bytes.length),size - upto);
      out.copyBytes(in,chunk);
      upto+=chunk;
    }
  }
  assertEquals(size,upto);
  out.close();
  in.close();
  IndexInput in2=dir.openInput("test2",newIOContext(random()));
  upto=0;
  while (upto < size) {
    if (random().nextBoolean()) {
      final byte v=in2.readByte();
      assertEquals(value(upto),v);
      upto++;
    }
 else {
      final int limit=Math.min(TestUtil.nextInt(random(),1,bytes.length),size - upto);
      in2.readBytes(bytes,0,limit);
      for (int byteIdx=0; byteIdx < limit; byteIdx++) {
        assertEquals(value(upto),bytes[byteIdx]);
        upto++;
      }
    }
  }
  in2.close();
  dir.deleteFiles(Arrays.asList(new String[]{"test","test2"}));
  dir.close();
}
