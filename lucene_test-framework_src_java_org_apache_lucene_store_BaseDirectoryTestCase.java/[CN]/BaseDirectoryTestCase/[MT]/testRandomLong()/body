{
  Directory dir=getDirectory(createTempDir("testLongs"));
  IndexOutput output=dir.createOutput("longs",newIOContext(random()));
  int num=TestUtil.nextInt(random(),50,3000);
  long longs[]=new long[num];
  for (int i=0; i < longs.length; i++) {
    longs[i]=TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE);
    output.writeLong(longs[i]);
  }
  output.close();
  IndexInput input=dir.openInput("longs",newIOContext(random()));
  RandomAccessInput slice=input.randomAccessSlice(0,input.length());
  for (int i=0; i < longs.length; i++) {
    assertEquals(longs[i],slice.readLong(i * 8));
  }
  for (int i=1; i < longs.length; i++) {
    long offset=i * 8;
    RandomAccessInput subslice=input.randomAccessSlice(offset,input.length() - offset);
    for (int j=i; j < longs.length; j++) {
      assertEquals(longs[j],subslice.readLong((j - i) * 8));
    }
  }
  for (int i=0; i < 7; i++) {
    String name="longs-" + i;
    IndexOutput o=dir.createOutput(name,newIOContext(random()));
    byte junk[]=new byte[i];
    random().nextBytes(junk);
    o.writeBytes(junk,junk.length);
    input.seek(0);
    o.copyBytes(input,input.length());
    o.close();
    IndexInput padded=dir.openInput(name,newIOContext(random()));
    RandomAccessInput whole=padded.randomAccessSlice(i,padded.length() - i);
    for (int j=0; j < longs.length; j++) {
      assertEquals(longs[j],whole.readLong(j * 8));
    }
    padded.close();
  }
  input.close();
  dir.close();
}
