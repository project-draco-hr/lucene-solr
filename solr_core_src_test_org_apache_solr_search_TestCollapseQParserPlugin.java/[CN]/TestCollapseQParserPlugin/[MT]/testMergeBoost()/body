{
  Set<Integer> boosted=new HashSet();
  Set<Integer> results=new HashSet();
  for (int i=0; i < 200; i++) {
    boosted.add(random().nextInt(1000));
  }
  for (int i=0; i < 200; i++) {
    results.add(random().nextInt(1000));
  }
  int[] boostedArray=new int[boosted.size()];
  int[] resultsArray=new int[results.size()];
  Iterator<Integer> boostIt=boosted.iterator();
  int index=0;
  while (boostIt.hasNext()) {
    boostedArray[index++]=boostIt.next();
  }
  Iterator<Integer> resultsIt=results.iterator();
  index=0;
  while (resultsIt.hasNext()) {
    resultsArray[index++]=resultsIt.next();
  }
  Arrays.sort(boostedArray);
  Arrays.sort(resultsArray);
  CollapsingQParserPlugin.MergeBoost mergeBoost=new CollapsingQParserPlugin.MergeBoost(boostedArray);
  List<Integer> boostedResults=new ArrayList();
  for (int i=0; i < resultsArray.length; i++) {
    int result=resultsArray[i];
    if (mergeBoost.boost(result)) {
      boostedResults.add(result);
    }
  }
  List<Integer> controlResults=new ArrayList();
  for (int i=0; i < resultsArray.length; i++) {
    int result=resultsArray[i];
    if (Arrays.binarySearch(boostedArray,result) > -1) {
      controlResults.add(result);
    }
  }
  if (boostedResults.size() == controlResults.size()) {
    for (int i=0; i < boostedResults.size(); i++) {
      if (!boostedResults.get(i).equals(controlResults.get(i).intValue())) {
        throw new Exception("boosted results do not match control results, boostedResults size:" + boostedResults.toString() + ", controlResults size:"+ controlResults.toString());
      }
    }
  }
 else {
    throw new Exception("boosted results do not match control results, boostedResults size:" + boostedResults.toString() + ", controlResults size:"+ controlResults.toString());
  }
}
