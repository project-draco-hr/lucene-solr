{
  MiniSolrCloudCluster miniCluster=createMiniSolrCloudCluster();
  final CloudSolrClient cloudSolrClient=miniCluster.getSolrClient();
  try {
    assertNotNull(miniCluster.getZkServer());
    List<JettySolrRunner> jettys=miniCluster.getJettySolrRunners();
    assertEquals(NUM_SERVERS,jettys.size());
    for (    JettySolrRunner jetty : jettys) {
      assertTrue(jetty.isRunning());
    }
    JettySolrRunner stoppedServer=miniCluster.stopJettySolrRunner(0);
    assertTrue(stoppedServer.isStopped());
    assertEquals(NUM_SERVERS - 1,miniCluster.getJettySolrRunners().size());
    JettySolrRunner startedServer=miniCluster.startJettySolrRunner();
    assertTrue(startedServer.isRunning());
    assertEquals(NUM_SERVERS,miniCluster.getJettySolrRunners().size());
    final String asyncId=(random().nextBoolean() ? null : "asyncId(" + collectionName + ".create)="+ random().nextInt());
    createCollection(miniCluster,collectionName,null,asyncId);
    if (asyncId != null) {
      assertEquals("did not see async createCollection completion","completed",AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId,330,cloudSolrClient));
    }
    try (SolrZkClient zkClient=new SolrZkClient(miniCluster.getZkServer().getZkAddress(),AbstractZkTestCase.TIMEOUT,45000,null);ZkStateReader zkStateReader=new ZkStateReader(zkClient)){
      AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName,zkStateReader,true,true,330);
      cloudSolrClient.setDefaultCollection(collectionName);
      SolrInputDocument doc=new SolrInputDocument();
      doc.setField("id","1");
      cloudSolrClient.add(doc);
      cloudSolrClient.commit();
      SolrQuery query=new SolrQuery();
      query.setQuery("*:*");
      QueryResponse rsp=cloudSolrClient.query(query);
      assertEquals(1,rsp.getResults().getNumFound());
      zkStateReader.updateClusterState();
      ClusterState clusterState=zkStateReader.getClusterState();
      HashMap<String,JettySolrRunner> jettyMap=new HashMap<String,JettySolrRunner>();
      for (      JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {
        String key=jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + "://").length());
        jettyMap.put(key,jetty);
      }
      Collection<Slice> slices=clusterState.getSlices(collectionName);
      for (      Slice slice : slices) {
        jettyMap.remove(slice.getLeader().getNodeName().replace("_solr","/solr"));
        for (        Replica replica : slice.getReplicas()) {
          jettyMap.remove(replica.getNodeName().replace("_solr","/solr"));
        }
      }
      assertTrue("Expected to find a node without a replica",jettyMap.size() > 0);
      JettySolrRunner jettyToStop=jettyMap.entrySet().iterator().next().getValue();
      jettys=miniCluster.getJettySolrRunners();
      for (int i=0; i < jettys.size(); ++i) {
        if (jettys.get(i).equals(jettyToStop)) {
          miniCluster.stopJettySolrRunner(i);
          assertEquals(NUM_SERVERS - 1,miniCluster.getJettySolrRunners().size());
        }
      }
      startedServer=miniCluster.startJettySolrRunner();
      assertTrue(startedServer.isRunning());
      assertEquals(NUM_SERVERS,miniCluster.getJettySolrRunners().size());
      Thread.sleep(15000);
      try {
        cloudSolrClient.query(query);
        fail("Expected exception on query because collection should not be ready - we have turned on async core loading");
      }
 catch (      SolrServerException e) {
        SolrException rc=(SolrException)e.getRootCause();
        assertTrue(rc.code() >= 500 && rc.code() < 600);
      }
catch (      SolrException e) {
        assertTrue(e.code() >= 500 && e.code() < 600);
      }
      doExtraTests(miniCluster,zkClient,zkStateReader,cloudSolrClient,collectionName);
      miniCluster.deleteCollection(collectionName);
      AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,zkStateReader,true,true,330);
    }
   }
  finally {
    miniCluster.shutdown();
  }
}
