{
  assertNotNull(miniCluster.getZkServer());
  List<JettySolrRunner> jettys=miniCluster.getJettySolrRunners();
  assertEquals(NUM_SERVERS,jettys.size());
  for (  JettySolrRunner jetty : jettys) {
    assertTrue(jetty.isRunning());
  }
  JettySolrRunner stoppedServer=miniCluster.stopJettySolrRunner(0);
  assertTrue(stoppedServer.isStopped());
  assertEquals(NUM_SERVERS - 1,miniCluster.getJettySolrRunners().size());
  JettySolrRunner startedServer=miniCluster.startJettySolrRunner(null,null,null);
  assertTrue(startedServer.isRunning());
  assertEquals(NUM_SERVERS,miniCluster.getJettySolrRunners().size());
  CloudSolrServer cloudSolrServer=null;
  SolrZkClient zkClient=null;
  try {
    cloudSolrServer=new CloudSolrServer(miniCluster.getZkServer().getZkAddress(),true);
    cloudSolrServer.connect();
    zkClient=new SolrZkClient(miniCluster.getZkServer().getZkAddress(),AbstractZkTestCase.TIMEOUT,45000,null);
    String collectionName="testSolrCloudCollection";
    String configName="solrCloudCollectionConfig";
    System.setProperty("solr.tests.mergePolicy","org.apache.lucene.index.TieredMergePolicy");
    uploadConfigToZk(SolrTestCaseJ4.TEST_HOME() + File.separator + "collection1"+ File.separator+ "conf",configName);
    createCollection(cloudSolrServer,collectionName,NUM_SHARDS,REPLICATION_FACTOR,configName);
    cloudSolrServer.setDefaultCollection(collectionName);
    SolrInputDocument doc=new SolrInputDocument();
    doc.setField("id","1");
    cloudSolrServer.add(doc);
    cloudSolrServer.commit();
    SolrQuery query=new SolrQuery();
    query.setQuery("*:*");
    QueryResponse rsp=cloudSolrServer.query(query);
    assertEquals(1,rsp.getResults().getNumFound());
    ZkStateReader zkStateReader=new ZkStateReader(zkClient);
    zkStateReader.updateClusterState(true);
    ClusterState clusterState=zkStateReader.getClusterState();
    HashMap<String,JettySolrRunner> jettyMap=new HashMap<String,JettySolrRunner>();
    for (    JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {
      String key=jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + "://").length());
      jettyMap.put(key,jetty);
    }
    Collection<Slice> slices=clusterState.getSlices(collectionName);
    for (    Slice slice : slices) {
      jettyMap.remove(slice.getLeader().getNodeName().replace("_solr","/solr"));
      for (      Replica replica : slice.getReplicas()) {
        jettyMap.remove(replica.getNodeName().replace("_solr","/solr"));
      }
    }
    assertTrue("Expected to find a node without a replica",jettyMap.size() > 0);
    JettySolrRunner jettyToStop=jettyMap.entrySet().iterator().next().getValue();
    jettys=miniCluster.getJettySolrRunners();
    for (int i=0; i < jettys.size(); ++i) {
      if (jettys.get(i).equals(jettyToStop)) {
        miniCluster.stopJettySolrRunner(i);
        assertEquals(NUM_SERVERS - 1,miniCluster.getJettySolrRunners().size());
      }
    }
  }
  finally {
    if (cloudSolrServer != null) {
      cloudSolrServer.shutdown();
    }
    if (zkClient != null) {
      zkClient.close();
    }
  }
}
