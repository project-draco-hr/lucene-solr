{
  final String collectionName="testSolrCloudCollectionWithoutCores";
  final MiniSolrCloudCluster miniCluster=createMiniSolrCloudCluster();
  final CloudSolrClient cloudSolrClient=miniCluster.getSolrClient();
  try {
    assertNotNull(miniCluster.getZkServer());
    assertFalse(miniCluster.getJettySolrRunners().isEmpty());
    final String asyncId=(random().nextBoolean() ? null : "asyncId(" + collectionName + ".create)="+ random().nextInt());
    createCollection(miniCluster,collectionName,OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY,asyncId,null,null);
    try (SolrZkClient zkClient=new SolrZkClient(miniCluster.getZkServer().getZkAddress(),AbstractZkTestCase.TIMEOUT,AbstractZkTestCase.TIMEOUT,null);ZkStateReader zkStateReader=new ZkStateReader(zkClient)){
      zkStateReader.createClusterStateWatchersAndUpdate();
      AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName,zkStateReader,true,true,330);
{
        int coreCount=0;
        for (        Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {
          coreCount+=entry.getValue().getReplicasMap().entrySet().size();
        }
        assertEquals(0,coreCount);
      }
    }
   }
  finally {
    miniCluster.shutdown();
  }
}
