{
  final String collectionName="testSegmentTerminateEarlyCollection";
  final SegmentTerminateEarlyTestState tstes=new SegmentTerminateEarlyTestState();
  File solrXml=new File(SolrTestCaseJ4.TEST_HOME(),"solr.xml");
  Builder jettyConfig=JettyConfig.builder();
  jettyConfig.waitForLoadingCoresToFinish(null);
  final MiniSolrCloudCluster miniCluster=createMiniSolrCloudCluster();
  final CloudSolrClient cloudSolrClient=miniCluster.getSolrClient();
  cloudSolrClient.setDefaultCollection(collectionName);
  try {
{
      final String asyncId=(random().nextBoolean() ? null : "asyncId(" + collectionName + ".create)="+ random().nextInt());
      final Map<String,String> collectionProperties=new HashMap<>();
      collectionProperties.put(CoreDescriptor.CORE_CONFIG,"solrconfig-sortingmergepolicyfactory.xml");
      createCollection(miniCluster,collectionName,null,asyncId,Boolean.TRUE,collectionProperties);
      if (asyncId != null) {
        final RequestStatusState state=AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId,330,cloudSolrClient);
        assertSame("did not see async createCollection completion",RequestStatusState.COMPLETED,state);
      }
    }
    ZkStateReader zkStateReader=cloudSolrClient.getZkStateReader();
    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName,zkStateReader,true,true,330);
    tstes.addDocuments(cloudSolrClient,10,10,true);
    tstes.queryTimestampDescending(cloudSolrClient);
    tstes.addDocuments(cloudSolrClient,2,10,false);
    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);
    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);
    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);
    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient);
    miniCluster.deleteCollection(collectionName);
    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,zkStateReader,true,true,330);
  }
  finally {
    miniCluster.shutdown();
  }
}
