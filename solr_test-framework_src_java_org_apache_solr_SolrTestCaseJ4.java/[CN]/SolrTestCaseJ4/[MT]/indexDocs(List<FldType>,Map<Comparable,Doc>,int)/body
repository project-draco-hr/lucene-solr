{
  if (model == null) {
    model=new LinkedHashMap<Comparable,Doc>();
  }
  int commitOneOutOf=Math.max(nDocs / 10,10);
  for (int i=0; i < nDocs; i++) {
    Doc doc=createDoc(descriptor);
    updateJ(toJSON(doc),null);
    model.put(doc.id,doc);
    if (random().nextInt(commitOneOutOf) == 0) {
      assertU(commit());
    }
    if (random().nextInt(10) == 0) {
      updateJ(toJSON(doc),null);
      model.put(doc.id,doc);
    }
  }
  if (random().nextInt(10) == 0) {
    assertU(optimize());
  }
 else {
    if (random().nextInt(10) == 0) {
      assertU(commit());
    }
 else {
      assertU(commit("softCommit","true"));
    }
  }
  String responseStr=h.query(req("q","*:*","fl","id","sort","_docid_ asc","rows",Integer.toString(model.size() * 2),"wt","json","indent","true"));
  Object response=ObjectBuilder.fromJSON(responseStr);
  response=((Map)response).get("response");
  response=((Map)response).get("docs");
  List<Map> docList=(List<Map>)response;
  int order=0;
  for (  Map doc : docList) {
    Object id=doc.get("id");
    Doc modelDoc=model.get(id);
    if (modelDoc == null)     continue;
    modelDoc.order=order++;
  }
  assertEquals(order,model.size());
  return model;
}
