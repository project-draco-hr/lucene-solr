{
  try {
    deleteCore();
    resetExceptionIgnores();
    if (suiteFailureMarker.wasSuccessful()) {
      if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {
        endTrackingSearchers(120,false);
        String orr=ObjectReleaseTracker.clearObjectTrackerAndCheckEmpty(30);
        assertNull(orr,orr);
      }
 else {
        endTrackingSearchers(15,false);
        String orr=ObjectReleaseTracker.checkEmpty();
        if (orr != null) {
          log.warn("Some resources were not closed, shutdown, or released. This has been ignored due to the SuppressObjectReleaseTracker annotation, trying to close them now.");
          ObjectReleaseTracker.tryClose();
        }
      }
    }
    resetFactory();
    coreName=DEFAULT_TEST_CORENAME;
  }
  finally {
    ObjectReleaseTracker.clear();
    TestInjection.reset();
    initCoreDataDir=null;
    System.clearProperty("zookeeper.forceSync");
    System.clearProperty("jetty.testMode");
    System.clearProperty("tests.shardhandler.randomSeed");
    System.clearProperty("enable.update.log");
    System.clearProperty("useCompoundFile");
    System.clearProperty("urlScheme");
    System.clearProperty("solr.peerSync.useRangeVersions");
    HttpClientUtil.resetHttpClientBuilder();
    sslConfig=null;
    testSolrHome=null;
  }
  IpTables.unblockAllPorts();
  LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);
  savedClassLogLevels.clear();
}
