{
  String test1="eating chocolate in a computer lab";
  String test2="computer in a computer lab";
  String test3="a chocolate lab grows old";
  String test4="eating chocolate with a chocolate lab in an old chocolate colored computer lab";
  Map test4Map=new HashMap();
  test4Map.put("chocolate",new Integer(3));
  test4Map.put("lab",new Integer(2));
  test4Map.put("eating",new Integer(1));
  test4Map.put("computer",new Integer(1));
  test4Map.put("with",new Integer(1));
  test4Map.put("a",new Integer(1));
  test4Map.put("colored",new Integer(1));
  test4Map.put("in",new Integer(1));
  test4Map.put("an",new Integer(1));
  test4Map.put("computer",new Integer(1));
  test4Map.put("old",new Integer(1));
  Document testDoc1=new Document();
  setupDoc(testDoc1,test1);
  Document testDoc2=new Document();
  setupDoc(testDoc2,test2);
  Document testDoc3=new Document();
  setupDoc(testDoc3,test3);
  Document testDoc4=new Document();
  setupDoc(testDoc4,test4);
  Directory dir=new MockRAMDirectory();
  try {
    IndexWriter writer=new IndexWriter(dir,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED);
    assertTrue(writer != null);
    writer.addDocument(testDoc1);
    writer.addDocument(testDoc2);
    writer.addDocument(testDoc3);
    writer.addDocument(testDoc4);
    writer.close();
    IndexSearcher knownSearcher=new IndexSearcher(dir,true);
    TermEnum termEnum=knownSearcher.reader.terms();
    TermDocs termDocs=knownSearcher.reader.termDocs();
    Similarity sim=knownSearcher.getSimilarity();
    while (termEnum.next() == true) {
      Term term=termEnum.term();
      termDocs.seek(term);
      while (termDocs.next()) {
        int docId=termDocs.doc();
        int freq=termDocs.freq();
        TermFreqVector vector=knownSearcher.reader.getTermFreqVector(docId,"field");
        float tf=sim.tf(freq);
        float idf=sim.idf(term,knownSearcher);
        float lNorm=sim.lengthNorm("field",vector.getTerms().length);
        assertTrue(vector != null);
        String[] vTerms=vector.getTerms();
        int[] freqs=vector.getTermFrequencies();
        for (int i=0; i < vTerms.length; i++) {
          if (term.text().equals(vTerms[i])) {
            assertTrue(freqs[i] == freq);
          }
        }
      }
    }
    Query query=new TermQuery(new Term("field","chocolate"));
    ScoreDoc[] hits=knownSearcher.search(query,null,1000).scoreDocs;
    assertTrue(hits.length == 3);
    float score=hits[0].score;
    assertTrue(hits[0].doc == 2);
    assertTrue(hits[1].doc == 3);
    assertTrue(hits[2].doc == 0);
    TermFreqVector vector=knownSearcher.reader.getTermFreqVector(hits[1].doc,"field");
    assertTrue(vector != null);
    String[] terms=vector.getTerms();
    int[] freqs=vector.getTermFrequencies();
    assertTrue(terms != null && terms.length == 10);
    for (int i=0; i < terms.length; i++) {
      String term=terms[i];
      int freq=freqs[i];
      assertTrue(test4.indexOf(term) != -1);
      Integer freqInt=(Integer)test4Map.get(term);
      assertTrue(freqInt != null);
      assertTrue(freqInt.intValue() == freq);
    }
    SortedTermVectorMapper mapper=new SortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());
    knownSearcher.reader.getTermFreqVector(hits[1].doc,mapper);
    SortedSet vectorEntrySet=mapper.getTermVectorEntrySet();
    assertTrue("mapper.getTermVectorEntrySet() Size: " + vectorEntrySet.size() + " is not: "+ 10,vectorEntrySet.size() == 10);
    TermVectorEntry last=null;
    for (Iterator iterator=vectorEntrySet.iterator(); iterator.hasNext(); ) {
      TermVectorEntry tve=(TermVectorEntry)iterator.next();
      if (tve != null && last != null) {
        assertTrue("terms are not properly sorted",last.getFrequency() >= tve.getFrequency());
        Integer expectedFreq=(Integer)test4Map.get(tve.getTerm());
        assertTrue("Frequency is not correct:",tve.getFrequency() == 2 * expectedFreq.intValue());
      }
      last=tve;
    }
    FieldSortedTermVectorMapper fieldMapper=new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());
    knownSearcher.reader.getTermFreqVector(hits[1].doc,fieldMapper);
    Map map=fieldMapper.getFieldToTerms();
    assertTrue("map Size: " + map.size() + " is not: "+ 2,map.size() == 2);
    vectorEntrySet=(SortedSet)map.get("field");
    assertTrue("vectorEntrySet is null and it shouldn't be",vectorEntrySet != null);
    assertTrue("vectorEntrySet Size: " + vectorEntrySet.size() + " is not: "+ 10,vectorEntrySet.size() == 10);
    knownSearcher.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    assertTrue(false);
  }
}
