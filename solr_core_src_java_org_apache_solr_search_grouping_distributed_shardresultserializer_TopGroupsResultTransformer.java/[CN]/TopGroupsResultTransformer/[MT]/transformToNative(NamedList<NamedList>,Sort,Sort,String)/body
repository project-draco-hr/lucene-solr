{
  Map<String,Object> result=new HashMap<>();
  final IndexSchema schema=rb.req.getSearcher().getSchema();
  for (  Map.Entry<String,NamedList> entry : shardResponse) {
    String key=entry.getKey();
    NamedList commandResult=entry.getValue();
    Integer totalGroupedHitCount=(Integer)commandResult.get("totalGroupedHitCount");
    Integer totalHits=(Integer)commandResult.get("totalHits");
    if (totalHits != null) {
      Integer matches=(Integer)commandResult.get("matches");
      Float maxScore=(Float)commandResult.get("maxScore");
      if (maxScore == null) {
        maxScore=Float.NaN;
      }
      @SuppressWarnings("unchecked") List<NamedList<Object>> documents=(List<NamedList<Object>>)commandResult.get("documents");
      ScoreDoc[] scoreDocs=new ScoreDoc[documents.size()];
      int j=0;
      for (      NamedList<Object> document : documents) {
        Object docId=document.get("id");
        Object uniqueId=null;
        if (docId != null)         uniqueId=docId.toString();
 else         log.warn("doc {} has null 'id'",document);
        Float score=(Float)document.get("score");
        if (score == null) {
          score=Float.NaN;
        }
        Object[] sortValues=null;
        Object sortValuesVal=document.get("sortValues");
        if (sortValuesVal != null) {
          sortValues=((List)sortValuesVal).toArray();
          for (int k=0; k < sortValues.length; k++) {
            SchemaField field=groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;
            if (field != null) {
              FieldType fieldType=field.getType();
              if (sortValues[k] != null) {
                sortValues[k]=fieldType.unmarshalSortValue(sortValues[k]);
              }
            }
          }
        }
 else {
          log.warn("doc {} has null 'sortValues'",document);
        }
        scoreDocs[j++]=new ShardDoc(score,sortValues,uniqueId,shard);
      }
      final TopDocs topDocs;
      if (sortWithinGroup == null) {
        topDocs=new TopDocs(totalHits,scoreDocs,maxScore);
      }
 else {
        topDocs=new TopFieldDocs(totalHits,scoreDocs,sortWithinGroup.getSort(),maxScore);
      }
      result.put(key,new QueryCommandResult(topDocs,matches));
      continue;
    }
    Integer totalHitCount=(Integer)commandResult.get("totalHitCount");
    List<GroupDocs<BytesRef>> groupDocs=new ArrayList<>();
    for (int i=2; i < commandResult.size(); i++) {
      String groupValue=commandResult.getName(i);
      @SuppressWarnings("unchecked") NamedList<Object> groupResult=(NamedList<Object>)commandResult.getVal(i);
      Integer totalGroupHits=(Integer)groupResult.get("totalHits");
      Float maxScore=(Float)groupResult.get("maxScore");
      if (maxScore == null) {
        maxScore=Float.NaN;
      }
      @SuppressWarnings("unchecked") List<NamedList<Object>> documents=(List<NamedList<Object>>)groupResult.get("documents");
      ScoreDoc[] scoreDocs=new ScoreDoc[documents.size()];
      int j=0;
      for (      NamedList<Object> document : documents) {
        Object uniqueId=document.get("id").toString();
        Float score=(Float)document.get("score");
        if (score == null) {
          score=Float.NaN;
        }
        Object[] sortValues=((List)document.get("sortValues")).toArray();
        for (int k=0; k < sortValues.length; k++) {
          SchemaField field=sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;
          if (field != null) {
            FieldType fieldType=field.getType();
            if (sortValues[k] != null) {
              sortValues[k]=fieldType.unmarshalSortValue(sortValues[k]);
            }
          }
        }
        scoreDocs[j++]=new ShardDoc(score,sortValues,uniqueId,shard);
      }
      BytesRef groupValueRef=groupValue != null ? new BytesRef(groupValue) : null;
      groupDocs.add(new GroupDocs<>(Float.NaN,maxScore,totalGroupHits,scoreDocs,groupValueRef,null));
    }
    @SuppressWarnings("unchecked") GroupDocs<BytesRef>[] groupDocsArr=groupDocs.toArray(new GroupDocs[groupDocs.size()]);
    TopGroups<BytesRef> topGroups=new TopGroups<>(groupSort.getSort(),sortWithinGroup.getSort(),totalHitCount,totalGroupedHitCount,groupDocsArr,Float.NaN);
    result.put(key,topGroups);
  }
  return result;
}
