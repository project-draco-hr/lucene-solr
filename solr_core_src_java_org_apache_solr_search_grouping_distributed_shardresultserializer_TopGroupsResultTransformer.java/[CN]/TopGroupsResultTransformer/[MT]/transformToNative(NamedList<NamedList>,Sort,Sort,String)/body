{
  Map<String,Object> result=new HashMap<>();
  final IndexSchema schema=rb.req.getSearcher().getSchema();
  for (  Map.Entry<String,NamedList> entry : shardResponse) {
    String key=entry.getKey();
    NamedList commandResult=entry.getValue();
    Integer totalGroupedHitCount=(Integer)commandResult.get("totalGroupedHitCount");
    Integer totalHits=(Integer)commandResult.get("totalHits");
    if (totalHits != null) {
      Integer matches=(Integer)commandResult.get("matches");
      Float maxScore=(Float)commandResult.get("maxScore");
      if (maxScore == null) {
        maxScore=Float.NaN;
      }
      @SuppressWarnings("unchecked") List<NamedList<Object>> documents=(List<NamedList<Object>>)commandResult.get("documents");
      ScoreDoc[] scoreDocs=transformToNativeShardDoc(documents,groupSort,shard,schema);
      final TopDocs topDocs;
      if (sortWithinGroup.equals(Sort.RELEVANCE)) {
        topDocs=new TopDocs(totalHits,scoreDocs,maxScore);
      }
 else {
        topDocs=new TopFieldDocs(totalHits,scoreDocs,sortWithinGroup.getSort(),maxScore);
      }
      result.put(key,new QueryCommandResult(topDocs,matches));
      continue;
    }
    Integer totalHitCount=(Integer)commandResult.get("totalHitCount");
    List<GroupDocs<BytesRef>> groupDocs=new ArrayList<>();
    for (int i=2; i < commandResult.size(); i++) {
      String groupValue=commandResult.getName(i);
      @SuppressWarnings("unchecked") NamedList<Object> groupResult=(NamedList<Object>)commandResult.getVal(i);
      Integer totalGroupHits=(Integer)groupResult.get("totalHits");
      Float maxScore=(Float)groupResult.get("maxScore");
      if (maxScore == null) {
        maxScore=Float.NaN;
      }
      @SuppressWarnings("unchecked") List<NamedList<Object>> documents=(List<NamedList<Object>>)groupResult.get("documents");
      ScoreDoc[] scoreDocs=transformToNativeShardDoc(documents,groupSort,shard,schema);
      BytesRef groupValueRef=groupValue != null ? new BytesRef(groupValue) : null;
      groupDocs.add(new GroupDocs<>(Float.NaN,maxScore,totalGroupHits,scoreDocs,groupValueRef,null));
    }
    @SuppressWarnings("unchecked") GroupDocs<BytesRef>[] groupDocsArr=groupDocs.toArray(new GroupDocs[groupDocs.size()]);
    TopGroups<BytesRef> topGroups=new TopGroups<>(groupSort.getSort(),sortWithinGroup.getSort(),totalHitCount,totalGroupedHitCount,groupDocsArr,Float.NaN);
    result.put(key,topGroups);
  }
  return result;
}
