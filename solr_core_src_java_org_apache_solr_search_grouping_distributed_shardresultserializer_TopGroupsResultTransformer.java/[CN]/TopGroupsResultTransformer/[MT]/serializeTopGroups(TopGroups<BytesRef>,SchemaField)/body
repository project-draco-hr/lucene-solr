{
  NamedList<Object> result=new NamedList<>();
  result.add("totalGroupedHitCount",data.totalGroupedHitCount);
  result.add("totalHitCount",data.totalHitCount);
  if (data.totalGroupCount != null) {
    result.add("totalGroupCount",data.totalGroupCount);
  }
  final IndexSchema schema=rb.req.getSearcher().getSchema();
  SchemaField uniqueField=schema.getUniqueKeyField();
  for (  GroupDocs<BytesRef> searchGroup : data.groups) {
    NamedList<Object> groupResult=new NamedList<>();
    groupResult.add("totalHits",searchGroup.totalHits);
    if (!Float.isNaN(searchGroup.maxScore)) {
      groupResult.add("maxScore",searchGroup.maxScore);
    }
    List<NamedList<Object>> documents=new ArrayList<>();
    for (int i=0; i < searchGroup.scoreDocs.length; i++) {
      NamedList<Object> document=new NamedList<>();
      documents.add(document);
      Document doc=retrieveDocument(uniqueField,searchGroup.scoreDocs[i].doc);
      document.add("id",uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));
      if (!Float.isNaN(searchGroup.scoreDocs[i].score)) {
        document.add("score",searchGroup.scoreDocs[i].score);
      }
      if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {
        continue;
      }
      FieldDoc fieldDoc=(FieldDoc)searchGroup.scoreDocs[i];
      Object[] convertedSortValues=new Object[fieldDoc.fields.length];
      for (int j=0; j < fieldDoc.fields.length; j++) {
        Object sortValue=fieldDoc.fields[j];
        Sort sortWithinGroup=rb.getGroupingSpec().getSortWithinGroup();
        SchemaField field=sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;
        if (field != null) {
          FieldType fieldType=field.getType();
          if (sortValue != null) {
            sortValue=fieldType.marshalSortValue(sortValue);
          }
        }
        convertedSortValues[j]=sortValue;
      }
      document.add("sortValues",convertedSortValues);
    }
    groupResult.add("documents",documents);
    String groupValue=searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()) : null;
    result.add(groupValue,groupResult);
  }
  return result;
}
