{
  Directory dir=newDirectory();
  Analyzer analyzer=new MockAnalyzer(random());
  RandomIndexWriter w=new RandomIndexWriter(random(),dir,newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()));
  List<List<String>> docs=new ArrayList<>();
  Document d=new Document();
  Field f=newTextField("f","",Field.Store.NO);
  d.add(f);
  Random r=random();
  int NUM_DOCS=atLeast(10);
  for (int i=0; i < NUM_DOCS; i++) {
    int termCount=TestUtil.nextInt(random(),4097,8200);
    List<String> doc=new ArrayList<>();
    StringBuilder sb=new StringBuilder();
    while (doc.size() < termCount) {
      if (r.nextInt(5) == 1 || docs.size() == 0) {
        String term;
        while (true) {
          term=TestUtil.randomUnicodeString(r);
          if (term.length() > 0) {
            break;
          }
        }
        try (TokenStream ts=analyzer.tokenStream("ignore",term)){
          CharTermAttribute termAttr=ts.addAttribute(CharTermAttribute.class);
          ts.reset();
          while (ts.incrementToken()) {
            String text=termAttr.toString();
            doc.add(text);
            sb.append(text).append(' ');
          }
          ts.end();
        }
       }
 else {
        List<String> lastDoc=docs.get(r.nextInt(docs.size()));
        int len=TestUtil.nextInt(r,1,10);
        int start=r.nextInt(lastDoc.size() - len);
        for (int k=start; k < start + len; k++) {
          String t=lastDoc.get(k);
          doc.add(t);
          sb.append(t).append(' ');
        }
      }
    }
    docs.add(doc);
    f.setStringValue(sb.toString());
    w.addDocument(d);
  }
  IndexReader reader=w.getReader();
  IndexSearcher s=newSearcher(reader);
  w.close();
  int num=atLeast(10);
  for (int i=0; i < num; i++) {
    int docID=r.nextInt(docs.size());
    List<String> doc=docs.get(docID);
    final int numTerm=TestUtil.nextInt(r,2,20);
    final int start=r.nextInt(doc.size() - numTerm);
    PhraseQuery.Builder builder=new PhraseQuery.Builder();
    StringBuilder sb=new StringBuilder();
    for (int t=start; t < start + numTerm; t++) {
      builder.add(new Term("f",doc.get(t)),t);
      sb.append(doc.get(t)).append(' ');
    }
    PhraseQuery pq=builder.build();
    TopDocs hits=s.search(pq,NUM_DOCS);
    boolean found=false;
    for (int j=0; j < hits.scoreDocs.length; j++) {
      if (hits.scoreDocs[j].doc == docID) {
        found=true;
        break;
      }
    }
    assertTrue("phrase '" + sb + "' not found; start="+ start+ ", it="+ i+ ", expected doc "+ docID,found);
  }
  reader.close();
  dir.close();
}
