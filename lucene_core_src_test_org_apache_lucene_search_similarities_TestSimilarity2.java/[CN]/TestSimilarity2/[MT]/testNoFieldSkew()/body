{
  Directory dir=newDirectory();
  IndexWriterConfig iwConfig=newIndexWriterConfig().setMergePolicy(newLogMergePolicy());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwConfig);
  Document doc=new Document();
  doc.add(newTextField("foo","bar baz somethingelse",Field.Store.NO));
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  IndexSearcher is=newSearcher(ir);
  BooleanQuery.Builder queryBuilder=new BooleanQuery.Builder();
  queryBuilder.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);
  queryBuilder.add(new TermQuery(new Term("foo","baz")),BooleanClause.Occur.SHOULD);
  Query query=queryBuilder.build();
  List<Explanation> scores=new ArrayList<>();
  for (  Similarity sim : sims) {
    is.setSimilarity(sim);
    scores.add(is.explain(query,0));
  }
  ir.close();
  int numExtraDocs=TestUtil.nextInt(random(),1,1000);
  for (int i=0; i < numExtraDocs; i++) {
    iw.addDocument(new Document());
  }
  ir=iw.getReader();
  is=newSearcher(ir);
  for (int i=0; i < sims.size(); i++) {
    is.setSimilarity(sims.get(i));
    Explanation expected=scores.get(i);
    Explanation actual=is.explain(query,0);
    assertEquals(sims.get(i).toString() + ": actual=" + actual+ ",expected="+ expected,expected.getValue(),actual.getValue(),0F);
  }
  iw.close();
  ir.close();
  dir.close();
}
