{
  for (int i=0; i < iterations; ++i) {
    final long byte0=blocks[blocksOffset++] & 0xFF;
    final long byte1=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=(byte0 << 7) | (byte1 >>> 1);
    final long byte2=blocks[blocksOffset++] & 0xFF;
    final long byte3=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte1 & 1) << 14) | (byte2 << 6) | (byte3 >>> 2);
    final long byte4=blocks[blocksOffset++] & 0xFF;
    final long byte5=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte3 & 3) << 13) | (byte4 << 5) | (byte5 >>> 3);
    final long byte6=blocks[blocksOffset++] & 0xFF;
    final long byte7=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte5 & 7) << 12) | (byte6 << 4) | (byte7 >>> 4);
    final long byte8=blocks[blocksOffset++] & 0xFF;
    final long byte9=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte7 & 15) << 11) | (byte8 << 3) | (byte9 >>> 5);
    final long byte10=blocks[blocksOffset++] & 0xFF;
    final long byte11=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte9 & 31) << 10) | (byte10 << 2) | (byte11 >>> 6);
    final long byte12=blocks[blocksOffset++] & 0xFF;
    final long byte13=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte11 & 63) << 9) | (byte12 << 1) | (byte13 >>> 7);
    final long byte14=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte13 & 127) << 8) | byte14;
  }
}
