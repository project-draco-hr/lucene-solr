{
  if (utf32.isSingleton()) {
    utf32=utf32.cloneExpanded();
  }
  State[] map=new State[utf32.getNumberedStates().length];
  List<State> pending=new ArrayList<>();
  State utf32State=utf32.getInitialState();
  pending.add(utf32State);
  Automaton utf8=new Automaton();
  utf8.setDeterministic(false);
  State utf8State=utf8.getInitialState();
  utf8States=new State[5];
  utf8StateCount=0;
  utf8State.number=utf8StateCount;
  utf8States[utf8StateCount]=utf8State;
  utf8StateCount++;
  utf8State.setAccept(utf32State.isAccept());
  map[utf32State.number]=utf8State;
  while (pending.size() != 0) {
    utf32State=pending.remove(pending.size() - 1);
    utf8State=map[utf32State.number];
    for (int i=0; i < utf32State.numTransitions; i++) {
      final Transition t=utf32State.transitionsArray[i];
      final State destUTF32=t.to;
      State destUTF8=map[destUTF32.number];
      if (destUTF8 == null) {
        destUTF8=newUTF8State();
        destUTF8.accept=destUTF32.accept;
        map[destUTF32.number]=destUTF8;
        pending.add(destUTF32);
      }
      convertOneEdge(utf8State,destUTF8,t.min,t.max);
    }
  }
  utf8.setNumberedStates(utf8States,utf8StateCount);
  return utf8;
}
