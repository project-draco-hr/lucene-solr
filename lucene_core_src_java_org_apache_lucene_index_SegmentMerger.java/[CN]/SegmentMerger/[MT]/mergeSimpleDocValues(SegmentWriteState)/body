{
  if (codec.simpleDocValuesFormat() != null) {
    SimpleDVConsumer consumer=codec.simpleDocValuesFormat().fieldsConsumer(segmentWriteState);
    boolean success=false;
    try {
      for (      FieldInfo field : mergeState.fieldInfos) {
        DocValues.Type type=field.getDocValuesType();
        if (type != null) {
          if (DocValues.isNumber(type) || DocValues.isFloat(type)) {
            List<NumericDocValues> toMerge=new ArrayList<NumericDocValues>();
            for (            AtomicReader reader : mergeState.readers) {
              NumericDocValues values=reader.getNumericDocValues(field.name);
              if (values == null) {
                values=new NumericDocValues.EMPTY(reader.maxDoc());
              }
              toMerge.add(values);
            }
            consumer.mergeNumericField(field,mergeState,toMerge);
          }
 else           if (DocValues.isBytes(type)) {
            List<BinaryDocValues> toMerge=new ArrayList<BinaryDocValues>();
            for (            AtomicReader reader : mergeState.readers) {
              BinaryDocValues values=reader.getBinaryDocValues(field.name);
              if (values == null) {
                values=new BinaryDocValues.EMPTY(reader.maxDoc());
              }
              toMerge.add(values);
            }
            consumer.mergeBinaryField(field,mergeState,toMerge);
          }
 else           if (DocValues.isSortedBytes(type)) {
            List<SortedDocValues> toMerge=new ArrayList<SortedDocValues>();
            for (            AtomicReader reader : mergeState.readers) {
              SortedDocValues values=reader.getSortedDocValues(field.name);
              if (values == null) {
                values=new SortedDocValues.EMPTY(reader.maxDoc());
              }
              toMerge.add(values);
            }
            consumer.mergeSortedField(field,mergeState,toMerge);
          }
 else {
            throw new AssertionError("type=" + type);
          }
        }
      }
      success=true;
    }
  finally {
      if (success) {
        IOUtils.close(consumer);
      }
 else {
        IOUtils.closeWhileHandlingException(consumer);
      }
    }
  }
}
