{
  DocValuesConsumer consumer=codec.docValuesFormat().fieldsConsumer(segmentWriteState);
  boolean success=false;
  try {
    for (    FieldInfo field : mergeState.fieldInfos) {
      DocValuesType type=field.getDocValuesType();
      if (type != null) {
        if (type == DocValuesType.NUMERIC) {
          List<NumericDocValues> toMerge=new ArrayList<NumericDocValues>();
          for (          AtomicReader reader : mergeState.readers) {
            NumericDocValues values=reader.getNumericDocValues(field.name);
            if (values == null) {
              values=NumericDocValues.EMPTY;
            }
            toMerge.add(values);
          }
          consumer.mergeNumericField(field,mergeState,toMerge);
        }
 else         if (type == DocValuesType.BINARY) {
          List<BinaryDocValues> toMerge=new ArrayList<BinaryDocValues>();
          for (          AtomicReader reader : mergeState.readers) {
            BinaryDocValues values=reader.getBinaryDocValues(field.name);
            if (values == null) {
              values=BinaryDocValues.EMPTY;
            }
            toMerge.add(values);
          }
          consumer.mergeBinaryField(field,mergeState,toMerge);
        }
 else         if (type == DocValuesType.SORTED) {
          List<SortedDocValues> toMerge=new ArrayList<SortedDocValues>();
          for (          AtomicReader reader : mergeState.readers) {
            SortedDocValues values=reader.getSortedDocValues(field.name);
            if (values == null) {
              values=SortedDocValues.EMPTY;
            }
            toMerge.add(values);
          }
          consumer.mergeSortedField(field,mergeState,toMerge);
        }
 else         if (type == DocValuesType.SORTED_SET) {
          List<SortedSetDocValues> toMerge=new ArrayList<SortedSetDocValues>();
          for (          AtomicReader reader : mergeState.readers) {
            SortedSetDocValues values=reader.getSortedSetDocValues(field.name);
            if (values == null) {
              values=SortedSetDocValues.EMPTY;
            }
            toMerge.add(values);
          }
          consumer.mergeSortedSetField(field,mergeState,toMerge);
        }
 else {
          throw new AssertionError("type=" + type);
        }
      }
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(consumer);
    }
 else {
      IOUtils.closeWhileHandlingException(consumer);
    }
  }
}
