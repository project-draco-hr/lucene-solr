{
  List<LightAutomaton> list;
  LightAutomaton a=null;
switch (kind) {
case REGEXP_UNION:
    list=new ArrayList<>();
  findLeaves(exp1,Kind.REGEXP_UNION,list,automata,automaton_provider);
findLeaves(exp2,Kind.REGEXP_UNION,list,automata,automaton_provider);
a=BasicOperations.unionLight(list);
MinimizationOperationsLight.minimize(a);
break;
case REGEXP_CONCATENATION:
list=new ArrayList<>();
findLeaves(exp1,Kind.REGEXP_CONCATENATION,list,automata,automaton_provider);
findLeaves(exp2,Kind.REGEXP_CONCATENATION,list,automata,automaton_provider);
a=BasicOperations.concatenateLight(list);
MinimizationOperationsLight.minimize(a);
break;
case REGEXP_INTERSECTION:
a=BasicOperations.intersectionLight(exp1.toLightAutomaton(automata,automaton_provider),exp2.toLightAutomaton(automata,automaton_provider));
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_OPTIONAL:
a=BasicOperations.optionalLight(exp1.toLightAutomaton(automata,automaton_provider));
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_REPEAT:
a=BasicOperations.repeatLight(exp1.toLightAutomaton(automata,automaton_provider));
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_REPEAT_MIN:
a=BasicOperations.repeatLight(exp1.toLightAutomaton(automata,automaton_provider),min);
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_REPEAT_MINMAX:
a=BasicOperations.repeatLight(exp1.toLightAutomaton(automata,automaton_provider),min,max);
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_COMPLEMENT:
a=BasicOperations.complementLight(exp1.toLightAutomaton(automata,automaton_provider));
a=MinimizationOperationsLight.minimize(a);
break;
case REGEXP_CHAR:
a=BasicAutomata.makeCharLight(c);
break;
case REGEXP_CHAR_RANGE:
a=BasicAutomata.makeCharRangeLight(from,to);
break;
case REGEXP_ANYCHAR:
a=BasicAutomata.makeAnyCharLight();
break;
case REGEXP_EMPTY:
a=BasicAutomata.makeEmptyLight();
break;
case REGEXP_STRING:
a=BasicAutomata.makeStringLight(s);
break;
case REGEXP_ANYSTRING:
a=BasicAutomata.makeAnyStringLight();
break;
case REGEXP_AUTOMATON:
LightAutomaton aa=null;
if (automata != null) {
aa=automata.get(s);
}
if (aa == null && automaton_provider != null) {
try {
aa=automaton_provider.getAutomaton(s);
}
 catch (IOException e) {
throw new IllegalArgumentException(e);
}
}
if (aa == null) {
throw new IllegalArgumentException("'" + s + "' not found");
}
a=aa;
break;
case REGEXP_INTERVAL:
a=BasicAutomata.makeIntervalLight(min,max,digits);
break;
}
return a;
}
