{
  if (match('.'))   return makeAnyChar();
 else   if (check(EMPTY) && match('#'))   return makeEmpty();
 else   if (check(ANYSTRING) && match('@'))   return makeAnyString();
 else   if (match('"')) {
    int start=pos;
    while (more() && !peek("\""))     next();
    if (!match('"'))     throw new IllegalArgumentException("expected '\"' at position " + pos);
    return makeString(b.substring(start,pos - 1));
  }
 else   if (match('(')) {
    if (match(')'))     return makeString("");
    RegExp e=parseUnionExp();
    if (!match(')'))     throw new IllegalArgumentException("expected ')' at position " + pos);
    return e;
  }
 else   if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {
    int start=pos;
    while (more() && !peek(">"))     next();
    if (!match('>'))     throw new IllegalArgumentException("expected '>' at position " + pos);
    String s=b.substring(start,pos - 1);
    int i=s.indexOf('-');
    if (i == -1) {
      if (!check(AUTOMATON))       throw new IllegalArgumentException("interval syntax error at position " + (pos - 1));
      return makeAutomaton(s);
    }
 else {
      if (!check(INTERVAL))       throw new IllegalArgumentException("illegal identifier at position " + (pos - 1));
      try {
        if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-'))         throw new NumberFormatException();
        String smin=s.substring(0,i);
        String smax=s.substring(i + 1,s.length());
        int imin=Integer.parseInt(smin);
        int imax=Integer.parseInt(smax);
        int digits;
        if (smin.length() == smax.length())         digits=smin.length();
 else         digits=0;
        if (imin > imax) {
          int t=imin;
          imin=imax;
          imax=t;
        }
        return makeInterval(imin,imax,digits);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("interval syntax error at position " + (pos - 1));
      }
    }
  }
 else   return makeChar(parseCharExp());
}
