{
  List<Automaton> list;
  Automaton a=null;
switch (kind) {
case REGEXP_UNION:
    list=new ArrayList<>();
  findLeaves(exp1,Kind.REGEXP_UNION,list,automata,automaton_provider);
findLeaves(exp2,Kind.REGEXP_UNION,list,automata,automaton_provider);
a=Operations.union(list);
a=MinimizationOperations.minimize(a);
break;
case REGEXP_CONCATENATION:
list=new ArrayList<>();
findLeaves(exp1,Kind.REGEXP_CONCATENATION,list,automata,automaton_provider);
findLeaves(exp2,Kind.REGEXP_CONCATENATION,list,automata,automaton_provider);
a=Operations.concatenate(list);
a=MinimizationOperations.minimize(a);
break;
case REGEXP_INTERSECTION:
a=Operations.intersection(exp1.toAutomaton(automata,automaton_provider),exp2.toAutomaton(automata,automaton_provider));
a=MinimizationOperations.minimize(a);
break;
case REGEXP_OPTIONAL:
a=Operations.optional(exp1.toAutomaton(automata,automaton_provider));
a=MinimizationOperations.minimize(a);
break;
case REGEXP_REPEAT:
a=Operations.repeat(exp1.toAutomaton(automata,automaton_provider));
a=MinimizationOperations.minimize(a);
break;
case REGEXP_REPEAT_MIN:
a=Operations.repeat(exp1.toAutomaton(automata,automaton_provider),min);
a=MinimizationOperations.minimize(a);
break;
case REGEXP_REPEAT_MINMAX:
a=Operations.repeat(exp1.toAutomaton(automata,automaton_provider),min,max);
a=MinimizationOperations.minimize(a);
break;
case REGEXP_COMPLEMENT:
a=Operations.complement(exp1.toAutomaton(automata,automaton_provider));
a=MinimizationOperations.minimize(a);
break;
case REGEXP_CHAR:
a=Automata.makeChar(c);
break;
case REGEXP_CHAR_RANGE:
a=Automata.makeCharRange(from,to);
break;
case REGEXP_ANYCHAR:
a=Automata.makeAnyChar();
break;
case REGEXP_EMPTY:
a=Automata.makeEmpty();
break;
case REGEXP_STRING:
a=Automata.makeString(s);
break;
case REGEXP_ANYSTRING:
a=Automata.makeAnyString();
break;
case REGEXP_AUTOMATON:
Automaton aa=null;
if (automata != null) {
aa=automata.get(s);
}
if (aa == null && automaton_provider != null) {
try {
aa=automaton_provider.getAutomaton(s);
}
 catch (IOException e) {
throw new IllegalArgumentException(e);
}
}
if (aa == null) {
throw new IllegalArgumentException("'" + s + "' not found");
}
a=aa;
break;
case REGEXP_INTERVAL:
a=Automata.makeInterval(min,max,digits);
break;
}
return a;
}
