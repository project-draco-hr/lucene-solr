{
  req.getParams().required().check(COLLECTION_PROP);
  String collectionName=req.getParams().get(COLLECTION_PROP);
  if (StringUtils.isBlank(collectionName)) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format(Locale.ROOT,"The " + COLLECTION_PROP + " is required for the Rebalance Leaders command."));
  }
  coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);
  ClusterState clusterState=coreContainer.getZkController().getClusterState();
  DocCollection dc=clusterState.getCollection(collectionName);
  if (dc == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Collection '" + collectionName + "' does not exist, no action taken.");
  }
  Map<String,String> currentRequests=new HashMap<>();
  int max=req.getParams().getInt(MAX_AT_ONCE_PROP,Integer.MAX_VALUE);
  if (max <= 0)   max=Integer.MAX_VALUE;
  int maxWaitSecs=req.getParams().getInt(MAX_WAIT_SECONDS_PROP,60);
  NamedList<Object> results=new NamedList<>();
  boolean keepGoing=true;
  for (  Slice slice : dc.getSlices()) {
    ensurePreferredIsLeader(results,slice,currentRequests);
    if (currentRequests.size() == max) {
      log.info("Queued " + max + " leader reassignments, waiting for some to complete.");
      keepGoing=waitForLeaderChange(currentRequests,maxWaitSecs,false,results);
      if (keepGoing == false) {
        break;
      }
    }
  }
  if (keepGoing == true) {
    keepGoing=waitForLeaderChange(currentRequests,maxWaitSecs,true,results);
  }
  if (keepGoing == true) {
    log.info("All leader reassignments completed.");
  }
 else {
    log.warn("Exceeded specified timeout of ." + maxWaitSecs + "' all leaders may not have been reassigned");
  }
  rsp.getValues().addAll(results);
}
