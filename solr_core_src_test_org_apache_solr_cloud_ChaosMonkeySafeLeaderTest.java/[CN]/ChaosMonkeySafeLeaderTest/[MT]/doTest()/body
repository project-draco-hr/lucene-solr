{
  handle.clear();
  handle.put("timestamp",SKIPVAL);
  randomlyEnableAutoSoftCommit();
  del("*:*");
  List<StopableIndexingThread> threads=new ArrayList<>();
  int threadCount=2;
  for (int i=0; i < threadCount; i++) {
    StopableIndexingThread indexThread=new StopableIndexingThread(controlClient,cloudClient,Integer.toString(i),true);
    threads.add(indexThread);
    indexThread.start();
  }
  chaosMonkey.startTheMonkey(false,500);
  try {
    long runLength;
    if (RUN_LENGTH != -1) {
      runLength=RUN_LENGTH;
    }
 else {
      int[] runTimes=new int[]{5000,6000,10000,25000,27000,30000,30000,45000,90000,120000};
      runLength=runTimes[random().nextInt(runTimes.length - 1)];
    }
    Thread.sleep(runLength);
  }
  finally {
    chaosMonkey.stopTheMonkey();
  }
  for (  StopableIndexingThread indexThread : threads) {
    indexThread.safeStop();
  }
  for (  StopableIndexingThread indexThread : threads) {
    indexThread.join();
  }
  for (  StopableIndexingThread indexThread : threads) {
    assertEquals(0,indexThread.getFailCount());
  }
  Thread.sleep(2000);
  waitForThingsToLevelOut(180000);
  checkShardConsistency(true,true);
  if (VERBOSE)   System.out.println("control docs:" + controlClient.query(new SolrQuery("*:*")).getResults().getNumFound() + "\n\n");
  if (random().nextBoolean()) {
    zkServer.shutdown();
    zkServer=new ZkTestServer(zkServer.getZkDir(),zkServer.getPort());
    zkServer.run();
  }
  CloudSolrServer client=createCloudClient("collection1");
  try {
    createCollection(null,"testcollection",1,1,1,client,null,"conf1");
  }
  finally {
    client.shutdown();
  }
  List<Integer> numShardsNumReplicas=new ArrayList<>(2);
  numShardsNumReplicas.add(1);
  numShardsNumReplicas.add(1);
  checkForCollection("testcollection",numShardsNumReplicas,null);
}
