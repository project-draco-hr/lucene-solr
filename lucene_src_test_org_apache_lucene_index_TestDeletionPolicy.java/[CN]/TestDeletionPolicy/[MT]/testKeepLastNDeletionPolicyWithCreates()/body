{
  final int N=10;
  for (int pass=0; pass < 2; pass++) {
    boolean useCompoundFile=(pass % 2) != 0;
    KeepLastNDeletionPolicy policy=new KeepLastNDeletionPolicy(N);
    Directory dir=newDirectory();
    IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy).setMaxBufferedDocs(10);
    MergePolicy mp=conf.getMergePolicy();
    if (mp instanceof LogMergePolicy) {
      ((LogMergePolicy)mp).setUseCompoundFile(useCompoundFile);
    }
    IndexWriter writer=new IndexWriter(dir,conf);
    writer.close();
    Term searchTerm=new Term("content","aaa");
    Query query=new TermQuery(searchTerm);
    for (int i=0; i < N + 1; i++) {
      conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy).setMaxBufferedDocs(10);
      mp=conf.getMergePolicy();
      if (mp instanceof LogMergePolicy) {
        ((LogMergePolicy)mp).setUseCompoundFile(useCompoundFile);
      }
      writer=new IndexWriter(dir,conf);
      for (int j=0; j < 17; j++) {
        addDoc(writer);
      }
      writer.close();
      IndexReader reader=IndexReader.open(dir,policy,false);
      reader.deleteDocument(3);
      IndexSearcher searcher=newSearcher(reader);
      ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
      assertEquals(16,hits.length);
      reader.close();
      searcher.close();
      writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));
      writer.close();
    }
    assertEquals(3 * (N + 1),policy.numOnInit);
    assertEquals(3 * (N + 1) + 1,policy.numOnCommit);
    IndexReader rwReader=IndexReader.open(dir,false);
    IndexSearcher searcher=new IndexSearcher(rwReader);
    ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
    assertEquals(0,hits.length);
    long gen=SegmentInfos.getCurrentSegmentGeneration(dir);
    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
    int expectedCount=0;
    searcher.close();
    rwReader.close();
    for (int i=0; i < N + 1; i++) {
      try {
        IndexReader reader=IndexReader.open(dir,true);
        searcher=newSearcher(reader);
        hits=searcher.search(query,null,1000).scoreDocs;
        assertEquals(expectedCount,hits.length);
        searcher.close();
        if (expectedCount == 0) {
          expectedCount=16;
        }
 else         if (expectedCount == 16) {
          expectedCount=17;
        }
 else         if (expectedCount == 17) {
          expectedCount=0;
        }
        reader.close();
        if (i == N) {
          fail("should have failed on commits before last " + N);
        }
      }
 catch (      IOException e) {
        if (i != N) {
          throw e;
        }
      }
      if (i < N) {
        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      }
      gen--;
    }
    dir.close();
  }
}
