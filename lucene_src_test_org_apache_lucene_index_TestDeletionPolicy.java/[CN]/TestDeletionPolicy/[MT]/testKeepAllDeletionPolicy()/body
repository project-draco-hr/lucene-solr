{
  Random random=newRandom();
  for (int pass=0; pass < 2; pass++) {
    boolean useCompoundFile=(pass % 2) != 0;
    KeepAllDeletionPolicy policy=new KeepAllDeletionPolicy();
    Directory dir=new MockRAMDirectory();
    policy.dir=dir;
    IndexWriterConfig conf=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setIndexDeletionPolicy(policy).setMaxBufferedDocs(10).setMergeScheduler(new SerialMergeScheduler());
    LogMergePolicy lmp=(LogMergePolicy)conf.getMergePolicy();
    lmp.setUseCompoundFile(useCompoundFile);
    lmp.setUseCompoundDocStore(useCompoundFile);
    lmp.setMergeFactor(10);
    IndexWriter writer=new IndexWriter(dir,conf);
    for (int i=0; i < 107; i++) {
      addDoc(writer);
    }
    writer.close();
    conf=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
    lmp=(LogMergePolicy)conf.getMergePolicy();
    lmp.setUseCompoundFile(useCompoundFile);
    lmp.setUseCompoundDocStore(useCompoundFile);
    writer=new IndexWriter(dir,conf);
    writer.optimize();
    writer.close();
    assertEquals(1,policy.numOnInit);
    assertEquals(2,policy.numOnCommit);
    Collection<IndexCommit> commits=IndexReader.listCommits(dir);
    assertEquals(2,commits.size());
    for (    final IndexCommit commit : commits) {
      IndexReader r=IndexReader.open(commit,null,false);
      r.close();
    }
    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
    long gen=SegmentInfos.getCurrentSegmentGeneration(dir);
    while (gen > 0) {
      IndexReader reader=IndexReader.open(dir,true);
      reader.close();
      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      gen--;
      if (gen > 0) {
        int preCount=dir.listAll().length;
        writer=new IndexWriter(dir,newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));
        writer.close();
        int postCount=dir.listAll().length;
        assertTrue(postCount < preCount);
      }
    }
    dir.close();
  }
}
