{
  Random random=newRandom();
  final int N=10;
  for (int pass=0; pass < 2; pass++) {
    boolean useCompoundFile=(pass % 2) != 0;
    KeepLastNDeletionPolicy policy=new KeepLastNDeletionPolicy(N);
    Directory dir=new RAMDirectory();
    IndexWriterConfig conf=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy);
    LogMergePolicy lmp=(LogMergePolicy)conf.getMergePolicy();
    lmp.setUseCompoundFile(useCompoundFile);
    lmp.setUseCompoundDocStore(useCompoundFile);
    IndexWriter writer=new IndexWriter(dir,conf);
    writer.close();
    Term searchTerm=new Term("content","aaa");
    Query query=new TermQuery(searchTerm);
    for (int i=0; i < N + 1; i++) {
      conf=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
      lmp=(LogMergePolicy)conf.getMergePolicy();
      lmp.setUseCompoundFile(useCompoundFile);
      lmp.setUseCompoundDocStore(useCompoundFile);
      writer=new IndexWriter(dir,conf);
      for (int j=0; j < 17; j++) {
        addDoc(writer);
      }
      writer.close();
      IndexReader reader=IndexReader.open(dir,policy,false);
      reader.deleteDocument(3 * i + 1);
      reader.setNorm(4 * i + 1,"content",2.0F);
      IndexSearcher searcher=new IndexSearcher(reader);
      ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
      assertEquals(16 * (1 + i),hits.length);
      reader.close();
      searcher.close();
    }
    conf=newIndexWriterConfig(random,TEST_VERSION_CURRENT,new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy);
    lmp=(LogMergePolicy)conf.getMergePolicy();
    lmp.setUseCompoundFile(useCompoundFile);
    lmp.setUseCompoundDocStore(useCompoundFile);
    writer=new IndexWriter(dir,conf);
    writer.optimize();
    writer.close();
    assertEquals(2 * (N + 1) + 1,policy.numOnInit);
    assertEquals(2 * (N + 2),policy.numOnCommit);
    IndexSearcher searcher=new IndexSearcher(dir,false);
    ScoreDoc[] hits=searcher.search(query,null,1000).scoreDocs;
    assertEquals(176,hits.length);
    long gen=SegmentInfos.getCurrentSegmentGeneration(dir);
    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);
    int expectedCount=176;
    for (int i=0; i < N + 1; i++) {
      try {
        IndexReader reader=IndexReader.open(dir,true);
        searcher=new IndexSearcher(reader);
        hits=searcher.search(query,null,1000).scoreDocs;
        if (i > 1) {
          if (i % 2 == 0) {
            expectedCount+=1;
          }
 else {
            expectedCount-=17;
          }
        }
        assertEquals(expectedCount,hits.length);
        searcher.close();
        reader.close();
        if (i == N) {
          fail("should have failed on commits before last 5");
        }
      }
 catch (      IOException e) {
        if (i != N) {
          throw e;
        }
      }
      if (i < N) {
        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",gen));
      }
      gen--;
    }
    dir.close();
  }
}
