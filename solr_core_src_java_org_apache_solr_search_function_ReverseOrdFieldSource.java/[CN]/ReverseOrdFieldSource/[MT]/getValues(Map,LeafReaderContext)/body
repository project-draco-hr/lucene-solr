{
  final int off=readerContext.docBase;
  final LeafReader r;
  Object o=context.get("searcher");
  if (o instanceof SolrIndexSearcher) {
    SolrIndexSearcher is=(SolrIndexSearcher)o;
    SchemaField sf=is.getSchema().getFieldOrNull(field);
    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {
      List<LeafReaderContext> leaves=is.getIndexReader().leaves();
      LeafReader insaneLeaves[]=new LeafReader[leaves.size()];
      int upto=0;
      for (      LeafReaderContext raw : leaves) {
        insaneLeaves[upto++]=Insanity.wrapInsanity(raw.reader(),field);
      }
      r=SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));
    }
 else {
      r=((SolrIndexSearcher)o).getLeafReader();
    }
  }
 else {
    IndexReader topReader=ReaderUtil.getTopLevelContext(readerContext).reader();
    r=SlowCompositeReaderWrapper.wrap(topReader);
  }
  final SortedDocValues sindex=SortedSetSelector.wrap(DocValues.getSortedSet(r,field),SortedSetSelector.Type.MIN);
  final int end=sindex.getValueCount();
  return new IntDocValues(this){
    @Override public int intVal(    int doc) throws IOException {
      if (doc + off > sindex.docID()) {
        sindex.advance(doc + off);
      }
      if (doc + off == sindex.docID()) {
        return (end - sindex.ordValue() - 1);
      }
 else {
        return end;
      }
    }
  }
;
}
