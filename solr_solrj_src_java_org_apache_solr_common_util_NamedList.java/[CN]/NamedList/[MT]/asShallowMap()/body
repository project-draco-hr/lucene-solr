{
  return new Map<String,T>(){
    @Override public int size(){
      return NamedList.this.size();
    }
    @Override public boolean isEmpty(){
      return size() == 0;
    }
    public boolean containsKey(    Object key){
      return NamedList.this.get((String)key) != null;
    }
    @Override public boolean containsValue(    Object value){
      return false;
    }
    @Override public T get(    Object key){
      return NamedList.this.get((String)key);
    }
    @Override public T put(    String key,    T value){
      int idx=NamedList.this.indexOf(key,0);
      if (idx == -1) {
        NamedList.this.add(key,value);
      }
 else {
        NamedList.this.setVal(idx,value);
      }
      return null;
    }
    @Override public T remove(    Object key){
      return NamedList.this.remove((String)key);
    }
    @Override public void putAll(    Map m){
      boolean isEmpty=isEmpty();
      for (      Object o : m.entrySet()) {
        Map.Entry e=(Entry)o;
        if (isEmpty) {
          add((String)e.getKey(),(T)e.getValue());
        }
 else {
          put(e.getKey() == null ? null : e.getKey().toString(),(T)e.getValue());
        }
      }
    }
    @Override public void clear(){
      NamedList.this.clear();
    }
    @Override public Set<String> keySet(){
      return NamedList.this.asMap(1).keySet();
    }
    @Override public Collection values(){
      return NamedList.this.asMap(1).values();
    }
    @Override public Set<Entry<String,T>> entrySet(){
      return NamedList.this.asMap(1).entrySet();
    }
    @Override public void forEach(    BiConsumer action){
      NamedList.this.forEach(action);
    }
  }
;
}
