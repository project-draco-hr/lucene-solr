{
  final int off=readerContext.docBase;
  final IndexReader topReader=ReaderUtil.getTopLevelContext(readerContext).reader;
  final FieldCache.DocTermsIndex sindex=FieldCache.DEFAULT.getTermsIndex(topReader,field);
  return new DocValues(){
    protected String toTerm(    String readableValue){
      return readableValue;
    }
    public float floatVal(    int doc){
      return (float)sindex.getOrd(doc + off);
    }
    public int intVal(    int doc){
      return sindex.getOrd(doc + off);
    }
    public long longVal(    int doc){
      return (long)sindex.getOrd(doc + off);
    }
    public double doubleVal(    int doc){
      return (double)sindex.getOrd(doc + off);
    }
    public int ordVal(    int doc){
      return sindex.getOrd(doc + off);
    }
    public int numOrd(){
      return sindex.numOrd();
    }
    public String strVal(    int doc){
      return Integer.toString(sindex.getOrd(doc + off));
    }
    public String toString(    int doc){
      return description() + '=' + intVal(doc);
    }
    @Override public ValueFiller getValueFiller(){
      return new ValueFiller(){
        private final MutableValueInt mval=new MutableValueInt();
        @Override public MutableValue getValue(){
          return mval;
        }
        @Override public void fillValue(        int doc){
          mval.value=sindex.getOrd(doc);
          mval.exists=mval.value != 0;
        }
      }
;
    }
  }
;
}
