{
  stream.open();
  Tuple node=null;
  StringBuilder builder=new StringBuilder();
  String field=null;
  String collection=null;
  while (true) {
    node=stream.read();
    if (node.EOF) {
      break;
    }
    if (!node.fields.containsKey("node")) {
      throw new IOException("node field not present in the Tuple");
    }
    String nodeId=node.getString("node");
    nodes.put(nodeId,node);
    if (builder.length() > 0) {
      builder.append(",");
      field=node.getString("field");
      collection=node.getString("collection");
    }
    builder.append(nodeId);
  }
  CloudSolrClient client=clientCache.getCloudSolrClient(zkHost);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.add(CommonParams.QT,"/terms");
  params.add(TermsParams.TERMS,"true");
  params.add(TermsParams.TERMS_FIELD,field);
  params.add(TermsParams.TERMS_STATS,"true");
  params.add(TermsParams.TERMS_LIST,builder.toString());
  params.add(TermsParams.TERMS_LIMIT,Integer.toString(nodes.size()));
  params.add("distrib","true");
  QueryRequest request=new QueryRequest(params);
  try {
    NamedList response=client.request(request,collection);
    NamedList<Number> stats=(NamedList<Number>)response.get("indexstats");
    long numDocs=stats.get("numDocs").longValue();
    NamedList<NamedList<Number>> fields=(NamedList<NamedList<Number>>)response.get("terms");
    int size=fields.size();
    for (int i=0; i < size; i++) {
      String fieldName=fields.getName(i);
      NamedList<Number> terms=fields.get(fieldName);
      int tsize=terms.size();
      for (int t=0; t < tsize; t++) {
        String term=terms.getName(t);
        Number docFreq=terms.get(term);
        Tuple tuple=nodes.get(term);
        if (!tuple.fields.containsKey(termFreq)) {
          throw new Exception("termFreq field not present in the Tuple");
        }
        Number termFreqValue=(Number)tuple.get(termFreq);
        float score=termFreqValue.floatValue() * (float)(Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);
        tuple.put("nodeScore",score);
        tuple.put("docFreq",docFreq);
        tuple.put("numDocs",numDocs);
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  tuples=nodes.values().iterator();
}
