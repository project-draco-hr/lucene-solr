{
  if (LOG.isInfoEnabled())   LOG.info("Initialize " + this.toString());
  Db4o.configure().objectClass(DB4oEntry.class).objectField("updated").indexed(true);
  Db4o.configure().objectClass(BaseEntry.class).objectField("id").indexed(true);
  Db4o.configure().objectClass(BaseFeed.class).objectField("id").indexed(true);
  Db4o.configure().objectClass(GDataAccount.class).objectField("name").indexed(true);
  Db4o.configure().objectClass(ServerBaseFeed.class).cascadeOnDelete(false);
  Db4o.configure().objectClass(ServerBaseFeed.class).maximumActivationDepth(0);
  Db4o.configure().objectClass(BaseFeed.class).minimumActivationDepth(1);
  Db4o.configure().objectClass(BaseEntry.class).minimumActivationDepth(1);
  Db4o.configure().objectClass(BaseFeed.class).cascadeOnDelete(true);
  Db4o.configure().objectClass(DB4oEntry.class).cascadeOnDelete(true);
  Db4o.configure().objectClass(GDataAccount.class).cascadeOnDelete(true);
  Db4o.configure().weakReferences(this.weakReferences);
  Db4o.configure().optimizeNativeQueries(false);
  if (this.runAsServer) {
    this.server=Db4o.openServer(this.filePath,this.port);
    this.server.grantAccess(this.user,this.password);
  }
 else {
    InvocationHandler handler=new ObjectServerDecorator(this.user,this.password,this.host,this.port);
    this.server=(ObjectServer)Proxy.newProxyInstance(this.getClass().getClassLoader(),new Class[]{ObjectServer.class},handler);
  }
  PoolObjectFactory<ObjectContainer> factory=new ObjectContinerFactory(this.server);
  this.containerPool=new SimpleObjectPool<ObjectContainer>(this.containerPoolSize,factory);
  try {
    createAdminAccount();
  }
 catch (  StorageException e) {
    LOG.error("Can not create admin account -- ",e);
  }
}
