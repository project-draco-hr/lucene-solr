{
  String field="field" + precisionStep;
  int count=3000;
  long lower=(distance * 3 / 2) + startOffset, upper=lower + count * distance + (distance / 3);
  LegacyNumericRangeQuery<Long> q=LegacyNumericRangeQuery.newLongRange(field,precisionStep,lower,upper,true,true);
  for (byte i=0; i < 2; i++) {
    TopDocs topDocs;
    String type;
switch (i) {
case 0:
      type=" (constant score filter rewrite)";
    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
  topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);
break;
case 1:
type=" (constant score boolean rewrite)";
q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);
topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);
break;
default :
return;
}
ScoreDoc[] sd=topDocs.scoreDocs;
assertNotNull(sd);
assertEquals("Score doc count" + type,count,sd.length);
StoredDocument doc=searcher.doc(sd[0].doc);
assertEquals("First doc" + type,2 * distance + startOffset,doc.getField(field).numericValue().longValue());
doc=searcher.doc(sd[sd.length - 1].doc);
assertEquals("Last doc" + type,(1 + count) * distance + startOffset,doc.getField(field).numericValue().longValue());
}
}
