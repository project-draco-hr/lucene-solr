{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())));
  Document doc=new Document();
  doc.add(new DoubleField("double",Double.NEGATIVE_INFINITY));
  doc.add(new LongField("long",Long.MIN_VALUE));
  writer.addDocument(doc);
  doc=new Document();
  doc.add(new DoubleField("double",Double.POSITIVE_INFINITY));
  doc.add(new LongField("long",Long.MAX_VALUE));
  writer.addDocument(doc);
  doc=new Document();
  doc.add(new DoubleField("double",0.0));
  doc.add(new LongField("long",0L));
  writer.addDocument(doc);
  for (  double d : TestNumericUtils.DOUBLE_NANs) {
    doc=new Document();
    doc.add(new DoubleField("double",d));
    writer.addDocument(doc);
  }
  writer.close();
  IndexReader r=IndexReader.open(dir);
  IndexSearcher s=new IndexSearcher(r);
  Query q=NumericRangeQuery.newLongRange("long",null,null,true,true);
  TopDocs topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newLongRange("long",null,null,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newLongRange("long",Long.MIN_VALUE,Long.MAX_VALUE,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newLongRange("long",Long.MIN_VALUE,Long.MAX_VALUE,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",1,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newDoubleRange("double",null,null,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newDoubleRange("double",null,null,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newDoubleRange("double",Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",3,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newDoubleRange("double",Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,false,false);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",1,topDocs.scoreDocs.length);
  q=NumericRangeQuery.newDoubleRange("double",Double.NaN,Double.NaN,true,true);
  topDocs=s.search(q,10);
  assertEquals("Score doc count",TestNumericUtils.DOUBLE_NANs.length,topDocs.scoreDocs.length);
  r.close();
  dir.close();
}
