{
  String field="field" + precisionStep;
  int totalTermCountT=0, totalTermCountC=0, termCountT, termCountC;
  int num=_TestUtil.nextInt(random(),10,20);
  for (int i=0; i < num; i++) {
    long lower=(long)(random().nextDouble() * noDocs * distance) + startOffset;
    long upper=(long)(random().nextDouble() * noDocs * distance) + startOffset;
    if (lower > upper) {
      long a=lower;
      lower=upper;
      upper=a;
    }
    final BytesRef lowerBytes=new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes=new BytesRef(NumericUtils.BUF_SIZE_LONG);
    NumericUtils.longToPrefixCoded(lower,0,lowerBytes);
    NumericUtils.longToPrefixCoded(upper,0,upperBytes);
    NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field,precisionStep,lower,upper,true,true);
    TermRangeQuery cq=new TermRangeQuery(field,lowerBytes,upperBytes,true,true);
    TopDocs tTopDocs=searcher.search(tq,1);
    TopDocs cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    totalTermCountT+=termCountT=countTerms(tq);
    totalTermCountC+=termCountC=countTerms(cq);
    checkTermCounts(precisionStep,termCountT,termCountC);
    tq=NumericRangeQuery.newLongRange(field,precisionStep,lower,upper,false,false);
    cq=new TermRangeQuery(field,lowerBytes,upperBytes,false,false);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    totalTermCountT+=termCountT=countTerms(tq);
    totalTermCountC+=termCountC=countTerms(cq);
    checkTermCounts(precisionStep,termCountT,termCountC);
    tq=NumericRangeQuery.newLongRange(field,precisionStep,lower,upper,false,true);
    cq=new TermRangeQuery(field,lowerBytes,upperBytes,false,true);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    totalTermCountT+=termCountT=countTerms(tq);
    totalTermCountC+=termCountC=countTerms(cq);
    checkTermCounts(precisionStep,termCountT,termCountC);
    tq=NumericRangeQuery.newLongRange(field,precisionStep,lower,upper,true,false);
    cq=new TermRangeQuery(field,lowerBytes,upperBytes,true,false);
    tTopDocs=searcher.search(tq,1);
    cTopDocs=searcher.search(cq,1);
    assertEquals("Returned count for NumericRangeQuery and TermRangeQuery must be equal",cTopDocs.totalHits,tTopDocs.totalHits);
    totalTermCountT+=termCountT=countTerms(tq);
    totalTermCountC+=termCountC=countTerms(cq);
    checkTermCounts(precisionStep,termCountT,termCountC);
  }
  checkTermCounts(precisionStep,totalTermCountT,totalTermCountC);
  if (VERBOSE && precisionStep != Integer.MAX_VALUE) {
    System.out.println("Average number of terms during random search on '" + field + "':");
    System.out.println(" Numeric query: " + (((double)totalTermCountT) / (num * 4)));
    System.out.println(" Classical query: " + (((double)totalTermCountC) / (num * 4)));
  }
}
