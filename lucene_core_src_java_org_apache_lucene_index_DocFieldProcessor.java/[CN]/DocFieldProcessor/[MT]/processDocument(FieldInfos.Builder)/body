{
  consumer.startDocument();
  fieldsWriter.startDocument();
  fieldCount=0;
  final int thisFieldGen=fieldGen++;
  for (  IndexableField field : docState.doc) {
    final String fieldName=field.name();
    final int hashPos=fieldName.hashCode() & hashMask;
    DocFieldProcessorPerField fp=fieldHash[hashPos];
    while (fp != null && !fp.fieldInfo.name.equals(fieldName)) {
      fp=fp.next;
    }
    if (fp == null) {
      FieldInfo fi=fieldInfos.addOrUpdate(fieldName,field.fieldType());
      fp=new DocFieldProcessorPerField(this,fi);
      fp.next=fieldHash[hashPos];
      fieldHash[hashPos]=fp;
      totalFieldCount++;
      if (totalFieldCount >= fieldHash.length / 2) {
        rehash();
      }
    }
 else {
      fieldInfos.addOrUpdate(fp.fieldInfo.name,field.fieldType());
    }
    if (thisFieldGen != fp.lastGen) {
      fp.fieldCount=0;
      if (fieldCount == fields.length) {
        final int newSize=fields.length * 2;
        DocFieldProcessorPerField newArray[]=new DocFieldProcessorPerField[newSize];
        System.arraycopy(fields,0,newArray,0,fieldCount);
        fields=newArray;
      }
      fields[fieldCount++]=fp;
      fp.lastGen=thisFieldGen;
    }
    fp.addField(field);
    if (field.fieldType().stored()) {
      fieldsWriter.addField(field,fp.fieldInfo);
    }
    final DocValues.Type dvType=field.fieldType().docValueType();
    if (dvType != null) {
      docValuesConsumer(dvType,docState,fp.fieldInfo).add(docState.docID,field);
    }
  }
  ArrayUtil.quickSort(fields,0,fieldCount,fieldsComp);
  for (int i=0; i < fieldCount; i++) {
    final DocFieldProcessorPerField perField=fields[i];
    perField.consumer.processFields(perField.fields,perField.fieldCount);
  }
  if (docState.maxTermPrefix != null && docState.infoStream.isEnabled("IW")) {
    docState.infoStream.message("IW","WARNING: document contains at least one immense term (whose UTF8 encoding is longer than the max length " + DocumentsWriterPerThread.MAX_TERM_LENGTH_UTF8 + "), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '"+ docState.maxTermPrefix+ "...'");
    docState.maxTermPrefix=null;
  }
}
