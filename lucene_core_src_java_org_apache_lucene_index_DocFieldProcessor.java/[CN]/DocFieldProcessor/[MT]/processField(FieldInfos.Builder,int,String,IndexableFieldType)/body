{
  final int hashPos=fieldName.hashCode() & hashMask;
  DocFieldProcessorPerField fp=fieldHash[hashPos];
  while (fp != null && !fp.fieldInfo.name.equals(fieldName)) {
    fp=fp.next;
  }
  if (fp == null) {
    FieldInfo fi=fieldInfos.addOrUpdate(fieldName,ft);
    fp=new DocFieldProcessorPerField(this,fi);
    fp.next=fieldHash[hashPos];
    fieldHash[hashPos]=fp;
    totalFieldCount++;
    if (totalFieldCount >= fieldHash.length / 2) {
      rehash();
    }
  }
 else {
    fp.fieldInfo.update(ft.indexed(),false,ft.omitNorms(),false,ft.indexOptions());
  }
  if (thisFieldGen != fp.lastGen) {
    fp.fieldCount=0;
    if (fieldCount == fields.length) {
      final int newSize=fields.length * 2;
      DocFieldProcessorPerField newArray[]=new DocFieldProcessorPerField[newSize];
      System.arraycopy(fields,0,newArray,0,fieldCount);
      fields=newArray;
    }
    fields[fieldCount++]=fp;
    fp.lastGen=thisFieldGen;
  }
  return fp;
}
