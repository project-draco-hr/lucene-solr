{
  ConcurrentLFUCache<Integer,String> cache=new ConcurrentLFUCache<>(100,90);
  try {
    for (int i=0; i < 50; i++) {
      cache.put(i + 1,"" + (i + 1));
    }
    for (int i=0; i < 44; i++) {
      cache.get(i + 1);
      cache.get(i + 1);
    }
    cache.get(1);
    cache.get(1);
    cache.get(1);
    cache.get(3);
    cache.get(3);
    cache.get(3);
    cache.get(5);
    cache.get(5);
    cache.get(5);
    cache.get(7);
    cache.get(7);
    cache.get(7);
    cache.get(9);
    cache.get(9);
    cache.get(9);
    cache.get(48);
    cache.get(48);
    cache.get(48);
    cache.get(50);
    cache.get(50);
    cache.get(50);
    cache.get(50);
    cache.get(50);
    Map<Integer,String> m;
    m=cache.getMostUsedItems(5);
    assertNotNull(m.get(50));
    assertNotNull(m.get(9));
    assertNotNull(m.get(7));
    assertNotNull(m.get(5));
    assertNotNull(m.get(3));
    m=cache.getLeastUsedItems(5);
    assertNotNull(m.get(49));
    assertNotNull(m.get(47));
    assertNotNull(m.get(46));
    assertNotNull(m.get(45));
    assertNotNull(m.get(2));
    m=cache.getLeastUsedItems(0);
    assertTrue(m.isEmpty());
    m=cache.getMostUsedItems(0);
    assertTrue(m.isEmpty());
  }
  finally {
    cache.destroy();
  }
}
