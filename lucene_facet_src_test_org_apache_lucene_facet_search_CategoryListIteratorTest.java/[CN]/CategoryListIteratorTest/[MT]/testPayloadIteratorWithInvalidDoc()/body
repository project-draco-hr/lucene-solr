{
  Directory dir=newDirectory();
  final IntEncoder encoder=new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));
  DataTokenStream dts=new DataTokenStream("1",encoder);
  final Analyzer noPayloadsAnalyzer=new Analyzer(){
    @Override public TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      return new TokenStreamComponents(new MockTokenizer(reader,MockTokenizer.KEYWORD,false));
    }
  }
;
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,noPayloadsAnalyzer).setMergePolicy(newLogMergePolicy()));
  for (int i=0; i < data.length; i++) {
    Document doc=new Document();
    if (i == 0) {
      dts.setIdx(i);
      doc.add(new TextField("f",dts));
    }
 else {
      doc.add(new TextField("f","1",Field.Store.NO));
    }
    writer.addDocument(doc);
    writer.commit();
  }
  IndexReader reader=writer.getReader();
  writer.close();
  IntsRef ordinals=new IntsRef();
  CategoryListIterator cli=new PayloadCategoryListIteraor(reader,new Term("f","1"),encoder.createMatchingDecoder());
  assertTrue("Failed to initialize payload iterator",cli.init());
  int totalCategories=0;
  for (int i=0; i < data.length; i++) {
    Set<Integer> values=new HashSet<Integer>();
    for (int j=0; j < data[i].length; j++) {
      values.add(data[i].ints[j]);
    }
    cli.getOrdinals(i,ordinals);
    if (i == 0) {
      assertTrue("document 0 must have a payload",ordinals.length > 0);
      for (int j=0; j < ordinals.length; j++) {
        assertTrue("expected category not found: " + ordinals.ints[j],values.contains(ordinals.ints[j]));
      }
      totalCategories+=ordinals.length;
    }
 else {
      assertTrue("only document 0 should have a payload",ordinals.length == 0);
    }
  }
  assertEquals("Wrong number of total categories!",2,totalCategories);
  reader.close();
  dir.close();
}
