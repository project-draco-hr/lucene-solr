{
  Directory dir=newDirectory();
  final IntEncoder encoder=new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
  for (int i=0; i < data.length; i++) {
    Document doc=new Document();
    if (i == 0) {
      BytesRef buf=new BytesRef();
      encoder.encode(IntsRef.deepCopyOf(data[i]),buf);
      doc.add(new StraightBytesDocValuesField("f",buf));
    }
 else {
      doc.add(new StraightBytesDocValuesField("f",new BytesRef()));
    }
    writer.addDocument(doc);
    writer.commit();
  }
  IndexReader reader=writer.getReader();
  writer.close();
  int totalCategories=0;
  IntsRef ordinals=new IntsRef();
  CategoryListIterator cli=new DocValuesCategoryListIterator("f",encoder.createMatchingDecoder());
  for (  AtomicReaderContext context : reader.leaves()) {
    assertTrue("failed to initalize iterator",cli.setNextReader(context));
    int maxDoc=context.reader().maxDoc();
    int dataIdx=context.docBase;
    for (int doc=0; doc < maxDoc; doc++, dataIdx++) {
      Set<Integer> values=new HashSet<Integer>();
      for (int j=0; j < data[dataIdx].length; j++) {
        values.add(data[dataIdx].ints[j]);
      }
      cli.getOrdinals(doc,ordinals);
      if (dataIdx == 0) {
        assertTrue("document 0 must have ordinals",ordinals.length > 0);
        for (int j=0; j < ordinals.length; j++) {
          assertTrue("expected category not found: " + ordinals.ints[j],values.contains(ordinals.ints[j]));
        }
        totalCategories+=ordinals.length;
      }
 else {
        assertTrue("only document 0 should have ordinals",ordinals.length == 0);
      }
    }
  }
  assertEquals("Wrong number of total categories!",2,totalCategories);
  reader.close();
  dir.close();
}
