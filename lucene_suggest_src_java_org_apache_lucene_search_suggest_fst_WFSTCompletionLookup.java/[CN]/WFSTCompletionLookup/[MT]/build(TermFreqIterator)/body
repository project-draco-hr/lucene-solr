{
  if (iterator instanceof TermFreqPayloadIterator) {
    throw new IllegalArgumentException("this suggester doesn't support payloads");
  }
  BytesRef scratch=new BytesRef();
  TermFreqIterator iter=new WFSTTermFreqIteratorWrapper(iterator);
  IntsRef scratchInts=new IntsRef();
  BytesRef previous=null;
  PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
  Builder<Long> builder=new Builder<Long>(FST.INPUT_TYPE.BYTE1,outputs);
  while ((scratch=iter.next()) != null) {
    long cost=iter.weight();
    if (previous == null) {
      previous=new BytesRef();
    }
 else     if (scratch.equals(previous)) {
      continue;
    }
    Util.toIntsRef(scratch,scratchInts);
    builder.add(scratchInts,cost);
    previous.copyBytes(scratch);
  }
  fst=builder.finish();
}
