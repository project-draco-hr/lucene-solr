{
  if (iterator.hasPayloads()) {
    throw new IllegalArgumentException("this suggester doesn't support payloads");
  }
  if (iterator.hasContexts()) {
    throw new IllegalArgumentException("this suggester doesn't support contexts");
  }
  count=0;
  BytesRef scratch=new BytesRef();
  InputIterator iter=new WFSTInputIterator(iterator);
  IntsRefBuilder scratchInts=new IntsRefBuilder();
  BytesRefBuilder previous=null;
  PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton();
  Builder<Long> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  while ((scratch=iter.next()) != null) {
    long cost=iter.weight();
    if (previous == null) {
      previous=new BytesRefBuilder();
    }
 else     if (scratch.equals(previous.get())) {
      continue;
    }
    Util.toIntsRef(scratch,scratchInts);
    builder.add(scratchInts.get(),cost);
    previous.copyBytes(scratch);
    count++;
  }
  fst=builder.finish();
}
