{
  int k=-1;
  int iters=1;
  if (args.length > ++k)   iters=Math.max(1,Integer.parseInt(args[k]));
  int runs=1;
  if (args.length > ++k)   runs=Math.max(1,Integer.parseInt(args[k]));
  String cmd="memram";
  if (args.length > ++k)   cmd=args[k];
  boolean useMemIndex=cmd.indexOf("mem") >= 0;
  boolean useRAMIndex=cmd.indexOf("ram") >= 0;
  String[] queries={"term","term*","term~","Apache","Apach~ AND Copy*"};
  if (args.length > ++k) {
    String arg=args[k];
    if (arg.startsWith("@"))     queries=readLines(new File(fileDir,arg.substring(1)));
 else     queries=new String[]{arg};
  }
  File[] files=new File[]{new File("CHANGES.txt"),new File("LICENSE.txt")};
  if (args.length > ++k) {
    files=new File[args.length - k];
    for (int i=k; i < args.length; i++) {
      files[i - k]=new File(args[i]);
    }
  }
  boolean toLowerCase=true;
  Set<?> stopWords=StopAnalyzer.ENGLISH_STOP_WORDS_SET;
  Analyzer[] analyzers=new Analyzer[]{new SimpleAnalyzer(),new StopAnalyzer(Version.LUCENE_CURRENT),new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT)};
  boolean first=true;
  for (int iter=0; iter < iters; iter++) {
    System.out.println("\n########### iteration=" + iter);
    long start=System.currentTimeMillis();
    long bytes=0;
    for (int anal=0; anal < analyzers.length; anal++) {
      this.analyzer=analyzers[anal];
      for (int i=0; i < files.length; i++) {
        File file=files[i];
        if (!file.exists() || file.isDirectory())         continue;
        bytes+=file.length();
        String text=toString(new FileInputStream(file),null);
        Document doc=createDocument(text);
        if (verbose)         System.out.println("\n*********** FILE=" + file);
        boolean measureIndexing=false;
        MemoryIndex memind=null;
        IndexSearcher memsearcher=null;
        if (useMemIndex && !measureIndexing) {
          memind=createMemoryIndex(doc);
          memsearcher=memind.createSearcher();
        }
        if (first) {
          IndexSearcher s=memind.createSearcher();
          TermDocs td=s.getIndexReader().termDocs(null);
          assertTrue(td.next());
          assertEquals(0,td.doc());
          assertEquals(1,td.freq());
          td.close();
          s.close();
          first=false;
        }
        RAMDirectory ramind=null;
        IndexSearcher ramsearcher=null;
        if (useRAMIndex && !measureIndexing) {
          ramind=createRAMIndex(doc);
          ramsearcher=new IndexSearcher(ramind);
        }
        for (int q=0; q < queries.length; q++) {
          try {
            Query query=parseQuery(queries[q]);
            for (int run=0; run < runs; run++) {
              float score1=0.0f;
              float score2=0.0f;
              if (useMemIndex && measureIndexing) {
                memind=createMemoryIndex(doc);
                memsearcher=memind.createSearcher();
              }
              if (useMemIndex)               score1=query(memsearcher,query);
              if (useRAMIndex && measureIndexing) {
                ramind=createRAMIndex(doc);
                ramsearcher=new IndexSearcher(ramind);
              }
              if (useRAMIndex)               score2=query(ramsearcher,query);
              if (useMemIndex && useRAMIndex) {
                if (verbose)                 System.out.println("diff=" + (score1 - score2) + ", query="+ queries[q]+ ", s1="+ score1+ ", s2="+ score2);
                if (score1 != score2 || score1 < 0.0f || score2 < 0.0f || score1 > 1.0f || score2 > 1.0f) {
                  throw new IllegalStateException("BUG DETECTED:" + (i * (q + 1)) + " at query="+ queries[q]+ ", file="+ file+ ", anal="+ analyzer);
                }
              }
            }
          }
 catch (          Throwable t) {
            if (t instanceof OutOfMemoryError)             t.printStackTrace();
            System.out.println("Fatal error at query=" + queries[q] + ", file="+ file+ ", anal="+ analyzer);
            throw t;
          }
        }
      }
    }
    long end=System.currentTimeMillis();
    System.out.println("\nsecs = " + ((end - start) / 1000.0f));
    System.out.println("queries/sec= " + (1.0f * runs * queries.length* analyzers.length* files.length / ((end - start) / 1000.0f)));
    float mb=(1.0f * bytes * queries.length* runs) / (1024.0f * 1024.0f);
    System.out.println("MB/sec = " + (mb / ((end - start) / 1000.0f)));
  }
  if (useMemIndex && useRAMIndex)   System.out.println("No bug found. done.");
 else   System.out.println("Done benchmarking (without checking correctness).");
}
