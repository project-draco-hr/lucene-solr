{
  float[] vals=new float[reader.maxDoc()];
  if (ffs.defVal != 0) {
    Arrays.fill(vals,ffs.defVal);
  }
  InputStream is;
  String fname="external_" + ffs.field.getName();
  try {
    is=VersionedFile.getLatestFile(ffs.dataDir,fname);
  }
 catch (  IOException e) {
    SolrCore.log.error("Error opening external value source file: " + e);
    return vals;
  }
  BufferedReader r=new BufferedReader(new InputStreamReader(is,IOUtils.CHARSET_UTF_8));
  String idName=ffs.keyField.getName();
  FieldType idType=ffs.keyField.getType();
  List<String> notFound=new ArrayList<>();
  int notFoundCount=0;
  int otherErrors=0;
  char delimiter='=';
  BytesRef internalKey=new BytesRef();
  try {
    TermsEnum termsEnum=MultiFields.getTerms(reader,idName).iterator(null);
    DocsEnum docsEnum=null;
    for (String line; (line=r.readLine()) != null; ) {
      int delimIndex=line.lastIndexOf(delimiter);
      if (delimIndex < 0)       continue;
      int endIndex=line.length();
      String key=line.substring(0,delimIndex);
      String val=line.substring(delimIndex + 1,endIndex);
      float fval;
      try {
        idType.readableToIndexed(key,internalKey);
        fval=Float.parseFloat(val);
      }
 catch (      Exception e) {
        if (++otherErrors <= 10) {
          SolrCore.log.error("Error loading external value source + fileName + " + e + (otherErrors < 10 ? "" : "\tSkipping future errors for this file."));
        }
        continue;
      }
      if (!termsEnum.seekExact(internalKey)) {
        if (notFoundCount < 10) {
          notFound.add(key);
        }
        notFoundCount++;
        continue;
      }
      docsEnum=termsEnum.docs(null,docsEnum,DocsEnum.FLAG_NONE);
      int doc;
      while ((doc=docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        vals[doc]=fval;
      }
    }
  }
 catch (  IOException e) {
    SolrCore.log.error("Error loading external value source: " + e);
  }
 finally {
    try {
      r.close();
    }
 catch (    Exception e) {
    }
  }
  SolrCore.log.info("Loaded external value source " + fname + (notFoundCount == 0 ? "" : " :" + notFoundCount + " missing keys "+ notFound));
  return vals;
}
