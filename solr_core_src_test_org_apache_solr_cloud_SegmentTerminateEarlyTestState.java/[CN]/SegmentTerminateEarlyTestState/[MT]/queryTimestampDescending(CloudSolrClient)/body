{
  TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());
  TestMiniSolrCloudCluster.assertTrue("numDocs=" + numDocs + " is not even",(numDocs % 2) == 0);
  final Long oddFieldValue=new Long(maxTimestampDocKeys.iterator().next().intValue() % 2);
  final SolrQuery query=new SolrQuery(oddField + ":" + oddFieldValue);
  query.setSort(timestampField,SolrQuery.ORDER.desc);
  query.setFields(keyField,oddField,timestampField);
  query.setRows(1);
  final QueryResponse rsp=cloudSolrClient.query(query);
  TestMiniSolrCloudCluster.assertEquals("numFound",numDocs / 2,rsp.getResults().getNumFound());
  if (rsp.getResults().getNumFound() > 0) {
    final SolrDocument solrDocument0=rsp.getResults().get(0);
    TestMiniSolrCloudCluster.assertTrue(keyField + " of (" + solrDocument0+ ") is not in maxTimestampDocKeys("+ maxTimestampDocKeys+ ")",maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));
    TestMiniSolrCloudCluster.assertEquals(oddField,oddFieldValue,solrDocument0.getFieldValue(oddField));
  }
  TestMiniSolrCloudCluster.assertNull("responseHeader.segmentTerminatedEarly present in " + rsp.getResponseHeader(),rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));
}
