{
  SimpleOrderedMap<Object> finfo=new SimpleOrderedMap<Object>();
  for (  Object o : doc.getFields()) {
    Fieldable fieldable=(Fieldable)o;
    SimpleOrderedMap<Object> f=new SimpleOrderedMap<Object>();
    SchemaField sfield=schema.getFieldOrNull(fieldable.name());
    FieldType ftype=(sfield == null) ? null : sfield.getType();
    f.add("type",(ftype == null) ? null : ftype.getTypeName());
    f.add("schema",getFieldFlags(sfield));
    f.add("flags",getFieldFlags(fieldable));
    Term t=new Term(fieldable.name(),fieldable.stringValue());
    f.add("value",(ftype == null) ? null : ftype.toExternal(fieldable));
    f.add("internal",fieldable.stringValue());
    f.add("boost",fieldable.getBoost());
    f.add("docFreq",reader.docFreq(t));
    if (fieldable.isTermVectorStored()) {
      try {
        TermFreqVector v=reader.getTermFreqVector(docId,fieldable.name());
        if (v != null) {
          SimpleOrderedMap<Integer> tfv=new SimpleOrderedMap<Integer>();
          for (int i=0; i < v.size(); i++) {
            tfv.add(v.getTerms()[i],v.getTermFrequencies()[i]);
          }
          f.add("termVector",tfv);
        }
      }
 catch (      Exception ex) {
        log.log(Level.WARNING,"error writing term vector",ex);
      }
    }
    finfo.add(fieldable.name(),f);
  }
  return finfo;
}
