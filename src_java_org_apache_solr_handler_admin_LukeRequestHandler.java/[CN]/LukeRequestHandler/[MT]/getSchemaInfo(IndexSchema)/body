{
  Map<String,List<String>> typeusemap=new HashMap<String,List<String>>();
  SimpleOrderedMap<Object> fields=new SimpleOrderedMap<Object>();
  for (  SchemaField f : schema.getFields().values()) {
    FieldType ft=f.getType();
    SimpleOrderedMap<Object> field=new SimpleOrderedMap<Object>();
    field.add("type",ft.getTypeName());
    field.add("flags",getFieldFlags(f));
    if (f.isRequired()) {
      field.add("required",f.isRequired());
    }
    if (f.getDefaultValue() != null) {
      field.add("default",f.getDefaultValue());
    }
    fields.add(f.getName(),field);
    List<String> v=typeusemap.get(ft.getTypeName());
    if (v == null) {
      v=new ArrayList<String>();
    }
    v.add(f.getName());
    typeusemap.put(ft.getTypeName(),v);
  }
  SimpleOrderedMap<Object> types=new SimpleOrderedMap<Object>();
  for (  FieldType ft : schema.getFieldTypes().values()) {
    SimpleOrderedMap<Object> field=new SimpleOrderedMap<Object>();
    field.add("fields",typeusemap.get(ft.getTypeName()));
    field.add("tokenized",ft.isTokenized());
    field.add("className",ft.getClass().getName());
    field.add("analyzer",ft.getAnalyzer().getClass().getName());
    types.add(ft.getTypeName(),field);
  }
  SimpleOrderedMap<Object> finfo=new SimpleOrderedMap<Object>();
  finfo.add("fields",fields);
  finfo.add("types",types);
  return finfo;
}
