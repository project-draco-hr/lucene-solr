{
  assertQuery(query,filter,null);
  assertQuery(query,filter,Sort.RELEVANCE);
  assertQuery(query,filter,Sort.INDEXORDER);
  for (int rev=0; rev < 2; rev++) {
    boolean reversed=rev == 1;
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("byte",SortField.Type.BYTE,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("short",SortField.Type.SHORT,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("int",SortField.Type.INT,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("long",SortField.Type.LONG,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("float",SortField.Type.FLOAT,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("double",SortField.Type.DOUBLE,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("bytes",SortField.Type.STRING,reversed)}));
    assertQuery(query,filter,new Sort(new SortField[]{new SortField("bytesval",SortField.Type.STRING_VAL,reversed)}));
    if (supportsDocValues) {
      assertQuery(query,filter,new Sort(new SortField[]{useDocValues(new SortField("intdocvalues",SortField.Type.INT,reversed))}));
      assertQuery(query,filter,new Sort(new SortField[]{useDocValues(new SortField("floatdocvalues",SortField.Type.FLOAT,reversed))}));
      assertQuery(query,filter,new Sort(new SortField[]{useDocValues(new SortField("sortedbytesdocvalues",SortField.Type.STRING,reversed))}));
      assertQuery(query,filter,new Sort(new SortField[]{useDocValues(new SortField("sortedbytesdocvaluesval",SortField.Type.STRING_VAL,reversed))}));
      assertQuery(query,filter,new Sort(new SortField[]{useDocValues(new SortField("straightbytesdocvalues",SortField.Type.STRING_VAL,reversed))}));
    }
  }
}
