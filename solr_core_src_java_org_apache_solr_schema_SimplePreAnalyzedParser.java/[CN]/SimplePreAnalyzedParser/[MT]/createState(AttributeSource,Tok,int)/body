{
  a.clearAttributes();
  CharTermAttribute termAtt=a.addAttribute(CharTermAttribute.class);
  char[] tokChars=state.token.toString().toCharArray();
  termAtt.copyBuffer(tokChars,0,tokChars.length);
  int tokenStart=tokenEnd - state.token.length();
  for (  Entry<String,String> e : state.attr.entrySet()) {
    String k=e.getKey();
    if (k.equals("i")) {
      int incr=Integer.parseInt(e.getValue());
      PositionIncrementAttribute posIncr=a.addAttribute(PositionIncrementAttribute.class);
      posIncr.setPositionIncrement(incr);
    }
 else     if (k.equals("s")) {
      tokenStart=Integer.parseInt(e.getValue());
    }
 else     if (k.equals("e")) {
      tokenEnd=Integer.parseInt(e.getValue());
    }
 else     if (k.equals("y")) {
      TypeAttribute type=a.addAttribute(TypeAttribute.class);
      type.setType(e.getValue());
    }
 else     if (k.equals("f")) {
      FlagsAttribute flags=a.addAttribute(FlagsAttribute.class);
      int f=Integer.parseInt(e.getValue(),16);
      flags.setFlags(f);
    }
 else     if (k.equals("p")) {
      PayloadAttribute p=a.addAttribute(PayloadAttribute.class);
      byte[] data=hexToBytes(e.getValue());
      if (data != null && data.length > 0) {
        p.setPayload(new Payload(data));
      }
    }
 else {
    }
  }
  OffsetAttribute offset=a.addAttribute(OffsetAttribute.class);
  offset.setOffset(tokenStart,tokenEnd);
  State resState=a.captureState();
  a.clearAttributes();
  return resState;
}
