{
  LuceneTestCase.assumeFalse("HDFS tests were disabled by -Dtests.disableHdfs",Boolean.parseBoolean(System.getProperty("tests.disableHdfs","false")));
  savedLocale=Locale.getDefault();
  Locale.setDefault(Locale.ENGLISH);
  int dataNodes=2;
  Configuration conf=new Configuration();
  conf.set("dfs.block.access.token.enable","false");
  conf.set("dfs.permissions.enabled","false");
  conf.set("hadoop.security.authentication","simple");
  conf.set("hdfs.minidfs.basedir",dir + File.separator + "hdfsBaseDir");
  conf.set("dfs.namenode.name.dir",dir + File.separator + "nameNodeNameDir");
  System.setProperty("test.build.data",dir + File.separator + "hdfs"+ File.separator+ "build");
  System.setProperty("test.cache.data",dir + File.separator + "hdfs"+ File.separator+ "cache");
  System.setProperty("solr.lock.type","hdfs");
  System.setProperty("solr.hdfs.blockcache.global",Boolean.toString(LuceneTestCase.random().nextBoolean()));
  final MiniDFSCluster dfsCluster=new MiniDFSCluster(conf,dataNodes,true,null);
  dfsCluster.waitActive();
  System.setProperty("solr.hdfs.home",getDataDir(dfsCluster,"solr_hdfs_home"));
  NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(),false);
  int rnd=LuceneTestCase.random().nextInt(10000);
  Timer timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());
    }
  }
,rnd);
  timers.put(dfsCluster,timer);
  SolrTestCaseJ4.useFactory("org.apache.solr.core.HdfsDirectoryFactory");
  return dfsCluster;
}
