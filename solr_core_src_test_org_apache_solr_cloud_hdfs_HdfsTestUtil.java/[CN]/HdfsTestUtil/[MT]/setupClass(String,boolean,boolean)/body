{
  LuceneTestCase.assumeFalse("HDFS tests were disabled by -Dtests.disableHdfs",Boolean.parseBoolean(System.getProperty("tests.disableHdfs","false")));
  savedLocale=Locale.getDefault();
  Locale.setDefault(Locale.ENGLISH);
  if (!HA_TESTING_ENABLED)   haTesting=false;
  int dataNodes=2;
  Configuration conf=new Configuration();
  conf.set("dfs.block.access.token.enable","false");
  conf.set("dfs.permissions.enabled","false");
  conf.set("hadoop.security.authentication","simple");
  conf.set("hdfs.minidfs.basedir",dir + File.separator + "hdfsBaseDir");
  conf.set("dfs.namenode.name.dir",dir + File.separator + "nameNodeNameDir");
  conf.setBoolean("fs.hdfs.impl.disable.cache",true);
  System.setProperty("test.build.data",dir + File.separator + "hdfs"+ File.separator+ "build");
  System.setProperty("test.cache.data",dir + File.separator + "hdfs"+ File.separator+ "cache");
  System.setProperty("solr.lock.type","hdfs");
  System.setProperty("solr.hdfs.blockcache.global",Boolean.toString(LuceneTestCase.random().nextBoolean()));
  final MiniDFSCluster dfsCluster;
  if (!haTesting) {
    dfsCluster=new MiniDFSCluster(conf,dataNodes,true,null);
    System.setProperty("solr.hdfs.home",getDataDir(dfsCluster,"solr_hdfs_home"));
  }
 else {
    dfsCluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(dataNodes).build();
    Configuration haConfig=getClientConfiguration(dfsCluster);
    HdfsUtil.TEST_CONF=haConfig;
    System.setProperty("solr.hdfs.home",getDataDir(dfsCluster,"solr_hdfs_home"));
  }
  dfsCluster.waitActive();
  if (haTesting)   dfsCluster.transitionToActive(0);
  int rndMode=LuceneTestCase.random().nextInt(3);
  if (safeModeTesting && rndMode == 1) {
    NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(),false);
    int rnd=LuceneTestCase.random().nextInt(10000);
    Timer timer=new Timer();
    timers.put(dfsCluster,timer);
    timer.schedule(new TimerTask(){
      @Override public void run(){
        NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());
      }
    }
,rnd);
  }
 else   if (haTesting && rndMode == 2) {
    int rnd=LuceneTestCase.random().nextInt(30000);
    Timer timer=new Timer();
    timers.put(dfsCluster,timer);
    timer.schedule(new TimerTask(){
      @Override public void run(){
      }
    }
,rnd);
  }
 else {
    URI uri=dfsCluster.getURI();
    Path hdfsDirPath=new Path(uri.toString() + "/solr/collection1/core_node1/data/tlog/tlog.0000000000000000000");
    badTlogOutStreamFs=FileSystem.get(hdfsDirPath.toUri(),conf);
    badTlogOutStream=badTlogOutStreamFs.create(hdfsDirPath);
  }
  SolrTestCaseJ4.useFactory("org.apache.solr.core.HdfsDirectoryFactory");
  return dfsCluster;
}
