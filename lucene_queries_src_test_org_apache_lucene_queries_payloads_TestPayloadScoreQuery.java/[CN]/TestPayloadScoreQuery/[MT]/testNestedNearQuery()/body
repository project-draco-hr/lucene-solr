{
  SpanNearQuery q=new SpanNearQuery(new SpanQuery[]{new SpanOrQuery(new SpanTermQuery(new Term("field","one")),new SpanTermQuery(new Term("field","hundred"))),new SpanNearQuery(new SpanQuery[]{new SpanTermQuery(new Term("field","twenty")),new SpanTermQuery(new Term("field","two"))},0,true)},1,true);
  searcher.setSimilarity(new MultiplyingSimilarity());
  try {
    checkQuery(q,new MaxPayloadFunction(),new int[]{122,222},new float[]{41.802513122558594f,34.13160705566406f});
    checkQuery(q,new MinPayloadFunction(),new int[]{222,122},new float[]{34.13160705566406f,20.901256561279297f});
    checkQuery(q,new AveragePayloadFunction(),new int[]{122,222},new float[]{38.3189697265625f,34.13160705566406f});
    checkQuery(q,new MaxPayloadFunction(),false,new int[]{122,222},new float[]{4.0f,4.0f});
    checkQuery(q,new MinPayloadFunction(),false,new int[]{222,122},new float[]{4.0f,2.0f});
    checkQuery(q,new AveragePayloadFunction(),false,new int[]{222,122},new float[]{4.0f,3.666666f});
  }
  finally {
    searcher.setSimilarity(similarity);
  }
}
