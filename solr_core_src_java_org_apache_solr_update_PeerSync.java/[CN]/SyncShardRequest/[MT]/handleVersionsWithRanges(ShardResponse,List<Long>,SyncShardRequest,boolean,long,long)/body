{
  List<String> rangesToRequest=new ArrayList<>();
  int ourUpdatesIndex=ourUpdates.size() - 1;
  int otherUpdatesIndex=otherVersions.size() - 1;
  long totalRequestedVersions=0;
  while (otherUpdatesIndex >= 0) {
    if (ourUpdatesIndex < 0) {
      String range=otherVersions.get(otherUpdatesIndex) + "..." + otherVersions.get(0);
      rangesToRequest.add(range);
      totalRequestedVersions+=otherUpdatesIndex + 1;
      break;
    }
    if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold)     break;
    if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {
      ourUpdatesIndex--;
      otherUpdatesIndex--;
    }
 else     if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {
      ourUpdatesIndex--;
    }
 else {
      long rangeStart=otherVersions.get(otherUpdatesIndex);
      while ((otherUpdatesIndex < otherVersions.size()) && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {
        otherUpdatesIndex--;
        totalRequestedVersions++;
      }
      rangesToRequest.add(rangeStart + "..." + otherVersions.get(otherUpdatesIndex + 1));
    }
  }
  sreq.requestedRanges=rangesToRequest;
  sreq.totalRequestedUpdates=totalRequestedVersions;
  if (rangesToRequest.isEmpty()) {
    log.info(msg() + " No additional versions requested. ourLowThreshold=" + ourLowThreshold+ " otherHigh="+ otherHigh+ " ourHighest="+ ourHighest+ " otherHighest="+ otherHighest);
    if (doFingerprint) {
      sreq.doFingerprintComparison=true;
    }
    return true;
  }
  if (totalRequestedVersions > maxUpdates) {
    log.info(msg() + " Failing due to needing too many updates:" + maxUpdates);
    return false;
  }
  String rangesToRequestStr=rangesToRequest.stream().collect(Collectors.joining(","));
  return requestUpdates(srsp,rangesToRequestStr,totalRequestedVersions);
}
