{
  List<Long> otherVersions=(List<Long>)srsp.getSolrResponse().getResponse().get("versions");
  SyncShardRequest sreq=(SyncShardRequest)srsp.getShardRequest();
  sreq.reportedVersions=otherVersions;
  log.info(msg() + " Received " + otherVersions.size()+ " versions from "+ sreq.shards[0]);
  if (otherVersions.size() == 0) {
    return getNoVersionsIsSuccess;
  }
  boolean completeList=otherVersions.size() < nUpdates;
  Collections.sort(otherVersions,absComparator);
  if (debug) {
    log.debug(msg() + " sorted versions from " + sreq.shards[0]+ " = "+ otherVersions);
  }
  long otherHigh=percentile(otherVersions,.2f);
  long otherLow=percentile(otherVersions,.8f);
  if (ourHighThreshold < otherLow) {
    log.info(msg() + " Our versions are too old. ourHighThreshold=" + ourHighThreshold+ " otherLowThreshold="+ otherLow);
    return false;
  }
  if (ourLowThreshold > otherHigh) {
    log.info(msg() + " Our versions are newer. ourLowThreshold=" + ourLowThreshold+ " otherHigh="+ otherHigh);
    return true;
  }
  List<Long> toRequest=new ArrayList<Long>();
  for (  Long otherVersion : otherVersions) {
    if (!completeList && Math.abs(otherVersion) < ourLowThreshold)     break;
    if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {
      continue;
    }
    toRequest.add(otherVersion);
    requestedUpdateSet.add(otherVersion);
  }
  sreq.requestedUpdates=toRequest;
  if (toRequest.isEmpty()) {
    log.info(msg() + " Our versions are newer. ourLowThreshold=" + ourLowThreshold+ " otherHigh="+ otherHigh);
    return true;
  }
  if (toRequest.size() > maxUpdates) {
    log.info(msg() + " Failing due to needing too many updates:" + maxUpdates);
    return false;
  }
  return requestUpdates(srsp,toRequest);
}
