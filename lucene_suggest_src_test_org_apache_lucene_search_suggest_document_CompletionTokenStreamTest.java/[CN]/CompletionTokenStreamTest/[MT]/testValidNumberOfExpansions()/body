{
  SynonymMap.Builder builder=new SynonymMap.Builder(true);
  for (int i=0; i < 256; i++) {
    builder.add(new CharsRef("" + (i + 1)),new CharsRef("" + (1000 + (i + 1))),true);
  }
  StringBuilder valueBuilder=new StringBuilder();
  for (int i=0; i < 8; i++) {
    valueBuilder.append(i + 1);
    valueBuilder.append(" ");
  }
  MockTokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,true);
  tokenizer.setReader(new StringReader(valueBuilder.toString()));
  SynonymFilter filter=new SynonymFilter(tokenizer,builder.build(),true);
  CompletionTokenStream completionTokenStream=new CompletionTokenStream(filter);
  completionTokenStream.setPayload(new BytesRef());
  PayloadAttrToTypeAttrFilter stream=new PayloadAttrToTypeAttrFilter(completionTokenStream);
  stream.reset();
  CompletionTokenStream.BytesRefBuilderTermAttribute attr=stream.addAttribute(CompletionTokenStream.BytesRefBuilderTermAttribute.class);
  PositionIncrementAttribute posAttr=stream.addAttribute(PositionIncrementAttribute.class);
  int maxPos=0;
  int count=0;
  while (stream.incrementToken()) {
    count++;
    assertNotNull(attr.getBytesRef());
    assertTrue(attr.getBytesRef().length > 0);
    maxPos+=posAttr.getPositionIncrement();
  }
  stream.close();
  assertEquals(count,256);
  assertEquals(count,maxPos);
}
