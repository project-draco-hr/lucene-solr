{
  SynonymMap.Builder builder=new SynonymMap.Builder(true);
  builder.add(new CharsRef("mykeyword"),new CharsRef("mysynonym"),true);
  Tokenizer tokenStream=new MockTokenizer(MockTokenizer.WHITESPACE,true);
  String input="mykeyword another keyword";
  tokenStream.setReader(new StringReader(input));
  SynonymFilter filter=new SynonymFilter(tokenStream,builder.build(),true);
  BytesRef payload=new BytesRef("payload");
  CompletionTokenStream completionTokenStream=new CompletionTokenStream(filter,true,false,100);
  completionTokenStream.setPayload(payload);
  PayloadAttrToTypeAttrFilter stream=new PayloadAttrToTypeAttrFilter(completionTokenStream);
  String[] expectedOutputs=new String[2];
  CharsRefBuilder expectedOutput=new CharsRefBuilder();
  expectedOutput.append("mykeyword");
  expectedOutput.append(((char)CompletionAnalyzer.SEP_LABEL));
  expectedOutput.append("another");
  expectedOutput.append(((char)CompletionAnalyzer.SEP_LABEL));
  expectedOutput.append("keyword");
  expectedOutputs[0]=expectedOutput.toCharsRef().toString();
  expectedOutput.clear();
  expectedOutput.append("mysynonym");
  expectedOutput.append(((char)CompletionAnalyzer.SEP_LABEL));
  expectedOutput.append("another");
  expectedOutput.append(((char)CompletionAnalyzer.SEP_LABEL));
  expectedOutput.append("keyword");
  expectedOutputs[1]=expectedOutput.toCharsRef().toString();
  assertTokenStreamContents(stream,expectedOutputs,null,null,new String[]{payload.utf8ToString(),payload.utf8ToString()},new int[]{1,1},null,null);
}
