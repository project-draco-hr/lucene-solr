{
  final int length;
  if (TEST_NIGHTLY) {
    length=RandomInts.randomIntBetween(random(),140000000,400000000);
  }
 else {
    length=RandomInts.randomIntBetween(random(),140000000,200000000);
  }
  final PackedInts.Mutable arr=generateWorstCaseArray(length);
  new TimSorter(0){
    @Override protected void swap(    int i,    int j){
      final long tmp=arr.get(i);
      arr.set(i,arr.get(j));
      arr.set(j,tmp);
    }
    @Override protected int compare(    int i,    int j){
      return Long.compare(arr.get(i),arr.get(j));
    }
    @Override protected void save(    int i,    int len){
      throw new UnsupportedOperationException();
    }
    @Override protected void restore(    int i,    int j){
      throw new UnsupportedOperationException();
    }
    @Override protected void copy(    int src,    int dest){
      arr.set(dest,arr.get(src));
    }
    @Override protected int compareSaved(    int i,    int j){
      throw new UnsupportedOperationException();
    }
  }
.sort(0,length);
}
