{
  SimpleOrderedMap<Object> namedPropertyValues=new SimpleOrderedMap<Object>();
  namedPropertyValues.add(TYPE_NAME,getTypeName());
  namedPropertyValues.add(CLASS_NAME,normalizeSPIname(getClass().getName()));
  if (showDefaults) {
    Map<String,String> fieldTypeArgs=getNonFieldPropertyArgs();
    if (null != fieldTypeArgs) {
      for (      String key : fieldTypeArgs.keySet()) {
        namedPropertyValues.add(key,fieldTypeArgs.get(key));
      }
    }
    if (this instanceof TextField) {
      namedPropertyValues.add(AUTO_GENERATE_PHRASE_QUERIES,((TextField)this).getAutoGeneratePhraseQueries());
    }
    namedPropertyValues.add(getPropertyName(INDEXED),hasProperty(INDEXED));
    namedPropertyValues.add(getPropertyName(STORED),hasProperty(STORED));
    namedPropertyValues.add(getPropertyName(DOC_VALUES),hasProperty(DOC_VALUES));
    namedPropertyValues.add(getPropertyName(STORE_TERMVECTORS),hasProperty(STORE_TERMVECTORS));
    namedPropertyValues.add(getPropertyName(STORE_TERMPOSITIONS),hasProperty(STORE_TERMPOSITIONS));
    namedPropertyValues.add(getPropertyName(STORE_TERMOFFSETS),hasProperty(STORE_TERMOFFSETS));
    namedPropertyValues.add(getPropertyName(OMIT_NORMS),hasProperty(OMIT_NORMS));
    namedPropertyValues.add(getPropertyName(OMIT_TF_POSITIONS),hasProperty(OMIT_TF_POSITIONS));
    namedPropertyValues.add(getPropertyName(OMIT_POSITIONS),hasProperty(OMIT_POSITIONS));
    namedPropertyValues.add(getPropertyName(STORE_OFFSETS),hasProperty(STORE_OFFSETS));
    namedPropertyValues.add(getPropertyName(MULTIVALUED),hasProperty(MULTIVALUED));
    if (hasProperty(SORT_MISSING_FIRST)) {
      namedPropertyValues.add(getPropertyName(SORT_MISSING_FIRST),true);
    }
 else     if (hasProperty(SORT_MISSING_LAST)) {
      namedPropertyValues.add(getPropertyName(SORT_MISSING_LAST),true);
    }
    namedPropertyValues.add(getPropertyName(TOKENIZED),isTokenized());
  }
 else {
    Set<String> fieldProperties=new HashSet<String>();
    for (    String propertyName : FieldProperties.propertyNames) {
      fieldProperties.add(propertyName);
    }
    for (    String key : args.keySet()) {
      if (fieldProperties.contains(key)) {
        namedPropertyValues.add(key,StrUtils.parseBool(args.get(key)));
      }
 else {
        namedPropertyValues.add(key,args.get(key));
      }
    }
  }
  if (isExplicitAnalyzer()) {
    String analyzerProperty=isExplicitQueryAnalyzer() ? INDEX_ANALYZER : ANALYZER;
    namedPropertyValues.add(analyzerProperty,getAnalyzerProperties(getAnalyzer()));
  }
  if (isExplicitQueryAnalyzer()) {
    String analyzerProperty=isExplicitAnalyzer() ? QUERY_ANALYZER : ANALYZER;
    namedPropertyValues.add(analyzerProperty,getAnalyzerProperties(getQueryAnalyzer()));
  }
  if (this instanceof TextField) {
    if (((TextField)this).isExplicitMultiTermAnalyzer()) {
      namedPropertyValues.add(MULTI_TERM_ANALYZER,getAnalyzerProperties(((TextField)this).getMultiTermAnalyzer()));
    }
  }
  if (null != getSimilarity()) {
    namedPropertyValues.add(SIMILARITY,getSimilarityProperties());
  }
  if (null != getPostingsFormat()) {
    namedPropertyValues.add(POSTINGS_FORMAT,getPostingsFormat());
  }
  if (null != getDocValuesFormat()) {
    namedPropertyValues.add(DOC_VALUES_FORMAT,getDocValuesFormat());
  }
  return namedPropertyValues;
}
