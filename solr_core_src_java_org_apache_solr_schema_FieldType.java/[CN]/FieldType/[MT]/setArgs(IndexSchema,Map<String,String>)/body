{
  properties=(STORED | INDEXED);
  float schemaVersion=schema.getVersion();
  if (schemaVersion < 1.1f)   properties|=MULTIVALUED;
  if (schemaVersion > 1.1f)   properties|=OMIT_TF_POSITIONS;
  if (schemaVersion < 1.3) {
    args.remove("compressThreshold");
  }
  this.args=Collections.unmodifiableMap(args);
  Map<String,String> initArgs=new HashMap<String,String>(args);
  trueProperties=FieldProperties.parseProperties(initArgs,true);
  falseProperties=FieldProperties.parseProperties(initArgs,false);
  properties&=~falseProperties;
  properties|=trueProperties;
  for (  String prop : FieldProperties.propertyNames)   initArgs.remove(prop);
  init(schema,initArgs);
  String positionInc=initArgs.get(POSITION_INCREMENT_GAP);
  if (positionInc != null) {
    Analyzer analyzer=getAnalyzer();
    if (analyzer instanceof SolrAnalyzer) {
      ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));
    }
 else {
      throw new RuntimeException("Can't set " + POSITION_INCREMENT_GAP + " on custom analyzer "+ analyzer.getClass());
    }
    analyzer=getQueryAnalyzer();
    if (analyzer instanceof SolrAnalyzer) {
      ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));
    }
 else {
      throw new RuntimeException("Can't set " + POSITION_INCREMENT_GAP + " on custom analyzer "+ analyzer.getClass());
    }
    initArgs.remove(POSITION_INCREMENT_GAP);
  }
  this.postingsFormat=initArgs.remove(POSTINGS_FORMAT);
  this.docValuesFormat=initArgs.remove(DOC_VALUES_FORMAT);
  if (initArgs.size() > 0) {
    throw new RuntimeException("schema fieldtype " + typeName + "("+ this.getClass().getName()+ ")"+ " invalid arguments:"+ initArgs);
  }
}
