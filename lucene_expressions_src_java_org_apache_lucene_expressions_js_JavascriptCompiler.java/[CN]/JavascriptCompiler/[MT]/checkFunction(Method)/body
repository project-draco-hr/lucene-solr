{
  final MethodType type;
  try {
    type=MethodHandles.publicLookup().unreflect(method).type();
  }
 catch (  IllegalAccessException iae) {
    throw new IllegalArgumentException(method + " is not accessible (declaring class or method not public).");
  }
  if (!Modifier.isStatic(method.getModifiers())) {
    throw new IllegalArgumentException(method + " is not static.");
  }
  for (int arg=0, arity=type.parameterCount(); arg < arity; arg++) {
    if (type.parameterType(arg) != double.class) {
      throw new IllegalArgumentException(method + " must take only double parameters.");
    }
  }
  if (type.returnType() != double.class) {
    throw new IllegalArgumentException(method + " does not return a double.");
  }
}
