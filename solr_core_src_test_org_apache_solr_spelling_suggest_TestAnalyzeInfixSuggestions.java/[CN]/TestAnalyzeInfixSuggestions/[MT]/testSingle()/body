{
  assertQ(req("qt",URI_DEFAULT,"q","japan",SpellingParams.SPELLCHECK_COUNT,"1"),"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='japan']/int[@name='numFound'][.='1']","//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='japan']/arr[@name='suggestion']/str[1][.='<b>Japan</b>ese Autocomplete and <b>Japan</b>ese Highlighter broken']");
  assertQ(req("qt",URI_DEFAULT,"q","high",SpellingParams.SPELLCHECK_COUNT,"1"),"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='high']/int[@name='numFound'][.='1']","//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='high']/arr[@name='suggestion']/str[1][.='Japanese Autocomplete and Japanese <b>High</b>lighter broken']");
  assertQ(req("qt",URI_SUGGEST_DEFAULT,"q","japan",SuggesterParams.SUGGEST_COUNT,"1",SuggesterParams.SUGGEST_DICT,"analyzing_infix_suggest_default"),"//lst[@name='suggest']/lst[@name='analyzing_infix_suggest_default']/lst[@name='japan']/int[@name='numFound'][.='1']","//lst[@name='suggest']/lst[@name='analyzing_infix_suggest_default']/lst[@name='japan']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='<b>Japan</b>ese Autocomplete and <b>Japan</b>ese Highlighter broken']");
  assertQ(req("qt",URI_SUGGEST_DEFAULT,"q","high",SuggesterParams.SUGGEST_COUNT,"1",SuggesterParams.SUGGEST_DICT,"analyzing_infix_suggest_default"),"//lst[@name='suggest']/lst[@name='analyzing_infix_suggest_default']/lst[@name='high']/int[@name='numFound'][.='1']","//lst[@name='suggest']/lst[@name='analyzing_infix_suggest_default']/lst[@name='high']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='Japanese Autocomplete and Japanese <b>High</b>lighter broken']");
}
