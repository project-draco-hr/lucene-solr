{
  getSolrServer();
  SolrInputDocument doc=new SolrInputDocument();
  doc.setField("id","0");
  doc.setField("name","faith hope and love");
  server.add(doc);
  doc=new SolrInputDocument();
  doc.setField("id","1");
  doc.setField("name","faith hope and loaves");
  server.add(doc);
  doc=new SolrInputDocument();
  doc.setField("id","2");
  doc.setField("name","fat hops and loaves");
  server.add(doc);
  doc=new SolrInputDocument();
  doc.setField("id","3");
  doc.setField("name","faith of homer");
  server.add(doc);
  doc=new SolrInputDocument();
  doc.setField("id","4");
  doc.setField("name","fat of homer");
  server.add(doc);
  server.commit(true,true);
  SolrQuery query=new SolrQuery("name:(+fauth +home +loane)");
  query.set(CommonParams.QT,"/spell");
  query.set("spellcheck",true);
  query.set(SpellingParams.SPELLCHECK_BUILD,true);
  query.set(SpellingParams.SPELLCHECK_COUNT,10);
  query.set(SpellingParams.SPELLCHECK_COLLATE,true);
  QueryRequest request=new QueryRequest(query);
  SpellCheckResponse response=request.process(server).getSpellCheckResponse();
  response=request.process(server).getSpellCheckResponse();
  assertTrue("name:(+faith +homer +loaves)".equals(response.getCollatedResult()));
  query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS,true);
  query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES,10);
  query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS,2);
  request=new QueryRequest(query);
  response=request.process(server).getSpellCheckResponse();
  assertTrue("name:(+faith +hope +love)".equals(response.getCollatedResult()) || "name:(+faith +hope +loaves)".equals(response.getCollatedResult()));
  List<Collation> collations=response.getCollatedResults();
  assertEquals(2,collations.size());
  for (  Collation collation : collations) {
    assertTrue("name:(+faith +hope +love)".equals(collation.getCollationQueryString()) || "name:(+faith +hope +loaves)".equals(collation.getCollationQueryString()));
    assertTrue(collation.getNumberOfHits() == 1);
    List<Correction> misspellingsAndCorrections=collation.getMisspellingsAndCorrections();
    assertTrue(misspellingsAndCorrections.size() == 3);
    for (    Correction correction : misspellingsAndCorrections) {
      if ("fauth".equals(correction.getOriginal())) {
        assertTrue("faith".equals(correction.getCorrection()));
      }
 else       if ("home".equals(correction.getOriginal())) {
        assertTrue("hope".equals(correction.getCorrection()));
      }
 else       if ("loane".equals(correction.getOriginal())) {
        assertTrue("love".equals(correction.getCorrection()) || "loaves".equals(correction.getCorrection()));
      }
 else {
        fail("Original Word Should have been either fauth, home or loane.");
      }
    }
  }
  query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS,false);
  response=request.process(server).getSpellCheckResponse();
{
    collations=response.getCollatedResults();
    assertEquals(2,collations.size());
    String collation1=collations.get(0).getCollationQueryString();
    String collation2=collations.get(1).getCollationQueryString();
    assertFalse(collation1 + " equals " + collation2,collation1.equals(collation2));
    for (    Collation collation : collations) {
      assertTrue("name:(+faith +hope +love)".equals(collation.getCollationQueryString()) || "name:(+faith +hope +loaves)".equals(collation.getCollationQueryString()));
    }
  }
}
