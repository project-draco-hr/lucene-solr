{
  DirectUpdateHandler2.commitOnClose=false;
  final Semaphore logReplay=new Semaphore(0);
  final Semaphore logReplayFinish=new Semaphore(0);
  UpdateLog.testing_logReplayHook=new Runnable(){
    @Override public void run(){
      try {
        assertTrue(logReplay.tryAcquire(timeout,TimeUnit.SECONDS));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  UpdateLog.testing_logReplayFinishHook=new Runnable(){
    @Override public void run(){
      logReplayFinish.release();
    }
  }
;
  SolrQueryRequest req=req();
  UpdateHandler uhandler=req.getCore().getUpdateHandler();
  UpdateLog ulog=uhandler.getUpdateLog();
  try {
    clearIndex();
    assertU(commit());
    assertEquals(UpdateLog.State.ACTIVE,ulog.getState());
    ulog.bufferUpdates();
    assertEquals(UpdateLog.State.BUFFERING,ulog.getState());
    Future<UpdateLog.RecoveryInfo> rinfoFuture=ulog.applyBufferedUpdates();
    assertTrue(rinfoFuture == null);
    assertEquals(UpdateLog.State.ACTIVE,ulog.getState());
    ulog.bufferUpdates();
    assertEquals(UpdateLog.State.BUFFERING,ulog.getState());
    updateJ(jsonAdd(sdoc("id","1","_version_","1010")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonAdd(sdoc("id","11","_version_","1015")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonDelQ("id:1 id:11 id:2 id:3"),params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-1017"));
    updateJ(jsonAdd(sdoc("id","2","_version_","1020")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonAdd(sdoc("id","3","_version_","1030")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    deleteAndGetVersion("1",params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-2010"));
    assertJQ(req("qt","/get","getVersions","6"),"=={'versions':[-2010,1030,1020,-1017,1015,1010]}");
    assertU(commit());
    assertJQ(req("qt","/get","getVersions","6"),"=={'versions':[-2010,1030,1020,-1017,1015,1010]}");
    assertJQ(req("q","*:*"),"/response/numFound==0");
    assertJQ(req("qt","/get","id","3"),"=={'doc':null}");
    rinfoFuture=ulog.applyBufferedUpdates();
    assertTrue(rinfoFuture != null);
    assertEquals(UpdateLog.State.APPLYING_BUFFERED,ulog.getState());
    logReplay.release(1000);
    UpdateLog.RecoveryInfo rinfo=rinfoFuture.get();
    assertEquals(UpdateLog.State.ACTIVE,ulog.getState());
    assertJQ(req("qt","/get","getVersions","6"),"=={'versions':[-2010,1030,1020,-1017,1015,1010]}");
    assertJQ(req("q","*:*"),"/response/numFound==2");
    ulog.bufferUpdates();
    assertEquals(UpdateLog.State.BUFFERING,ulog.getState());
    Long ver=getVer(req("qt","/get","id","3"));
    assertEquals(1030L,ver.longValue());
    updateJ(jsonAdd(sdoc("id","3","_version_","3")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonAdd(sdoc("id","4","_version_","1040")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    deleteAndGetVersion("4",params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-940"));
    updateJ(jsonAdd(sdoc("id","6","_version_","1060")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonAdd(sdoc("id","5","_version_","1050")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ(jsonAdd(sdoc("id","8","_version_","1080")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    updateJ("{\"delete\": { \"query\":\"id:2 OR id:8\" }}",params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-3000"));
    assertJQ(req("qt","/get","getVersions","13"),"=={'versions':[-3000,1080,1050,1060,-940,1040,3,-2010,1030,1020,-1017,1015,1010]}");
    logReplay.drainPermits();
    rinfoFuture=ulog.applyBufferedUpdates();
    assertTrue(rinfoFuture != null);
    assertEquals(UpdateLog.State.APPLYING_BUFFERED,ulog.getState());
    logReplay.release(1);
    updateJ(jsonAdd(sdoc("id","7","_version_","1070")),params(SEEN_LEADER,SEEN_LEADER_VAL));
    deleteAndGetVersion("5",params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-950"));
    deleteAndGetVersion("6",params(SEEN_LEADER,SEEN_LEADER_VAL,"_version_","-2060"));
    logReplay.release(1000);
    UpdateLog.RecoveryInfo recInfo=rinfoFuture.get();
    assertJQ(req("q","*:*","sort","id asc","fl","id,_version_"),"/response/docs==[" + "{'id':'3','_version_':1030}" + ",{'id':'4','_version_':1040}"+ ",{'id':'5','_version_':1050}"+ ",{'id':'7','_version_':1070}"+ "]");
    assertEquals(1,recInfo.deleteByQuery);
    assertEquals(UpdateLog.State.ACTIVE,ulog.getState());
  }
  finally {
    DirectUpdateHandler2.commitOnClose=true;
    UpdateLog.testing_logReplayHook=null;
    UpdateLog.testing_logReplayFinishHook=null;
    req().close();
  }
}
