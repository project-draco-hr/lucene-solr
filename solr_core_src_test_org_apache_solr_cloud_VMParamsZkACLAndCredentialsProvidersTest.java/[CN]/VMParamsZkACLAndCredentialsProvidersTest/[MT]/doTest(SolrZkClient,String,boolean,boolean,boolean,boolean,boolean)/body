{
  try {
    zkClient.getData(path,null,null,false);
    if (!getData)     fail("NoAuthException expected ");
  }
 catch (  NoAuthException nae) {
    if (getData)     fail("No NoAuthException expected");
  }
  try {
    zkClient.getChildren(path,null,false);
    if (!list)     fail("NoAuthException expected ");
  }
 catch (  NoAuthException nae) {
    if (list)     fail("No NoAuthException expected");
  }
  try {
    zkClient.create(path + "/subnode",null,CreateMode.PERSISTENT,false);
    if (!create)     fail("NoAuthException expected ");
 else {
      zkClient.delete(path + "/subnode",-1,false);
    }
  }
 catch (  NoAuthException nae) {
    if (create)     fail("No NoAuthException expected");
  }
  try {
    zkClient.makePath(path + "/subnode/subsubnode",false);
    if (!create)     fail("NoAuthException expected ");
 else {
      zkClient.delete(path + "/subnode/subsubnode",-1,false);
      zkClient.delete(path + "/subnode",-1,false);
    }
  }
 catch (  NoAuthException nae) {
    if (create)     fail("No NoAuthException expected");
  }
  try {
    zkClient.setData(path,(byte[])null,false);
    if (!setData)     fail("NoAuthException expected ");
  }
 catch (  NoAuthException nae) {
    if (setData)     fail("No NoAuthException expected");
  }
  try {
    zkClient.delete(path,-1,false);
    if (!delete)     fail("NoAuthException expected ");
  }
 catch (  NoAuthException nae) {
    if (delete)     fail("No NoAuthException expected");
  }
}
