{
  if (reader instanceof CodecReader) {
    return (CodecReader)reader;
  }
 else {
    reader.checkIntegrity();
    return new CodecReader(){
      @Override public TermVectorsReader getTermVectorsReader(){
        reader.ensureOpen();
        return readerToTermVectorsReader(reader);
      }
      @Override public StoredFieldsReader getFieldsReader(){
        reader.ensureOpen();
        return readerToStoredFieldsReader(reader);
      }
      @Override public NormsProducer getNormsReader(){
        reader.ensureOpen();
        return readerToNormsProducer(reader);
      }
      @Override public DocValuesProducer getDocValuesReader(){
        reader.ensureOpen();
        return readerToDocValuesProducer(reader);
      }
      @Override public FieldsProducer getPostingsReader(){
        reader.ensureOpen();
        try {
          return readerToFieldsProducer(reader);
        }
 catch (        IOException bogus) {
          throw new AssertionError(bogus);
        }
      }
      @Override public FieldInfos getFieldInfos(){
        return reader.getFieldInfos();
      }
      @Override public DimensionalValues getDimensionalValues(){
        return reader.getDimensionalValues();
      }
      @Override public DimensionalReader getDimensionalReader(){
        return dimensionalValuesToReader(reader.getDimensionalValues());
      }
      @Override public Bits getLiveDocs(){
        return reader.getLiveDocs();
      }
      @Override public int numDocs(){
        return reader.numDocs();
      }
      @Override public int maxDoc(){
        return reader.maxDoc();
      }
      @Override public void addCoreClosedListener(      CoreClosedListener listener){
        reader.addCoreClosedListener(listener);
      }
      @Override public void removeCoreClosedListener(      CoreClosedListener listener){
        reader.removeCoreClosedListener(listener);
      }
    }
;
  }
}
