{
  final String fileName=IndexFileNames.segmentFileName(segmentInfo.name,segmentSuffix,Lucene50FieldInfosFormat.EXTENSION);
  try (ChecksumIndexInput input=directory.openChecksumInput(fileName,context)){
    Throwable priorE=null;
    FieldInfo infos[]=null;
    try {
      CodecUtil.checkSegmentHeader(input,Lucene50FieldInfosFormat.CODEC_NAME,Lucene50FieldInfosFormat.FORMAT_START,Lucene50FieldInfosFormat.FORMAT_CURRENT,segmentInfo.getId(),segmentSuffix);
      final int size=input.readVInt();
      infos=new FieldInfo[size];
      for (int i=0; i < size; i++) {
        String name=input.readString();
        final int fieldNumber=input.readVInt();
        if (fieldNumber < 0) {
          throw new CorruptIndexException("invalid field number for field: " + name + ", fieldNumber="+ fieldNumber,input);
        }
        byte bits=input.readByte();
        boolean isIndexed=(bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;
        boolean storeTermVector=(bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;
        boolean omitNorms=(bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;
        boolean storePayloads=(bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;
        final IndexOptions indexOptions;
        if (!isIndexed) {
          indexOptions=null;
        }
 else         if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {
          indexOptions=IndexOptions.DOCS_ONLY;
        }
 else         if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {
          indexOptions=IndexOptions.DOCS_AND_FREQS;
        }
 else         if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {
          indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;
        }
 else {
          indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
        }
        byte val=input.readByte();
        final DocValuesType docValuesType=getDocValuesType(input,(byte)(val & 0x0F));
        final DocValuesType normsType=getDocValuesType(input,(byte)((val >>> 4) & 0x0F));
        final long dvGen=input.readLong();
        final Map<String,String> attributes=input.readStringStringMap();
        try {
          infos[i]=new FieldInfo(name,isIndexed,fieldNumber,storeTermVector,omitNorms,storePayloads,indexOptions,docValuesType,normsType,dvGen,Collections.unmodifiableMap(attributes));
          infos[i].checkConsistency();
        }
 catch (        IllegalStateException e) {
          throw new CorruptIndexException("invalid fieldinfo for field: " + name + ", fieldNumber="+ fieldNumber,input,e);
        }
      }
    }
 catch (    Throwable exception) {
      priorE=exception;
    }
 finally {
      CodecUtil.checkFooter(input,priorE);
    }
    return new FieldInfos(infos);
  }
 }
