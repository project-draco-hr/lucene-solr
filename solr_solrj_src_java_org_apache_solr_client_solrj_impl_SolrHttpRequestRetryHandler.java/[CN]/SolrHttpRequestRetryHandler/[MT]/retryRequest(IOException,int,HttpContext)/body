{
  log.debug("Retry http request {} out of {}",executionCount,this.retryCount);
  if (executionCount > this.retryCount) {
    log.debug("Do not retry, over max retry count");
    return false;
  }
  if (this.nonRetriableClasses.contains(exception.getClass())) {
    log.debug("Do not retry, non retriable class {}",exception.getClass().getName());
    return false;
  }
 else {
    for (    final Class<? extends IOException> rejectException : this.nonRetriableClasses) {
      if (rejectException.isInstance(exception)) {
        log.debug("Do not retry, non retriable class {}",exception.getClass().getName());
        return false;
      }
    }
  }
  final HttpClientContext clientContext=HttpClientContext.adapt(context);
  final HttpRequest request=clientContext.getRequest();
  if (requestIsAborted(request)) {
    log.debug("Do not retry, request was aborted");
    return false;
  }
  if (handleAsIdempotent(clientContext)) {
    log.debug("Retry, request should be idempotent");
    return true;
  }
  log.debug("Do not retry, no rules matched");
  return false;
}
