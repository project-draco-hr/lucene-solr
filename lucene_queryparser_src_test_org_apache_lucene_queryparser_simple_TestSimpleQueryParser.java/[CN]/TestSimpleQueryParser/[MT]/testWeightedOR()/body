{
  Map<String,Float> weights=new LinkedHashMap<>();
  weights.put("field0",5f);
  weights.put("field1",10f);
  BooleanQuery.Builder expected=new BooleanQuery.Builder();
  BooleanQuery.Builder foo=new BooleanQuery.Builder();
  Query field0=new TermQuery(new Term("field0","foo"));
  field0=new BoostQuery(field0,5f);
  foo.add(field0,Occur.SHOULD);
  Query field1=new TermQuery(new Term("field1","foo"));
  field1=new BoostQuery(field1,10f);
  foo.add(field1,Occur.SHOULD);
  expected.add(foo.build(),Occur.SHOULD);
  BooleanQuery.Builder bar=new BooleanQuery.Builder();
  field0=new TermQuery(new Term("field0","bar"));
  field0=new BoostQuery(field0,5f);
  bar.add(field0,Occur.SHOULD);
  field1=new TermQuery(new Term("field1","bar"));
  field1=new BoostQuery(field1,10f);
  bar.add(field1,Occur.SHOULD);
  expected.add(bar.build(),Occur.SHOULD);
  Analyzer analyzer=new MockAnalyzer(random());
  SimpleQueryParser parser=new SimpleQueryParser(analyzer,weights);
  assertEquals(expected.build(),parser.parse("foo|bar"));
}
