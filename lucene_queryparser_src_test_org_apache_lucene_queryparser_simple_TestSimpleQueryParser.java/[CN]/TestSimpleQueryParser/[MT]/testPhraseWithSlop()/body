{
  PhraseQuery expectedWithSlop=new PhraseQuery();
  expectedWithSlop.add(new Term("field","foo"));
  expectedWithSlop.add(new Term("field","bar"));
  expectedWithSlop.setSlop(2);
  assertEquals(expectedWithSlop,parse("\"foo bar\"~2"));
  PhraseQuery expectedWithMultiDigitSlop=new PhraseQuery();
  expectedWithMultiDigitSlop.add(new Term("field","foo"));
  expectedWithMultiDigitSlop.add(new Term("field","bar"));
  expectedWithMultiDigitSlop.setSlop(10);
  assertEquals(expectedWithMultiDigitSlop,parse("\"foo bar\"~10"));
  PhraseQuery expectedNoSlop=new PhraseQuery();
  expectedNoSlop.add(new Term("field","foo"));
  expectedNoSlop.add(new Term("field","bar"));
  assertEquals("Ignore trailing tilde with no slop",expectedNoSlop,parse("\"foo bar\"~"));
  assertEquals("Ignore non-numeric trailing slop",expectedNoSlop,parse("\"foo bar\"~a"));
  assertEquals("Ignore non-numeric trailing slop",expectedNoSlop,parse("\"foo bar\"~1a"));
  assertEquals("Ignore negative trailing slop",expectedNoSlop,parse("\"foo bar\"~-1"));
  PhraseQuery pq=new PhraseQuery();
  pq.add(new Term("field","foo"));
  pq.add(new Term("field","bar"));
  pq.setSlop(12);
  BooleanQuery expectedBoolean=new BooleanQuery();
  expectedBoolean.add(pq,Occur.MUST);
  expectedBoolean.add(new TermQuery(new Term("field","baz")),Occur.MUST);
  assertEquals(expectedBoolean,parse("\"foo bar\"~12 baz"));
}
