{
  try {
    StringBuilder builder=new StringBuilder();
    char[] buf=new char[8];
    int len;
    while ((len=reader.read(buf)) != -1)     builder.append(buf,0,len);
    String value, number=builder.toString();
switch (type) {
case INTEGER:
      value=TrieUtils.intToPrefixCoded(Integer.parseInt(number));
    break;
case FLOAT:
  value=TrieUtils.intToPrefixCoded(TrieUtils.floatToSortableInt(Float.parseFloat(number)));
break;
case LONG:
value=TrieUtils.longToPrefixCoded(Long.parseLong(number));
break;
case DOUBLE:
value=TrieUtils.longToPrefixCoded(TrieUtils.doubleToSortableLong(Double.parseDouble(number)));
break;
case DATE:
value=TrieUtils.longToPrefixCoded(dateField.parseMath(null,number).getTime());
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field");
}
return new KeywordTokenizer(new StringReader(value));
}
 catch (IOException e) {
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to create trie query tokenizer",e);
}
}
