{
  Hyphenation hyphens=hyphenator.hyphenate(token.buffer(),0,token.length(),1,1);
  if (hyphens == null) {
    return;
  }
  final int[] hyp=hyphens.getHyphenationPoints();
  char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.buffer());
  for (int i=0; i < hyp.length; ++i) {
    int remaining=hyp.length - i;
    int start=hyp[i];
    Token longestMatchToken=null;
    for (int j=1; j < remaining; j++) {
      int partLength=hyp[i + j] - start;
      if (partLength > this.maxSubwordSize) {
        break;
      }
      if (partLength < this.minSubwordSize) {
        continue;
      }
      if (dictionary == null || dictionary.contains(lowerCaseTermBuffer,start,partLength)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.length() < partLength) {
              longestMatchToken=createToken(start,partLength,token);
            }
          }
 else {
            longestMatchToken=createToken(start,partLength,token);
          }
        }
 else {
          tokens.add(createToken(start,partLength,token));
        }
      }
 else       if (dictionary.contains(lowerCaseTermBuffer,start,partLength - 1)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.length() < partLength - 1) {
              longestMatchToken=createToken(start,partLength - 1,token);
            }
          }
 else {
            longestMatchToken=createToken(start,partLength - 1,token);
          }
        }
 else {
          tokens.add(createToken(start,partLength - 1,token));
        }
      }
    }
    if (this.onlyLongestMatch && longestMatchToken != null) {
      tokens.add(longestMatchToken);
    }
  }
}
