{
  r=newRandom();
  char[] buffer=new char[20];
  char[] expected=new char[20];
  BytesRef utf8=new BytesRef(20);
  UnicodeUtil.UTF16Result utf16=new UnicodeUtil.UTF16Result();
  UnicodeUtil.UTF16Result utf16a=new UnicodeUtil.UTF16Result();
  boolean hasIllegal=false;
  byte[] last=new byte[60];
  for (int iter=0; iter < 100000; iter++) {
    final int prefix;
    if (iter == 0 || hasIllegal)     prefix=0;
 else     prefix=nextInt(20);
    hasIllegal=fillUnicode(buffer,expected,prefix,20 - prefix);
    UnicodeUtil.UTF16toUTF8(buffer,0,20,utf8);
    if (!hasIllegal) {
      byte[] b=new String(buffer,0,20).getBytes("UTF-8");
      assertEquals(b.length,utf8.length);
      for (int i=0; i < b.length; i++)       assertEquals(b[i],utf8.bytes[i]);
    }
    int bytePrefix=20;
    if (iter == 0 || hasIllegal)     bytePrefix=0;
 else     for (int i=0; i < 20; i++)     if (last[i] != utf8.bytes[i]) {
      bytePrefix=i;
      break;
    }
    System.arraycopy(utf8.bytes,0,last,0,utf8.length);
    UnicodeUtil.UTF8toUTF16(utf8.bytes,bytePrefix,utf8.length - bytePrefix,utf16);
    assertEquals(20,utf16.length);
    for (int i=0; i < 20; i++)     assertEquals(expected[i],utf16.result[i]);
    UnicodeUtil.UTF8toUTF16(utf8.bytes,0,utf8.length,utf16a);
    assertEquals(20,utf16a.length);
    for (int i=0; i < 20; i++)     assertEquals(expected[i],utf16a.result[i]);
  }
}
