{
  Objects.requireNonNull(classloader,"classloader");
  final LinkedHashMap<String,Class<? extends S>> services=new LinkedHashMap<>(this.services);
  final SPIClassIterator<S> loader=SPIClassIterator.get(clazz,classloader);
  while (loader.hasNext()) {
    final Class<? extends S> service=loader.next();
    final String clazzName=service.getSimpleName();
    String name=null;
    for (    String suffix : suffixes) {
      if (clazzName.endsWith(suffix)) {
        name=clazzName.substring(0,clazzName.length() - suffix.length()).toLowerCase(Locale.ROOT);
        break;
      }
    }
    if (name == null) {
      throw new ServiceConfigurationError("The class name " + service.getName() + " has wrong suffix, allowed are: "+ Arrays.toString(suffixes));
    }
    if (!services.containsKey(name)) {
      services.put(name,service);
    }
  }
  this.services=Collections.unmodifiableMap(services);
}
