{
  SimpleOrderedMap<Object> jvm=new SimpleOrderedMap<Object>();
  jvm.add("version",System.getProperty("java.vm.version"));
  jvm.add("name",System.getProperty("java.vm.name"));
  Runtime runtime=Runtime.getRuntime();
  jvm.add("processors",runtime.availableProcessors());
  long used=runtime.totalMemory() - runtime.freeMemory();
  int percentUsed=(int)(((double)(used) / (double)runtime.maxMemory()) * 100);
  SimpleOrderedMap<Object> mem=new SimpleOrderedMap<Object>();
  mem.add("free",FileUtils.byteCountToDisplaySize(runtime.freeMemory()));
  mem.add("total",FileUtils.byteCountToDisplaySize(runtime.totalMemory()));
  mem.add("max",FileUtils.byteCountToDisplaySize(runtime.maxMemory()));
  mem.add("used",FileUtils.byteCountToDisplaySize(used) + " (%" + percentUsed+ ")");
  jvm.add("memory",mem);
  SimpleOrderedMap<Object> jmx=new SimpleOrderedMap<Object>();
  try {
    RuntimeMXBean mx=ManagementFactory.getRuntimeMXBean();
    jmx.add("bootclasspath",mx.getBootClassPath());
    jmx.add("classpath",mx.getClassPath());
    jmx.add("commandLineArgs",mx.getInputArguments());
    jmx.add("startTime",new Date(mx.getStartTime()));
    jmx.add("upTimeMS",mx.getUptime());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  jvm.add("jmx",jmx);
  return jvm;
}
