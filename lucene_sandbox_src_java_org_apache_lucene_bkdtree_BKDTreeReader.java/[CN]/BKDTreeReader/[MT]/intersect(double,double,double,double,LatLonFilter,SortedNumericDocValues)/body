{
  if (BKDTreeWriter.validLat(latMin) == false) {
    throw new IllegalArgumentException("invalid latMin: " + latMin);
  }
  if (BKDTreeWriter.validLat(latMax) == false) {
    throw new IllegalArgumentException("invalid latMax: " + latMax);
  }
  if (BKDTreeWriter.validLon(lonMin) == false) {
    throw new IllegalArgumentException("invalid lonMin: " + lonMin);
  }
  if (BKDTreeWriter.validLon(lonMax) == false) {
    throw new IllegalArgumentException("invalid lonMax: " + lonMax);
  }
  int latMinEnc=BKDTreeWriter.encodeLat(latMin);
  int latMaxEnc=BKDTreeWriter.encodeLat(latMax);
  int lonMinEnc=BKDTreeWriter.encodeLon(lonMin);
  int lonMaxEnc=BKDTreeWriter.encodeLon(lonMax);
  QueryState state=new QueryState(in.clone(),maxDoc,latMinEnc,latMaxEnc,lonMinEnc,lonMaxEnc,filter,sndv);
  int hitCount=intersect(state,1,BKDTreeWriter.encodeLat(-90.0),BKDTreeWriter.encodeLat(Math.nextAfter(90.0,Double.POSITIVE_INFINITY)),BKDTreeWriter.encodeLon(-180.0),BKDTreeWriter.encodeLon(Math.nextAfter(180.0,Double.POSITIVE_INFINITY)));
  return state.docs.build(hitCount);
}
