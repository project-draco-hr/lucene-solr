{
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));
  Document doc=new Document();
  doc.add(newTextField("field","a b c d e f g h i j k l m n o p q r s t u v w x y z",Field.Store.NO));
  doc.add(newTextField("number","0 1 2 3 4 5 6 7 8 9",Field.Store.NO));
  writer.addDocument(doc);
  writer.addDocument(doc);
  writer.close();
  DirectoryReader r=DirectoryReader.open(dir,-1);
  try {
    r.docFreq(new Term("field","f"));
    fail("did not hit expected exception");
  }
 catch (  IllegalStateException ise) {
  }
  assertEquals(-1,((SegmentReader)r.leaves().get(0).reader()).getTermInfosIndexDivisor());
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy(10)));
  writer.addDocument(doc);
  writer.close();
  DirectoryReader r2=DirectoryReader.openIfChanged(r);
  assertNotNull(r2);
  assertNull(DirectoryReader.openIfChanged(r2));
  r.close();
  List<AtomicReaderContext> leaves=r2.leaves();
  assertEquals(2,leaves.size());
  for (  AtomicReaderContext ctx : leaves) {
    try {
      ctx.reader().docFreq(new Term("field","f"));
      fail("did not hit expected exception");
    }
 catch (    IllegalStateException ise) {
    }
  }
  r2.close();
  dir.close();
}
