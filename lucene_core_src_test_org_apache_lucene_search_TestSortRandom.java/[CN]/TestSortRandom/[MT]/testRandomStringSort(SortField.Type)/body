{
  Random random=new Random(random().nextLong());
  final int NUM_DOCS=atLeast(100);
  final Directory dir=newDirectory();
  final RandomIndexWriter writer=new RandomIndexWriter(random,dir);
  final boolean allowDups=random.nextBoolean();
  final Set<String> seen=new HashSet<>();
  final int maxLength=TestUtil.nextInt(random,5,100);
  if (VERBOSE) {
    System.out.println("TEST: NUM_DOCS=" + NUM_DOCS + " maxLength="+ maxLength+ " allowDups="+ allowDups);
  }
  int numDocs=0;
  final List<BytesRef> docValues=new ArrayList<>();
  while (numDocs < NUM_DOCS) {
    final Document doc=new Document();
    final BytesRef br;
    if (random().nextInt(10) != 7) {
      final String s;
      if (random.nextBoolean()) {
        s=TestUtil.randomSimpleString(random,maxLength);
      }
 else {
        s=TestUtil.randomUnicodeString(random,maxLength);
      }
      if (!allowDups) {
        if (seen.contains(s)) {
          continue;
        }
        seen.add(s);
      }
      if (VERBOSE) {
        System.out.println("  " + numDocs + ": s="+ s);
      }
      br=new BytesRef(s);
      doc.add(new SortedDocValuesField("stringdv",br));
      docValues.add(br);
    }
 else {
      br=null;
      if (VERBOSE) {
        System.out.println("  " + numDocs + ": <missing>");
      }
      docValues.add(null);
    }
    doc.add(new NumericDocValuesField("id",numDocs));
    doc.add(new StoredField("id",numDocs));
    writer.addDocument(doc);
    numDocs++;
    if (random.nextInt(40) == 17) {
      writer.getReader().close();
    }
  }
  final IndexReader r=writer.getReader();
  writer.close();
  if (VERBOSE) {
    System.out.println("  reader=" + r);
  }
  final IndexSearcher s=newSearcher(r,false);
  final int ITERS=atLeast(100);
  for (int iter=0; iter < ITERS; iter++) {
    final boolean reverse=random.nextBoolean();
    final TopFieldDocs hits;
    final SortField sf;
    final boolean sortMissingLast;
    final boolean missingIsNull;
    sf=new SortField("stringdv",type,reverse);
    sortMissingLast=random().nextBoolean();
    if (sortMissingLast) {
      sf.setMissingValue(SortField.STRING_LAST);
    }
    final Sort sort;
    if (random.nextBoolean()) {
      sort=new Sort(sf);
    }
 else {
      sort=new Sort(sf,SortField.FIELD_DOC);
    }
    final int hitCount=TestUtil.nextInt(random,1,r.maxDoc() + 20);
    final RandomFilter f=new RandomFilter(random.nextLong(),random.nextFloat(),docValues);
    int queryType=random.nextInt(2);
    if (queryType == 0) {
      BooleanQuery bq=new BooleanQuery();
      bq.add(new MatchAllDocsQuery(),Occur.SHOULD);
      bq.setMinimumNumberShouldMatch(1);
      hits=s.search(new FilteredQuery(bq,f),hitCount,sort,random.nextBoolean(),random.nextBoolean());
    }
 else {
      hits=s.search(new ConstantScoreQuery(f),hitCount,sort,random.nextBoolean(),random.nextBoolean());
    }
    if (VERBOSE) {
      System.out.println("\nTEST: iter=" + iter + " "+ hits.totalHits+ " hits; topN="+ hitCount+ "; reverse="+ reverse+ "; sortMissingLast="+ sortMissingLast+ " sort="+ sort);
    }
    Collections.sort(f.matchValues,new Comparator<BytesRef>(){
      @Override public int compare(      BytesRef a,      BytesRef b){
        if (a == null) {
          if (b == null) {
            return 0;
          }
          if (sortMissingLast) {
            return 1;
          }
 else {
            return -1;
          }
        }
 else         if (b == null) {
          if (sortMissingLast) {
            return -1;
          }
 else {
            return 1;
          }
        }
 else {
          return a.compareTo(b);
        }
      }
    }
);
    if (reverse) {
      Collections.reverse(f.matchValues);
    }
    final List<BytesRef> expected=f.matchValues;
    if (VERBOSE) {
      System.out.println("  expected:");
      for (int idx=0; idx < expected.size(); idx++) {
        BytesRef br=expected.get(idx);
        System.out.println("    " + idx + ": "+ (br == null ? "<missing>" : br.utf8ToString()));
        if (idx == hitCount - 1) {
          break;
        }
      }
    }
    if (VERBOSE) {
      System.out.println("  actual:");
      for (int hitIDX=0; hitIDX < hits.scoreDocs.length; hitIDX++) {
        final FieldDoc fd=(FieldDoc)hits.scoreDocs[hitIDX];
        BytesRef br=(BytesRef)fd.fields[0];
        System.out.println("    " + hitIDX + ": "+ (br == null ? "<missing>" : br.utf8ToString())+ " id="+ s.doc(fd.doc).get("id"));
      }
    }
    for (int hitIDX=0; hitIDX < hits.scoreDocs.length; hitIDX++) {
      final FieldDoc fd=(FieldDoc)hits.scoreDocs[hitIDX];
      BytesRef br=expected.get(hitIDX);
      BytesRef br2=(BytesRef)fd.fields[0];
      assertEquals(br,br2);
    }
  }
  r.close();
  dir.close();
}
