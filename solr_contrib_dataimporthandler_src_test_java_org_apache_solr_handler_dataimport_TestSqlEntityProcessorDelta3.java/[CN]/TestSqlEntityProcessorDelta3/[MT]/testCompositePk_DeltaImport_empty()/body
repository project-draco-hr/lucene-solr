{
  List childDeltaRow=new ArrayList();
  childDeltaRow.add(createMap("id","2"));
  MockDataSource.setIterator(C_DELTA_QUERY,childDeltaRow.iterator());
  MockDataSource.setIterator(C_DELETED_PK_QUERY,Collections.EMPTY_LIST.iterator());
  List childParentDeltaRow=new ArrayList();
  childParentDeltaRow.add(createMap("parent_id","1"));
  MockDataSource.setIterator("select parent_id from child where id=2",childParentDeltaRow.iterator());
  MockDataSource.setIterator(P_DELTA_QUERY,Collections.EMPTY_LIST.iterator());
  List parentDeltaImportRow=new ArrayList();
  parentDeltaImportRow.add(createMap("parent_id","1","desc","d1"));
  MockDataSource.setIterator("select * from parent where last_modified > NOW AND parent_id=1",parentDeltaImportRow.iterator());
  List childDeltaImportRow=new ArrayList();
  childDeltaImportRow.add(createMap("id","2"));
  MockDataSource.setIterator("select * from child where last_modified > NOW AND parent_id=1",childDeltaImportRow.iterator());
  runDeltaImport(dataConfig_delta);
  assertQ(req("*:* OR testCompositePk_DeltaImport_empty"),"//*[@numFound='1']");
  assertQ(req("id:2"),"//*[@numFound='1']");
  assertQ(req("desc:d1"),"//*[@numFound='1']");
}
