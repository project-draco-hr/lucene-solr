{
  add1document();
  MockDataSource.clearCache();
  List parentDeltaRow=new ArrayList();
  parentDeltaRow.add(createMap("parent_id","1"));
  MockDataSource.setIterator(P_DELTA_QUERY,parentDeltaRow.iterator());
  List parentRow=new ArrayList();
  parentRow.add(createMap("parent_id","1","desc","d1"));
  MockDataSource.setIterator("select * from parent where last_modified > NOW AND parent_id=1",parentRow.iterator());
  List childDeltaRow=new ArrayList();
  childDeltaRow.add(createMap("id","3"));
  MockDataSource.setIterator(C_DELTA_QUERY,childDeltaRow.iterator());
  List childParentDeltaRow=new ArrayList();
  childParentDeltaRow.add(createMap("parent_id","1"));
  MockDataSource.setIterator("select parent_id from child where id='3'",childParentDeltaRow.iterator());
  List childRow=new ArrayList();
  childRow.add(createMap("id","3"));
  MockDataSource.setIterator("select * from child where last_modified > NOW AND parent_id=1",childRow.iterator());
  runDeltaImport(dataConfig_delta);
  assertQ(req("*:* OR testCompositePk_DeltaImport_add"),"//*[@numFound='2']");
  assertQ(req("id:2"),"//*[@numFound='1']");
  assertQ(req("id:3"),"//*[@numFound='1']");
  assertQ(req("desc:d1"),"//*[@numFound='2']");
}
