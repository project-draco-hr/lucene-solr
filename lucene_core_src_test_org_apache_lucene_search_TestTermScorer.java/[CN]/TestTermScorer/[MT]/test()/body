{
  Term allTerm=new Term(FIELD,"all");
  TermQuery termQuery=new TermQuery(allTerm);
  Weight weight=indexSearcher.createNormalizedWeight(termQuery,true);
  assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);
  LeafReaderContext context=(LeafReaderContext)indexSearcher.getTopReaderContext();
  BulkScorer ts=weight.bulkScorer(context);
  final List<TestHit> docs=new ArrayList<>();
  ts.score(new SimpleCollector(){
    private int base=0;
    private Scorer scorer;
    @Override public void setScorer(    Scorer scorer){
      this.scorer=scorer;
    }
    @Override public void collect(    int doc) throws IOException {
      float score=scorer.score();
      doc=doc + base;
      docs.add(new TestHit(doc,score));
      assertTrue("score " + score + " is not greater than 0",score > 0);
      assertTrue("Doc: " + doc + " does not equal 0 or doc does not equal 5",doc == 0 || doc == 5);
    }
    @Override protected void doSetNextReader(    LeafReaderContext context) throws IOException {
      base=context.docBase;
    }
    @Override public boolean needsScores(){
      return true;
    }
  }
,null);
  assertTrue("docs Size: " + docs.size() + " is not: "+ 2,docs.size() == 2);
  TestHit doc0=docs.get(0);
  TestHit doc5=docs.get(1);
  assertTrue(doc0.score + " does not equal: " + doc5.score,doc0.score == doc5.score);
  assertTrue(doc0.score + " does not equal: " + 1.6931472f,doc0.score == 1.6931472f);
}
