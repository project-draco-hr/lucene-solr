{
  String fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  String text=DOMUtils.getNonBlankTextOrFail(e);
  BooleanQuery bq=new BooleanQuery(DOMUtils.getAttribute(e,"disableCoord",false));
  bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e,"minimumNumberShouldMatch",0));
  TokenStream ts=analyzer.tokenStream(fieldName,new StringReader(text));
  try {
    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);
    Term term=null;
    while (ts.incrementToken()) {
      if (term == null) {
        term=new Term(fieldName,termAtt.toString());
      }
 else {
        term=term.createTerm(termAtt.toString());
      }
      bq.add(new BooleanClause(new TermQuery(term),BooleanClause.Occur.SHOULD));
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Error constructing terms from index:" + ioe);
  }
  bq.setBoost(DOMUtils.getAttribute(e,"boost",1.0f));
  return bq;
}
