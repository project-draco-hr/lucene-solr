{
  String fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  String text=DOMUtils.getNonBlankTextOrFail(e);
  BooleanQuery bq=new BooleanQuery(DOMUtils.getAttribute(e,"disableCoord",false));
  bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e,"minimumNumberShouldMatch",0));
  try {
    TokenStream ts=analyzer.reusableTokenStream(fieldName,new StringReader(text));
    TermToBytesRefAttribute termAtt=ts.addAttribute(TermToBytesRefAttribute.class);
    Term term=null;
    BytesRef bytes=termAtt.getBytesRef();
    ts.reset();
    while (ts.incrementToken()) {
      termAtt.fillBytesRef();
      if (term == null) {
        term=new Term(fieldName,new BytesRef(bytes));
      }
 else {
        term=term.createTerm(new BytesRef(bytes));
      }
      bq.add(new BooleanClause(new TermQuery(term),BooleanClause.Occur.SHOULD));
    }
    ts.end();
    ts.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Error constructing terms from index:" + ioe);
  }
  bq.setBoost(DOMUtils.getAttribute(e,"boost",1.0f));
  return bq;
}
