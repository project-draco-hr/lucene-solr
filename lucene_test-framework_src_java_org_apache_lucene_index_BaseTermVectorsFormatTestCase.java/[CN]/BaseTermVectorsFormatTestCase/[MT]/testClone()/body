{
  final RandomDocumentFactory docFactory=new RandomDocumentFactory(5,20);
  final int numDocs=_TestUtil.nextInt(random(),100,1000);
  for (  Options options : validOptions()) {
    final RandomDocument[] docs=new RandomDocument[numDocs];
    for (int i=0; i < numDocs; ++i) {
      docs[i]=docFactory.newDocument(_TestUtil.nextInt(random(),1,3),_TestUtil.nextInt(random(),10,50),options);
    }
    final Directory dir=newDirectory();
    final RandomIndexWriter writer=new RandomIndexWriter(random(),dir);
    for (int i=0; i < numDocs; ++i) {
      writer.addDocument(addId(docs[i].toDocument(),"" + i));
    }
    final IndexReader reader=writer.getReader();
    for (int i=0; i < numDocs; ++i) {
      final int docID=docID(reader,"" + i);
      assertEquals(docs[i],reader.getTermVectors(docID));
    }
    final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
    final Thread[] threads=new Thread[2];
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(){
        @Override public void run(){
          try {
            for (int i=0; i < atLeast(100); ++i) {
              final int idx=random().nextInt(numDocs);
              final int docID=docID(reader,"" + idx);
              assertEquals(docs[idx],reader.getTermVectors(docID));
            }
          }
 catch (          Throwable t) {
            exception.set(t);
          }
        }
      }
;
    }
    for (    Thread thread : threads) {
      thread.start();
    }
    for (    Thread thread : threads) {
      thread.join();
    }
    reader.close();
    writer.close();
    dir.close();
    assertNull("One thread threw an exception",exception.get());
  }
}
