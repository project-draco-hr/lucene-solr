{
  final RandomDocumentFactory docFactory=new RandomDocumentFactory(5,20);
  final int numDocs=_TestUtil.nextInt(random(),100,500);
  final int numDeletes=random().nextInt(numDocs);
  final Set<Integer> deletes=new HashSet<Integer>();
  while (deletes.size() < numDeletes) {
    deletes.add(random().nextInt(numDocs));
  }
  for (  Options options : validOptions()) {
    final RandomDocument[] docs=new RandomDocument[numDocs];
    for (int i=0; i < numDocs; ++i) {
      docs[i]=docFactory.newDocument(_TestUtil.nextInt(random(),1,3),_TestUtil.nextInt(random(),10,50),options);
    }
    final Directory dir=newDirectory();
    final RandomIndexWriter writer=new RandomIndexWriter(random(),dir);
    for (int i=0; i < numDocs; ++i) {
      writer.addDocument(addId(docs[i].toDocument(),"" + i));
      if (rarely()) {
        writer.commit();
      }
    }
    for (    int delete : deletes) {
      writer.deleteDocuments(new Term("id","" + delete));
    }
    writer.forceMerge(1);
    final IndexReader reader=writer.getReader();
    for (int i=0; i < numDocs; ++i) {
      if (!deletes.contains(i)) {
        final int docID=docID(reader,"" + i);
        assertEquals(docs[i],reader.getTermVectors(docID));
      }
    }
    reader.close();
    writer.close();
    dir.close();
  }
}
