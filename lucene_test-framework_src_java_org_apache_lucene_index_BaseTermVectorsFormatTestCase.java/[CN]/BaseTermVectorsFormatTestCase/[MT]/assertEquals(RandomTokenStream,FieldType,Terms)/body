{
  assertEquals(1,terms.getDocCount());
  final int termCount=new HashSet<>(Arrays.asList(tk.terms)).size();
  assertEquals(termCount,terms.size());
  assertEquals(termCount,terms.getSumDocFreq());
  assertEquals(ft.storeTermVectorPositions(),terms.hasPositions());
  assertEquals(ft.storeTermVectorOffsets(),terms.hasOffsets());
  assertEquals(ft.storeTermVectorPayloads() && tk.hasPayloads(),terms.hasPayloads());
  final Set<BytesRef> uniqueTerms=new HashSet<>();
  for (  String term : tk.freqs.keySet()) {
    uniqueTerms.add(new BytesRef(term));
  }
  final BytesRef[] sortedTerms=uniqueTerms.toArray(new BytesRef[0]);
  Arrays.sort(sortedTerms);
  final TermsEnum termsEnum=terms.iterator(random().nextBoolean() ? null : this.termsEnum.get());
  this.termsEnum.set(termsEnum);
  for (int i=0; i < sortedTerms.length; ++i) {
    final BytesRef nextTerm=termsEnum.next();
    assertEquals(sortedTerms[i],nextTerm);
    assertEquals(sortedTerms[i],termsEnum.term());
    assertEquals(1,termsEnum.docFreq());
    final FixedBitSet bits=new FixedBitSet(1);
    PostingsEnum postingsEnum=termsEnum.postings(bits,random().nextBoolean() ? null : this.docsEnum.get());
    assertEquals(PostingsEnum.NO_MORE_DOCS,postingsEnum.nextDoc());
    bits.set(0);
    postingsEnum=termsEnum.postings(random().nextBoolean() ? bits : null,random().nextBoolean() ? null : postingsEnum);
    assertNotNull(postingsEnum);
    assertEquals(0,postingsEnum.nextDoc());
    assertEquals(0,postingsEnum.docID());
    assertEquals(tk.freqs.get(termsEnum.term().utf8ToString()),(Integer)postingsEnum.freq());
    assertEquals(PostingsEnum.NO_MORE_DOCS,postingsEnum.nextDoc());
    this.docsEnum.set(postingsEnum);
    bits.clear(0);
    PostingsEnum docsAndPositionsEnum=termsEnum.postings(bits,random().nextBoolean() ? null : this.docsEnum.get(),PostingsEnum.POSITIONS);
    assertEquals(ft.storeTermVectorOffsets() || ft.storeTermVectorPositions(),docsAndPositionsEnum != null);
    if (docsAndPositionsEnum != null) {
      assertEquals(PostingsEnum.NO_MORE_DOCS,docsAndPositionsEnum.nextDoc());
    }
    bits.set(0);
    docsAndPositionsEnum=termsEnum.postings(random().nextBoolean() ? bits : null,random().nextBoolean() ? null : docsAndPositionsEnum,PostingsEnum.POSITIONS);
    assertEquals(ft.storeTermVectorOffsets() || ft.storeTermVectorPositions(),docsAndPositionsEnum != null);
    if (terms.hasPositions() || terms.hasOffsets()) {
      assertEquals(0,docsAndPositionsEnum.nextDoc());
      final int freq=docsAndPositionsEnum.freq();
      assertEquals(tk.freqs.get(termsEnum.term().utf8ToString()),(Integer)freq);
      if (docsAndPositionsEnum != null) {
        for (int k=0; k < freq; ++k) {
          final int position=docsAndPositionsEnum.nextPosition();
          final Set<Integer> indexes;
          if (terms.hasPositions()) {
            indexes=tk.positionToTerms.get(position);
            assertNotNull(indexes);
          }
 else {
            indexes=tk.startOffsetToTerms.get(docsAndPositionsEnum.startOffset());
            assertNotNull(indexes);
          }
          if (terms.hasPositions()) {
            boolean foundPosition=false;
            for (            int index : indexes) {
              if (tk.termBytes[index].equals(termsEnum.term()) && tk.positions[index] == position) {
                foundPosition=true;
                break;
              }
            }
            assertTrue(foundPosition);
          }
          if (terms.hasOffsets()) {
            boolean foundOffset=false;
            for (            int index : indexes) {
              if (tk.termBytes[index].equals(termsEnum.term()) && tk.startOffsets[index] == docsAndPositionsEnum.startOffset() && tk.endOffsets[index] == docsAndPositionsEnum.endOffset()) {
                foundOffset=true;
                break;
              }
            }
            assertTrue(foundOffset);
          }
          if (terms.hasPayloads()) {
            boolean foundPayload=false;
            for (            int index : indexes) {
              if (tk.termBytes[index].equals(termsEnum.term()) && equals(tk.payloads[index],docsAndPositionsEnum.getPayload())) {
                foundPayload=true;
                break;
              }
            }
            assertTrue(foundPayload);
          }
        }
        try {
          docsAndPositionsEnum.nextPosition();
          fail();
        }
 catch (        Exception|AssertionError e) {
        }
      }
      assertEquals(PostingsEnum.NO_MORE_DOCS,docsAndPositionsEnum.nextDoc());
    }
    this.docsEnum.set(docsAndPositionsEnum);
  }
  assertNull(termsEnum.next());
  for (int i=0; i < 5; ++i) {
    if (random().nextBoolean()) {
      assertTrue(termsEnum.seekExact(RandomPicks.randomFrom(random(),tk.termBytes)));
    }
 else {
      assertEquals(SeekStatus.FOUND,termsEnum.seekCeil(RandomPicks.randomFrom(random(),tk.termBytes)));
    }
  }
}
