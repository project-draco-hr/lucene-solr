{
  terms=new String[len];
  termBytes=new BytesRef[len];
  positionsIncrements=new int[len];
  positions=new int[len];
  startOffsets=new int[len];
  endOffsets=new int[len];
  payloads=new BytesRef[len];
  for (int i=0; i < len; ++i) {
    final int o=random().nextInt(sampleTerms.length);
    terms[i]=sampleTerms[o];
    termBytes[i]=sampleTermBytes[o];
    positionsIncrements[i]=TestUtil.nextInt(random(),i == 0 ? 1 : 0,10);
    if (offsetsGoBackwards) {
      startOffsets[i]=random().nextInt();
      endOffsets[i]=random().nextInt();
    }
 else {
      if (i == 0) {
        startOffsets[i]=TestUtil.nextInt(random(),0,1 << 16);
      }
 else {
        startOffsets[i]=startOffsets[i - 1] + TestUtil.nextInt(random(),0,rarely() ? 1 << 16 : 20);
      }
      endOffsets[i]=startOffsets[i] + TestUtil.nextInt(random(),0,rarely() ? 1 << 10 : 20);
    }
  }
  for (int i=0; i < len; ++i) {
    if (i == 0) {
      positions[i]=positionsIncrements[i] - 1;
    }
 else {
      positions[i]=positions[i - 1] + positionsIncrements[i];
    }
  }
  if (rarely()) {
    Arrays.fill(payloads,randomPayload());
  }
 else {
    for (int i=0; i < len; ++i) {
      payloads[i]=randomPayload();
    }
  }
  positionToTerms=new HashMap<>(len);
  startOffsetToTerms=new HashMap<>(len);
  for (int i=0; i < len; ++i) {
    if (!positionToTerms.containsKey(positions[i])) {
      positionToTerms.put(positions[i],new HashSet<Integer>(1));
    }
    positionToTerms.get(positions[i]).add(i);
    if (!startOffsetToTerms.containsKey(startOffsets[i])) {
      startOffsetToTerms.put(startOffsets[i],new HashSet<Integer>(1));
    }
    startOffsetToTerms.get(startOffsets[i]).add(i);
  }
  freqs=new HashMap<>();
  for (  String term : terms) {
    if (freqs.containsKey(term)) {
      freqs.put(term,freqs.get(term) + 1);
    }
 else {
      freqs.put(term,1);
    }
  }
  addAttributeImpl(new PermissiveOffsetAttributeImpl());
  termAtt=addAttribute(CharTermAttribute.class);
  piAtt=addAttribute(PositionIncrementAttribute.class);
  oAtt=addAttribute(OffsetAttribute.class);
  pAtt=addAttribute(PayloadAttribute.class);
}
