{
  Input keys[]=new Input[]{new Input("the ghost of christmas past",50)};
  Analyzer standard=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,MockTokenFilter.ENGLISH_STOPSET);
  Directory tempDir=getDirectory();
  FuzzySuggester suggester=new FuzzySuggester(tempDir,"fuzzy",standard,standard,AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP,256,-1,false,FuzzySuggester.DEFAULT_MAX_EDITS,FuzzySuggester.DEFAULT_TRANSPOSITIONS,FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX,FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH,FuzzySuggester.DEFAULT_UNICODE_AWARE);
  suggester.build(new InputArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("the ghost of chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  results=suggester.lookup(TestUtil.stringToCharSequence("ghost of chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  results=suggester.lookup(TestUtil.stringToCharSequence("ghost chris",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("the ghost of christmas past",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  IOUtils.close(standard,tempDir);
}
