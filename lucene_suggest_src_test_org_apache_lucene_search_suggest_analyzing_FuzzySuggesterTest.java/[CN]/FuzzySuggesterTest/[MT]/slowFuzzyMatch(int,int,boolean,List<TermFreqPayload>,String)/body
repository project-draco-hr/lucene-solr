{
  final List<LookupResult> results=new ArrayList<LookupResult>();
  final int fragLen=frag.length();
  for (  TermFreqPayload tf : answers) {
    boolean prefixMatches=true;
    for (int i=0; i < prefixLen; i++) {
      if (i == fragLen) {
        break;
      }
      if (i == tf.term.length || tf.term.bytes[i] != (byte)frag.charAt(i)) {
        prefixMatches=false;
        break;
      }
    }
    if (prefixMatches) {
      final int len=tf.term.length;
      if (len >= fragLen - maxEdits) {
        int d;
        final String s=tf.term.utf8ToString();
        if (fragLen == prefixLen) {
          d=0;
        }
 else         if (false && len < fragLen) {
          d=getDistance(frag,s,allowTransposition);
        }
 else {
          d=maxEdits + 1;
          for (int ed=-maxEdits; ed <= maxEdits; ed++) {
            if (s.length() < fragLen - ed) {
              continue;
            }
            String check=s.substring(0,fragLen - ed);
            d=getDistance(frag,check,allowTransposition);
            if (d <= maxEdits) {
              break;
            }
          }
        }
        if (d <= maxEdits) {
          results.add(new LookupResult(tf.term.utf8ToString(),tf.v));
        }
      }
    }
    Collections.sort(results,new CompareByCostThenAlpha());
  }
  return results;
}
