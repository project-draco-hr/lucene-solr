{
  List<TermFreq> keys=new ArrayList<TermFreq>();
  int numTerms=atLeast(100);
  for (int i=0; i < numTerms; i++) {
    keys.add(new TermFreq("boo" + _TestUtil.randomSimpleString(random()),1 + random().nextInt(100)));
  }
  keys.add(new TermFreq("foo bar boo far",12));
  FuzzySuggester suggester=new FuzzySuggester(new MockAnalyzer(random(),MockTokenizer.KEYWORD,false));
  suggester.build(new TermFreqArrayIterator(keys));
  int numIters=atLeast(10);
  for (int i=0; i < numIters; i++) {
    String addRandomEdit=addRandomEdit("foo bar boo",2);
    List<LookupResult> results=suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit,random()),false,2);
    assertEquals(addRandomEdit,1,results.size());
    assertEquals("foo bar boo far",results.get(0).key.toString());
    assertEquals(12,results.get(0).value,0.01F);
  }
}
