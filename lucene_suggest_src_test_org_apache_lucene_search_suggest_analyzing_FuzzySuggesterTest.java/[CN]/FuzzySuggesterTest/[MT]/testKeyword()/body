{
  TermFreq keys[]=new TermFreq[]{new TermFreq("foo",50),new TermFreq("bar",10),new TermFreq("barbar",12),new TermFreq("barbara",6)};
  FuzzySuggester suggester=new FuzzySuggester(new MockAnalyzer(random(),MockTokenizer.KEYWORD,false));
  suggester.build(new TermFreqArrayIterator(keys));
  List<LookupResult> results=suggester.lookup(_TestUtil.stringToCharSequence("bariar",random()),false,2);
  assertEquals(2,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("barbr",random()),false,2);
  assertEquals(2,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("barbara",random()),false,2);
  assertEquals(2,results.size());
  assertEquals("barbara",results.get(0).key.toString());
  assertEquals(6,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("barbar",random()),false,2);
  assertEquals(1,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("barbaa",random()),false,2);
  assertEquals(2,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  assertEquals("barbara",results.get(1).key.toString());
  assertEquals(6,results.get(1).value,0.01F);
  String addRandomEdit=addRandomEdit("barbara",1);
  results=suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit,random()),false,2);
  assertEquals(addRandomEdit,1,results.size());
  assertEquals("barbara",results.get(0).key.toString());
  assertEquals(6,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("f",random()),false,2);
  assertEquals(1,results.size());
  assertEquals("foo",results.get(0).key.toString());
  assertEquals(50,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("bar",random()),false,1);
  assertEquals(1,results.size());
  assertEquals("bar",results.get(0).key.toString());
  assertEquals(10,results.get(0).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("b",random()),false,2);
  assertEquals(2,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  assertEquals("bar",results.get(1).key.toString());
  assertEquals(10,results.get(1).value,0.01F);
  results=suggester.lookup(_TestUtil.stringToCharSequence("ba",random()),false,3);
  assertEquals(3,results.size());
  assertEquals("barbar",results.get(0).key.toString());
  assertEquals(12,results.get(0).value,0.01F);
  assertEquals("bar",results.get(1).key.toString());
  assertEquals(10,results.get(1).value,0.01F);
  assertEquals("barbara",results.get(2).key.toString());
  assertEquals(6,results.get(2).value,0.01F);
}
