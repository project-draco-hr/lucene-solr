def checkClassDetails(fullPath):
    '\n  Checks for invalid HTML in the full javadocs under each field/method.\n  '
    with open(fullPath, encoding='UTF-8') as f:
        desc = []
        cat = None
        item = None
        errors = []
        inDetailsDiv = False
        blockListDepth = 0
        for line in f.readlines():
            if (not inDetailsDiv):
                if (reDetailsDiv.match(line) is not None):
                    inDetailsDiv = True
                continue
            if (reEndOfClassData.match(line) is not None):
                if (len(desc) != 0):
                    try:
                        verifyHTML(''.join(desc))
                    except RuntimeError as re:
                        errors.append((cat, item, str(re)))
                break
            if (reBlockList.match(line) is not None):
                blockListDepth += 1
                if (len(desc) != 0):
                    try:
                        verifyHTML(''.join(desc))
                    except RuntimeError as re:
                        errors.append((cat, item, str(re)))
                    del desc[:]
            if (blockListDepth == 3):
                desc.append(line)
            if (reCloseUl.match(line) is not None):
                blockListDepth -= 1
            else:
                m = reH3.search(line)
                if (m is not None):
                    cat = m.group(1)
                else:
                    m = reH4.search(line)
                    if (m is not None):
                        item = m.group(1)
    if (len(errors) != 0):
        print ()
        print fullPath
        for (cat, item, message) in errors:
            print ('  broken details HTML: %s: %s: %s' % (cat, item, message))
        return True
    else:
        return False
