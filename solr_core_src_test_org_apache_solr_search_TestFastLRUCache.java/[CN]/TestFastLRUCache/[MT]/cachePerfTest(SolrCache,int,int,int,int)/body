{
  Map l=new HashMap();
  l.put("size","" + cacheSize);
  l.put("initialSize","" + cacheSize);
  Object o=sc.init(l,null,null);
  sc.setState(SolrCache.State.LIVE);
  fillCache(sc,cacheSize,maxKey);
  long start=System.currentTimeMillis();
  Thread[] threads=new Thread[nThreads];
  final AtomicInteger puts=new AtomicInteger(0);
  for (int i=0; i < threads.length; i++) {
    final int seed=random().nextInt();
    threads[i]=new Thread(){
      @Override public void run(){
        int ret=useCache(sc,numGets / nThreads,maxKey,seed);
        puts.addAndGet(ret);
      }
    }
;
  }
  for (  Thread thread : threads) {
    try {
      thread.start();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  Thread thread : threads) {
    try {
      thread.join();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  long end=System.currentTimeMillis();
  System.out.println("time=" + (end - start) + " impl="+ sc.getClass().getSimpleName()+ " nThreads= "+ nThreads+ " size="+ cacheSize+ " maxKey="+ maxKey+ " gets="+ numGets+ " hitRatio="+ (1 - (((double)puts.get()) / numGets)));
}
