{
  Analyzer analyzer=new Analyzer(){
    @Override public TokenStreamComponents createComponents(    String fieldName){
      return new TokenStreamComponents(new Tokenizer(){
        private final String[] TOKENS={"1","2","3","4","5"};
        private final int[] INCREMENTS={1,2,1,0,1};
        private int i=0;
        PositionIncrementAttribute posIncrAtt=addAttribute(PositionIncrementAttribute.class);
        CharTermAttribute termAtt=addAttribute(CharTermAttribute.class);
        OffsetAttribute offsetAtt=addAttribute(OffsetAttribute.class);
        @Override public boolean incrementToken(){
          if (i == TOKENS.length)           return false;
          clearAttributes();
          termAtt.append(TOKENS[i]);
          offsetAtt.setOffset(i,i);
          posIncrAtt.setPositionIncrement(INCREMENTS[i]);
          i++;
          return true;
        }
        @Override public void reset() throws IOException {
          super.reset();
          this.i=0;
        }
      }
);
    }
  }
;
  Directory store=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),store,analyzer);
  Document d=new Document();
  d.add(newTextField("field","bogus",Field.Store.YES));
  writer.addDocument(d);
  IndexReader reader=writer.getReader();
  writer.close();
  IndexSearcher searcher=newSearcher(reader);
  PostingsEnum pos=MultiFields.getTermPositionsEnum(searcher.getIndexReader(),"field",new BytesRef("1"));
  pos.nextDoc();
  assertEquals(0,pos.nextPosition());
  pos=MultiFields.getTermPositionsEnum(searcher.getIndexReader(),"field",new BytesRef("2"));
  pos.nextDoc();
  assertEquals(2,pos.nextPosition());
  PhraseQuery q;
  ScoreDoc[] hits;
  q=new PhraseQuery("field","1","2");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  PhraseQuery.Builder builder=new PhraseQuery.Builder();
  builder.add(new Term("field","1"));
  builder.add(new Term("field","2"));
  q=builder.build();
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  builder=new PhraseQuery.Builder();
  builder.add(new Term("field","1"),0);
  builder.add(new Term("field","2"),1);
  q=builder.build();
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  builder=new PhraseQuery.Builder();
  builder.add(new Term("field","1"),0);
  builder.add(new Term("field","2"),2);
  q=builder.build();
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","2","3");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","3","4");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  builder=new PhraseQuery.Builder();
  builder.add(new Term("field","3"),0);
  builder.add(new Term("field","4"),0);
  q=builder.build();
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  builder=new PhraseQuery.Builder();
  builder.add(new Term("field","3"),0);
  builder.add(new Term("field","9"),0);
  q=builder.build();
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  MultiPhraseQuery.Builder mqb=new MultiPhraseQuery.Builder();
  mqb.add(new Term[]{new Term("field","3"),new Term("field","9")},0);
  hits=searcher.search(mqb.build(),1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","2","4");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","3","5");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","4","5");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery("field","2","5");
  hits=searcher.search(q,1000).scoreDocs;
  assertEquals(0,hits.length);
  reader.close();
  store.close();
}
