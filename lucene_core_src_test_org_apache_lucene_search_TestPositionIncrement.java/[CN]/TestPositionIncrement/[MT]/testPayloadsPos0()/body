{
  Directory dir=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,new MockPayloadAnalyzer());
  Document doc=new Document();
  doc.add(new TextField("content",new StringReader("a a b c d e a f g h i j a b k k")));
  writer.addDocument(doc);
  final IndexReader readerFromWriter=writer.getReader();
  LeafReader r=getOnlyLeafReader(readerFromWriter);
  PostingsEnum tp=r.postings(new Term("content","a"),PostingsEnum.ALL);
  int count=0;
  assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
  assertEquals(4,tp.freq());
  assertEquals(0,tp.nextPosition());
  assertEquals(1,tp.nextPosition());
  assertEquals(3,tp.nextPosition());
  assertEquals(6,tp.nextPosition());
  assertEquals(DocIdSetIterator.NO_MORE_DOCS,tp.nextDoc());
  IndexSearcher is=newSearcher(getOnlyLeafReader(readerFromWriter));
  SpanTermQuery stq1=new SpanTermQuery(new Term("content","a"));
  SpanTermQuery stq2=new SpanTermQuery(new Term("content","k"));
  SpanQuery[] sqs={stq1,stq2};
  SpanNearQuery snq=new SpanNearQuery(sqs,30,false);
  count=0;
  boolean sawZero=false;
  if (VERBOSE) {
    System.out.println("\ngetPayloadSpans test");
  }
  PayloadSpanCollector collector=new PayloadSpanCollector();
  Spans pspans=snq.createWeight(is,false,1f).getSpans(is.getIndexReader().leaves().get(0),SpanWeight.Postings.PAYLOADS);
  while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {
    while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {
      if (VERBOSE) {
        System.out.println("doc " + pspans.docID() + ": span "+ pspans.startPosition()+ " to "+ pspans.endPosition());
      }
      collector.reset();
      pspans.collect(collector);
      sawZero|=pspans.startPosition() == 0;
      for (      BytesRef payload : collector.payloads) {
        count++;
        if (VERBOSE) {
          System.out.println("  payload: " + Term.toString(payload));
        }
      }
    }
  }
  assertTrue(sawZero);
  assertEquals(8,count);
  Spans spans=snq.createWeight(is,false,1f).getSpans(is.getIndexReader().leaves().get(0),SpanWeight.Postings.POSITIONS);
  count=0;
  sawZero=false;
  while (spans.nextDoc() != Spans.NO_MORE_DOCS) {
    while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {
      count++;
      sawZero|=spans.startPosition() == 0;
    }
  }
  assertEquals(4,count);
  assertTrue(sawZero);
  writer.close();
  is.getIndexReader().close();
  dir.close();
}
