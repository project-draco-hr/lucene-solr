{
  if (a == null || b == null) {
    return null;
  }
  int x;
  int y;
  int maxx;
  int maxy;
  int go[]=new int[4];
  final int X=1;
  final int Y=2;
  final int R=3;
  final int D=0;
  maxx=a.length() + 1;
  maxy=b.length() + 1;
  if ((maxx >= sizex) || (maxy >= sizey)) {
    sizex=maxx + 8;
    sizey=maxy + 8;
    net=new int[sizex][sizey];
    way=new int[sizex][sizey];
  }
  for (x=0; x < maxx; x++) {
    for (y=0; y < maxy; y++) {
      net[x][y]=0;
    }
  }
  for (x=1; x < maxx; x++) {
    net[x][0]=x;
    way[x][0]=X;
  }
  for (y=1; y < maxy; y++) {
    net[0][y]=y;
    way[0][y]=Y;
  }
  for (x=1; x < maxx; x++) {
    for (y=1; y < maxy; y++) {
      go[X]=net[x - 1][y] + DELETE;
      go[Y]=net[x][y - 1] + INSERT;
      go[R]=net[x - 1][y - 1] + REPLACE;
      go[D]=net[x - 1][y - 1] + ((a.charAt(x - 1) == b.charAt(y - 1)) ? NOOP : 100);
      short min=D;
      if (go[min] >= go[X]) {
        min=X;
      }
      if (go[min] > go[Y]) {
        min=Y;
      }
      if (go[min] > go[R]) {
        min=R;
      }
      way[x][y]=min;
      net[x][y]=(short)go[min];
    }
  }
  StringBuilder result=new StringBuilder();
  final char base='a' - 1;
  char deletes=base;
  char equals=base;
  for (x=maxx - 1, y=maxy - 1; x + y != 0; ) {
switch (way[x][y]) {
case X:
      if (equals != base) {
        result.append("-" + (equals));
        equals=base;
      }
    deletes++;
  x--;
break;
case Y:
if (deletes != base) {
result.append("D" + (deletes));
deletes=base;
}
if (equals != base) {
result.append("-" + (equals));
equals=base;
}
result.append('I');
result.append(b.charAt(--y));
break;
case R:
if (deletes != base) {
result.append("D" + (deletes));
deletes=base;
}
if (equals != base) {
result.append("-" + (equals));
equals=base;
}
result.append('R');
result.append(b.charAt(--y));
x--;
break;
case D:
if (deletes != base) {
result.append("D" + (deletes));
deletes=base;
}
equals++;
x--;
y--;
break;
}
}
if (deletes != base) {
result.append("D" + (deletes));
deletes=base;
}
return result.toString();
}
