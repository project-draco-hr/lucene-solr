{
  int WORDS=(int)(76401 / 0.7);
  int GROUPS=(int)(88022 / 0.7);
  HashMap word2Groups=new HashMap(WORDS);
  HashMap group2Words=new HashMap(GROUPS);
  HashMap internedWords=new HashMap(WORDS);
  Charset charset=Charset.forName("UTF-8");
  int lastNum=-1;
  Integer lastGroup=null;
  int len=data.length;
  int i=0;
  while (i < len) {
    while (i < len && data[i] != '(')     i++;
    if (i >= len)     break;
    i++;
    int num=0;
    while (i < len && data[i] != ',') {
      num=10 * num + (data[i] - 48);
      i++;
    }
    i++;
    while (i < len && data[i] != '\'')     i++;
    i++;
    int start=i;
    do {
      while (i < len && data[i] != '\'')       i++;
      i++;
    }
 while (i < len && data[i] != ',');
    if (i >= len)     break;
    String word=charset.decode(ByteBuffer.wrap(data,start,i - start - 1)).toString();
    if (!isValid(word))     continue;
    word=analyze(word);
    if (word == null || word.length() == 0)     continue;
    String w=(String)internedWords.get(word);
    if (w == null) {
      word=new String(word);
      internedWords.put(word,word);
    }
 else {
      word=w;
    }
    Integer group=lastGroup;
    if (num != lastNum) {
      group=new Integer(num);
      lastGroup=group;
      lastNum=num;
    }
    ArrayList groups=(ArrayList)word2Groups.get(word);
    if (groups == null) {
      groups=new ArrayList(1);
      word2Groups.put(word,groups);
    }
    groups.add(group);
    ArrayList words=(ArrayList)group2Words.get(group);
    if (words == null) {
      words=new ArrayList(1);
      group2Words.put(group,words);
    }
    words.add(word);
  }
  HashMap word2Syns=createIndex(word2Groups,group2Words);
  word2Groups=null;
  group2Words=null;
  return optimize(word2Syns,internedWords);
}
