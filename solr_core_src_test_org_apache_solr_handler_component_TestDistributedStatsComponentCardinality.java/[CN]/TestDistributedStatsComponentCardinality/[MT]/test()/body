{
  buildIndex();
{
    QueryResponse rsp=null;
    rsp=query(params("rows","0","q","id:42"));
    assertEquals(1,rsp.getResults().getNumFound());
    rsp=query(params("rows","0","q","*:*","stats","true","stats.field","{!min=true max=true}long_l"));
    assertEquals(NUM_DOCS,rsp.getResults().getNumFound());
    assertEquals(MIN_LONG,Math.round((double)rsp.getFieldStatsInfo().get("long_l").getMin()));
    assertEquals(MAX_LONG,Math.round((double)rsp.getFieldStatsInfo().get("long_l").getMax()));
  }
  final int NUM_QUERIES=atLeast(100);
  for (int i=0; i < NUM_QUERIES; i++) {
    final int log2m=TestUtil.nextInt(random(),2 + HLL.MINIMUM_LOG2M_PARAM,HLL.MAXIMUM_LOG2M_PARAM);
    final int regwidth=HLL.MAXIMUM_REGWIDTH_PARAM;
    final int lowId=TestUtil.nextInt(random(),1,NUM_DOCS - 2000);
    final int highId=TestUtil.nextInt(random(),lowId + 1000,NUM_DOCS);
    final int numMatches=1 + highId - lowId;
    SolrParams p=buildCardinalityQ(lowId,highId,log2m,regwidth);
    QueryResponse rsp=query(p);
    assertEquals("sanity check num matches, p=" + p,numMatches,rsp.getResults().getNumFound());
    Map<String,FieldStatsInfo> stats=rsp.getFieldStatsInfo();
    for (    String f : STAT_FIELDS) {
      assertEquals(f + ": hashed vs prehashed, real=" + numMatches+ ", p="+ p,stats.get(f).getCardinality().longValue(),stats.get(f + "_prehashed_l").getCardinality().longValue());
    }
    for (    String f : STAT_FIELDS) {
      final double relErr=expectedRelativeError(log2m);
      final long estimate=stats.get(f).getCardinality().longValue();
      assertTrue(f + ": relativeErr=" + relErr+ ", estimate="+ estimate+ ", real="+ numMatches+ ", p="+ p,(Math.abs(numMatches - estimate) / numMatches) < relErr);
    }
  }
  for (int i=0; i < NUM_QUERIES; i++) {
    final int lowId=TestUtil.nextInt(random(),1,NUM_DOCS - 2000);
    final int highId=TestUtil.nextInt(random(),lowId + 1000,NUM_DOCS);
    final int numMatches=1 + highId - lowId;
    final double lowAccuracy=random().nextDouble() / 2;
    final double highAccuracy=Math.min(1.0D,lowAccuracy + 0.5D);
    SolrParams p=buildCardinalityQ(lowId,highId,lowAccuracy,highAccuracy);
    QueryResponse rsp=query(p);
    assertEquals("sanity check num matches, p=" + p,numMatches,rsp.getResults().getNumFound());
    Map<String,FieldStatsInfo> stats=rsp.getFieldStatsInfo();
    for (    String f : new String[]{"long_l","string_s"}) {
      assertEquals(f + ": hashed vs prehashed (low), real=" + numMatches+ ", p="+ p,stats.get("low_" + f).getCardinality().longValue(),stats.get("low_" + f + "_prehashed_l").getCardinality().longValue());
      assertEquals(f + ": hashed vs prehashed (high), real=" + numMatches+ ", p="+ p,stats.get("high_" + f).getCardinality().longValue(),stats.get("high_" + f + "_prehashed_l").getCardinality().longValue());
    }
    for (    String f : STAT_FIELDS) {
      for (      String ff : new String[]{f,f + "_prehashed_l"}) {
        long poorEst=stats.get("low_" + ff).getCardinality();
        long goodEst=stats.get("high_" + ff).getCardinality();
        assertTrue(ff + ": goodEst=" + goodEst+ ", poorEst="+ poorEst+ ", real="+ numMatches+ ", p="+ p,Math.abs(numMatches - goodEst) <= Math.abs(numMatches - poorEst));
      }
    }
  }
}
