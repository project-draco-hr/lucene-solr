{
  SolrQueryRequest req=rb.req;
  SolrQueryResponse rsp=rb.rsp;
  SolrParams params=req.getParams();
  if (!params.getBool(COMPONENT_NAME,true)) {
    return;
  }
  String versionsStr=params.get("getUpdates");
  if (versionsStr == null)   return;
  UpdateLog ulog=req.getCore().getUpdateHandler().getUpdateLog();
  if (ulog == null)   return;
  List<String> versions=StrUtils.splitSmart(versionsStr,",",true);
  List<Object> updates=new ArrayList<>(versions.size());
  long minVersion=Long.MAX_VALUE;
  UpdateLog.RecentUpdates recentUpdates=ulog.getRecentUpdates();
  try {
    for (    String versionStr : versions) {
      long version=Long.parseLong(versionStr);
      try {
        Object o=recentUpdates.lookup(version);
        if (o == null)         continue;
        if (version > 0) {
          minVersion=Math.min(minVersion,version);
        }
        updates.add(o);
      }
 catch (      SolrException e) {
        log.warn("Exception reading log for updates",e);
      }
catch (      ClassCastException e) {
        log.warn("Exception reading log for updates",e);
      }
    }
    updates.addAll(recentUpdates.getDeleteByQuery(minVersion));
    rb.rsp.add("updates",updates);
  }
  finally {
    recentUpdates.close();
  }
}
