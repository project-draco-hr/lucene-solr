{
  final IdsRequsted reqIds=IdsRequsted.parseParams(rb.req);
  if (reqIds.allIds.isEmpty()) {
    return ResponseBuilder.STAGE_DONE;
  }
  SolrParams params=rb.req.getParams();
  ZkController zkController=rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();
  if (zkController != null && params.get(ShardParams.SHARDS) == null) {
    CloudDescriptor cloudDescriptor=rb.req.getCore().getCoreDescriptor().getCloudDescriptor();
    String collection=cloudDescriptor.getCollectionName();
    ClusterState clusterState=zkController.getClusterState();
    DocCollection coll=clusterState.getCollection(collection);
    Map<String,List<String>> sliceToId=new HashMap<>();
    for (    String id : reqIds.allIds) {
      Slice slice=coll.getRouter().getTargetSlice(id,null,null,params,coll);
      List<String> idsForShard=sliceToId.get(slice.getName());
      if (idsForShard == null) {
        idsForShard=new ArrayList<>(2);
        sliceToId.put(slice.getName(),idsForShard);
      }
      idsForShard.add(id);
    }
    for (    Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {
      String shard=entry.getKey();
      ShardRequest sreq=createShardRequest(rb,entry.getValue());
      sreq.shards=sliceToShards(rb,collection,shard);
      sreq.actualShards=sreq.shards;
      rb.addRequest(this,sreq);
    }
  }
 else {
    ShardRequest sreq=createShardRequest(rb,reqIds.allIds);
    sreq.shards=null;
    sreq.actualShards=sreq.shards;
    rb.addRequest(this,sreq);
  }
  return ResponseBuilder.STAGE_DONE;
}
