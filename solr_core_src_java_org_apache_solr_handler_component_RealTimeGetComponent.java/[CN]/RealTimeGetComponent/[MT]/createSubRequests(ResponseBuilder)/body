{
  SolrParams params=rb.req.getParams();
  String id1[]=params.getParams("id");
  String ids[]=params.getParams("ids");
  if (id1 == null && ids == null) {
    return ResponseBuilder.STAGE_DONE;
  }
  List<String> allIds=new ArrayList<String>();
  if (id1 != null) {
    for (    String s : id1) {
      allIds.add(s);
    }
  }
  if (ids != null) {
    for (    String s : ids) {
      allIds.addAll(StrUtils.splitSmart(s,",",true));
    }
  }
  ZkController zkController=rb.req.getCore().getCoreDescriptor().getCoreContainer().getZkController();
  if (zkController != null && params.get("shards") == null) {
    SchemaField sf=rb.req.getSchema().getUniqueKeyField();
    CloudDescriptor cloudDescriptor=rb.req.getCore().getCoreDescriptor().getCloudDescriptor();
    String collection=cloudDescriptor.getCollectionName();
    ClusterState clusterState=zkController.getClusterState();
    Map<String,List<String>> shardToId=new HashMap<String,List<String>>();
    for (    String id : allIds) {
      BytesRef br=new BytesRef();
      sf.getType().readableToIndexed(id,br);
      int hash=Hash.murmurhash3_x86_32(br.bytes,br.offset,br.length,0);
      String shard=clusterState.getShard(hash,collection);
      List<String> idsForShard=shardToId.get(shard);
      if (idsForShard == null) {
        idsForShard=new ArrayList<String>(2);
        shardToId.put(shard,idsForShard);
      }
      idsForShard.add(id);
    }
    for (    Map.Entry<String,List<String>> entry : shardToId.entrySet()) {
      String shard=entry.getKey();
      String shardIdList=StrUtils.join(entry.getValue(),',');
      ShardRequest sreq=new ShardRequest();
      sreq.purpose=1;
      sreq.shards=sliceToShards(rb,collection,shard);
      sreq.actualShards=sreq.shards;
      sreq.params=new ModifiableSolrParams();
      sreq.params.set(ShardParams.SHARDS_QT,"/get");
      sreq.params.set("distrib",false);
      sreq.params.set("ids",shardIdList);
      rb.addRequest(this,sreq);
    }
  }
 else {
    String shardIdList=StrUtils.join(allIds,',');
    ShardRequest sreq=new ShardRequest();
    sreq.purpose=1;
    sreq.shards=null;
    sreq.actualShards=sreq.shards;
    sreq.params=new ModifiableSolrParams();
    sreq.params.set(ShardParams.SHARDS_QT,"/get");
    sreq.params.set("distrib",false);
    sreq.params.set("ids",shardIdList);
    rb.addRequest(this,sreq);
  }
  return ResponseBuilder.STAGE_DONE;
}
