{
  SolrParams params=req.getParams();
  int flags=0;
  SolrIndexSearcher s=req.getSearcher();
  IndexSchema schema=req.getSchema();
  Map<String,Float> queryFields=U.parseFieldBoosts(params.getParams(DMP.QF));
  Map<String,Float> phraseFields=U.parseFieldBoosts(params.getParams(DMP.PF));
  float tiebreaker=params.getFloat(DMP.TIE,0.0f);
  int pslop=params.getInt(DMP.PS,0);
  int qslop=params.getInt(DMP.QS,0);
  QueryParser p=schema.getSolrQueryParser(null);
  U.DisjunctionMaxQueryParser up=new U.DisjunctionMaxQueryParser(schema,IMPOSSIBLE_FIELD_NAME);
  up.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,queryFields);
  up.setPhraseSlop(qslop);
  U.DisjunctionMaxQueryParser pp=new U.DisjunctionMaxQueryParser(schema,IMPOSSIBLE_FIELD_NAME);
  pp.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,phraseFields);
  pp.setPhraseSlop(pslop);
  BooleanQuery query=new BooleanQuery(true);
  Query parsedUserQuery=null;
  String userQuery=params.get(Q);
  Query altUserQuery=null;
  if (userQuery == null || userQuery.trim().length() < 1) {
    String altQ=params.get(DMP.ALTQ);
    if (altQ != null) {
      altUserQuery=p.parse(altQ);
      query.add(altUserQuery,Occur.MUST);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"missing query string");
    }
  }
 else {
    userQuery=U.partialEscape(U.stripUnbalancedQuotes(userQuery)).toString();
    String minShouldMatch=params.get(DMP.MM,"100%");
    Query dis=up.parse(userQuery);
    parsedUserQuery=dis;
    if (dis instanceof BooleanQuery) {
      BooleanQuery t=new BooleanQuery();
      U.flattenBooleanQuery(t,(BooleanQuery)dis);
      U.setMinShouldMatch(t,minShouldMatch);
      parsedUserQuery=t;
    }
    query.add(parsedUserQuery,Occur.MUST);
    String userPhraseQuery=userQuery.replace("\"","");
    Query phrase=pp.parse("\"" + userPhraseQuery + "\"");
    if (null != phrase) {
      query.add(phrase,Occur.SHOULD);
    }
  }
  String[] boostParams=params.getParams(DMP.BQ);
  List<Query> boostQueries=U.parseQueryStrings(req,boostParams);
  if (null != boostQueries) {
    if (1 == boostQueries.size() && 1 == boostParams.length) {
      Query f=boostQueries.get(0);
      if (1.0f == f.getBoost() && f instanceof BooleanQuery) {
        for (        Object c : ((BooleanQuery)f).clauses()) {
          query.add((BooleanClause)c);
        }
      }
 else {
        query.add(f,BooleanClause.Occur.SHOULD);
      }
    }
 else {
      for (      Query f : boostQueries) {
        query.add(f,BooleanClause.Occur.SHOULD);
      }
    }
  }
  String[] boostFuncs=params.getParams(DMP.BF);
  if (null != boostFuncs && 0 != boostFuncs.length) {
    for (    String boostFunc : boostFuncs) {
      if (null == boostFunc || "".equals(boostFunc))       continue;
      List<Query> funcs=U.parseFuncs(schema,boostFunc);
      for (      Query f : funcs) {
        query.add(f,Occur.SHOULD);
      }
    }
  }
  List<Query> restrictions=U.parseFilterQueries(req);
  flags|=U.setReturnFields(req,rsp);
  DocListAndSet results=new DocListAndSet();
  NamedList facetInfo=null;
  if (params.getBool(FACET,false)) {
    results=s.getDocListAndSet(query,restrictions,SolrPluginUtils.getSort(req),req.getStart(),req.getLimit(),flags);
    facetInfo=getFacetInfo(req,rsp,results.docSet);
  }
 else {
    results.docList=s.getDocList(query,restrictions,SolrPluginUtils.getSort(req),req.getStart(),req.getLimit(),flags);
  }
  rsp.add("response",results.docList);
  U.optimizePreFetchDocs(results.docList,query,req,rsp);
  if (null != facetInfo)   rsp.add("facet_counts",facetInfo);
  try {
    NamedList debug=U.doStandardDebug(req,userQuery,query,results.docList);
    if (null != debug) {
      debug.add("altquerystring",altUserQuery);
      if (null != boostQueries) {
        debug.add("boost_queries",boostParams);
        debug.add("parsed_boost_queries",QueryParsing.toString(boostQueries,req.getSchema()));
      }
      debug.add("boostfuncs",params.getParams(DMP.BF));
      if (null != restrictions) {
        debug.add("filter_queries",params.getParams(FQ));
        debug.add("parsed_filter_queries",QueryParsing.toString(restrictions,req.getSchema()));
      }
      rsp.add("debug",debug);
    }
  }
 catch (  Exception e) {
    SolrException.logOnce(SolrCore.log,"Exception during debug",e);
    rsp.add("exception_during_debug",SolrException.toStr(e));
  }
  SolrHighlighter highlighter=req.getCore().getHighlighter();
  if (highlighter.isHighlightingEnabled(params) && parsedUserQuery != null) {
    String[] highFields=queryFields.keySet().toArray(new String[0]);
    NamedList sumData=highlighter.doHighlighting(results.docList,parsedUserQuery.rewrite(req.getSearcher().getReader()),req,highFields);
    if (sumData != null)     rsp.add("highlighting",sumData);
  }
}
