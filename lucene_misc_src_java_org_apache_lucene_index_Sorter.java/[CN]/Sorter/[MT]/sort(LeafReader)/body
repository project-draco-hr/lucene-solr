{
  SortField fields[]=sort.getSort();
  final int reverseMul[]=new int[fields.length];
  final LeafFieldComparator comparators[]=new LeafFieldComparator[fields.length];
  for (int i=0; i < fields.length; i++) {
    reverseMul[i]=fields[i].getReverse() ? -1 : 1;
    comparators[i]=fields[i].getComparator(1,i).getLeafComparator(reader.getContext());
    comparators[i].setScorer(FAKESCORER);
  }
  final DocComparator comparator=new DocComparator(){
    @Override public int compare(    int docID1,    int docID2){
      try {
        for (int i=0; i < comparators.length; i++) {
          comparators[i].copy(0,docID1);
          comparators[i].setBottom(0);
          int comp=reverseMul[i] * comparators[i].compareBottom(docID2);
          if (comp != 0) {
            return comp;
          }
        }
        return Integer.compare(docID1,docID2);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  return sort(reader.maxDoc(),comparator);
}
