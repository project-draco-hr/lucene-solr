{
  statsCollector.startRequest();
  NamedList<Object> res=new NamedList<>();
  List<AnalyticsRequest> requests;
  requests=AnalyticsRequestFactory.parse(searcher.getSchema(),params);
  if (requests == null || requests.size() == 0) {
    return res;
  }
  statsCollector.addRequests(requests.size());
  Filter filter=docs.getTopFilter();
  for (  AnalyticsRequest areq : requests) {
    ValueAccumulator accumulator;
    int facets=areq.getFieldFacets().size() + areq.getRangeFacets().size() + areq.getQueryFacets().size();
    try {
      if (facets == 0) {
        accumulator=BasicAccumulator.create(searcher,docs,areq);
      }
 else {
        accumulator=FacetingAccumulator.create(searcher,docs,areq,req);
      }
    }
 catch (    IOException e) {
      log.warn("Analytics request '" + areq.getName() + "' failed",e);
      continue;
    }
    statsCollector.addStatsCollected(((BasicAccumulator)accumulator).getNumStatsCollectors());
    statsCollector.addStatsRequests(areq.getExpressions().size());
    statsCollector.addFieldFacets(areq.getFieldFacets().size());
    statsCollector.addRangeFacets(areq.getRangeFacets().size());
    statsCollector.addQueryFacets(areq.getQueryFacets().size());
    statsCollector.addQueries(((BasicAccumulator)accumulator).getNumQueries());
    List<AtomicReaderContext> contexts=searcher.getTopReaderContext().leaves();
    for (int leafNum=0; leafNum < contexts.size(); leafNum++) {
      AtomicReaderContext context=contexts.get(leafNum);
      DocIdSet dis=filter.getDocIdSet(context,null);
      DocIdSetIterator disi=null;
      if (dis != null) {
        disi=dis.iterator();
      }
      if (disi != null) {
        accumulator.getLeafCollector(context);
        int doc=disi.nextDoc();
        while (doc != DocIdSetIterator.NO_MORE_DOCS) {
          accumulator.collect(doc);
          doc=disi.nextDoc();
        }
      }
    }
    accumulator.postProcess();
    accumulator.compute();
    res.add(areq.getName(),accumulator.export());
  }
  statsCollector.endRequest();
  return res;
}
