{
  return new ReindexingReader(root){
    @Override protected IndexWriterConfig getIndexWriterConfig() throws IOException {
      IndexWriterConfig iwc=newIndexWriterConfig();
      TieredMergePolicy tmp=new TieredMergePolicy();
      tmp.setFloorSegmentMB(.01);
      iwc.setMergePolicy(tmp);
      return iwc;
    }
    @Override protected Directory openDirectory(    Path path) throws IOException {
      MockDirectoryWrapper dir=newMockFSDirectory(path);
      dir.setUseSlowOpenClosers(false);
      dir.setThrottling(Throttling.NEVER);
      return dir;
    }
    @Override protected void reindex(    long oldSchemaGen,    long newSchemaGen,    LeafReader reader,    Directory parallelDir) throws IOException {
      IndexWriterConfig iwc=newIndexWriterConfig();
      iwc.setMergePolicy(new LogByteSizeMergePolicy());
      IndexWriter w=new IndexWriter(parallelDir,iwc);
      int maxDoc=reader.maxDoc();
      for (int i=0; i < maxDoc; i++) {
        StoredDocument oldDoc=reader.document(i);
        Document newDoc=new Document();
        long value=Long.parseLong(oldDoc.get("text").split(" ")[1]);
        newDoc.add(new NumericDocValuesField("number",value));
        newDoc.add(new LongField("number",value,Field.Store.NO));
        w.addDocument(newDoc);
      }
      if (random().nextBoolean()) {
        w.forceMerge(1);
      }
      w.close();
    }
    @Override protected long getCurrentSchemaGen(){
      return 0;
    }
  }
;
}
