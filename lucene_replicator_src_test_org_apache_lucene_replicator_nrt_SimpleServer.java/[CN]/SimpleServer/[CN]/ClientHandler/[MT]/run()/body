{
  boolean success=false;
  try {
    InputStream is=new BufferedInputStream(socket.getInputStream(),bufferSize);
    DataInput in=new InputStreamDataInput(is);
    BufferedOutputStream bos=new BufferedOutputStream(socket.getOutputStream(),bufferSize);
    DataOutput out=new OutputStreamDataOutput(bos);
    if (node instanceof SimplePrimaryNode) {
      ((SimplePrimaryNode)node).handleOneConnection(random(),ss,stop,is,socket,in,out,bos);
    }
 else {
      ((SimpleReplicaNode)node).handleOneConnection(ss,stop,is,socket,in,out,bos);
    }
    bos.flush();
    if (Node.VERBOSE_CONNECTIONS) {
      node.message("bos.flush done");
    }
    success=true;
  }
 catch (  Throwable t) {
    if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {
      node.message("unexpected exception handling client connection:");
      t.printStackTrace(System.out);
      throw new RuntimeException(t);
    }
 else {
      node.message("exception " + t + " handling client connection; ignoring");
    }
  }
 finally {
    if (success) {
      try {
        IOUtils.close(socket);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
 else {
      IOUtils.closeWhileHandlingException(socket);
    }
  }
  if (Node.VERBOSE_CONNECTIONS) {
    node.message("socket.close done");
  }
}
