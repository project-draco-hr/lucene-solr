{
  if (!(request instanceof HttpServletRequest))   return;
  if (cores == null || cores.isShutDown()) {
    log.error("Error processing the request. CoreContainer is either not initialized or shutting down.");
    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Error processing the request. CoreContainer is either not initialized or shutting down.");
  }
  AtomicReference<ServletRequest> wrappedRequest=new AtomicReference<>();
  if (!authenticateRequest(request,response,wrappedRequest)) {
    return;
  }
  if (wrappedRequest.get() != null) {
    request=wrappedRequest.get();
  }
  if (cores.getAuthenticationPlugin() != null) {
    log.debug("User principal: {}",((HttpServletRequest)request).getUserPrincipal());
  }
  if (excludePatterns != null) {
    String requestPath=((HttpServletRequest)request).getServletPath();
    String extraPath=((HttpServletRequest)request).getPathInfo();
    if (extraPath != null) {
      requestPath+=extraPath;
    }
    for (    Pattern p : excludePatterns) {
      Matcher matcher=p.matcher(requestPath);
      if (matcher.lookingAt()) {
        chain.doFilter(request,response);
        return;
      }
    }
  }
  HttpSolrCall call=getHttpSolrCall((HttpServletRequest)request,(HttpServletResponse)response,retry);
  try {
    Action result=call.call();
switch (result) {
case PASSTHROUGH:
      chain.doFilter(request,response);
    break;
case RETRY:
  doFilter(request,response,chain,true);
break;
case FORWARD:
request.getRequestDispatcher(call.getPath()).forward(request,response);
break;
}
}
  finally {
call.destroy();
}
}
