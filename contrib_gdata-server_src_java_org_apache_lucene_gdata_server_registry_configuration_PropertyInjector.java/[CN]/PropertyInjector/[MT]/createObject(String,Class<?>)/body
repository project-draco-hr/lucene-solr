{
  try {
    if (clazz == Class.class)     return Class.forName(s);
    if (clazz.isPrimitive())     clazz=ReflectionUtils.getPrimitiveWrapper(clazz);
    boolean defaultConst=false;
    boolean stringConst=false;
    Constructor[] constructors=clazz.getConstructors();
    if (constructors.length == 0)     defaultConst=true;
    for (int i=0; i < constructors.length; i++) {
      if (constructors[i].getParameterTypes().length == 0) {
        defaultConst=true;
        continue;
      }
      if (constructors[i].getParameterTypes().length == 1 && constructors[i].getParameterTypes()[0].equals(String.class))       stringConst=true;
    }
    if (stringConst) {
      Constructor constructor=clazz.getConstructor(new Class[]{String.class});
      return constructor.newInstance(new Object[]{s});
    }
    if (defaultConst)     return Class.forName(s).newInstance();
    throw new InjectionException("Parameter can not be created -- no default or String constructor found for class " + clazz.getName());
  }
 catch (  Exception e) {
    throw new InjectionException("can not create object for setter",e);
  }
}
