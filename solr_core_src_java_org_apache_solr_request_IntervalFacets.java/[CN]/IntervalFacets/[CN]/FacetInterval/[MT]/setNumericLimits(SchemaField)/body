{
  if (start == null) {
    startLimit=Long.MIN_VALUE;
  }
 else {
switch (schemaField.getType().getNumericType()) {
case LONG:
      if (schemaField.getType() instanceof TrieDateField) {
        startLimit=((Date)schemaField.getType().toObject(schemaField,start)).getTime();
      }
 else {
        startLimit=(long)schemaField.getType().toObject(schemaField,start);
      }
    break;
case INT:
  startLimit=((Integer)schemaField.getType().toObject(schemaField,start)).longValue();
break;
case FLOAT:
startLimit=NumericUtils.floatToSortableInt((float)schemaField.getType().toObject(schemaField,start));
break;
case DOUBLE:
startLimit=NumericUtils.doubleToSortableLong((double)schemaField.getType().toObject(schemaField,start));
break;
default :
throw new AssertionError();
}
if (startOpen) {
startLimit++;
}
}
if (end == null) {
endLimit=Long.MAX_VALUE;
}
 else {
switch (schemaField.getType().getNumericType()) {
case LONG:
if (schemaField.getType() instanceof TrieDateField) {
endLimit=((Date)schemaField.getType().toObject(schemaField,end)).getTime();
}
 else {
endLimit=(long)schemaField.getType().toObject(schemaField,end);
}
break;
case INT:
endLimit=((Integer)schemaField.getType().toObject(schemaField,end)).longValue();
break;
case FLOAT:
endLimit=NumericUtils.floatToSortableInt((float)schemaField.getType().toObject(schemaField,end));
break;
case DOUBLE:
endLimit=NumericUtils.doubleToSortableLong((double)schemaField.getType().toObject(schemaField,end));
break;
default :
throw new AssertionError();
}
if (endOpen) {
endLimit--;
}
}
}
