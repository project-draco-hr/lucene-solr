{
  ChecksumIndexInput entriesStream=null;
  Map<String,FileEntry> mapping=null;
  boolean success=false;
  try {
    final String entriesFileName=IndexFileNames.segmentFileName(IndexFileNames.stripExtension(name),"",IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);
    entriesStream=dir.openChecksumInput(entriesFileName,IOContext.READONCE);
    version=CodecUtil.checkHeader(entriesStream,CompoundFileWriter.ENTRY_CODEC,CompoundFileWriter.VERSION_START,CompoundFileWriter.VERSION_CURRENT);
    final int numEntries=entriesStream.readVInt();
    mapping=new HashMap<>(numEntries);
    for (int i=0; i < numEntries; i++) {
      final FileEntry fileEntry=new FileEntry();
      final String id=entriesStream.readString();
      FileEntry previous=mapping.put(id,fileEntry);
      if (previous != null) {
        throw new CorruptIndexException("Duplicate cfs entry id=" + id + " in CFS ",entriesStream);
      }
      fileEntry.offset=entriesStream.readLong();
      fileEntry.length=entriesStream.readLong();
    }
    if (version >= CompoundFileWriter.VERSION_CHECKSUM) {
      CodecUtil.checkFooter(entriesStream);
    }
 else {
      CodecUtil.checkEOF(entriesStream);
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(entriesStream);
    }
 else {
      IOUtils.closeWhileHandlingException(entriesStream);
    }
  }
  return mapping;
}
