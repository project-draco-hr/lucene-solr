{
  indexr(id,"0","a_s","hello0","a_i","0","a_f","0");
  indexr(id,"2","a_s","hello2","a_i","2","a_f","0");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello1","a_i","1","a_f","1");
  indexr(id,"5","a_s","hello0","a_i","10","a_f","0");
  indexr(id,"6","a_s","hello2","a_i","8","a_f","0");
  indexr(id,"7","a_s","hello3","a_i","7","a_f","3");
  indexr(id,"8","a_s","hello4","a_i","11","a_f","4");
  indexr(id,"9","a_s","hello1","a_i","100","a_f","1");
  commit();
  String zkHost=zkServer.getZkAddress();
  StreamFactory streamFactory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withStreamFunction("search",CloudSolrStream.class).withStreamFunction("unique",UniqueStream.class).withStreamFunction("top",RankStream.class).withStreamFunction("group",ReducerStream.class).withStreamFunction("merge",MergeStream.class).withStreamFunction("parallel",ParallelStream.class);
  ParallelStream pstream=(ParallelStream)streamFactory.constructStream("parallel(collection1, merge(search(collection1, q=\"id:(4 1 8 7 9)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), search(collection1, q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), on=\"a_i asc\"), workers=\"2\", zkHost=\"" + zkHost + "\", sort=\"a_i asc\")");
  List<Tuple> tuples=getTuples(pstream);
  assert(tuples.size() == 9);
  assertOrder(tuples,0,1,2,3,4,7,6,8,9);
  pstream=(ParallelStream)streamFactory.constructStream("parallel(collection1, merge(search(collection1, q=\"id:(4 1 8 9)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), search(collection1, q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), on=\"a_i desc\"), workers=\"2\", zkHost=\"" + zkHost + "\", sort=\"a_i desc\")");
  tuples=getTuples(pstream);
  assert(tuples.size() == 8);
  assertOrder(tuples,9,8,6,4,3,2,1,0);
  del("*:*");
  commit();
}
