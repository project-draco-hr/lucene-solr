{
  new UpdateRequest().add(id,"0","a_s","hello0","a_i","0","a_f","1").add(id,"2","a_s","hello0","a_i","2","a_f","2").add(id,"3","a_s","hello3","a_i","3","a_f","3").add(id,"4","a_s","hello4","a_i","4","a_f","4").add(id,"1","a_s","hello0","a_i","1","a_f","5").add(id,"5","a_s","hello3","a_i","10","a_f","6").add(id,"6","a_s","hello4","a_i","11","a_f","7").add(id,"7","a_s","hello3","a_i","12","a_f","8").add(id,"8","a_s","hello3","a_i","13","a_f","9").add(id,"9","a_s","hello0","a_i","14","a_f","10").commit(cluster.getSolrClient(),COLLECTION);
  String zkHost=cluster.getZkServer().getZkAddress();
  StreamFactory streamFactory=new StreamFactory().withCollectionZkHost(COLLECTION,zkHost).withFunctionName("search",CloudSolrStream.class).withFunctionName("group",GroupOperation.class).withFunctionName("reduce",ReducerStream.class).withFunctionName("parallel",ParallelStream.class);
  ParallelStream pstream=(ParallelStream)streamFactory.constructStream("parallel(" + COLLECTION + ", "+ "reduce("+ "search("+ COLLECTION+ ", q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc,a_f asc\", partitionKeys=\"a_s\"), "+ "by=\"a_s\","+ "group(sort=\"a_i asc\", n=\"5\")), "+ "workers=\"2\", zkHost=\""+ zkHost+ "\", sort=\"a_s asc\")");
  List<Tuple> tuples=getTuples(pstream);
  assert(tuples.size() == 3);
  Tuple t0=tuples.get(0);
  List<Map> maps0=t0.getMaps("group");
  assertMaps(maps0,0,1,2,9);
  Tuple t1=tuples.get(1);
  List<Map> maps1=t1.getMaps("group");
  assertMaps(maps1,3,5,7,8);
  Tuple t2=tuples.get(2);
  List<Map> maps2=t2.getMaps("group");
  assertMaps(maps2,4,6);
  pstream=(ParallelStream)streamFactory.constructStream("parallel(" + COLLECTION + ", "+ "reduce("+ "search("+ COLLECTION+ ", q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s desc,a_f asc\", partitionKeys=\"a_s\"), "+ "by=\"a_s\", "+ "group(sort=\"a_i desc\", n=\"5\")),"+ "workers=\"2\", zkHost=\""+ zkHost+ "\", sort=\"a_s desc\")");
  tuples=getTuples(pstream);
  assert(tuples.size() == 3);
  t0=tuples.get(0);
  maps0=t0.getMaps("group");
  assertMaps(maps0,6,4);
  t1=tuples.get(1);
  maps1=t1.getMaps("group");
  assertMaps(maps1,8,7,5,3);
  t2=tuples.get(2);
  maps2=t2.getMaps("group");
  assertMaps(maps2,9,2,1,0);
}
