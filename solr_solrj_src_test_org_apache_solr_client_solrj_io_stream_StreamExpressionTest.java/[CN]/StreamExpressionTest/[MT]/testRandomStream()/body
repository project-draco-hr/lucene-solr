{
  new UpdateRequest().add(id,"0","a_s","hello0","a_i","0","a_f","0").add(id,"2","a_s","hello2","a_i","2","a_f","0").add(id,"3","a_s","hello3","a_i","3","a_f","3").add(id,"4","a_s","hello4","a_i","4","a_f","4").add(id,"1","a_s","hello1","a_i","1","a_f","1").commit(cluster.getSolrClient(),COLLECTION);
  StreamExpression expression;
  TupleStream stream;
  StreamFactory factory=new StreamFactory().withCollectionZkHost(COLLECTION,cluster.getZkServer().getZkAddress()).withFunctionName("random",RandomStream.class);
  StreamContext context=new StreamContext();
  SolrClientCache cache=new SolrClientCache();
  try {
    context.setSolrClientCache(cache);
    expression=StreamExpressionParser.parse("random(" + COLLECTION + ", q=\"*:*\", rows=\"10\", fl=\"id, a_i\")");
    stream=factory.constructStream(expression);
    stream.setStreamContext(context);
    List<Tuple> tuples1=getTuples(stream);
    assert(tuples1.size() == 5);
    expression=StreamExpressionParser.parse("random(" + COLLECTION + ", q=\"*:*\", rows=\"10\", fl=\"id, a_i\")");
    stream=factory.constructStream(expression);
    stream.setStreamContext(context);
    List<Tuple> tuples2=getTuples(stream);
    assert(tuples2.size() == 5);
    boolean different=false;
    for (int i=0; i < tuples1.size(); i++) {
      Tuple tuple1=tuples1.get(i);
      Tuple tuple2=tuples2.get(i);
      if (!tuple1.get("id").equals(tuple2.get(id))) {
        different=true;
        break;
      }
    }
    assertTrue(different);
    Collections.sort(tuples1,new FieldComparator("id",ComparatorOrder.ASCENDING));
    Collections.sort(tuples2,new FieldComparator("id",ComparatorOrder.ASCENDING));
    for (int i=0; i < tuples1.size(); i++) {
      Tuple tuple1=tuples1.get(i);
      Tuple tuple2=tuples2.get(i);
      if (!tuple1.get("id").equals(tuple2.get(id))) {
        assert(tuple1.getLong("id").equals(tuple2.get("a_i")));
      }
    }
    expression=StreamExpressionParser.parse("random(" + COLLECTION + ", q=\"*:*\", rows=\"1\", fl=\"id, a_i\")");
    stream=factory.constructStream(expression);
    stream.setStreamContext(context);
    List<Tuple> tuples3=getTuples(stream);
    assert(tuples3.size() == 1);
  }
  finally {
    cache.close();
  }
}
