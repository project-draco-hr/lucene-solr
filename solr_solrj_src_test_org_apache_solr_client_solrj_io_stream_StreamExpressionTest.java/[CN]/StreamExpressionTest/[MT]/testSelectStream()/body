{
  indexr(id,"1","side_s","left","join1_i","0","join2_s","a","ident_s","left_1");
  indexr(id,"15","side_s","left","join1_i","0","join2_s","a","ident_s","left_1");
  indexr(id,"2","side_s","left","join1_i","0","join2_s","b","ident_s","left_2");
  indexr(id,"3","side_s","left","join1_i","1","join2_s","a","ident_s","left_3");
  indexr(id,"4","side_s","left","join1_i","1","join2_s","b","ident_s","left_4");
  indexr(id,"5","side_s","left","join1_i","1","join2_s","c","ident_s","left_5");
  indexr(id,"6","side_s","left","join1_i","2","join2_s","d","ident_s","left_6");
  indexr(id,"7","side_s","left","join1_i","3","join2_s","e","ident_s","left_7");
  indexr(id,"8","side_s","right","join1_i","0","join2_s","a","ident_s","right_1","join3_i","0");
  indexr(id,"9","side_s","right","join1_i","0","join2_s","a","ident_s","right_2","join3_i","0");
  indexr(id,"10","side_s","right","join1_i","1","join2_s","a","ident_s","right_3","join3_i","1");
  indexr(id,"11","side_s","right","join1_i","1","join2_s","b","ident_s","right_4","join3_i","1");
  indexr(id,"12","side_s","right","join1_i","1","join2_s","c","ident_s","right_5","join3_i","1");
  indexr(id,"13","side_s","right","join1_i","2","join2_s","dad","ident_s","right_6","join3_i","2");
  indexr(id,"14","side_s","right","join1_i","3","join2_s","e","ident_s","right_7","join3_i","3");
  commit();
  String clause;
  TupleStream stream;
  List<Tuple> tuples;
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withFunctionName("search",CloudSolrStream.class).withFunctionName("innerJoin",InnerJoinStream.class).withFunctionName("select",SelectStream.class).withFunctionName("replace",ReplaceOperation.class);
  clause="select(" + "id, join1_i as join1, join2_s as join2, ident_s as identity," + "search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"+ ")";
  stream=factory.constructStream(clause);
  tuples=getTuples(stream);
  assertFields(tuples,"id","join1","join2","identity");
  assertNotFields(tuples,"join1_i","join2_s","ident_s");
  clause="select(" + "id, join1_i as join1, join2_s as join2, ident_s as identity," + "replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),"+ "search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"+ ")";
  stream=factory.constructStream(clause);
  tuples=getTuples(stream);
  assertFields(tuples,"id","join1","join2","identity");
  assertNotFields(tuples,"join1_i","join2_s","ident_s");
  assertLong(tuples.get(0),"join1",12);
  assertLong(tuples.get(1),"join1",12);
  assertLong(tuples.get(2),"join1",12);
  assertLong(tuples.get(7),"join1",12);
  assertString(tuples.get(6),"join1","d");
  clause="innerJoin(" + "select(" + "id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"+ "search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"+ "),"+ "select("+ "join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"+ "search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"+ "),"+ "on=\"left.join1=right.join1, left.join2=right.join2\""+ ")";
  stream=factory.constructStream(clause);
  tuples=getTuples(stream);
  assertFields(tuples,"id","left.join1","left.join2","left.ident","right.join1","right.join2","right.ident");
  clause="select(" + "id, left.ident, right.ident," + "innerJoin("+ "select("+ "id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"+ "search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"+ "),"+ "select("+ "join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"+ "search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"+ "),"+ "on=\"left.join1=right.join1, left.join2=right.join2\""+ ")"+ ")";
  stream=factory.constructStream(clause);
  tuples=getTuples(stream);
  assertFields(tuples,"id","left.ident","right.ident");
  assertNotFields(tuples,"left.join1","left.join2","right.join1","right.join2");
  del("*:*");
  commit();
}
