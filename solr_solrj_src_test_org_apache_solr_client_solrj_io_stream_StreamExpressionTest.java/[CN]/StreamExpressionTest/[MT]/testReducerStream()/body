{
  indexr(id,"0","a_s","hello0","a_i","0","a_f","1");
  indexr(id,"2","a_s","hello0","a_i","2","a_f","2");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello0","a_i","1","a_f","5");
  indexr(id,"5","a_s","hello3","a_i","10","a_f","6");
  indexr(id,"6","a_s","hello4","a_i","11","a_f","7");
  indexr(id,"7","a_s","hello3","a_i","12","a_f","8");
  indexr(id,"8","a_s","hello3","a_i","13","a_f","9");
  indexr(id,"9","a_s","hello0","a_i","14","a_f","10");
  commit();
  StreamExpression expression;
  TupleStream stream;
  List<Tuple> tuples;
  Tuple t0, t1, t2;
  List<Map> maps0, maps1, maps2;
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withFunctionName("search",CloudSolrStream.class).withFunctionName("unique",UniqueStream.class).withFunctionName("top",RankStream.class).withFunctionName("group",ReducerStream.class);
  expression=StreamExpressionParser.parse("group(" + "search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f asc\")," + "by=\"a_s\")");
  stream=new ReducerStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 3);
  assertOrder(tuples,0,3,4);
  t0=tuples.get(0);
  maps0=t0.getMaps();
  assertMaps(maps0,0,2,1,9);
  t1=tuples.get(1);
  maps1=t1.getMaps();
  assertMaps(maps1,3,5,7,8);
  t2=tuples.get(2);
  maps2=t2.getMaps();
  assertMaps(maps2,4,6);
  expression=StreamExpressionParser.parse("group(" + "search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f       asc\")," + "by=\"a_s\")");
  stream=new ReducerStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 3);
  assertOrder(tuples,0,3,4);
  t0=tuples.get(0);
  maps0=t0.getMaps();
  assertMaps(maps0,0,2,1,9);
  t1=tuples.get(1);
  maps1=t1.getMaps();
  assertMaps(maps1,3,5,7,8);
  t2=tuples.get(2);
  maps2=t2.getMaps();
  assertMaps(maps2,4,6);
  del("*:*");
  commit();
}
