{
  indexr(id,"0","a_s","hello0","a_i","0","a_f","0");
  indexr(id,"2","a_s","hello2","a_i","2","a_f","0");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3");
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4");
  indexr(id,"1","a_s","hello1","a_i","1","a_f","1");
  commit();
  StreamExpression expression;
  TupleStream stream;
  List<Tuple> tuples;
  StreamFactory factory=new StreamFactory().withCollectionZkHost("collection1",zkServer.getZkAddress()).withStreamFunction("search",CloudSolrStream.class).withStreamFunction("unique",UniqueStream.class).withStreamFunction("merge",MergeStream.class);
  expression=StreamExpressionParser.parse("merge(" + "search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\")," + "search(collection1, q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"),"+ "on=\"a_f asc\")");
  stream=new MergeStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 4);
  assertOrder(tuples,0,1,3,4);
  expression=StreamExpressionParser.parse("merge(" + "search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\")," + "search(collection1, q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"+ "on=\"a_f desc\")");
  stream=new MergeStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 4);
  assertOrder(tuples,4,3,1,0);
  expression=StreamExpressionParser.parse("merge(" + "search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\")," + "search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"+ "on=\"a_f asc, a_s asc\")");
  stream=new MergeStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 5);
  assertOrder(tuples,0,2,1,3,4);
  stream=factory.constructStream("merge(" + "search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\")," + "search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"+ "on=\"a_f asc, a_s asc\")");
  tuples=getTuples(stream);
  assert(tuples.size() == 5);
  assertOrder(tuples,0,2,1,3,4);
  del("*:*");
  commit();
}
