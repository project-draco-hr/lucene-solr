{
  new UpdateRequest().add(id,"0","a_s","hello0","a_i","0","a_f","0").add(id,"2","a_s","hello2","a_i","2","a_f","0").add(id,"3","a_s","hello3","a_i","3","a_f","3").add(id,"4","a_s","hello4","a_i","4","a_f","4").add(id,"1","a_s","hello1","a_i","1","a_f","1").commit(cluster.getSolrClient(),COLLECTION);
  StreamExpression expression;
  TupleStream stream;
  List<Tuple> tuples;
  StreamFactory factory=new StreamFactory().withCollectionZkHost(COLLECTION,cluster.getZkServer().getZkAddress()).withFunctionName("search",CloudSolrStream.class).withFunctionName("unique",UniqueStream.class).withFunctionName("top",RankStream.class);
  expression=StreamExpressionParser.parse("top(" + "n=3," + "search(" + COLLECTION + ", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"+ "sort=\"a_f asc, a_i asc\")");
  stream=new RankStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 3);
  assertOrder(tuples,0,2,1);
  expression=StreamExpressionParser.parse("top(" + "n=2," + "unique("+ "search(" + COLLECTION + ", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"+ "over=\"a_f\"),"+ "sort=\"a_f desc\")");
  stream=new RankStream(expression,factory);
  tuples=getTuples(stream);
  assert(tuples.size() == 2);
  assertOrder(tuples,4,3);
  stream=factory.constructStream("top(" + "n=4," + "unique("+ "search(" + COLLECTION + ", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"+ "over=\"a_f\"),"+ "sort=\"a_f asc\")");
  tuples=getTuples(stream);
  assert(tuples.size() == 4);
  assertOrder(tuples,0,1,3,4);
  stream=factory.constructStream("top(" + "n=4," + "unique("+ "search(" + COLLECTION + ", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc, a_i desc\"),"+ "over=\"a_f\"),"+ "sort=\"a_f asc\")");
  tuples=getTuples(stream);
  assert(tuples.size() == 4);
  assertOrder(tuples,2,1,3,4);
}
