{
  SortedNumericEntry entry=sortedNumerics.get(field.name);
  if (entry.singleton) {
    LegacyNumericDocValues values=getNumericNonIterator(field);
    NumericEntry ne=numerics.get(field.name);
    Bits docsWithField=getMissingBits(field,ne.missingOffset,ne.missingBytes);
    return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField,values));
  }
 else {
    final LegacyNumericDocValues values=getNumericNonIterator(field);
    final MonotonicBlockPackedReader addr;
synchronized (this) {
      MonotonicBlockPackedReader res=addresses.get(field.name);
      if (res == null) {
        IndexInput data=this.data.clone();
        data.seek(entry.addressOffset);
        res=MonotonicBlockPackedReader.of(data,entry.packedIntsVersion,entry.blockSize,entry.valueCount,false);
        if (!merging) {
          addresses.put(field.name,res);
          ramBytesUsed.addAndGet(res.ramBytesUsed());
        }
      }
      addr=res;
    }
    if (values instanceof LongValues) {
      final LongValues longValues=(LongValues)values;
      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues(){
        long startOffset;
        long endOffset;
        @Override public void setDocument(        int doc){
          startOffset=(int)addr.get(doc);
          endOffset=(int)addr.get(doc + 1L);
        }
        @Override public long valueAt(        int index){
          return longValues.get(startOffset + index);
        }
        @Override public int count(){
          return (int)(endOffset - startOffset);
        }
      }
,maxDoc);
    }
 else {
      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues(){
        int startOffset;
        int endOffset;
        @Override public void setDocument(        int doc){
          startOffset=(int)addr.get(doc);
          endOffset=(int)addr.get(doc + 1);
        }
        @Override public long valueAt(        int index){
          return values.get(startOffset + index);
        }
        @Override public int count(){
          return (endOffset - startOffset);
        }
      }
,maxDoc);
    }
  }
}
