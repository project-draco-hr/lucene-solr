{
  NumericEntry entry=numerics.get(field.name);
  data.seek(entry.offset + entry.missingBytes);
switch (entry.format) {
case TABLE_COMPRESSED:
    int size=data.readVInt();
  if (size > 256) {
    throw new CorruptIndexException("TABLE_COMPRESSED cannot have more than 256 distinct values, got=" + size,data);
  }
final long decode[]=new long[size];
for (int i=0; i < decode.length; i++) {
decode[i]=data.readLong();
}
final int formatID=data.readVInt();
final int bitsPerValue=data.readVInt();
final PackedInts.Reader ordsReader=PackedInts.getReaderNoHeader(data,PackedInts.Format.byId(formatID),entry.packedIntsVersion,(int)entry.count,bitsPerValue);
if (!merging) {
ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());
numericInfo.put(field.name,Accountables.namedAccountable("table compressed",ordsReader));
}
return new NumericDocValues(){
@Override public long get(int docID){
return decode[(int)ordsReader.get(docID)];
}
}
;
case DELTA_COMPRESSED:
final long minDelta=data.readLong();
final int formatIDDelta=data.readVInt();
final int bitsPerValueDelta=data.readVInt();
final PackedInts.Reader deltaReader=PackedInts.getReaderNoHeader(data,PackedInts.Format.byId(formatIDDelta),entry.packedIntsVersion,(int)entry.count,bitsPerValueDelta);
if (!merging) {
ramBytesUsed.addAndGet(deltaReader.ramBytesUsed());
numericInfo.put(field.name,Accountables.namedAccountable("delta compressed",deltaReader));
}
return new NumericDocValues(){
@Override public long get(int docID){
return minDelta + deltaReader.get(docID);
}
}
;
case BLOCK_COMPRESSED:
final int blockSize=data.readVInt();
final BlockPackedReader reader=new BlockPackedReader(data,entry.packedIntsVersion,blockSize,entry.count,false);
if (!merging) {
ramBytesUsed.addAndGet(reader.ramBytesUsed());
numericInfo.put(field.name,Accountables.namedAccountable("block compressed",reader));
}
return reader;
case GCD_COMPRESSED:
final long min=data.readLong();
final long mult=data.readLong();
final int formatIDGCD=data.readVInt();
final int bitsPerValueGCD=data.readVInt();
final PackedInts.Reader quotientReader=PackedInts.getReaderNoHeader(data,PackedInts.Format.byId(formatIDGCD),entry.packedIntsVersion,(int)entry.count,bitsPerValueGCD);
if (!merging) {
ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());
numericInfo.put(field.name,Accountables.namedAccountable("gcd compressed",quotientReader));
}
return new NumericDocValues(){
@Override public long get(int docID){
return min + mult * quotientReader.get(docID);
}
}
;
default :
throw new AssertionError();
}
}
