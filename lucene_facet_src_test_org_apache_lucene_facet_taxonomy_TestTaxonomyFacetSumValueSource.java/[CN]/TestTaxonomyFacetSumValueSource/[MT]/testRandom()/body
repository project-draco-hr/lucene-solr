{
  String[] tokens=getRandomTokens(10);
  Directory indexDir=newDirectory();
  Directory taxoDir=newDirectory();
  RandomIndexWriter w=new RandomIndexWriter(random(),indexDir);
  DirectoryTaxonomyWriter tw=new DirectoryTaxonomyWriter(taxoDir);
  FacetsConfig config=new FacetsConfig();
  int numDocs=atLeast(1000);
  int numDims=_TestUtil.nextInt(random(),1,7);
  List<TestDoc> testDocs=getRandomDocs(tokens,numDocs,numDims);
  for (  TestDoc testDoc : testDocs) {
    Document doc=new Document();
    doc.add(newStringField("content",testDoc.content,Field.Store.NO));
    testDoc.value=random().nextFloat();
    doc.add(new FloatDocValuesField("value",testDoc.value));
    for (int j=0; j < numDims; j++) {
      if (testDoc.dims[j] != null) {
        doc.add(new FacetField("dim" + j,testDoc.dims[j]));
      }
    }
    w.addDocument(config.build(tw,doc));
  }
  IndexSearcher searcher=newSearcher(w.getReader());
  TaxonomyReader tr=new DirectoryTaxonomyReader(tw);
  ValueSource values=new FloatFieldSource("value");
  int iters=atLeast(100);
  for (int iter=0; iter < iters; iter++) {
    String searchToken=tokens[random().nextInt(tokens.length)];
    if (VERBOSE) {
      System.out.println("\nTEST: iter content=" + searchToken);
    }
    FacetsCollector fc=new FacetsCollector();
    FacetsCollector.search(searcher,new TermQuery(new Term("content",searchToken)),10,fc);
    Facets facets=new TaxonomyFacetSumValueSource(tr,config,fc,values);
    @SuppressWarnings({"rawtypes","unchecked"}) Map<String,Float>[] expectedValues=new HashMap[numDims];
    for (int i=0; i < numDims; i++) {
      expectedValues[i]=new HashMap<String,Float>();
    }
    for (    TestDoc doc : testDocs) {
      if (doc.content.equals(searchToken)) {
        for (int j=0; j < numDims; j++) {
          if (doc.dims[j] != null) {
            Float v=expectedValues[j].get(doc.dims[j]);
            if (v == null) {
              expectedValues[j].put(doc.dims[j],doc.value);
            }
 else {
              expectedValues[j].put(doc.dims[j],v.floatValue() + doc.value);
            }
          }
        }
      }
    }
    List<FacetResult> expected=new ArrayList<FacetResult>();
    for (int i=0; i < numDims; i++) {
      List<LabelAndValue> labelValues=new ArrayList<LabelAndValue>();
      double totValue=0;
      for (      Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {
        labelValues.add(new LabelAndValue(ent.getKey(),ent.getValue()));
        totValue+=ent.getValue();
      }
      sortLabelValues(labelValues);
      if (totValue > 0) {
        expected.add(new FacetResult("dim" + i,new String[0],totValue,labelValues.toArray(new LabelAndValue[labelValues.size()]),labelValues.size()));
      }
    }
    sortFacetResults(expected);
    List<FacetResult> actual=facets.getAllDims(10);
    sortTies(actual);
    if (VERBOSE) {
      System.out.println("expected=\n" + expected.toString());
      System.out.println("actual=\n" + actual.toString());
    }
    assertFloatValuesEquals(expected,actual);
  }
  IOUtils.close(w,tw,searcher.getIndexReader(),tr,indexDir,taxoDir);
}
