{
  final LRUFilterCache filterCache=new LRUFilterCache(1 + random().nextInt(20),1 + random().nextInt(10000));
  Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir);
  SearcherManager mgr=new SearcherManager(w.w,random().nextBoolean(),new SearcherFactory());
  final AtomicBoolean indexing=new AtomicBoolean(true);
  final AtomicReference<Throwable> error=new AtomicReference<>();
  final int numDocs=atLeast(10000);
  Thread[] threads=new Thread[3];
  threads[0]=new Thread(){
    public void run(){
      Document doc=new Document();
      StringField f=new StringField("color","",Store.NO);
      doc.add(f);
      for (int i=0; indexing.get() && i < numDocs; ++i) {
        f.setStringValue(RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow"}));
        try {
          w.addDocument(doc);
          if ((i & 63) == 0) {
            mgr.maybeRefresh();
            if (rarely()) {
              filterCache.clear();
            }
            if (rarely()) {
              final String color=RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow"});
              w.deleteDocuments(new Term("color",color));
            }
          }
        }
 catch (        Throwable t) {
          error.compareAndSet(null,t);
          break;
        }
      }
      indexing.set(false);
    }
  }
;
  for (int i=1; i < threads.length; ++i) {
    threads[i]=new Thread(){
      @Override public void run(){
        while (indexing.get()) {
          try {
            final IndexSearcher searcher=mgr.acquire();
            try {
              final String value=RandomPicks.randomFrom(random(),new String[]{"blue","red","yellow","green"});
              final Filter f=new QueryWrapperFilter(new TermQuery(new Term("color",value)));
              final Filter cached=filterCache.doCache(f,MAYBE_CACHE_POLICY);
              TotalHitCountCollector collector=new TotalHitCountCollector();
              searcher.search(new ConstantScoreQuery(cached),collector);
              TotalHitCountCollector collector2=new TotalHitCountCollector();
              searcher.search(new ConstantScoreQuery(f),collector2);
              assertEquals(collector.getTotalHits(),collector2.getTotalHits());
            }
  finally {
              mgr.release(searcher);
            }
          }
 catch (          Throwable t) {
            error.compareAndSet(null,t);
          }
        }
      }
    }
;
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  if (error.get() != null) {
    throw error.get();
  }
  filterCache.assertConsistent();
  mgr.close();
  w.close();
  dir.close();
  filterCache.assertConsistent();
}
