{
  PayloadTermSpanScorer scorer=(PayloadTermSpanScorer)scorer(context,ScorerContext.def());
  if (scorer != null) {
    int newDoc=scorer.advance(doc);
    if (newDoc == doc) {
      float freq=scorer.freq();
      SloppyDocScorer docScorer=similarity.sloppyDocScorer(stats,query.getField(),context);
      Explanation expl=new Explanation();
      expl.setDescription("weight(" + getQuery() + " in "+ doc+ ") ["+ similarity.getClass().getSimpleName()+ "], result of:");
      Explanation scoreExplanation=docScorer.explain(doc,new Explanation(freq,"phraseFreq=" + freq));
      expl.addDetail(scoreExplanation);
      expl.setValue(scoreExplanation.getValue());
      Explanation payloadExpl=new Explanation(scorer.getPayloadScore(),"scorePayload(...)");
      payloadExpl.setValue(scorer.getPayloadScore());
      ComplexExplanation result=new ComplexExplanation();
      if (includeSpanScore) {
        result.addDetail(expl);
        result.addDetail(payloadExpl);
        result.setValue(expl.getValue() * payloadExpl.getValue());
        result.setDescription("btq, product of:");
      }
 else {
        result.addDetail(payloadExpl);
        result.setValue(payloadExpl.getValue());
        result.setDescription("btq(includeSpanScore=false), result of:");
      }
      result.setMatch(true);
      return result;
    }
  }
  return new ComplexExplanation(false,0.0f,"no matching term");
}
