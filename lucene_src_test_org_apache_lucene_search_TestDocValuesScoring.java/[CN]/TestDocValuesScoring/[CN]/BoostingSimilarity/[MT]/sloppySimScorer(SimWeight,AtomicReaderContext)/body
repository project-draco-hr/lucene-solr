{
  final SloppySimScorer sub=sim.sloppySimScorer(stats,context);
  final Source values=context.reader().docValues(boostField).getSource();
  return new SloppySimScorer(){
    @Override public float score(    int doc,    float freq){
      return (float)values.getFloat(doc) * sub.score(doc,freq);
    }
    @Override public float computeSlopFactor(    int distance){
      return sub.computeSlopFactor(distance);
    }
    @Override public float computePayloadFactor(    int doc,    int start,    int end,    BytesRef payload){
      return sub.computePayloadFactor(doc,start,end,payload);
    }
    @Override public Explanation explain(    int doc,    Explanation freq){
      Explanation boostExplanation=new Explanation((float)values.getFloat(doc),"indexDocValue(" + boostField + ")");
      Explanation simExplanation=sub.explain(doc,freq);
      Explanation expl=new Explanation(boostExplanation.getValue() * simExplanation.getValue(),"product of:");
      expl.addDetail(boostExplanation);
      expl.addDetail(simExplanation);
      return expl;
    }
  }
;
}
