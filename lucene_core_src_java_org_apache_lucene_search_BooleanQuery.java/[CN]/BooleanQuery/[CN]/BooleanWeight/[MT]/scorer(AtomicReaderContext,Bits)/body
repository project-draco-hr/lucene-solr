{
  List<Scorer> required=new ArrayList<>();
  List<Scorer> prohibited=new ArrayList<>();
  List<Scorer> optional=new ArrayList<>();
  Iterator<BooleanClause> cIter=clauses.iterator();
  for (  Weight w : weights) {
    BooleanClause c=cIter.next();
    Scorer subScorer=w.scorer(context,acceptDocs);
    if (subScorer == null) {
      if (c.isRequired()) {
        return null;
      }
    }
 else     if (c.isRequired()) {
      required.add(subScorer);
    }
 else     if (c.isProhibited()) {
      prohibited.add(subScorer);
    }
 else {
      optional.add(subScorer);
    }
  }
  if (required.size() == 0 && optional.size() == 0) {
    return null;
  }
 else   if (optional.size() < minNrShouldMatch) {
    return null;
  }
  if (optional.size() == 0 && prohibited.size() == 0) {
    float coord=disableCoord ? 1.0f : coord(required.size(),maxCoord);
    return new ConjunctionScorer(this,required.toArray(new Scorer[required.size()]),coord);
  }
  if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {
    float coord[]=new float[optional.size() + 1];
    for (int i=0; i < coord.length; i++) {
      coord[i]=disableCoord ? 1.0f : coord(i,maxCoord);
    }
    return new DisjunctionSumScorer(this,optional.toArray(new Scorer[optional.size()]),coord);
  }
  return new BooleanScorer2(this,disableCoord,minNrShouldMatch,required,prohibited,optional,maxCoord);
}
