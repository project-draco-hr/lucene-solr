{
  if (optional.size() == 1) {
    Scorer opt=optional.get(0);
    if (!disableCoord && maxCoord > 1) {
      return new BoostedScorer(opt,coord(1,maxCoord));
    }
 else {
      return opt;
    }
  }
 else {
    float coords[];
    if (disableCoord) {
      coords=new float[optional.size() + 1];
      Arrays.fill(coords,1F);
    }
 else {
      coords=coords();
    }
    if (minShouldMatch > 1) {
      return new MinShouldMatchSumScorer(this,optional,minShouldMatch,coords);
    }
 else {
      return new DisjunctionSumScorer(this,optional.toArray(new Scorer[optional.size()]),coords);
    }
  }
}
