{
  final long[] values=new long[TestUtil.nextInt(random(),1,500)];
  for (int i=0; i < values.length; ++i) {
    values[i]=random().nextLong();
  }
  Directory dir=newFSDirectory(createTempDir());
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random()));
  conf.setMergeScheduler(new SerialMergeScheduler());
  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);
  final int avgGap=100;
  final int numDocs=atLeast(100);
  for (int i=random().nextInt(avgGap * 2); i >= 0; --i) {
    writer.addDocument(new Document());
  }
  final int maxNumValuesPerDoc=random().nextBoolean() ? 1 : TestUtil.nextInt(random(),2,5);
  for (int i=0; i < numDocs; ++i) {
    Document doc=new Document();
    long docValue=values[random().nextInt(values.length)];
    doc.add(new NumericDocValuesField("numeric",docValue));
    doc.add(new SortedDocValuesField("sorted",new BytesRef(Long.toString(docValue))));
    doc.add(new BinaryDocValuesField("binary",new BytesRef(Long.toString(docValue))));
    doc.add(new StoredField("value",docValue));
    final int numValues=TestUtil.nextInt(random(),1,maxNumValuesPerDoc);
    for (int j=0; j < numValues; ++j) {
      docValue=values[random().nextInt(values.length)];
      doc.add(new SortedNumericDocValuesField("sorted_numeric",docValue));
      doc.add(new SortedSetDocValuesField("sorted_set",new BytesRef(Long.toString(docValue))));
      doc.add(new StoredField("values",docValue));
    }
    writer.addDocument(doc);
    for (int j=random().nextInt(avgGap * 2); j >= 0; --j) {
      writer.addDocument(new Document());
    }
  }
  if (random().nextBoolean()) {
    writer.forceMerge(1);
  }
  final IndexReader indexReader=writer.getReader();
  writer.close();
  for (  LeafReaderContext context : indexReader.leaves()) {
    final LeafReader reader=context.reader();
    final NumericDocValues numeric=DocValues.getNumeric(reader,"numeric");
    final Bits numericBits=DocValues.getDocsWithField(reader,"numeric");
    final SortedDocValues sorted=DocValues.getSorted(reader,"sorted");
    final Bits sortedBits=DocValues.getDocsWithField(reader,"sorted");
    final BinaryDocValues binary=DocValues.getBinary(reader,"binary");
    final Bits binaryBits=DocValues.getDocsWithField(reader,"binary");
    final SortedNumericDocValues sortedNumeric=DocValues.getSortedNumeric(reader,"sorted_numeric");
    final Bits sortedNumericBits=DocValues.getDocsWithField(reader,"sorted_numeric");
    final SortedSetDocValues sortedSet=DocValues.getSortedSet(reader,"sorted_set");
    final Bits sortedSetBits=DocValues.getDocsWithField(reader,"sorted_set");
    for (int i=0; i < reader.maxDoc(); ++i) {
      final StoredDocument doc=reader.document(i);
      final StorableField valueField=doc.getField("value");
      final Long value=valueField == null ? null : valueField.numericValue().longValue();
      if (value == null) {
        assertEquals(0,numeric.get(i));
        assertEquals(-1,sorted.getOrd(i));
        assertEquals(new BytesRef(),binary.get(i));
        assertFalse(numericBits.get(i));
        assertFalse(sortedBits.get(i));
        assertFalse(binaryBits.get(i));
      }
 else {
        assertEquals(value.longValue(),numeric.get(i));
        assertTrue(sorted.getOrd(i) >= 0);
        assertEquals(new BytesRef(Long.toString(value)),sorted.lookupOrd(sorted.getOrd(i)));
        assertEquals(new BytesRef(Long.toString(value)),binary.get(i));
        assertTrue(numericBits.get(i));
        assertTrue(sortedBits.get(i));
        assertTrue(binaryBits.get(i));
      }
      final StorableField[] valuesFields=doc.getFields("values");
      final Set<Long> valueSet=new HashSet<>();
      for (      StorableField sf : valuesFields) {
        valueSet.add(sf.numericValue().longValue());
      }
      sortedNumeric.setDocument(i);
      assertEquals(valuesFields.length,sortedNumeric.count());
      for (int j=0; j < sortedNumeric.count(); ++j) {
        assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));
      }
      sortedSet.setDocument(i);
      int sortedSetCount=0;
      while (true) {
        long ord=sortedSet.nextOrd();
        if (ord == SortedSetDocValues.NO_MORE_ORDS) {
          break;
        }
        assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));
        sortedSetCount++;
      }
      assertEquals(valueSet.size(),sortedSetCount);
      assertEquals(!valueSet.isEmpty(),sortedNumericBits.get(i));
      assertEquals(!valueSet.isEmpty(),sortedSetBits.get(i));
    }
  }
  indexReader.close();
  dir.close();
}
