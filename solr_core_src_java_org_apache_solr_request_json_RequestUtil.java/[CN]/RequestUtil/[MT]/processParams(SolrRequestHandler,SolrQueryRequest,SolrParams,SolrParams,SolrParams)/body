{
  boolean searchHandler=handler instanceof SearchHandler;
  SolrParams params=req.getParams();
  if (searchHandler && req.getContentStreams() != null) {
    Map<String,String[]> map=MultiMapSolrParams.asMultiMap(params,false);
    if (!(params instanceof MultiMapSolrParams || params instanceof ModifiableSolrParams)) {
      params=new MultiMapSolrParams(map);
      req.setParams(params);
    }
    String[] jsonFromParams=map.remove(JSON);
    for (    ContentStream cs : req.getContentStreams()) {
      String contentType=cs.getContentType();
      if (contentType == null || !contentType.contains("/json")) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Bad contentType for search handler :" + contentType + " request="+ req);
      }
      try {
        String jsonString=IOUtils.toString(cs.getReader());
        if (jsonString != null) {
          MultiMapSolrParams.addParam(JSON,jsonString,map);
        }
      }
 catch (      IOException e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Exception reading content stream for request:" + req,e);
      }
    }
    if (jsonFromParams != null) {
      for (      String json : jsonFromParams) {
        MultiMapSolrParams.addParam(JSON,json,map);
      }
    }
  }
  String[] jsonS=params.getParams(JSON);
  boolean hasAdditions=defaults != null || invariants != null || appends != null || jsonS != null;
  if (!hasAdditions && !params.getBool("expandMacros",true)) {
    return;
  }
  boolean isShard=params.getBool("isShard",false);
  Map<String,String[]> newMap=MultiMapSolrParams.asMultiMap(params,hasAdditions);
  if (jsonS != null && !isShard) {
    for (    String json : jsonS) {
      getParamsFromJSON(newMap,json);
    }
  }
  if (defaults != null) {
    Map<String,String[]> defaultsMap=MultiMapSolrParams.asMultiMap(defaults);
    for (    Map.Entry<String,String[]> entry : defaultsMap.entrySet()) {
      String key=entry.getKey();
      if (!newMap.containsKey(key)) {
        newMap.put(key,entry.getValue());
      }
    }
  }
  if (appends != null) {
    Map<String,String[]> appendsMap=MultiMapSolrParams.asMultiMap(appends);
    for (    Map.Entry<String,String[]> entry : appendsMap.entrySet()) {
      String key=entry.getKey();
      String[] arr=newMap.get(key);
      if (arr == null) {
        newMap.put(key,entry.getValue());
      }
 else {
        String[] appendArr=entry.getValue();
        String[] newArr=new String[arr.length + appendArr.length];
        System.arraycopy(arr,0,newArr,0,arr.length);
        System.arraycopy(appendArr,0,newArr,arr.length,appendArr.length);
        newMap.put(key,newArr);
      }
    }
  }
  if (invariants != null) {
    newMap.putAll(MultiMapSolrParams.asMultiMap(invariants));
  }
  String[] doMacrosStr=newMap.get("expandMacros");
  boolean doMacros=true;
  if (doMacrosStr != null) {
    doMacros="true".equals(doMacrosStr[0]);
  }
  if (doMacros) {
    newMap=MacroExpander.expand(newMap);
  }
  SolrParams newParams=new MultiMapSolrParams(newMap);
  req.setParams(newParams);
  if (!searchHandler)   return;
  Map<String,Object> json=null;
  jsonS=newMap.get(JSON);
  if (jsonS != null) {
    if (json == null) {
      json=new LinkedHashMap<>();
    }
    mergeJSON(json,JSON,jsonS,new ObjectUtil.ConflictHandler());
  }
  for (  String key : newMap.keySet()) {
    if (key.startsWith("json.") && !("json.nl".equals(key) || "json.wrf".equals(key))) {
      if (json == null) {
        json=new LinkedHashMap<>();
      }
      mergeJSON(json,key,newMap.get(key),new ObjectUtil.ConflictHandler());
    }
  }
  if (json != null && !isShard) {
    for (    Map.Entry<String,Object> entry : json.entrySet()) {
      String key=entry.getKey();
      String out=null;
      boolean arr=false;
      if ("query".equals(key)) {
        out="q";
      }
 else       if ("filter".equals(key)) {
        out="fq";
        arr=true;
      }
 else       if ("fields".equals(key)) {
        out="fl";
        arr=true;
      }
 else       if ("offset".equals(key)) {
        out="start";
      }
 else       if ("limit".equals(key)) {
        out="rows";
      }
 else       if ("sort".equals(key)) {
        out="sort";
      }
 else       if ("params".equals(key) || "facet".equals(key)) {
        continue;
      }
 else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unknown top-level key in JSON request : " + key);
      }
      Object val=entry.getValue();
      if (arr) {
        String[] existing=newMap.get(out);
        List lst=val instanceof List ? (List)val : null;
        int existingSize=existing == null ? 0 : existing.length;
        int jsonSize=lst == null ? 1 : lst.size();
        String[] newval=new String[existingSize + jsonSize];
        for (int i=0; i < existingSize; i++) {
          newval[i]=existing[i];
        }
        if (lst != null) {
          for (int i=0; i < jsonSize; i++) {
            Object v=lst.get(i);
            newval[existingSize + i]=v.toString();
          }
        }
 else {
          newval[newval.length - 1]=val.toString();
        }
        newMap.put(out,newval);
      }
 else {
        newMap.put(out,new String[]{val.toString()});
      }
    }
  }
  if (json != null) {
    req.setJSON(json);
  }
}
