{
  DocSet filter=cmd.getFilter() != null ? cmd.getFilter() : getDocSet(cmd.getFilterList());
  final long timeAllowed=cmd.getTimeAllowed();
  int len=cmd.getSupersetMaxDoc();
  int last=len;
  if (last < 0 || last > maxDoc())   last=maxDoc();
  final int lastDocRequested=last;
  int nDocsReturned;
  int totalHits;
  float maxScore;
  int[] ids;
  float[] scores;
  Query query=QueryUtils.makeQueryable(cmd.getQuery());
  if (lastDocRequested <= 0) {
    final DocSet filt=filter;
    final float[] topscore=new float[]{Float.NEGATIVE_INFINITY};
    final int[] numHits=new int[1];
    HitCollector hc=new HitCollector(){
      public void collect(      int doc,      float score){
        if (filt != null && !filt.exists(doc))         return;
        numHits[0]++;
        if (score > topscore[0])         topscore[0]=score;
      }
    }
;
    if (timeAllowed > 0) {
      hc=new TimeLimitedCollector(hc,timeAllowed);
    }
    try {
      searcher.search(query,hc);
    }
 catch (    TimeLimitedCollector.TimeExceededException x) {
      log.warn("Query: " + query + "; "+ x.getMessage());
      qr.setPartialResults(true);
    }
    nDocsReturned=0;
    ids=new int[nDocsReturned];
    scores=new float[nDocsReturned];
    totalHits=numHits[0];
    maxScore=totalHits > 0 ? topscore[0] : 0.0f;
  }
 else   if (cmd.getSort() != null) {
    final DocSet filt=filter;
    final int[] numHits=new int[1];
    final FieldSortedHitQueue hq=new FieldSortedHitQueue(reader,cmd.getSort().getSort(),len);
    HitCollector hc=new HitCollector(){
      private FieldDoc reusableFD;
      public void collect(      int doc,      float score){
        if (filt != null && !filt.exists(doc))         return;
        numHits[0]++;
        if (reusableFD == null)         reusableFD=new FieldDoc(doc,score);
 else {
          reusableFD.score=score;
          reusableFD.doc=doc;
        }
        reusableFD=(FieldDoc)hq.insertWithOverflow(reusableFD);
      }
    }
;
    if (timeAllowed > 0) {
      hc=new TimeLimitedCollector(hc,timeAllowed);
    }
    try {
      searcher.search(query,hc);
    }
 catch (    TimeLimitedCollector.TimeExceededException x) {
      log.warn("Query: " + query + "; "+ x.getMessage());
      qr.setPartialResults(true);
    }
    totalHits=numHits[0];
    maxScore=totalHits > 0 ? hq.getMaxScore() : 0.0f;
    nDocsReturned=hq.size();
    ids=new int[nDocsReturned];
    scores=(cmd.getFlags() & GET_SCORES) != 0 ? new float[nDocsReturned] : null;
    for (int i=nDocsReturned - 1; i >= 0; i--) {
      FieldDoc fieldDoc=(FieldDoc)hq.pop();
      ids[i]=fieldDoc.doc;
      if (scores != null)       scores[i]=fieldDoc.score;
    }
  }
 else {
    final DocSet filt=filter;
    final ScorePriorityQueue hq=new ScorePriorityQueue(lastDocRequested);
    final int[] numHits=new int[1];
    HitCollector hc=new HitCollector(){
      private ScoreDoc reusableSD;
      public void collect(      int doc,      float score){
        if (filt != null && !filt.exists(doc))         return;
        int nhits=numHits[0]++;
        if (reusableSD == null) {
          reusableSD=new ScoreDoc(doc,score);
        }
 else         if (nhits < lastDocRequested || score >= reusableSD.score) {
          reusableSD.doc=doc;
          reusableSD.score=score;
        }
 else {
          return;
        }
        reusableSD=(ScoreDoc)hq.insertWithOverflow(reusableSD);
      }
    }
;
    if (timeAllowed > 0) {
      hc=new TimeLimitedCollector(hc,timeAllowed);
    }
    try {
      searcher.search(query,hc);
    }
 catch (    TimeLimitedCollector.TimeExceededException x) {
      log.warn("Query: " + query + "; "+ x.getMessage());
      qr.setPartialResults(true);
    }
    totalHits=numHits[0];
    nDocsReturned=hq.size();
    ids=new int[nDocsReturned];
    scores=(cmd.getFlags() & GET_SCORES) != 0 ? new float[nDocsReturned] : null;
    ScoreDoc sdoc=null;
    for (int i=nDocsReturned - 1; i >= 0; i--) {
      sdoc=(ScoreDoc)hq.pop();
      ids[i]=sdoc.doc;
      if (scores != null)       scores[i]=sdoc.score;
    }
    maxScore=sdoc == null ? 0.0f : sdoc.score;
  }
  int sliceLen=Math.min(lastDocRequested,nDocsReturned);
  if (sliceLen < 0)   sliceLen=0;
  qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));
}
