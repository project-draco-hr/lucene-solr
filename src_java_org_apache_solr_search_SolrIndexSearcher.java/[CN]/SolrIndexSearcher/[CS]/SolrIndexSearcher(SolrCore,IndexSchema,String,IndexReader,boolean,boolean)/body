{
  this.core=core;
  this.schema=schema;
  this.name="Searcher@" + Integer.toHexString(hashCode()) + (name != null ? " " + name : "");
  log.info("Opening " + this.name);
  reader=r;
  searcher=new IndexSearcher(r);
  this.closeReader=closeReader;
  searcher.setSimilarity(schema.getSimilarity());
  SolrConfig solrConfig=schema.getSolrConfig();
  queryResultWindowSize=solrConfig.queryResultWindowSize;
  queryResultMaxDocsCached=solrConfig.queryResultMaxDocsCached;
  useFilterForSortedQuery=solrConfig.useFilterForSortedQuery;
  enableLazyFieldLoading=solrConfig.enableLazyFieldLoading;
  cachingEnabled=enableCache;
  if (cachingEnabled) {
    ArrayList<SolrCache> clist=new ArrayList<SolrCache>();
    filterCache=solrConfig.filterCacheConfig == null ? null : solrConfig.filterCacheConfig.newInstance();
    if (filterCache != null)     clist.add(filterCache);
    queryResultCache=solrConfig.queryResultCacheConfig == null ? null : solrConfig.queryResultCacheConfig.newInstance();
    if (queryResultCache != null)     clist.add(queryResultCache);
    documentCache=solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();
    if (documentCache != null)     clist.add(documentCache);
    if (solrConfig.userCacheConfigs == null) {
      cacheMap=noGenericCaches;
    }
 else {
      cacheMap=new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);
      for (      CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {
        SolrCache cache=null;
        if (userCacheConfig != null)         cache=userCacheConfig.newInstance();
        if (cache != null) {
          cacheMap.put(cache.name(),cache);
          clist.add(cache);
        }
      }
    }
    cacheList=clist.toArray(new SolrCache[clist.size()]);
  }
 else {
    filterCache=null;
    queryResultCache=null;
    documentCache=null;
    cacheMap=noGenericCaches;
    cacheList=noCaches;
  }
  optimizer=solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;
  HASHSET_INVERSE_LOAD_FACTOR=solrConfig.hashSetInverseLoadFactor;
  HASHDOCSET_MAXSIZE=solrConfig.hashDocSetMaxSize;
}
