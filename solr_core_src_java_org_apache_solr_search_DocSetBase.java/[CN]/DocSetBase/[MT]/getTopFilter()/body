{
  return new Filter(){
    final FixedBitSet bs=getBits();
    @Override public DocIdSet getDocIdSet(    final LeafReaderContext context,    Bits acceptDocs){
      LeafReader reader=context.reader();
      final Bits acceptDocs2=acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);
      if (context.isTopLevel) {
        return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs),acceptDocs);
      }
      final int base=context.docBase;
      final int maxDoc=reader.maxDoc();
      final int max=base + maxDoc;
      return BitsFilteredDocIdSet.wrap(new DocIdSet(){
        @Override public DocIdSetIterator iterator(){
          return new DocIdSetIterator(){
            int pos=base - 1;
            int adjustedDoc=-1;
            @Override public int docID(){
              return adjustedDoc;
            }
            @Override public int nextDoc(){
              pos=bs.nextSetBit(pos + 1);
              return adjustedDoc=pos < max ? pos - base : NO_MORE_DOCS;
            }
            @Override public int advance(            int target){
              if (target == NO_MORE_DOCS)               return adjustedDoc=NO_MORE_DOCS;
              pos=bs.nextSetBit(target + base);
              return adjustedDoc=pos < max ? pos - base : NO_MORE_DOCS;
            }
            @Override public long cost(){
              return bs.length();
            }
          }
;
        }
        @Override public long ramBytesUsed(){
          return bs.ramBytesUsed();
        }
        @Override public Bits bits(){
          return null;
        }
      }
,acceptDocs2);
    }
    @Override public String toString(    String field){
      return "DocSetTopFilter";
    }
    @Override public boolean equals(    Object other){
      return sameClassAs(other) && Objects.equals(bs,getClass().cast(other).bs);
    }
    @Override public int hashCode(){
      return classHash() ^ bs.hashCode();
    }
  }
;
}
