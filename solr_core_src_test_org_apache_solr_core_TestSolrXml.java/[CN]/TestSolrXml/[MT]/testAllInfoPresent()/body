{
  CoreContainer cc=null;
  File testSrcRoot=new File(SolrTestCaseJ4.TEST_HOME());
  FileUtils.copyFile(new File(testSrcRoot,"solr-50-all.xml"),new File(solrHome,"solr.xml"));
  try {
    InputStream is=new FileInputStream(new File(solrHome,"solr.xml"));
    Config config=new Config(new SolrResourceLoader("solr/collection1"),null,new InputSource(is),null,false);
    boolean oldStyle=(config.getNode("solr/cores",false) != null);
    ConfigSolr cfg;
    if (oldStyle) {
      cfg=new ConfigSolrXmlOld(config);
    }
 else {
      cfg=new ConfigSolrXml(config,cc);
    }
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER,null),"testAdminHandler");
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS,0),11);
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY,null),"testCoreRootDirectory");
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT,0),22);
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT,0),33);
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_HOST,null),"testHost");
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT,null),"testHostContext");
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT,0),44);
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT,0),55);
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS,null),"testLoggingClass");
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED,null),"testLoggingEnabled");
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE,0),88);
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD,0),99);
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH,null),"testManagementPath");
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB,null),"testSharedLib");
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA,null),"testShareSchema");
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE,0),66);
    assertEquals("Did not find expected value",cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT,0),77);
    assertEquals("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST,null),"testZkHost");
    assertNull("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT,null));
    assertNull("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME,null));
    assertNull("Did not find expected value",cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH,null));
  }
  finally {
    if (cc != null)     cc.shutdown();
  }
}
