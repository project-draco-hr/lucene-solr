{
  URL url=new URL(((HttpSolrClient)clients.get(0)).getBaseURL());
  PoolingHttpClientConnectionManager cm=new PoolingHttpClientConnectionManager();
  SolrClient client=null;
  CloseableHttpClient httpClient=HttpClientUtil.createClient(null,cm);
  try {
    int rndClient=random().nextInt(3);
    if (rndClient == 0) {
      client=getConcurrentUpdateSolrClient(url.toString(),httpClient,6,1);
    }
 else     if (rndClient == 1) {
      client=getHttpSolrClient(url.toString(),httpClient);
    }
 else     if (rndClient == 2) {
      client=getCloudSolrClient(zkServer.getZkAddress(),random().nextBoolean(),httpClient);
      ((CloudSolrClient)client).setParallelUpdates(random().nextBoolean());
      ((CloudSolrClient)client).setDefaultCollection(DEFAULT_COLLECTION);
      ((CloudSolrClient)client).getLbClient().setConnectionTimeout(30000);
      ((CloudSolrClient)client).getLbClient().setSoTimeout(60000);
    }
 else {
      throw new RuntimeException("impossible");
    }
    HttpHost target=new HttpHost(url.getHost(),url.getPort(),isSSLMode() ? "https" : "http");
    HttpRoute route=new HttpRoute(target);
    ConnectionRequest mConn=getClientConnectionRequest(httpClient,route,cm);
    HttpClientConnection conn1=getConn(mConn);
    headerRequest(target,route,conn1,cm);
    cm.releaseConnection(conn1,null,-1,TimeUnit.MILLISECONDS);
    int queueBreaks=0;
    int cnt1=atLeast(3);
    int cnt2=atLeast(30);
    for (int j=0; j < cnt1; j++) {
      for (int i=0; i < cnt2; i++) {
        boolean done=false;
        AddUpdateCommand c=new AddUpdateCommand(null);
        c.solrDoc=sdoc("id",id.incrementAndGet());
        try {
          client.add(c.solrDoc);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        if (!done && i > 0 && i < cnt2 - 1 && client instanceof ConcurrentUpdateSolrClient && random().nextInt(10) > 8) {
          queueBreaks++;
          done=true;
          Thread.sleep(350);
        }
      }
      if (client instanceof ConcurrentUpdateSolrClient) {
        ((ConcurrentUpdateSolrClient)client).blockUntilFinished();
      }
    }
    route=new HttpRoute(new HttpHost(url.getHost(),url.getPort(),isSSLMode() ? "https" : "http"));
    mConn=cm.requestConnection(route,null);
    HttpClientConnection conn2=getConn(mConn);
    HttpConnectionMetrics metrics=conn2.getMetrics();
    headerRequest(target,route,conn2,cm);
    cm.releaseConnection(conn2,null,-1,TimeUnit.MILLISECONDS);
    assertNotNull("No connection metrics found - is the connection getting aborted? server closing the connection? " + client.getClass().getSimpleName(),metrics);
    if (client instanceof ConcurrentUpdateSolrClient) {
      int exp=cnt1 + queueBreaks + 2;
      assertTrue("We expected all communication via streaming client to use one connection! expected=" + exp + " got="+ metrics.getRequestCount(),Math.max(exp,metrics.getRequestCount()) - Math.min(exp,metrics.getRequestCount()) < 3);
    }
 else {
      assertTrue("We expected all communication to use one connection! " + client.getClass().getSimpleName() + " "+ metrics.getRequestCount(),cnt1 * cnt2 + 2 <= metrics.getRequestCount());
    }
  }
  finally {
    client.close();
    HttpClientUtil.close(httpClient);
  }
}
