{
  URL url=new URL(((HttpSolrClient)clients.get(0)).getBaseURL());
  SolrClient client;
  HttpClient httpClient=HttpClientUtil.createClient(null);
  int rndClient=0;
  if (rndClient == 0) {
    client=new ConcurrentUpdateSolrClient(url.toString(),httpClient,6,1);
  }
 else   if (rndClient == 1) {
    client=new HttpSolrClient(url.toString(),httpClient);
  }
 else   if (rndClient == 2) {
    client=new CloudSolrClient(zkServer.getZkAddress(),random().nextBoolean(),httpClient);
    ((CloudSolrClient)client).setParallelUpdates(random().nextBoolean());
    ((CloudSolrClient)client).setDefaultCollection(DEFAULT_COLLECTION);
    ((CloudSolrClient)client).getLbClient().setConnectionTimeout(30000);
    ((CloudSolrClient)client).getLbClient().setSoTimeout(60000);
  }
 else {
    throw new RuntimeException("impossible");
  }
  PoolingClientConnectionManager cm=(PoolingClientConnectionManager)httpClient.getConnectionManager();
  HttpHost target=new HttpHost(url.getHost(),url.getPort(),isSSLMode() ? "https" : "http");
  HttpRoute route=new HttpRoute(target);
  ClientConnectionRequest mConn=getClientConnectionRequest(httpClient,route);
  ManagedClientConnection conn1=getConn(mConn);
  headerRequest(target,route,conn1);
  conn1.releaseConnection();
  cm.releaseConnection(conn1,-1,TimeUnit.MILLISECONDS);
  int queueBreaks=0;
  int cnt1=atLeast(3);
  int cnt2=atLeast(30);
  for (int j=0; j < cnt1; j++) {
    for (int i=0; i < cnt2; i++) {
      boolean done=false;
      AddUpdateCommand c=new AddUpdateCommand(null);
      c.solrDoc=sdoc("id",id.incrementAndGet());
      try {
        client.add(c.solrDoc);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!done && i > 0 && i < cnt2 - 1 && client instanceof ConcurrentUpdateSolrClient && random().nextInt(10) > 8) {
        queueBreaks++;
        done=true;
        Thread.sleep(350);
      }
    }
    if (client instanceof ConcurrentUpdateSolrClient) {
      ((ConcurrentUpdateSolrClient)client).blockUntilFinished();
    }
  }
  route=new HttpRoute(new HttpHost(url.getHost(),url.getPort(),isSSLMode() ? "https" : "http"));
  mConn=cm.requestConnection(route,null);
  ManagedClientConnection conn2=getConn(mConn);
  HttpConnectionMetrics metrics=conn2.getMetrics();
  headerRequest(target,route,conn2);
  conn2.releaseConnection();
  cm.releaseConnection(conn2,-1,TimeUnit.MILLISECONDS);
  assertNotNull("No connection metrics found - is the connection getting aborted? server closing the connection? " + client.getClass().getSimpleName(),metrics);
  if (client instanceof ConcurrentUpdateSolrClient) {
    int exp=cnt1 + queueBreaks + 2;
    assertTrue("We expected all communication via streaming client to use one connection! expected=" + exp + " got="+ metrics.getRequestCount(),Math.max(exp,metrics.getRequestCount()) - Math.min(exp,metrics.getRequestCount()) < 3);
  }
 else {
    assertTrue("We expected all communication to use one connection! " + client.getClass().getSimpleName(),cnt1 * cnt2 + 2 <= metrics.getRequestCount());
  }
  client.close();
}
