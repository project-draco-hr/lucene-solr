{
  Path dir=wrap(createTempDir());
  Path file=dir.resolve("thefile");
  final CyclicBarrier barrier=new CyclicBarrier(2);
  final AtomicBoolean stopped=new AtomicBoolean(false);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        barrier.await();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
      while (stopped.get() == false) {
        try {
          if (random().nextBoolean()) {
            Files.delete(file);
          }
 else           if (random().nextBoolean()) {
            Files.deleteIfExists(file);
          }
 else {
            Path target=file.resolveSibling("other");
            Files.move(file,target);
            Files.delete(target);
          }
        }
 catch (        IOException ex) {
        }
      }
    }
  }
;
  t.start();
  barrier.await();
  try {
    final int iters=10 + random().nextInt(100);
    for (int i=0; i < iters; i++) {
      boolean opened=false;
      try (OutputStream stream=Files.newOutputStream(file)){
        opened=true;
        stream.write(0);
      }
 catch (      FileNotFoundException|NoSuchFileException ex) {
        assertEquals("File handle leaked - file is closed but still regeistered",0,((WindowsFS)dir.getFileSystem().provider()).openFiles.size());
        assertFalse("caught FNF on close",opened);
      }
      assertEquals("File handle leaked - file is closed but still regeistered",0,((WindowsFS)dir.getFileSystem().provider()).openFiles.size());
      Files.deleteIfExists(file);
    }
  }
  finally {
    stopped.set(true);
    t.join();
  }
}
