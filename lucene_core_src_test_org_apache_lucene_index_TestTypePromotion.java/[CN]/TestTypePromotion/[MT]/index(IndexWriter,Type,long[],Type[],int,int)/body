{
  final Field valField;
  if (VERBOSE) {
    System.out.println("TEST: add docs " + offset + "-"+ (offset + num)+ " valType="+ valueType);
  }
switch (valueType) {
case VAR_INTS:
    valField=new PackedLongDocValuesField("promote",(long)0);
  break;
case FIXED_INTS_8:
valField=new ByteDocValuesField("promote",(byte)0);
break;
case FIXED_INTS_16:
valField=new ShortDocValuesField("promote",(short)0);
break;
case FIXED_INTS_32:
valField=new IntDocValuesField("promote",0);
break;
case FIXED_INTS_64:
valField=new LongDocValuesField("promote",(byte)0);
break;
case FLOAT_32:
valField=new FloatDocValuesField("promote",0f);
break;
case FLOAT_64:
valField=new DoubleDocValuesField("promote",0d);
break;
case BYTES_FIXED_STRAIGHT:
valField=new StraightBytesDocValuesField("promote",new BytesRef(),true);
break;
case BYTES_VAR_STRAIGHT:
valField=new StraightBytesDocValuesField("promote",new BytesRef(),false);
break;
case BYTES_FIXED_DEREF:
valField=new DerefBytesDocValuesField("promote",new BytesRef(),true);
break;
case BYTES_VAR_DEREF:
valField=new DerefBytesDocValuesField("promote",new BytesRef(),false);
break;
case BYTES_FIXED_SORTED:
valField=new SortedBytesDocValuesField("promote",new BytesRef(),true);
break;
case BYTES_VAR_SORTED:
valField=new SortedBytesDocValuesField("promote",new BytesRef(),false);
break;
default :
throw new IllegalStateException("unknown Type: " + valueType);
}
for (int i=offset; i < offset + num; i++) {
Document doc=new Document();
doc.add(new TextField("id",i + "",Field.Store.YES));
sourceTypes[i]=valueType;
switch (valueType) {
case VAR_INTS:
values[i]=random().nextInt();
valField.setLongValue(values[i]);
break;
case FIXED_INTS_16:
values[i]=random().nextInt(Short.MAX_VALUE);
valField.setShortValue((short)values[i]);
break;
case FIXED_INTS_32:
values[i]=random().nextInt();
valField.setIntValue((int)values[i]);
break;
case FIXED_INTS_64:
values[i]=random().nextLong();
valField.setLongValue(values[i]);
break;
case FLOAT_64:
final double nextDouble=random().nextDouble();
values[i]=Double.doubleToRawLongBits(nextDouble);
valField.setDoubleValue(nextDouble);
break;
case FLOAT_32:
final float nextFloat=random().nextFloat();
values[i]=Double.doubleToRawLongBits(nextFloat);
valField.setFloatValue(nextFloat);
break;
case FIXED_INTS_8:
values[i]=(byte)i;
valField.setByteValue((byte)values[i]);
break;
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
values[i]=random().nextLong();
byte bytes[]=new byte[8];
ByteArrayDataOutput out=new ByteArrayDataOutput(bytes,0,8);
out.writeLong(values[i]);
valField.setBytesValue(new BytesRef(bytes));
break;
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
byte lbytes[]=new byte[8];
ByteArrayDataOutput lout=new ByteArrayDataOutput(lbytes,0,8);
final int len;
if (random().nextBoolean()) {
values[i]=random().nextInt();
lout.writeInt((int)values[i]);
len=4;
}
 else {
values[i]=random().nextLong();
lout.writeLong(values[i]);
len=8;
}
valField.setBytesValue(new BytesRef(lbytes,0,len));
break;
default :
fail("unexpected value " + valueType);
}
if (VERBOSE) {
System.out.println("  doc " + i + " has val="+ valField);
}
doc.add(valField);
writer.addDocument(doc);
if (random().nextInt(10) == 0) {
writer.commit();
}
}
}
