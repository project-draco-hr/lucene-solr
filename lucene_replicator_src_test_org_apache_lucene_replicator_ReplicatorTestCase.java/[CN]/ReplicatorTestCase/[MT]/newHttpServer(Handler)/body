{
  Server server=new Server(0);
  server.setHandler(handler);
  final String connectorName=System.getProperty("tests.jettyConnector","SelectChannel");
  final boolean useSsl=Boolean.getBoolean("tests.jettySsl");
  final SslContextFactory sslcontext=new SslContextFactory(false);
  if (useSsl) {
    if (null != System.getProperty("javax.net.ssl.keyStore")) {
      sslcontext.setKeyStorePath(System.getProperty("javax.net.ssl.keyStore"));
    }
    if (null != System.getProperty("javax.net.ssl.keyStorePassword")) {
      sslcontext.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
    }
    if (null != System.getProperty("javax.net.ssl.trustStore")) {
      sslcontext.setTrustStore(System.getProperty("javax.net.ssl.trustStore"));
    }
    if (null != System.getProperty("javax.net.ssl.trustStorePassword")) {
      sslcontext.setTrustStorePassword(System.getProperty("javax.net.ssl.trustStorePassword"));
    }
    sslcontext.setNeedClientAuth(Boolean.getBoolean("tests.jettySsl.clientAuth"));
  }
  final Connector connector;
  final QueuedThreadPool threadPool;
  if ("SelectChannel".equals(connectorName)) {
    final SelectChannelConnector c=useSsl ? new SslSelectChannelConnector(sslcontext) : new SelectChannelConnector();
    c.setReuseAddress(true);
    c.setLowResourcesMaxIdleTime(1500);
    connector=c;
    threadPool=(QueuedThreadPool)c.getThreadPool();
  }
 else   if ("Socket".equals(connectorName)) {
    final SocketConnector c=useSsl ? new SslSocketConnector(sslcontext) : new SocketConnector();
    c.setReuseAddress(true);
    connector=c;
    threadPool=(QueuedThreadPool)c.getThreadPool();
  }
 else {
    throw new IllegalArgumentException("Illegal value for system property 'tests.jettyConnector': " + connectorName);
  }
  connector.setPort(0);
  connector.setHost("127.0.0.1");
  if (threadPool != null) {
    threadPool.setDaemon(true);
    threadPool.setMaxThreads(10000);
    threadPool.setMaxIdleTimeMs(5000);
    threadPool.setMaxStopTimeMs(30000);
  }
  server.setConnectors(new Connector[]{connector});
  server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));
  server.start();
  return server;
}
