{
  final boolean useSsl=Boolean.getBoolean("tests.jettySsl");
  final SslContextFactory sslcontext=new SslContextFactory(false);
  if (useSsl) {
    if (null != System.getProperty("javax.net.ssl.keyStore")) {
      sslcontext.setKeyStorePath(System.getProperty("javax.net.ssl.keyStore"));
    }
    if (null != System.getProperty("javax.net.ssl.keyStorePassword")) {
      sslcontext.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
    }
    if (null != System.getProperty("javax.net.ssl.trustStore")) {
      sslcontext.setKeyStorePath(System.getProperty("javax.net.ssl.trustStore"));
    }
    if (null != System.getProperty("javax.net.ssl.trustStorePassword")) {
      sslcontext.setTrustStorePassword(System.getProperty("javax.net.ssl.trustStorePassword"));
    }
    sslcontext.setNeedClientAuth(Boolean.getBoolean("tests.jettySsl.clientAuth"));
  }
  final QueuedThreadPool threadPool=new QueuedThreadPool();
  threadPool.setDaemon(true);
  threadPool.setMaxThreads(10000);
  threadPool.setIdleTimeout(5000);
  threadPool.setStopTimeout(30000);
  Server server=new Server(threadPool);
  server.setStopAtShutdown(true);
  server.manage(threadPool);
  final ServerConnector connector;
  if (useSsl) {
    HttpConfiguration configuration=new HttpConfiguration();
    configuration.setSecureScheme("https");
    configuration.addCustomizer(new SecureRequestCustomizer());
    ServerConnector c=new ServerConnector(server,new SslConnectionFactory(sslcontext,"http/1.1"),new HttpConnectionFactory(configuration));
    connector=c;
  }
 else {
    ServerConnector c=new ServerConnector(server,new HttpConnectionFactory());
    connector=c;
  }
  connector.setPort(0);
  connector.setHost("127.0.0.1");
  server.setConnectors(new Connector[]{connector});
  server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));
  server.setHandler(handler);
  server.start();
  return server;
}
