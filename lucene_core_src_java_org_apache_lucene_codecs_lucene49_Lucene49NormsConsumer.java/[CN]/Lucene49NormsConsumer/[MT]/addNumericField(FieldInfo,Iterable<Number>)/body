{
  meta.writeVInt(field.number);
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  HashSet<Long> uniqueValues=null;
  uniqueValues=new HashSet<>();
  long count=0;
  for (  Number nv : values) {
    if (nv == null) {
      throw new IllegalStateException("illegal norms data for field " + field.name + ", got null for value: "+ count);
    }
    final long v=nv.longValue();
    minValue=Math.min(minValue,v);
    maxValue=Math.max(maxValue,v);
    if (uniqueValues != null) {
      if (uniqueValues.add(v)) {
        if (uniqueValues.size() > 256) {
          uniqueValues=null;
        }
      }
    }
    ++count;
  }
  if (count != maxDoc) {
    throw new IllegalStateException("illegal norms data for field " + field.name + ", expected "+ maxDoc+ " values, got "+ count);
  }
  if (uniqueValues != null && uniqueValues.size() == 1) {
    meta.writeByte(CONST_COMPRESSED);
    meta.writeLong(minValue);
  }
 else   if (uniqueValues != null) {
    PackedInts.Format format=PackedInts.Format.PACKED_SINGLE_BLOCK;
    int bitsPerValue=PackedInts.bitsRequired(uniqueValues.size() - 1);
    if (bitsPerValue == 3) {
      bitsPerValue=4;
    }
 else     if (bitsPerValue > 4) {
      bitsPerValue=8;
    }
    if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {
      meta.writeByte(UNCOMPRESSED);
      meta.writeLong(data.getFilePointer());
      for (      Number nv : values) {
        data.writeByte(nv == null ? 0 : (byte)nv.longValue());
      }
    }
 else {
      meta.writeByte(TABLE_COMPRESSED);
      meta.writeLong(data.getFilePointer());
      data.writeVInt(PackedInts.VERSION_CURRENT);
      Long[] decode=uniqueValues.toArray(new Long[uniqueValues.size()]);
      Arrays.sort(decode);
      final HashMap<Long,Integer> encode=new HashMap<>();
      int size=1 << bitsPerValue;
      data.writeVInt(size);
      for (int i=0; i < decode.length; i++) {
        data.writeLong(decode[i]);
        encode.put(decode[i],i);
      }
      for (int i=decode.length; i < size; i++) {
        data.writeLong(0);
      }
      data.writeVInt(format.getId());
      data.writeVInt(bitsPerValue);
      final PackedInts.Writer writer=PackedInts.getWriterNoHeader(data,format,maxDoc,bitsPerValue,PackedInts.DEFAULT_BUFFER_SIZE);
      for (      Number nv : values) {
        writer.add(encode.get(nv.longValue()));
      }
      writer.finish();
    }
  }
 else {
    meta.writeByte(DELTA_COMPRESSED);
    meta.writeLong(data.getFilePointer());
    data.writeVInt(PackedInts.VERSION_CURRENT);
    data.writeVInt(BLOCK_SIZE);
    final BlockPackedWriter writer=new BlockPackedWriter(data,BLOCK_SIZE);
    for (    Number nv : values) {
      writer.add(nv.longValue());
    }
    writer.finish();
  }
}
