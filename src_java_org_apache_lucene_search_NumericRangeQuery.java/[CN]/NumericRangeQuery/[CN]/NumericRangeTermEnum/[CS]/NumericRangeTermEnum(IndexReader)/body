{
  this.reader=reader;
switch (valSize) {
case 64:
{
      long minBound=Long.MIN_VALUE;
      if (min instanceof Long) {
        minBound=min.longValue();
      }
 else       if (min instanceof Double) {
        minBound=NumericUtils.doubleToSortableLong(min.doubleValue());
      }
      if (!minInclusive && min != null)       minBound++;
      long maxBound=Long.MAX_VALUE;
      if (max instanceof Long) {
        maxBound=max.longValue();
      }
 else       if (max instanceof Double) {
        maxBound=NumericUtils.doubleToSortableLong(max.doubleValue());
      }
      if (!maxInclusive && max != null)       maxBound--;
      NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder(){
        public final void addRange(        String minPrefixCoded,        String maxPrefixCoded){
          rangeBounds.add(minPrefixCoded);
          rangeBounds.add(maxPrefixCoded);
        }
      }
,precisionStep,minBound,maxBound);
      break;
    }
case 32:
{
    int minBound=Integer.MIN_VALUE;
    if (min instanceof Integer) {
      minBound=min.intValue();
    }
 else     if (min instanceof Float) {
      minBound=NumericUtils.floatToSortableInt(min.floatValue());
    }
    if (!minInclusive && min != null)     minBound++;
    int maxBound=Integer.MAX_VALUE;
    if (max instanceof Integer) {
      maxBound=max.intValue();
    }
 else     if (max instanceof Float) {
      maxBound=NumericUtils.floatToSortableInt(max.floatValue());
    }
    if (!maxInclusive && max != null)     maxBound--;
    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder(){
      public final void addRange(      String minPrefixCoded,      String maxPrefixCoded){
        rangeBounds.add(minPrefixCoded);
        rangeBounds.add(maxPrefixCoded);
      }
    }
,precisionStep,minBound,maxBound);
    break;
  }
default :
throw new IllegalArgumentException("valSize must be 32 or 64");
}
next();
}
