{
  final Collection pendingTerms=new ArrayList();
  final int docCountCutoff=(int)((docCountPercent / 100.) * reader.maxDoc());
  final int termCountLimit=Math.min(BooleanQuery.getMaxClauseCount(),termCountCutoff);
  int docVisitCount=0;
  FilteredTermEnum enumerator=query.getEnum(reader);
  try {
    while (true) {
      Term t=enumerator.term();
      if (t != null) {
        pendingTerms.add(t);
        docVisitCount+=reader.docFreq(t);
      }
      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {
        Query result=new ConstantScoreQuery(new MultiTermQueryWrapperFilter(query));
        result.setBoost(query.getBoost());
        return result;
      }
 else       if (!enumerator.next()) {
        Iterator it=pendingTerms.iterator();
        BooleanQuery bq=new BooleanQuery(true);
        while (it.hasNext()) {
          TermQuery tq=new TermQuery((Term)it.next());
          bq.add(tq,BooleanClause.Occur.SHOULD);
        }
        Query result=new ConstantScoreQuery(new QueryWrapperFilter(bq));
        result.setBoost(query.getBoost());
        query.incTotalNumberOfTerms(pendingTerms.size());
        return result;
      }
    }
  }
  finally {
    enumerator.close();
  }
}
