{
  HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());
  String collectionName="testkerberoscollection";
  MiniSolrCloudCluster miniCluster=new MiniSolrCloudCluster(NUM_SERVERS,createTempDir(),JettyConfig.builder().setContext("/solr").build());
  CloudSolrClient cloudSolrClient=miniCluster.getSolrClient();
  cloudSolrClient.setDefaultCollection(collectionName);
  try {
    assertNotNull(miniCluster.getZkServer());
    List<JettySolrRunner> jettys=miniCluster.getJettySolrRunners();
    assertEquals(NUM_SERVERS,jettys.size());
    for (    JettySolrRunner jetty : jettys) {
      assertTrue(jetty.isRunning());
    }
    String configName="solrCloudCollectionConfig";
    File configDir=new File(SolrTestCaseJ4.TEST_HOME() + File.separator + "collection1"+ File.separator+ "conf");
    miniCluster.uploadConfigDir(configDir,configName);
    CollectionAdminRequest.Create createRequest=new CollectionAdminRequest.Create();
    createRequest.setCollectionName(collectionName);
    createRequest.setNumShards(NUM_SHARDS);
    createRequest.setReplicationFactor(REPLICATION_FACTOR);
    Properties properties=new Properties();
    properties.put(CoreDescriptor.CORE_CONFIG,"solrconfig-tlog.xml");
    properties.put("solr.tests.maxBufferedDocs","100000");
    properties.put("solr.tests.ramBufferSizeMB","100");
    properties.put("solr.tests.mergePolicy","org.apache.lucene.index.TieredMergePolicy");
    properties.put("solr.tests.mergeScheduler","org.apache.lucene.index.ConcurrentMergeScheduler");
    properties.put("solr.directoryFactory","solr.RAMDirectoryFactory");
    createRequest.setProperties(properties);
    createRequest.process(cloudSolrClient);
    try (SolrZkClient zkClient=new SolrZkClient(miniCluster.getZkServer().getZkAddress(),AbstractZkTestCase.TIMEOUT,45000,null);ZkStateReader zkStateReader=new ZkStateReader(zkClient)){
      AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName,zkStateReader,true,true,330);
      SolrInputDocument doc=new SolrInputDocument();
      doc.setField("id","1");
      cloudSolrClient.add(doc);
      cloudSolrClient.commit();
      SolrQuery query=new SolrQuery();
      query.setQuery("*:*");
      QueryResponse rsp=cloudSolrClient.query(query);
      assertEquals(1,rsp.getResults().getNumFound());
      CollectionAdminRequest.Delete deleteRequest=new CollectionAdminRequest.Delete();
      deleteRequest.setCollectionName(collectionName);
      deleteRequest.process(cloudSolrClient);
      AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,zkStateReader,true,true,330);
    }
   }
  finally {
    cloudSolrClient.close();
    miniCluster.shutdown();
  }
}
