{
  try {
    if (!getSchema().isMutable()) {
      final String message="This IndexSchema is not mutable.";
      throw new SolrException(ErrorCode.BAD_REQUEST,message);
    }
 else {
      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {
        String message="Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."+ "  Request has media type "+ entity.getMediaType().toString()+ ".";
        log.error(message);
        throw new SolrException(ErrorCode.BAD_REQUEST,message);
      }
 else {
        Object object=ObjectBuilder.fromJSON(entity.getText());
        if (!(object instanceof List)) {
          String message="Invalid JSON type " + object.getClass().getName() + ", expected List of the form"+ " (ignore the backslashes): [{\"source\":\"foo\",\"dest\":\"comma-separated list of targets\"}, {...}, ...]";
          log.error(message);
          throw new SolrException(ErrorCode.BAD_REQUEST,message);
        }
 else {
          List<Map<String,Object>> list=(List<Map<String,Object>>)object;
          Map<String,Collection<String>> fieldsToCopy=new HashMap<>();
          ManagedIndexSchema oldSchema=(ManagedIndexSchema)getSchema();
          Set<String> malformed=new HashSet<>();
          for (          Map<String,Object> map : list) {
            String fieldName=(String)map.get(IndexSchema.SOURCE);
            if (null == fieldName) {
              String message="Missing '" + IndexSchema.SOURCE + "' mapping.";
              log.error(message);
              throw new SolrException(ErrorCode.BAD_REQUEST,message);
            }
            Object dest=map.get(IndexSchema.DESTINATION);
            List<String> destinations=null;
            if (dest != null) {
              if (dest instanceof List) {
                destinations=(List<String>)dest;
              }
 else               if (dest instanceof String) {
                destinations=Collections.singletonList(dest.toString());
              }
 else {
                String message="Invalid '" + IndexSchema.DESTINATION + "' type.";
                log.error(message);
                throw new SolrException(ErrorCode.BAD_REQUEST,message);
              }
            }
            if (destinations == null) {
              malformed.add(fieldName);
            }
 else {
              fieldsToCopy.put(fieldName,destinations);
            }
          }
          if (malformed.size() > 0) {
            StringBuilder message=new StringBuilder("Malformed destination(s) for: ");
            for (            String s : malformed) {
              message.append(s).append(", ");
            }
            if (message.length() > 2) {
              message.setLength(message.length() - 2);
            }
            log.error(message.toString().trim());
            throw new SolrException(ErrorCode.BAD_REQUEST,message.toString().trim());
          }
          boolean success=false;
          while (!success) {
            try {
              IndexSchema newSchema=oldSchema.addCopyFields(fieldsToCopy);
              if (null != newSchema) {
                getSolrCore().setLatestSchema(newSchema);
                success=true;
              }
 else {
                throw new SolrException(ErrorCode.SERVER_ERROR,"Failed to add fields.");
              }
            }
 catch (            ManagedIndexSchema.SchemaChangedInZkException e) {
              log.debug("Schema changed while processing request, retrying");
              oldSchema=(ManagedIndexSchema)getSolrCore().getLatestSchema();
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    getSolrResponse().setException(e);
  }
  handlePostExecution(log);
  return new SolrOutputRepresentation();
}
