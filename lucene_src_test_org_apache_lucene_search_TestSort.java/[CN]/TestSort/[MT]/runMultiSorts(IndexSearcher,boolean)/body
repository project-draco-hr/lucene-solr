{
  sort.setSort(SortField.FIELD_DOC);
  String expected=isFull ? "ABCDEFGHIJ" : "ACEGIBDFHJ";
  assertMatches(multi,queryA,sort,expected);
  sort.setSort(new SortField("int",SortField.Type.INT));
  expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
  assertMatches(multi,queryA,sort,expected);
  sort.setSort(new SortField("int",SortField.Type.INT),SortField.FIELD_DOC);
  expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
  assertMatches(multi,queryA,sort,expected);
  sort.setSort(new SortField("int",SortField.Type.INT));
  expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
  assertMatches(multi,queryA,sort,expected);
  sort.setSort(new SortField("float",SortField.Type.FLOAT),SortField.FIELD_DOC);
  assertMatches(multi,queryA,sort,"GDHJCIEFAB");
  sort.setSort(new SortField("float",SortField.Type.FLOAT));
  assertMatches(multi,queryA,sort,"GDHJCIEFAB");
  sort.setSort(new SortField("string",SortField.Type.STRING));
  assertMatches(multi,queryA,sort,"DJAIHGFEBC");
  sort.setSort(new SortField("int",SortField.Type.INT,true));
  expected=isFull ? "CABEJGFHDI" : "CAEBJGFHDI";
  assertMatches(multi,queryA,sort,expected);
  sort.setSort(new SortField("float",SortField.Type.FLOAT,true));
  assertMatches(multi,queryA,sort,"BAFECIJHDG");
  sort.setSort(new SortField("string",SortField.Type.STRING,true));
  assertMatches(multi,queryA,sort,"CBEFGHIAJD");
  sort.setSort(new SortField("int",SortField.Type.INT),new SortField("float",SortField.Type.FLOAT));
  assertMatches(multi,queryA,sort,"IDHFGJEABC");
  sort.setSort(new SortField("float",SortField.Type.FLOAT),new SortField("string",SortField.Type.STRING));
  assertMatches(multi,queryA,sort,"GDHJICEFAB");
  sort.setSort(new SortField("int",SortField.Type.INT));
  assertMatches(multi,queryF,sort,"IZJ");
  sort.setSort(new SortField("int",SortField.Type.INT,true));
  assertMatches(multi,queryF,sort,"JZI");
  sort.setSort(new SortField("float",SortField.Type.FLOAT));
  assertMatches(multi,queryF,sort,"ZJI");
  sort.setSort(new SortField("string",SortField.Type.STRING));
  assertMatches(multi,queryF,sort,"ZJI");
  sort.setSort(new SortField("string",SortField.Type.STRING,true));
  assertMatches(multi,queryF,sort,"IJZ");
  if (supportsDocValues) {
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT)));
    expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
    assertMatches(multi,queryA,sort,expected);
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT)),SortField.FIELD_DOC);
    expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
    assertMatches(multi,queryA,sort,expected);
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT)));
    expected=isFull ? "IDHFGJABEC" : "IDHFGJAEBC";
    assertMatches(multi,queryA,sort,expected);
    sort.setSort(useDocValues(new SortField("float",SortField.Type.FLOAT)),SortField.FIELD_DOC);
    assertMatches(multi,queryA,sort,"GDHJCIEFAB");
    sort.setSort(useDocValues(new SortField("float",SortField.Type.FLOAT)));
    assertMatches(multi,queryA,sort,"GDHJCIEFAB");
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT,true)));
    expected=isFull ? "CABEJGFHDI" : "CAEBJGFHDI";
    assertMatches(multi,queryA,sort,expected);
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT)),useDocValues(new SortField("float",SortField.Type.FLOAT)));
    assertMatches(multi,queryA,sort,"IDHFGJEABC");
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT)));
    assertMatches(multi,queryF,sort,"IZJ");
    sort.setSort(useDocValues(new SortField("int",SortField.Type.INT,true)));
    assertMatches(multi,queryF,sort,"JZI");
  }
  assertSaneFieldCaches(getName() + " various");
  FieldCache.DEFAULT.purgeAllCaches();
}
