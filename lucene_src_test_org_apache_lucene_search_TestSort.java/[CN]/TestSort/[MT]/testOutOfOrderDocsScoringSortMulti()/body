{
  Sort[] sort=new Sort[]{new Sort(SortField.FIELD_DOC,SortField.FIELD_SCORE)};
  boolean[][] tfcOptions=new boolean[][]{new boolean[]{false,false,false},new boolean[]{false,false,true},new boolean[]{false,true,false},new boolean[]{false,true,true},new boolean[]{true,false,false},new boolean[]{true,false,true},new boolean[]{true,true,false},new boolean[]{true,true,true}};
  String[] actualTFCClasses=new String[]{"OutOfOrderMultiComparatorNonScoringCollector","OutOfOrderMultiComparatorScoringMaxScoreCollector","OutOfOrderMultiComparatorScoringNoMaxScoreCollector","OutOfOrderMultiComparatorScoringMaxScoreCollector","OutOfOrderMultiComparatorNonScoringCollector","OutOfOrderMultiComparatorScoringMaxScoreCollector","OutOfOrderMultiComparatorScoringNoMaxScoreCollector","OutOfOrderMultiComparatorScoringMaxScoreCollector"};
  BooleanQuery bq=new BooleanQuery();
  bq.add(new MatchAllDocsQuery(),Occur.SHOULD);
  bq.setMinimumNumberShouldMatch(1);
  for (int i=0; i < sort.length; i++) {
    for (int j=0; j < tfcOptions.length; j++) {
      TopDocsCollector<Entry> tdc=TopFieldCollector.create(sort[i],10,tfcOptions[j][0],tfcOptions[j][1],tfcOptions[j][2],false);
      assertTrue(tdc.getClass().getName().endsWith("$" + actualTFCClasses[j]));
      full.search(bq,tdc);
      TopDocs td=tdc.topDocs();
      ScoreDoc[] sd=td.scoreDocs;
      assertEquals(10,sd.length);
    }
  }
}
