{
  MockDirectoryWrapper dir=(MockDirectoryWrapper)getAssertNoDeletesDirectory(newMockDirectory());
  final AtomicBoolean shouldFail=new AtomicBoolean();
  dir.failOn(new MockDirectoryWrapper.Failure(){
    @Override public void eval(    MockDirectoryWrapper dir) throws IOException {
      StackTraceElement[] trace=new Exception().getStackTrace();
      if (shouldFail.get()) {
        for (int i=0; i < trace.length; i++) {
          if ("getReadOnlyClone".equals(trace[i].getMethodName())) {
            if (VERBOSE) {
              System.out.println("TEST: now fail; exc:");
              new Throwable().printStackTrace(System.out);
            }
            shouldFail.set(false);
            throw new FakeIOException();
          }
        }
      }
    }
  }
);
  IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);
  IndexWriter writer=new IndexWriter(dir,conf);
  writer.addDocument(new Document());
  writer.getReader().close();
  writer.addDocument(new Document());
  for (int i=0; i < 2; i++) {
    shouldFail.set(true);
    try {
      writer.getReader().close();
    }
 catch (    FakeIOException e) {
      if (VERBOSE) {
        System.out.println("hit expected fake IOE");
      }
    }
  }
  writer.shutdown();
  dir.close();
}
