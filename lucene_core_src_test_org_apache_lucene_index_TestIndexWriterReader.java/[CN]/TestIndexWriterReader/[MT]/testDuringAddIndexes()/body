{
  Directory dir1=getAssertNoDeletesDirectory(newDirectory());
  final IndexWriter writer=new IndexWriter(dir1,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(2)));
  createIndexNoClose(false,"test",writer);
  writer.commit();
  final Directory[] dirs=new Directory[10];
  for (int i=0; i < 10; i++) {
    dirs[i]=new MockDirectoryWrapper(random(),new RAMDirectory(dir1,newIOContext(random())));
  }
  DirectoryReader r=writer.getReader();
  final int numIterations=10;
  final List<Throwable> excs=Collections.synchronizedList(new ArrayList<Throwable>());
  final Thread[] threads=new Thread[1];
  final AtomicBoolean threadDone=new AtomicBoolean(false);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        int count=0;
        do {
          count++;
          try {
            writer.addIndexes(dirs);
            writer.maybeMerge();
          }
 catch (          Throwable t) {
            excs.add(t);
            throw new RuntimeException(t);
          }
        }
 while (count < numIterations);
        threadDone.set(true);
      }
    }
;
    threads[i].setDaemon(true);
    threads[i].start();
  }
  int lastCount=0;
  while (threadDone.get() == false) {
    DirectoryReader r2=DirectoryReader.openIfChanged(r);
    if (r2 != null) {
      r.close();
      r=r2;
      Query q=new TermQuery(new Term("indexname","test"));
      IndexSearcher searcher=newSearcher(r);
      final int count=searcher.search(q,10).totalHits;
      assertTrue(count >= lastCount);
      lastCount=count;
    }
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].join();
  }
  DirectoryReader r2=DirectoryReader.openIfChanged(r);
  if (r2 != null) {
    r.close();
    r=r2;
  }
  Query q=new TermQuery(new Term("indexname","test"));
  IndexSearcher searcher=newSearcher(r);
  final int count=searcher.search(q,10).totalHits;
  assertTrue(count >= lastCount);
  assertEquals(0,excs.size());
  r.close();
  if (dir1 instanceof MockDirectoryWrapper) {
    final Collection<String> openDeletedFiles=((MockDirectoryWrapper)dir1).getOpenDeletedFiles();
    assertEquals("openDeleted=" + openDeletedFiles,0,openDeletedFiles.size());
  }
  writer.close();
  dir1.close();
}
