{
  Analyzer delegate=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      CharArraySet stopSet=StopFilter.makeStopSet("into");
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);
      TokenFilter filter=new StopFilter(tokenizer,stopSet);
      return new TokenStreamComponents(tokenizer,filter);
    }
  }
;
  ShingleAnalyzerWrapper analyzer=new ShingleAnalyzerWrapper(delegate,ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,ShingleFilter.DEFAULT_TOKEN_SEPARATOR,true,false,"--");
  assertAnalyzesTo(analyzer,"please divide into shingles",new String[]{"please","please divide","divide","divide --","-- shingles","shingles"},new int[]{0,0,7,7,19,19},new int[]{6,13,13,19,27,27},new int[]{1,0,1,0,1,1});
  analyzer.close();
  delegate=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      CharArraySet stopSet=StopFilter.makeStopSet("into");
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);
      TokenFilter filter=new StopFilter(tokenizer,stopSet);
      return new TokenStreamComponents(tokenizer,filter);
    }
  }
;
  analyzer=new ShingleAnalyzerWrapper(delegate,ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,ShingleFilter.DEFAULT_TOKEN_SEPARATOR,false,false,null);
  assertAnalyzesTo(analyzer,"please divide into shingles",new String[]{"please divide","divide "," shingles"},new int[]{0,7,19},new int[]{13,19,27},new int[]{1,1,1});
  analyzer.close();
  delegate=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName){
      CharArraySet stopSet=StopFilter.makeStopSet("into");
      Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);
      TokenFilter filter=new StopFilter(tokenizer,stopSet);
      return new TokenStreamComponents(tokenizer,filter);
    }
  }
;
  analyzer=new ShingleAnalyzerWrapper(delegate,ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,ShingleFilter.DEFAULT_TOKEN_SEPARATOR,false,false,"");
  assertAnalyzesTo(analyzer,"please divide into shingles",new String[]{"please divide","divide "," shingles"},new int[]{0,7,19},new int[]{13,19,27},new int[]{1,1,1});
  analyzer.close();
}
