{
  meta.writeVInt(field.number);
  meta.writeByte(NUMBER);
  meta.writeLong(data.getFilePointer());
  long minValue=Long.MAX_VALUE;
  long maxValue=Long.MIN_VALUE;
  int count=0;
  HashSet<Long> uniqueValues=new HashSet<Long>();
  for (  Number nv : values) {
    long v=nv.longValue();
    minValue=Math.min(minValue,v);
    maxValue=Math.max(maxValue,v);
    count++;
    if (uniqueValues != null) {
      if (uniqueValues.add(v)) {
        if (uniqueValues.size() > 256) {
          uniqueValues=null;
        }
      }
    }
  }
  long delta=maxValue - minValue;
  final int bitsPerValue;
  if (delta < 0) {
    bitsPerValue=64;
    meta.writeByte((byte)0);
  }
 else   if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta)) {
    bitsPerValue=PackedInts.bitsRequired(uniqueValues.size() - 1);
    minValue=0;
    meta.writeByte((byte)1);
    Long[] decode=uniqueValues.toArray(new Long[uniqueValues.size()]);
    final HashMap<Long,Integer> encode=new HashMap<Long,Integer>();
    data.writeVInt(decode.length);
    for (int i=0; i < decode.length; i++) {
      data.writeLong(decode[i]);
      encode.put(decode[i],i);
    }
    final Iterable<Number> original=values;
    values=new Iterable<Number>(){
      @Override public Iterator<Number> iterator(){
        final Iterator<Number> inner=original.iterator();
        return new Iterator<Number>(){
          @Override public boolean hasNext(){
            return inner.hasNext();
          }
          @Override public Number next(){
            return encode.get(inner.next());
          }
          @Override public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
    }
;
  }
 else {
    bitsPerValue=PackedInts.bitsRequired(delta);
    meta.writeByte((byte)0);
  }
  data.writeLong(minValue);
  final PackedInts.Writer writer=PackedInts.getWriter(data,count,bitsPerValue,PackedInts.COMPACT);
  for (  Number nv : values) {
    writer.add(nv.longValue() - minValue);
  }
  writer.finish();
}
