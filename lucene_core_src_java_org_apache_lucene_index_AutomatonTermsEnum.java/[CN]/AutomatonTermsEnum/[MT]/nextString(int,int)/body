{
  int c=0;
  if (position < seekBytesRef.length) {
    c=seekBytesRef.bytes[position] & 0xff;
    if (c++ == 0xff)     return false;
  }
  seekBytesRef.length=position;
  visited[state]=curGen;
  final int numTransitions=lightAutomaton.getNumTransitions(state);
  lightAutomaton.initTransition(state,transition);
  for (int i=0; i < numTransitions; i++) {
    lightAutomaton.getNextTransition(transition);
    if (transition.max >= c) {
      int nextChar=Math.max(c,transition.min);
      seekBytesRef.grow(seekBytesRef.length + 1);
      seekBytesRef.length++;
      seekBytesRef.bytes[seekBytesRef.length - 1]=(byte)nextChar;
      state=transition.dest;
      while (visited[state] != curGen && !runAutomaton.isAccept(state)) {
        visited[state]=curGen;
        lightAutomaton.initTransition(state,transition);
        lightAutomaton.getNextTransition(transition);
        state=transition.dest;
        seekBytesRef.grow(seekBytesRef.length + 1);
        seekBytesRef.length++;
        seekBytesRef.bytes[seekBytesRef.length - 1]=(byte)transition.min;
        if (!finite && !linear && visited[state] == curGen) {
          setLinear(seekBytesRef.length - 1);
        }
      }
      return true;
    }
  }
  return false;
}
