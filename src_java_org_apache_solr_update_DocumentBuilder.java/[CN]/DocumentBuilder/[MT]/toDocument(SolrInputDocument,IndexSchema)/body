{
  Document out=new Document();
  out.setBoost(doc.getDocumentBoost());
  final SchemaField uniqueKeyField=schema.getUniqueKeyField();
  if (null != uniqueKeyField) {
    Collection<Object> keys=doc.getFieldValues(uniqueKeyField.getName());
    if (null == keys || keys.isEmpty()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Document missing value for uniqueKeyField: " + uniqueKeyField.getName());
    }
  }
  for (  SolrInputField field : doc) {
    String name=field.getName();
    SchemaField sfield=schema.getFieldOrNull(name);
    boolean used=false;
    float boost=field.getBoost();
    if (sfield != null && !sfield.multiValued() && field.getValueCount() > 1) {
      String id=(uniqueKeyField == null) ? "" : ("[" + doc.getFieldValue(uniqueKeyField.getName()) + "] ");
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + id + "multiple values encountered for non multiValued field "+ sfield.getName()+ ": "+ field.getValue());
    }
    boolean hasField=false;
    for (    Object v : field) {
      if (v == null) {
        continue;
      }
      String val=null;
      hasField=true;
      boolean isBinaryField=false;
      if (sfield != null && sfield.getType() instanceof BinaryField) {
        isBinaryField=true;
        BinaryField binaryField=(BinaryField)sfield.getType();
        Field f=binaryField.createField(sfield,v,boost);
        if (f != null) {
          out.add(f);
        }
        used=true;
      }
 else {
        if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {
          DateField df=(DateField)sfield.getType();
          val=df.toInternal((Date)v) + 'Z';
        }
 else         if (v != null) {
          val=v.toString();
        }
        if (sfield != null) {
          used=true;
          addField(out,sfield,val,boost);
        }
      }
      List<CopyField> copyFields=schema.getCopyFieldsList(name);
      for (      CopyField cf : copyFields) {
        SchemaField destinationField=cf.getDestination();
        if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: multiple values encountered for non multiValued copy field " + destinationField.getName() + ": "+ val);
        }
        used=true;
        Fieldable[] fields=null;
        if (isBinaryField) {
          if (destinationField.getType() instanceof BinaryField) {
            BinaryField binaryField=(BinaryField)destinationField.getType();
            fields=new Field[]{binaryField.createField(destinationField,v,boost)};
          }
        }
 else {
          fields=destinationField.createFields(cf.getLimitedValue(val),boost);
        }
        if (fields != null) {
          for (          Fieldable f : fields) {
            out.add(f);
          }
        }
      }
      boost=1.0f;
    }
    if (!used && hasField) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR:unknown field '" + name + "'");
    }
  }
  for (  SchemaField field : schema.getRequiredFields()) {
    if (out.getField(field.getName()) == null) {
      if (field.getDefaultValue() != null) {
        addField(out,field,field.getDefaultValue(),1.0f);
      }
 else {
        String id=schema.printableUniqueKey(out);
        String msg="Document [" + id + "] missing required field: "+ field.getName();
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);
      }
    }
  }
  return out;
}
