{
  final UpdateRequest updateRequest=new UpdateRequest();
  List<List<NamedList>> doclist;
  List<Entry<SolrInputDocument,Map<Object,Object>>> docMap;
  List<String> delById;
  Map<String,Map<String,Object>> delByIdMap;
  List<String> delByQ;
  final NamedList[] namedList=new NamedList[1];
  JavaBinCodec codec=new JavaBinCodec(){
    private boolean seenOuterMostDocIterator=false;
    @Override public NamedList readNamedList(    DataInputInputStream dis) throws IOException {
      int sz=readSize(dis);
      NamedList nl=new NamedList();
      if (namedList[0] == null) {
        namedList[0]=nl;
      }
      for (int i=0; i < sz; i++) {
        String name=(String)readVal(dis);
        Object val=readVal(dis);
        nl.add(name,val);
      }
      return nl;
    }
    @Override public List readIterator(    DataInputInputStream fis) throws IOException {
      if (seenOuterMostDocIterator)       return super.readIterator(fis);
      seenOuterMostDocIterator=true;
      return readOuterMostDocIterator(fis);
    }
    private List readOuterMostDocIterator(    DataInputInputStream fis) throws IOException {
      NamedList params=(NamedList)namedList[0].get("params");
      updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
      if (handler == null)       return super.readIterator(fis);
      Integer commitWithin=null;
      Boolean overwrite=null;
      while (true) {
        Object o=readVal(fis);
        if (o == END_OBJ)         break;
        SolrInputDocument sdoc=null;
        if (o instanceof List) {
          sdoc=listToSolrInputDocument((List<NamedList>)o);
        }
 else         if (o instanceof NamedList) {
          UpdateRequest req=new UpdateRequest();
          req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList)o)));
          handler.update(null,req,null,null);
        }
 else         if (o instanceof Map.Entry) {
          sdoc=(SolrInputDocument)((Map.Entry)o).getKey();
          Map p=(Map)((Map.Entry)o).getValue();
          if (p != null) {
            commitWithin=(Integer)p.get(UpdateRequest.COMMIT_WITHIN);
            overwrite=(Boolean)p.get(UpdateRequest.OVERWRITE);
          }
        }
 else {
          sdoc=(SolrInputDocument)o;
        }
        handler.update(sdoc,updateRequest,commitWithin,overwrite);
      }
      return Collections.EMPTY_LIST;
    }
  }
;
  codec.unmarshal(is);
  if (updateRequest.getParams() == null) {
    NamedList params=(NamedList)namedList[0].get("params");
    System.out.println("unmarchal params:" + params);
    if (params != null) {
      updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
    }
  }
  delById=(List<String>)namedList[0].get("delById");
  delByIdMap=(Map<String,Map<String,Object>>)namedList[0].get("delByIdMap");
  delByQ=(List<String>)namedList[0].get("delByQ");
  doclist=(List)namedList[0].get("docs");
  docMap=(List<Entry<SolrInputDocument,Map<Object,Object>>>)namedList[0].get("docsMap");
  if (delById != null) {
    for (    String s : delById) {
      updateRequest.deleteById(s);
    }
  }
  if (delByIdMap != null) {
    for (    Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {
      Map<String,Object> params=entry.getValue();
      if (params != null) {
        Long version=(Long)params.get(UpdateRequest.VER);
        updateRequest.deleteById(entry.getKey(),version);
      }
 else {
        updateRequest.deleteById(entry.getKey());
      }
    }
  }
  if (delByQ != null) {
    for (    String s : delByQ) {
      updateRequest.deleteByQuery(s);
    }
  }
  return updateRequest;
}
