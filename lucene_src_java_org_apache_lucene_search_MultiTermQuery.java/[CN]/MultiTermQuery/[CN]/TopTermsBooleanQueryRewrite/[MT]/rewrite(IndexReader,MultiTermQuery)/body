{
  final int maxSize=Math.min(size,BooleanQuery.getMaxClauseCount());
  final PriorityQueue<ScoreTerm> stQueue=new PriorityQueue<ScoreTerm>();
  collectTerms(reader,query,new TermCollector(){
    public boolean collect(    BytesRef bytes,    float boost){
      if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)       return true;
      st.bytes.copy(bytes);
      st.boost=boost;
      stQueue.offer(st);
      st=(stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();
      setMaxNonCompetitiveBoost((stQueue.size() >= maxSize) ? stQueue.peek().boost : Float.NEGATIVE_INFINITY);
      return true;
    }
    private ScoreTerm st=new ScoreTerm();
  }
);
  final Term placeholderTerm=new Term(query.field);
  final BooleanQuery bq=new BooleanQuery(true);
  for (  final ScoreTerm st : stQueue) {
    Query tq=getQuery(placeholderTerm.createTerm(st.bytes));
    tq.setBoost(query.getBoost() * st.boost);
    bq.add(tq,BooleanClause.Occur.SHOULD);
  }
  query.incTotalNumberOfTerms(bq.clauses().size());
  return bq;
}
