{
  if (done)   return null;
  Map<String,Object> row=new HashMap<>();
  DataSource<InputStream> dataSource=context.getDataSource();
  InputStream is=dataSource.getData(context.getResolvedEntityAttribute(URL));
  ContentHandler contentHandler=null;
  Metadata metadata=new Metadata();
  StringWriter sw=new StringWriter();
  try {
    if ("html".equals(format)) {
      contentHandler=getHtmlHandler(sw);
    }
 else     if ("xml".equals(format)) {
      contentHandler=getXmlContentHandler(sw);
    }
 else     if ("text".equals(format)) {
      contentHandler=getTextContentHandler(sw);
    }
 else     if ("none".equals(format)) {
      contentHandler=new DefaultHandler();
    }
  }
 catch (  TransformerConfigurationException e) {
    wrapAndThrow(SEVERE,e,"Unable to create content handler");
  }
  Parser tikaParser=null;
  if (parser.equals(AUTO_PARSER)) {
    tikaParser=new AutoDetectParser(tikaConfig);
  }
 else {
    tikaParser=context.getSolrCore().getResourceLoader().newInstance(parser,Parser.class);
  }
  try {
    ParseContext context=new ParseContext();
    if ("identity".equals(htmlMapper)) {
      context.set(HtmlMapper.class,IdentityHtmlMapper.INSTANCE);
    }
    tikaParser.parse(is,contentHandler,metadata,context);
  }
 catch (  Exception e) {
    if (SKIP.equals(onError)) {
      throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,"Document skipped :" + e.getMessage());
    }
    wrapAndThrow(SEVERE,e,"Unable to read content");
  }
  IOUtils.closeQuietly(is);
  for (  Map<String,String> field : context.getAllEntityFields()) {
    if (!"true".equals(field.get("meta")))     continue;
    String col=field.get(COLUMN);
    String s=metadata.get(col);
    if (s != null)     row.put(col,s);
  }
  if (!"none".equals(format))   row.put("text",sw.toString());
  done=true;
  return row;
}
