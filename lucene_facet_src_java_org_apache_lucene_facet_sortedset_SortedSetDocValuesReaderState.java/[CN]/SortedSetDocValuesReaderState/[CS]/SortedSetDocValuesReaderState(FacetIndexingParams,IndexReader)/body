{
  this.field=fip.getCategoryListParams(null).field + FACET_FIELD_EXTENSION;
  this.separator=fip.getFacetDelimChar();
  this.separatorRegex=Pattern.quote(Character.toString(separator));
  if (reader instanceof AtomicReader) {
    topReader=(AtomicReader)reader;
  }
 else {
    topReader=new SlowCompositeReaderWrapper((CompositeReader)reader);
  }
  SortedSetDocValues dv=topReader.getSortedSetDocValues(field);
  if (dv == null) {
    throw new IllegalArgumentException("field \"" + field + "\" was not indexed with SortedSetDocValues");
  }
  if (dv.getValueCount() > Integer.MAX_VALUE) {
    throw new IllegalArgumentException("can only handle valueCount < Integer.MAX_VALUE; got " + dv.getValueCount());
  }
  valueCount=(int)dv.getValueCount();
  String lastDim=null;
  int startOrd=-1;
  BytesRef spare=new BytesRef();
  for (int ord=0; ord < valueCount; ord++) {
    dv.lookupOrd(ord,spare);
    String[] components=spare.utf8ToString().split(separatorRegex,2);
    if (components.length != 2) {
      throw new IllegalArgumentException("this class can only handle 2 level hierarchy (dim/value); got: " + spare.utf8ToString());
    }
    if (!components[0].equals(lastDim)) {
      if (lastDim != null) {
        prefixToOrdRange.put(lastDim,new OrdRange(startOrd,ord - 1));
      }
      startOrd=ord;
      lastDim=components[0];
    }
  }
  if (lastDim != null) {
    prefixToOrdRange.put(lastDim,new OrdRange(startOrd,valueCount - 1));
  }
}
