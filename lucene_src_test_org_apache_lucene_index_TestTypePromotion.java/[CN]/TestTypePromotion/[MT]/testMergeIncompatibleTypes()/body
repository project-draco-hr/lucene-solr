{
  Directory dir=newDirectory();
  IndexWriterConfig writerConfig=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random));
  writerConfig.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  IndexWriter writer=new IndexWriter(dir,writerConfig);
  int num_1=atLeast(200);
  int num_2=atLeast(200);
  long[] values=new long[num_1 + num_2];
  index(writer,randomValueType(INTEGERS,random),values,0,num_1);
  writer.commit();
  if (random.nextInt(4) == 0) {
    Directory dir_2=newDirectory();
    IndexWriter writer_2=new IndexWriter(dir_2,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)));
    index(writer_2,randomValueType(random.nextBoolean() ? UNSORTED_BYTES : SORTED_BYTES,random),values,num_1,num_2);
    writer_2.commit();
    writer_2.close();
    if (random.nextBoolean()) {
      writer.addIndexes(dir_2);
    }
 else {
      IndexReader open=IndexReader.open(dir_2);
      writer.addIndexes(open);
      open.close();
    }
    dir_2.close();
  }
 else {
    index(writer,randomValueType(random.nextBoolean() ? UNSORTED_BYTES : SORTED_BYTES,random),values,num_1,num_2);
    writer.commit();
  }
  writer.close();
  writerConfig=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random));
  if (writerConfig.getMergePolicy() instanceof NoMergePolicy) {
    writerConfig.setMergePolicy(newLogMergePolicy());
  }
  writer=new IndexWriter(dir,writerConfig);
  writer.forceMerge(1);
  writer.close();
  IndexReader reader=IndexReader.open(dir);
  assertEquals(1,reader.getSequentialSubReaders().length);
  ReaderContext topReaderContext=reader.getTopReaderContext();
  ReaderContext[] children=topReaderContext.children();
  DocValues docValues=children[0].reader.docValues("promote");
  assertNotNull(docValues);
  assertValues(TestType.Byte,dir,values);
  assertEquals(Type.BYTES_VAR_STRAIGHT,docValues.type());
  reader.close();
  dir.close();
}
