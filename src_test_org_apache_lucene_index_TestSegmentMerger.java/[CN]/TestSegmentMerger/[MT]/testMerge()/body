{
  SegmentMerger merger=new SegmentMerger(mergedDir,mergedSegment,false);
  merger.add(reader1);
  merger.add(reader2);
  try {
    int docsMerged=merger.merge();
    assertTrue(docsMerged == 2);
    SegmentReader mergedReader=new SegmentReader(new SegmentInfo(mergedSegment,docsMerged,mergedDir));
    assertTrue(mergedReader != null);
    assertTrue(mergedReader.numDocs() == 2);
    Document newDoc1=mergedReader.document(0);
    assertTrue(newDoc1 != null);
    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);
    Document newDoc2=mergedReader.document(1);
    assertTrue(newDoc2 != null);
    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);
    TermDocs termDocs=mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY,"field"));
    assertTrue(termDocs != null);
    assertTrue(termDocs.next() == true);
    Collection stored=mergedReader.getIndexedFieldNames(true);
    assertTrue(stored != null);
    assertTrue(stored.size() == 2);
    TermFreqVector vector=mergedReader.getTermFreqVector(0,DocHelper.TEXT_FIELD_2_KEY);
    assertTrue(vector != null);
    String[] terms=vector.getTerms();
    assertTrue(terms != null);
    assertTrue(terms.length == 3);
    int[] freqs=vector.getTermFrequencies();
    assertTrue(freqs != null);
    for (int i=0; i < terms.length; i++) {
      String term=terms[i];
      int freq=freqs[i];
      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);
      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    assertTrue(false);
  }
}
