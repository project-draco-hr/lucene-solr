{
  CloudState cloudState=getCloudState();
  Set<String> knownCollections=cloudState.getCollections();
  List<String> collections=zkClient.getChildren(COLLECTIONS_ZKNODE,null);
  for (  final String collection : collections) {
    if (makeWatchesForReconnect || !knownCollections.contains(collection)) {
      log.info("Found new collection:" + collection);
      Watcher watcher=new Watcher(){
        public void process(        WatchedEvent event){
          log.info("Detected changed ShardId in collection:" + collection);
          try {
            makeShardsWatches(collection,false);
            updateCloudState(false);
          }
 catch (          KeeperException e) {
            if (e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {
              log.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK");
              return;
            }
            log.error("",e);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
          }
catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error("",e);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
          }
catch (          IOException e) {
            log.error("",e);
            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);
          }
        }
      }
;
      boolean madeWatch=true;
      String shardZkNode=COLLECTIONS_ZKNODE + "/" + collection+ SHARDS_ZKNODE;
      for (int i=0; i < 5; i++) {
        try {
          zkClient.getChildren(shardZkNode,watcher);
        }
 catch (        KeeperException.NoNodeException e) {
          madeWatch=false;
          if (i == 4) {
            log.error("Could not set shards zknode watch, because the zknode does not exist:" + shardZkNode);
            break;
          }
          Thread.sleep(100);
        }
        if (madeWatch) {
          log.info("Made shard watch:" + shardZkNode);
          break;
        }
      }
    }
  }
}
