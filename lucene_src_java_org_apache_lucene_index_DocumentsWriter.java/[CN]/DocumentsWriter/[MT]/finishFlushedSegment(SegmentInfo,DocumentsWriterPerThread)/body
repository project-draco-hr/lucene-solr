{
  SegmentReader reader=indexWriter.readerPool.get(newSegment,false);
  try {
    applyDeletes(reader,newSegment.getMinSequenceID(),newSegment.getMaxSequenceID(),perThread.sequenceIDs);
  }
  finally {
    indexWriter.readerPool.release(reader);
  }
  if (indexWriter.useCompoundFile(newSegment)) {
    String compoundFileName=IndexFileNames.segmentFileName(newSegment.name,"",IndexFileNames.COMPOUND_FILE_EXTENSION);
    message("creating compound file " + compoundFileName);
    boolean success=false;
    try {
      createCompoundFile(compoundFileName,perThread);
      success=true;
    }
  finally {
      if (!success) {
        if (infoStream != null) {
          message("hit exception " + "reating compound file for newly flushed segment " + newSegment.name);
        }
        indexWriter.getIndexFileDeleter().deleteFile(IndexFileNames.segmentFileName(newSegment.name,"",IndexFileNames.COMPOUND_FILE_EXTENSION));
        for (        String file : perThread.flushState.flushedFiles) {
          indexWriter.getIndexFileDeleter().deleteFile(file);
        }
      }
    }
    for (    String file : perThread.flushState.flushedFiles) {
      indexWriter.getIndexFileDeleter().deleteFile(file);
    }
    newSegment.setUseCompoundFile(true);
synchronized (openFiles) {
      openFiles.remove(compoundFileName);
    }
  }
synchronized (openFiles) {
    openFiles.removeAll(perThread.flushState.flushedFiles);
  }
  indexWriter.addNewSegment(newSegment);
}
