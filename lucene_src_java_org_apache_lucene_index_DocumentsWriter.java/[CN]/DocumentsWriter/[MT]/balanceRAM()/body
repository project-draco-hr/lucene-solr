{
  final long deletesRAMUsed=deletesInRAM.bytesUsed + deletesFlushed.bytesUsed;
  if (numBytesUsed + deletesRAMUsed > ramBufferSize) {
    if (infoStream != null)     message("  RAM: now balance allocations: usedMB=" + toMB(numBytesUsed) + " vs trigger="+ toMB(ramBufferSize)+ " deletesMB="+ toMB(deletesRAMUsed)+ " byteBlockFree="+ toMB(byteBlockAllocator.freeByteBlocks.size() * BYTE_BLOCK_SIZE)+ " perDocFree="+ toMB(perDocAllocator.freeByteBlocks.size() * PER_DOC_BLOCK_SIZE));
    final long startBytesUsed=numBytesUsed + deletesRAMUsed;
    int iter=0;
    boolean any=true;
    while (numBytesUsed + deletesRAMUsed > freeLevel) {
synchronized (this) {
        if (0 == perDocAllocator.freeByteBlocks.size() && 0 == byteBlockAllocator.freeByteBlocks.size() && 0 == freeIntBlocks.size() && !any) {
          bufferIsFull=numBytesUsed + deletesRAMUsed > ramBufferSize;
          if (infoStream != null) {
            if (numBytesUsed + deletesRAMUsed > ramBufferSize)             message("    nothing to free; now set bufferIsFull");
 else             message("    nothing to free");
          }
          break;
        }
        if ((0 == iter % 4) && byteBlockAllocator.freeByteBlocks.size() > 0) {
          byteBlockAllocator.freeByteBlocks.remove(byteBlockAllocator.freeByteBlocks.size() - 1);
          numBytesUsed-=BYTE_BLOCK_SIZE;
        }
        if ((1 == iter % 4) && freeIntBlocks.size() > 0) {
          freeIntBlocks.remove(freeIntBlocks.size() - 1);
          numBytesUsed-=INT_BLOCK_SIZE * INT_NUM_BYTE;
        }
        if ((2 == iter % 4) && perDocAllocator.freeByteBlocks.size() > 0) {
          for (int i=0; i < 32; ++i) {
            perDocAllocator.freeByteBlocks.remove(perDocAllocator.freeByteBlocks.size() - 1);
            numBytesUsed-=PER_DOC_BLOCK_SIZE;
            if (perDocAllocator.freeByteBlocks.size() == 0) {
              break;
            }
          }
        }
      }
      if ((3 == iter % 4) && any)       any=consumer.freeRAM();
      iter++;
    }
    if (infoStream != null)     message("    after free: freedMB=" + nf.format((startBytesUsed - numBytesUsed - deletesRAMUsed) / 1024. / 1024.) + " usedMB="+ nf.format((numBytesUsed + deletesRAMUsed) / 1024. / 1024.));
  }
}
