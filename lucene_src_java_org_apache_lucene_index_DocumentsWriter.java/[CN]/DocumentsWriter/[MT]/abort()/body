{
  boolean success=false;
synchronized (this) {
    deleteQueue.clear();
  }
  try {
    if (infoStream != null) {
      infoStream.message("DW","abort");
    }
    final Iterator<ThreadState> threadsIterator=perThreadPool.getActivePerThreadsIterator();
    while (threadsIterator.hasNext()) {
      final ThreadState perThread=threadsIterator.next();
      perThread.lock();
      try {
        if (perThread.isActive()) {
          try {
            perThread.perThread.abort();
          }
 catch (          IOException ex) {
          }
 finally {
            perThread.perThread.checkAndResetHasAborted();
            flushControl.doOnAbort(perThread);
          }
        }
 else {
          assert closed;
        }
      }
  finally {
        perThread.unlock();
      }
    }
    success=true;
  }
  finally {
    if (infoStream != null) {
      infoStream.message("DW","done abort; abortedFiles=" + abortedFiles + " success="+ success);
    }
  }
}
