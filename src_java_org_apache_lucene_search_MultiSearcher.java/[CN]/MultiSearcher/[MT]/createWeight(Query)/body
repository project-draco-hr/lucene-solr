{
  final Query rewrittenQuery=rewrite(original);
  final Set<Term> terms=new HashSet<Term>();
  rewrittenQuery.extractTerms(terms);
  final Term[] allTermsArray=new Term[terms.size()];
  terms.toArray(allTermsArray);
  int[] aggregatedDfs=new int[terms.size()];
  for (int i=0; i < searchables.length; i++) {
    int[] dfs=searchables[i].docFreqs(allTermsArray);
    for (int j=0; j < aggregatedDfs.length; j++) {
      aggregatedDfs[j]+=dfs[j];
    }
  }
  final HashMap<Term,Integer> dfMap=new HashMap<Term,Integer>();
  for (int i=0; i < allTermsArray.length; i++) {
    dfMap.put(allTermsArray[i],Integer.valueOf(aggregatedDfs[i]));
  }
  final int numDocs=maxDoc();
  final CachedDfSource cacheSim=new CachedDfSource(dfMap,numDocs,getSimilarity());
  return rewrittenQuery.weight(cacheSim);
}
