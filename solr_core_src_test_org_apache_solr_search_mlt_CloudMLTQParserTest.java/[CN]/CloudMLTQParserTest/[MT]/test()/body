{
  waitForRecoveriesToFinish(false);
  String id="id";
  delQ("*:*");
  String FIELD1="lowerfilt";
  indexDoc(sdoc(id,"1",FIELD1,"toyota"));
  indexDoc(sdoc(id,"2",FIELD1,"chevrolet"));
  indexDoc(sdoc(id,"3",FIELD1,"bmw usa"));
  indexDoc(sdoc(id,"4",FIELD1,"ford"));
  indexDoc(sdoc(id,"5",FIELD1,"ferrari"));
  indexDoc(sdoc(id,"6",FIELD1,"jaguar"));
  indexDoc(sdoc(id,"7",FIELD1,"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too"));
  indexDoc(sdoc(id,"8",FIELD1,"sonata"));
  indexDoc(sdoc(id,"9",FIELD1,"The quick red fox jumped over the lazy big and large brown dogs."));
  indexDoc(sdoc(id,"10",FIELD1,"blue"));
  indexDoc(sdoc(id,"12",FIELD1,"glue"));
  indexDoc(sdoc(id,"13",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"14",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"15",FIELD1,"The fat red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"16",FIELD1,"The slim red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"17",FIELD1,"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon"));
  indexDoc(sdoc(id,"18",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"19",FIELD1,"The hose red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"20",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"21",FIELD1,"The court red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"22",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"23",FIELD1,"The quote red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"24",FIELD1,"The file red fox jumped over the lazy brown dogs."));
  indexDoc(sdoc(id,"25",FIELD1,"rod fix"));
  indexDoc(sdoc(id,"26",FIELD1,"bmw usa 328i"));
  indexDoc(sdoc(id,"27",FIELD1,"bmw usa 535i"));
  indexDoc(sdoc(id,"28",FIELD1,"bmw 750Li"));
  commit();
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  handle.put("maxScore",SKIPVAL);
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt qf=lowerfilt}17");
  QueryResponse queryResponse=cloudClient.query(params);
  SolrDocumentList solrDocuments=queryResponse.getResults();
  int[] expectedIds=new int[]{17,7,13,14,15,16,20,22,24,9};
  int[] actualIds=new int[10];
  int i=0;
  for (  SolrDocument solrDocument : solrDocuments) {
    actualIds[i++]=Integer.valueOf(String.valueOf(solrDocument.getFieldValue("id")));
  }
  assertArrayEquals(expectedIds,actualIds);
  params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt qf=lowerfilt mindf=0 mintf=1}3");
  params.set(CommonParams.DEBUG,"true");
  queryResponse=queryServer(params);
  solrDocuments=queryResponse.getResults();
  expectedIds=new int[]{3,27,26,28};
  actualIds=new int[solrDocuments.size()];
  i=0;
  for (  SolrDocument solrDocument : solrDocuments) {
    actualIds[i++]=Integer.valueOf(String.valueOf(solrDocument.getFieldValue("id")));
  }
  assertArrayEquals(expectedIds,actualIds);
  String expectedQueryString="lowerfilt:bmw lowerfilt:usa";
  ArrayList<String> actualParsedQueries=(ArrayList<String>)queryResponse.getDebugMap().get("parsedquery");
  for (int counter=0; counter < actualParsedQueries.size(); counter++) {
    assertTrue("Parsed queries aren't equal",compareParsedQueryStrings(expectedQueryString,actualParsedQueries.get(counter)));
  }
  params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt qf=lowerfilt mindf=20 mintf=1}3");
  params.set(CommonParams.DEBUG,"true");
  queryResponse=queryServer(params);
  solrDocuments=queryResponse.getResults();
  assertEquals("Expected to match 0 documents with a mindf of 20 but found more",solrDocuments.size(),0);
  params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt qf=lowerfilt minwl=4 mintf=1}3");
  params.set(CommonParams.DEBUG,"true");
  queryResponse=queryServer(params);
  solrDocuments=queryResponse.getResults();
  assertEquals("Expected to match 0 documents with a minwl of 4 but found more",solrDocuments.size(),0);
  params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt qf=lowerfilt minwl=3 mintf=1}3");
  params.set(CommonParams.DEBUG,"true");
  queryResponse=queryServer(params);
  solrDocuments=queryResponse.getResults();
  assertEquals("Expected to match 4 documents with a minwl of 3 but found more",solrDocuments.size(),4);
  params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"{!mlt}20");
  queryResponse=queryServer(params);
  solrDocuments=queryResponse.getResults();
  actualIds=new int[solrDocuments.size()];
  expectedIds=new int[]{13,14,15,16,20,22,24,18,19,21};
  i=0;
  for (  SolrDocument solrDocument : solrDocuments) {
    actualIds[i++]=Integer.valueOf(String.valueOf(solrDocument.getFieldValue("id")));
  }
  assertArrayEquals(expectedIds,actualIds);
}
