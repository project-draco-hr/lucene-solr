{
  int df=0;
  if (mergeState.fieldInfo.omitTermFreqAndPositions) {
    while (true) {
      final int doc=postings.nextDoc();
      if (doc == DocIdSetIterator.NO_MORE_DOCS) {
        break;
      }
      this.startDoc(doc,postings.freq());
      this.finishDoc();
      df++;
    }
  }
 else {
    final DocsAndPositionsEnum postingsEnum=(DocsAndPositionsEnum)postings;
    while (true) {
      final int doc=postingsEnum.nextDoc();
      if (doc == DocIdSetIterator.NO_MORE_DOCS) {
        break;
      }
      final int freq=postingsEnum.freq();
      this.startDoc(doc,freq);
      for (int i=0; i < freq; i++) {
        final int position=postingsEnum.nextPosition();
        final int payloadLength=postingsEnum.getPayloadLength();
        final BytesRef payload;
        if (payloadLength > 0) {
          payload=postingsEnum.getPayload();
        }
 else {
          payload=null;
        }
        this.addPosition(position,payload);
      }
      this.finishDoc();
      df++;
    }
  }
  return df;
}
