{
  StringBuilder sb=new StringBuilder();
  int nTerms=7;
  for (int i=0; i < nTerms; i++) {
    sb.append(t(i));
    sb.append(' ');
  }
  String many_ws=sb.toString();
  int i1=1000000;
  int iter=1000;
  for (int i=0; i < iter; i++) {
    assertU(adoc("id",t(i),"many_ws",t(i1 + i) + " " + t(i1 * 2 + i)));
  }
  assertU(commit());
  for (int i=0; i < iter; i+=iter / 10) {
    assertQ("check many tokens",req("q","id:" + t(i),"indent","true","facet","true","facet.method","fc","facet.field","many_ws","facet.limit","-1","facet.mincount","1"),"*[count(//lst[@name='many_ws']/int)=" + 2 + "]","//lst[@name='many_ws']/int[@name='" + t(i1 + i) + "'][.='1']","//lst[@name='many_ws']/int[@name='" + t(i1 * 2 + i) + "'][.='1']");
  }
  int i=iter - 1;
  assertQ("check many tokens",req("q","id:" + t(i),"indent","true","facet","true","facet.method","fc","facet.field","many_ws","facet.limit","-1","facet.mincount","1"),"*[count(//lst[@name='many_ws']/int)=" + 2 + "]","//lst[@name='many_ws']/int[@name='" + t(i1 + i) + "'][.='1']","//lst[@name='many_ws']/int[@name='" + t(i1 * 2 + i) + "'][.='1']");
}
