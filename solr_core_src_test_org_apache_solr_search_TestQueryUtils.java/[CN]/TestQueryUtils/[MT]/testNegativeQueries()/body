{
  TermQuery tq=new TermQuery(new Term("hi","there"));
  TermQuery tq2=new TermQuery(new Term("wow","dude"));
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  positive(tq);
  bq.add(tq,BooleanClause.Occur.SHOULD);
  positive(bq.build());
  bq.add(tq2,BooleanClause.Occur.MUST_NOT);
  positive(bq.build());
  bq=new BooleanQuery.Builder();
  bq.add(tq,BooleanClause.Occur.MUST_NOT);
  negative(bq.build());
  bq.add(tq2,BooleanClause.Occur.MUST_NOT);
  negative(bq.build());
  String f="name";
  assertU(adoc("id","1",f,"A"));
  assertU(adoc("id","2",f,"B"));
  assertU(adoc("id","3",f,"C"));
  assertU(adoc("id","4",f,"C"));
  assertU(adoc("id","5",f,"D"));
  assertU(adoc("id","6",f,"E"));
  assertU(adoc("id","7",f,"E"));
  assertU(adoc("id","8",f,"E W"));
  assertU(adoc("id","9",f,"F W"));
  assertU(adoc("id","10",f,"G W"));
  assertU(adoc("id","11",f,"G X "));
  assertU(adoc("id","12",f,"G X Y"));
  assertU(adoc("id","13",f,"G X Y Z"));
  assertU(adoc("id","14",f,"G Y Z"));
  assertU(adoc("id","15",f,"G Z"));
  assertU(adoc("id","16",f,"G"));
  assertU(commit());
  assertQ("test negative base q matching nothing",req("-qlkciyopsbgzyvkylsjhchghjrdf"),"//result[@numFound='16']");
  assertQ("test negative base q matching something",req("-name:E"),"//result[@numFound='13']");
  assertQ("test negative base q with two terms",req("-name:G -name:W"),"//result[@numFound='7']");
  assertQ("test negative base q with three terms",req("-name:G -name:W -name:E"),"//result[@numFound='5']");
  assertQ("test negative boolean query",req("-(name:G OR name:W)"),"//result[@numFound='7']");
  assertQ("test non negative q",req("-name:G -name:W -name:E id:[* TO *]"),"//result[@numFound='5']");
  assertQ("test non negative q",req("-name:G -name:W -name:E +id:[* TO *]"),"//result[@numFound='5']");
  assertQ("test negative base q matching nothing, with filters",req("q","-qlkciyopsbgzyvkylsjhchghjrdf","fq","name:A"),"//result[@numFound='1']");
  assertQ("test negative filters",req("q","name:A","fq","-name:A"),"//result[@numFound='0']");
  assertQ("test negative filters",req("q","name:A","fq","-name:A"),"//result[@numFound='0']");
  assertQ("test negative filters",req("q","-name:E","fq","name:E"),"//result[@numFound='0']");
  assertQ("test negative filters",req("q","-name:E","fq","name:W"),"//result[@numFound='2']");
  assertQ("test negative filters",req("q","-name:E","fq","name:W"),"//result[@numFound='2']");
  assertQ("one pos filter, one neg",req("q","-name:E","fq","name:W","fq","-name:G"),"//result[@numFound='1']");
  assertQ("two neg filters",req("q","-name:E","fq","-name:W","fq","-name:G"),"//result[@numFound='5']");
  assertQ("three neg filters",req("q","-name:E","fq","-name:W","fq","-name:G","fq","-name:C"),"//result[@numFound='3']");
  assertQ("compound neg filters",req("q","-name:E","fq","-name:W -name:G","fq","-name:C"),"//result[@numFound='3']");
  assertQ("compound neg filters",req("q","-name:E","fq","-name:W -name:G -name:C"),"//result[@numFound='3']");
  assertQ("compound neg filters",req("q","-name:E","fq","-(name:W name:G name:C)"),"//result[@numFound='3']");
  assertQ("three neg filters + pos",req("q","-name:E","fq","-name:W","fq","-name:G","fq","-name:C","fq","name:G"),"//result[@numFound='0']");
  assertQ("three neg filters + pos",req("q","-name:E","fq","-name:W","fq","-name:G","fq","-name:C","fq","+id:1"),"//result[@numFound='1']");
  assertQ("three neg filters + pos",req("q","-name:E","fq","-name:W","fq","-name:G","fq","-name:C","fq","id:[* TO *]"),"//result[@numFound='3']");
  assertQ("neg base query on stopword",req("q","-text:stopworda"),"//result[@numFound='16']");
  assertQ("negative filter on stopword",req("q","id:[* TO *]","fq","-text:stopworda"),"//result[@numFound='16']");
  assertQ("two negative filters on stopword",req("q","id:[* TO *]","fq","-text:stopworda","fq","-text:stopworda"),"//result[@numFound='16']");
  assertQ("compound negative filters with stopword",req("q","id:[* TO *]","fq","-text:stopworda -id:1"),"//result[@numFound='15']");
}
