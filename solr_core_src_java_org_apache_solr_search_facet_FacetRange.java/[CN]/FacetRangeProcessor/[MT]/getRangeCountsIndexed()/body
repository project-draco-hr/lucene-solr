{
  int slotCount=rangeList.size() + otherList.size();
  intersections=new DocSet[slotCount];
  createAccs(fcontext.base.size(),slotCount);
  prepareForCollection();
  for (int idx=0; idx < rangeList.size(); idx++) {
    rangeStats(rangeList.get(idx),idx);
  }
  for (int idx=0; idx < otherList.size(); idx++) {
    rangeStats(otherList.get(idx),rangeList.size() + idx);
  }
  final SimpleOrderedMap res=new SimpleOrderedMap<>();
  List<SimpleOrderedMap> buckets=new ArrayList<>();
  res.add("buckets",buckets);
  for (int idx=0; idx < rangeList.size(); idx++) {
    if (effectiveMincount > 0 && countAcc.getCount(idx) < effectiveMincount)     continue;
    Range range=rangeList.get(idx);
    SimpleOrderedMap bucket=new SimpleOrderedMap();
    buckets.add(bucket);
    bucket.add("val",range.label);
    addStats(bucket,idx);
    doSubs(bucket,idx);
  }
  for (int idx=0; idx < otherList.size(); idx++) {
    Range range=otherList.get(idx);
    SimpleOrderedMap bucket=new SimpleOrderedMap();
    res.add(range.label.toString(),bucket);
    addStats(bucket,rangeList.size() + idx);
    doSubs(bucket,rangeList.size() + idx);
  }
  return res;
}
