{
  Map<String,String> attributes=info.attributes;
  BreakIterator breakIterator=BreakIterator.getSentenceInstance(Locale.ROOT);
  String k1=attributes.get("k1");
  if (k1 == null) {
    k1="1.2";
  }
  String b=attributes.get("b");
  if (b == null) {
    b="0.75";
  }
  String pivot=attributes.get("pivot");
  if (pivot == null) {
    pivot="87";
  }
  final PassageScorer scorer=new PassageScorer(Float.parseFloat(k1),Float.parseFloat(b),Float.parseFloat(pivot));
  String preTag=attributes.get("preTag");
  if (preTag == null) {
    preTag="<em>";
  }
  String postTag=attributes.get("postTag");
  if (postTag == null) {
    postTag="</em>";
  }
  String ellipsis=attributes.get("ellipsis");
  if (ellipsis == null) {
    ellipsis="... ";
  }
  final PassageFormatter formatter=new PassageFormatter(preTag,postTag,ellipsis);
  String summarizeEmpty=attributes.get("summarizeEmpty");
  final boolean summarizeEmptyBoolean;
  if (summarizeEmpty == null) {
    summarizeEmptyBoolean=true;
  }
 else {
    summarizeEmptyBoolean=Boolean.parseBoolean(summarizeEmpty);
  }
  int maxLength=PostingsHighlighter.DEFAULT_MAX_LENGTH;
  if (attributes.containsKey("maxLength")) {
    maxLength=Integer.parseInt(attributes.get("maxLength"));
  }
  highlighter=new PostingsHighlighter(maxLength,breakIterator){
    @Override protected Passage[] getEmptyHighlight(    String fieldName,    BreakIterator bi,    int maxPassages){
      if (summarizeEmptyBoolean) {
        return super.getEmptyHighlight(fieldName,bi,maxPassages);
      }
 else {
        return new Passage[0];
      }
    }
    @Override protected PassageFormatter getFormatter(    String fieldName){
      return formatter;
    }
    @Override protected PassageScorer getScorer(    String fieldName){
      return scorer;
    }
  }
;
}
