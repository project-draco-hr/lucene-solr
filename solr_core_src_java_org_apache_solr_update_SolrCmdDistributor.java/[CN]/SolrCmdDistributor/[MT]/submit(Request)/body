{
  final String url=sreq.node.getUrl();
  Callable<Request> task=new Callable<Request>(){
    @Override public Request call() throws Exception {
      Request clonedRequest=null;
      try {
        clonedRequest=new Request();
        clonedRequest.node=sreq.node;
        clonedRequest.ureq=sreq.ureq;
        clonedRequest.retries=sreq.retries;
        String fullUrl;
        if (!url.startsWith("http://") && !url.startsWith("https://")) {
          fullUrl="http://" + url;
        }
 else {
          fullUrl=url;
        }
        HttpSolrServer server=new HttpSolrServer(fullUrl,client);
        if (Thread.currentThread().isInterrupted()) {
          clonedRequest.rspCode=503;
          clonedRequest.exception=new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Shutting down.");
          return clonedRequest;
        }
        clonedRequest.ursp=server.request(clonedRequest.ureq);
      }
 catch (      Exception e) {
        clonedRequest.exception=e;
        if (e instanceof SolrException) {
          clonedRequest.rspCode=((SolrException)e).code();
        }
 else {
          clonedRequest.rspCode=-1;
        }
      }
 finally {
        semaphore.release();
      }
      return clonedRequest;
    }
  }
;
  try {
    semaphore.acquire();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Update thread interrupted",e);
  }
  pending.add(completionService.submit(task));
}
