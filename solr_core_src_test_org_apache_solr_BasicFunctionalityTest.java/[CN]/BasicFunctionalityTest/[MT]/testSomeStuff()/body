{
  SolrCore core=h.getCore();
  IndexWriter writer=((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);
  assertEquals("Mergefactor was not picked up",((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(),8);
  lrf.args.put(CommonParams.VERSION,"2.2");
  assertQ("test query on empty index",req("qlkciyopsbgzyvkylsjhchghjrdf"),"//result[@numFound='0']");
  assertU("deleting 42 for no reason at all",delI("42"));
  assertU("adding doc#42",adoc("id","42","val_s","aa;bb"));
  assertU("does commit work?",commit());
  assertQ("backslash escaping semicolon",req("id:42 AND val_s:aa\\;bb"),"//*[@numFound='1']","//int[@name='id'][.='42']");
  assertQ("quote escaping semicolon",req("id:42 AND val_s:\"aa;bb\""),"//*[@numFound='1']","//int[@name='id'][.='42']");
  assertQ("no escaping semicolon",req("id:42 AND val_s:aa"),"//*[@numFound='0']");
  assertU(delI("42"));
  assertU(commit());
  assertQ(req("id:42"),"//*[@numFound='0']");
  assertU(adoc("id","42","val_s","AAA"));
  assertU(adoc("id","42","val_s","BBB"));
  assertU(commit());
  assertQ(req("id:42"),"//*[@numFound='1']","//str[.='BBB']");
  assertU(adoc("id","42","val_s","CCC"));
  assertU(adoc("id","42","val_s","DDD"));
  assertU(commit());
  assertQ(req("id:42"),"//*[@numFound='1']","//str[.='DDD']");
  String[] adds=new String[]{add(doc("id","101"),"overwrite","true"),add(doc("id","101"),"overwrite","true"),add(doc("id","105"),"overwrite","false"),add(doc("id","102"),"overwrite","true"),add(doc("id","103"),"overwrite","false"),add(doc("id","101"),"overwrite","true")};
  for (  String a : adds) {
    assertU(a,a);
  }
  assertU(commit());
  assertQ(req("q","id:[100 TO 110]","rows","2147483647"),"//*[@numFound='4']");
  assertQ(req("q","id:[100 TO 111]","rows","1147483647"),"//*[@numFound='4']");
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='4']");
  assertU(delI("102"));
  assertU(commit());
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='3']");
  assertU(delI("105"));
  assertU(commit());
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='2']");
  assertU(delQ("id:[100 TO 110]"));
  assertU(commit());
  assertQ(req("id:[100 TO 110]"),"//*[@numFound='0']");
}
