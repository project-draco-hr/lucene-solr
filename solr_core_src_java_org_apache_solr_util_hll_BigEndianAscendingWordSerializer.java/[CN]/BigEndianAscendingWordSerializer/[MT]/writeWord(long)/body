{
  if (wordsWritten == wordCount) {
    throw new RuntimeException("Cannot write more words, backing array full!");
  }
  int bitsLeftInWord=wordLength;
  while (bitsLeftInWord > 0) {
    if (bitsLeftInByte == 0) {
      byteIndex++;
      bitsLeftInByte=BITS_PER_BYTE;
    }
    final long consumedMask;
    if (bitsLeftInWord == 64) {
      consumedMask=~0L;
    }
 else {
      consumedMask=((1L << bitsLeftInWord) - 1L);
    }
    final int numberOfBitsToWrite=Math.min(bitsLeftInByte,bitsLeftInWord);
    final int bitsInByteRemainingAfterWrite=(bitsLeftInByte - numberOfBitsToWrite);
    final long remainingBitsOfWordToWrite=(word & consumedMask);
    final long bitsThatTheByteCanAccept;
    if (bitsLeftInWord > numberOfBitsToWrite) {
      bitsThatTheByteCanAccept=(remainingBitsOfWordToWrite >>> (bitsLeftInWord - bitsLeftInByte));
    }
 else {
      bitsThatTheByteCanAccept=remainingBitsOfWordToWrite;
    }
    final long alignedBits=(bitsThatTheByteCanAccept << bitsInByteRemainingAfterWrite);
    bytes[byteIndex]|=(byte)alignedBits;
    bitsLeftInWord-=numberOfBitsToWrite;
    bitsLeftInByte=bitsInByteRemainingAfterWrite;
  }
  wordsWritten++;
}
