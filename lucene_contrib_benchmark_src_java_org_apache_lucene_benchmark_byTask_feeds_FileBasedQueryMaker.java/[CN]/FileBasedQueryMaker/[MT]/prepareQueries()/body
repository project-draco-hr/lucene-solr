{
  Analyzer anlzr=NewAnalyzerTask.createAnalyzer(config.get("analyzer","org.apache.lucene.analysis.standard.StandardAnalyzer"));
  String defaultField=config.get("file.query.maker.default.field",DocMaker.BODY_FIELD);
  QueryParser qp=new QueryParser(Version.LUCENE_CURRENT,defaultField,anlzr);
  qp.setAllowLeadingWildcard(true);
  List<Query> qq=new ArrayList<Query>();
  String fileName=config.get("file.query.maker.file",null);
  if (fileName != null) {
    File file=new File(fileName);
    Reader reader=null;
    if (file.exists()) {
      reader=new FileReader(file);
    }
 else {
      InputStream asStream=FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);
      if (asStream != null) {
        reader=new InputStreamReader(asStream);
      }
    }
    if (reader != null) {
      try {
        BufferedReader buffered=new BufferedReader(reader);
        String line=null;
        int lineNum=0;
        while ((line=buffered.readLine()) != null) {
          line=line.trim();
          if (line.length() != 0 && !line.startsWith("#")) {
            try {
              qq.add(qp.parse(line));
            }
 catch (            ParseException e) {
              System.err.println("Exception: " + e.getMessage() + " occurred while parsing line: "+ lineNum+ " Text: "+ line);
            }
          }
          lineNum++;
        }
      }
  finally {
        reader.close();
      }
    }
 else {
      System.err.println("No Reader available for: " + fileName);
    }
  }
  return qq.toArray(new Query[qq.size()]);
}
