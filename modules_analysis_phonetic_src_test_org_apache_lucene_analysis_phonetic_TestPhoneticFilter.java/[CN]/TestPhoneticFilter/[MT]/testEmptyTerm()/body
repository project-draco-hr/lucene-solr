{
  Encoder encoders[]=new Encoder[]{new Metaphone(),new DoubleMetaphone(),new Soundex(),new RefinedSoundex(),new Caverphone()};
  for (  final Encoder e : encoders) {
    Analyzer a=new Analyzer(){
      @Override protected TokenStreamComponents createComponents(      String fieldName,      Reader reader){
        Tokenizer tokenizer=new KeywordTokenizer(reader);
        return new TokenStreamComponents(tokenizer,new PhoneticFilter(tokenizer,e,random().nextBoolean()));
      }
    }
;
    checkOneTermReuse(a,"","");
  }
}
