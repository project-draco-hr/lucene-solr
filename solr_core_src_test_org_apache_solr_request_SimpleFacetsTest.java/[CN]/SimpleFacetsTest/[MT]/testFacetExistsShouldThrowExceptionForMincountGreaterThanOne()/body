{
  final String f="t_s";
  final List<String> msg=Arrays.asList("facet.mincount","facet.exists",f);
  Collections.shuffle(msg,random());
  assertQEx("checking global method or per field",msg.get(0),req("q","id:[* TO *]","indent","on","facet","true",random().nextBoolean() ? "facet.exists" : "f." + f + ".facet.exists","true","facet.field",f,random().nextBoolean() ? "facet.mincount" : "f." + f + ".facet.mincount","" + (2 + random().nextInt(Integer.MAX_VALUE - 2))),ErrorCode.BAD_REQUEST);
  assertQ("overriding per field",req("q","id:[* TO *]","indent","on","facet","true","facet.exists","true","f." + f + ".facet.exists","false","facet.field",f,"facet.mincount","" + (2 + random().nextInt(Integer.MAX_VALUE - 2))),"//lst[@name='facet_fields']/lst[@name='" + f + "']");
  assertQ("overriding per field",req("q","id:[* TO *]","indent","on","facet","true","facet.exists","true","facet.field",f,"facet.mincount","" + (2 + random().nextInt(Integer.MAX_VALUE - 2)),"f." + f + ".facet.mincount",random().nextBoolean() ? "0" : "1"),"//lst[@name='facet_fields']/lst[@name='" + f + "']");
}
