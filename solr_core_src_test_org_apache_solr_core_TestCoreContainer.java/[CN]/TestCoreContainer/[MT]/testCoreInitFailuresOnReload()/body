{
  Map<String,CoreContainer.CoreLoadFailure> failures=null;
  Collection<String> cores=null;
  Exception fail=null;
  MockCoresLocator cl=new MockCoresLocator();
  SolrResourceLoader resourceLoader=new SolrResourceLoader(createTempDir());
  System.setProperty("configsets",getFile("solr/configsets").getAbsolutePath());
  final CoreContainer cc=new CoreContainer(SolrXmlConfig.fromString(resourceLoader,CONFIGSETS_SOLR_XML),new Properties(),cl);
  cl.add(new CoreDescriptor(cc,"col_ok",resourceLoader.getInstancePath().resolve("col_ok"),"configSet","minimal"));
  cl.add(new CoreDescriptor(cc,"col_bad",resourceLoader.getInstancePath().resolve("col_bad"),"configSet","bad-mergepolicy"));
  cc.load();
  cores=cc.getCoreNames();
  assertNotNull("core names is null",cores);
  assertEquals("wrong number of cores",1,cores.size());
  assertTrue("col_ok not found",cores.contains("col_ok"));
  failures=cc.getCoreInitFailures();
  assertNotNull("core failures is a null map",failures);
  assertEquals("wrong number of core failures",1,failures.size());
  fail=failures.get("col_bad").exception;
  assertNotNull("null failure for test core",fail);
  assertTrue("init failure doesn't mention problem: " + fail.getMessage(),0 < fail.getMessage().indexOf("DummyMergePolicy"));
  assertNull(cc.getCore("does_not_exist"));
  try {
    SolrCore c=cc.getCore("col_bad");
    fail("Failed to get Exception on accessing core with init failure");
  }
 catch (  SolrException ex) {
    assertEquals(500,ex.code());
    String cause=ex.getCause().getCause().getMessage();
    assertTrue("getCore() ex cause doesn't mention init fail: " + cause,0 < cause.indexOf("DummyMergePolicy"));
  }
  FileUtils.copyFile(getFile("solr/collection1/conf/solrconfig-defaults.xml"),FileUtils.getFile(cc.getSolrHome(),"col_bad","conf","solrconfig.xml"));
  FileUtils.copyFile(getFile("solr/collection1/conf/schema-minimal.xml"),FileUtils.getFile(cc.getSolrHome(),"col_bad","conf","schema.xml"));
  cc.create("col_bad",ImmutableMap.of());
  cores=cc.getCoreNames();
  assertNotNull("core names is null",cores);
  assertEquals("wrong number of cores",2,cores.size());
  assertTrue("col_ok not found",cores.contains("col_ok"));
  assertTrue("col_bad not found",cores.contains("col_bad"));
  failures=cc.getCoreInitFailures();
  assertNotNull("core failures is a null map",failures);
  assertEquals("wrong number of core failures",0,failures.size());
  try {
    ignoreException(Pattern.quote("bogus_path"));
    cc.create("bogus",ImmutableMap.of("configSet","bogus_path"));
    fail("bogus inst dir failed to trigger exception from create");
  }
 catch (  SolrException e) {
    assertTrue("init exception doesn't mention bogus dir: " + e.getCause().getCause().getMessage(),0 < e.getCause().getCause().getMessage().indexOf("bogus_path"));
  }
  cores=cc.getCoreNames();
  assertNotNull("core names is null",cores);
  assertEquals("wrong number of cores",2,cores.size());
  assertTrue("col_ok not found",cores.contains("col_ok"));
  assertTrue("col_bad not found",cores.contains("col_bad"));
  failures=cc.getCoreInitFailures();
  assertNotNull("core failures is a null map",failures);
  assertEquals("wrong number of core failures",1,failures.size());
  fail=failures.get("bogus").exception;
  assertNotNull("null failure for test core",fail);
  assertTrue("init failure doesn't mention problem: " + fail.getMessage(),0 < fail.getMessage().indexOf("bogus_path"));
  assertNull(cc.getCore("does_not_exist"));
  try {
    SolrCore c=cc.getCore("bogus");
    fail("Failed to get Exception on accessing core with init failure");
  }
 catch (  SolrException ex) {
    assertEquals(500,ex.code());
    String cause=ex.getCause().getMessage();
    assertTrue("getCore() ex cause doesn't mention init fail: " + cause,0 < cause.indexOf("bogus_path"));
  }
  final long col_bad_old_start=getCoreStartTime(cc,"col_bad");
  FileUtils.write(FileUtils.getFile(cc.getSolrHome(),"col_bad","conf","solrconfig.xml"),"This is giberish, not valid XML <",IOUtils.UTF_8);
  try {
    ignoreException(Pattern.quote("SAX"));
    cc.reload("col_bad");
    fail("corrupt solrconfig.xml failed to trigger exception from reload");
  }
 catch (  SolrException e) {
    Throwable rootException=getWrappedException(e);
    assertTrue("We're supposed to have a wrapped SAXParserException here, but we don't",rootException instanceof SAXParseException);
    SAXParseException se=(SAXParseException)rootException;
    assertTrue("reload exception doesn't refer to slrconfig.xml " + se.getSystemId(),0 < se.getSystemId().indexOf("solrconfig.xml"));
  }
  assertEquals("Failed core reload should not have changed start time",col_bad_old_start,getCoreStartTime(cc,"col_bad"));
  cores=cc.getCoreNames();
  assertNotNull("core names is null",cores);
  assertEquals("wrong number of cores",2,cores.size());
  assertTrue("col_ok not found",cores.contains("col_ok"));
  assertTrue("col_bad not found",cores.contains("col_bad"));
  failures=cc.getCoreInitFailures();
  assertNotNull("core failures is a null map",failures);
  assertEquals("wrong number of core failures",2,failures.size());
  Throwable ex=getWrappedException(failures.get("col_bad").exception);
  assertNotNull("null failure for test core",ex);
  assertTrue("init failure isn't SAXParseException",ex instanceof SAXParseException);
  SAXParseException saxEx=(SAXParseException)ex;
  assertTrue("init failure doesn't mention problem: " + saxEx.toString(),saxEx.getSystemId().contains("solrconfig.xml"));
  FileUtils.copyFile(getFile("solr/collection1/conf/solrconfig-defaults.xml"),FileUtils.getFile(cc.getSolrHome(),"col_bad","conf","solrconfig.xml"));
  cc.reload("col_bad");
  assertTrue("Core reload should have changed start time",col_bad_old_start < getCoreStartTime(cc,"col_bad"));
  cores=cc.getCoreNames();
  assertNotNull("core names is null",cores);
  assertEquals("wrong number of cores",2,cores.size());
  assertTrue("col_ok not found",cores.contains("col_ok"));
  assertTrue("col_bad not found",cores.contains("col_bad"));
  failures=cc.getCoreInitFailures();
  assertNotNull("core failures is a null map",failures);
  assertEquals("wrong number of core failures",1,failures.size());
  cc.shutdown();
}
