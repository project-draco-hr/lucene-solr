{
  final File workDir=new File(TEMP_DIR,this.getClass().getName() + "_persist");
  if (workDir.exists()) {
    FileUtils.deleteDirectory(workDir);
  }
  assertTrue("Failed to mkdirs workDir",workDir.mkdirs());
  final CoreContainer cores=h.getCoreContainer();
  cores.setPersistent(true);
  String instDir=null;
{
    SolrCore template=null;
    try {
      template=cores.getCore("collection1");
      instDir=template.getCoreDescriptor().getRawInstanceDir();
    }
  finally {
      if (null != template)       template.close();
    }
  }
  final File instDirFile=new File(cores.getSolrHome(),instDir);
  assertTrue("instDir doesn't exist: " + instDir,instDirFile.exists());
  final File oneXml=new File(workDir,"1.solr.xml");
  cores.persistFile(oneXml);
  assertXmlFile(oneXml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "' and @transient='false' and @loadOnStartup='true' ]","1=count(/solr/cores/core)");
  final File dataXfile=new File(workDir,"dataX");
  final String dataX=dataXfile.getAbsolutePath();
  assertTrue("dataXfile mkdirs failed: " + dataX,dataXfile.mkdirs());
  final File instYfile=new File(workDir,"instY");
  FileUtils.copyDirectory(instDirFile,instYfile);
  final String instY=instYfile.getAbsolutePath() + "/";
  final CoreDescriptor xd=new CoreDescriptor(cores,"X",instDir);
  xd.setDataDir(dataX);
  final CoreDescriptor yd=new CoreDescriptor(cores,"Y",instY);
  SolrCore x=null;
  SolrCore y=null;
  try {
    x=cores.create(xd);
    y=cores.create(yd);
    cores.register(x,false);
    cores.register(y,false);
    assertEquals("cores not added?",3,cores.getCoreNames().size());
    final File twoXml=new File(workDir,"2.solr.xml");
    cores.persistFile(twoXml);
    assertXmlFile(twoXml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1']","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "']","/solr/cores/core[@name='X' and @instanceDir='" + instDir + "' and @dataDir='"+ dataX+ "']","/solr/cores/core[@name='Y' and @instanceDir='" + instY + "']","3=count(/solr/cores/core)");
    assertXmlFile(twoXml,"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]");
    assertNotNull("removing X returned null",cores.remove("X"));
    final File threeXml=new File(workDir,"3.solr.xml");
    cores.persistFile(threeXml);
    assertXmlFile(threeXml,"/solr[@persistent='true']","/solr/cores[@defaultCoreName='collection1']","/solr/cores/core[@name='collection1' and @instanceDir='" + instDir + "']","/solr/cores/core[@name='Y' and @instanceDir='" + instY + "']","2=count(/solr/cores/core)");
    final File fourXml=new File(workDir,"4.solr.xml");
    cores.persistFile(fourXml);
    assertTrue("3 and 4 should be identical files",FileUtils.contentEquals(threeXml,fourXml));
  }
  finally {
    if (x != null) {
      try {
        x.close();
      }
 catch (      Exception e) {
        log.error("",e);
      }
    }
  }
}
