{
  for (int log2m=MINIMUM_LOG2M_PARAM; log2m <= 16; log2m++) {
    for (int regw=MINIMUM_REGWIDTH_PARAM; regw <= MAXIMUM_REGWIDTH_PARAM; regw++) {
      for (int expthr=MINIMUM_EXPTHRESH_PARAM; expthr <= MAXIMUM_EXPTHRESH_PARAM; expthr++) {
        for (        final boolean sparse : new boolean[]{true,false}) {
          HLL hll=new HLL(log2m,regw,expthr,sparse,hllType);
          for (          final Long item : items) {
            hll.addRaw(item);
          }
          HLL copy=HLL.fromBytes(hll.toBytes());
          assertEquals(copy.cardinality(),hll.cardinality());
          assertEquals(copy.getType(),hll.getType());
          assertTrue(Arrays.equals(copy.toBytes(),hll.toBytes()));
          HLL clone=hll.clone();
          assertEquals(clone.cardinality(),hll.cardinality());
          assertEquals(clone.getType(),hll.getType());
          assertTrue(Arrays.equals(clone.toBytes(),hll.toBytes()));
        }
      }
    }
  }
}
