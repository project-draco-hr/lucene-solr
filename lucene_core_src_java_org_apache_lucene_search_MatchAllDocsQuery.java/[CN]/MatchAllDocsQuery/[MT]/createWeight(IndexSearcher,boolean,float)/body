{
  return new ConstantScoreWeight(this,boost){
    @Override public String toString(){
      return "weight(" + MatchAllDocsQuery.this + ")";
    }
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      return new ConstantScoreScorer(this,score(),DocIdSetIterator.all(context.reader().maxDoc()));
    }
    @Override public BulkScorer bulkScorer(    LeafReaderContext context) throws IOException {
      final float score=score();
      final int maxDoc=context.reader().maxDoc();
      return new BulkScorer(){
        @Override public int score(        LeafCollector collector,        Bits acceptDocs,        int min,        int max) throws IOException {
          max=Math.min(max,maxDoc);
          FakeScorer scorer=new FakeScorer();
          scorer.score=score;
          collector.setScorer(scorer);
          for (int doc=min; doc < max; ++doc) {
            scorer.doc=doc;
            if (acceptDocs == null || acceptDocs.get(doc)) {
              collector.collect(doc);
            }
          }
          return max == maxDoc ? DocIdSetIterator.NO_MORE_DOCS : max;
        }
        @Override public long cost(){
          return maxDoc;
        }
      }
;
    }
  }
;
}
