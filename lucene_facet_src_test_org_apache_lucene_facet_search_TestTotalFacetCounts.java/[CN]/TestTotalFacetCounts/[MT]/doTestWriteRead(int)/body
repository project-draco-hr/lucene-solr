{
  initCache();
  Directory indexDir=newDirectory();
  Directory taxoDir=newDirectory();
  IndexWriter indexWriter=new IndexWriter(indexDir,newIndexWriterConfig(TEST_VERSION_CURRENT,null));
  TaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);
  FacetIndexingParams iParams=new FacetIndexingParams(){
    @Override public int getPartitionSize(){
      return partitionSize;
    }
    @Override public CategoryListParams getCategoryListParams(    CategoryPath category){
      return new CategoryListParams(){
        @Override public OrdinalPolicy getOrdinalPolicy(        String dimension){
          return OrdinalPolicy.ALL_PARENTS;
        }
      }
;
    }
  }
;
  int[] expectedCounts=new int[]{0,3,1,3,1,1,1,1,1,2,1,1,1,1};
  String[] categories=new String[]{"a/b","c/d","a/e","a/d","c/g","c/z","b/a","1/2","b/c"};
  FacetFields facetFields=new FacetFields(taxoWriter,iParams);
  for (  String cat : categories) {
    Document doc=new Document();
    facetFields.addFields(doc,Collections.singletonList(new CategoryPath(cat,'/')));
    indexWriter.addDocument(doc);
  }
  IOUtils.close(indexWriter,taxoWriter);
  DirectoryReader indexReader=DirectoryReader.open(indexDir);
  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);
  int[] intArray=new int[iParams.getPartitionSize()];
  TotalFacetCountsCache tfcc=TotalFacetCountsCache.getSingleton();
  File tmpFile=_TestUtil.createTempFile("test","tmp",TEMP_DIR);
  tfcc.store(tmpFile,indexReader,taxoReader,iParams);
  tfcc.clear();
  tfcc.load(tmpFile,indexReader,taxoReader,iParams);
  TotalFacetCounts totalCounts=tfcc.getTotalCounts(indexReader,taxoReader,iParams);
  int partition=0;
  for (int i=0; i < expectedCounts.length; i+=partitionSize) {
    totalCounts.fillTotalCountsForPartition(intArray,partition);
    int[] partitionExpectedCounts=new int[partitionSize];
    int nToCopy=Math.min(partitionSize,expectedCounts.length - i);
    System.arraycopy(expectedCounts,i,partitionExpectedCounts,0,nToCopy);
    assertTrue("Wrong counts! for partition " + partition + "\nExpected:\n"+ Arrays.toString(partitionExpectedCounts)+ "\nActual:\n"+ Arrays.toString(intArray),Arrays.equals(partitionExpectedCounts,intArray));
    ++partition;
  }
  IOUtils.close(indexReader,taxoReader);
  IOUtils.close(indexDir,taxoDir);
  tmpFile.delete();
}
