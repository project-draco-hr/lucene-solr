{
  LongRange[] ranges=(LongRange[])this.ranges;
  LongRangeCounter counter=new LongRangeCounter(ranges);
  int missingCount=0;
  for (  MatchingDocs hits : matchingDocs) {
    FunctionValues fv=valueSource.getValues(Collections.emptyMap(),hits.context);
    totCount+=hits.totalHits;
    Bits bits;
    if (fastMatchFilter != null) {
      DocIdSet dis=fastMatchFilter.getDocIdSet(hits.context,null);
      if (dis == null) {
        continue;
      }
      bits=dis.bits();
      if (bits == null) {
        throw new IllegalArgumentException("fastMatchFilter does not implement DocIdSet.bits");
      }
    }
 else {
      bits=null;
    }
    DocIdSetIterator docs=hits.bits.iterator();
    int doc;
    while ((doc=docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      if (bits != null && bits.get(doc) == false) {
        doc++;
        continue;
      }
      if (fv.exists(doc)) {
        counter.add(fv.longVal(doc));
      }
 else {
        missingCount++;
      }
    }
  }
  int x=counter.fillCounts(counts);
  missingCount+=x;
  totCount-=missingCount;
}
