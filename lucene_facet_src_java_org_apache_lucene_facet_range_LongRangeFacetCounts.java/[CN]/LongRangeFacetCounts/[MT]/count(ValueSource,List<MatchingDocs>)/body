{
  LongRange[] ranges=(LongRange[])this.ranges;
  LongRangeCounter counter=new LongRangeCounter(ranges);
  int missingCount=0;
  for (  MatchingDocs hits : matchingDocs) {
    FunctionValues fv=valueSource.getValues(Collections.emptyMap(),hits.context);
    totCount+=hits.totalHits;
    final DocIdSetIterator fastMatchDocs;
    if (fastMatchQuery != null) {
      final IndexReaderContext topLevelContext=ReaderUtil.getTopLevelContext(hits.context);
      final IndexSearcher searcher=new IndexSearcher(topLevelContext);
      searcher.setQueryCache(null);
      final Weight fastMatchWeight=searcher.createNormalizedWeight(fastMatchQuery,false);
      fastMatchDocs=fastMatchWeight.scorer(hits.context);
      if (fastMatchDocs == null) {
        continue;
      }
    }
 else {
      fastMatchDocs=null;
    }
    DocIdSetIterator docs=hits.bits.iterator();
    for (int doc=docs.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; ) {
      if (fastMatchDocs != null) {
        int fastMatchDoc=fastMatchDocs.docID();
        if (fastMatchDoc < doc) {
          fastMatchDoc=fastMatchDocs.advance(doc);
        }
        if (doc != fastMatchDoc) {
          doc=docs.advance(fastMatchDoc);
          continue;
        }
      }
      if (fv.exists(doc)) {
        counter.add(fv.longVal(doc));
      }
 else {
        missingCount++;
      }
      doc=docs.nextDoc();
    }
  }
  int x=counter.fillCounts(counts);
  missingCount+=x;
  totCount-=missingCount;
}
