{
  final long majorBitPos=(long)index * bitsPerValue;
  final int elementPos=(int)(majorBitPos >>> BLOCK_BITS);
  final int bitPos=(int)(majorBitPos & MOD_MASK);
  final long result;
  try {
    in.seek(startPointer + (elementPos << 3));
    final long l1=in.readLong();
    final int bits1=64 - bitPos;
    if (bits1 >= bitsPerValue) {
      result=l1 >> (bits1 - bitsPerValue) & masks[bitsPerValue - 1];
    }
 else {
      final int bits2=bitsPerValue - bits1;
      final long result1=(l1 & masks[bits1 - 1]) << bits2;
      final long l2=in.readLong();
      final long result2=l2 >> (64 - bits2) & masks[bits2 - 1];
      result=result1 | result2;
    }
    return result;
  }
 catch (  IOException ioe) {
    throw new IllegalStateException("failed",ioe);
  }
}
