{
  final Directory dir=newDirectory();
  IndexWriterConfig conf=newIndexWriterConfig(new MockAnalyzer(random()));
  final IndexWriter writer=new IndexWriter(dir,conf);
  final int numFields=TestUtil.nextInt(random(),2,4);
  final int numThreads=TestUtil.nextInt(random(),3,6);
  final int numDocs=atLeast(2000);
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    doc.add(new StringField("id","doc" + i,Store.NO));
    double group=random().nextDouble();
    String g;
    if (group < 0.1)     g="g0";
 else     if (group < 0.5)     g="g1";
 else     if (group < 0.8)     g="g2";
 else     g="g3";
    doc.add(new StringField("updKey",g,Store.NO));
    for (int j=0; j < numFields; j++) {
      long value=random().nextInt();
      doc.add(new BinaryDocValuesField("f" + j,TestBinaryDocValuesUpdates.toBytes(value)));
      doc.add(new NumericDocValuesField("cf" + j,value * 2));
    }
    writer.addDocument(doc);
  }
  final CountDownLatch done=new CountDownLatch(numThreads);
  final AtomicInteger numUpdates=new AtomicInteger(atLeast(100));
  Thread[] threads=new Thread[numThreads];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread("UpdateThread-" + i){
      @Override public void run(){
        DirectoryReader reader=null;
        boolean success=false;
        try {
          Random random=random();
          while (numUpdates.getAndDecrement() > 0) {
            double group=random.nextDouble();
            Term t;
            if (group < 0.1)             t=new Term("updKey","g0");
 else             if (group < 0.5)             t=new Term("updKey","g1");
 else             if (group < 0.8)             t=new Term("updKey","g2");
 else             t=new Term("updKey","g3");
            int field=random().nextInt(numFields);
            final String f="f" + field;
            final String cf="cf" + field;
            long updValue=random.nextInt();
            writer.updateDocValues(t,new BinaryDocValuesField(f,TestBinaryDocValuesUpdates.toBytes(updValue)),new NumericDocValuesField(cf,updValue * 2));
            if (random.nextDouble() < 0.2) {
              int doc=random.nextInt(numDocs);
              writer.deleteDocuments(new Term("id","doc" + doc));
            }
            if (random.nextDouble() < 0.05) {
              writer.commit();
            }
            if (random.nextDouble() < 0.1) {
              if (reader == null) {
                reader=DirectoryReader.open(writer);
              }
 else {
                DirectoryReader r2=DirectoryReader.openIfChanged(reader,writer);
                if (r2 != null) {
                  reader.close();
                  reader=r2;
                }
              }
            }
          }
          success=true;
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
 finally {
          if (reader != null) {
            try {
              reader.close();
            }
 catch (            IOException e) {
              if (success) {
                throw new RuntimeException(e);
              }
            }
          }
          done.countDown();
        }
      }
    }
;
  }
  for (  Thread t : threads)   t.start();
  done.await();
  writer.close();
  DirectoryReader reader=DirectoryReader.open(dir);
  BytesRef scratch=new BytesRef();
  for (  LeafReaderContext context : reader.leaves()) {
    LeafReader r=context.reader();
    for (int i=0; i < numFields; i++) {
      BinaryDocValues bdv=r.getBinaryDocValues("f" + i);
      NumericDocValues control=r.getNumericDocValues("cf" + i);
      Bits docsWithBdv=r.getDocsWithField("f" + i);
      Bits docsWithControl=r.getDocsWithField("cf" + i);
      Bits liveDocs=r.getLiveDocs();
      for (int j=0; j < r.maxDoc(); j++) {
        if (liveDocs == null || liveDocs.get(j)) {
          assertTrue(docsWithBdv.get(j));
          assertTrue(docsWithControl.get(j));
          long ctrlValue=control.get(j);
          long bdvValue=TestBinaryDocValuesUpdates.getValue(bdv,j) * 2;
          assertEquals(ctrlValue,bdvValue);
        }
      }
    }
  }
  reader.close();
  dir.close();
}
