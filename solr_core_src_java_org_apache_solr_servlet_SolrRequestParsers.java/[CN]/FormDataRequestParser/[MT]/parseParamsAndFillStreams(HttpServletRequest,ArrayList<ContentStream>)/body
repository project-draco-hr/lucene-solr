{
  if (!isFormData(req)) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Not application/x-www-form-urlencoded content: " + req.getContentType());
  }
  String charset=ContentStreamBase.getCharsetFromContentType(req.getContentType());
  if (charset == null)   charset="UTF-8";
  final Map<String,String[]> map=new HashMap<String,String[]>();
  final String qs=req.getQueryString();
  if (qs != null) {
    SolrRequestParsers.parseQueryString(qs,"UTF-8",map);
  }
  final long totalLength=req.getContentLength();
  final long maxLength=((long)uploadLimitKB) * 1024L;
  if (totalLength > maxLength) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"application/x-www-form-urlencoded content length (" + totalLength + " bytes) exceeds upload limit of "+ uploadLimitKB+ " KB");
  }
  final InputStream in;
  try {
    in=req.getInputStream();
  }
 catch (  IllegalStateException ise) {
    throw (SolrException)getParameterIncompatibilityException().initCause(ise);
  }
  try {
    final String data=IOUtils.toString(new BoundedInputStream(in,maxLength),charset);
    if (in.read() != -1) {
      while (IOUtils.skip(in,1024L) > 0)       ;
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"application/x-www-form-urlencoded content exceeds upload limit of " + uploadLimitKB + " KB");
    }
    if (data.length() == 0 && totalLength > 0L) {
      throw getParameterIncompatibilityException();
    }
    SolrRequestParsers.parseQueryString(data,charset,map);
  }
  finally {
    IOUtils.closeQuietly(in);
  }
  return new MultiMapSolrParams(map);
}
