{
  int numDocs=atLeast(10000);
  int numBytesPerDim=TestUtil.nextInt(random(),2,30);
  int numDims=TestUtil.nextInt(random(),1,5);
  byte[][][] docValues=new byte[numDocs][][];
  for (int docID=0; docID < numDocs; docID++) {
    byte[][] values=new byte[numDims][];
    for (int dim=0; dim < numDims; dim++) {
      values[dim]=new byte[numBytesPerDim];
      random().nextBytes(values[dim]);
    }
    docValues[docID]=values;
  }
  double maxMBHeap=0.05;
  boolean done=false;
  while (done == false) {
    MockDirectoryWrapper dir=newMockFSDirectory(createTempDir());
    try {
      dir.setRandomIOExceptionRate(0.05);
      dir.setRandomIOExceptionRateOnOpen(0.05);
      verify(dir,docValues,null,numDims,numBytesPerDim,50,maxMBHeap);
    }
 catch (    IllegalArgumentException iae) {
      assertTrue(iae.getMessage().contains("either increase maxMBSortInHeap or decrease maxPointsInLeafNode"));
      maxMBHeap*=1.25;
    }
catch (    IOException ioe) {
      if (ioe.getMessage().contains("a random IOException")) {
        done=true;
      }
 else {
        throw ioe;
      }
    }
    String[] files=dir.listAll();
    assertTrue("files=" + Arrays.toString(files),files.length == 0 || Arrays.equals(files,new String[]{"extra0"}));
    dir.close();
  }
}
