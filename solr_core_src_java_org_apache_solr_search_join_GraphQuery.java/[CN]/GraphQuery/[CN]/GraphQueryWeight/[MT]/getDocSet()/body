{
  int capacity=fromSearcher.getRawReader().maxDoc();
  FixedBitSet resultBits=new FixedBitSet(capacity);
  BitDocSet fromSet=null;
  FixedBitSet rootBits=null;
  Query frontierQuery=q;
  DocSet leafNodes=resolveLeafNodes(toField);
  do {
    currentDepth++;
    if (maxDepth != -1 && currentDepth >= maxDepth) {
      fromSet=fromSearcher.getDocSetBits(frontierQuery);
      frontierSize=0;
    }
 else {
      GraphTermsCollector graphResultCollector=new GraphTermsCollector(toField,capacity,resultBits,leafNodes);
      fromSearcher.search(frontierQuery,graphResultCollector);
      fromSet=graphResultCollector.getDocSet();
      BytesRefHash collectorTerms=graphResultCollector.getCollectorTerms();
      frontierSize=collectorTerms.size();
      FrontierQuery fq=buildFrontierQuery(collectorTerms,frontierSize);
      if (fq == null) {
        frontierSize=0;
      }
 else {
        frontierQuery=fq.getQuery();
        frontierSize=fq.getFrontierSize();
      }
    }
    if (currentDepth == 0 && !returnRoot) {
      rootBits=fromSet.getBits();
    }
    resultBits.or(fromSet.getBits());
    if ((maxDepth != -1 && currentDepth >= maxDepth)) {
      break;
    }
  }
 while (frontierSize > 0);
  if (!returnRoot) {
    resultBits.andNot(rootBits);
  }
  BitDocSet resultSet=new BitDocSet(resultBits);
  if (onlyLeafNodes) {
    return resultSet.intersection(leafNodes);
  }
 else {
    return resultSet;
  }
}
