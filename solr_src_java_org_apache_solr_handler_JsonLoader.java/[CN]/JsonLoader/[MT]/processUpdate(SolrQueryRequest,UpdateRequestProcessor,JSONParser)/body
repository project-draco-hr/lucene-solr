{
  int ev=parser.nextEvent();
  while (ev != JSONParser.EOF) {
switch (ev) {
case JSONParser.STRING:
      if (parser.wasKey()) {
        String v=parser.getString();
        if (v.equals(XmlUpdateRequestHandler.ADD)) {
          processor.processAdd(parseAdd(req,parser));
        }
 else         if (v.equals(XmlUpdateRequestHandler.COMMIT)) {
          CommitUpdateCommand cmd=new CommitUpdateCommand(req,false);
          cmd.waitFlush=cmd.waitSearcher=true;
          parseCommitOptions(parser,cmd);
          processor.processCommit(cmd);
        }
 else         if (v.equals(XmlUpdateRequestHandler.OPTIMIZE)) {
          CommitUpdateCommand cmd=new CommitUpdateCommand(req,true);
          cmd.waitFlush=cmd.waitSearcher=true;
          parseCommitOptions(parser,cmd);
          processor.processCommit(cmd);
        }
 else         if (v.equals(XmlUpdateRequestHandler.DELETE)) {
          processor.processDelete(parseDelete(req,parser));
        }
 else         if (v.equals(XmlUpdateRequestHandler.ROLLBACK)) {
          processor.processRollback(parseRollback(req,parser));
        }
 else {
          throw new IOException("Unknown command: " + v + " ["+ parser.getPosition()+ "]");
        }
        break;
      }
case JSONParser.LONG:
case JSONParser.NUMBER:
case JSONParser.BIGNUMBER:
case JSONParser.BOOLEAN:
    log.info("can't have a value here! " + JSONParser.getEventString(ev) + " "+ parser.getPosition());
case JSONParser.OBJECT_START:
case JSONParser.OBJECT_END:
case JSONParser.ARRAY_START:
case JSONParser.ARRAY_END:
  break;
default :
System.out.println("UNKNOWN_EVENT_ID:" + ev);
break;
}
ev=parser.nextEvent();
}
}
