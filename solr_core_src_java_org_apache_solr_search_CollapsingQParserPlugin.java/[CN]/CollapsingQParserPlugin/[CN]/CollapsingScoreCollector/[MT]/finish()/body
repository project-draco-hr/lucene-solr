{
  if (contexts.length == 0) {
    return;
  }
  if (nullScore > 0) {
    this.collapsedSet.set(nullDoc);
  }
  if (this.boostOrds != null) {
    for (int i=0; i < this.boostOrds.length; i++) {
      ords[boostOrds[i]]=-1;
    }
  }
  for (int i=0; i < ords.length; i++) {
    int doc=ords[i];
    if (doc > -1) {
      collapsedSet.set(doc);
    }
  }
  int currentContext=0;
  int currentDocBase=0;
  int nextDocBase=currentContext + 1 < contexts.length ? contexts[currentContext + 1].docBase : maxDoc;
  leafDelegate=delegate.getLeafCollector(contexts[currentContext]);
  DummyScorer dummy=new DummyScorer();
  leafDelegate.setScorer(dummy);
  DocIdSetIterator it=collapsedSet.iterator();
  int docId=-1;
  int nullScoreIndex=0;
  while ((docId=it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
    int ord=values.getOrd(docId);
    if (ord > -1) {
      dummy.score=scores[ord];
    }
 else     if (this.boostDocs != null && boostDocs.contains(docId)) {
      dummy.score=0F;
    }
 else     if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {
      dummy.score=nullScore;
    }
 else     if (nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {
      dummy.score=nullScores.get(nullScoreIndex++);
    }
    while (docId >= nextDocBase) {
      currentContext++;
      currentDocBase=contexts[currentContext].docBase;
      nextDocBase=currentContext + 1 < contexts.length ? contexts[currentContext + 1].docBase : maxDoc;
      leafDelegate=delegate.getLeafCollector(contexts[currentContext]);
      leafDelegate.setScorer(dummy);
    }
    int contextDoc=docId - currentDocBase;
    dummy.docId=contextDoc;
    leafDelegate.collect(contextDoc);
  }
  if (delegate instanceof DelegatingCollector) {
    ((DelegatingCollector)delegate).finish();
  }
}
