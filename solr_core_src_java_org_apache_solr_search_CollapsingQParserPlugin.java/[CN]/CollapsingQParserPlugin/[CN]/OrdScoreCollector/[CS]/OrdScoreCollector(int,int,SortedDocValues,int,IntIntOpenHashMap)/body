{
  this.maxDoc=maxDoc;
  this.contexts=new LeafReaderContext[segments];
  this.collapsedSet=new FixedBitSet(maxDoc);
  this.collapseValues=collapseValues;
  int valueCount=collapseValues.getValueCount();
  if (collapseValues instanceof MultiDocValues.MultiSortedDocValues) {
    this.multiSortedDocValues=(MultiDocValues.MultiSortedDocValues)collapseValues;
    this.ordinalMap=multiSortedDocValues.mapping;
  }
  this.ords=new int[valueCount];
  Arrays.fill(this.ords,-1);
  this.scores=new float[valueCount];
  Arrays.fill(this.scores,-Float.MAX_VALUE);
  this.nullPolicy=nullPolicy;
  if (nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {
    nullScores=new FloatArrayList();
  }
  if (boostDocsMap != null) {
    this.boosts=true;
    this.boostOrds=new IntArrayList();
    this.boostDocs=new IntArrayList();
    int[] bd=new int[boostDocsMap.size()];
    Iterator<IntIntCursor> it=boostDocsMap.iterator();
    int index=-1;
    while (it.hasNext()) {
      IntIntCursor cursor=it.next();
      bd[++index]=cursor.key;
    }
    Arrays.sort(bd);
    this.mergeBoost=new MergeBoost(bd);
  }
}
