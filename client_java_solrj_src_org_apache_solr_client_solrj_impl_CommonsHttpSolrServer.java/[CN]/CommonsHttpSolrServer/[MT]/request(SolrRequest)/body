{
  HttpMethod method=null;
  SolrParams params=request.getParams();
  Collection<ContentStream> streams=request.getContentStreams();
  String path=request.getPath();
  if (path == null || !path.startsWith("/")) {
    path="/select";
  }
  if (params == null) {
    params=new ModifiableSolrParams();
  }
  if (_invariantParams != null) {
    params=new DefaultSolrParams(_invariantParams,params);
  }
  int tries=_maxRetries + 1;
  try {
    while (tries-- > 0) {
      try {
        if (SolrRequest.METHOD.GET == request.getMethod()) {
          if (streams != null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"GET can't send streams!");
          }
          method=new GetMethod(_baseURL + path + ClientUtils.toQueryString(params,false));
        }
 else         if (SolrRequest.METHOD.POST == request.getMethod()) {
          String url=_baseURL + path;
          boolean isMultipart=(streams != null && streams.size() > 1);
          if (streams == null || isMultipart) {
            PostMethod post=new PostMethod(url);
            Iterator<String> iter=params.getParameterNamesIterator();
            while (iter.hasNext()) {
              String p=iter.next();
              String[] vals=params.getParams(p);
              if (vals != null && vals.length > 0) {
                for (                String v : vals) {
                  post.addParameter(p,(v == null) ? null : v);
                }
              }
 else {
                post.addParameter(p,null);
              }
            }
            post.getParams().setContentCharset("UTF-8");
            if (isMultipart) {
              int i=0;
              Part[] parts=new Part[streams.size()];
              for (              ContentStream content : streams) {
                final ContentStream c=content;
                String charSet=null;
                String transferEncoding=null;
                parts[i++]=new PartBase(c.getName(),c.getContentType(),charSet,transferEncoding){
                  @Override protected long lengthOfData() throws IOException {
                    return c.getSize();
                  }
                  @Override protected void sendData(                  OutputStream out) throws IOException {
                    IOUtils.copy(c.getReader(),out);
                  }
                }
;
              }
              post.setRequestEntity(new MultipartRequestEntity(parts,post.getParams()));
              method=post;
            }
            method=post;
          }
 else {
            String pstr=ClientUtils.toQueryString(params,false);
            PostMethod post=new PostMethod(url + pstr);
            for (            ContentStream content : streams) {
              post.setRequestEntity(new InputStreamRequestEntity(content.getStream(),content.getContentType()));
              break;
            }
            method=post;
          }
        }
 else {
          throw new SolrServerException("Unsupported method: " + request.getMethod());
        }
      }
 catch (      NoHttpResponseException r) {
        method.releaseConnection();
        method=null;
        if ((tries < 1)) {
          throw r;
        }
      }
    }
  }
 catch (  IOException ex) {
    throw new SolrServerException("error reading streams",ex);
  }
  method.setFollowRedirects(_followRedirects);
  method.addRequestHeader("User-Agent",AGENT);
  if (_allowCompression) {
    method.setRequestHeader(new Header("Accept-Encoding","gzip,deflate"));
  }
  try {
    int statusCode=_httpClient.executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      StringBuilder msg=new StringBuilder();
      msg.append(method.getStatusLine().getReasonPhrase());
      msg.append("\n\n");
      msg.append(method.getStatusText());
      msg.append("\n\n");
      msg.append("request: " + method.getURI());
      throw new SolrException(statusCode,java.net.URLDecoder.decode(msg.toString(),"UTF-8"));
    }
    String charset="UTF-8";
    if (method instanceof HttpMethodBase) {
      charset=((HttpMethodBase)method).getResponseCharSet();
    }
    InputStream respBody=method.getResponseBodyAsStream();
    if (_allowCompression) {
      Header contentEncodingHeader=method.getResponseHeader("Content-Encoding");
      if (contentEncodingHeader != null) {
        String contentEncoding=contentEncodingHeader.getValue();
        if (contentEncoding.contains("gzip")) {
          respBody=new GZIPInputStream(respBody);
        }
 else         if (contentEncoding.contains("deflate")) {
          respBody=new InflaterInputStream(respBody);
        }
      }
 else {
        Header contentTypeHeader=method.getResponseHeader("Content-Type");
        if (contentTypeHeader != null) {
          String contentType=contentTypeHeader.getValue();
          if (contentType != null) {
            if (contentType.startsWith("application/x-gzip-compressed")) {
              respBody=new GZIPInputStream(respBody);
            }
 else             if (contentType.startsWith("application/x-deflate")) {
              respBody=new InflaterInputStream(respBody);
            }
          }
        }
      }
    }
    return _processor.processResponse(respBody,charset);
  }
 catch (  HttpException e) {
    throw new SolrServerException(e);
  }
catch (  IOException e) {
    throw new SolrServerException(e);
  }
 finally {
    method.releaseConnection();
  }
}
