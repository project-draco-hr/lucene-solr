{
  HttpMethod method=null;
  SolrParams params=request.getParams();
  Collection<ContentStream> streams=request.getContentStreams();
  String path=request.getPath();
  if (path == null || !path.startsWith("/")) {
    path="/select";
  }
  if (request.getCore() != null) {
    path="/@" + request.getCore() + path;
  }
  if (params == null) {
    params=new ModifiableSolrParams();
  }
  if (_invariantParams != null) {
    params=new DefaultSolrParams(_invariantParams,params);
  }
  try {
    if (SolrRequest.METHOD.GET == request.getMethod()) {
      if (streams != null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"GET can't send streams!");
      }
      method=new GetMethod(_baseURL + path + ClientUtils.toQueryString(params,false));
    }
 else     if (SolrRequest.METHOD.POST == request.getMethod()) {
      String url=_baseURL + path;
      boolean isMultipart=(streams != null && streams.size() > 1);
      if (streams == null || isMultipart) {
        PostMethod post=new PostMethod(url);
        Iterator<String> iter=params.getParameterNamesIterator();
        while (iter.hasNext()) {
          String p=iter.next();
          String[] vals=params.getParams(p);
          if (vals != null && vals.length > 0) {
            for (            String v : vals) {
              post.addParameter(p,(v == null) ? null : v);
            }
          }
 else {
            post.addParameter(p,null);
          }
        }
        post.getParams().setContentCharset("UTF-8");
        if (isMultipart) {
          int i=0;
          Part[] parts=new Part[streams.size()];
          for (          ContentStream content : streams) {
            final ContentStream c=content;
            String charSet=null;
            String transferEncoding=null;
            parts[i++]=new PartBase(c.getName(),c.getContentType(),charSet,transferEncoding){
              @Override protected long lengthOfData() throws IOException {
                return c.getSize();
              }
              @Override protected void sendData(              OutputStream out) throws IOException {
                IOUtils.copy(c.getReader(),out);
              }
            }
;
          }
          post.setRequestEntity(new MultipartRequestEntity(parts,post.getParams()));
          method=post;
        }
        method=post;
      }
 else {
        String pstr=ClientUtils.toQueryString(params,false);
        PostMethod post=new PostMethod(url + pstr);
        for (        ContentStream content : streams) {
          post.setRequestEntity(new InputStreamRequestEntity(content.getStream(),content.getContentType()));
          break;
        }
        method=post;
      }
    }
 else {
      throw new SolrServerException("Unsupported method: " + request.getMethod());
    }
  }
 catch (  IOException ex) {
    throw new SolrServerException("error reading streams",ex);
  }
  method.addRequestHeader("User-Agent",AGENT);
  try {
    int statusCode=getHttpConnection().executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      StringBuilder msg=new StringBuilder();
      msg.append(method.getStatusLine().getReasonPhrase());
      msg.append("\n\n");
      msg.append(method.getStatusText());
      msg.append("\n\n");
      msg.append("request: " + method.getURI());
      throw new SolrException(statusCode,java.net.URLDecoder.decode(msg.toString(),"UTF-8"));
    }
    String charset="UTF-8";
    if (method instanceof HttpMethodBase) {
      charset=((HttpMethodBase)method).getResponseCharSet();
    }
    Reader reader=new InputStreamReader(method.getResponseBodyAsStream(),charset);
    return _processor.processResponse(reader);
  }
 catch (  HttpException e) {
    throw new SolrServerException(e);
  }
catch (  IOException e) {
    throw new SolrServerException(e);
  }
 finally {
    method.releaseConnection();
  }
}
