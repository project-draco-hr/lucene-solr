{
  StringBuilder sortSpec=new StringBuilder();
  int nSorts=random.nextInt(4);
  List<Comparator<Doc>> comparators=new ArrayList<Comparator<Doc>>();
  for (int i=0; i < nSorts; i++) {
    if (i > 0)     sortSpec.append(',');
    int which=random.nextInt(fieldTypes.size() + 2);
    boolean asc=random.nextBoolean();
    if (which == fieldTypes.size()) {
      sortSpec.append("score").append(asc ? " asc" : " desc");
      comparators.add(createComparator("score",asc,false,false,false));
    }
 else     if (which == fieldTypes.size() + 1) {
      sortSpec.append("_docid_").append(asc ? " asc" : " desc");
      comparators.add(createComparator("_docid_",asc,false,false,false));
    }
 else {
      String field=fieldTypes.get(which).fname;
      sortSpec.append(field).append(asc ? " asc" : " desc");
      SchemaField sf=schema.getField(field);
      comparators.add(createComparator(field,asc,sf.sortMissingLast(),sf.sortMissingFirst(),!(sf.sortMissingLast() || sf.sortMissingFirst())));
    }
  }
  out[0]=sortSpec.length() > 0 ? sortSpec.toString() : null;
  if (comparators.size() == 0) {
    comparators.add(createComparator("score",false,false,false,false));
  }
  return createComparator(comparators);
}
