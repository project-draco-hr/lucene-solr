{
  final int ITER=100 * _TestUtil.getRandomMultiplier();
  List<String> allFields=new ArrayList<String>();
  Fields fields=MultiFields.getFields(r);
  if (fields == null) {
    return;
  }
  FieldsEnum fieldsEnum=fields.iterator();
  while (true) {
    String f=fieldsEnum.next();
    if (f == null) {
      break;
    }
    allFields.add(f);
  }
  final int fieldCount=allFields.size();
  if (fieldCount == 0) {
    return;
  }
  final TermPositions termPositions=r.termPositions();
  DocsEnum docs=null;
  DocsAndPositionsEnum postings=null;
  for (int i=0; i < ITER; i++) {
    String f=allFields.get(rand.nextInt(fieldCount));
    String text=getRandomText(rand,1,3,false);
    final TermsEnum termsEnum=MultiFields.getFields(r).terms(f).iterator();
    final TermsEnum.SeekStatus seekStatus=termsEnum.seek(new BytesRef(text));
    Term t=new Term(f,text);
    final TermEnum termEnum=r.terms(t);
    if (seekStatus == TermsEnum.SeekStatus.END) {
      assertTrue(termEnum.term() == null || termEnum.term().field() != f);
      continue;
    }
 else     if (seekStatus == TermsEnum.SeekStatus.FOUND) {
      assertEquals(t,termEnum.term());
    }
 else {
      assertEquals(termsEnum.term().utf8ToString(),termEnum.term().text());
    }
    assertEquals(termsEnum.docFreq(),termEnum.docFreq());
    docs=termsEnum.docs(MultiFields.getDeletedDocs(r),docs);
    postings=termsEnum.docsAndPositions(MultiFields.getDeletedDocs(r),postings);
    termPositions.seek(termEnum.term());
    int doc=0;
    final DocsEnum docsEnum;
    if (postings != null) {
      docsEnum=postings;
    }
 else {
      docsEnum=docs;
    }
    for (int j=0; j < 20; j++) {
      final int inc=nextInt(rand,1,Math.max(10,r.maxDoc() / 15));
      int newDoc1=docsEnum.advance(doc + inc);
      boolean found=termPositions.skipTo(doc + inc);
      int newDoc2;
      if (newDoc1 == DocsEnum.NO_MORE_DOCS) {
        assertFalse(found);
        break;
      }
 else {
        assertTrue(found);
        newDoc2=termPositions.doc();
      }
      assertEquals(newDoc1,newDoc2);
      assertEquals(docsEnum.freq(),termPositions.freq());
      doc=newDoc1;
      if (postings == null) {
        assertEquals(1,termPositions.freq());
        assertFalse(termPositions.isPayloadAvailable());
      }
 else {
        for (int k=0; k < docsEnum.freq(); k++) {
          int pos1=postings.nextPosition();
          int pos2=termPositions.nextPosition();
          assertEquals(pos1,pos2);
          assertEquals(postings.hasPayload(),termPositions.isPayloadAvailable());
          if (postings.hasPayload()) {
            assertEquals(postings.getPayloadLength(),termPositions.getPayloadLength());
            BytesRef b1=postings.getPayload();
            byte[] b2=termPositions.getPayload(null,0);
            assertNotNull(b1);
            assertNotNull(b2);
            assertTrue(equals(b1,b2));
          }
        }
      }
    }
  }
}
