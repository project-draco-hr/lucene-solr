{
  super(directory,infos,closeDirectory,readOnly);
  Map segmentReaders=new HashMap();
  if (oldReaders != null) {
    for (int i=0; i < oldReaders.length; i++) {
      segmentReaders.put(oldReaders[i].getSegmentName(),new Integer(i));
    }
  }
  SegmentReader[] newReaders=new SegmentReader[infos.size()];
  boolean[] readerShared=new boolean[infos.size()];
  for (int i=infos.size() - 1; i >= 0; i--) {
    Integer oldReaderIndex=(Integer)segmentReaders.get(infos.info(i).name);
    if (oldReaderIndex == null) {
      newReaders[i]=null;
    }
 else {
      newReaders[i]=oldReaders[oldReaderIndex.intValue()];
    }
    boolean success=false;
    try {
      SegmentReader newReader;
      if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {
        newReader=SegmentReader.get(readOnly,infos.info(i));
      }
 else {
        newReader=(SegmentReader)newReaders[i].reopenSegment(infos.info(i));
      }
      if (newReader == newReaders[i]) {
        readerShared[i]=true;
        newReader.incRef();
      }
 else {
        readerShared[i]=false;
        newReaders[i]=newReader;
      }
      success=true;
    }
  finally {
      if (!success) {
        for (i++; i < infos.size(); i++) {
          if (newReaders[i] != null) {
            try {
              if (!readerShared[i]) {
                newReaders[i].close();
              }
 else {
                newReaders[i].decRef();
              }
            }
 catch (            IOException ignore) {
            }
          }
        }
      }
    }
  }
  initialize(newReaders);
  if (oldNormsCache != null) {
    Iterator it=oldNormsCache.keySet().iterator();
    while (it.hasNext()) {
      String field=(String)it.next();
      if (!hasNorms(field)) {
        continue;
      }
      byte[] oldBytes=(byte[])oldNormsCache.get(field);
      byte[] bytes=new byte[maxDoc()];
      for (int i=0; i < subReaders.length; i++) {
        Integer oldReaderIndex=((Integer)segmentReaders.get(subReaders[i].getSegmentName()));
        if (oldReaderIndex != null && (oldReaders[oldReaderIndex.intValue()] == subReaders[i] || oldReaders[oldReaderIndex.intValue()].norms.get(field) == subReaders[i].norms.get(field))) {
          System.arraycopy(oldBytes,oldStarts[oldReaderIndex.intValue()],bytes,starts[i],starts[i + 1] - starts[i]);
        }
 else {
          subReaders[i].norms(field,bytes,starts[i]);
        }
      }
      normsCache.put(field,bytes);
    }
  }
}
