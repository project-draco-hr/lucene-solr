{
  waitForRecoveriesToFinish(false);
  indexr(id,"0","a_s","hello0","a_i","0","a_f","1","testnull_i",null);
  indexr(id,"2","a_s","hello0","a_i","2","a_f","2","testnull_i","2");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3","testnull_i",null);
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4","testnull_i","4");
  indexr(id,"1","a_s","hello0","a_i","1","a_f","5","testnull_i",null);
  indexr(id,"5","a_s","hello3","a_i","10","a_f","6","testnull_i","6");
  indexr(id,"6","a_s","hello4","a_i","11","a_f","7","testnull_i",null);
  indexr(id,"7","a_s","hello3","a_i","12","a_f","8","testnull_i","8");
  indexr(id,"8","a_s","hello3","a_i","13","a_f","9","testnull_i",null);
  indexr(id,"9","a_s","hello0","a_i","14","a_f","10","testnull_i","10");
  commit();
  String zkHost=zkServer.getZkAddress();
  Properties props=new Properties();
  try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props)){
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2")){
        assertTrue(rs.next());
        assertEquals(14,rs.getLong("a_i"));
        assertEquals(14,rs.getLong(2));
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(3));
        assertEquals(10,rs.getDouble("a_f"),0);
        assertEquals(10,rs.getDouble(4),0);
        assertTrue(rs.next());
        assertEquals(13,rs.getLong("a_i"));
        assertEquals(13,rs.getLong(2));
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(3));
        assertEquals(9,rs.getDouble("a_f"),0);
        assertEquals(9,rs.getDouble(4),0);
        assertFalse(rs.next());
      }
       try (ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2")){
        assertTrue(rs.next());
        assertEquals(0,rs.getLong("a_i"));
        assertEquals(0,rs.getLong(2));
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(3));
        assertEquals(1,rs.getDouble("a_f"),0);
        assertEquals(1,rs.getDouble(4),0);
        assertTrue(rs.next());
        assertEquals(1,rs.getLong("a_i"));
        assertEquals(1,rs.getLong(2));
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(3));
        assertEquals(5,rs.getDouble("a_f"),0);
        assertEquals(5,rs.getDouble(4),0);
        assertFalse(rs.next());
      }
     }
     try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2")){
        assertTrue(rs.next());
        assertEquals(14,rs.getLong("a_i"));
        assertEquals(14,rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(13,rs.getLong("a_i"));
        assertEquals(13,rs.getLong(2));
        assertFalse(rs.next());
      }
       stmt.setMaxRows(2);
      try (ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc")){
        assertTrue(rs.next());
        assertEquals(0,rs.getLong("a_i"));
        assertEquals(0,rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(1,rs.getLong("a_i"));
        assertEquals(1,rs.getLong(2));
        assertFalse(rs.next());
      }
       try (ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100")){
        int count=0;
        while (rs.next()) {
          ++count;
        }
        assertEquals(10,count);
      }
     }
   }
   props=new Properties();
  props.put("aggregationMode","facet");
  try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props)){
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s " + "order by sum(a_f) desc")){
        assertTrue(rs.next());
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(1));
        assertEquals(26,rs.getDouble("sum(a_f)"),0);
        assertEquals(26,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(1));
        assertEquals(18,rs.getDouble("sum(a_f)"),0);
        assertEquals(18,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello4",rs.getString("a_s"));
        assertEquals("hello4",rs.getString(1));
        assertEquals(11,rs.getDouble("sum(a_f)"),0);
        assertEquals(11,rs.getDouble(2),0);
        assertFalse(rs.next());
      }
     }
   }
   props=new Properties();
  props.put("aggregationMode","map_reduce");
  props.put("numWorkers","2");
  try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props)){
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s " + "order by sum(a_f) desc")){
        assertTrue(rs.next());
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(1));
        assertEquals(26,rs.getDouble("sum(a_f)"),0);
        assertEquals(26,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(1));
        assertEquals(18,rs.getDouble("sum(a_f)"),0);
        assertEquals(18,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello4",rs.getString("a_s"));
        assertEquals("hello4",rs.getString(1));
        assertEquals(11,rs.getDouble("sum(a_f)"),0);
        assertEquals(11,rs.getDouble(2),0);
        assertFalse(rs.next());
      }
     }
   }
   try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1&aggregationMode=map_reduce&numWorkers=2")){
    Properties p=((ConnectionImpl)con).getProperties();
    assert(p.getProperty("aggregationMode").equals("map_reduce"));
    assert(p.getProperty("numWorkers").equals("2"));
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s " + "order by sum(a_f) desc")){
        assertTrue(rs.next());
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(1));
        assertEquals(26,rs.getDouble("sum(a_f)"),0);
        assertEquals(26,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(1));
        assertEquals(18,rs.getDouble("sum(a_f)"),0);
        assertEquals(18,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello4",rs.getString("a_s"));
        assertEquals("hello4",rs.getString(1));
        assertEquals(11,rs.getDouble("sum(a_f)"),0);
        assertEquals(11,rs.getDouble(2),0);
        assertFalse(rs.next());
      }
     }
   }
   try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1&username=&password=&testKey1=testValue&testKey2")){
    Properties p=((ConnectionImpl)con).getProperties();
    assertEquals("",p.getProperty("username"));
    assertEquals("",p.getProperty("password"));
    assertEquals("testValue",p.getProperty("testKey1"));
    assertEquals("",p.getProperty("testKey2"));
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s " + "order by sum(a_f) desc")){
        assertTrue(rs.next());
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(1));
        assertEquals(26,rs.getDouble("sum(a_f)"),0);
        assertEquals(26,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(1));
        assertEquals(18,rs.getDouble("sum(a_f)"),0);
        assertEquals(18,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello4",rs.getString("a_s"));
        assertEquals("hello4",rs.getString(1));
        assertEquals(11,rs.getDouble("sum(a_f)"),0);
        assertEquals(11,rs.getDouble(2),0);
        assertFalse(rs.next());
      }
     }
   }
   Properties providedProperties=new Properties();
  providedProperties.put("collection","collection1");
  providedProperties.put("username","");
  providedProperties.put("password","");
  providedProperties.put("testKey1","testValue");
  providedProperties.put("testKey2","");
  try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost,providedProperties)){
    Properties p=((ConnectionImpl)con).getProperties();
    assert(p.getProperty("username").equals(""));
    assert(p.getProperty("password").equals(""));
    assert(p.getProperty("testKey1").equals("testValue"));
    assert(p.getProperty("testKey2").equals(""));
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s " + "order by sum(a_f) desc")){
        assertTrue(rs.next());
        assertEquals("hello3",rs.getString("a_s"));
        assertEquals("hello3",rs.getString(1));
        assertEquals(26,rs.getDouble("sum(a_f)"),0);
        assertEquals(26,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello0",rs.getString("a_s"));
        assertEquals("hello0",rs.getString(1));
        assertEquals(18,rs.getDouble("sum(a_f)"),0);
        assertEquals(18,rs.getDouble(2),0);
        assertTrue(rs.next());
        assertEquals("hello4",rs.getString("a_s"));
        assertEquals("hello4",rs.getString(1));
        assertEquals(11,rs.getDouble("sum(a_f)"),0);
        assertEquals(11,rs.getDouble(2),0);
        assertFalse(rs.next());
      }
     }
   }
   props=new Properties();
  props.put("aggregationMode","facet");
  try (Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props)){
    try (Statement stmt=con.createStatement()){
      try (ResultSet rs=stmt.executeQuery("select crap from collection1 group by a_s " + "order by sum(a_f) desc")){
      }
 catch (      Exception e) {
        String errorMessage=e.getMessage();
        assertTrue(errorMessage.contains("Group by queries must include atleast one aggregate function"));
      }
    }
   }
   testDriverMetadata();
}
