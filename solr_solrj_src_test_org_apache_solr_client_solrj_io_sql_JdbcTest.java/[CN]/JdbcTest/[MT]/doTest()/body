{
  waitForRecoveriesToFinish(false);
  indexr(id,"0","a_s","hello0","a_i","0","a_f","1","testnull_i",null);
  indexr(id,"2","a_s","hello0","a_i","2","a_f","2","testnull_i","2");
  indexr(id,"3","a_s","hello3","a_i","3","a_f","3","testnull_i",null);
  indexr(id,"4","a_s","hello4","a_i","4","a_f","4","testnull_i","4");
  indexr(id,"1","a_s","hello0","a_i","1","a_f","5","testnull_i",null);
  indexr(id,"5","a_s","hello3","a_i","10","a_f","6","testnull_i","6");
  indexr(id,"6","a_s","hello4","a_i","11","a_f","7","testnull_i",null);
  indexr(id,"7","a_s","hello3","a_i","12","a_f","8","testnull_i","8");
  indexr(id,"8","a_s","hello3","a_i","13","a_f","9","testnull_i",null);
  indexr(id,"9","a_s","hello0","a_i","14","a_f","10","testnull_i","10");
  commit();
  String zkHost=zkServer.getZkAddress();
  Properties props=new Properties();
  Connection con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props);
  Statement stmt=con.createStatement();
  ResultSet rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2");
  assertTrue(rs.getMetaData() != null);
  assert(rs.next());
  assert(rs.getLong("a_i") == 14);
  assert(rs.getLong(2) == 14);
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(3).equals("hello0"));
  assert(rs.getDouble("a_f") == 10);
  assert(rs.getDouble(4) == 10);
  assert(rs.next());
  assert(rs.getLong("a_i") == 13);
  assert(rs.getLong(2) == 13);
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(3).equals("hello3"));
  assert(rs.getDouble("a_f") == 9);
  assert(rs.getDouble(4) == 9);
  assert(!rs.next());
  stmt.close();
  rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2");
  assert(rs.next());
  assert(rs.getLong("a_i") == 0);
  assert(rs.getLong(2) == 0);
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(3).equals("hello0"));
  assert(rs.getDouble("a_f") == 1);
  assert(rs.getDouble(4) == 1);
  assert(rs.next());
  assert(rs.getLong("a_i") == 1);
  assert(rs.getLong(2) == 1);
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(3).equals("hello0"));
  assert(rs.getDouble("a_f") == 5);
  assert(rs.getDouble(4) == 5);
  assert(!rs.next());
  stmt.close();
  stmt=con.createStatement();
  rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2");
  assert(rs.next());
  assert(rs.getLong("a_i") == 14);
  assert(rs.getLong(2) == 14);
  assert(rs.next());
  assert(rs.getLong("a_i") == 13);
  assert(rs.getLong(2) == 13);
  stmt.close();
  rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2");
  assert(rs.next());
  assert(rs.getLong("a_i") == 0);
  assert(rs.getLong(2) == 0);
  assert(rs.next());
  assert(rs.getLong("a_i") == 1);
  assert(rs.getLong(2) == 1);
  assert(!rs.next());
  stmt.close();
  rs=stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100");
  int count=0;
  while (rs.next()) {
    ++count;
  }
  assert(count == 10);
  stmt.close();
  con.close();
  props=new Properties();
  props.put("aggregationMode","facet");
  con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props);
  stmt=con.createStatement();
  rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc");
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(1).equals("hello3"));
  assert(rs.getDouble("sum(a_f)") == 26);
  assert(rs.getDouble(2) == 26);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(1).equals("hello0"));
  assert(rs.getDouble("sum(a_f)") == 18);
  assert(rs.getDouble(2) == 18);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello4"));
  assert(rs.getString(1).equals("hello4"));
  assert(rs.getDouble("sum(a_f)") == 11);
  assert(rs.getDouble(2) == 11);
  stmt.close();
  con.close();
  props=new Properties();
  props.put("aggregationMode","map_reduce");
  props.put("numWorkers","2");
  con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1",props);
  stmt=con.createStatement();
  rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc");
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(1).equals("hello3"));
  assert(rs.getDouble("sum(a_f)") == 26);
  assert(rs.getDouble(2) == 26);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(1).equals("hello0"));
  assert(rs.getDouble("sum(a_f)") == 18);
  assert(rs.getDouble(2) == 18);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello4"));
  assert(rs.getString(1).equals("hello4"));
  assert(rs.getDouble("sum(a_f)") == 11);
  assert(rs.getDouble(2) == 11);
  stmt.close();
  con.close();
  con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1&aggregationMode=map_reduce&numWorkers=2");
  Properties p=((ConnectionImpl)con).getProperties();
  assert(p.getProperty("aggregationMode").equals("map_reduce"));
  assert(p.getProperty("numWorkers").equals("2"));
  stmt=con.createStatement();
  rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc");
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(1).equals("hello3"));
  assert(rs.getDouble("sum(a_f)") == 26);
  assert(rs.getDouble(2) == 26);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(1).equals("hello0"));
  assert(rs.getDouble("sum(a_f)") == 18);
  assert(rs.getDouble(2) == 18);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello4"));
  assert(rs.getString(1).equals("hello4"));
  assert(rs.getDouble("sum(a_f)") == 11);
  assert(rs.getDouble(2) == 11);
  stmt.close();
  con.close();
  con=DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1&username=&password=&testKey1=testValue&testKey2");
  p=((ConnectionImpl)con).getProperties();
  assert(p.getProperty("username").equals(""));
  assert(p.getProperty("password").equals(""));
  assert(p.getProperty("testKey1").equals("testValue"));
  assert(p.getProperty("testKey2").equals(""));
  stmt=con.createStatement();
  rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc");
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(1).equals("hello3"));
  assert(rs.getDouble("sum(a_f)") == 26);
  assert(rs.getDouble(2) == 26);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(1).equals("hello0"));
  assert(rs.getDouble("sum(a_f)") == 18);
  assert(rs.getDouble(2) == 18);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello4"));
  assert(rs.getString(1).equals("hello4"));
  assert(rs.getDouble("sum(a_f)") == 11);
  assert(rs.getDouble(2) == 11);
  stmt.close();
  con.close();
  Properties providedProperties=new Properties();
  providedProperties.put("collection","collection1");
  providedProperties.put("username","");
  providedProperties.put("password","");
  providedProperties.put("testKey1","testValue");
  providedProperties.put("testKey2","");
  con=DriverManager.getConnection("jdbc:solr://" + zkHost,providedProperties);
  p=((ConnectionImpl)con).getProperties();
  assert(p.getProperty("username").equals(""));
  assert(p.getProperty("password").equals(""));
  assert(p.getProperty("testKey1").equals("testValue"));
  assert(p.getProperty("testKey2").equals(""));
  stmt=con.createStatement();
  rs=stmt.executeQuery("select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc");
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello3"));
  assert(rs.getString(1).equals("hello3"));
  assert(rs.getDouble("sum(a_f)") == 26);
  assert(rs.getDouble(2) == 26);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello0"));
  assert(rs.getString(1).equals("hello0"));
  assert(rs.getDouble("sum(a_f)") == 18);
  assert(rs.getDouble(2) == 18);
  assert(rs.next());
  assert(rs.getString("a_s").equals("hello4"));
  assert(rs.getString(1).equals("hello4"));
  assert(rs.getDouble("sum(a_f)") == 11);
  assert(rs.getDouble(2) == 11);
  stmt.close();
  con.close();
  testDriverMetadata();
}
