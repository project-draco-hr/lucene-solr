{
  if (Codec.getDefault() instanceof RandomCodec) {
    final Set<String> avoidCodecs=new HashSet<>(((RandomCodec)Codec.getDefault()).avoidCodecs);
    avoidCodecs.add(new MockRandomPostingsFormat().getName());
    Codec.setDefault(new RandomCodec(random(),avoidCodecs));
  }
  Directory dir=newDirectory();
  IndexWriterConfig cfg=newIndexWriterConfig(new MockAnalyzer(random()));
  IndexWriter w=new IndexWriter(dir,cfg);
  final int numDocs=atLeast(10000);
  LeafReader reader1=null;
  for (int i=0; i < numDocs; ++i) {
    Document d=new Document();
    addRandomFields(d);
    w.addDocument(d);
    if (i == 100) {
      w.forceMerge(1);
      w.commit();
      reader1=getOnlySegmentReader(DirectoryReader.open(dir));
    }
  }
  w.forceMerge(1);
  w.commit();
  w.close();
  LeafReader reader2=getOnlySegmentReader(DirectoryReader.open(dir));
  for (  LeafReader reader : Arrays.asList(reader1,reader2)) {
    new SimpleMergedSegmentWarmer(InfoStream.NO_OUTPUT).warm(reader);
  }
  final long actualBytes=RamUsageTester.sizeOf(reader2,new Accumulator(reader2)) - RamUsageTester.sizeOf(reader1,new Accumulator(reader1));
  final long expectedBytes=((SegmentReader)reader2).ramBytesUsed() - ((SegmentReader)reader1).ramBytesUsed();
  final long absoluteError=actualBytes - expectedBytes;
  final double relativeError=(double)absoluteError / actualBytes;
  final String message="Actual RAM usage " + actualBytes + ", but got "+ expectedBytes+ ", "+ 100 * relativeError + "% error";
  assertTrue(message,Math.abs(relativeError) < 0.20d || Math.abs(absoluteError) < 1000);
  reader1.close();
  reader2.close();
  dir.close();
}
