{
  final int maxdoc=10;
  final DocIdSet innerSet=new DocIdSet(){
    @Override public DocIdSetIterator iterator(){
      return new DocIdSetIterator(){
        int docid=-1;
        @Override public int docID(){
          return docid;
        }
        @Override public int nextDoc(){
          docid++;
          return docid < maxdoc ? docid : (docid=NO_MORE_DOCS);
        }
        @Override public int advance(        int target){
          while (nextDoc() < target) {
          }
          return docid;
        }
        @Override public long cost(){
          return 1;
        }
      }
;
    }
  }
;
  DocIdSet filteredSet=new FilteredDocIdSet(innerSet){
    @Override protected boolean match(    int docid){
      return docid % 2 == 0;
    }
  }
;
  DocIdSetIterator iter=filteredSet.iterator();
  ArrayList<Integer> list=new ArrayList<Integer>();
  int doc=iter.advance(3);
  if (doc != DocIdSetIterator.NO_MORE_DOCS) {
    list.add(Integer.valueOf(doc));
    while ((doc=iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
      list.add(Integer.valueOf(doc));
    }
  }
  int[] docs=new int[list.size()];
  int c=0;
  Iterator<Integer> intIter=list.iterator();
  while (intIter.hasNext()) {
    docs[c++]=intIter.next().intValue();
  }
  int[] answer=new int[]{4,6,8};
  boolean same=Arrays.equals(answer,docs);
  if (!same) {
    System.out.println("answer: " + Arrays.toString(answer));
    System.out.println("gotten: " + Arrays.toString(docs));
    fail();
  }
}
