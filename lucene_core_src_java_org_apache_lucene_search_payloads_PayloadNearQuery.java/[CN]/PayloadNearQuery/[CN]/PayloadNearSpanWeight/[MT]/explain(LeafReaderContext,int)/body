{
  PayloadNearSpanScorer scorer=(PayloadNearSpanScorer)scorer(context,context.reader().getLiveDocs());
  if (scorer != null) {
    int newDoc=scorer.advance(doc);
    if (newDoc == doc) {
      float freq=scorer.freq();
      SimScorer docScorer=similarity.simScorer(stats,context);
      Explanation expl=new Explanation();
      expl.setDescription("weight(" + getQuery() + " in "+ doc+ ") ["+ similarity.getClass().getSimpleName()+ "], result of:");
      Explanation scoreExplanation=docScorer.explain(doc,new Explanation(freq,"phraseFreq=" + freq));
      expl.addDetail(scoreExplanation);
      expl.setValue(scoreExplanation.getValue());
      String field=((SpanQuery)getQuery()).getField();
      Explanation payloadExpl=function.explain(doc,field,scorer.payloadsSeen,scorer.payloadScore);
      ComplexExplanation result=new ComplexExplanation();
      result.addDetail(expl);
      result.addDetail(payloadExpl);
      result.setValue(expl.getValue() * payloadExpl.getValue());
      result.setDescription("PayloadNearQuery, product of:");
      return result;
    }
  }
  return new ComplexExplanation(false,0.0f,"no matching term");
}
