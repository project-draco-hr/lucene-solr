{
  SortField sf=new SortField("field",new FieldComparatorSource(){
    @Override public FieldComparator<String> newComparator(    String fieldname,    int numHits,    int sortPos,    boolean reversed) throws IOException {
      return new SlowCollatedStringComparator(numHits,fieldname,collator);
    }
  }
);
  final Sort sort=new Sort(sf);
  final TopDocs docs1=searcher.search(TermRangeQuery.newStringRange("field",null,splitDoc,true,true),null,numDocs / (1 + random.nextInt(4)),sort);
  doCheckSorting(docs1);
  final TopDocs docs2=searcher.search(TermRangeQuery.newStringRange("field",splitDoc,null,true,true),null,numDocs / (1 + random.nextInt(4)),sort);
  doCheckSorting(docs2);
  final TopDocs docs=TopDocs.merge(sort,numDocs / (1 + random.nextInt(4)),new TopDocs[]{docs1,docs2});
  doCheckSorting(docs);
}
