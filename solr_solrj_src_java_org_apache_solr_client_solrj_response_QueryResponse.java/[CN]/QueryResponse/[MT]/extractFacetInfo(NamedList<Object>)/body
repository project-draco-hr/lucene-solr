{
  _facetQuery=new LinkedHashMap<>();
  NamedList<Integer> fq=(NamedList<Integer>)info.get("facet_queries");
  if (fq != null) {
    for (    Map.Entry<String,Integer> entry : fq) {
      _facetQuery.put(entry.getKey(),entry.getValue());
    }
  }
  NamedList<NamedList<Number>> ff=(NamedList<NamedList<Number>>)info.get("facet_fields");
  if (ff != null) {
    _facetFields=new ArrayList<>(ff.size());
    _limitingFacets=new ArrayList<>(ff.size());
    long minsize=_results == null ? Long.MAX_VALUE : _results.getNumFound();
    for (    Map.Entry<String,NamedList<Number>> facet : ff) {
      FacetField f=new FacetField(facet.getKey());
      for (      Map.Entry<String,Number> entry : facet.getValue()) {
        f.add(entry.getKey(),entry.getValue().longValue());
      }
      _facetFields.add(f);
      FacetField nl=f.getLimitingFields(minsize);
      if (nl.getValueCount() > 0) {
        _limitingFacets.add(nl);
      }
    }
  }
  NamedList<NamedList<Object>> df=(NamedList<NamedList<Object>>)info.get("facet_dates");
  if (df != null) {
    _facetDates=new ArrayList<>(df.size());
    for (    Map.Entry<String,NamedList<Object>> facet : df) {
      NamedList<Object> values=facet.getValue();
      String gap=(String)values.get("gap");
      Date end=(Date)values.get("end");
      FacetField f=new FacetField(facet.getKey(),gap,end);
      for (      Map.Entry<String,Object> entry : values) {
        try {
          f.add(entry.getKey(),Long.parseLong(entry.getValue().toString()));
        }
 catch (        NumberFormatException e) {
        }
      }
      _facetDates.add(f);
    }
  }
  NamedList<NamedList<Object>> rf=(NamedList<NamedList<Object>>)info.get("facet_ranges");
  if (rf != null) {
    _facetRanges=new ArrayList<>(rf.size());
    for (    Map.Entry<String,NamedList<Object>> facet : rf) {
      NamedList<Object> values=facet.getValue();
      Object rawGap=values.get("gap");
      RangeFacet rangeFacet;
      if (rawGap instanceof Number) {
        Number gap=(Number)rawGap;
        Number start=(Number)values.get("start");
        Number end=(Number)values.get("end");
        Number before=(Number)values.get("before");
        Number after=(Number)values.get("after");
        Number between=(Number)values.get("between");
        rangeFacet=new RangeFacet.Numeric(facet.getKey(),start,end,gap,before,after,between);
      }
 else {
        String gap=(String)rawGap;
        Date start=(Date)values.get("start");
        Date end=(Date)values.get("end");
        Number before=(Number)values.get("before");
        Number after=(Number)values.get("after");
        Number between=(Number)values.get("between");
        rangeFacet=new RangeFacet.Date(facet.getKey(),start,end,gap,before,after,between);
      }
      NamedList<Integer> counts=(NamedList<Integer>)values.get("counts");
      for (      Map.Entry<String,Integer> entry : counts) {
        rangeFacet.addCount(entry.getKey(),entry.getValue());
      }
      _facetRanges.add(rangeFacet);
    }
  }
  NamedList pf=(NamedList)info.get("facet_pivot");
  if (pf != null) {
    _facetPivot=new NamedList<>();
    for (int i=0; i < pf.size(); i++) {
      _facetPivot.add(pf.getName(i),readPivots((List<NamedList>)pf.getVal(i)));
    }
  }
  NamedList<NamedList<Object>> intervalsNL=(NamedList<NamedList<Object>>)info.get("facet_intervals");
  if (intervalsNL != null) {
    _intervalFacets=new ArrayList<>(intervalsNL.size());
    for (    Map.Entry<String,NamedList<Object>> intervalField : intervalsNL) {
      String field=intervalField.getKey();
      List<IntervalFacet.Count> counts=new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());
      for (      Map.Entry<String,Object> interval : intervalField.getValue()) {
        counts.add(new IntervalFacet.Count(interval.getKey(),(Integer)interval.getValue()));
      }
      _intervalFacets.add(new IntervalFacet(field,counts));
    }
  }
}
