{
  Term term=new Term(DOC_POSITIONS_FIELD,DOC_POSITIONS_TERM);
  DocsAndPositionsEnum sortedPositions=reader.termPositionsEnum(term);
  int doc;
  while ((doc=sortedPositions.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
    int freq=sortedPositions.freq();
    assertEquals("incorrect freq for doc=" + doc,sortedValues[doc].intValue() / 10 + 1,freq);
    for (int i=0; i < freq; i++) {
      assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
      if (!doesntSupportOffsets.contains(_TestUtil.getPostingsFormat(DOC_POSITIONS_FIELD))) {
        assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
        assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
      }
      assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
    }
  }
  sortedPositions=reader.termPositionsEnum(term);
  doc=0;
  while ((doc=sortedPositions.advance(doc)) != DocIdSetIterator.NO_MORE_DOCS) {
    int freq=sortedPositions.freq();
    assertEquals("incorrect freq for doc=" + doc,sortedValues[doc].intValue() / 10 + 1,freq);
    for (int i=0; i < freq; i++) {
      assertEquals("incorrect position for doc=" + doc,i,sortedPositions.nextPosition());
      if (!doesntSupportOffsets.contains(_TestUtil.getPostingsFormat(DOC_POSITIONS_FIELD))) {
        assertEquals("incorrect startOffset for doc=" + doc,i,sortedPositions.startOffset());
        assertEquals("incorrect endOffset for doc=" + doc,i,sortedPositions.endOffset());
      }
      assertEquals("incorrect payload for doc=" + doc,freq - i,Integer.parseInt(sortedPositions.getPayload().utf8ToString()));
    }
  }
}
