{
  SlowSynonymMap synMap;
  List<String> rules=new ArrayList<String>();
  rules.add("a,b");
  synMap=new SlowSynonymMap(true);
  SlowSynonymFilterFactory.parseRules(rules,synMap,"=>",",",false,null);
  assertEquals(2,synMap.submap.size());
  assertTokIncludes(synMap,"a","a");
  assertTokIncludes(synMap,"b","a");
  rules.clear();
  rules.add("a,b,c");
  synMap=new SlowSynonymMap(true);
  SlowSynonymFilterFactory.parseRules(rules,synMap,"=>",",",false,null);
  assertEquals(3,synMap.submap.size());
  assertTokIncludes(synMap,"a","a");
  assertTokIncludes(synMap,"b","a");
  assertTokIncludes(synMap,"c","a");
  rules.clear();
  rules.add("a,b1 b2");
  synMap=new SlowSynonymMap(true);
  SlowSynonymFilterFactory.parseRules(rules,synMap,"=>",",",false,null);
  assertEquals(2,synMap.submap.size());
  assertTokIncludes(synMap,"a","a");
  assertEquals(1,getSubSynonymMap(synMap,"b1").submap.size());
  assertTokIncludes(getSubSynonymMap(synMap,"b1"),"b2","a");
  rules.clear();
  rules.add("a1 a2,b");
  synMap=new SlowSynonymMap(true);
  SlowSynonymFilterFactory.parseRules(rules,synMap,"=>",",",false,null);
  assertEquals(2,synMap.submap.size());
  assertEquals(1,getSubSynonymMap(synMap,"a1").submap.size());
  assertTokIncludes(getSubSynonymMap(synMap,"a1"),"a2","a1");
  assertTokIncludes(getSubSynonymMap(synMap,"a1"),"a2","a2");
  assertTokIncludes(synMap,"b","a1");
  assertTokIncludes(synMap,"b","a2");
}
