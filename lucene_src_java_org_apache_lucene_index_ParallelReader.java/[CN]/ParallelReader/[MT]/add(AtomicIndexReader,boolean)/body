{
  ensureOpen();
  if (readers.size() == 0) {
    this.maxDoc=reader.maxDoc();
    this.numDocs=reader.numDocs();
    this.hasDeletions=reader.hasDeletions();
  }
  if (reader.maxDoc() != maxDoc)   throw new IllegalArgumentException("All readers must have same maxDoc: " + maxDoc + "!="+ reader.maxDoc());
  if (reader.numDocs() != numDocs)   throw new IllegalArgumentException("All readers must have same numDocs: " + numDocs + "!="+ reader.numDocs());
  final FieldInfos readerFieldInfos=MultiFields.getMergedFieldInfos(reader);
  for (  FieldInfo fieldInfo : readerFieldInfos) {
    if (fieldToReader.get(fieldInfo.name) == null) {
      fieldInfos.add(fieldInfo);
      fieldToReader.put(fieldInfo.name,reader);
      this.fields.addField(fieldInfo.name,reader.terms(fieldInfo.name));
    }
  }
  if (!ignoreStoredFields)   storedFieldReaders.add(reader);
  readers.add(reader);
  if (incRefReaders) {
    reader.incRef();
  }
  decrefOnClose.add(Boolean.valueOf(incRefReaders));
synchronized (normsCache) {
    normsCache.clear();
  }
}
