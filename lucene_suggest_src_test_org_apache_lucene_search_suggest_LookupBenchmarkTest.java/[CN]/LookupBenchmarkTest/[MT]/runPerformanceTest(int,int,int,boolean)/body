{
  System.err.println(String.format(Locale.ROOT,"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s",minPrefixLen,maxPrefixLen,num,onlyMorePopular));
  for (  Class<? extends Lookup> cls : benchmarkClasses) {
    final Lookup lookup=buildLookup(cls,dictionaryInput);
    final List<String> input=new ArrayList<String>(benchmarkInput.size());
    for (    TermFreq tf : benchmarkInput) {
      String s=tf.term.utf8ToString();
      input.add(s.substring(0,Math.min(s.length(),minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));
    }
    BenchmarkResult result=measure(new Callable<Integer>(){
      public Integer call() throws Exception {
        int v=0;
        for (        String term : input) {
          v+=lookup.lookup(term,onlyMorePopular,num).size();
        }
        return v;
      }
    }
);
    System.err.println(String.format(Locale.ROOT,"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f",lookup.getClass().getSimpleName(),input.size(),result.average.toString(),input.size() / result.average.avg));
  }
}
