{
  if (null == cacheEntries || 0 == cacheEntries.length)   return new Insanity[0];
  if (null != ramCalc) {
    for (int i=0; i < cacheEntries.length; i++) {
      cacheEntries[i].estimateSize(ramCalc);
    }
  }
  final MapOfSets valIdToItems=new MapOfSets(new HashMap(17));
  final MapOfSets readerFieldToValIds=new MapOfSets(new HashMap(17));
  final Set valMismatchKeys=new HashSet();
  for (int i=0; i < cacheEntries.length; i++) {
    final CacheEntry item=cacheEntries[i];
    final Object val=item.getValue();
    if (val instanceof FieldCache.CreationPlaceholder)     continue;
    final ReaderField rf=new ReaderField(item.getReaderKey(),item.getFieldName());
    final Integer valId=Integer.valueOf(System.identityHashCode(val));
    valIdToItems.put(valId,item);
    if (1 < readerFieldToValIds.put(rf,valId)) {
      valMismatchKeys.add(rf);
    }
  }
  final List insanity=new ArrayList(valMismatchKeys.size() * 3);
  insanity.addAll(checkValueMismatch(valIdToItems,readerFieldToValIds,valMismatchKeys));
  insanity.addAll(checkSubreaders(valIdToItems,readerFieldToValIds));
  return (Insanity[])insanity.toArray(new Insanity[insanity.size()]);
}
