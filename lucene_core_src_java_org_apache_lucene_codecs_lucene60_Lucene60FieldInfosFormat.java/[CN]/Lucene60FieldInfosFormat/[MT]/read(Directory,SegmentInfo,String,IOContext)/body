{
  final String fileName=IndexFileNames.segmentFileName(segmentInfo.name,segmentSuffix,EXTENSION);
  try (ChecksumIndexInput input=directory.openChecksumInput(fileName,context)){
    Throwable priorE=null;
    FieldInfo infos[]=null;
    try {
      CodecUtil.checkIndexHeader(input,Lucene60FieldInfosFormat.CODEC_NAME,Lucene60FieldInfosFormat.FORMAT_START,Lucene60FieldInfosFormat.FORMAT_CURRENT,segmentInfo.getId(),segmentSuffix);
      final int size=input.readVInt();
      infos=new FieldInfo[size];
      Map<String,String> lastAttributes=Collections.emptyMap();
      for (int i=0; i < size; i++) {
        String name=input.readString();
        final int fieldNumber=input.readVInt();
        if (fieldNumber < 0) {
          throw new CorruptIndexException("invalid field number for field: " + name + ", fieldNumber="+ fieldNumber,input);
        }
        byte bits=input.readByte();
        boolean storeTermVector=(bits & STORE_TERMVECTOR) != 0;
        boolean omitNorms=(bits & OMIT_NORMS) != 0;
        boolean storePayloads=(bits & STORE_PAYLOADS) != 0;
        final IndexOptions indexOptions=getIndexOptions(input,input.readByte());
        final DocValuesType docValuesType=getDocValuesType(input,input.readByte());
        final long dvGen=input.readLong();
        Map<String,String> attributes=input.readMapOfStrings();
        if (attributes.equals(lastAttributes)) {
          attributes=lastAttributes;
        }
        lastAttributes=attributes;
        int pointDimensionCount=input.readVInt();
        int pointNumBytes;
        if (pointDimensionCount != 0) {
          pointNumBytes=input.readVInt();
        }
 else {
          pointNumBytes=0;
        }
        try {
          infos[i]=new FieldInfo(name,fieldNumber,storeTermVector,omitNorms,storePayloads,indexOptions,docValuesType,dvGen,attributes,pointDimensionCount,pointNumBytes);
          infos[i].checkConsistency();
        }
 catch (        IllegalStateException e) {
          throw new CorruptIndexException("invalid fieldinfo for field: " + name + ", fieldNumber="+ fieldNumber,input,e);
        }
      }
    }
 catch (    Throwable exception) {
      priorE=exception;
    }
 finally {
      CodecUtil.checkFooter(input,priorE);
    }
    return new FieldInfos(infos);
  }
 }
