{
  assertIntRangeSplit(-5000,9500,4,true,Arrays.asList(new Integer[]{Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),Integer.valueOf(0x7fffec8),Integer.valueOf(0x7fffecf),Integer.valueOf(0x8000250),Integer.valueOf(0x8000250),Integer.valueOf(0x7fffed),Integer.valueOf(0x7fffef),Integer.valueOf(0x800020),Integer.valueOf(0x800024),Integer.valueOf(0x7ffff),Integer.valueOf(0x80001)}).iterator());
  assertIntRangeSplit(-5000,9500,32,true,Arrays.asList(new Integer[]{Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)}).iterator());
  assertIntRangeSplit(0,1024 + 63,4,true,Arrays.asList(new Integer[]{Integer.valueOf(0x8000040),Integer.valueOf(0x8000043),Integer.valueOf(0x800000),Integer.valueOf(0x800003)}).iterator());
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,8,false,Arrays.asList(new Integer[]{Integer.valueOf(0x00),Integer.valueOf(0xff)}).iterator());
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,4,false,Arrays.asList(new Integer[]{Integer.valueOf(0x0),Integer.valueOf(0xf)}).iterator());
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,2,false,Arrays.asList(new Integer[]{Integer.valueOf(0x0),Integer.valueOf(0x3)}).iterator());
  assertIntRangeSplit(Integer.MIN_VALUE,Integer.MAX_VALUE,1,false,Arrays.asList(new Integer[]{Integer.valueOf(0x0),Integer.valueOf(0x1)}).iterator());
  assertIntRangeSplit(9500,-5000,4,false,Collections.EMPTY_LIST.iterator());
  assertIntRangeSplit(9500,9500,4,false,Arrays.asList(new Integer[]{Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)}).iterator());
}
