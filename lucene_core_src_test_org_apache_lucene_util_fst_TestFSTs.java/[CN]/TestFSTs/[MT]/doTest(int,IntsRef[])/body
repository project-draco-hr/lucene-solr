{
  Arrays.sort(terms);
{
    final Outputs<Object> outputs=NoOutputs.getSingleton();
    final Object NO_OUTPUT=outputs.getNoOutput();
    final List<FSTTester.InputOutput<Object>> pairs=new ArrayList<FSTTester.InputOutput<Object>>(terms.length);
    for (    IntsRef term : terms) {
      pairs.add(new FSTTester.InputOutput<Object>(term,NO_OUTPUT));
    }
    new FSTTester<Object>(random(),dir,inputMode,pairs,outputs,false).doTest(true);
  }
{
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(true);
    final List<FSTTester.InputOutput<Long>> pairs=new ArrayList<FSTTester.InputOutput<Long>>(terms.length);
    for (int idx=0; idx < terms.length; idx++) {
      pairs.add(new FSTTester.InputOutput<Long>(terms[idx],(long)idx));
    }
    new FSTTester<Long>(random(),dir,inputMode,pairs,outputs,true).doTest(true);
  }
{
    final boolean doShare=random().nextBoolean();
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(doShare);
    final List<FSTTester.InputOutput<Long>> pairs=new ArrayList<FSTTester.InputOutput<Long>>(terms.length);
    long lastOutput=0;
    for (int idx=0; idx < terms.length; idx++) {
      final long value=lastOutput + _TestUtil.nextInt(random(),1,1000);
      lastOutput=value;
      pairs.add(new FSTTester.InputOutput<Long>(terms[idx],value));
    }
    new FSTTester<Long>(random(),dir,inputMode,pairs,outputs,doShare).doTest(true);
  }
{
    final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(random().nextBoolean());
    final List<FSTTester.InputOutput<Long>> pairs=new ArrayList<FSTTester.InputOutput<Long>>(terms.length);
    for (int idx=0; idx < terms.length; idx++) {
      pairs.add(new FSTTester.InputOutput<Long>(terms[idx],_TestUtil.nextLong(random(),0,Long.MAX_VALUE)));
    }
    new FSTTester<Long>(random(),dir,inputMode,pairs,outputs,false).doTest(true);
  }
{
    final PositiveIntOutputs o1=PositiveIntOutputs.getSingleton(random().nextBoolean());
    final PositiveIntOutputs o2=PositiveIntOutputs.getSingleton(random().nextBoolean());
    final PairOutputs<Long,Long> outputs=new PairOutputs<Long,Long>(o1,o2);
    final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs=new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);
    long lastOutput=0;
    for (int idx=0; idx < terms.length; idx++) {
      final long value=lastOutput + _TestUtil.nextInt(random(),1,1000);
      lastOutput=value;
      pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],outputs.newPair((long)idx,value)));
    }
    new FSTTester<PairOutputs.Pair<Long,Long>>(random(),dir,inputMode,pairs,outputs,false).doTest(true);
  }
{
    final ByteSequenceOutputs outputs=ByteSequenceOutputs.getSingleton();
    final BytesRef NO_OUTPUT=outputs.getNoOutput();
    final List<FSTTester.InputOutput<BytesRef>> pairs=new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);
    for (int idx=0; idx < terms.length; idx++) {
      final BytesRef output=random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));
      pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx],output));
    }
    new FSTTester<BytesRef>(random(),dir,inputMode,pairs,outputs,false).doTest(true);
  }
{
    final IntSequenceOutputs outputs=IntSequenceOutputs.getSingleton();
    final List<FSTTester.InputOutput<IntsRef>> pairs=new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);
    for (int idx=0; idx < terms.length; idx++) {
      final String s=Integer.toString(idx);
      final IntsRef output=new IntsRef(s.length());
      output.length=s.length();
      for (int idx2=0; idx2 < output.length; idx2++) {
        output.ints[idx2]=s.charAt(idx2);
      }
      pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx],output));
    }
    new FSTTester<IntsRef>(random(),dir,inputMode,pairs,outputs,false).doTest(true);
  }
}
