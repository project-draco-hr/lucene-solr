{
  String[] strings=new String[]{"station","commotion","elation","elastic","plastic","stop","ftop","ftation","stat"};
  String[] strings2=new String[]{"station","commotion","elation","elastic","plastic","stop","ftop","ftation"};
  IntsRef[] terms=new IntsRef[strings.length];
  IntsRef[] terms2=new IntsRef[strings2.length];
  for (int inputMode=0; inputMode < 2; inputMode++) {
    if (VERBOSE) {
      System.out.println("TEST: inputMode=" + inputModeToString(inputMode));
    }
    for (int idx=0; idx < strings.length; idx++) {
      terms[idx]=toIntsRef(strings[idx],inputMode);
    }
    for (int idx=0; idx < strings2.length; idx++) {
      terms2[idx]=toIntsRef(strings2[idx],inputMode);
    }
    Arrays.sort(terms2);
    doTest(inputMode,terms);
{
      final Outputs<Object> outputs=NoOutputs.getSingleton();
      final Object NO_OUTPUT=outputs.getNoOutput();
      final List<FSTTester.InputOutput<Object>> pairs=new ArrayList<>(terms2.length);
      for (      IntsRef term : terms2) {
        pairs.add(new FSTTester.InputOutput<>(term,NO_OUTPUT));
      }
      FSTTester<Object> tester=new FSTTester<>(random(),dir,inputMode,pairs,outputs,false);
      FST<Object> fst=tester.doTest(0,0,false);
      assertNotNull(fst);
      assertEquals(22,tester.nodeCount);
      assertEquals(27,tester.arcCount);
    }
{
      final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton();
      final List<FSTTester.InputOutput<Long>> pairs=new ArrayList<>(terms2.length);
      for (int idx=0; idx < terms2.length; idx++) {
        pairs.add(new FSTTester.InputOutput<>(terms2[idx],(long)idx));
      }
      FSTTester<Long> tester=new FSTTester<>(random(),dir,inputMode,pairs,outputs,true);
      final FST<Long> fst=tester.doTest(0,0,false);
      assertNotNull(fst);
      assertEquals(22,tester.nodeCount);
      assertEquals(27,tester.arcCount);
    }
{
      final ByteSequenceOutputs outputs=ByteSequenceOutputs.getSingleton();
      final BytesRef NO_OUTPUT=outputs.getNoOutput();
      final List<FSTTester.InputOutput<BytesRef>> pairs=new ArrayList<>(terms2.length);
      for (int idx=0; idx < terms2.length; idx++) {
        final BytesRef output=random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));
        pairs.add(new FSTTester.InputOutput<>(terms2[idx],output));
      }
      FSTTester<BytesRef> tester=new FSTTester<>(random(),dir,inputMode,pairs,outputs,false);
      final FST<BytesRef> fst=tester.doTest(0,0,false);
      assertNotNull(fst);
      assertEquals(24,tester.nodeCount);
      assertEquals(30,tester.arcCount);
    }
  }
}
