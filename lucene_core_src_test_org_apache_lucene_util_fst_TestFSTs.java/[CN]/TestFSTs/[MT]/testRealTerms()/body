{
  final LineFileDocs docs=new LineFileDocs(random(),true);
  final int RUN_TIME_MSEC=atLeast(500);
  MockAnalyzer analyzer=new MockAnalyzer(random());
  analyzer.setMaxTokenLength(TestUtil.nextInt(random(),1,IndexWriter.MAX_TERM_LENGTH));
  final IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,analyzer).setMaxBufferedDocs(-1).setRAMBufferSizeMB(64);
  final File tempDir=createTempDir("fstlines");
  final Directory dir=newFSDirectory(tempDir);
  final IndexWriter writer=new IndexWriter(dir,conf);
  final long stopTime=System.currentTimeMillis() + RUN_TIME_MSEC;
  Document doc;
  int docCount=0;
  while ((doc=docs.nextDoc()) != null && System.currentTimeMillis() < stopTime) {
    writer.addDocument(doc);
    docCount++;
  }
  IndexReader r=DirectoryReader.open(writer,true);
  writer.shutdown();
  final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton();
  final boolean doRewrite=random().nextBoolean();
  Builder<Long> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,0,0,true,true,Integer.MAX_VALUE,outputs,doRewrite,PackedInts.DEFAULT,true,15);
  boolean storeOrd=random().nextBoolean();
  if (VERBOSE) {
    if (storeOrd) {
      System.out.println("FST stores ord");
    }
 else {
      System.out.println("FST stores docFreq");
    }
  }
  Terms terms=MultiFields.getTerms(r,"body");
  if (terms != null) {
    final IntsRef scratchIntsRef=new IntsRef();
    final TermsEnum termsEnum=terms.iterator(null);
    if (VERBOSE) {
      System.out.println("TEST: got termsEnum=" + termsEnum);
    }
    BytesRef term;
    int ord=0;
    Automaton automaton=new RegExp(".*",RegExp.NONE).toAutomaton();
    final TermsEnum termsEnum2=terms.intersect(new CompiledAutomaton(automaton,false,false),null);
    while ((term=termsEnum.next()) != null) {
      BytesRef term2=termsEnum2.next();
      assertNotNull(term2);
      assertEquals(term,term2);
      assertEquals(termsEnum.docFreq(),termsEnum2.docFreq());
      assertEquals(termsEnum.totalTermFreq(),termsEnum2.totalTermFreq());
      if (ord == 0) {
        try {
          termsEnum.ord();
        }
 catch (        UnsupportedOperationException uoe) {
          if (VERBOSE) {
            System.out.println("TEST: codec doesn't support ord; FST stores docFreq");
          }
          storeOrd=false;
        }
      }
      final int output;
      if (storeOrd) {
        output=ord;
      }
 else {
        output=termsEnum.docFreq();
      }
      builder.add(Util.toIntsRef(term,scratchIntsRef),(long)output);
      ord++;
      if (VERBOSE && ord % 100000 == 0 && LuceneTestCase.TEST_NIGHTLY) {
        System.out.println(ord + " terms...");
      }
    }
    FST<Long> fst=builder.finish();
    if (VERBOSE) {
      System.out.println("FST: " + docCount + " docs; "+ ord+ " terms; "+ fst.getNodeCount()+ " nodes; "+ fst.getArcCount()+ " arcs;"+ " "+ fst.ramBytesUsed()+ " bytes");
    }
    if (ord > 0) {
      final Random random=new Random(random().nextLong());
      final BytesRefFSTEnum<Long> fstEnum=new BytesRefFSTEnum<>(fst);
      int num=atLeast(1000);
      for (int iter=0; iter < num; iter++) {
        final BytesRef randomTerm=new BytesRef(getRandomString(random));
        if (VERBOSE) {
          System.out.println("TEST: seek non-exist " + randomTerm.utf8ToString() + " "+ randomTerm);
        }
        final TermsEnum.SeekStatus seekResult=termsEnum.seekCeil(randomTerm);
        final InputOutput<Long> fstSeekResult=fstEnum.seekCeil(randomTerm);
        if (seekResult == TermsEnum.SeekStatus.END) {
          assertNull("got " + (fstSeekResult == null ? "null" : fstSeekResult.input.utf8ToString()) + " but expected null",fstSeekResult);
        }
 else {
          assertSame(termsEnum,fstEnum,storeOrd);
          for (int nextIter=0; nextIter < 10; nextIter++) {
            if (VERBOSE) {
              System.out.println("TEST: next");
              if (storeOrd) {
                System.out.println("  ord=" + termsEnum.ord());
              }
            }
            if (termsEnum.next() != null) {
              if (VERBOSE) {
                System.out.println("  term=" + termsEnum.term().utf8ToString());
              }
              assertNotNull(fstEnum.next());
              assertSame(termsEnum,fstEnum,storeOrd);
            }
 else {
              if (VERBOSE) {
                System.out.println("  end!");
              }
              BytesRefFSTEnum.InputOutput<Long> nextResult=fstEnum.next();
              if (nextResult != null) {
                System.out.println("expected null but got: input=" + nextResult.input.utf8ToString() + " output="+ outputs.outputToString(nextResult.output));
                fail();
              }
              break;
            }
          }
        }
      }
    }
  }
  r.close();
  dir.close();
}
