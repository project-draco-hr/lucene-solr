{
  final String defaultFormat=_TestUtil.getPostingsFormat("abracadabra");
  if (defaultFormat.equals("SimpleText") || defaultFormat.equals("Memory")) {
    Codec.setDefault(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat()));
  }
  final LineFileDocs docs=new LineFileDocs(random,defaultCodecSupportsDocValues());
  final int RUN_TIME_MSEC=atLeast(500);
  final IndexWriterConfig conf=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMaxBufferedDocs(-1).setRAMBufferSizeMB(64);
  final File tempDir=_TestUtil.getTempDir("fstlines");
  final MockDirectoryWrapper dir=newFSDirectory(tempDir);
  final IndexWriter writer=new IndexWriter(dir,conf);
  final long stopTime=System.currentTimeMillis() + RUN_TIME_MSEC;
  Document doc;
  int docCount=0;
  while ((doc=docs.nextDoc()) != null && System.currentTimeMillis() < stopTime) {
    writer.addDocument(doc);
    docCount++;
  }
  IndexReader r=IndexReader.open(writer,true);
  writer.close();
  final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton(random.nextBoolean());
  final boolean doRewrite=random.nextBoolean();
  Builder<Long> builder=new Builder<Long>(FST.INPUT_TYPE.BYTE1,0,0,true,true,Integer.MAX_VALUE,outputs,null,doRewrite);
  boolean storeOrd=random.nextBoolean();
  if (VERBOSE) {
    if (storeOrd) {
      System.out.println("FST stores ord");
    }
 else {
      System.out.println("FST stores docFreq");
    }
  }
  Terms terms=MultiFields.getTerms(r,"body");
  if (terms != null) {
    final IntsRef scratchIntsRef=new IntsRef();
    final TermsEnum termsEnum=terms.iterator(null);
    if (VERBOSE) {
      System.out.println("TEST: got termsEnum=" + termsEnum);
    }
    BytesRef term;
    int ord=0;
    while ((term=termsEnum.next()) != null) {
      if (ord == 0) {
        try {
          termsEnum.ord();
        }
 catch (        UnsupportedOperationException uoe) {
          if (VERBOSE) {
            System.out.println("TEST: codec doesn't support ord; FST stores docFreq");
          }
          storeOrd=false;
        }
      }
      final int output;
      if (storeOrd) {
        output=ord;
      }
 else {
        output=termsEnum.docFreq();
      }
      builder.add(Util.toIntsRef(term,scratchIntsRef),(long)output);
      ord++;
      if (VERBOSE && ord % 100000 == 0 && LuceneTestCase.TEST_NIGHTLY) {
        System.out.println(ord + " terms...");
      }
    }
    FST<Long> fst=builder.finish();
    if (VERBOSE) {
      System.out.println("FST: " + docCount + " docs; "+ ord+ " terms; "+ fst.getNodeCount()+ " nodes; "+ fst.getArcCount()+ " arcs;"+ " "+ fst.sizeInBytes()+ " bytes");
    }
    if (ord > 0) {
      for (int rewriteIter=0; rewriteIter < 2; rewriteIter++) {
        if (rewriteIter == 1) {
          if (doRewrite) {
            fst=fst.pack(_TestUtil.nextInt(random,1,10),_TestUtil.nextInt(random,0,10000000));
          }
 else {
            break;
          }
        }
        final BytesRefFSTEnum<Long> fstEnum=new BytesRefFSTEnum<Long>(fst);
        int num=atLeast(1000);
        for (int iter=0; iter < num; iter++) {
          final BytesRef randomTerm=new BytesRef(getRandomString());
          if (VERBOSE) {
            System.out.println("TEST: seek non-exist " + randomTerm.utf8ToString() + " "+ randomTerm);
          }
          final TermsEnum.SeekStatus seekResult=termsEnum.seekCeil(randomTerm);
          final BytesRefFSTEnum.InputOutput fstSeekResult=fstEnum.seekCeil(randomTerm);
          if (seekResult == TermsEnum.SeekStatus.END) {
            assertNull("got " + (fstSeekResult == null ? "null" : fstSeekResult.input.utf8ToString()) + " but expected null",fstSeekResult);
          }
 else {
            assertSame(termsEnum,fstEnum,storeOrd);
            for (int nextIter=0; nextIter < 10; nextIter++) {
              if (VERBOSE) {
                System.out.println("TEST: next");
                if (storeOrd) {
                  System.out.println("  ord=" + termsEnum.ord());
                }
              }
              if (termsEnum.next() != null) {
                if (VERBOSE) {
                  System.out.println("  term=" + termsEnum.term().utf8ToString());
                }
                assertNotNull(fstEnum.next());
                assertSame(termsEnum,fstEnum,storeOrd);
              }
 else {
                if (VERBOSE) {
                  System.out.println("  end!");
                }
                BytesRefFSTEnum.InputOutput<Long> nextResult=fstEnum.next();
                if (nextResult != null) {
                  System.out.println("expected null but got: input=" + nextResult.input.utf8ToString() + " output="+ outputs.outputToString(nextResult.output));
                  fail();
                }
                break;
              }
            }
          }
        }
      }
    }
  }
  r.close();
  dir.close();
}
