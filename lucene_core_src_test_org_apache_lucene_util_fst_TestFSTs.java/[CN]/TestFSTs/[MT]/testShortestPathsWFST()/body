{
  PairOutputs<Long,Long> outputs=new PairOutputs<>(PositiveIntOutputs.getSingleton(),PositiveIntOutputs.getSingleton());
  final Builder<Pair<Long,Long>> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  final IntsRefBuilder scratch=new IntsRefBuilder();
  builder.add(Util.toIntsRef(new BytesRef("aab"),scratch),outputs.newPair(22L,57L));
  builder.add(Util.toIntsRef(new BytesRef("aac"),scratch),outputs.newPair(7L,36L));
  builder.add(Util.toIntsRef(new BytesRef("ax"),scratch),outputs.newPair(17L,85L));
  final FST<Pair<Long,Long>> fst=builder.finish();
  Util.TopResults<Pair<Long,Long>> res=Util.shortestPaths(fst,fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),outputs.getNoOutput(),minPairWeightComparator,3,true);
  assertTrue(res.isComplete);
  assertEquals(3,res.topN.size());
  assertEquals(Util.toIntsRef(new BytesRef("aac"),scratch),res.topN.get(0).input);
  assertEquals(7L,res.topN.get(0).output.output1.longValue());
  assertEquals(36L,res.topN.get(0).output.output2.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("ax"),scratch),res.topN.get(1).input);
  assertEquals(17L,res.topN.get(1).output.output1.longValue());
  assertEquals(85L,res.topN.get(1).output.output2.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("aab"),scratch),res.topN.get(2).input);
  assertEquals(22L,res.topN.get(2).output.output1.longValue());
  assertEquals(57L,res.topN.get(2).output.output2.longValue());
}
