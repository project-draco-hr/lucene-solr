{
  PairOutputs<Long,Long> outputs=new PairOutputs<>(PositiveIntOutputs.getSingleton(),PositiveIntOutputs.getSingleton());
  final Builder<Pair<Long,Long>> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  final IntsRef scratch=new IntsRef();
  builder.add(Util.toIntsRef(new BytesRef("aab"),scratch),outputs.newPair(22L,57L));
  builder.add(Util.toIntsRef(new BytesRef("aac"),scratch),outputs.newPair(7L,36L));
  builder.add(Util.toIntsRef(new BytesRef("ax"),scratch),outputs.newPair(17L,85L));
  final FST<Pair<Long,Long>> fst=builder.finish();
  Util.MinResult<Pair<Long,Long>>[] r=Util.shortestPaths(fst,fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),outputs.getNoOutput(),minPairWeightComparator,3,true);
  assertEquals(3,r.length);
  assertEquals(Util.toIntsRef(new BytesRef("aac"),scratch),r[0].input);
  assertEquals(7L,r[0].output.output1.longValue());
  assertEquals(36L,r[0].output.output2.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("ax"),scratch),r[1].input);
  assertEquals(17L,r[1].output.output1.longValue());
  assertEquals(85L,r[1].output.output2.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("aab"),scratch),r[2].input);
  assertEquals(22L,r[2].output.output1.longValue());
  assertEquals(57L,r[2].output.output2.longValue());
}
