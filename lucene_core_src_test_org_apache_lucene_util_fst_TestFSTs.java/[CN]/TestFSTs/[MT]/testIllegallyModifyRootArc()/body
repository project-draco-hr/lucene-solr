{
  assumeTrue("test relies on assertions",assertsAreEnabled);
  Set<BytesRef> terms=new HashSet<>();
  for (int i=0; i < 100; i++) {
    String prefix=Character.toString((char)('a' + i));
    terms.add(new BytesRef(prefix));
    if (prefix.equals("m") == false) {
      for (int j=0; j < 20; j++) {
        String suffix=TestUtil.randomRealisticUnicodeString(random(),10,20);
        terms.add(new BytesRef(prefix + suffix));
      }
    }
  }
  List<BytesRef> termsList=new ArrayList<>(terms);
  Collections.sort(termsList);
  ByteSequenceOutputs outputs=ByteSequenceOutputs.getSingleton();
  Builder<BytesRef> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  IntsRefBuilder input=new IntsRefBuilder();
  for (  BytesRef term : termsList) {
    Util.toIntsRef(term,input);
    builder.add(input.get(),term);
  }
  FST<BytesRef> fst=builder.finish();
  Arc<BytesRef> arc=new FST.Arc<>();
  fst.getFirstArc(arc);
  FST.BytesReader reader=fst.getBytesReader();
  arc=fst.findTargetArc((int)'m',arc,arc,reader);
  assertNotNull(arc);
  assertEquals(new BytesRef("m"),arc.output);
  arc.output.length=0;
  fst.getFirstArc(arc);
  try {
    arc=fst.findTargetArc((int)'m',arc,arc,reader);
  }
 catch (  AssertionError ae) {
  }
}
