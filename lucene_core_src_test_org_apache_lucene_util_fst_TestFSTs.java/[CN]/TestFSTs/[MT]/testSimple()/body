{
  final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton();
  final Builder<Long> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  final BytesRef a=new BytesRef("a");
  final BytesRef b=new BytesRef("b");
  final BytesRef c=new BytesRef("c");
  builder.add(Util.toIntsRef(a,new IntsRefBuilder()),17L);
  builder.add(Util.toIntsRef(b,new IntsRefBuilder()),42L);
  builder.add(Util.toIntsRef(c,new IntsRefBuilder()),13824324872317238L);
  final FST<Long> fst=builder.finish();
  assertEquals(13824324872317238L,(long)Util.get(fst,c));
  assertEquals(42,(long)Util.get(fst,b));
  assertEquals(17,(long)Util.get(fst,a));
  BytesRefFSTEnum<Long> fstEnum=new BytesRefFSTEnum<>(fst);
  BytesRefFSTEnum.InputOutput<Long> seekResult;
  seekResult=fstEnum.seekFloor(a);
  assertNotNull(seekResult);
  assertEquals(17,(long)seekResult.output);
  seekResult=fstEnum.seekFloor(new BytesRef("aa"));
  assertNotNull(seekResult);
  assertEquals(17,(long)seekResult.output);
  seekResult=fstEnum.seekCeil(new BytesRef("aa"));
  assertNotNull(seekResult);
  assertEquals(b,seekResult.input);
  assertEquals(42,(long)seekResult.output);
  assertEquals(Util.toIntsRef(new BytesRef("c"),new IntsRefBuilder()),Util.getByOutput(fst,13824324872317238L));
  assertNull(Util.getByOutput(fst,47));
  assertEquals(Util.toIntsRef(new BytesRef("b"),new IntsRefBuilder()),Util.getByOutput(fst,42));
  assertEquals(Util.toIntsRef(new BytesRef("a"),new IntsRefBuilder()),Util.getByOutput(fst,17));
}
