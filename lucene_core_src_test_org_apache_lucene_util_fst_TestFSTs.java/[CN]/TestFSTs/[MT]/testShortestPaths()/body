{
  final PositiveIntOutputs outputs=PositiveIntOutputs.getSingleton();
  final Builder<Long> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  final IntsRef scratch=new IntsRef();
  builder.add(Util.toIntsRef(new BytesRef("aab"),scratch),22L);
  builder.add(Util.toIntsRef(new BytesRef("aac"),scratch),7L);
  builder.add(Util.toIntsRef(new BytesRef("ax"),scratch),17L);
  final FST<Long> fst=builder.finish();
  Util.MinResult<Long>[] r=Util.shortestPaths(fst,fst.getFirstArc(new FST.Arc<Long>()),outputs.getNoOutput(),minLongComparator,3,true);
  assertEquals(3,r.length);
  assertEquals(Util.toIntsRef(new BytesRef("aac"),scratch),r[0].input);
  assertEquals(7L,r[0].output.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("ax"),scratch),r[1].input);
  assertEquals(17L,r[1].output.longValue());
  assertEquals(Util.toIntsRef(new BytesRef("aab"),scratch),r[2].input);
  assertEquals(22L,r[2].output.longValue());
}
