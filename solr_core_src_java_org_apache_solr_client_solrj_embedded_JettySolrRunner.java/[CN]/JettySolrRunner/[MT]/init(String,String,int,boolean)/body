{
  this.context=context;
  this.solrHome=solrHome;
  this.stopAtShutdown=stopAtShutdown;
  System.setProperty("solr.solr.home",solrHome);
  if (System.getProperty("jetty.testMode") != null) {
    final boolean useSsl=sslConfig == null ? false : sslConfig.isSSLMode();
    final SslContextFactory sslcontext=new SslContextFactory(false);
    sslInit(useSsl,sslcontext);
    QueuedThreadPool qtp=new QueuedThreadPool();
    qtp.setMaxThreads(10000);
    qtp.setIdleTimeout((int)TimeUnit.SECONDS.toMillis(5));
    qtp.setStopTimeout((int)TimeUnit.MINUTES.toMillis(1));
    server=new Server(qtp);
    server.setStopAtShutdown(stopAtShutdown);
    server.manage(qtp);
    ServerConnector connector;
    if (useSsl) {
      HttpConfiguration configuration=new HttpConfiguration();
      configuration.setSecureScheme("https");
      configuration.addCustomizer(new SecureRequestCustomizer());
      connector=new ServerConnector(server,new SslConnectionFactory(sslcontext,"http/1.1"),new HttpConnectionFactory(configuration));
    }
 else {
      connector=new ServerConnector(server,new HttpConnectionFactory());
    }
    connector.setReuseAddress(true);
    connector.setSoLingerTime(0);
    connector.setPort(port);
    connector.setHost("127.0.0.1");
    LowResourceMonitor lowResources=new LowResourceMonitor(server);
    lowResources.setLowResourcesIdleTimeout(1500);
    lowResources.setMaxConnections(10000);
    server.addBean(lowResources);
    server.setConnectors(new Connector[]{connector});
    server.setSessionIdManager(new HashSessionIdManager(new Random()));
  }
 else {
    ServerConnector connector=new ServerConnector(server,new HttpConnectionFactory());
    connector.setPort(port);
    QueuedThreadPool qtp=new QueuedThreadPool();
    qtp.setMaxThreads(10000);
    qtp.setIdleTimeout((int)TimeUnit.SECONDS.toMillis(5));
    qtp.setStopTimeout((int)TimeUnit.SECONDS.toMillis(1));
    server=new Server(qtp);
    server.setStopAtShutdown(stopAtShutdown);
    server.manage(qtp);
  }
  final ServletContextHandler root=new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);
  root.addFilter(GzipFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
  server.addLifeCycleListener(new LifeCycle.Listener(){
    @Override public void lifeCycleStopping(    LifeCycle arg0){
      System.clearProperty("hostPort");
    }
    @Override public void lifeCycleStopped(    LifeCycle arg0){
    }
    @Override public void lifeCycleStarting(    LifeCycle arg0){
synchronized (JettySolrRunner.this) {
        waitOnSolr=true;
        JettySolrRunner.this.notify();
      }
    }
    @Override public void lifeCycleStarted(    LifeCycle arg0){
      lastPort=getFirstConnectorPort();
      System.setProperty("hostPort",Integer.toString(lastPort));
      if (solrConfigFilename != null)       System.setProperty("solrconfig",solrConfigFilename);
      if (schemaFilename != null)       System.setProperty("schema",schemaFilename);
      if (coreRootDirectory != null)       System.setProperty("coreRootDirectory",coreRootDirectory);
      debugFilter=root.addFilter(DebugFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
      if (extraRequestFilters != null) {
        extraFilters=new LinkedList<>();
        for (        Class filterClass : extraRequestFilters.keySet()) {
          extraFilters.add(root.addFilter(filterClass,extraRequestFilters.get(filterClass),EnumSet.of(DispatcherType.REQUEST)));
        }
      }
      for (      ServletHolder servletHolder : extraServlets.keySet()) {
        String pathSpec=extraServlets.get(servletHolder);
        root.addServlet(servletHolder,pathSpec);
      }
      dispatchFilter=root.addFilter(SolrDispatchFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
      if (solrConfigFilename != null)       System.clearProperty("solrconfig");
      if (schemaFilename != null)       System.clearProperty("schema");
      System.clearProperty("solr.solr.home");
    }
    @Override public void lifeCycleFailure(    LifeCycle arg0,    Throwable arg1){
      System.clearProperty("hostPort");
    }
  }
);
  root.addServlet(Servlet404.class,"/*");
}
