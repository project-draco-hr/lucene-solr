{
  this.context=context;
  server=new Server(port);
  this.solrHome=solrHome;
  this.stopAtShutdown=stopAtShutdown;
  server.setStopAtShutdown(stopAtShutdown);
  if (!stopAtShutdown) {
    server.setGracefulShutdown(0);
  }
  System.setProperty("solr.solr.home",solrHome);
  if (System.getProperty("jetty.testMode") != null) {
    final String connectorName=System.getProperty("tests.jettyConnector","SelectChannel");
    final boolean useSsl=sslConfig == null ? false : sslConfig.useSsl;
    final SslContextFactory sslcontext=new SslContextFactory(false);
    sslInit(useSsl,sslcontext);
    final Connector connector;
    final QueuedThreadPool threadPool;
    if ("SelectChannel".equals(connectorName)) {
      final SelectChannelConnector c=useSsl ? new SslSelectChannelConnector(sslcontext) : new SelectChannelConnector();
      c.setReuseAddress(true);
      c.setLowResourcesMaxIdleTime(1500);
      connector=c;
      threadPool=(QueuedThreadPool)c.getThreadPool();
    }
 else     if ("Socket".equals(connectorName)) {
      final SocketConnector c=useSsl ? new SslSocketConnector(sslcontext) : new SocketConnector();
      c.setReuseAddress(true);
      connector=c;
      threadPool=(QueuedThreadPool)c.getThreadPool();
    }
 else {
      throw new IllegalArgumentException("Illegal value for system property 'tests.jettyConnector': " + connectorName);
    }
    connector.setPort(port);
    connector.setHost("127.0.0.1");
    if (threadPool != null) {
      threadPool.setMaxThreads(10000);
      threadPool.setMaxIdleTimeMs(5000);
      threadPool.setMaxStopTimeMs(30000);
    }
    server.setConnectors(new Connector[]{connector});
    server.setSessionIdManager(new HashSessionIdManager(new Random()));
  }
 else {
    for (    Connector connector : server.getConnectors()) {
      QueuedThreadPool threadPool=null;
      if (connector instanceof SocketConnector) {
        threadPool=(QueuedThreadPool)((SocketConnector)connector).getThreadPool();
      }
      if (connector instanceof SelectChannelConnector) {
        threadPool=(QueuedThreadPool)((SelectChannelConnector)connector).getThreadPool();
      }
      if (threadPool != null) {
        threadPool.setMaxThreads(10000);
        threadPool.setMaxIdleTimeMs(5000);
        if (!stopAtShutdown) {
          threadPool.setMaxStopTimeMs(100);
        }
      }
    }
  }
  final ServletContextHandler root=new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);
  root.setHandler(new GzipHandler());
  server.addLifeCycleListener(new LifeCycle.Listener(){
    @Override public void lifeCycleStopping(    LifeCycle arg0){
      System.clearProperty("hostPort");
    }
    @Override public void lifeCycleStopped(    LifeCycle arg0){
    }
    @Override public void lifeCycleStarting(    LifeCycle arg0){
synchronized (JettySolrRunner.this) {
        waitOnSolr=true;
        JettySolrRunner.this.notify();
      }
    }
    @Override public void lifeCycleStarted(    LifeCycle arg0){
      lastPort=getFirstConnectorPort();
      System.setProperty("hostPort",Integer.toString(lastPort));
      if (solrConfigFilename != null)       System.setProperty("solrconfig",solrConfigFilename);
      if (schemaFilename != null)       System.setProperty("schema",schemaFilename);
      debugFilter=root.addFilter(DebugFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
      dispatchFilter=root.addFilter(SolrDispatchFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
      for (      ServletHolder servletHolder : extraServlets.keySet()) {
        String pathSpec=extraServlets.get(servletHolder);
        root.addServlet(servletHolder,pathSpec);
      }
      if (solrConfigFilename != null)       System.clearProperty("solrconfig");
      if (schemaFilename != null)       System.clearProperty("schema");
      System.clearProperty("solr.solr.home");
    }
    @Override public void lifeCycleFailure(    LifeCycle arg0,    Throwable arg1){
      System.clearProperty("hostPort");
    }
  }
);
  root.addServlet(Servlet404.class,"/*");
}
