{
  QueuedThreadPool qtp=new QueuedThreadPool();
  qtp.setMaxThreads(10000);
  qtp.setIdleTimeout((int)TimeUnit.SECONDS.toMillis(5));
  qtp.setStopTimeout((int)TimeUnit.MINUTES.toMillis(1));
  server=new Server(qtp);
  server.manage(qtp);
  server.setStopAtShutdown(config.stopAtShutdown);
  if (System.getProperty("jetty.testMode") != null) {
    final SslContextFactory sslcontext=SSLConfig.createContextFactory(config.sslConfig);
    ServerConnector connector;
    if (sslcontext != null) {
      HttpConfiguration configuration=new HttpConfiguration();
      configuration.setSecureScheme("https");
      configuration.addCustomizer(new SecureRequestCustomizer());
      connector=new ServerConnector(server,new SslConnectionFactory(sslcontext,"http/1.1"),new HttpConnectionFactory(configuration));
    }
 else {
      connector=new ServerConnector(server,new HttpConnectionFactory());
    }
    connector.setReuseAddress(true);
    connector.setSoLingerTime(0);
    connector.setPort(port);
    connector.setHost("127.0.0.1");
    LowResourceMonitor lowResources=new LowResourceMonitor(server);
    lowResources.setLowResourcesIdleTimeout(1500);
    lowResources.setMaxConnections(10000);
    server.addBean(lowResources);
    server.setConnectors(new Connector[]{connector});
    server.setSessionIdManager(new HashSessionIdManager(new Random()));
  }
 else {
    ServerConnector connector=new ServerConnector(server,new HttpConnectionFactory());
    connector.setPort(port);
    server.setConnectors(new Connector[]{connector});
  }
  final ServletContextHandler root=new ServletContextHandler(server,config.context,ServletContextHandler.SESSIONS);
  server.addLifeCycleListener(new LifeCycle.Listener(){
    @Override public void lifeCycleStopping(    LifeCycle arg0){
    }
    @Override public void lifeCycleStopped(    LifeCycle arg0){
    }
    @Override public void lifeCycleStarting(    LifeCycle arg0){
synchronized (JettySolrRunner.this) {
        waitOnSolr=true;
        JettySolrRunner.this.notify();
      }
    }
    @Override public void lifeCycleStarted(    LifeCycle arg0){
      lastPort=getFirstConnectorPort();
      nodeProperties.setProperty("hostPort",Integer.toString(lastPort));
      nodeProperties.setProperty("hostContext",config.context);
      root.getServletContext().setAttribute(SolrDispatchFilter.PROPERTIES_ATTRIBUTE,nodeProperties);
      root.getServletContext().setAttribute(SolrDispatchFilter.SOLRHOME_ATTRIBUTE,solrHome);
      logger.info("Jetty properties: {}",nodeProperties);
      debugFilter=root.addFilter(DebugFilter.class,"*",EnumSet.of(DispatcherType.REQUEST));
      extraFilters=new LinkedList<>();
      for (      Class<? extends Filter> filterClass : config.extraFilters.keySet()) {
        extraFilters.add(root.addFilter(filterClass,config.extraFilters.get(filterClass),EnumSet.of(DispatcherType.REQUEST)));
      }
      for (      ServletHolder servletHolder : config.extraServlets.keySet()) {
        String pathSpec=config.extraServlets.get(servletHolder);
        root.addServlet(servletHolder,pathSpec);
      }
      dispatchFilter=root.getServletHandler().newFilterHolder(BaseHolder.Source.EMBEDDED);
      dispatchFilter.setHeldClass(SolrDispatchFilter.class);
      dispatchFilter.setInitParameter("excludePatterns",excludePatterns);
      root.addFilter(dispatchFilter,"*",EnumSet.of(DispatcherType.REQUEST));
    }
    @Override public void lifeCycleFailure(    LifeCycle arg0,    Throwable arg1){
      System.clearProperty("hostPort");
    }
  }
);
  root.addServlet(Servlet404.class,"/*");
  GzipHandler gzipHandler=new GzipHandler();
  gzipHandler.setHandler(root);
  gzipHandler.setMinGzipSize(0);
  gzipHandler.setCheckGzExists(false);
  gzipHandler.setCompressionLevel(-1);
  gzipHandler.setExcludedAgentPatterns(".*MSIE.6\\.0.*");
  gzipHandler.setIncludedMethods("GET");
  server.setHandler(gzipHandler);
}
