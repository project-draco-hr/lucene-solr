{
  double minLat;
  double maxLat;
  double minLng;
  double maxLng;
  double radius=Math.max(widthMi,heightMi);
  if (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MAX,LatLng.HEADING_NORTH))) {
    maxLat=LatLng.LATITUDE_DEGREE_MAX;
  }
 else {
    maxLat=LatLng.computeDestination(center,radius,LatLng.HEADING_NORTH).getLat();
  }
  if (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MIN,LatLng.HEADING_NORTH))) {
    minLat=LatLng.LATITUDE_DEGREE_MIN;
  }
 else {
    minLat=LatLng.computeDestination(center,radius,LatLng.HEADING_SOUTH).getLat();
  }
  if ((radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius()* Math.cos(Math.toRadians(minLat))) || (radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius()* Math.cos(Math.toRadians(maxLat)))) {
    maxLng=LatLng.LONGITUDE_DEGREE_MAX;
    minLng=LatLng.LONGITUDE_DEGREE_MIN;
  }
 else {
    maxLng=LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat),Math.abs(maxLat)),center.getLng()),radius,LatLng.HEADING_EAST).getLng();
    minLng=LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat),Math.abs(maxLat)),center.getLng()),radius,LatLng.HEADING_WEST).getLng();
  }
  return new LLRect((new FloatLatLng(minLat,minLng).normalize()),(new FloatLatLng(maxLat,maxLng)).normalize());
}
