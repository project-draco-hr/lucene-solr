{
  SortField[] fields=sort.fields;
  boolean legacy=false;
  for (int i=0; i < fields.length; i++) {
    SortField field=fields[i];
    String fieldname=field.getField();
    int type=field.getType();
    if (type == SortField.AUTO) {
      int autotype=SortField.detectFieldType(reader,fieldname);
      if (autotype == SortField.STRING) {
        fields[i]=new SortField(fieldname,field.getLocale(),field.getReverse());
      }
 else {
        fields[i]=new SortField(fieldname,autotype,field.getReverse());
      }
    }
    if (field.getUseLegacySearch()) {
      legacy=true;
    }
  }
  if (legacy) {
    TopDocCollector collector=new TopFieldDocCollector(reader,sort,nDocs);
    HitCollectorWrapper hcw=new HitCollectorWrapper(collector);
    hcw.setNextReader(reader,0);
    doSearch(reader,weight,filter,hcw);
    return (TopFieldDocs)collector.topDocs();
  }
  TopFieldCollector collector=TopFieldCollector.create(sort,nDocs,fillFields,true,true,false);
  search(weight,filter,collector);
  return (TopFieldDocs)collector.topDocs();
}
