{
  if (nDocs <= 0)   throw new IllegalArgumentException("nDocs must be > 0");
  Scorer scorer=query.weight(this).scorer(reader);
  if (scorer == null)   return new TopDocs(0,new ScoreDoc[0]);
  final BitSet bits=filter != null ? filter.bits(reader) : null;
  final HitQueue hq=new HitQueue(nDocs);
  final int[] totalHits=new int[1];
  scorer.score(new HitCollector(){
    private float minScore=0.0f;
    public final void collect(    int doc,    float score){
      if (score > 0.0f && (bits == null || bits.get(doc))) {
        totalHits[0]++;
        if (hq.size() < nDocs || score >= minScore) {
          hq.insert(new ScoreDoc(doc,score));
          minScore=((ScoreDoc)hq.top()).score;
        }
      }
    }
  }
);
  ScoreDoc[] scoreDocs=new ScoreDoc[hq.size()];
  for (int i=hq.size() - 1; i >= 0; i--)   scoreDocs[i]=(ScoreDoc)hq.pop();
  return new TopDocs(totalHits[0],scoreDocs);
}
