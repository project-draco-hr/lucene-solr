{
  String test="The quick red fox jumped over the lazy brown dogs";
  NumericPayloadTokenFilter nptf=new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test),MockTokenizer.WHITESPACE,false)),3,"D");
  boolean seenDogs=false;
  CharTermAttribute termAtt=nptf.getAttribute(CharTermAttribute.class);
  TypeAttribute typeAtt=nptf.getAttribute(TypeAttribute.class);
  PayloadAttribute payloadAtt=nptf.getAttribute(PayloadAttribute.class);
  nptf.reset();
  while (nptf.incrementToken()) {
    if (termAtt.toString().equals("dogs")) {
      seenDogs=true;
      assertTrue(typeAtt.type() + " is not equal to " + "D",typeAtt.type().equals("D") == true);
      assertTrue("payloadAtt.getPayload() is null and it shouldn't be",payloadAtt.getPayload() != null);
      byte[] bytes=payloadAtt.getPayload().bytes;
      assertTrue(bytes.length + " does not equal: " + payloadAtt.getPayload().length,bytes.length == payloadAtt.getPayload().length);
      assertTrue(payloadAtt.getPayload().offset + " does not equal: " + 0,payloadAtt.getPayload().offset == 0);
      float pay=PayloadHelper.decodeFloat(bytes);
      assertTrue(pay + " does not equal: " + 3,pay == 3);
    }
 else {
      assertTrue(typeAtt.type() + " is not null and it should be",typeAtt.type().equals("word"));
    }
  }
  assertTrue(seenDogs + " does not equal: " + true,seenDogs == true);
}
