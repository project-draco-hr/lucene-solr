{
  int backupStress=stress;
  del("*:*");
  indexr(id,1,i1,100,tlong,100,t1,"now is the time for all good men",tdate_a,"2010-04-20T11:00:00Z",tdate_b,"2009-08-20T11:00:00Z","foo_f",1.414f,"foo_b","true","foo_d",1.414d);
  indexr(id,2,i1,50,tlong,50,t1,"to come to the aid of their country.",tdate_a,"2010-05-02T11:00:00Z",tdate_b,"2009-11-02T11:00:00Z");
  indexr(id,3,i1,2,tlong,2,t1,"how now brown cow",tdate_a,"2010-05-03T11:00:00Z");
  indexr(id,4,i1,-100,tlong,101,t1,"the quick fox jumped over the lazy dog",tdate_a,"2010-05-03T11:00:00Z",tdate_b,"2010-05-03T11:00:00Z");
  indexr(id,5,i1,500,tlong,500,t1,"the quick fox jumped way over the lazy dog",tdate_a,"2010-05-05T11:00:00Z");
  indexr(id,6,i1,-600,tlong,600,t1,"humpty dumpy sat on a wall");
  indexr(id,7,i1,123,tlong,123,t1,"humpty dumpy had a great fall");
  indexr(id,8,i1,876,tlong,876,tdate_b,"2010-01-05T11:00:00Z",t1,"all the kings horses and all the kings men");
  indexr(id,9,i1,7,tlong,7,t1,"couldn't put humpty together again");
  commit();
  indexr(id,10,i1,4321,tlong,4321,t1,"this too shall pass");
  indexr(id,11,i1,-987,tlong,987,t1,"An eye for eye only ends up making the whole world blind.");
  indexr(id,12,i1,379,tlong,379,t1,"Great works are performed, not by strength, but by perseverance.");
  indexr(id,13,i1,232,tlong,232,t1,"no eggs on wall, lesson learned",oddField,"odd man out");
  indexr(id,14,"SubjectTerms_mfacet",new String[]{"mathematical models","mathematical analysis"});
  indexr(id,15,"SubjectTerms_mfacet",new String[]{"test 1","test 2","test3"});
  indexr(id,16,"SubjectTerms_mfacet",new String[]{"test 1","test 2","test3"});
  String[] vals=new String[100];
  for (int i=0; i < 100; i++) {
    vals[i]="test " + i;
  }
  indexr(id,17,"SubjectTerms_mfacet",vals);
  for (int i=100; i < 150; i++) {
    indexr(id,i);
  }
  commit();
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  handle.put("_version_",SKIPVAL);
  for (  String f : fieldNames) {
    query("q","*:*","sort",f + " desc");
    query("q","*:*","sort",f + " asc");
  }
  query("q","*:*","sort",i1 + " desc");
  query("q","*:*","sort","{!func}testfunc(add(" + i1 + ",5))"+ " desc");
  query("q","*:*","sort",i1 + " asc");
  query("q","*:*","sort",i1 + " desc","fl","*,score");
  query("q","*:*","sort","n_tl1 asc","fl","*,score");
  query("q","*:*","sort","n_tl1 desc");
  handle.put("maxScore",SKIPVAL);
  query("q","{!func}" + i1);
  handle.remove("maxScore");
  query("q","{!func}" + i1,"fl","*,score");
  handle.put("highlighting",UNORDERED);
  handle.put("response",UNORDERED);
  handle.put("maxScore",SKIPVAL);
  query("q","quick");
  query("q","all","fl","id","start","0");
  query("q","all","fl","foofoofoo","start","0");
  query("q","all","fl","id","start","100");
  handle.put("score",SKIPVAL);
  query("q","quick","fl","*,score");
  query("q","all","fl","*,score","start","1");
  query("q","all","fl","*,score","start","100");
  query("q","now their fox sat had put","fl","*,score","hl","true","hl.fl",t1);
  query("q","now their fox sat had put","fl","foofoofoo","hl","true","hl.fl",t1);
  query("q","matchesnothing","fl","*,score");
  query("q","{!func}ms(NOW)","sort","score desc," + i1 + " desc","fl","id");
  query("q","*:*","rows",0,"facet","true","facet.field",t1);
  query("q","*:*","rows",0,"facet","true","facet.field",t1,"facet.limit",1);
  query("q","*:*","rows",0,"facet","true","facet.query","quick","facet.query","all","facet.query","*:*");
  query("q","*:*","rows",0,"facet","true","facet.field",t1,"facet.mincount",2);
  query("q","*:*","rows",0,"facet","true","facet.query","{!term f=foo_s}international\u00ff\u01ff\u2222\u3333");
  query("q","*:*","rows",100,"facet","true","facet.date",tdate_a,"facet.date.other","all","facet.date.start","2010-05-01T11:00:00Z","facet.date.gap","+1DAY","facet.date.end","2010-05-20T11:00:00Z");
  query("q","*:*","rows",100,"facet","true","facet.date",tdate_a,"facet.date",tdate_b,"facet.date.other","all","f." + tdate_b + ".facet.date.start","2009-05-01T11:00:00Z","f." + tdate_b + ".facet.date.gap","+3MONTHS","facet.date.start","2010-05-01T11:00:00Z","facet.date.gap","+1DAY","facet.date.end","2010-05-20T11:00:00Z");
  query("q","*:*","rows",100,"facet","true","facet.range",tlong,"facet.range.start",200,"facet.range.gap",100,"facet.range.end",900);
  query("q","*:*","rows",100,"facet","true","facet.range",tlong,"facet.range",i1,"f." + i1 + ".facet.range.start",300,"f." + i1 + ".facet.range.gap",87,"facet.range.end",900,"facet.range.start",200,"facet.range.gap",100,"f." + tlong + ".facet.range.end",900);
  query("q","*:*","fl","score","sort",i1 + " desc");
  query("q","*:*","fl",i1 + ",score","sort",i1 + " desc");
  query("q","*:*","fl",i1,"fl","score","sort",i1 + " desc");
  query("q","*:*","fl","id," + i1,"sort",i1 + " desc");
  query("q","*:*","fl","id","fl",i1,"sort",i1 + " desc");
  query("q","*:*","fl",i1,"fl","id","sort",i1 + " desc");
  query("q","*:*","fl","id","fl",nint,"fl",tint,"sort",i1 + " desc");
  query("q","*:*","fl",nint,"fl","id","fl",tint,"sort",i1 + " desc");
  stress=0;
  for (int i=0; i < 25 * RANDOM_MULTIPLIER; i++) {
    String f=fieldNames[random().nextInt(fieldNames.length)];
    if (random().nextBoolean())     f=t1;
    String q=random().nextBoolean() ? "*:*" : "id:(1 3 5 7 9 11 13) OR id:[100 TO " + random().nextInt(50) + "]";
    int nolimit=random().nextBoolean() ? -1 : 10000;
    query("q",q,"rows",0,"facet","true","facet.field",f,"facet.limit",nolimit,"facet.sort","count","facet.mincount",random().nextInt(5),"facet.offset",random().nextInt(10));
    query("q",q,"rows",0,"facet","true","facet.field",f,"facet.limit",nolimit,"facet.sort","index","facet.mincount",random().nextInt(5),"facet.offset",random().nextInt(10));
    query("q",q,"rows",0,"facet","true","facet.field",f,"facet.sort","index","facet.mincount",random().nextInt(2),"facet.offset",random().nextInt(10),"facet.limit",random().nextInt(11) - 1);
  }
  stress=backupStress;
  query("q","*:*","rows",0,"facet","true","facet.query","quick","facet.query","all","facet.query","*:*","facet.field",t1);
  query("q","*:*","rows",0,"facet","true","facet.query","{!key=myquick}quick","facet.query","{!key=myall ex=a}all","facet.query","*:*","facet.field","{!key=mykey ex=a}" + t1,"facet.field","{!key=other ex=b}" + t1,"facet.field","{!key=again ex=a,b}" + t1,"facet.field",t1,"fq","{!tag=a}id:[1 TO 7]","fq","{!tag=b}id:[3 TO 9]");
  query("q","*:*","facet","true","facet.field","{!ex=t1}SubjectTerms_mfacet","fq","{!tag=t1}SubjectTerms_mfacet:(test 1)","facet.limit","10","facet.mincount","1");
  query("q","*:*","rows",100,"facet","true","facet.field",missingField,"facet.mincount",2);
  query("q","*:*","rows",100,"facet","true","facet.field",oddField,"facet.mincount",2);
  query("q","*:*","sort",i1 + " desc","stats","true","stats.field",i1);
  handle.put("facet_fields",SKIPVAL);
  query("q","*:*","rows",0,"facet","true","facet.field",t1,"facet.limit",5,"facet.shard.limit",5);
  query("q","*:*","rows",0,"facet","true","facet.field","{!key='$a b/c \\' \\} foo'}" + t1,"facet.limit",5,"facet.shard.limit",5);
  query("q","*:*","rows",0,"facet","true","facet.field","{!key='$a'}" + t1,"facet.limit",5,"facet.shard.limit",5);
  handle.remove("facet_fields");
  if (clients.size() >= 2) {
    index(id,100,i1,107,t1,"oh no, a duplicate!");
    for (int i=0; i < clients.size(); i++) {
      index_specific(i,id,100,i1,107,t1,"oh no, a duplicate!");
    }
    commit();
    query("q","duplicate","hl","true","hl.fl",t1);
    query("q","fox duplicate horses","hl","true","hl.fl",t1);
    query("q","*:*","rows",100);
  }
  try {
    ignoreException("isShard is only acceptable");
  }
 catch (  SolrException e) {
  }
  unIgnoreException("isShard is only acceptable");
  handle.put("explain",SKIPVAL);
  handle.put("debug",UNORDERED);
  handle.put("time",SKIPVAL);
  handle.put("track",SKIP);
  query("q","now their fox sat had put","fl","*,score",CommonParams.DEBUG_QUERY,"true");
  query("q","id:[1 TO 5]",CommonParams.DEBUG_QUERY,"true");
  query("q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.TIMING);
  query("q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.RESULTS);
  query("q","id:[1 TO 5]",CommonParams.DEBUG,CommonParams.QUERY);
  ModifiableSolrParams q=new ModifiableSolrParams();
  q.set("q","*:*");
  q.set(ShardParams.SHARDS_INFO,true);
  setDistributedParams(q);
  QueryResponse rsp=queryServer(q);
  NamedList<?> sinfo=(NamedList<?>)rsp.getResponse().get(ShardParams.SHARDS_INFO);
  String shards=getShardsString();
  int cnt=StringUtils.countMatches(shards,",") + 1;
  assertNotNull("missing shard info",sinfo);
  assertEquals("should have an entry for each shard [" + sinfo + "] "+ shards,cnt,sinfo.size());
  for (int numDownServers=0; numDownServers < jettys.size() - 1; numDownServers++) {
    List<JettySolrRunner> upJettys=new ArrayList<JettySolrRunner>(jettys);
    List<SolrServer> upClients=new ArrayList<SolrServer>(clients);
    List<JettySolrRunner> downJettys=new ArrayList<JettySolrRunner>();
    List<String> upShards=new ArrayList<String>(Arrays.asList(shardsArr));
    for (int i=0; i < numDownServers; i++) {
      int indexToRemove=r.nextInt(upJettys.size());
      JettySolrRunner downJetty=upJettys.remove(indexToRemove);
      upClients.remove(indexToRemove);
      upShards.remove(indexToRemove);
      ChaosMonkey.stop(downJetty);
      downJettys.add(downJetty);
    }
    queryPartialResults(upShards,upClients,"q","*:*","facet","true","facet.field",t1,"facet.limit",5,ShardParams.SHARDS_INFO,"true",ShardParams.SHARDS_TOLERANT,"true");
    queryPartialResults(upShards,upClients,"q","*:*","facet","true","facet.query",i1 + ":[1 TO 50]",ShardParams.SHARDS_INFO,"true",ShardParams.SHARDS_TOLERANT,"true");
    queryPartialResults(upShards,upClients,"q","*:*","rows",100,"fl","id," + i1,"group","true","group.query",t1 + ":kings OR " + t1+ ":eggs","group.limit",10,"sort",i1 + " asc, id asc",CommonParams.TIME_ALLOWED,1,ShardParams.SHARDS_INFO,"true",ShardParams.SHARDS_TOLERANT,"true");
    for (    JettySolrRunner downJetty : downJettys) {
      downJetty.start();
    }
  }
  FieldCache.DEFAULT.purgeAllCaches();
  del("*:*");
  commit();
  try {
    query("q","*:*","stats","true","stats.field","stats_dt","stats.calcdistinct","true");
  }
 catch (  Exception e) {
    log.error("Exception on distrib stats request on empty index",e);
    fail("NullPointerException with stats request on empty index");
  }
}
