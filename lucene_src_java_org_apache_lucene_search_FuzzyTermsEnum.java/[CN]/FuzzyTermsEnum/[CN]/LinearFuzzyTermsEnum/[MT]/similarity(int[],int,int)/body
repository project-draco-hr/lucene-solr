{
  final int m=length;
  final int n=text.length;
  if (n == 0) {
    return realPrefixLength == 0 ? 0.0f : 1.0f - ((float)m / realPrefixLength);
  }
  if (m == 0) {
    return realPrefixLength == 0 ? 0.0f : 1.0f - ((float)n / realPrefixLength);
  }
  final int maxDistance=calculateMaxDistance(m);
  if (maxDistance < Math.abs(m - n)) {
    return 0.0f;
  }
  for (int i=0; i <= n; ++i) {
    p[i]=i;
  }
  for (int j=1; j <= m; ++j) {
    int bestPossibleEditDistance=m;
    final int t_j=target[offset + j - 1];
    d[0]=j;
    for (int i=1; i <= n; ++i) {
      if (t_j != text[i - 1]) {
        d[i]=Math.min(Math.min(d[i - 1],p[i]),p[i - 1]) + 1;
      }
 else {
        d[i]=Math.min(Math.min(d[i - 1] + 1,p[i] + 1),p[i - 1]);
      }
      bestPossibleEditDistance=Math.min(bestPossibleEditDistance,d[i]);
    }
    if (j > maxDistance && bestPossibleEditDistance > maxDistance) {
      return 0.0f;
    }
    int _d[]=p;
    p=d;
    d=_d;
  }
  return 1.0f - ((float)p[n] / (float)(realPrefixLength + Math.min(n,m)));
}
