{
  final int limit=Math.max(1,reader.maxDoc());
  if (after != null && after.doc >= limit) {
    throw new IllegalArgumentException("after.doc exceeds the number of documents in the reader: after.doc=" + after.doc + " limit="+ limit);
  }
  numHits=Math.min(numHits,limit);
  final int cappedNumHits=Math.min(numHits,limit);
  final CollectorManager<TopScoreDocCollector,TopDocs> manager=new CollectorManager<TopScoreDocCollector,TopDocs>(){
    @Override public TopScoreDocCollector newCollector() throws IOException {
      return TopScoreDocCollector.create(cappedNumHits,after);
    }
    @Override public TopDocs reduce(    Collection<TopScoreDocCollector> collectors) throws IOException {
      final TopDocs[] topDocs=new TopDocs[collectors.size()];
      int i=0;
      for (      TopScoreDocCollector collector : collectors) {
        topDocs[i++]=collector.topDocs();
      }
      return TopDocs.merge(cappedNumHits,topDocs);
    }
  }
;
  return search(query,manager);
}
