{
  int limit=reader.maxDoc();
  if (limit == 0) {
    limit=1;
  }
  if (after != null && after.doc >= limit) {
    throw new IllegalArgumentException("after.doc exceeds the number of documents in the reader: after.doc=" + after.doc + " limit="+ limit);
  }
  nDocs=Math.min(nDocs,limit);
  if (executor == null) {
    return search(leafContexts,weight,after,nDocs);
  }
 else {
    final List<Future<TopDocs>> topDocsFutures=new ArrayList<>(leafSlices.length);
    for (int i=0; i < leafSlices.length; i++) {
      topDocsFutures.add(executor.submit(new SearcherCallableNoSort(this,leafSlices[i],weight,after,nDocs)));
    }
    final TopDocs[] topDocs=new TopDocs[leafSlices.length];
    for (int i=0; i < leafSlices.length; i++) {
      try {
        topDocs[i]=topDocsFutures.get(i).get();
      }
 catch (      InterruptedException e) {
        throw new ThreadInterruptedException(e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
    return TopDocs.merge(null,nDocs,topDocs);
  }
}
