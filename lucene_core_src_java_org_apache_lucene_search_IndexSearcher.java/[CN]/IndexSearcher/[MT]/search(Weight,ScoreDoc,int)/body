{
  int limit=reader.maxDoc();
  if (limit == 0) {
    limit=1;
  }
  if (after != null && after.doc >= limit) {
    throw new IllegalArgumentException("after.doc exceeds the number of documents in the reader: after.doc=" + after.doc + " limit="+ limit);
  }
  nDocs=Math.min(nDocs,limit);
  if (executor == null) {
    return search(leafContexts,weight,after,nDocs);
  }
 else {
    final HitQueue hq=new HitQueue(nDocs,false);
    final Lock lock=new ReentrantLock();
    final ExecutionHelper<TopDocs> runner=new ExecutionHelper<>(executor);
    for (int i=0; i < leafSlices.length; i++) {
      runner.submit(new SearcherCallableNoSort(lock,this,leafSlices[i],weight,after,nDocs,hq));
    }
    int totalHits=0;
    float maxScore=Float.NEGATIVE_INFINITY;
    for (    final TopDocs topDocs : runner) {
      if (topDocs.totalHits != 0) {
        totalHits+=topDocs.totalHits;
        maxScore=Math.max(maxScore,topDocs.getMaxScore());
      }
    }
    final ScoreDoc[] scoreDocs=new ScoreDoc[hq.size()];
    for (int i=hq.size() - 1; i >= 0; i--)     scoreDocs[i]=hq.pop();
    return new TopDocs(totalHits,scoreDocs,maxScore);
  }
}
