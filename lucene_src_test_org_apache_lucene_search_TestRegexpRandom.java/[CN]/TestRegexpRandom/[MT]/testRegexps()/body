{
  random=newRandom(System.nanoTime());
  for (int i=0; i < 100 * _TestUtil.getRandomMultiplier(); i++) {
    assertPatternHits("NNNN",1);
    assertPatternHits(".NNN",10);
    assertPatternHits("N.NN",10);
    assertPatternHits("NN.N",10);
    assertPatternHits("NNN.",10);
  }
  for (int i=0; i < 10 * _TestUtil.getRandomMultiplier(); i++) {
    assertPatternHits(".{1,2}NN",100);
    assertPatternHits("N.{1,2}N",100);
    assertPatternHits("NN.{1,2}",100);
    assertPatternHits(".{1,3}N",1000);
    assertPatternHits("N.{1,3}",1000);
    assertPatternHits(".{1,4}",10000);
    assertPatternHits("NNN[3-7]",5);
    assertPatternHits("NN[2-6][3-7]",25);
    assertPatternHits("N[1-5][2-6][3-7]",125);
    assertPatternHits("[0-4][3-7][4-8][5-9]",625);
    assertPatternHits("[3-7][2-6][0-4]N",125);
    assertPatternHits("[2-6][3-7]NN",25);
    assertPatternHits("[3-7]NNN",5);
    assertPatternHits("NNN.*",10);
    assertPatternHits("NN.*",100);
    assertPatternHits("N.*",1000);
    assertPatternHits(".*",10000);
    assertPatternHits(".*NNN",10);
    assertPatternHits(".*NN",100);
    assertPatternHits(".*N",1000);
    assertPatternHits("N.*NN",10);
    assertPatternHits("NN.*N",10);
    assertPatternHits(".NN.*",100);
    assertPatternHits("N.N.*",100);
    assertPatternHits("NN..*",100);
    assertPatternHits(".N..*",1000);
    assertPatternHits("N...*",1000);
    assertPatternHits(".*NN.",100);
    assertPatternHits(".*N..",1000);
    assertPatternHits(".*...",10000);
    assertPatternHits(".*.N.",1000);
    assertPatternHits(".*..N",1000);
  }
}
