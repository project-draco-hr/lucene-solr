{
  maxDoc=state.segmentInfo.getDocCount();
  String metaName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,metaExtension);
  IndexInput in=state.directory.openInput(metaName,state.context);
  boolean success=false;
  ramBytesUsed=new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));
  final int version;
  try {
    version=CodecUtil.checkHeader(in,metaCodec,VERSION_START,VERSION_CURRENT);
    numerics=new HashMap<>();
    binaries=new HashMap<>();
    fsts=new HashMap<>();
    readFields(in,state.fieldInfos);
    if (in.getFilePointer() != in.length()) {
      throw new CorruptIndexException("did not read all bytes from file \"" + metaName + "\": read "+ in.getFilePointer()+ " vs size "+ in.length()+ " (resource: "+ in+ ")");
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(in);
    }
 else {
      IOUtils.closeWhileHandlingException(in);
    }
  }
  success=false;
  try {
    String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,dataExtension);
    data=state.directory.openInput(dataName,state.context);
    final int version2=CodecUtil.checkHeader(data,dataCodec,VERSION_START,VERSION_CURRENT);
    if (version != version2) {
      throw new CorruptIndexException("Format versions mismatch");
    }
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(this.data);
    }
  }
}
