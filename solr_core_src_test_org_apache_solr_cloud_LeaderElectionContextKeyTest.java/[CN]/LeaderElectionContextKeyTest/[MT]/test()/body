{
  ZkStateReader stateReader=cluster.getSolrClient().getZkStateReader();
  stateReader.forceUpdateCollection(TEST_COLLECTION_1);
  List<Replica> replicasOfCollection1=stateReader.getClusterState().getCollection(TEST_COLLECTION_1).getReplicas();
  List<Replica> replicasOfCollection2=stateReader.getClusterState().getCollection(TEST_COLLECTION_2).getReplicas();
  Replica replica=findLeaderReplicaWithDuplicatedName(replicasOfCollection1,replicasOfCollection2);
  assertNotNull(replica);
  SolrClient shardLeaderClient=new HttpSolrClient.Builder(replica.get("base_url").toString()).build();
  try {
    assertEquals(1L,getElectionNodes(TEST_COLLECTION_1,"shard1",stateReader.getZkClient()).size());
    List<String> collection2Shard1Nodes=getElectionNodes(TEST_COLLECTION_2,"shard1",stateReader.getZkClient());
    List<String> collection2Shard2Nodes=getElectionNodes(TEST_COLLECTION_2,"shard2",stateReader.getZkClient());
    CoreAdminRequest.unloadCore(replica.getCoreName(),shardLeaderClient);
    long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(60,TimeUnit.SECONDS);
    boolean found=false;
    while (System.nanoTime() < timeout) {
      try {
        found=getElectionNodes(TEST_COLLECTION_1,"shard1",stateReader.getZkClient()).size() == 0;
        break;
      }
 catch (      KeeperException.NoNodeException nne) {
      }
    }
    assertTrue(found);
    assertThat(collection2Shard1Nodes,CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2,"shard1",stateReader.getZkClient())));
    assertThat(collection2Shard2Nodes,CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2,"shard2",stateReader.getZkClient())));
  }
  finally {
    shardLeaderClient.close();
  }
}
