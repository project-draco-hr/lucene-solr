{
  if (child == null)   throw new IllegalArgumentException("child analyzer must not be null");
  if (log == null)   throw new IllegalArgumentException("logStream must not be null");
  return new Analyzer(){
    public TokenStream tokenStream(    final String fieldName,    Reader reader){
      return new TokenFilter(child.tokenStream(fieldName,reader)){
        private int position=-1;
        public Token next() throws IOException {
          Token token=input.next();
          log.println(toString(token));
          return token;
        }
        private String toString(        Token token){
          if (token == null)           return "[" + logName + ":EOS:"+ fieldName+ "]\n";
          position+=token.getPositionIncrement();
          return "[" + logName + ":"+ position+ ":"+ fieldName+ ":"+ token.termText()+ ":"+ token.startOffset()+ "-"+ token.endOffset()+ ":"+ token.type()+ "]";
        }
      }
;
    }
  }
;
}
