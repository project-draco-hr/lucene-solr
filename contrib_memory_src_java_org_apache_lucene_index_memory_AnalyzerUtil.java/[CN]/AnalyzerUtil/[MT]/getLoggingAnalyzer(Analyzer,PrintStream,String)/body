{
  if (child == null)   throw new IllegalArgumentException("child analyzer must not be null");
  if (log == null)   throw new IllegalArgumentException("logStream must not be null");
  return new Analyzer(){
    public TokenStream tokenStream(    final String fieldName,    Reader reader){
      return new TokenFilter(child.tokenStream(fieldName,reader)){
        private int position=-1;
        private TermAttribute termAtt=(TermAttribute)addAttribute(TermAttribute.class);
        private PositionIncrementAttribute posIncrAtt=(PositionIncrementAttribute)addAttribute(PositionIncrementAttribute.class);
        private OffsetAttribute offsetAtt=(OffsetAttribute)addAttribute(OffsetAttribute.class);
        private TypeAttribute typeAtt=(TypeAttribute)addAttribute(TypeAttribute.class);
        public boolean incrementToken() throws IOException {
          boolean hasNext=input.incrementToken();
          log.println(toString(hasNext));
          return hasNext;
        }
        private String toString(        boolean hasNext){
          if (!hasNext)           return "[" + logName + ":EOS:"+ fieldName+ "]\n";
          position+=posIncrAtt.getPositionIncrement();
          return "[" + logName + ":"+ position+ ":"+ fieldName+ ":"+ termAtt.term()+ ":"+ offsetAtt.startOffset()+ "-"+ offsetAtt.endOffset()+ ":"+ typeAtt.type()+ "]";
        }
      }
;
    }
  }
;
}
