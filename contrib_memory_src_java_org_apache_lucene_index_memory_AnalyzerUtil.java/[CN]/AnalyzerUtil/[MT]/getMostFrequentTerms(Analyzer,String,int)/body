{
  if (analyzer == null)   throw new IllegalArgumentException("analyzer must not be null");
  if (text == null)   throw new IllegalArgumentException("text must not be null");
  if (limit <= 0)   limit=Integer.MAX_VALUE;
  HashMap map=new HashMap();
  TokenStream stream=analyzer.tokenStream("",new StringReader(text));
  try {
    final Token reusableToken=new Token();
    for (Token nextToken=stream.next(reusableToken); nextToken != null; nextToken=stream.next(reusableToken)) {
      MutableInteger freq=(MutableInteger)map.get(nextToken.term());
      if (freq == null) {
        freq=new MutableInteger(1);
        map.put(nextToken.term(),freq);
      }
 else {
        freq.setValue(freq.intValue() + 1);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      stream.close();
    }
 catch (    IOException e2) {
      throw new RuntimeException(e2);
    }
  }
  Map.Entry[] entries=new Map.Entry[map.size()];
  map.entrySet().toArray(entries);
  Arrays.sort(entries,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Map.Entry e1=(Map.Entry)o1;
      Map.Entry e2=(Map.Entry)o2;
      int f1=((MutableInteger)e1.getValue()).intValue();
      int f2=((MutableInteger)e2.getValue()).intValue();
      if (f2 - f1 != 0)       return f2 - f1;
      String s1=(String)e1.getKey();
      String s2=(String)e2.getKey();
      return s1.compareTo(s2);
    }
  }
);
  int size=Math.min(limit,entries.length);
  String[] pairs=new String[size];
  for (int i=0; i < size; i++) {
    pairs[i]=entries[i].getValue() + ":" + entries[i].getKey();
  }
  return pairs;
}
