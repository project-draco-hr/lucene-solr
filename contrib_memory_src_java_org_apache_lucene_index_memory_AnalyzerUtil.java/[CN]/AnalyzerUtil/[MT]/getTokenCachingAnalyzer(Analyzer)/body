{
  if (child == null)   throw new IllegalArgumentException("child analyzer must not be null");
  return new Analyzer(){
    private final HashMap cache=new HashMap();
    public TokenStream tokenStream(    String fieldName,    Reader reader){
      Pair key=new Pair(fieldName,reader);
      final ArrayList tokens=(ArrayList)cache.get(key);
      if (tokens == null) {
        final ArrayList tokens2=new ArrayList();
        cache.put(key,tokens2);
        return new TokenFilter(child.tokenStream(fieldName,reader)){
          public Token next() throws IOException {
            Token token=input.next();
            if (token != null)             tokens2.add(token);
            return token;
          }
        }
;
      }
 else {
        return new TokenStream(){
          private Iterator iter=tokens.iterator();
          public Token next(){
            if (!iter.hasNext())             return null;
            return (Token)iter.next();
          }
        }
;
      }
    }
  }
;
}
