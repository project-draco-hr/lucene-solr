{
  this.directory=directory;
  this.segmentName=si.name;
  String dataFileName=IndexFileNames.segmentFileName(segmentName,"",Lucene50CompoundFormat.DATA_EXTENSION);
  String entriesFileName=IndexFileNames.segmentFileName(segmentName,"",Lucene50CompoundFormat.ENTRIES_EXTENSION);
  this.entries=readEntries(si.getId(),directory,entriesFileName);
  boolean success=false;
  long expectedLength=CodecUtil.indexHeaderLength(Lucene50CompoundFormat.DATA_CODEC,"");
  for (  Map.Entry<String,FileEntry> ent : entries.entrySet()) {
    expectedLength+=ent.getValue().length;
  }
  expectedLength+=CodecUtil.footerLength();
  handle=directory.openInput(dataFileName,context);
  try {
    CodecUtil.checkIndexHeader(handle,Lucene50CompoundFormat.DATA_CODEC,version,version,si.getId(),"");
    CodecUtil.retrieveChecksum(handle);
    if (handle.length() != expectedLength) {
      throw new CorruptIndexException("length should be " + expectedLength + " bytes, but is "+ handle.length()+ " instead",handle);
    }
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(handle);
    }
  }
}
