{
  SolrServer server=getSolrServer();
  server.deleteByQuery("*:*");
  server.commit();
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField("id","unique");
  doc.addField("name","gadget");
  doc.addField("price_f",1);
  server.add(doc);
  server.commit();
  SolrQuery q=new SolrQuery("*:*");
  q.setFields("id","price_f","name","_version_");
  QueryResponse resp=server.query(q);
  assertEquals("Doc count does not match",1,resp.getResults().getNumFound());
  Long version=(Long)resp.getResults().get(0).getFirstValue("_version_");
  assertNotNull("no version returned",version);
  assertEquals(1.0f,resp.getResults().get(0).getFirstValue("price_f"));
  HashMap<String,Object> oper=new HashMap<>();
  oper.put("set",100);
  doc=new SolrInputDocument();
  doc.addField("id","unique");
  doc.addField("_version_",version + 1);
  doc.addField("price_f",oper);
  try {
    server.add(doc);
    if (server instanceof HttpSolrServer) {
      fail("Operation should throw an exception!");
    }
 else {
      server.commit();
      assertTrue("CUSS did not report an error",((Throwable)getCUSSExceptionField(server).get(server)).getMessage().contains("Conflict"));
    }
  }
 catch (  SolrException se) {
    assertTrue("No identifiable error message",se.getMessage().contains("version conflict for unique"));
  }
  doc=new SolrInputDocument();
  doc.addField("id","unique");
  doc.addField("_version_",version);
  doc.addField("price_f",oper);
  server.add(doc);
  server.commit();
  resp=server.query(q);
  assertEquals("Doc count does not match",1,resp.getResults().getNumFound());
  assertEquals("price was not updated?",100.0f,resp.getResults().get(0).getFirstValue("price_f"));
  assertEquals("no name?","gadget",resp.getResults().get(0).getFirstValue("name"));
  oper.put("set",200);
  doc=new SolrInputDocument();
  doc.addField("id","unique");
  doc.addField("price_f",oper);
  server.add(doc);
  server.commit();
  resp=server.query(q);
  assertEquals("Doc count does not match",1,resp.getResults().getNumFound());
  assertEquals("price was not updated?",200.0f,resp.getResults().get(0).getFirstValue("price_f"));
  assertEquals("no name?","gadget",resp.getResults().get(0).getFirstValue("name"));
}
