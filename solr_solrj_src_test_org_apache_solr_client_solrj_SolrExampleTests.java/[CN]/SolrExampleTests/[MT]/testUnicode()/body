{
  Random random=random();
  int numIterations=atLeast(3);
  SolrServer server=getSolrServer();
  ResponseParser oldParser=null;
  if (server instanceof HttpSolrServer) {
    HttpSolrServer cserver=(HttpSolrServer)server;
    oldParser=cserver.getParser();
  }
  try {
    for (int iteration=0; iteration < numIterations; iteration++) {
      if (server instanceof HttpSolrServer) {
        if (random.nextBoolean()) {
          ((HttpSolrServer)server).setParser(new BinaryResponseParser());
        }
 else {
          ((HttpSolrServer)server).setParser(new XMLResponseParser());
        }
      }
      int numDocs=_TestUtil.nextInt(random(),1,10 * RANDOM_MULTIPLIER);
      server.deleteByQuery("*:*");
      List<SolrInputDocument> docs=new ArrayList<SolrInputDocument>();
      for (int i=0; i < numDocs; i++) {
        SolrInputDocument doc=new SolrInputDocument();
        doc.addField("id","" + i);
        doc.addField("unicode_s",randomTestString(30));
        docs.add(doc);
      }
      server.add(docs);
      server.commit();
      SolrQuery query=new SolrQuery();
      query.setQuery("*:*");
      query.setRows(numDocs);
      QueryResponse rsp=server.query(query);
      for (int i=0; i < numDocs; i++) {
        String expected=(String)docs.get(i).getFieldValue("unicode_s");
        String actual=(String)rsp.getResults().get(i).getFieldValue("unicode_s");
        assertEquals(expected,actual);
      }
    }
  }
  finally {
    if (oldParser != null) {
      ((HttpSolrServer)server).setParser(oldParser);
    }
  }
}
