{
  Random random=random();
  int numIterations=atLeast(3);
  SolrClient client=getSolrClient();
  ResponseParser oldParser=null;
  if (client instanceof HttpSolrClient) {
    HttpSolrClient httpSolrClient=(HttpSolrClient)client;
    oldParser=httpSolrClient.getParser();
  }
  try {
    for (int iteration=0; iteration < numIterations; iteration++) {
      if (client instanceof HttpSolrClient) {
        if (random.nextBoolean()) {
          ((HttpSolrClient)client).setParser(new BinaryResponseParser());
        }
 else {
          ((HttpSolrClient)client).setParser(new XMLResponseParser());
        }
      }
      int numDocs=TestUtil.nextInt(random(),1,10 * RANDOM_MULTIPLIER);
      client.deleteByQuery("*:*");
      List<SolrInputDocument> docs=new ArrayList<>();
      for (int i=0; i < numDocs; i++) {
        SolrInputDocument doc=new SolrInputDocument();
        doc.addField("id","" + i);
        doc.addField("unicode_s",randomTestString(30));
        docs.add(doc);
      }
      client.add(docs);
      client.commit();
      SolrQuery query=new SolrQuery();
      query.setQuery("*:*");
      query.setRows(numDocs);
      QueryResponse rsp=client.query(query);
      for (int i=0; i < numDocs; i++) {
        String expected=(String)docs.get(i).getFieldValue("unicode_s");
        String actual=(String)rsp.getResults().get(i).getFieldValue("unicode_s");
        assertEquals(expected,actual);
      }
    }
  }
  finally {
    if (oldParser != null) {
      ((HttpSolrClient)client).setParser(oldParser);
    }
  }
}
