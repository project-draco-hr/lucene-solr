{
  SolrServer server=getSolrServer();
  server.deleteByQuery("*:*");
  server.commit();
  assertNumFound("*:*",0);
  int id=1;
  ArrayList<SolrInputDocument> docs=new ArrayList<>();
  docs.add(makeTestDoc("id",id++,"features","aaa","manu","apple","cat","a","inStock",true,"popularity",12,"price",.017));
  docs.add(makeTestDoc("id",id++,"features","aaa","manu","lg","cat","a","inStock",false,"popularity",13,"price",16.04));
  docs.add(makeTestDoc("id",id++,"features","aaa","manu","samsung","cat","a","inStock",true,"popularity",14,"price",12.34));
  docs.add(makeTestDoc("id",id++,"features","aaa","manu","lg","cat","b","inStock",false,"popularity",24,"price",51.39));
  docs.add(makeTestDoc("id",id++,"features","aaa","manu","nokia","cat","b","inStock",true,"popularity",28,"price",131.39));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","ztc","cat","a","inStock",false,"popularity",32));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","htc","cat","a","inStock",true,"popularity",31,"price",131.39));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","apple","cat","b","inStock",false,"popularity",36));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","lg","cat","b","inStock",true,"popularity",37,"price",1.39));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","ztc","cat","b","inStock",false,"popularity",38,"price",47.98));
  docs.add(makeTestDoc("id",id++,"features","bbb","manu","ztc","cat","b","inStock",true,"popularity",-38));
  docs.add(makeTestDoc("id",id++,"cat","b"));
  server.add(docs);
  server.commit();
  for (  String pivot : new String[]{"{!key=pivot_key stats=s1}features,manu","{!key=pivot_key stats=s1}features,manu,cat","{!key=pivot_key stats=s1}features,manu,cat,inStock"}) {
    SolrQuery query=new SolrQuery("*:*");
    query.addFacetPivotField(pivot);
    query.setFacetLimit(1);
    query.addGetFieldStatistics("{!key=foo_price tag=s1}price","{!tag=s1}popularity");
    query.setFacetMinCount(0);
    query.setRows(0);
    QueryResponse rsp=server.query(query);
    Map<String,FieldStatsInfo> map=rsp.getFieldStatsInfo();
    FieldStatsInfo intValueStatsInfo=map.get("popularity");
    assertEquals(-38.0d,intValueStatsInfo.getMin());
    assertEquals(38.0d,intValueStatsInfo.getMax());
    assertEquals(11l,intValueStatsInfo.getCount().longValue());
    assertEquals(1l,intValueStatsInfo.getMissing().longValue());
    assertEquals(227.0d,intValueStatsInfo.getSum());
    assertEquals(20.636363636363637d,intValueStatsInfo.getMean());
    FieldStatsInfo doubleValueStatsInfo=map.get("foo_price");
    assertEquals(.017d,(double)doubleValueStatsInfo.getMin(),.01d);
    assertEquals(131.39d,(double)doubleValueStatsInfo.getMax(),.01d);
    assertEquals(8l,doubleValueStatsInfo.getCount().longValue());
    assertEquals(4l,doubleValueStatsInfo.getMissing().longValue());
    assertEquals(391.93d,(double)doubleValueStatsInfo.getSum(),.01d);
    assertEquals(48.99d,(double)doubleValueStatsInfo.getMean(),.01d);
    NamedList<List<PivotField>> pivots=rsp.getFacetPivot();
    assertTrue(!pivots.get("pivot_key").isEmpty());
    List<PivotField> list=pivots.get("pivot_key");
    PivotField featuresBBBPivot=list.get(0);
    assertEquals("features",featuresBBBPivot.getField());
    assertEquals("bbb",featuresBBBPivot.getValue());
    assertNotNull(featuresBBBPivot.getFieldStatsInfo());
    assertEquals(2,featuresBBBPivot.getFieldStatsInfo().size());
    FieldStatsInfo featuresBBBPivotStats1=featuresBBBPivot.getFieldStatsInfo().get("foo_price");
    assertEquals("foo_price",featuresBBBPivotStats1.getName());
    assertEquals(131.39d,(double)featuresBBBPivotStats1.getMax(),.01d);
    assertEquals(1.38d,(double)featuresBBBPivotStats1.getMin(),.01d);
    assertEquals(180.75d,(double)featuresBBBPivotStats1.getSum(),.01d);
    assertEquals(3,(long)featuresBBBPivotStats1.getCount());
    assertEquals(3,(long)featuresBBBPivotStats1.getMissing());
    assertEquals(60.25d,(double)featuresBBBPivotStats1.getMean(),.01d);
    assertEquals(65.86d,featuresBBBPivotStats1.getStddev(),.01d);
    assertEquals(19567.34d,featuresBBBPivotStats1.getSumOfSquares(),.01d);
    FieldStatsInfo featuresBBBPivotStats2=featuresBBBPivot.getFieldStatsInfo().get("popularity");
    assertEquals("popularity",featuresBBBPivotStats2.getName());
    assertEquals(38.0d,(double)featuresBBBPivotStats2.getMax(),.01d);
    assertEquals(-38.0d,(double)featuresBBBPivotStats2.getMin(),.01d);
    assertEquals(136.0d,(double)featuresBBBPivotStats2.getSum(),.01d);
    assertEquals(6,(long)featuresBBBPivotStats2.getCount());
    assertEquals(0,(long)featuresBBBPivotStats2.getMissing());
    assertEquals(22.66d,(double)featuresBBBPivotStats2.getMean(),.01d);
    assertEquals(29.85d,featuresBBBPivotStats2.getStddev(),.01d);
    assertEquals(7538.0d,featuresBBBPivotStats2.getSumOfSquares(),.01d);
    List<PivotField> nestedPivotList=featuresBBBPivot.getPivot();
    PivotField featuresBBBPivotPivot=nestedPivotList.get(0);
    assertEquals("manu",featuresBBBPivotPivot.getField());
    assertEquals("ztc",featuresBBBPivotPivot.getValue());
    assertNotNull(featuresBBBPivotPivot.getFieldStatsInfo());
    assertEquals(2,featuresBBBPivotPivot.getFieldStatsInfo().size());
    FieldStatsInfo featuresBBBManuZtcPivotStats1=featuresBBBPivotPivot.getFieldStatsInfo().get("foo_price");
    assertEquals("foo_price",featuresBBBManuZtcPivotStats1.getName());
    assertEquals(47.97d,(double)featuresBBBManuZtcPivotStats1.getMax(),.01d);
    assertEquals(47.97d,(double)featuresBBBManuZtcPivotStats1.getMin(),.01d);
    assertEquals(47.97d,(double)featuresBBBManuZtcPivotStats1.getSum(),.01d);
    assertEquals(1,(long)featuresBBBManuZtcPivotStats1.getCount());
    assertEquals(2,(long)featuresBBBManuZtcPivotStats1.getMissing());
    assertEquals(47.97d,(double)featuresBBBManuZtcPivotStats1.getMean(),.01d);
    assertEquals(0.0d,featuresBBBManuZtcPivotStats1.getStddev(),.01d);
    assertEquals(2302.08d,featuresBBBManuZtcPivotStats1.getSumOfSquares(),.01d);
    FieldStatsInfo featuresBBBManuZtcPivotStats2=featuresBBBPivotPivot.getFieldStatsInfo().get("popularity");
    assertEquals("popularity",featuresBBBManuZtcPivotStats2.getName());
    assertEquals(38.0d,(double)featuresBBBManuZtcPivotStats2.getMax(),.01d);
    assertEquals(-38.0d,(double)featuresBBBManuZtcPivotStats2.getMin(),.01d);
    assertEquals(32.0,(double)featuresBBBManuZtcPivotStats2.getSum(),.01d);
    assertEquals(3,(long)featuresBBBManuZtcPivotStats2.getCount());
    assertEquals(0,(long)featuresBBBManuZtcPivotStats2.getMissing());
    assertEquals(10.66d,(double)featuresBBBManuZtcPivotStats2.getMean(),.01d);
    assertEquals(42.25d,featuresBBBManuZtcPivotStats2.getStddev(),.01d);
    assertEquals(3912.0d,featuresBBBManuZtcPivotStats2.getSumOfSquares(),.01d);
  }
}
