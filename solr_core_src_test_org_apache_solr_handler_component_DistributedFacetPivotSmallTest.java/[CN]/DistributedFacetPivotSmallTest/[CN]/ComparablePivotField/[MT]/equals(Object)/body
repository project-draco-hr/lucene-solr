{
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!obj.getClass().isAssignableFrom(PivotField.class))   return false;
  PivotField other=(PivotField)obj;
  if (getCount() != other.getCount())   return false;
  if (getField() == null) {
    if (other.getField() != null)     return false;
  }
 else   if (!getField().equals(other.getField()))   return false;
  if (getPivot() == null) {
    if (other.getPivot() != null)     return false;
  }
 else   if (!getPivot().equals(other.getPivot()))   return false;
  if (getValue() == null) {
    if (other.getValue() != null)     return false;
  }
 else   if (!getValue().equals(other.getValue()))   return false;
  if (getFacetRanges() == null) {
    if (other.getFacetRanges() != null)     return false;
  }
 else {
    if (getFacetRanges().size() != other.getFacetRanges().size())     return false;
    for (    RangeFacet entry : getFacetRanges()) {
      boolean found=false;
      for (      RangeFacet otherRange : other.getFacetRanges()) {
        if (otherRange.getName().equals(entry.getName())) {
          found=true;
          if (!entry.getGap().equals(otherRange.getGap()))           return false;
          if (!entry.getStart().equals(otherRange.getStart()))           return false;
          if (!entry.getEnd().equals(otherRange.getEnd()))           return false;
          List<RangeFacet.Count> myCounts=entry.getCounts();
          List<RangeFacet.Count> otherRangeCounts=otherRange.getCounts();
          if ((myCounts == null && otherRangeCounts != null) || (myCounts != null && otherRangeCounts == null) || (myCounts.size() != otherRangeCounts.size()))           return false;
          for (int i=0; i < myCounts.size(); i++) {
            if (!myCounts.get(i).getValue().equals(otherRangeCounts.get(i).getValue()))             return false;
            if (myCounts.get(i).getCount() != otherRangeCounts.get(i).getCount())             return false;
          }
        }
      }
      if (!found)       return false;
    }
  }
  if (getFacetQuery() == null) {
    if (other.getFacetQuery() != null)     return false;
  }
 else {
    if (getFacetQuery().size() != other.getFacetQuery().size())     return false;
    for (    Map.Entry<String,Integer> entry : getFacetQuery().entrySet()) {
      Integer otherQCount=other.getFacetQuery().get(entry.getKey());
      if (otherQCount == null || otherQCount != entry.getValue())       return false;
    }
  }
  return true;
}
