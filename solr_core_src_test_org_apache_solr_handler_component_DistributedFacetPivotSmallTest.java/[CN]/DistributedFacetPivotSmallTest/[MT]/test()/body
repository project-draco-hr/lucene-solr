{
  del("*:*");
  index(id,19,"place_t","cardiff dublin","company_t","microsoft polecat","price_ti","15");
  index(id,20,"place_t","dublin","company_t","polecat microsoft null","price_ti","19","solo_i",42,"solo_s","lonely","solo_dt","1976-03-06T01:23:45Z");
  index(id,21,"place_t","london la dublin","company_t","microsoft fujitsu null polecat","price_ti","29");
  index(id,22,"place_t","krakow london cardiff","company_t","polecat null bbc","price_ti","39");
  index(id,23,"place_t","london","company_t","","price_ti","29");
  index(id,24,"place_t","la","company_t","");
  index(id,25,"company_t","microsoft polecat null fujitsu null bbc","price_ti","59");
  index(id,26,"place_t","krakow","company_t","null");
  index(id,27,"place_t","krakow cardiff dublin london la","company_t","null microsoft polecat bbc fujitsu");
  index(id,28,"place_t","cork","company_t","fujitsu rte");
  commit();
  handle.clear();
  handle.put("QTime",SKIPVAL);
  handle.put("timestamp",SKIPVAL);
  handle.put("maxScore",SKIPVAL);
  final ModifiableSolrParams params=new ModifiableSolrParams();
  setDistributedParams(params);
  params.add("q","*:*");
  params.add("facet","true");
  params.add("facet.pivot","place_t,company_t");
  QueryResponse rsp=queryServer(params);
  List<PivotField> expectedPlacePivots=new UnorderedEqualityArrayList<PivotField>();
  List<PivotField> expectedCardiffPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedCardiffPivots.add(new ComparablePivotField("company_t","microsoft",2,null));
  expectedCardiffPivots.add(new ComparablePivotField("company_t","null",2,null));
  expectedCardiffPivots.add(new ComparablePivotField("company_t","bbc",2,null));
  expectedCardiffPivots.add(new ComparablePivotField("company_t","polecat",3,null));
  expectedCardiffPivots.add(new ComparablePivotField("company_t","fujitsu",1,null));
  List<PivotField> expectedDublinPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedDublinPivots.add(new ComparablePivotField("company_t","polecat",4,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","microsoft",4,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","bbc",1,null));
  List<PivotField> expectedLondonPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedLondonPivots.add(new ComparablePivotField("company_t","polecat",3,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","microsoft",2,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","bbc",2,null));
  List<PivotField> expectedLAPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedLAPivots.add(new ComparablePivotField("company_t","microsoft",2,null));
  expectedLAPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedLAPivots.add(new ComparablePivotField("company_t","null",2,null));
  expectedLAPivots.add(new ComparablePivotField("company_t","bbc",1,null));
  expectedLAPivots.add(new ComparablePivotField("company_t","polecat",2,null));
  List<PivotField> expectedKrakowPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedKrakowPivots.add(new ComparablePivotField("company_t","polecat",2,null));
  expectedKrakowPivots.add(new ComparablePivotField("company_t","bbc",2,null));
  expectedKrakowPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedKrakowPivots.add(new ComparablePivotField("company_t","fujitsu",1,null));
  expectedKrakowPivots.add(new ComparablePivotField("company_t","microsoft",1,null));
  List<PivotField> expectedCorkPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedCorkPivots.add(new ComparablePivotField("company_t","fujitsu",1,null));
  expectedCorkPivots.add(new ComparablePivotField("company_t","rte",1,null));
  expectedPlacePivots.add(new ComparablePivotField("place_t","dublin",4,expectedDublinPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","cardiff",3,expectedCardiffPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","london",4,expectedLondonPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","la",3,expectedLAPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","krakow",3,expectedKrakowPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","cork",1,expectedCorkPivots));
  List<PivotField> placePivots=rsp.getFacetPivot().get("place_t,company_t");
  testOrderedPivotsStringEquality(expectedPlacePivots,placePivots);
  assertEquals(expectedPlacePivots,placePivots);
  params.set(FacetParams.FACET_SORT,FacetParams.FACET_SORT_COUNT);
  rsp=queryServer(params);
  placePivots=rsp.getFacetPivot().get("place_t,company_t");
  testCountSorting(placePivots);
  params.set(FacetParams.FACET_LIMIT,2);
  rsp=queryServer(params);
  expectedPlacePivots=new UnorderedEqualityArrayList<PivotField>();
  expectedDublinPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedDublinPivots.add(new ComparablePivotField("company_t","polecat",4,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","microsoft",4,null));
  expectedLondonPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedLondonPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","polecat",3,null));
  expectedPlacePivots.add(new ComparablePivotField("place_t","dublin",4,expectedDublinPivots));
  expectedPlacePivots.add(new ComparablePivotField("place_t","london",4,expectedLondonPivots));
  placePivots=rsp.getFacetPivot().get("place_t,company_t");
  assertEquals(expectedPlacePivots,placePivots);
  params.remove(FacetParams.FACET_LIMIT);
  params.set("f.place_t." + FacetParams.FACET_LIMIT,1);
  params.set("f.company_t." + FacetParams.FACET_LIMIT,4);
  rsp=queryServer(params);
  expectedPlacePivots=new UnorderedEqualityArrayList<PivotField>();
  expectedDublinPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedDublinPivots.add(new ComparablePivotField("company_t","microsoft",4,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","polecat",4,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedDublinPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedLondonPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedLondonPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","polecat",3,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","bbc",2,null));
  expectedLondonPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedCardiffPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedCardiffPivots.add(new ComparablePivotField("company_t","polecat",3,null));
  expectedKrakowPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedKrakowPivots.add(new ComparablePivotField("company_t","null",3,null));
  expectedLAPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedLAPivots.add(new ComparablePivotField("company_t","fujitsu",2,null));
  expectedCorkPivots=new UnorderedEqualityArrayList<PivotField>();
  expectedCorkPivots.add(new ComparablePivotField("company_t","fujitsu",1,null));
  expectedPlacePivots.add(new ComparablePivotField("place_t","dublin",4,expectedDublinPivots));
  placePivots=rsp.getFacetPivot().get("place_t,company_t");
  assertEquals(expectedPlacePivots,placePivots);
  params.remove("f.company_t." + FacetParams.FACET_LIMIT);
  params.remove("f.place_t." + FacetParams.FACET_LIMIT);
  params.set(FacetParams.FACET_LIMIT,2);
  index("id",777);
  commit();
  SolrParams missingA=params("q","*:*","rows","0","facet","true","facet.pivot","place_t,company_t",FacetParams.FACET_MISSING,"true");
  SolrParams missingB=SolrParams.wrapDefaults(missingA,params(FacetParams.FACET_LIMIT,"4","facet.sort","index"));
  for (  SolrParams p : new SolrParams[]{missingA,missingB}) {
    rsp=query(p);
    placePivots=rsp.getFacetPivot().get("place_t,company_t");
    assertTrue("not enough values for pivot: " + p + " => "+ placePivots,1 < placePivots.size());
    PivotField missing=placePivots.get(placePivots.size() - 1);
    assertNull("not the missing place value: " + p,missing.getValue());
    assertEquals("wrong missing place count: " + p,2,missing.getCount());
    assertTrue("not enough sub-pivots for missing place: " + p + " => "+ missing.getPivot(),1 < missing.getPivot().size());
    missing=missing.getPivot().get(missing.getPivot().size() - 1);
    assertNull("not the missing company value: " + p,missing.getValue());
    assertEquals("wrong missing company count: " + p,1,missing.getCount());
    assertNull("company shouldn't have sub-pivots: " + p,missing.getPivot());
  }
  for (  SolrParams variableParams : new SolrParams[]{params("facet.overrequest.count","0","facet.overrequest.ratio","0"),params()}) {
    SolrParams p=SolrParams.wrapDefaults(params("q","*:*","rows","0","facet","true","facet.pivot","company_t","facet.sort","index","facet.pivot.mincount","4","facet.limit","4"),variableParams);
    try {
      List<PivotField> pivots=query(p).getFacetPivot().get("company_t");
      assertEquals(4,pivots.size());
      assertEquals("fujitsu",pivots.get(0).getValue());
      assertEquals(4,pivots.get(0).getCount());
      assertEquals("microsoft",pivots.get(1).getValue());
      assertEquals(5,pivots.get(1).getCount());
      assertEquals("null",pivots.get(2).getValue());
      assertEquals(6,pivots.get(2).getCount());
      assertEquals("polecat",pivots.get(3).getValue());
      assertEquals(6,pivots.get(3).getCount());
    }
 catch (    AssertionFailedError ae) {
      throw new AssertionError(ae.getMessage() + " <== " + p.toString(),ae);
    }
  }
  for (  SolrParams variableParams : new SolrParams[]{params("facet.overrequest.count","0","facet.overrequest.ratio","0"),params()}) {
    SolrParams p=SolrParams.wrapDefaults(params("q","*:*","rows","0","facet","true","facet.pivot","company_t","facet.sort","index","facet.pivot.mincount","4","facet.offset","1","facet.limit","4"),variableParams);
    try {
      List<PivotField> pivots=query(p).getFacetPivot().get("company_t");
      assertEquals(3,pivots.size());
      assertEquals("microsoft",pivots.get(0).getValue());
      assertEquals(5,pivots.get(0).getCount());
      assertEquals("null",pivots.get(1).getValue());
      assertEquals(6,pivots.get(1).getCount());
      assertEquals("polecat",pivots.get(2).getValue());
      assertEquals(6,pivots.get(2).getCount());
    }
 catch (    AssertionFailedError ae) {
      throw new AssertionError(ae.getMessage() + " <== " + p.toString(),ae);
    }
  }
  for (  SolrParams variableParams : new SolrParams[]{params("facet.pivot.mincount","4","facet.offset","2"),params("facet.pivot.mincount","5","facet.offset","1"),params("facet.pivot.mincount","6","facet.offset","0")}) {
    SolrParams p=SolrParams.wrapDefaults(params("q","*:*","rows","0","facet","true","facet.limit","1","facet.sort","index","facet.overrequest.ratio","0","facet.pivot","company_t"),variableParams);
    try {
      List<PivotField> pivots=query(p).getFacetPivot().get("company_t");
      assertEquals(1,pivots.size());
      assertEquals(pivots.toString(),"null",pivots.get(0).getValue());
      assertEquals(pivots.toString(),6,pivots.get(0).getCount());
    }
 catch (    AssertionFailedError ae) {
      throw new AssertionError(ae.getMessage() + " <== " + p.toString(),ae);
    }
  }
  doTestDeepPivotStats(false);
  doTestDeepPivotStats(true);
  doTestPivotStatsFromOneShard();
  testFacetPivotRange();
  testFacetPivotQuery();
  testNegativeFacetQuery();
  testNegativeRangeQuery();
  testPivotFacetRangeAndQuery();
}
