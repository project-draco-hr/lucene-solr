{
  FacetInfo fi=rb._facetInfo;
  for (  ShardResponse srsp : sreq.responses) {
    int shardNum=rb.getShardNum(srsp.getShard());
    NamedList facet_counts=null;
    try {
      facet_counts=(NamedList)srsp.getSolrResponse().getResponse().get("facet_counts");
    }
 catch (    Exception ex) {
      if (rb.req.getParams().getBool(ShardParams.SHARDS_TOLERANT,false)) {
        continue;
      }
      throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to read facet info for shard: " + srsp.getShard(),ex);
    }
    NamedList facet_queries=(NamedList)facet_counts.get("facet_queries");
    if (facet_queries != null) {
      for (int i=0; i < facet_queries.size(); i++) {
        String returnedKey=facet_queries.getName(i);
        long count=((Number)facet_queries.getVal(i)).longValue();
        QueryFacet qf=fi.queryFacets.get(returnedKey);
        qf.count+=count;
      }
    }
    NamedList facet_fields=(NamedList)facet_counts.get("facet_fields");
    if (facet_fields != null) {
      for (      DistribFieldFacet dff : fi.facets.values()) {
        dff.add(shardNum,(NamedList)facet_fields.get(dff.getKey()),dff.initialLimit);
      }
    }
    @SuppressWarnings("unchecked") SimpleOrderedMap<SimpleOrderedMap<Object>> facet_dates=(SimpleOrderedMap<SimpleOrderedMap<Object>>)facet_counts.get("facet_dates");
    if (facet_dates != null) {
      for (      Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_dates) {
        final String field=entry.getKey();
        if (fi.dateFacets.get(field) == null) {
          fi.dateFacets.add(field,entry.getValue());
        }
 else {
          SimpleOrderedMap<Object> shardFieldValues=entry.getValue();
          SimpleOrderedMap<Object> existFieldValues=fi.dateFacets.get(field);
          for (          Map.Entry<String,Object> existPair : existFieldValues) {
            final String key=existPair.getKey();
            if (key.equals("gap") || key.equals("end") || key.equals("start")) {
              continue;
            }
            Integer newValue=(Integer)shardFieldValues.get(key);
            if (null != newValue) {
              Integer oldValue=((Integer)existPair.getValue());
              existPair.setValue(oldValue + newValue);
            }
          }
        }
      }
    }
    @SuppressWarnings("unchecked") SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges=(SimpleOrderedMap<SimpleOrderedMap<Object>>)facet_counts.get("facet_ranges");
    if (facet_ranges != null) {
      for (      Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {
        final String field=entry.getKey();
        if (fi.rangeFacets.get(field) == null) {
          fi.rangeFacets.add(field,entry.getValue());
        }
 else {
          @SuppressWarnings("unchecked") NamedList<Integer> shardFieldValues=(NamedList<Integer>)entry.getValue().get("counts");
          @SuppressWarnings("unchecked") NamedList<Integer> existFieldValues=(NamedList<Integer>)fi.rangeFacets.get(field).get("counts");
          for (          Map.Entry<String,Integer> existPair : existFieldValues) {
            final String key=existPair.getKey();
            Integer newValue=shardFieldValues.get(key);
            if (null != newValue) {
              Integer oldValue=existPair.getValue();
              existPair.setValue(oldValue + newValue);
            }
          }
        }
      }
    }
  }
  for (  DistribFieldFacet dff : fi.facets.values()) {
    if (dff.initialLimit <= 0 && dff.initialMincount <= 1)     continue;
    if (dff.minCount <= 1 && dff.sort.equals(FacetParams.FACET_SORT_INDEX))     continue;
    @SuppressWarnings("unchecked") List<String>[] tmp=(List<String>[])new List[rb.shards.length];
    dff._toRefine=tmp;
    ShardFacetCount[] counts=dff.getCountSorted();
    int ntop=Math.min(counts.length,dff.limit >= 0 ? dff.offset + dff.limit : Integer.MAX_VALUE);
    long smallestCount=counts.length == 0 ? 0 : counts[ntop - 1].count;
    for (int i=0; i < counts.length; i++) {
      ShardFacetCount sfc=counts[i];
      boolean needRefinement=false;
      if (i < ntop) {
        needRefinement=true;
      }
 else {
        long maxCount=sfc.count;
        for (int shardNum=0; shardNum < rb.shards.length; shardNum++) {
          FixedBitSet fbs=dff.counted[shardNum];
          if (fbs != null && (sfc.termNum >= fbs.length() || !fbs.get(sfc.termNum))) {
            maxCount+=dff.maxPossible(sfc,shardNum);
          }
        }
        if (maxCount >= smallestCount) {
          needRefinement=true;
        }
      }
      if (needRefinement) {
        for (int shardNum=0; shardNum < rb.shards.length; shardNum++) {
          FixedBitSet fbs=dff.counted[shardNum];
          if (fbs != null && (sfc.termNum >= fbs.length() || !fbs.get(sfc.termNum)) && dff.maxPossible(sfc,shardNum) > 0) {
            dff.needRefinements=true;
            List<String> lst=dff._toRefine[shardNum];
            if (lst == null) {
              lst=dff._toRefine[shardNum]=new ArrayList<>();
            }
            lst.add(sfc.name);
          }
        }
      }
    }
  }
}
