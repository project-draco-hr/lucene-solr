{
  if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)   return;
  FacetInfo fi=rb._facetInfo;
  NamedList<Object> facet_counts=new SimpleOrderedMap<>();
  NamedList<Number> facet_queries=new SimpleOrderedMap<>();
  facet_counts.add("facet_queries",facet_queries);
  for (  QueryFacet qf : fi.queryFacets.values()) {
    facet_queries.add(qf.getKey(),num(qf.count));
  }
  NamedList<Object> facet_fields=new SimpleOrderedMap<>();
  facet_counts.add("facet_fields",facet_fields);
  for (  DistribFieldFacet dff : fi.facets.values()) {
    NamedList<Object> fieldCounts=new NamedList<>();
    facet_fields.add(dff.getKey(),fieldCounts);
    ShardFacetCount[] counts;
    boolean countSorted=dff.sort.equals(FacetParams.FACET_SORT_COUNT);
    if (countSorted) {
      counts=dff.countSorted;
      if (counts == null || dff.needRefinements) {
        counts=dff.getCountSorted();
      }
    }
 else     if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {
      counts=dff.getLexSorted();
    }
 else {
      counts=dff.getLexSorted();
    }
    if (countSorted) {
      int end=dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit,counts.length);
      for (int i=dff.offset; i < end; i++) {
        if (counts[i].count < dff.minCount) {
          break;
        }
        fieldCounts.add(counts[i].name,num(counts[i].count));
      }
    }
 else {
      int off=dff.offset;
      int lim=dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;
      for (int i=0; i < counts.length; i++) {
        long count=counts[i].count;
        if (count < dff.minCount)         continue;
        if (off > 0) {
          off--;
          continue;
        }
        if (lim <= 0) {
          break;
        }
        lim--;
        fieldCounts.add(counts[i].name,num(count));
      }
    }
    if (dff.missing) {
      fieldCounts.add(null,num(dff.missingCount));
    }
  }
  facet_counts.add("facet_dates",fi.dateFacets);
  SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput=new SimpleOrderedMap<>();
  for (  Map.Entry<String,RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {
    String key=entry.getKey();
    RangeFacetRequest.DistribRangeFacet value=entry.getValue();
    rangeFacetOutput.add(key,value.rangeFacet);
  }
  facet_counts.add("facet_ranges",rangeFacetOutput);
  facet_counts.add("facet_intervals",fi.intervalFacets);
  facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,SpatialHeatmapFacets.distribFinish(fi.heatmapFacets,rb));
  if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {
    facet_counts.add(PIVOT_KEY,createPivotFacetOutput(rb));
  }
  rb.rsp.add("facet_counts",facet_counts);
  rb._facetInfo=null;
}
