{
  String transClasses=context.getEntityAttribute(TRANSFORMER);
  if (transClasses == null) {
    transformers=Collections.EMPTY_LIST;
    return;
  }
  String[] transArr=transClasses.split(",");
  transformers=new ArrayList<Transformer>(){
    @Override public boolean add(    Transformer transformer){
      if (docBuilder != null && docBuilder.verboseDebug) {
        transformer=docBuilder.writer.getDebugLogger().wrapTransformer(transformer);
      }
      return super.add(transformer);
    }
  }
;
  for (  String aTransArr : transArr) {
    String trans=aTransArr.trim();
    if (trans.startsWith("script:")) {
      String functionName=trans.substring("script:".length());
      ScriptTransformer scriptTransformer=new ScriptTransformer();
      scriptTransformer.setFunctionName(functionName);
      transformers.add(scriptTransformer);
      continue;
    }
    try {
      Class clazz=DocBuilder.loadClass(trans,context.getSolrCore());
      if (Transformer.class.isAssignableFrom(clazz)) {
        transformers.add((Transformer)clazz.newInstance());
      }
 else {
        Method meth=clazz.getMethod(TRANSFORM_ROW,Map.class);
        transformers.add(new ReflectionTransformer(meth,clazz,trans));
      }
    }
 catch (    NoSuchMethodException nsme) {
      String msg="Transformer :" + trans + "does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method";
      log.error(msg);
      wrapAndThrow(SEVERE,nsme,msg);
    }
catch (    Exception e) {
      log.error("Unable to load Transformer: " + aTransArr,e);
      wrapAndThrow(SEVERE,e,"Unable to load Transformer: " + trans);
    }
  }
}
