{
  final int docBase=context.docBase;
  return new FilterLeafCollector(super.getLeafCollector(context)){
    @Override public void collect(    int doc) throws IOException {
      final Map<Query,Float> freqs=new HashMap<Query,Float>();
      for (      Map.Entry<Query,Scorer> ent : subScorers.entrySet()) {
        Scorer value=ent.getValue();
        int matchId=value.docID();
        freqs.put(ent.getKey(),matchId == doc ? value.freq() : 0.0f);
      }
      docCounts.put(doc + docBase,freqs);
      super.collect(doc);
    }
    @Override public void setScorer(    Scorer scorer) throws IOException {
      super.setScorer(scorer);
      subScorers.clear();
      setSubScorers(scorer,"TOP");
    }
  }
;
}
