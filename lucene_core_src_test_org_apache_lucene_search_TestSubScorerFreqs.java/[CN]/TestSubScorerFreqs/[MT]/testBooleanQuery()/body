{
  TermQuery aQuery=new TermQuery(new Term("f","a"));
  TermQuery dQuery=new TermQuery(new Term("f","d"));
  TermQuery cQuery=new TermQuery(new Term("f","c"));
  TermQuery yQuery=new TermQuery(new Term("f","y"));
  BooleanQuery query=new BooleanQuery();
  BooleanQuery inner=new BooleanQuery();
  inner.add(cQuery,Occur.SHOULD);
  inner.add(yQuery,Occur.MUST_NOT);
  query.add(inner,Occur.MUST);
  query.add(aQuery,Occur.MUST);
  query.add(dQuery,Occur.MUST);
  @SuppressWarnings("unchecked") final Iterable<Set<String>> occurList=Arrays.asList(Collections.singleton("MUST"),new HashSet<String>(Arrays.asList("MUST","SHOULD")));
  for (  final Set<String> occur : occurList) {
    CountingCollector c=new CountingCollector(TopScoreDocCollector.create(10,true),occur);
    s.search(query,null,c);
    final int maxDocs=s.getIndexReader().maxDoc();
    assertEquals(maxDocs,c.docCounts.size());
    boolean includeOptional=occur.contains("SHOULD");
    for (int i=0; i < maxDocs; i++) {
      Map<Query,Float> doc0=c.docCounts.get(i);
      assertEquals(includeOptional ? 5 : 4,doc0.size());
      assertEquals(1.0F,doc0.get(aQuery),FLOAT_TOLERANCE);
      assertEquals(4.0F,doc0.get(dQuery),FLOAT_TOLERANCE);
      if (includeOptional) {
        assertEquals(3.0F,doc0.get(cQuery),FLOAT_TOLERANCE);
      }
      Map<Query,Float> doc1=c.docCounts.get(++i);
      assertEquals(includeOptional ? 5 : 4,doc1.size());
      assertEquals(1.0F,doc1.get(aQuery),FLOAT_TOLERANCE);
      assertEquals(1.0F,doc1.get(dQuery),FLOAT_TOLERANCE);
      if (includeOptional) {
        assertEquals(1.0F,doc1.get(cQuery),FLOAT_TOLERANCE);
      }
    }
  }
}
