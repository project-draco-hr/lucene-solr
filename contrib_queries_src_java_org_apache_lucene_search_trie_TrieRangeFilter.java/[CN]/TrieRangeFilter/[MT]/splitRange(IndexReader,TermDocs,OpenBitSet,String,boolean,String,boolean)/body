{
  int count=0;
  final int length=min.length();
  final String minShort=lowerBoundOpen ? min.substring(0,length - 1) : trieVariant.incrementTrieCoded(min.substring(0,length - 1));
  final String maxShort=upperBoundOpen ? max.substring(0,length - 1) : trieVariant.decrementTrieCoded(max.substring(0,length - 1));
  if (length == 1 || minShort.compareTo(maxShort) >= 0) {
    count+=setBits(reader,termDocs,bits,min,max);
  }
 else {
    if (length != trieVariant.TRIE_CODED_LENGTH)     count+=splitRange(reader,termDocs,bits,minShort,lowerBoundOpen,maxShort,upperBoundOpen);
    if (!lowerBoundOpen) {
      count+=setBits(reader,termDocs,bits,min,trieVariant.decrementTrieCoded(minShort + trieVariant.TRIE_CODED_SYMBOL_MIN));
    }
    if (!upperBoundOpen) {
      count+=setBits(reader,termDocs,bits,trieVariant.incrementTrieCoded(maxShort + trieVariant.TRIE_CODED_SYMBOL_MAX),max);
    }
    if (length == trieVariant.TRIE_CODED_LENGTH)     count+=splitRange(reader,termDocs,bits,minShort,lowerBoundOpen,maxShort,upperBoundOpen);
  }
  return count;
}
