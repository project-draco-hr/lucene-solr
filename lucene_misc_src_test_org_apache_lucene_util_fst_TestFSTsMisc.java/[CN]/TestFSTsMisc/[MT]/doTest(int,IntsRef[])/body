{
  Arrays.sort(terms);
{
    if (VERBOSE) {
      System.out.println("TEST: now test UpToTwoPositiveIntOutputs");
    }
    final UpToTwoPositiveIntOutputs outputs=UpToTwoPositiveIntOutputs.getSingleton(true);
    final List<FSTTester.InputOutput<Object>> pairs=new ArrayList<>(terms.length);
    long lastOutput=0;
    for (int idx=0; idx < terms.length; idx++) {
      long value=lastOutput + TestUtil.nextInt(random(),-100,1000);
      while (value < 0) {
        value=lastOutput + TestUtil.nextInt(random(),-100,1000);
      }
      final Object output;
      if (random().nextInt(5) == 3) {
        long value2=lastOutput + TestUtil.nextInt(random(),-100,1000);
        while (value2 < 0) {
          value2=lastOutput + TestUtil.nextInt(random(),-100,1000);
        }
        List<Long> values=new ArrayList<>();
        values.add(value);
        values.add(value2);
        output=values;
      }
 else {
        output=outputs.get(value);
      }
      pairs.add(new FSTTester.InputOutput<>(terms[idx],output));
    }
    new FSTTester<Object>(random(),dir,inputMode,pairs,outputs,false){
      @Override protected boolean outputsEqual(      Object output1,      Object output2){
        if (output1 instanceof TwoLongs && output2 instanceof List) {
          TwoLongs twoLongs1=(TwoLongs)output1;
          return Arrays.asList(new Long[]{twoLongs1.first,twoLongs1.second}).equals(output2);
        }
 else         if (output2 instanceof TwoLongs && output1 instanceof List) {
          TwoLongs twoLongs2=(TwoLongs)output2;
          return Arrays.asList(new Long[]{twoLongs2.first,twoLongs2.second}).equals(output1);
        }
        return output1.equals(output2);
      }
    }
.doTest(false);
  }
{
    if (VERBOSE) {
      System.out.println("TEST: now test OneOrMoreOutputs");
    }
    final PositiveIntOutputs _outputs=PositiveIntOutputs.getSingleton();
    final ListOfOutputs<Long> outputs=new ListOfOutputs<>(_outputs);
    final List<FSTTester.InputOutput<Object>> pairs=new ArrayList<>(terms.length);
    long lastOutput=0;
    for (int idx=0; idx < terms.length; idx++) {
      int outputCount=TestUtil.nextInt(random(),1,7);
      List<Long> values=new ArrayList<>();
      for (int i=0; i < outputCount; i++) {
        long value=lastOutput + TestUtil.nextInt(random(),-100,1000);
        while (value < 0) {
          value=lastOutput + TestUtil.nextInt(random(),-100,1000);
        }
        values.add(value);
        lastOutput=value;
      }
      final Object output;
      if (values.size() == 1) {
        output=values.get(0);
      }
 else {
        output=values;
      }
      pairs.add(new FSTTester.InputOutput<>(terms[idx],output));
    }
    new FSTTester<>(random(),dir,inputMode,pairs,outputs,false).doTest(false);
  }
}
