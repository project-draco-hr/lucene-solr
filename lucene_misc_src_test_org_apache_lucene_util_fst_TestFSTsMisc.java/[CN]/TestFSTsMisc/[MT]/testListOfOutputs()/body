{
  PositiveIntOutputs _outputs=PositiveIntOutputs.getSingleton();
  ListOfOutputs<Long> outputs=new ListOfOutputs<>(_outputs);
  final Builder<Object> builder=new Builder<>(FST.INPUT_TYPE.BYTE1,outputs);
  final IntsRefBuilder scratch=new IntsRefBuilder();
  builder.add(Util.toIntsRef(new BytesRef("a"),scratch),1L);
  builder.add(Util.toIntsRef(new BytesRef("a"),scratch),3L);
  builder.add(Util.toIntsRef(new BytesRef("a"),scratch),0L);
  builder.add(Util.toIntsRef(new BytesRef("b"),scratch),17L);
  final FST<Object> fst=builder.finish();
  Object output=Util.get(fst,new BytesRef("a"));
  assertNotNull(output);
  List<Long> outputList=outputs.asList(output);
  assertEquals(3,outputList.size());
  assertEquals(1L,outputList.get(0).longValue());
  assertEquals(3L,outputList.get(1).longValue());
  assertEquals(0L,outputList.get(2).longValue());
  output=Util.get(fst,new BytesRef("b"));
  assertNotNull(output);
  outputList=outputs.asList(output);
  assertEquals(1,outputList.size());
  assertEquals(17L,outputList.get(0).longValue());
}
