{
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);
  Field body=new Field("body","",fieldType);
  Document doc=new Document();
  doc.add(body);
  body.setStringValue("Test a one sentence document.");
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  iw.close();
  IndexSearcher searcher=newSearcher(ir);
  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);
  BooleanQuery query=new BooleanQuery.Builder().add(new WildcardQuery(new Term("body","te*")),BooleanClause.Occur.SHOULD).add(new WildcardQuery(new Term("body","one")),BooleanClause.Occur.SHOULD).add(new WildcardQuery(new Term("body","se*")),BooleanClause.Occur.SHOULD).build();
  TopDocs topDocs=searcher.search(query,10,Sort.INDEXORDER);
  assertEquals(1,topDocs.totalHits);
  String snippets[]=highlighter.highlight("body",query,topDocs);
  assertEquals(1,snippets.length);
  assertEquals("<b>Test</b> a <b>one</b> <b>sentence</b> document.",snippets[0]);
  highlighter=new UnifiedHighlighter(searcher,indexAnalyzer){
    @Override protected PassageFormatter getFormatter(    String field){
      return new PassageFormatter(){
        @Override public Object format(        Passage passages[],        String content){
          StringBuilder sb=new StringBuilder();
          int pos=0;
          for (          Passage passage : passages) {
            if (passage.startOffset > pos && pos > 0) {
              sb.append("... ");
            }
            pos=passage.startOffset;
            for (int i=0; i < passage.numMatches; i++) {
              int start=passage.matchStarts[i];
              int end=passage.matchEnds[i];
              if (start > pos) {
                sb.append(content,pos,start);
              }
              if (end > pos) {
                sb.append("<b>");
                sb.append(content,Math.max(pos,start),end);
                sb.append('(');
                sb.append(passage.getMatchTerms()[i].utf8ToString());
                sb.append(')');
                sb.append("</b>");
                pos=end;
              }
            }
            sb.append(content,pos,Math.max(pos,passage.endOffset));
            pos=passage.endOffset;
          }
          return sb.toString();
        }
      }
;
    }
  }
;
  assertEquals(1,topDocs.totalHits);
  snippets=highlighter.highlight("body",query,topDocs);
  assertEquals(1,snippets.length);
  assertEquals("<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.",snippets[0]);
  ir.close();
}
