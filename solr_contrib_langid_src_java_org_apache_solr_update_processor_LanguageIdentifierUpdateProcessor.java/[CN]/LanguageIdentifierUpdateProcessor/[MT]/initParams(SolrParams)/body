{
  if (params != null) {
    setEnabled(params.getBool(LANGUAGE_ID,true));
    if (params.get(FIELDS_PARAM,"").length() > 0) {
      inputFields=params.get(FIELDS_PARAM,"").split(",");
    }
    langField=params.get(LANG_FIELD,DOCID_LANGFIELD_DEFAULT);
    langsField=params.get(LANGS_FIELD,DOCID_LANGSFIELD_DEFAULT);
    SchemaField uniqueKeyField=schema.getUniqueKeyField();
    docIdField=params.get(DOCID_PARAM,uniqueKeyField == null ? DOCID_FIELD_DEFAULT : uniqueKeyField.getName());
    fallbackValue=params.get(FALLBACK);
    if (params.get(FALLBACK_FIELDS,"").length() > 0) {
      fallbackFields=params.get(FALLBACK_FIELDS).split(",");
    }
    overwrite=params.getBool(OVERWRITE,false);
    langWhitelist=new HashSet<String>();
    threshold=params.getDouble(THRESHOLD,DOCID_THRESHOLD_DEFAULT);
    if (params.get(LANG_WHITELIST,"").length() > 0) {
      for (      String lang : params.get(LANG_WHITELIST,"").split(",")) {
        langWhitelist.add(lang);
      }
    }
    enableMapping=params.getBool(MAP_ENABLE,false);
    if (params.get(MAP_FL,"").length() > 0) {
      mapFields=params.get(MAP_FL,"").split(",");
    }
 else {
      mapFields=inputFields;
    }
    mapKeepOrig=params.getBool(MAP_KEEP_ORIG,false);
    mapOverwrite=params.getBool(MAP_OVERWRITE,false);
    mapIndividual=params.getBool(MAP_INDIVIDUAL,false);
    String[] mapIndividualFields={};
    if (params.get(MAP_INDIVIDUAL_FL,"").length() > 0) {
      mapIndividualFields=params.get(MAP_INDIVIDUAL_FL,"").split(",");
    }
 else {
      mapIndividualFields=mapFields;
    }
    mapIndividualFieldsSet=new HashSet<String>(Arrays.asList(mapIndividualFields));
    allMapFieldsSet=new HashSet<String>(Arrays.asList(mapFields));
    if (Arrays.equals(mapFields,mapIndividualFields)) {
      allMapFieldsSet.addAll(mapIndividualFieldsSet);
    }
    lcMap=new HashMap<String,String>();
    if (params.get(LCMAP) != null) {
      for (      String mapping : params.get(LCMAP).split("[, ]")) {
        String[] keyVal=mapping.split(":");
        if (keyVal.length == 2) {
          lcMap.put(keyVal[0],keyVal[1]);
        }
 else {
          log.error("Unsupported format for langid.lcmap: " + mapping + ". Skipping this mapping.");
        }
      }
    }
    mapLcMap=new HashMap<String,String>();
    if (params.get(MAP_LCMAP) != null) {
      for (      String mapping : params.get(MAP_LCMAP).split("[, ]")) {
        String[] keyVal=mapping.split(":");
        if (keyVal.length == 2) {
          mapLcMap.put(keyVal[0],keyVal[1]);
        }
 else {
          log.error("Unsupported format for langid.map.lcmap: " + mapping + ". Skipping this mapping.");
        }
      }
    }
    enforceSchema=params.getBool(ENFORCE_SCHEMA,true);
    mapPattern=Pattern.compile(params.get(MAP_PATTERN,MAP_PATTERN_DEFAULT));
    mapReplaceStr=params.get(MAP_REPLACE,MAP_REPLACE_DEFAULT);
  }
  log.debug("LangId configured");
  if (inputFields.length == 0) {
    throw new SolrException(ErrorCode.BAD_REQUEST,"Missing or faulty configuration of LanguageIdentifierUpdateProcessor. Input fields must be specified as a comma separated list");
  }
}
