{
  if (field instanceof ValuesField)   return field;
  final ValuesField valField=new ValuesField();
switch (type) {
case BYTES_FIXED_DEREF:
case BYTES_FIXED_SORTED:
case BYTES_FIXED_STRAIGHT:
case BYTES_VAR_DEREF:
case BYTES_VAR_SORTED:
case BYTES_VAR_STRAIGHT:
    BytesRef ref=field.isBinary() ? new BytesRef(field.getBinaryValue(),field.getBinaryOffset(),field.getBinaryLength()) : new BytesRef(field.stringValue());
  valField.setBytes(ref,type);
break;
case PACKED_INTS:
case PACKED_INTS_FIXED:
valField.setInt(Long.parseLong(field.stringValue()));
break;
case SIMPLE_FLOAT_4BYTE:
valField.setFloat(Float.parseFloat(field.stringValue()));
break;
case SIMPLE_FLOAT_8BYTE:
valField.setFloat(Double.parseDouble(field.stringValue()));
break;
default :
throw new IllegalArgumentException("unknown type: " + type);
}
return valField.set(field);
}
