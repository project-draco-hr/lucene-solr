def runOne(self, dir, alg, logFileName, expectedMaxDocs=None, expectedNumDocs=None, queries=None, verify=False, isIndex=False):
    fullDir = ('%s/contrib/benchmark' % dir)
    if DEBUG:
        print ('  chdir %s' % fullDir)
    os.chdir(fullDir)
    if (queries is not None):
        if (type(queries) in types.StringTypes):
            queries = [queries]
        open('queries.txt', 'wb').write('\n'.join(queries))
    if DEBUG:
        algFile = 'tmp.alg'
    else:
        algFile = ('tmp.%s.alg' % os.getpid())
    open(algFile, 'wb').write(alg)
    fullLogFileName = ('%s/contrib/benchmark/%s/%s' % (dir, LOG_DIR, logFileName))
    print ('  log: %s' % fullLogFileName)
    if (not os.path.exists(LOG_DIR)):
        print ('  mkdir %s' % LOG_DIR)
        os.makedirs(LOG_DIR)
    command = ('%s -classpath ../../build/classes/java:../../build/classes/demo:../../build/contrib/highlighter/classes/java:lib/commons-digester-1.7.jar:lib/commons-collections-3.1.jar:lib/commons-compress-1.0.jar:lib/commons-logging-1.0.4.jar:lib/commons-beanutils-1.7.0.jar:lib/xerces-2.9.0.jar:lib/xml-apis-2.9.0.jar:../../build/contrib/benchmark/classes/java org.apache.lucene.benchmark.byTask.Benchmark %s > "%s" 2>&1' % (JAVA_COMMAND, algFile, fullLogFileName))
    if DEBUG:
        print ('command=%s' % command)
    try:
        t0 = time.time()
        if (os.system(command) != 0):
            raise RuntimeError('FAILED')
        t1 = time.time()
    finally:
        if (not DEBUG):
            os.remove(algFile)
    if isIndex:
        s = open(fullLogFileName, 'rb').read()
        if ((s.find('Exception in thread "') != (-1)) or (s.find('at org.apache.lucene') != (-1))):
            raise RuntimeError('alg hit exceptions')
        return
    else:
        bestQPS = None
        count = 0
        nhits = None
        numDocs = None
        maxDocs = None
        warmTime = None
        r = re.compile('^  ([0-9]+): (.*)$')
        topN = []
        for line in open(fullLogFileName, 'rb').readlines():
            m = r.match(line.rstrip())
            if (m is not None):
                topN.append(m.group(2))
            if line.startswith('totalHits = '):
                nhits = int(line[12:].strip())
            if line.startswith('maxDoc()  = '):
                maxDocs = int(line[12:].strip())
            if line.startswith('numDocs() = '):
                numDocs = int(line[12:].strip())
            if line.startswith('XSearchWarm'):
                v = line.strip().split()
                warmTime = float(v[5])
            if line.startswith('XSearchReal'):
                v = line.strip().split()
                upto = 0
                i = 0
                qps = None
                while (i < len(v)):
                    if (v[i] == '-'):
                        i += 1
                        continue
                    else:
                        upto += 1
                        i += 1
                        if (upto == 5):
                            qps = float(v[(i - 1)].replace(',', ''))
                            break
                if (qps is None):
                    raise RuntimeError('did not find qps')
                count += 1
                if ((bestQPS is None) or (qps > bestQPS)):
                    bestQPS = qps
        if (not verify):
            if (count != NUM_ROUND):
                raise RuntimeError(('did not find %s rounds (got %s)' % (NUM_ROUND, count)))
            if (warmTime is None):
                raise RuntimeError('did not find warm time')
        else:
            bestQPS = 1.0
            warmTime = None
        if (nhits is None):
            raise RuntimeError('did not see "totalHits = XXX"')
        if (maxDocs is None):
            raise RuntimeError('did not see "maxDoc() = XXX"')
        if (maxDocs != expectedMaxDocs):
            raise RuntimeError(('maxDocs() mismatch: expected %s but got %s' % (expectedMaxDocs, maxDocs)))
        if (numDocs is None):
            raise RuntimeError('did not see "numDocs() = XXX"')
        if (numDocs != expectedNumDocs):
            raise RuntimeError(('numDocs() mismatch: expected %s but got %s' % (expectedNumDocs, numDocs)))
        return (nhits, warmTime, bestQPS, topN)
