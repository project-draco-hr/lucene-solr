{
  String field=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  final String lowerTerm=DOMUtils.getAttribute(e,"lowerTerm",null);
  final String upperTerm=DOMUtils.getAttribute(e,"upperTerm",null);
  String type=DOMUtils.getAttribute(e,"type","int");
  try {
    if (type.equalsIgnoreCase("int")) {
      return IntPoint.newRangeQuery(field,(lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),(upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));
    }
 else     if (type.equalsIgnoreCase("long")) {
      return LongPoint.newRangeQuery(field,(lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),(upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));
    }
 else     if (type.equalsIgnoreCase("double")) {
      return DoublePoint.newRangeQuery(field,(lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),(upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));
    }
 else     if (type.equalsIgnoreCase("float")) {
      return FloatPoint.newRangeQuery(field,(lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),(upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));
    }
 else {
      throw new ParserException("type attribute must be one of: [long, int, double, float]");
    }
  }
 catch (  NumberFormatException nfe) {
    throw new ParserException("Could not parse lowerTerm or upperTerm into a number",nfe);
  }
}
