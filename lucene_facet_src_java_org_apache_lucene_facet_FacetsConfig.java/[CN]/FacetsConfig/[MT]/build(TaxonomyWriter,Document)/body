{
  Map<String,List<FacetField>> byField=new HashMap<>();
  Map<String,List<SortedSetDocValuesFacetField>> dvByField=new HashMap<>();
  Map<String,List<AssociationFacetField>> assocByField=new HashMap<>();
  Set<String> seenDims=new HashSet<>();
  for (  IndexableField field : doc) {
    if (field.fieldType() == FacetField.TYPE) {
      FacetField facetField=(FacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<FacetField> fields=byField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<>();
        byField.put(indexFieldName,fields);
      }
      fields.add(facetField);
    }
    if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {
      SortedSetDocValuesFacetField facetField=(SortedSetDocValuesFacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<SortedSetDocValuesFacetField> fields=dvByField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<>();
        dvByField.put(indexFieldName,fields);
      }
      fields.add(facetField);
    }
    if (field.fieldType() == AssociationFacetField.TYPE) {
      AssociationFacetField facetField=(AssociationFacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      if (dimConfig.hierarchical) {
        throw new IllegalArgumentException("AssociationFacetField cannot be hierarchical (dim=\"" + facetField.dim + "\")");
      }
      if (dimConfig.requireDimCount) {
        throw new IllegalArgumentException("AssociationFacetField cannot requireDimCount (dim=\"" + facetField.dim + "\")");
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<AssociationFacetField> fields=assocByField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<>();
        assocByField.put(indexFieldName,fields);
      }
      fields.add(facetField);
      String type;
      if (facetField instanceof IntAssociationFacetField) {
        type="int";
      }
 else       if (facetField instanceof FloatAssociationFacetField) {
        type="float";
      }
 else {
        type="bytes";
      }
      String curType=assocDimTypes.get(indexFieldName);
      if (curType == null) {
        assocDimTypes.put(indexFieldName,type);
      }
 else       if (!curType.equals(type)) {
        throw new IllegalArgumentException("mixing incompatible types of AssocationFacetField (" + curType + " and "+ type+ ") in indexed field \""+ indexFieldName+ "\"; use FacetsConfig to change the indexFieldName for each dimension");
      }
    }
  }
  Document result=new Document();
  processFacetFields(taxoWriter,byField,result);
  processSSDVFacetFields(dvByField,result);
  processAssocFacetFields(taxoWriter,assocByField,result);
  for (  IndexableField field : doc.getFields()) {
    IndexableFieldType ft=field.fieldType();
    if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {
      result.add(field);
    }
  }
  return result;
}
