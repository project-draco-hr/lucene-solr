{
  Map<String,List<FacetField>> byField=new HashMap<String,List<FacetField>>();
  Map<String,List<SortedSetDocValuesFacetField>> dvByField=new HashMap<String,List<SortedSetDocValuesFacetField>>();
  Map<String,List<AssociationFacetField>> assocByField=new HashMap<String,List<AssociationFacetField>>();
  Set<String> seenDims=new HashSet<String>();
  for (  IndexableField field : doc.indexableFields()) {
    if (field.fieldType() == FacetField.TYPE) {
      FacetField facetField=(FacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<FacetField> fields=byField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<FacetField>();
        byField.put(indexFieldName,fields);
      }
      fields.add(facetField);
    }
    if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {
      SortedSetDocValuesFacetField facetField=(SortedSetDocValuesFacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<SortedSetDocValuesFacetField> fields=dvByField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<SortedSetDocValuesFacetField>();
        dvByField.put(indexFieldName,fields);
      }
      fields.add(facetField);
    }
    if (field.fieldType() == AssociationFacetField.TYPE) {
      AssociationFacetField facetField=(AssociationFacetField)field;
      FacetsConfig.DimConfig dimConfig=getDimConfig(facetField.dim);
      if (dimConfig.multiValued == false) {
        checkSeen(seenDims,facetField.dim);
      }
      if (dimConfig.hierarchical) {
        throw new IllegalArgumentException("AssociationFacetField cannot be hierarchical (dim=\"" + facetField.dim + "\")");
      }
      if (dimConfig.requireDimCount) {
        throw new IllegalArgumentException("AssociationFacetField cannot requireDimCount (dim=\"" + facetField.dim + "\")");
      }
      String indexFieldName=dimConfig.indexFieldName;
      List<AssociationFacetField> fields=assocByField.get(indexFieldName);
      if (fields == null) {
        fields=new ArrayList<AssociationFacetField>();
        assocByField.put(indexFieldName,fields);
      }
      fields.add(facetField);
      String type;
      if (facetField instanceof IntAssociationFacetField) {
        type="int";
      }
 else       if (facetField instanceof FloatAssociationFacetField) {
        type="float";
      }
 else {
        type="bytes";
      }
      String curType=assocDimTypes.get(indexFieldName);
      if (curType == null) {
        assocDimTypes.put(indexFieldName,type);
      }
 else       if (!curType.equals(type)) {
        throw new IllegalArgumentException("mixing incompatible types of AssocationFacetField (" + curType + " and "+ type+ ") in indexed field \""+ indexFieldName+ "\"; use FacetsConfig to change the indexFieldName for each dimension");
      }
    }
  }
  List<Field> addedIndexedFields=new ArrayList<Field>();
  List<Field> addedStoredFields=new ArrayList<Field>();
  processFacetFields(byField,addedIndexedFields,addedStoredFields);
  processSSDVFacetFields(dvByField,addedIndexedFields,addedStoredFields);
  processAssocFacetFields(assocByField,addedIndexedFields,addedStoredFields);
  final List<IndexableField> allIndexedFields=new ArrayList<IndexableField>();
  for (  IndexableField field : doc.indexableFields()) {
    IndexableFieldType ft=field.fieldType();
    if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {
      allIndexedFields.add(field);
    }
  }
  allIndexedFields.addAll(addedIndexedFields);
  final List<StorableField> allStoredFields=new ArrayList<StorableField>();
  for (  StorableField field : doc.storableFields()) {
    allStoredFields.add(field);
  }
  allStoredFields.addAll(addedStoredFields);
  return new IndexDocument(){
    @Override public Iterable<IndexableField> indexableFields(){
      return allIndexedFields;
    }
    @Override public Iterable<StorableField> storableFields(){
      return allStoredFields;
    }
  }
;
}
