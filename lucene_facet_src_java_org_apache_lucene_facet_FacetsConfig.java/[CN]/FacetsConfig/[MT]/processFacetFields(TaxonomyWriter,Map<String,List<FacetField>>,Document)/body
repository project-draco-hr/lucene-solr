{
  for (  Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {
    String indexFieldName=ent.getKey();
    IntsRefBuilder ordinals=new IntsRefBuilder();
    for (    FacetField facetField : ent.getValue()) {
      FacetsConfig.DimConfig ft=getDimConfig(facetField.dim);
      if (facetField.path.length > 1 && ft.hierarchical == false) {
        throw new IllegalArgumentException("dimension \"" + facetField.dim + "\" is not hierarchical yet has "+ facetField.path.length+ " components");
      }
      FacetLabel cp=new FacetLabel(facetField.dim,facetField.path);
      checkTaxoWriter(taxoWriter);
      int ordinal=taxoWriter.addCategory(cp);
      ordinals.append(ordinal);
      if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {
        int parent=taxoWriter.getParent(ordinal);
        while (parent > 0) {
          ordinals.append(parent);
          parent=taxoWriter.getParent(parent);
        }
        if (ft.requireDimCount == false) {
          ordinals.setLength(ordinals.length() - 1);
        }
      }
      for (int i=1; i <= cp.length; i++) {
        doc.add(new StringField(indexFieldName,pathToString(cp.components,i),Field.Store.NO));
      }
    }
    doc.add(new BinaryDocValuesField(indexFieldName,dedupAndEncode(ordinals.get())));
  }
}
