{
  List<ZkWriteCommand> zkWriteCommands=new ArrayList<ZkWriteCommand>();
  String nodeName=message.getStr(ZkStateReader.NODE_NAME_PROP);
  log.info("DownNode state invoked for node: " + nodeName);
  Map<String,DocCollection> collections=clusterState.getCollectionsMap();
  for (  Map.Entry<String,DocCollection> entry : collections.entrySet()) {
    DocCollection docCollection=entry.getValue();
    Map<String,Slice> slicesCopy=new LinkedHashMap<>(docCollection.getSlicesMap());
    for (    Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {
      Slice slice=docCollection.getSlice(sliceEntry.getKey());
      Map<String,Replica> newReplicas=new HashMap<String,Replica>();
      Collection<Replica> replicas=slice.getReplicas();
      for (      Replica replica : replicas) {
        Map<String,Object> props=replica.shallowCopy();
        String rNodeName=replica.getNodeName();
        if (rNodeName.equals(nodeName)) {
          log.info("Update replica state for " + replica + " to "+ Replica.State.DOWN.toString());
          props.put(ZkStateReader.STATE_PROP,Replica.State.DOWN.toString());
        }
        Replica newReplica=new Replica(replica.getName(),props);
        newReplicas.put(replica.getName(),newReplica);
      }
      Slice newSlice=new Slice(slice.getName(),newReplicas,slice.shallowCopy());
      slicesCopy.put(slice.getName(),newSlice);
    }
    zkWriteCommands.add(new ZkWriteCommand(entry.getKey(),docCollection.copyWithSlices(slicesCopy)));
  }
  return zkWriteCommands;
}
