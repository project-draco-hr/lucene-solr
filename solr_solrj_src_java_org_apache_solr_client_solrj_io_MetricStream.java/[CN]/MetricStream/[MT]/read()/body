{
  Tuple tuple=tupleStream.read();
  if (tuple.EOF) {
    Iterator<Map.Entry<HashKey,Metric[]>> it=bucketMap.entrySet().iterator();
    if (comp == null) {
      Map.Entry<HashKey,Metric[]> noBucket=it.next();
      BucketMetrics bms=new BucketMetrics(noBucket.getKey(),noBucket.getValue());
      this.bucketMetrics=new BucketMetrics[1];
      this.bucketMetrics[0]=bms;
      List<Map<String,Double>> outMetrics=new ArrayList();
      List<String> outKeys=new ArrayList();
      for (      Metric metric : bms.getMetrics()) {
        Map<String,Double> outMetricValues=metric.metricValues();
        String outKey=metric.getName();
        outMetrics.add(outMetricValues);
        outKeys.add(outKey);
      }
      Map outMap=new HashMap();
      outMap.put("buckets",outKeys);
      outMap.put("metrics",outMetrics);
      tuple.set(this.outKey,outMap);
      return tuple;
    }
    PriorityQueue<BucketMetrics> priorityQueue=new PriorityQueue(topN,rcomp);
    while (it.hasNext()) {
      Map.Entry<HashKey,Metric[]> entry=it.next();
      BucketMetrics bms=new BucketMetrics(entry.getKey(),entry.getValue());
      if (priorityQueue.size() < topN) {
        priorityQueue.add(bms);
      }
 else {
        BucketMetrics peek=priorityQueue.peek();
        if (comp.compare(bms,peek) < 0) {
          priorityQueue.poll();
          priorityQueue.add(bms);
        }
      }
    }
    int s=priorityQueue.size();
    this.bucketMetrics=new BucketMetrics[s];
    for (int i=bucketMetrics.length - 1; i >= 0; i--) {
      BucketMetrics b=priorityQueue.poll();
      this.bucketMetrics[i]=b;
    }
    List<List<Map<String,Double>>> outMetrics=new ArrayList();
    List<String> outBuckets=new ArrayList();
    for (    BucketMetrics bms : this.bucketMetrics) {
      List outBucketMetrics=new ArrayList();
      for (      Metric metric : bms.getMetrics()) {
        Map<String,Double> outMetricValues=metric.metricValues();
        outBucketMetrics.add(outMetricValues);
      }
      outBuckets.add(bms.getKey().toString());
      outMetrics.add(outBucketMetrics);
    }
    Map outMap=new HashMap();
    outMap.put("buckets",outBuckets);
    outMap.put("metrics",outMetrics);
    tuple.set(this.outKey,outMap);
    return tuple;
  }
  HashKey hashKey=null;
  if (buckets != null) {
    String[] bucketValues=new String[buckets.length];
    for (int i=0; i < buckets.length; i++) {
      bucketValues[i]=buckets[i].getBucketValue(tuple);
    }
    hashKey=new HashKey(bucketValues);
  }
 else {
    hashKey=metricsKey;
  }
  Metric[] bucketMetrics=bucketMap.get(hashKey);
  if (bucketMetrics != null) {
    for (    Metric bucketMetric : bucketMetrics) {
      bucketMetric.update(tuple);
    }
  }
 else {
    bucketMetrics=new Metric[metrics.length];
    for (int i=0; i < metrics.length; i++) {
      Metric bucketMetric=metrics[i].newInstance();
      bucketMetric.update(tuple);
      bucketMetrics[i]=bucketMetric;
    }
    bucketMap.put(hashKey,bucketMetrics);
  }
  return tuple;
}
