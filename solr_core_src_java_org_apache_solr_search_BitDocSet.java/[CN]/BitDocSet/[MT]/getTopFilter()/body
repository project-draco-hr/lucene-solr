{
  return new Filter(){
    final FixedBitSet bs=bits;
    @Override public DocIdSet getDocIdSet(    final LeafReaderContext context,    final Bits acceptDocs){
      LeafReader reader=context.reader();
      final Bits acceptDocs2=acceptDocs == null ? null : (reader.getLiveDocs() == acceptDocs ? null : acceptDocs);
      if (context.isTopLevel) {
        return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bs),acceptDocs);
      }
      final int base=context.docBase;
      final int max=base + reader.maxDoc();
      return BitsFilteredDocIdSet.wrap(new DocIdSet(){
        @Override public DocIdSetIterator iterator(){
          return new DocIdSetIterator(){
            int pos=base - 1;
            int adjustedDoc=-1;
            @Override public int docID(){
              return adjustedDoc;
            }
            @Override public int nextDoc(){
              int next=pos + 1;
              if (next >= max) {
                return adjustedDoc=NO_MORE_DOCS;
              }
 else {
                pos=bs.nextSetBit(next);
                return adjustedDoc=pos < max ? pos - base : NO_MORE_DOCS;
              }
            }
            @Override public int advance(            int target){
              if (target == NO_MORE_DOCS)               return adjustedDoc=NO_MORE_DOCS;
              int adjusted=target + base;
              if (adjusted >= max) {
                return adjustedDoc=NO_MORE_DOCS;
              }
 else {
                pos=bs.nextSetBit(adjusted);
                return adjustedDoc=pos < max ? pos - base : NO_MORE_DOCS;
              }
            }
            @Override public long cost(){
              int maxDoc=max - base;
              if (size != -1) {
                return (long)(size * ((FixedBitSet.bits2words(maxDoc) << 6) / (float)bs.length()));
              }
 else {
                return maxDoc;
              }
            }
          }
;
        }
        @Override public long ramBytesUsed(){
          return bs.ramBytesUsed();
        }
        @Override public Bits bits(){
          return new Bits(){
            @Override public boolean get(            int index){
              return bs.get(index + base);
            }
            @Override public int length(){
              return max - base;
            }
          }
;
        }
      }
,acceptDocs2);
    }
    @Override public String toString(    String field){
      return "BitSetDocTopFilter";
    }
    @Override public boolean equals(    Object other){
      return sameClassAs(other) && Objects.equals(bs,getClass().cast(other).bs);
    }
    @Override public int hashCode(){
      return classHash() * 31 + bs.hashCode();
    }
  }
;
}
