{
  if (prefix == null) {
    prefix="indexConfig";
    log.debug("Defaulting to prefix \"" + prefix + "\" for index configuration");
  }
  if (def == null) {
    def=new SolrIndexConfig(solrConfig);
  }
  Object unused=solrConfig.getNode(prefix,false);
  luceneVersion=solrConfig.luceneMatchVersion;
  assertWarnOrFail("The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergeScheduler",false) != null) && (solrConfig.get(prefix + "/mergeScheduler/@class",null) == null)),true);
  assertWarnOrFail("The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergePolicy",false) != null) && (solrConfig.get(prefix + "/mergePolicy/@class",null) == null)),true);
  assertWarnOrFail("The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.",solrConfig.get(prefix + "/luceneAutoCommit",null) == null,true);
  defaultMergePolicyClassName=def.defaultMergePolicyClassName;
  useCompoundFile=solrConfig.getBool(prefix + "/useCompoundFile",def.useCompoundFile);
  effectiveUseCompountFileSetting=useCompoundFile;
  maxBufferedDocs=solrConfig.getInt(prefix + "/maxBufferedDocs",def.maxBufferedDocs);
  maxMergeDocs=solrConfig.getInt(prefix + "/maxMergeDocs",def.maxMergeDocs);
  maxIndexingThreads=solrConfig.getInt(prefix + "/maxIndexingThreads",def.maxIndexingThreads);
  mergeFactor=solrConfig.getInt(prefix + "/mergeFactor",def.mergeFactor);
  ramBufferSizeMB=solrConfig.getDouble(prefix + "/ramBufferSizeMB",def.ramBufferSizeMB);
  writeLockTimeout=solrConfig.getInt(prefix + "/writeLockTimeout",def.writeLockTimeout);
  lockType=solrConfig.get(prefix + "/lockType",def.lockType);
  mergeSchedulerInfo=getPluginInfo(prefix + "/mergeScheduler",solrConfig,def.mergeSchedulerInfo);
  mergePolicyInfo=getPluginInfo(prefix + "/mergePolicy",solrConfig,def.mergePolicyInfo);
  String val=solrConfig.get(prefix + "/termIndexInterval",null);
  if (val != null) {
    throw new IllegalArgumentException("Illegal parameter 'termIndexInterval'");
  }
  boolean infoStreamEnabled=solrConfig.getBool(prefix + "/infoStream",false);
  if (infoStreamEnabled) {
    String infoStreamFile=solrConfig.get(prefix + "/infoStream/@file",null);
    if (infoStreamFile == null) {
      log.info("IndexWriter infoStream solr logging is enabled");
      infoStream=new LoggingInfoStream();
    }
 else {
      throw new IllegalArgumentException("Remove @file from <infoStream> to output messages to solr's logfile");
    }
  }
  mergedSegmentWarmerInfo=getPluginInfo(prefix + "/mergedSegmentWarmer",solrConfig,def.mergedSegmentWarmerInfo);
  if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {
    throw new IllegalArgumentException("Supplying a mergedSegmentWarmer will do nothing since nrtMode is false");
  }
  assertWarnOrFail("Begining with Solr 5.0, <checkIntegrityAtMerge> option is no longer supported and should be removed from solrconfig.xml (these integrity checks are now automatic)",(null == solrConfig.getNode(prefix + "/checkIntegrityAtMerge",false)),false);
}
