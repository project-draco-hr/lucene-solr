{
  super(input);
  this.tokens=new LinkedList<Token>();
  this.minWordSize=minWordSize;
  this.minSubwordSize=minSubwordSize;
  this.maxSubwordSize=maxSubwordSize;
  this.onlyLongestMatch=onlyLongestMatch;
  if (dictionary instanceof CharArraySet) {
    this.dictionary=(CharArraySet)dictionary;
  }
 else {
    this.dictionary=new CharArraySet(matchVersion,dictionary.size(),false);
    addAllLowerCase(this.dictionary,dictionary);
  }
  termAtt=addAttribute(TermAttribute.class);
  offsetAtt=addAttribute(OffsetAttribute.class);
  flagsAtt=addAttribute(FlagsAttribute.class);
  posIncAtt=addAttribute(PositionIncrementAttribute.class);
  typeAtt=addAttribute(TypeAttribute.class);
  payloadAtt=addAttribute(PayloadAttribute.class);
}
