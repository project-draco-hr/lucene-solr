{
  Analyzer analyzer=new ReusableAnalyzerBase(){
    @Override public TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      return new TokenStreamComponents(new Tokenizer(){
        private final String[] TOKENS={"1","2","3","4","5"};
        private final int[] INCREMENTS={0,2,1,0,1};
        private int i=0;
        PositionIncrementAttribute posIncrAtt=addAttribute(PositionIncrementAttribute.class);
        CharTermAttribute termAtt=addAttribute(CharTermAttribute.class);
        OffsetAttribute offsetAtt=addAttribute(OffsetAttribute.class);
        @Override public boolean incrementToken(){
          if (i == TOKENS.length)           return false;
          clearAttributes();
          termAtt.append(TOKENS[i]);
          offsetAtt.setOffset(i,i);
          posIncrAtt.setPositionIncrement(INCREMENTS[i]);
          i++;
          return true;
        }
        @Override public void reset() throws IOException {
          super.reset();
          this.i=0;
        }
      }
);
    }
  }
;
  Directory store=newDirectory();
  RandomIndexWriter writer=new RandomIndexWriter(random,store,analyzer);
  Document d=new Document();
  d.add(newField("field","bogus",TextField.TYPE_STORED));
  writer.addDocument(d);
  IndexReader reader=writer.getReader();
  writer.close();
  IndexSearcher searcher=newSearcher(reader);
  DocsAndPositionsEnum pos=MultiFields.getTermPositionsEnum(searcher.getIndexReader(),MultiFields.getLiveDocs(searcher.getIndexReader()),"field",new BytesRef("1"));
  pos.nextDoc();
  assertEquals(0,pos.nextPosition());
  pos=MultiFields.getTermPositionsEnum(searcher.getIndexReader(),MultiFields.getLiveDocs(searcher.getIndexReader()),"field",new BytesRef("2"));
  pos.nextDoc();
  assertEquals(2,pos.nextPosition());
  PhraseQuery q;
  ScoreDoc[] hits;
  q=new PhraseQuery();
  q.add(new Term("field","1"));
  q.add(new Term("field","2"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),1);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","1"),0);
  q.add(new Term("field","2"),2);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","3"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","4"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"),0);
  q.add(new Term("field","9"),0);
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  MultiPhraseQuery mq=new MultiPhraseQuery();
  mq.add(new Term[]{new Term("field","3"),new Term("field","9")},0);
  hits=searcher.search(mq,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","4"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","3"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","4"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(1,hits.length);
  q=new PhraseQuery();
  q.add(new Term("field","2"));
  q.add(new Term("field","5"));
  hits=searcher.search(q,null,1000).scoreDocs;
  assertEquals(0,hits.length);
  searcher.close();
  reader.close();
  store.close();
}
