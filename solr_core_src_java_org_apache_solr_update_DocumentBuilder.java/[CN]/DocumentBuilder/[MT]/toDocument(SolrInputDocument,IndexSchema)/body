{
  Document out=new Document();
  final float docBoost=doc.getDocumentBoost();
  for (  SolrInputField field : doc) {
    String name=field.getName();
    SchemaField sfield=schema.getFieldOrNull(name);
    boolean used=false;
    float boost=field.getBoost();
    boolean omitNorms=sfield != null && sfield.omitNorms();
    if (sfield != null && !sfield.multiValued() && field.getValueCount() > 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued field "+ sfield.getName()+ ": "+ field.getValue());
    }
    if (omitNorms && boost != 1.0F) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "cannot set an index-time boost, norms are omitted for field "+ sfield.getName()+ ": "+ field.getValue());
    }
    boolean hasField=false;
    try {
      for (      Object v : field) {
        if (v == null) {
          continue;
        }
        hasField=true;
        if (sfield != null) {
          used=true;
          addField(out,sfield,v,omitNorms ? 1F : docBoost * boost);
        }
        List<CopyField> copyFields=schema.getCopyFieldsList(name);
        for (        CopyField cf : copyFields) {
          SchemaField destinationField=cf.getDestination();
          if (!destinationField.multiValued() && out.getField(destinationField.getName()) != null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued copy field "+ destinationField.getName()+ ": "+ v);
          }
          used=true;
          Object val=v;
          if (val instanceof String && cf.getMaxChars() > 0) {
            val=cf.getLimitedValue((String)val);
          }
          addField(out,destinationField,val,destinationField.omitNorms() ? 1F : docBoost * boost);
        }
        boost=docBoost;
      }
    }
 catch (    SolrException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "Error adding field '"+ field.getName()+ "'='"+ field.getValue()+ "' msg="+ ex.getMessage(),ex);
    }
    if (!used && hasField) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "unknown field '"+ name+ "'");
    }
  }
  for (  SchemaField field : schema.getRequiredFields()) {
    if (out.getField(field.getName()) == null) {
      if (field.getDefaultValue() != null) {
        addField(out,field,field.getDefaultValue(),1.0f);
      }
 else {
        String msg=getID(doc,schema) + "missing required field: " + field.getName();
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);
      }
    }
  }
  return out;
}
