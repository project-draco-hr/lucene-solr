{
  if (str == null || str.isEmpty())   throw new IllegalArgumentException("str is null or blank");
  Calendar cal=newCal();
  if (str.equals("*"))   return cal;
  int offset=0;
  try {
    int lastOffset=str.charAt(str.length() - 1) == 'Z' ? str.length() - 1 : str.length();
    int hyphenIdx=str.indexOf('-',1);
    if (hyphenIdx < 0)     hyphenIdx=lastOffset;
    int year=Integer.parseInt(str.substring(offset,hyphenIdx));
    cal.set(Calendar.ERA,year <= 0 ? 0 : 1);
    cal.set(Calendar.YEAR,year <= 0 ? -1 * year + 1 : year);
    offset=hyphenIdx + 1;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.MONTH,Integer.parseInt(str.substring(offset,offset + 2)) - 1);
    offset+=3;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.DAY_OF_MONTH,Integer.parseInt(str.substring(offset,offset + 2)));
    offset+=3;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.HOUR_OF_DAY,Integer.parseInt(str.substring(offset,offset + 2)));
    offset+=3;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.MINUTE,Integer.parseInt(str.substring(offset,offset + 2)));
    offset+=3;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.SECOND,Integer.parseInt(str.substring(offset,offset + 2)));
    offset+=3;
    if (lastOffset < offset)     return cal;
    cal.set(Calendar.MILLISECOND,Integer.parseInt(str.substring(offset,offset + 3)));
    offset+=3;
    if (lastOffset == offset)     return cal;
  }
 catch (  Exception e) {
    ParseException pe=new ParseException("Improperly formatted date: " + str,offset);
    pe.initCause(e);
    throw pe;
  }
  throw new ParseException("Improperly formatted date: " + str,offset);
}
