{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x9fffff7affffd9ffL & l) != 0L) {
            if (kind > 15)             kind=15;
            jjCheckNAdd(1);
          }
 else           if ((0x100002600L & l) != 0L) {
            if (kind > 18)             kind=18;
            jjCheckNAdd(2);
          }
        break;
case 1:
      if ((0xbffffffeffffd9ffL & l) == 0L)       break;
    if (kind > 15)     kind=15;
  jjCheckNAdd(1);
break;
case 2:
if ((0x100002600L & l) == 0L) break;
kind=18;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 1:
if (kind > 15) kind=15;
jjCheckNAdd(1);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 1:
if ((jjbitVec0[i2] & l2) == 0L) break;
if (kind > 15) kind=15;
jjCheckNAdd(1);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
