{
  final int iters=atLeast(10);
  for (int iter=0; iter < iters; ++iter) {
    Directory dir=newDirectory();
    RandomIndexWriter iw=new RandomIndexWriter(random(),dir);
    final int numDocs=atLeast(100);
    for (int i=0; i < numDocs; ++i) {
      Document doc=new Document();
      final boolean hasValue=random().nextBoolean();
      if (hasValue) {
        doc.add(new NumericDocValuesField("dv1",1));
        doc.add(new SortedNumericDocValuesField("dv2",1));
        doc.add(new SortedNumericDocValuesField("dv2",2));
        doc.add(new StringField("has_value","yes",Store.NO));
      }
      doc.add(new StringField("f",random().nextBoolean() ? "yes" : "no",Store.NO));
      iw.addDocument(doc);
    }
    if (random().nextBoolean()) {
      iw.deleteDocuments(new TermQuery(new Term("f","no")));
    }
    iw.commit();
    final IndexReader reader=iw.getReader();
    final IndexSearcher searcher=newSearcher(reader);
    iw.close();
    BooleanQuery ref=new BooleanQuery();
    ref.add(new TermQuery(new Term("f","yes")),Occur.MUST);
    ref.add(new TermQuery(new Term("has_value","yes")),Occur.FILTER);
    BooleanQuery bq1=new BooleanQuery();
    bq1.add(new TermQuery(new Term("f","yes")),Occur.MUST);
    bq1.add(new FieldValueQuery("dv1"),Occur.FILTER);
    assertSameMatches(searcher,ref,bq1,true);
    BooleanQuery bq2=new BooleanQuery();
    bq2.add(new TermQuery(new Term("f","yes")),Occur.MUST);
    bq2.add(new FieldValueQuery("dv2"),Occur.FILTER);
    assertSameMatches(searcher,ref,bq2,true);
    reader.close();
    dir.close();
  }
}
