{
  NumberFormat nf=NumberFormat.getInstance();
  SegmentInfos sis=new SegmentInfos(codecs);
  Status result=new Status();
  result.dir=dir;
  try {
    sis.read(dir,codecs);
  }
 catch (  Throwable t) {
    msg("ERROR: could not read any segments file in directory");
    result.missingSegments=true;
    if (infoStream != null)     t.printStackTrace(infoStream);
    return result;
  }
  String oldest=Integer.toString(Integer.MAX_VALUE), newest=Integer.toString(Integer.MIN_VALUE);
  String oldSegs=null;
  boolean foundNonNullVersion=false;
  Comparator<String> versionComparator=StringHelper.getVersionComparator();
  for (  SegmentInfo si : sis) {
    String version=si.getVersion();
    if (version == null) {
      oldSegs="pre-3.1";
    }
 else {
      foundNonNullVersion=true;
      if (versionComparator.compare(version,oldest) < 0) {
        oldest=version;
      }
      if (versionComparator.compare(version,newest) > 0) {
        newest=version;
      }
    }
  }
  final int numSegments=sis.size();
  final String segmentsFileName=sis.getCurrentSegmentFileName();
  IndexInput input=null;
  try {
    input=dir.openInput(segmentsFileName);
  }
 catch (  Throwable t) {
    msg("ERROR: could not open segments file in directory");
    if (infoStream != null)     t.printStackTrace(infoStream);
    result.cantOpenSegments=true;
    return result;
  }
  int format=0;
  try {
    format=input.readInt();
  }
 catch (  Throwable t) {
    msg("ERROR: could not read segment file version in directory");
    if (infoStream != null)     t.printStackTrace(infoStream);
    result.missingSegmentVersion=true;
    return result;
  }
 finally {
    if (input != null)     input.close();
  }
  String sFormat="";
  boolean skip=false;
  if (format == DefaultSegmentInfosWriter.FORMAT_DIAGNOSTICS) {
    sFormat="FORMAT_DIAGNOSTICS [Lucene 2.9]";
  }
 else   if (format == DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {
    sFormat="FORMAT_HAS_VECTORS [Lucene 3.1]";
  }
 else   if (format == DefaultSegmentInfosWriter.FORMAT_3_1) {
    sFormat="FORMAT_3_1 [Lucene 3.1+]";
  }
 else   if (format == DefaultSegmentInfosWriter.FORMAT_4_0) {
    sFormat="FORMAT_4_0 [Lucene 4.0]";
  }
 else   if (format == DefaultSegmentInfosWriter.FORMAT_CURRENT) {
    throw new RuntimeException("BUG: You should update this tool!");
  }
 else   if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT) {
    sFormat="int=" + format + " [newer version of Lucene than this tool supports]";
    skip=true;
  }
 else   if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM) {
    sFormat="int=" + format + " [older version of Lucene than this tool supports]";
    skip=true;
  }
  result.segmentsFileName=segmentsFileName;
  result.numSegments=numSegments;
  result.segmentFormat=sFormat;
  result.userData=sis.getUserData();
  String userDataString;
  if (sis.getUserData().size() > 0) {
    userDataString=" userData=" + sis.getUserData();
  }
 else {
    userDataString="";
  }
  String versionString=null;
  if (oldSegs != null) {
    if (foundNonNullVersion) {
      versionString="versions=[" + oldSegs + " .. "+ newest+ "]";
    }
 else {
      versionString="version=" + oldSegs;
    }
  }
 else {
    versionString=oldest.equals(newest) ? ("version=" + oldest) : ("versions=[" + oldest + " .. "+ newest+ "]");
  }
  msg("Segments file=" + segmentsFileName + " numSegments="+ numSegments+ " "+ versionString+ " format="+ sFormat+ userDataString);
  if (onlySegments != null) {
    result.partial=true;
    if (infoStream != null)     infoStream.print("\nChecking only these segments:");
    for (    String s : onlySegments) {
      if (infoStream != null)       infoStream.print(" " + s);
    }
    result.segmentsChecked.addAll(onlySegments);
    msg(":");
  }
  if (skip) {
    msg("\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting");
    result.toolOutOfDate=true;
    return result;
  }
  result.newSegments=(SegmentInfos)sis.clone();
  result.newSegments.clear();
  result.maxSegmentName=-1;
  for (int i=0; i < numSegments; i++) {
    final SegmentInfo info=sis.info(i);
    int segmentName=Integer.parseInt(info.name.substring(1),Character.MAX_RADIX);
    if (segmentName > result.maxSegmentName) {
      result.maxSegmentName=segmentName;
    }
    if (onlySegments != null && !onlySegments.contains(info.name))     continue;
    Status.SegmentInfoStatus segInfoStat=new Status.SegmentInfoStatus();
    result.segmentInfos.add(segInfoStat);
    msg("  " + (1 + i) + " of "+ numSegments+ ": name="+ info.name+ " docCount="+ info.docCount);
    segInfoStat.name=info.name;
    segInfoStat.docCount=info.docCount;
    int toLoseDocCount=info.docCount;
    SegmentReader reader=null;
    try {
      final SegmentCodecs codec=info.getSegmentCodecs();
      msg("    codec=" + codec);
      segInfoStat.codec=codec;
      msg("    compound=" + info.getUseCompoundFile());
      segInfoStat.compound=info.getUseCompoundFile();
      msg("    hasProx=" + info.getHasProx());
      segInfoStat.hasProx=info.getHasProx();
      msg("    numFiles=" + info.files().size());
      segInfoStat.numFiles=info.files().size();
      segInfoStat.sizeMB=info.sizeInBytes(true) / (1024. * 1024.);
      msg("    size (MB)=" + nf.format(segInfoStat.sizeMB));
      Map<String,String> diagnostics=info.getDiagnostics();
      segInfoStat.diagnostics=diagnostics;
      if (diagnostics.size() > 0) {
        msg("    diagnostics = " + diagnostics);
      }
      final int docStoreOffset=info.getDocStoreOffset();
      if (docStoreOffset != -1) {
        msg("    docStoreOffset=" + docStoreOffset);
        segInfoStat.docStoreOffset=docStoreOffset;
        msg("    docStoreSegment=" + info.getDocStoreSegment());
        segInfoStat.docStoreSegment=info.getDocStoreSegment();
        msg("    docStoreIsCompoundFile=" + info.getDocStoreIsCompoundFile());
        segInfoStat.docStoreCompoundFile=info.getDocStoreIsCompoundFile();
      }
      final String delFileName=info.getDelFileName();
      if (delFileName == null) {
        msg("    no deletions");
        segInfoStat.hasDeletions=false;
      }
 else {
        msg("    has deletions [delFileName=" + delFileName + "]");
        segInfoStat.hasDeletions=true;
        segInfoStat.deletionsFileName=delFileName;
      }
      if (infoStream != null)       infoStream.print("    test: open reader.........");
      reader=SegmentReader.get(true,info,IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
      segInfoStat.openReaderPassed=true;
      final int numDocs=reader.numDocs();
      toLoseDocCount=numDocs;
      if (reader.hasDeletions()) {
        if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {
          throw new RuntimeException("delete count mismatch: info=" + (info.docCount - info.getDelCount()) + " vs reader="+ reader.liveDocs.count());
        }
        if ((info.docCount - reader.liveDocs.count()) > reader.maxDoc()) {
          throw new RuntimeException("too many deleted docs: maxDoc()=" + reader.maxDoc() + " vs del count="+ (info.docCount - reader.liveDocs.count()));
        }
        if (info.docCount - numDocs != info.getDelCount()) {
          throw new RuntimeException("delete count mismatch: info=" + info.getDelCount() + " vs reader="+ (info.docCount - numDocs));
        }
        segInfoStat.numDeleted=info.docCount - numDocs;
        msg("OK [" + (segInfoStat.numDeleted) + " deleted docs]");
      }
 else {
        if (info.getDelCount() != 0) {
          throw new RuntimeException("delete count mismatch: info=" + info.getDelCount() + " vs reader="+ (info.docCount - numDocs));
        }
        msg("OK");
      }
      if (reader.maxDoc() != info.docCount)       throw new RuntimeException("SegmentReader.maxDoc() " + reader.maxDoc() + " != SegmentInfos.docCount "+ info.docCount);
      if (infoStream != null) {
        infoStream.print("    test: fields..............");
      }
      Collection<String> fieldNames=reader.getFieldNames(IndexReader.FieldOption.ALL);
      msg("OK [" + fieldNames.size() + " fields]");
      segInfoStat.numFields=fieldNames.size();
      segInfoStat.fieldNormStatus=testFieldNorms(fieldNames,reader);
      segInfoStat.termIndexStatus=testTermIndex(reader);
      segInfoStat.storedFieldStatus=testStoredFields(info,reader,nf);
      segInfoStat.termVectorStatus=testTermVectors(info,reader,nf);
      segInfoStat.docValuesStatus=testDocValues(info,reader);
      if (segInfoStat.fieldNormStatus.error != null) {
        throw new RuntimeException("Field Norm test failed");
      }
 else       if (segInfoStat.termIndexStatus.error != null) {
        throw new RuntimeException("Term Index test failed");
      }
 else       if (segInfoStat.storedFieldStatus.error != null) {
        throw new RuntimeException("Stored Field test failed");
      }
 else       if (segInfoStat.termVectorStatus.error != null) {
        throw new RuntimeException("Term Vector test failed");
      }
 else       if (segInfoStat.docValuesStatus.error != null) {
        throw new RuntimeException("DocValues test failed");
      }
      msg("");
    }
 catch (    Throwable t) {
      msg("FAILED");
      String comment;
      comment="fixIndex() would remove reference to this segment";
      msg("    WARNING: " + comment + "; full exception:");
      if (infoStream != null)       t.printStackTrace(infoStream);
      msg("");
      result.totLoseDocCount+=toLoseDocCount;
      result.numBadSegments++;
      continue;
    }
 finally {
      if (reader != null)       reader.close();
    }
    result.newSegments.add((SegmentInfo)info.clone());
  }
  if (0 == result.numBadSegments) {
    result.clean=true;
  }
 else   msg("WARNING: " + result.numBadSegments + " broken segments (containing "+ result.totLoseDocCount+ " documents) detected");
  if (!(result.validCounter=(result.maxSegmentName < sis.counter))) {
    result.clean=false;
    result.newSegments.counter=result.maxSegmentName + 1;
    msg("ERROR: Next segment name counter " + sis.counter + " is not greater than max segment name "+ result.maxSegmentName);
  }
  if (result.clean) {
    msg("No problems were detected with this index.\n");
  }
  return result;
}
