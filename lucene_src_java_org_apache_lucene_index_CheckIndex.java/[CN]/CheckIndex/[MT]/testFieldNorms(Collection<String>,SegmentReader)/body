{
  final Status.FieldNormStatus status=new Status.FieldNormStatus();
  try {
    if (infoStream != null) {
      infoStream.print("    test: field norms.........");
    }
    FieldInfos infos=reader.fieldInfos();
    byte[] b;
    for (    final String fieldName : fieldNames) {
      FieldInfo info=infos.fieldInfo(fieldName);
      if (reader.hasNorms(fieldName)) {
        b=reader.norms(fieldName);
        if (b.length != reader.maxDoc()) {
          throw new RuntimeException("norms for field: " + fieldName + " are of the wrong size");
        }
        if (!info.isIndexed || info.omitNorms) {
          throw new RuntimeException("field: " + fieldName + " should omit norms but has them!");
        }
        ++status.totFields;
      }
 else {
        if (reader.norms(fieldName) != null) {
          throw new RuntimeException("field: " + fieldName + " should omit norms but has them!");
        }
        if (info.isIndexed && !info.omitNorms) {
          throw new RuntimeException("field: " + fieldName + " should have norms but omits them!");
        }
      }
    }
    msg("OK [" + status.totFields + " fields]");
  }
 catch (  Throwable e) {
    msg("ERROR [" + String.valueOf(e.getMessage()) + "]");
    status.error=e;
    if (infoStream != null) {
      e.printStackTrace(infoStream);
    }
  }
  return status;
}
