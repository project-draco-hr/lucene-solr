{
  RestTestHarness harness=restTestHarness;
  String payload="{\n" + "          'add-field' : {\n" + "                       'name':'a1',\n"+ "                       'type': 'string',\n"+ "                       'stored':false,\n"+ "                       'docValues':true,\n"+ "                       'indexed':false\n"+ "                       },\n"+ "          'add-field' : {\n"+ "                       'name':'a2',\n"+ "                       'type': 'string',\n"+ "                       'stored':false,\n"+ "                       'useDocValuesAsStored':true,\n"+ "                       'docValues':true,\n"+ "                       'indexed':true\n"+ "                       },\n"+ "          'add-field' : {\n"+ "                       'name':'a3',\n"+ "                       'type': 'string',\n"+ "                       'stored':false,\n"+ "                       'useDocValuesAsStored':false,\n"+ "                       'docValues':true,\n"+ "                       'indexed':true\n"+ "                       }\n"+ "          }\n";
  String response=harness.post("/schema?wt=json",json(payload));
  Map m=(Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
  assertNull(response,m.get("errors"));
  m=TestBulkSchemaAPI.getObj(harness,"a1","fields");
  assertNotNull("field a1 not created",m);
  assertNull(m.get("useDocValuesAsStored"));
  m=TestBulkSchemaAPI.getObj(harness,"a2","fields");
  assertNotNull("field a2 not created",m);
  assertEquals(Boolean.TRUE,m.get("useDocValuesAsStored"));
  m=TestBulkSchemaAPI.getObj(harness,"a3","fields");
  assertNotNull("field a3 not created",m);
  assertEquals(Boolean.FALSE,m.get("useDocValuesAsStored"));
  assertU(adoc("id","myid1","a1","1","a2","2","a3","3"));
  assertU(commit());
  RestTestBase.assertJQ("/select?q=id:myid*&fl=*","/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]");
  RestTestBase.assertJQ("/select?q=id:myid*&fl=id,a1,a2,a3","/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]");
  RestTestBase.assertJQ("/select?q=id:myid*&fl=a3","/response/docs==[{'a3':'3'}]");
  RestTestBase.assertJQ("/select?q=id:myid*&fl=*,a3","/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a3':'3'}]");
  RestTestBase.assertJQ("/select?q=id:myid*&fl=id,a*","/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2'}]");
  payload="{\n" + "          'replace-field' : {\n" + "                       'name':'a1',\n"+ "                       'type': 'string',\n"+ "                       'stored':false,\n"+ "                       'useDocValuesAsStored':false,\n"+ "                       'docValues':true,\n"+ "                       'indexed':false\n"+ "                       }}";
  response=harness.post("/schema?wt=json",json(payload));
  m=TestBulkSchemaAPI.getObj(harness,"a1","fields");
  assertNotNull("field a1 doesn't exist any more",m);
  assertEquals(Boolean.FALSE,m.get("useDocValuesAsStored"));
  payload="{\n" + "          'replace-field' : {\n" + "                       'name':'a1',\n"+ "                       'type': 'string',\n"+ "                       'stored':false,\n"+ "                       'useDocValuesAsStored':true,\n"+ "                       'docValues':true,\n"+ "                       'indexed':false\n"+ "                       }}";
  response=harness.post("/schema?wt=json",json(payload));
  m=TestBulkSchemaAPI.getObj(harness,"a1","fields");
  assertNotNull("field a1 doesn't exist any more",m);
  assertEquals(Boolean.TRUE,m.get("useDocValuesAsStored"));
  payload="{          'add-field' : {\n" + "                       'name':'a4',\n" + "                       'type': 'string',\n"+ "                       'stored':true,\n"+ "                       'useDocValuesAsStored':true,\n"+ "                       'docValues':true,\n"+ "                       'indexed':true\n"+ "                       }}";
  response=harness.post("/schema?wt=json",json(payload));
  m=TestBulkSchemaAPI.getObj(harness,"a4","fields");
  assertNotNull("field a4 not found",m);
  assertEquals(Boolean.TRUE,m.get("useDocValuesAsStored"));
  assertU(adoc("id","myid1","a1","1","a2","2","a3","3","a4","4"));
  assertU(commit());
  RestTestBase.assertJQ("/select?q=id:myid*&fl=*","/response/docs==[{'id':'myid1', 'a1':'1', 'a2':'2', 'a4':'4'}]");
}
