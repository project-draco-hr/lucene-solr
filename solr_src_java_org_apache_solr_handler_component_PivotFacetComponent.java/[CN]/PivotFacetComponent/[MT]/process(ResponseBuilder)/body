{
  if (!rb.doFacets)   return;
  SolrParams params=rb.req.getParams();
  String[] pivots=params.getParams(FacetParams.FACET_PIVOT);
  if (pivots == null)   return;
  int minMatch=params.getInt(FacetParams.FACET_PIVOT_MINCOUNT,1);
  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<List<NamedList<Object>>>();
  for (  String pivot : pivots) {
    String[] fields=pivot.split(",");
    if (fields.length < 2) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Pivot Facet needs at least two fields: " + pivot);
    }
    DocSet docs=rb.getResults().docSet;
    String field=fields[0];
    String subField=fields[1];
    Deque<String> fnames=new LinkedList<String>();
    for (int i=fields.length - 1; i > 1; i--) {
      fnames.push(fields[i]);
    }
    SimpleFacets sf=getFacetImplementation(rb.req,rb.getResults().docSet,rb.req.getParams());
    NamedList<Integer> superFacets=sf.getTermCounts(field);
    pivotResponse.add(pivot,doPivots(superFacets,field,subField,fnames,rb,docs,minMatch));
  }
  NamedList facetCounts=(NamedList)rb.rsp.getValues().get("facet_counts");
  if (facetCounts == null) {
    facetCounts=new NamedList();
    rb.rsp.add("facet_counts",facetCounts);
  }
  facetCounts.add(PIVOT_KEY,pivotResponse);
}
