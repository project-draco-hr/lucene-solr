{
  String fieldName=DOMUtils.getAttributeWithInheritanceOrFail(e,"fieldName");
  String value=DOMUtils.getNonBlankTextOrFail(e);
  try {
    List<SpanQuery> clausesList=new ArrayList<SpanQuery>();
    TokenStream ts=analyzer.reusableTokenStream(fieldName,new StringReader(value));
    TermToBytesRefAttribute termAtt=ts.addAttribute(TermToBytesRefAttribute.class);
    BytesRef bytes=termAtt.getBytesRef();
    ts.reset();
    while (ts.incrementToken()) {
      termAtt.fillBytesRef();
      SpanTermQuery stq=new SpanTermQuery(new Term(fieldName,new BytesRef(bytes)));
      clausesList.add(stq);
    }
    ts.end();
    ts.close();
    SpanOrQuery soq=new SpanOrQuery(clausesList.toArray(new SpanQuery[clausesList.size()]));
    soq.setBoost(DOMUtils.getAttribute(e,"boost",1.0f));
    return soq;
  }
 catch (  IOException ioe) {
    throw new ParserException("IOException parsing value:" + value);
  }
}
