{
  if (numberedStates == null) {
    expandSingleton();
    final Set<State> visited=new HashSet<>();
    final LinkedList<State> worklist=new LinkedList<>();
    State states[]=new State[4];
    int upto=0;
    worklist.add(initial);
    visited.add(initial);
    initial.number=upto;
    states[upto]=initial;
    upto++;
    while (worklist.size() > 0) {
      State s=worklist.removeFirst();
      for (int i=0; i < s.numTransitions; i++) {
        final Transition t=s.transitionsArray[i];
        if (!visited.contains(t.to)) {
          visited.add(t.to);
          worklist.add(t.to);
          t.to.number=upto;
          if (upto == states.length) {
            final State[] newArray=new State[ArrayUtil.oversize(1 + upto,RamUsageEstimator.NUM_BYTES_OBJECT_REF)];
            System.arraycopy(states,0,newArray,0,upto);
            states=newArray;
          }
          states[upto]=t.to;
          upto++;
        }
      }
    }
    if (states.length != upto) {
      final State[] newArray=new State[upto];
      System.arraycopy(states,0,newArray,0,upto);
      states=newArray;
    }
    numberedStates=states;
  }
  return numberedStates;
}
