{
  final Object monitor=new Object();
  final boolean[] done=new boolean[1];
  Map entityAttrs=createMap("name","e","url","cd.xml",XPathEntityProcessor.FOR_EACH,"/catalog/cd","stream","true","batchSize","1");
  List fields=new ArrayList();
  fields.add(createMap("column","title","xpath","/catalog/cd/title"));
  fields.add(createMap("column","artist","xpath","/catalog/cd/artist"));
  fields.add(createMap("column","year","xpath","/catalog/cd/year"));
  Context c=getContext(null,new VariableResolverImpl(),getDataSource(cdData),Context.FULL_DUMP,fields,entityAttrs);
  XPathEntityProcessor xPathEntityProcessor=new XPathEntityProcessor(){
    private int count;
    @Override protected Map<String,Object> readRow(    Map<String,Object> record,    String xpath){
synchronized (monitor) {
        if (simulateSlowReader && !done[0]) {
          try {
            monitor.wait(100);
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
      return super.readRow(record,xpath);
    }
  }
;
  if (simulateSlowResultProcessor) {
    xPathEntityProcessor.blockingQueueSize=1;
  }
  xPathEntityProcessor.blockingQueueTimeOut=1;
  xPathEntityProcessor.blockingQueueTimeOutUnits=TimeUnit.MICROSECONDS;
  xPathEntityProcessor.init(c);
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  while (true) {
    if (rowsToRead >= 0 && result.size() >= rowsToRead) {
      Thread.currentThread().interrupt();
    }
    Map<String,Object> row=xPathEntityProcessor.nextRow();
    if (row == null)     break;
    result.add(row);
    if (simulateSlowResultProcessor) {
synchronized (xPathEntityProcessor.publisherThread) {
        if (xPathEntityProcessor.publisherThread.isAlive()) {
          xPathEntityProcessor.publisherThread.wait(1000);
        }
      }
    }
  }
synchronized (monitor) {
    done[0]=true;
    monitor.notify();
  }
  xPathEntityProcessor.publisherThread.join(1000);
  assertEquals("Expected thread to stop",false,xPathEntityProcessor.publisherThread.isAlive());
  assertEquals(rowsToRead < 0 ? 3 : rowsToRead,result.size());
  if (rowsToRead < 0) {
    assertEquals("Empire Burlesque",result.get(0).get("title"));
    assertEquals("Bonnie Tyler",result.get(1).get("artist"));
    assertEquals("1982",result.get(2).get("year"));
  }
}
