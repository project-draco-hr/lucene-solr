{
  SolrQueryParser parserOne=new SolrQueryParser(schema,"one");
  assertTrue(parserOne.getAllowLeadingWildcard());
  SolrQueryParser parserTwo=new SolrQueryParser(schema,"two");
  assertTrue(parserTwo.getAllowLeadingWildcard());
  SolrQueryParser parserThree=new SolrQueryParser(schema,"three");
  assertTrue(parserThree.getAllowLeadingWildcard());
  assertU(adoc("id","1","one","one"));
  assertU(adoc("id","2","two","two"));
  assertU(adoc("id","3","three","three"));
  assertU(adoc("id","4","one","four"));
  assertU(adoc("id","5","two","five"));
  assertU(adoc("id","6","three","si\uD834\uDD1Ex"));
  assertU(commit());
  assertQ("should have matched",req("+id:1 +one:one"),"//result[@numFound=1]");
  assertQ("should have matched",req("+id:4 +one:f*ur"),"//result[@numFound=1]");
  assertQ("should have matched",req("+id:6 +three:*si\uD834\uDD1Ex"),"//result[@numFound=1]");
  assertTrue(wasReversed(parserTwo,"*hree"));
  assertTrue(wasReversed(parserTwo,"t*ree"));
  assertTrue(wasReversed(parserTwo,"th*ee"));
  assertFalse(wasReversed(parserTwo,"thr*e"));
  assertTrue(wasReversed(parserTwo,"?hree"));
  assertTrue(wasReversed(parserTwo,"t?ree"));
  assertFalse(wasReversed(parserTwo,"th?ee"));
  assertFalse(wasReversed(parserTwo,"th?*ee"));
  assertFalse(wasReversed(parserTwo,"short*token"));
  assertTrue(wasReversed(parserTwo,"ver*longtoken"));
}
