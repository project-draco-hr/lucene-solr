{
  final int[][] positions=new int[numFields][];
  reader.reset(vectorsStream,totalPositions);
  int toSkip=0;
  int termIndex=0;
  for (int i=0; i < skip; ++i) {
    final int f=(int)flags.get(i);
    final int termCount=(int)numTerms.get(i);
    if ((f & flag) != 0) {
      for (int j=0; j < termCount; ++j) {
        final int freq=termFreqs[termIndex + j];
        toSkip+=freq;
      }
    }
    termIndex+=termCount;
  }
  reader.skip(toSkip);
  for (int i=0; i < numFields; ++i) {
    final int f=(int)flags.get(skip + i);
    final int termCount=(int)numTerms.get(skip + i);
    if ((f & flag) != 0) {
      final int totalFreq=positionIndex[i][termCount];
      final int[] fieldPositions=new int[totalFreq];
      positions[i]=fieldPositions;
      for (int j=0; j < totalFreq; ) {
        final LongsRef nextPositions=reader.next(totalFreq - j);
        for (int k=0; k < nextPositions.length; ++k) {
          fieldPositions[j++]=(int)nextPositions.longs[nextPositions.offset + k];
        }
      }
    }
    termIndex+=termCount;
  }
  reader.skip(totalPositions - reader.ord());
  return positions;
}
