{
  final FieldSelectorResult accept=selector.accept(fieldInfo.name);
switch (accept) {
case LOAD:
case LOAD_AND_BREAK:
    final byte[] b=new byte[numUTF8Bytes];
  in.readBytes(b,0,b.length);
FieldType ft=new FieldType(TextField.TYPE_STORED);
ft.setStoreTermVectors(fieldInfo.storeTermVector);
ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);
ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);
doc.add(new Field(fieldInfo.name,new String(b,"UTF-8"),ft));
return accept != FieldSelectorResult.LOAD;
case LAZY_LOAD:
case LATENT:
addFieldLazy(in,fieldInfo,false,accept == FieldSelectorResult.LAZY_LOAD,numUTF8Bytes);
return false;
case SIZE:
case SIZE_AND_BREAK:
in.seek(in.getFilePointer() + numUTF8Bytes);
addFieldSize(fieldInfo,2 * numUTF8Bytes);
return accept != FieldSelectorResult.SIZE;
default :
in.seek(in.getFilePointer() + numUTF8Bytes);
return false;
}
}
