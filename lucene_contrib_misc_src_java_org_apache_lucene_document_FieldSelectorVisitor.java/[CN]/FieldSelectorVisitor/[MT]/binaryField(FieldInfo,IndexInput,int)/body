{
  final FieldSelectorResult accept=selector.accept(fieldInfo.name);
switch (accept) {
case LOAD:
case LOAD_AND_BREAK:
    final byte[] b=new byte[numBytes];
  in.readBytes(b,0,b.length);
doc.add(new BinaryField(fieldInfo.name,b));
return accept != FieldSelectorResult.LOAD;
case LAZY_LOAD:
case LATENT:
addFieldLazy(in,fieldInfo,true,accept == FieldSelectorResult.LAZY_LOAD,numBytes);
return false;
case SIZE:
case SIZE_AND_BREAK:
in.seek(in.getFilePointer() + numBytes);
addFieldSize(fieldInfo,numBytes);
return accept != FieldSelectorResult.SIZE;
default :
in.seek(in.getFilePointer() + numBytes);
return false;
}
}
