{
  log.debug("Opened Writer " + name);
  this.name=name;
  this.schema=schema;
  setSimilarity(schema.getSimilarity());
  if (config != null) {
    setUseCompoundFile(config.useCompoundFile);
    if (config.maxBufferedDocs != -1) {
      setMaxBufferedDocs(config.maxBufferedDocs);
    }
    if (config.ramBufferSizeMB != -1) {
      setRAMBufferSizeMB(config.ramBufferSizeMB);
    }
    if (config.maxMergeDocs != -1)     setMaxMergeDocs(config.maxMergeDocs);
    if (config.maxFieldLength != -1)     setMaxFieldLength(config.maxFieldLength);
    if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {
      MergePolicy policy=(MergePolicy)schema.getResourceLoader().newInstance(config.mergePolicyClassName);
      setMergePolicy(policy);
    }
    if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {
      setMergeFactor(config.mergeFactor);
    }
    if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {
      MergeScheduler scheduler=(MergeScheduler)schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);
      setMergeScheduler(scheduler);
    }
    String infoStreamFile=config.infoStreamFile;
    if (infoStreamFile != null) {
      File f=new File(infoStreamFile);
      f.getParentFile().mkdirs();
      FileOutputStream fos=new FileOutputStream(f,true);
      infoStream=new TimeLoggingPrintStream(fos,true);
      setInfoStream(infoStream);
    }
  }
}
