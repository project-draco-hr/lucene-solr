{
  log.debug("Opened Writer " + name);
  this.name=name;
  this.schema=schema;
  setSimilarity(schema.getSimilarity());
  if (config != null) {
    if (config.maxBufferedDocs != -1) {
      setMaxBufferedDocs(config.maxBufferedDocs);
    }
    if (config.ramBufferSizeMB != -1) {
      setRAMBufferSizeMB(config.ramBufferSizeMB);
    }
    if (config.termIndexInterval != -1) {
      setTermIndexInterval(config.termIndexInterval);
    }
    if (config.maxMergeDocs != -1)     setMaxMergeDocs(config.maxMergeDocs);
    if (config.maxFieldLength != -1)     setMaxFieldLength(config.maxFieldLength);
    String className=config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : config.mergePolicyInfo.className;
    MergePolicy policy=null;
    try {
      policy=(MergePolicy)schema.getResourceLoader().newInstance(className,null,new Class[]{IndexWriter.class},new Object[]{this});
    }
 catch (    Exception e) {
      policy=(MergePolicy)schema.getResourceLoader().newInstance(className);
    }
    if (config.mergePolicyInfo != null)     SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);
    setMergePolicy(policy);
    if (getMergePolicy() instanceof LogMergePolicy) {
      setUseCompoundFile(config.useCompoundFile);
    }
 else {
      log.warn("Use of compound file format cannot be configured if merge policy is not an instance " + "of LogMergePolicy. The configured policy's defaults will be used.");
    }
    className=config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : config.mergeSchedulerInfo.className;
    MergeScheduler scheduler=(MergeScheduler)schema.getResourceLoader().newInstance(className);
    if (config.mergeSchedulerInfo != null)     SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);
    setMergeScheduler(scheduler);
    String infoStreamFile=config.infoStreamFile;
    if (infoStreamFile != null) {
      File f=new File(infoStreamFile);
      f.getParentFile().mkdirs();
      FileOutputStream fos=new FileOutputStream(f,true);
      infoStream=new TimeLoggingPrintStream(fos,true);
      setInfoStream(infoStream);
    }
  }
}
