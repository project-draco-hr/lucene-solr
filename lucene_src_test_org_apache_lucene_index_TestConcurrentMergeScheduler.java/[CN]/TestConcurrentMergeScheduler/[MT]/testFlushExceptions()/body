{
  MockDirectoryWrapper directory=newDirectory();
  FailOnlyOnFlush failure=new FailOnlyOnFlush();
  directory.failOn(failure);
  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random)).setMaxBufferedDocs(2));
  writer.setInfoStream(VERBOSE ? System.out : null);
  Document doc=new Document();
  Field idField=newField("id","",Field.Store.YES,Field.Index.NOT_ANALYZED);
  doc.add(idField);
  int extraCount=0;
  for (int i=0; i < 10; i++) {
    if (VERBOSE) {
      System.out.println("TEST: iter=" + i);
    }
    for (int j=0; j < 20; j++) {
      idField.setValue(Integer.toString(i * 20 + j));
      writer.addDocument(doc);
    }
    while (true) {
      writer.addDocument(doc);
      failure.setDoFail();
      try {
        writer.flush(true,true);
        if (failure.hitExc) {
          fail("failed to hit IOException");
        }
        extraCount++;
      }
 catch (      IOException ioe) {
        if (VERBOSE) {
          ioe.printStackTrace(System.out);
        }
        failure.clearDoFail();
        break;
      }
    }
    assertEquals(20 * (i + 1) + extraCount,writer.numDocs());
  }
  writer.close();
  IndexReader reader=IndexReader.open(directory,true);
  assertEquals(200 + extraCount,reader.numDocs());
  reader.close();
  directory.close();
}
