{
  BytesRef term;
  Bits randomBits=new RandomBits(MAXDOC,random().nextDouble(),random());
  PostingsEnum leftPositions=null;
  PostingsEnum rightPositions=null;
  PostingsEnum leftDocs=null;
  PostingsEnum rightDocs=null;
  while ((term=leftTermsEnum.next()) != null) {
    assertEquals(term,rightTermsEnum.next());
    assertTermStats(leftTermsEnum,rightTermsEnum);
    if (deep) {
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.ALL));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.ALL));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.ALL));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.ALL),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.ALL));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.PAYLOADS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.PAYLOADS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.PAYLOADS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.PAYLOADS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.PAYLOADS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.OFFSETS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.OFFSETS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.OFFSETS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.OFFSETS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.OFFSETS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.POSITIONS));
      assertDocsAndPositionsEnum(leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.POSITIONS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(null,leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(null,rightPositions,PostingsEnum.POSITIONS));
      assertPositionsSkipping(leftTermsEnum.docFreq(),leftPositions=leftTermsEnum.postings(randomBits,leftPositions,PostingsEnum.POSITIONS),rightPositions=rightTermsEnum.postings(randomBits,rightPositions,PostingsEnum.POSITIONS));
      assertDocsEnum(leftDocs=leftTermsEnum.postings(null,leftDocs),rightDocs=rightTermsEnum.postings(null,rightDocs));
      assertDocsEnum(leftDocs=leftTermsEnum.postings(randomBits,leftDocs),rightDocs=rightTermsEnum.postings(randomBits,rightDocs));
      assertDocsEnum(leftDocs=leftTermsEnum.postings(null,leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(null,rightDocs,PostingsEnum.NONE));
      assertDocsEnum(leftDocs=leftTermsEnum.postings(randomBits,leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(randomBits,rightDocs,PostingsEnum.NONE));
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(null,leftDocs),rightDocs=rightTermsEnum.postings(null,rightDocs));
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(randomBits,leftDocs),rightDocs=rightTermsEnum.postings(randomBits,rightDocs));
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(null,leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(null,rightDocs,PostingsEnum.NONE));
      assertDocsSkipping(leftTermsEnum.docFreq(),leftDocs=leftTermsEnum.postings(randomBits,leftDocs,PostingsEnum.NONE),rightDocs=rightTermsEnum.postings(randomBits,rightDocs,PostingsEnum.NONE));
    }
  }
  assertNull(rightTermsEnum.next());
}
