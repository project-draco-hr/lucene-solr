{
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","(","q.operators","AND, NOT, OR, PHRASE, PREFIX, ESCAPE, WHITESPACE"),"/response/numFound==1");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","\\","q.operators","AND, NOT, OR, PHRASE, PREFIX, ESCAPE, WHITESPACE"),"/response/numFound==0");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","(","q.operators","PRECEDENCE"),"/response/numFound==0");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","\\","q.operators","PRECEDENCE"),"/response/numFound==1");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q",")","q.operators","AND, NOT, OR, PHRASE, PREFIX, ESCAPE, WHITESPACE"),"/response/numFound==1");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","\\","q.operators","AND, NOT, OR, PHRASE, PREFIX, ESCAPE, WHITESPACE"),"/response/numFound==0");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q",")","q.operators","PRECEDENCE"),"/response/numFound==0");
  assertJQ(req("defType","simple","qf","text0 text1 text-keyword0","q","\\","q.operators","PRECEDENCE"),"/response/numFound==1");
}
