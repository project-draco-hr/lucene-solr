{
  if (event.getState() == AuthFailed || event.getState() == Disconnected || event.getState() == Expired) {
    log.warn("Watcher " + this + " name:"+ name+ " got event "+ event+ " path:"+ event.getPath()+ " type:"+ event.getType());
  }
 else   if (log.isInfoEnabled()) {
    log.info("Watcher " + this + " name:"+ name+ " got event "+ event+ " path:"+ event.getPath()+ " type:"+ event.getType());
  }
  if (isClosed) {
    log.info("Client->ZooKeeper status change trigger but we are already closed");
    return;
  }
  KeeperState state=event.getState();
  if (state == KeeperState.SyncConnected) {
    connected();
    connectionStrategy.connected();
  }
 else   if (state == Expired) {
    connected=false;
    likelyExpiredState=LikelyExpiredState.EXPIRED;
    log.warn("Our previous ZooKeeper session was expired. Attempting to reconnect to recover relationship with ZooKeeper...");
    if (beforeReconnect != null) {
      try {
        beforeReconnect.command();
      }
 catch (      Exception e) {
        log.warn("Exception running beforeReconnect command",e);
      }
    }
    do {
      try {
        connectionStrategy.reconnect(zkServerAddress,client.getZkClientTimeout(),this,new ZkClientConnectionStrategy.ZkUpdate(){
          @Override public void update(          SolrZooKeeper keeper){
            try {
              waitForConnected(Long.MAX_VALUE);
            }
 catch (            Exception e1) {
              closeKeeper(keeper);
              throw new RuntimeException(e1);
            }
            log.info("Connection with ZooKeeper reestablished.");
            try {
              client.updateKeeper(keeper);
            }
 catch (            InterruptedException e) {
              closeKeeper(keeper);
              Thread.currentThread().interrupt();
              throw new RuntimeException(e);
            }
catch (            Exception t) {
              closeKeeper(keeper);
              throw new RuntimeException(t);
            }
            if (onReconnect != null) {
              onReconnect.command();
            }
          }
        }
);
        break;
      }
 catch (      Exception e) {
        SolrException.log(log,"",e);
        log.info("Could not connect due to error, sleeping for 5s and trying agian");
        waitSleep(1000);
      }
    }
 while (!isClosed);
    log.info("Connected:" + connected);
  }
 else   if (state == KeeperState.Disconnected) {
    log.warn("zkClient has disconnected");
    disconnected();
    connectionStrategy.disconnected();
  }
 else   if (state == KeeperState.AuthFailed) {
    log.warn("zkClient received AuthFailed");
  }
}
