{
  ResourceLoader loader=new ResourceAsStreamResourceLoader(TestStopFilter.class);
  assertTrue("loader is null and it shouldn't be",loader != null);
  CommonGramsFilterFactory factory=new CommonGramsFilterFactory();
  Map<String,String> args=new HashMap<String,String>();
  args.put("words","stop-1.txt");
  args.put("ignoreCase","true");
  factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);
  factory.init(args);
  factory.inform(loader);
  CharArraySet words=factory.getCommonWords();
  assertTrue("words is null and it shouldn't be",words != null);
  assertTrue("words Size: " + words.size() + " is not: "+ 2,words.size() == 2);
  assertTrue(factory.isIgnoreCase() + " does not equal: " + true,factory.isIgnoreCase() == true);
  factory=new CommonGramsFilterFactory();
  args.put("words","stop-1.txt, stop-2.txt");
  factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);
  factory.init(args);
  factory.inform(loader);
  words=factory.getCommonWords();
  assertTrue("words is null and it shouldn't be",words != null);
  assertTrue("words Size: " + words.size() + " is not: "+ 4,words.size() == 4);
  assertTrue(factory.isIgnoreCase() + " does not equal: " + true,factory.isIgnoreCase() == true);
  factory=new CommonGramsFilterFactory();
  args.put("words","stop-snowball.txt");
  args.put("format","snowball");
  factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);
  factory.init(args);
  factory.inform(loader);
  words=factory.getCommonWords();
  assertEquals(8,words.size());
  assertTrue(words.contains("he"));
  assertTrue(words.contains("him"));
  assertTrue(words.contains("his"));
  assertTrue(words.contains("himself"));
  assertTrue(words.contains("she"));
  assertTrue(words.contains("her"));
  assertTrue(words.contains("hers"));
  assertTrue(words.contains("herself"));
}
