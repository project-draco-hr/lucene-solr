{
  String args[]=header.split("\\s+");
  boolean crossProduct=args[2].equals("Y");
  int numLines=Integer.parseInt(args[3]);
  for (int i=0; i < numLines; i++) {
    String line=reader.readLine();
    String ruleArgs[]=line.split("\\s+");
    if (ruleArgs.length < 5) {
      throw new ParseException("The affix file contains a rule with less than five elements",reader.getLineNumber());
    }
    Affix affix=new Affix();
    affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));
    affix.setStrip(ruleArgs[2].equals("0") ? "" : ruleArgs[2]);
    String affixArg=ruleArgs[3];
    int flagSep=affixArg.lastIndexOf('/');
    if (flagSep != -1) {
      String flagPart=affixArg.substring(flagSep + 1);
      if (aliasCount > 0) {
        flagPart=getAliasValue(Integer.parseInt(flagPart));
      }
      char appendFlags[]=flagParsingStrategy.parseFlags(flagPart);
      Arrays.sort(appendFlags);
      affix.setAppendFlags(appendFlags);
      affixArg=affixArg.substring(0,flagSep);
    }
    String condition=ruleArgs[4];
    if (condition.startsWith("[") && !condition.endsWith("]")) {
      condition=condition + "]";
    }
    if (condition.indexOf('-') >= 0) {
      condition=condition.replace("-","\\-");
    }
    String regex=String.format(Locale.ROOT,conditionPattern,condition);
    Integer patternIndex=seenPatterns.get(regex);
    if (patternIndex == null) {
      patternIndex=patterns.size();
      seenPatterns.put(regex,patternIndex);
      Pattern pattern=Pattern.compile(regex);
      patterns.add(pattern);
    }
    affix.setCondition(patterns.get(patternIndex));
    affix.setCrossProduct(crossProduct);
    List<Affix> list=affixes.get(affixArg);
    if (list == null) {
      list=new ArrayList<Affix>();
      affixes.put(affixArg,list);
    }
    list.add(affix);
  }
}
