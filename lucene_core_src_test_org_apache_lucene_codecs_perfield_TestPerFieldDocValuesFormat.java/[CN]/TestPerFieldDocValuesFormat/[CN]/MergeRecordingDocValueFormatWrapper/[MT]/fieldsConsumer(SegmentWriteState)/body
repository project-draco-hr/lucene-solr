{
  final DocValuesConsumer consumer=delegate.fieldsConsumer(state);
  return new DocValuesConsumer(){
    @Override public void addNumericField(    FieldInfo field,    Iterable<Number> values) throws IOException {
      consumer.addNumericField(field,values);
    }
    @Override public void addBinaryField(    FieldInfo field,    Iterable<BytesRef> values) throws IOException {
      consumer.addBinaryField(field,values);
    }
    @Override public void addSortedField(    FieldInfo field,    Iterable<BytesRef> values,    Iterable<Number> docToOrd) throws IOException {
      consumer.addSortedField(field,values,docToOrd);
    }
    @Override public void addSortedNumericField(    FieldInfo field,    Iterable<Number> docToValueCount,    Iterable<Number> values) throws IOException {
      consumer.addSortedNumericField(field,docToValueCount,values);
    }
    @Override public void addSortedSetField(    FieldInfo field,    Iterable<BytesRef> values,    Iterable<Number> docToOrdCount,    Iterable<Number> ords) throws IOException {
      consumer.addSortedSetField(field,values,docToOrdCount,ords);
    }
    @Override public void merge(    MergeState mergeState) throws IOException {
      nbMergeCalls++;
      for (      FieldInfo fi : mergeState.mergeFieldInfos) {
        fieldNames.add(fi.name);
      }
      consumer.merge(mergeState);
    }
    @Override public void close() throws IOException {
      consumer.close();
    }
  }
;
}
