{
  String coreName=h.getCore().getName();
  RefCounted<SolrIndexSearcher> searcher=h.getCore().getSearcher();
  SolrIndexSearcher indexSearcher=searcher.get();
  log.info("Core " + coreName + ", NumDocs before reload: "+ indexSearcher.getIndexReader().numDocs());
  log.info("Directory: " + indexSearcher.getIndexDir());
  searcher.decref();
  h.close();
  solrConfig=TestHarness.createConfig(getSolrConfigFile());
  h=new TestHarness(dataDir.getAbsolutePath(),solrConfig,getSchemaFile());
  searcher=h.getCore().getSearcher();
  indexSearcher=searcher.get();
  log.info("Core " + coreName + ", NumDocs now: "+ indexSearcher.getIndexReader().numDocs());
  log.info("Directory: " + indexSearcher.getIndexDir());
  searcher.decref();
  h.validateUpdate("<commit/>");
  handler=h.getCore().getRequestHandler("/suggest");
  ModifiableSolrParams params=new ModifiableSolrParams();
  params.set(CommonParams.Q,"ac");
  params.set(SpellingParams.SPELLCHECK_COUNT,2);
  params.set(SpellingParams.SPELLCHECK_ONLY_MORE_POPULAR,true);
  LocalSolrQueryRequest req=new LocalSolrQueryRequest(h.getCore(),params);
  SolrQueryResponse rsp=new SolrQueryResponse();
  handler.handleRequest(req,rsp);
  String res=assertXPath(h.getCore(),req,rsp,"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/int[@name='numFound'][.='2']","//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/arr[@name='suggestion']/str[1][.='acquire']","//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/arr[@name='suggestion']/str[2][.='accommodate']");
  assertNull(res,res);
}
