{
  SortedNumericRawValues instance=sortedNumericInstances.get(field.name);
  final SortedNumericEntry entry=sortedNumerics.get(field.name);
  if (instance == null) {
    instance=loadSortedNumeric(entry);
    if (!merging) {
      sortedNumericInstances.put(field.name,instance);
      ramBytesUsed.addAndGet(instance.ramBytesUsed());
    }
  }
  if (entry.docToAddress == null) {
    final NumericDocValues single=instance.values.numerics;
    final Bits docsWithField=getMissingBits(field,entry.values.missingOffset,entry.values.missingBytes);
    return DocValues.singleton(single,docsWithField);
  }
 else {
    final NumericDocValues docToAddress=instance.docToAddress.numerics;
    final NumericDocValues values=instance.values.numerics;
    return new SortedNumericDocValues(){
      int valueStart;
      int valueLimit;
      @Override public void setDocument(      int doc){
        valueStart=(int)docToAddress.get(doc);
        valueLimit=(int)docToAddress.get(doc + 1);
      }
      @Override public long valueAt(      int index){
        return values.get(valueStart + index);
      }
      @Override public int count(){
        return valueLimit - valueStart;
      }
    }
;
  }
}
