{
  SortedSetRawValues instance=sortedSetInstances.get(field.name);
  final SortedSetEntry entry=sortedSets.get(field.name);
  if (instance == null) {
    instance=loadSortedSet(entry);
    if (!merging) {
      sortedSetInstances.put(field.name,instance);
      ramBytesUsed.addAndGet(instance.ramBytesUsed());
    }
  }
  if (instance.docToOrdAddress == null) {
    SortedDocValues sorted=newSortedInstance(instance.ords.numerics,getBinary(field),entry.values.count);
    return DocValues.singleton(sorted);
  }
 else {
    final NumericDocValues docToOrdAddress=instance.docToOrdAddress.numerics;
    final NumericDocValues ords=instance.ords.numerics;
    final BinaryDocValues values=getBinary(field);
    return new RandomAccessOrds(){
      int ordStart;
      int ordUpto;
      int ordLimit;
      @Override public long nextOrd(){
        if (ordUpto == ordLimit) {
          return NO_MORE_ORDS;
        }
 else {
          return ords.get(ordUpto++);
        }
      }
      @Override public void setDocument(      int docID){
        ordStart=ordUpto=(int)docToOrdAddress.get(docID);
        ordLimit=(int)docToOrdAddress.get(docID + 1);
      }
      @Override public BytesRef lookupOrd(      long ord){
        return values.get((int)ord);
      }
      @Override public long getValueCount(){
        return entry.values.count;
      }
      @Override public long ordAt(      int index){
        return ords.get(ordStart + index);
      }
      @Override public int cardinality(){
        return ordLimit - ordStart;
      }
    }
;
  }
}
