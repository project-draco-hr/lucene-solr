{
  GeoPolygon c;
  GeoPoint gp;
  List<GeoPoint> points;
  List<GeoPolygonFactory.PolygonDescription> shapes;
  points=new ArrayList<GeoPoint>();
  points.add(new GeoPoint(PlanetModel.SPHERE,0.0,-0.4));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.1,-0.5));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.0,-0.6));
  points.add(new GeoPoint(PlanetModel.SPHERE,-0.1,-0.5));
  c=GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,points);
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.55);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.45);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.65);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.35);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,Math.PI * 0.5,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,Math.PI);
  assertFalse(c.isWithin(gp));
  shapes=new ArrayList<>();
  shapes.add(new GeoPolygonFactory.PolygonDescription(points));
  c=GeoPolygonFactory.makeLargeGeoPolygon(PlanetModel.SPHERE,shapes);
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.45);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.55);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.65);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.35);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,Math.PI * 0.5,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,Math.PI);
  assertFalse(c.isWithin(gp));
  points=new ArrayList<GeoPoint>();
  points.add(new GeoPoint(PlanetModel.SPHERE,0.0,-0.4));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.1,-0.5));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.01,-0.6));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.1,-0.7));
  points.add(new GeoPoint(PlanetModel.SPHERE,0.0,-0.8));
  points.add(new GeoPoint(PlanetModel.SPHERE,-0.1,-0.7));
  points.add(new GeoPoint(PlanetModel.SPHERE,-0.01,-0.6));
  points.add(new GeoPoint(PlanetModel.SPHERE,-0.1,-0.5));
  c=GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,points);
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.55);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.45);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.05,-0.5);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.7);
  assertTrue(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,-0.35);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,-0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.15,-0.5);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,Math.PI * 0.5,0.0);
  assertFalse(c.isWithin(gp));
  gp=new GeoPoint(PlanetModel.SPHERE,0.0,Math.PI);
  assertFalse(c.isWithin(gp));
}
