{
  SolrCore core=h.getCore();
  assertTrue("Refcount != 1",core.getOpenCount() == 1);
  final ClosingRequestHandler handler1=new ClosingRequestHandler();
  handler1.inform(core);
  String path="/this/is A path /that won't be registered!";
  SolrRequestHandler old=core.registerRequestHandler(path,handler1);
  assertNull(old);
  assertEquals(core.getRequestHandlers().get(path),handler1);
  final int LOOP=100;
  final int MT=16;
  ExecutorService service=Executors.newFixedThreadPool(MT,new DefaultSolrThreadFactory("refCountMT"));
  List<Callable<Integer>> callees=new ArrayList<>(MT);
  final CoreContainer cores=h.getCoreContainer();
  for (int i=0; i < MT; ++i) {
    Callable<Integer> call=new Callable<Integer>(){
      void yield(      int n){
        try {
          Thread.sleep(0,(n % 13 + 1) * 10);
        }
 catch (        InterruptedException xint) {
        }
      }
      @Override public Integer call(){
        SolrCore core=null;
        int r=0;
        try {
          for (int l=0; l < LOOP; ++l) {
            r+=1;
            core=cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);
            yield(l);
            assertTrue("Refcount < 1",core.getOpenCount() >= 1);
            yield(l);
            assertTrue("Refcount > 17",core.getOpenCount() <= 17);
            yield(l);
            assertTrue("Handler is closed",handler1.closed == false);
            yield(l);
            core.close();
            core=null;
            yield(l);
          }
          return r;
        }
  finally {
          if (core != null)           core.close();
        }
      }
    }
;
    callees.add(call);
  }
  List<Future<Integer>> results=service.invokeAll(callees);
  for (  Future<Integer> result : results) {
    assertTrue("loop=" + result.get() + " < "+ LOOP,result.get() >= LOOP);
  }
  cores.shutdown();
  assertTrue("Refcount != 0",core.getOpenCount() == 0);
  assertTrue("Handler not closed",core.isClosed() && handler1.closed == true);
  service.shutdown();
  assertTrue("Running for too long...",service.awaitTermination(60,TimeUnit.SECONDS));
}
