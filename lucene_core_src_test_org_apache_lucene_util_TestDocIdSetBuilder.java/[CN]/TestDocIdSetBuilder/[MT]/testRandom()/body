{
  final int maxDoc=TestUtil.nextInt(random(),1,10000000);
  for (int i=1; i < maxDoc / 2; i<<=1) {
    final int numDocs=TestUtil.nextInt(random(),1,i);
    final FixedBitSet docs=new FixedBitSet(maxDoc);
    int c=0;
    while (c < numDocs) {
      final int d=random().nextInt(maxDoc);
      if (docs.get(d) == false) {
        docs.set(d);
        c+=1;
      }
    }
    final int[] array=new int[numDocs + random().nextInt(100)];
    DocIdSetIterator it=new BitSetIterator(docs,0L);
    int j=0;
    for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {
      array[j++]=doc;
    }
    assertEquals(numDocs,j);
    while (j < array.length) {
      array[j++]=array[random().nextInt(numDocs)];
    }
    for (j=array.length - 1; j >= 1; --j) {
      final int k=random().nextInt(j);
      int tmp=array[j];
      array[j]=array[k];
      array[k]=tmp;
    }
    DocIdSetBuilder builder=new DocIdSetBuilder(maxDoc);
    for (j=0; j < array.length; ) {
      final int l=TestUtil.nextInt(random(),1,array.length - j);
      DocIdSetBuilder.BulkAdder adder=null;
      for (int k=0, budget=0; k < l; ++k) {
        if (budget == 0 || rarely()) {
          budget=TestUtil.nextInt(random(),1,l - k + 5);
          adder=builder.grow(budget);
        }
        adder.add(array[j++]);
        budget--;
      }
    }
    final DocIdSet expected=new BitDocIdSet(docs);
    final DocIdSet actual=builder.build();
    assertEquals(expected,actual);
  }
}
