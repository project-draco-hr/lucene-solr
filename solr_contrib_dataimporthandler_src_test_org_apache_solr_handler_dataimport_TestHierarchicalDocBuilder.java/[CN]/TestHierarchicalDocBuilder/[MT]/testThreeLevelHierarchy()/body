{
  int parentsNum=3;
  int childrenNum=0;
  int grandChildrenNum=0;
  final String parentType="parent";
  final String childType="child";
  final String grandChildType="grand_child";
  List<String> parentIds=createDataIterator("select * from PARENT",parentType,parentType,parentsNum);
  Collections.shuffle(parentIds);
  String parentId1=parentIds.get(0);
  String parentId2=parentIds.get(1);
  int firstParentChildrenNum=3;
  String select="select * from CHILD where parent_id='" + parentId1 + "'";
  List<String> childrenIds=createDataIterator(select,childType,"child of first parent",firstParentChildrenNum);
  List<String> firstParentChildrenIds=new ArrayList<String>(childrenIds);
  childrenNum+=childrenIds.size();
  String childId=childrenIds.get(0);
  String description="grandchild of first parent, child of " + childId + " child";
  select="select * from GRANDCHILD where parent_id='" + childId + "'";
  List<String> grandChildrenIds=createDataIterator(select,grandChildType,description,atLeast(2));
  grandChildrenNum+=grandChildrenIds.size();
  childId=childrenIds.get(1);
  description="grandchild of first parent, child of " + childId + " child";
  select="select * from GRANDCHILD where parent_id='" + childId + "'";
  List<String> grandChildrenIds2=createDataIterator(select,grandChildType,description,atLeast(2));
  grandChildrenNum+=grandChildrenIds2.size();
  grandChildrenIds.addAll(grandChildrenIds2);
  select="select * from CHILD where parent_id='" + parentId2 + "'";
  childrenIds=createDataIterator(select,childType,"child of second parent",atLeast(2));
  childrenNum+=childrenIds.size();
  int totalDocsNum=parentsNum + childrenNum + grandChildrenNum;
  runFullImport(threeLevelHierarchyConfig);
  assertTrue("Update request processor processAdd was not called",TestUpdateRequestProcessor.processAddCalled);
  assertTrue("Update request processor processCommit was not callled",TestUpdateRequestProcessor.processCommitCalled);
  assertTrue("Update request processor finish was not called",TestUpdateRequestProcessor.finishCalled);
  assertQ(req("*:*"),"//*[@numFound='" + totalDocsNum + "']");
  assertQ(req("type_s:parent"),"//*[@numFound='" + parentsNum + "']");
  assertQ(req("type_s:child"),"//*[@numFound='" + childrenNum + "']");
  assertQ(req("type_s:grand_child"),"//*[@numFound='" + grandChildrenNum + "']");
  String randomGrandChildId=grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));
  Query query=createToParentQuery(parentType,FIELD_ID,randomGrandChildId);
  assertSearch(query,FIELD_ID,parentId1);
  String randomChildId=firstParentChildrenIds.get(random().nextInt(firstParentChildrenIds.size()));
  query=createToParentQuery(parentType,FIELD_ID,randomChildId);
  assertSearch(query,FIELD_ID,parentId1);
  randomGrandChildId=grandChildrenIds.get(random().nextInt(grandChildrenIds.size()));
  ToParentBlockJoinQuery childBlockJoinQuery=createToParentQuery(childType,FIELD_ID,randomGrandChildId);
  ToParentBlockJoinQuery blockJoinQuery=new ToParentBlockJoinQuery(childBlockJoinQuery,createParentFilter(parentType),ScoreMode.Avg);
  assertSearch(blockJoinQuery,FIELD_ID,parentId1);
}
