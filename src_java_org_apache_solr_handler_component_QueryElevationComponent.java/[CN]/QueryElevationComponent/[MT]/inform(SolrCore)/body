{
  String a=initArgs.get(FIELD_TYPE);
  if (a != null) {
    FieldType ft=core.getSchema().getFieldTypes().get(a);
    if (ft == null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown FieldType: '" + a + "' used in QueryElevationComponent");
    }
    analyzer=ft.getQueryAnalyzer();
  }
  SchemaField sf=core.getSchema().getUniqueKeyField();
  if (sf == null) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"QueryElevationComponent requires the schema to have a uniqueKeyField");
  }
  idField=StringHelper.intern(sf.getName());
  forceElevation=initArgs.getBool(FORCE_ELEVATION,forceElevation);
  try {
synchronized (elevationCache) {
      elevationCache.clear();
      String f=initArgs.get(CONFIG_FILE);
      if (f == null) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"QueryElevationComponent must specify argument: '" + CONFIG_FILE + "' -- path to elevate.xml");
      }
      File fC=new File(core.getResourceLoader().getConfigDir(),f);
      File fD=new File(core.getDataDir(),f);
      if (fC.exists() == fD.exists()) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"QueryElevationComponent missing config file: '" + f + "\n"+ "either: "+ fC.getAbsolutePath()+ " or "+ fD.getAbsolutePath()+ " must exist, but not both.");
      }
      if (fC.exists()) {
        log.info("Loading QueryElevation from: " + fC.getAbsolutePath());
        Config cfg=new Config(core.getResourceLoader(),f);
        elevationCache.put(null,loadElevationMap(cfg));
      }
 else {
        RefCounted<SolrIndexSearcher> searchHolder=null;
        try {
          searchHolder=core.getNewestSearcher(false);
          IndexReader reader=searchHolder.get().getReader();
          getElevationMap(reader,core);
        }
  finally {
          if (searchHolder != null)           searchHolder.decref();
        }
      }
    }
  }
 catch (  Exception ex) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error initializing QueryElevationComponent.",ex);
  }
}
