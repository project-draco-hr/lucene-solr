{
  this.resourceName=resourceName;
  this.config=config;
  SolrResourceLoader loader=config.getResourceLoader();
  this.loader=loader;
  InputStream schemaInputStream=null;
  boolean shouldUpgrade=false;
  String loadedResource=null;
  if (null == resourceName) {
    resourceName=IndexSchema.DEFAULT_SCHEMA_FILE;
  }
  try {
    schemaInputStream=loader.openSchema(managedSchemaResourceName);
    loadedResource=managedSchemaResourceName;
    if (!resourceName.equals(managedSchemaResourceName)) {
      if (nonManagedSchemaExists()) {
        log.warn("The schema has been upgraded to managed, but the non-managed schema " + resourceName + " is still loadable.  PLEASE REMOVE THIS FILE.");
      }
    }
  }
 catch (  IOException e) {
    log.info("SolrConfig.isManagedSchema = true, but managed schema resource " + managedSchemaResourceName + " not found - loading non-managed schema "+ resourceName+ " instead");
  }
  if (null == schemaInputStream) {
    try {
      schemaInputStream=loader.openSchema(resourceName);
      loadedResource=resourceName;
      shouldUpgrade=true;
    }
 catch (    Exception e) {
      try {
        schemaInputStream=loader.openSchema(managedSchemaResourceName);
        loadedResource=managedSchemaResourceName;
      }
 catch (      IOException e1) {
        final String msg="Error loading both non-managed schema '" + resourceName + "' and managed schema '"+ managedSchemaResourceName+ "'";
        log.error(msg,e);
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg,e);
      }
    }
  }
  InputSource inputSource=new InputSource(schemaInputStream);
  inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));
  schema=new ManagedIndexSchema(config,loadedResource,inputSource,isMutable);
  if (shouldUpgrade) {
    upgradeToManagedSchema();
  }
  return schema;
}
