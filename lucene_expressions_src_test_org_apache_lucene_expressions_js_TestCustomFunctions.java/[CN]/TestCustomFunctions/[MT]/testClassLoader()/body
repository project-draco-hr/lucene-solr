{
  Loader child=new Loader(this.getClass().getClassLoader());
  Class<?> thisInDifferentLoader=child.loadFromParentResource(getClass().getName());
  Map<String,Method> functions=Collections.singletonMap("zeroArgMethod",thisInDifferentLoader.getMethod("zeroArgMethod"));
  try {
    JavascriptCompiler.compile("zeroArgMethod()",functions,getClass().getClassLoader());
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));
  }
  Expression expr=JavascriptCompiler.compile("zeroArgMethod()",functions,child);
  assertEquals(5,expr.evaluate(0,null),DELTA);
  Map<String,Method> mixedFunctions=new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);
  mixedFunctions.putAll(functions);
  expr=JavascriptCompiler.compile("zeroArgMethod()",mixedFunctions,child);
  assertEquals(5,expr.evaluate(0,null),DELTA);
  expr=JavascriptCompiler.compile("sqrt(20)",mixedFunctions,child);
  assertEquals(Math.sqrt(20),expr.evaluate(0,null),DELTA);
  try {
    JavascriptCompiler.compile("zeroArgMethod()",functions,getClass().getClassLoader());
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));
  }
}
