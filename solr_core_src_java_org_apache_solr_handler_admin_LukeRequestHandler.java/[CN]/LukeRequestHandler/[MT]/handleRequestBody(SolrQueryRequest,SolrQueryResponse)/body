{
  IndexSchema schema=req.getSchema();
  SolrIndexSearcher searcher=req.getSearcher();
  DirectoryReader reader=searcher.getIndexReader();
  SolrParams params=req.getParams();
  int numTerms=params.getInt(NUMTERMS,DEFAULT_COUNT);
  Map<String,TopTermQueue> topTerms=new TreeMap<String,TopTermQueue>();
  Set<String> fields=null;
  String fl=params.get(CommonParams.FL);
  if (fl != null) {
    fields=new TreeSet<String>(Arrays.asList(fl.split("[,\\s]+")));
  }
  if ("schema".equals(params.get("show"))) {
    numTerms=0;
  }
  rsp.add("index",getIndexInfo(reader,numTerms,topTerms,fields));
  Integer docId=params.getInt(DOC_ID);
  if (docId == null && params.get(ID) != null) {
    SchemaField uniqueKey=schema.getUniqueKeyField();
    String v=uniqueKey.getType().toInternal(params.get(ID));
    Term t=new Term(uniqueKey.getName(),v);
    docId=searcher.getFirstMatch(t);
    if (docId < 0) {
      throw new SolrException(SolrException.ErrorCode.NOT_FOUND,"Can't find document: " + params.get(ID));
    }
  }
  if (docId != null) {
    Document doc=null;
    try {
      doc=reader.document(docId);
    }
 catch (    Exception ex) {
    }
    if (doc == null) {
      throw new SolrException(SolrException.ErrorCode.NOT_FOUND,"Can't find document: " + docId);
    }
    SimpleOrderedMap<Object> info=getDocumentFieldsInfo(doc,docId,reader,schema);
    SimpleOrderedMap<Object> docinfo=new SimpleOrderedMap<Object>();
    docinfo.add("docId",docId);
    docinfo.add("lucene",info);
    docinfo.add("solr",doc);
    rsp.add("doc",docinfo);
  }
 else   if ("schema".equals(params.get("show"))) {
    rsp.add("schema",getSchemaInfo(req.getSchema()));
  }
 else {
    rsp.add("fields",getIndexedFieldsInfo(searcher,fields,numTerms,topTerms));
  }
  NamedList<Object> info=new SimpleOrderedMap<Object>();
  info.add("key",getFieldFlagsKey());
  info.add("NOTE","Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.");
  rsp.add("info",info);
  rsp.setHttpCaching(false);
}
