{
  Map<String,List<String>> typeusemap=new TreeMap<String,List<String>>();
  Map<String,Object> fields=new TreeMap<String,Object>();
  SchemaField uniqueField=schema.getUniqueKeyField();
  for (  SchemaField f : schema.getFields().values()) {
    populateFieldInfo(schema,typeusemap,fields,uniqueField,f);
  }
  Map<String,Object> dynamicFields=new TreeMap<String,Object>();
  for (  SchemaField f : schema.getDynamicFieldPrototypes()) {
    populateFieldInfo(schema,typeusemap,dynamicFields,uniqueField,f);
  }
  SimpleOrderedMap<Object> types=new SimpleOrderedMap<Object>();
  Map<String,FieldType> sortedTypes=new TreeMap<String,FieldType>(schema.getFieldTypes());
  for (  FieldType ft : sortedTypes.values()) {
    SimpleOrderedMap<Object> field=new SimpleOrderedMap<Object>();
    field.add("fields",typeusemap.get(ft.getTypeName()));
    field.add("tokenized",ft.isTokenized());
    field.add("className",ft.getClass().getName());
    field.add("indexAnalyzer",getAnalyzerInfo(ft.getAnalyzer()));
    field.add("queryAnalyzer",getAnalyzerInfo(ft.getQueryAnalyzer()));
    field.add("similarity",getSimilarityInfo(ft.getSimilarity()));
    types.add(ft.getTypeName(),field);
  }
  SimpleOrderedMap<Object> finfo=new SimpleOrderedMap<Object>();
  SimpleOrderedMap<Object> fieldsSimple=new SimpleOrderedMap<Object>();
  for (  Map.Entry<String,Object> ent : fields.entrySet()) {
    fieldsSimple.add(ent.getKey(),ent.getValue());
  }
  finfo.add("fields",fieldsSimple);
  SimpleOrderedMap<Object> dynamicSimple=new SimpleOrderedMap<Object>();
  for (  Map.Entry<String,Object> ent : dynamicFields.entrySet()) {
    dynamicSimple.add(ent.getKey(),ent.getValue());
  }
  finfo.add("dynamicFields",dynamicSimple);
  finfo.add("uniqueKeyField",null == uniqueField ? null : uniqueField.getName());
  finfo.add("defaultSearchField",schema.getDefaultSearchFieldName());
  finfo.add("types",types);
  return finfo;
}
