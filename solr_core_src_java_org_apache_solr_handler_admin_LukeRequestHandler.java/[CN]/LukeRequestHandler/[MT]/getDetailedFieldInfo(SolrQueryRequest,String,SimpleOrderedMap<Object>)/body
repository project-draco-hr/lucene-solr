{
  SolrParams params=req.getParams();
  final int numTerms=params.getInt(NUMTERMS,DEFAULT_COUNT);
  TopTermQueue tiq=new TopTermQueue(numTerms + 1);
  final CharsRefBuilder spare=new CharsRefBuilder();
  Terms terms=MultiFields.getTerms(req.getSearcher().getIndexReader(),field);
  if (terms == null) {
    return;
  }
  TermsEnum termsEnum=terms.iterator(null);
  BytesRef text;
  int[] buckets=new int[HIST_ARRAY_SIZE];
  while ((text=termsEnum.next()) != null) {
    ++tiq.distinctTerms;
    int freq=termsEnum.docFreq();
    int slot=32 - Integer.numberOfLeadingZeros(Math.max(0,freq - 1));
    buckets[slot]=buckets[slot] + 1;
    if (numTerms > 0 && freq > tiq.minFreq) {
      spare.copyUTF8Bytes(text);
      String t=spare.toString();
      tiq.add(new TopTermQueue.TermInfo(new Term(field,t),termsEnum.docFreq()));
      if (tiq.size() > numTerms) {
        tiq.pop();
        tiq.minFreq=tiq.getTopTermInfo().docFreq;
      }
    }
  }
  tiq.histogram.add(buckets);
  fieldMap.add("distinct",tiq.distinctTerms);
  fieldMap.add("topTerms",tiq.toNamedList(req.getSearcher().getSchema()));
  fieldMap.add("histogram",tiq.histogram.toNamedList());
}
