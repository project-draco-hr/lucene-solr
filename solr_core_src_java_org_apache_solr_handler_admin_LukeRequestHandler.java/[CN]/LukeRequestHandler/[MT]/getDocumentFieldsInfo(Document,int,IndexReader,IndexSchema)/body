{
  final CharsRefBuilder spare=new CharsRefBuilder();
  SimpleOrderedMap<Object> finfo=new SimpleOrderedMap<>();
  for (  Object o : doc.getFields()) {
    Field field=(Field)o;
    SimpleOrderedMap<Object> f=new SimpleOrderedMap<>();
    SchemaField sfield=schema.getFieldOrNull(field.name());
    FieldType ftype=(sfield == null) ? null : sfield.getType();
    f.add("type",(ftype == null) ? null : ftype.getTypeName());
    f.add("schema",getFieldFlags(sfield));
    f.add("flags",getFieldFlags(field));
    Term t=new Term(field.name(),ftype != null ? ftype.storedToIndexed(field) : field.stringValue());
    f.add("value",(ftype == null) ? null : ftype.toExternal(field));
    f.add("internal",field.stringValue());
    BytesRef bytes=field.binaryValue();
    if (bytes != null) {
      f.add("binary",Base64.byteArrayToBase64(bytes.bytes,bytes.offset,bytes.length));
    }
    f.add("boost",field.boost());
    f.add("docFreq",t.text() == null ? 0 : reader.docFreq(t));
    if (field.fieldType().storeTermVectors()) {
      try {
        Terms v=reader.getTermVector(docId,field.name());
        if (v != null) {
          SimpleOrderedMap<Integer> tfv=new SimpleOrderedMap<>();
          final TermsEnum termsEnum=v.iterator();
          BytesRef text;
          while ((text=termsEnum.next()) != null) {
            final int freq=(int)termsEnum.totalTermFreq();
            spare.copyUTF8Bytes(text);
            tfv.add(spare.toString(),freq);
          }
          f.add("termVector",tfv);
        }
      }
 catch (      Exception ex) {
        log.warn("error writing term vector",ex);
      }
    }
    finfo.add(field.name(),f);
  }
  return finfo;
}
