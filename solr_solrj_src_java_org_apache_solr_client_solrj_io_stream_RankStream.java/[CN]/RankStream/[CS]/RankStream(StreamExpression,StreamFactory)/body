{
  List<StreamExpression> streamExpressions=factory.getExpressionOperandsRepresentingTypes(expression,Expressible.class,TupleStream.class);
  StreamExpressionNamedParameter nParam=factory.getNamedOperand(expression,"n");
  StreamExpressionNamedParameter sortExpression=factory.getNamedOperand(expression,"sort");
  if (expression.getParameters().size() != streamExpressions.size() + 2) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found",expression));
  }
  if (null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one",expression));
  }
  String nStr=((StreamExpressionValue)nParam.getParameter()).getValue();
  int nInt=0;
  try {
    nInt=Integer.parseInt(nStr);
    if (nInt <= 0) {
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - topN '%s' must be greater than 0.",expression,nStr));
    }
  }
 catch (  NumberFormatException e) {
    throw new IOException(String.format(Locale.ROOT,"invalid expression %s - topN '%s' is not a valid integer.",expression,nStr));
  }
  if (1 != streamExpressions.size()) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression,streamExpressions.size()));
  }
  if (null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)) {
    throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one",expression));
  }
  TupleStream stream=factory.constructStream(streamExpressions.get(0));
  Comparator<Tuple> comp=factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(),StreamComparator.class);
  init(stream,nInt,comp);
}
