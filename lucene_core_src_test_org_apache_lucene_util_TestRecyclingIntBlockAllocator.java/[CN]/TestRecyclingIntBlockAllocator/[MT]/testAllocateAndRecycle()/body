{
  RecyclingIntBlockAllocator allocator=newAllocator();
  HashSet<int[]> allocated=new HashSet<int[]>();
  int[] block=allocator.getIntBlock();
  allocated.add(block);
  assertNotNull(block);
  final int size=block.length;
  int numIters=atLeast(97);
  for (int i=0; i < numIters; i++) {
    int num=1 + random().nextInt(39);
    for (int j=0; j < num; j++) {
      block=allocator.getIntBlock();
      assertNotNull(block);
      assertEquals(size,block.length);
      assertTrue("block is returned twice",allocated.add(block));
      assertEquals(4 * size * (allocated.size() + allocator.numBufferedBlocks()),allocator.bytesUsed());
    }
    int[][] array=allocated.toArray(new int[0][]);
    int begin=random().nextInt(array.length);
    int end=begin + random().nextInt(array.length - begin);
    List<int[]> selected=new ArrayList<int[]>();
    for (int j=begin; j < end; j++) {
      selected.add(array[j]);
    }
    allocator.recycleIntBlocks(array,begin,end);
    for (int j=begin; j < end; j++) {
      assertNull(array[j]);
      int[] b=selected.remove(0);
      assertTrue(allocated.remove(b));
    }
  }
}
