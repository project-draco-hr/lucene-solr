{
  boolean cleanupDone=false;
  boolean successfulInstall=false;
  replicationStartTime=System.currentTimeMillis();
  Directory tmpIndexDir=null;
  String tmpIndex=null;
  Directory indexDir=null;
  String indexDirPath=null;
  boolean deleteTmpIdxDir=true;
  if (!core.getSolrCoreState().getLastReplicateIndexSuccess()) {
    forceReplication=true;
  }
  try {
    NamedList response=null;
    try {
      response=getLatestVersion();
    }
 catch (    Exception e) {
      LOG.error("Master at: " + masterUrl + " is not available. Index fetch failed. Exception: "+ e.getMessage());
      return false;
    }
    long latestVersion=(Long)response.get(CMD_INDEX_VERSION);
    long latestGeneration=(Long)response.get(GENERATION);
    IndexCommit commit=core.getDeletionPolicy().getLatestCommit();
    if (commit == null) {
      RefCounted<SolrIndexSearcher> searcherRefCounted=null;
      try {
        searcherRefCounted=core.getNewestSearcher(false);
        if (searcherRefCounted == null) {
          LOG.warn("No open searcher found - fetch aborted");
          return false;
        }
        commit=searcherRefCounted.get().getIndexReader().getIndexCommit();
      }
  finally {
        if (searcherRefCounted != null)         searcherRefCounted.decref();
      }
    }
    if (latestVersion == 0L) {
      if (forceReplication && commit.getGeneration() != 0) {
        RefCounted<IndexWriter> iw=core.getUpdateHandler().getSolrCoreState().getIndexWriter(core);
        try {
          iw.get().deleteAll();
        }
  finally {
          iw.decref();
        }
        SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());
        core.getUpdateHandler().commit(new CommitUpdateCommand(req,false));
      }
      successfulInstall=true;
      return true;
    }
    if (!forceReplication && IndexDeletionPolicyWrapper.getCommitTimestamp(commit) == latestVersion) {
      LOG.info("Slave in sync with master.");
      successfulInstall=true;
      return true;
    }
    LOG.info("Master's generation: " + latestGeneration);
    LOG.info("Slave's generation: " + commit.getGeneration());
    LOG.info("Starting replication process");
    fetchFileList(latestGeneration);
    if (filesToDownload.isEmpty())     return false;
    LOG.info("Number of files in latest index in master: " + filesToDownload.size());
    fsyncService=Executors.newSingleThreadExecutor(new DefaultSolrThreadFactory("fsyncService"));
    filesDownloaded=Collections.synchronizedList(new ArrayList<Map<String,Object>>());
    boolean isFullCopyNeeded=IndexDeletionPolicyWrapper.getCommitTimestamp(commit) >= latestVersion || commit.getGeneration() >= latestGeneration || forceReplication;
    String tmpIdxDirName="index." + new SimpleDateFormat(SnapShooter.DATE_FMT,Locale.ROOT).format(new Date());
    tmpIndex=createTempindexDir(core,tmpIdxDirName);
    tmpIndexDir=core.getDirectoryFactory().get(tmpIndex,DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);
    indexDirPath=core.getIndexDir();
    indexDir=core.getDirectoryFactory().get(indexDirPath,DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);
    try {
      if (!isFullCopyNeeded && isIndexStale(indexDir)) {
        isFullCopyNeeded=true;
      }
      if (!isFullCopyNeeded) {
        if (solrCore.getCoreDescriptor().getCoreContainer().isZooKeeperAware()) {
          solrCore.closeSearcher();
        }
        solrCore.getUpdateHandler().newIndexWriter(true);
        RefCounted<IndexWriter> writer=solrCore.getUpdateHandler().getSolrCoreState().getIndexWriter(null);
        try {
          IndexWriter indexWriter=writer.get();
          int c=0;
          indexWriter.deleteUnusedFiles();
          while (hasUnusedFiles(indexDir,commit)) {
            indexWriter.deleteUnusedFiles();
            LOG.info("Sleeping for 1000ms to wait for unused lucene index files to be delete-able");
            Thread.sleep(1000);
            c++;
            if (c >= 30) {
              LOG.warn("IndexFetcher unable to cleanup unused lucene index files so we must do a full copy instead");
              isFullCopyNeeded=true;
              break;
            }
          }
          if (c > 0) {
            LOG.info("IndexFetcher slept for " + (c * 1000) + "ms for unused lucene index files to be delete-able");
          }
        }
  finally {
          writer.decref();
        }
        solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(core,true);
      }
      boolean reloadCore=false;
      try {
        LOG.info("Starting download to " + tmpIndexDir + " fullCopy="+ isFullCopyNeeded);
        successfulInstall=false;
        downloadIndexFiles(isFullCopyNeeded,indexDir,tmpIndexDir,latestGeneration);
        LOG.info("Total time taken for download : " + ((System.currentTimeMillis() - replicationStartTime) / 1000) + " secs");
        Collection<Map<String,Object>> modifiedConfFiles=getModifiedConfFiles(confFilesToDownload);
        if (!modifiedConfFiles.isEmpty()) {
          reloadCore=true;
          downloadConfFiles(confFilesToDownload,latestGeneration);
          if (isFullCopyNeeded) {
            successfulInstall=modifyIndexProps(tmpIdxDirName);
            deleteTmpIdxDir=false;
          }
 else {
            successfulInstall=moveIndexFiles(tmpIndexDir,indexDir);
          }
          if (successfulInstall) {
            if (isFullCopyNeeded) {
              if (indexDir != null) {
                LOG.info("removing old index directory " + indexDir);
                core.getDirectoryFactory().doneWithDirectory(indexDir);
                core.getDirectoryFactory().remove(indexDir);
              }
            }
            LOG.info("Configuration files are modified, core will be reloaded");
            logReplicationTimeAndConfFiles(modifiedConfFiles,successfulInstall);
          }
        }
 else {
          terminateAndWaitFsyncService();
          if (isFullCopyNeeded) {
            successfulInstall=modifyIndexProps(tmpIdxDirName);
            deleteTmpIdxDir=false;
          }
 else {
            successfulInstall=moveIndexFiles(tmpIndexDir,indexDir);
          }
          if (successfulInstall) {
            logReplicationTimeAndConfFiles(modifiedConfFiles,successfulInstall);
          }
        }
      }
  finally {
        if (!isFullCopyNeeded) {
          solrCore.getUpdateHandler().getSolrCoreState().openIndexWriter(core);
        }
      }
      if (successfulInstall && (reloadCore || forceCoreReload)) {
        LOG.info("Reloading SolrCore {}",core.getName());
        reloadCore();
      }
      if (successfulInstall) {
        if (isFullCopyNeeded) {
          if (indexDir != null) {
            LOG.info("removing old index directory " + indexDir);
            core.getDirectoryFactory().doneWithDirectory(indexDir);
            core.getDirectoryFactory().remove(indexDir);
          }
        }
        if (isFullCopyNeeded) {
          solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);
        }
        openNewSearcherAndUpdateCommitPoint();
      }
      if (!isFullCopyNeeded && !forceReplication && !successfulInstall) {
        cleanup(core,tmpIndexDir,indexDir,deleteTmpIdxDir,successfulInstall);
        cleanupDone=true;
        LOG.warn("Replication attempt was not successful - trying a full index replication reloadCore={}",reloadCore);
        successfulInstall=fetchLatestIndex(core,true,reloadCore);
      }
      replicationStartTime=0;
      return successfulInstall;
    }
 catch (    ReplicationHandlerException e) {
      LOG.error("User aborted Replication");
      return false;
    }
catch (    SolrException e) {
      throw e;
    }
catch (    InterruptedException e) {
      throw new InterruptedException("Index fetch interrupted");
    }
catch (    Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Index fetch failed : ",e);
    }
  }
  finally {
    if (!cleanupDone) {
      cleanup(core,tmpIndexDir,indexDir,deleteTmpIdxDir,successfulInstall);
    }
  }
}
