{
  int[] tokCount={100,500,1000,2000,5000,10000};
  int[] modCounts={1,2,5,10,20,50,100,200,500};
  for (int k=0; k < tokCount.length; k++) {
    StringBuffer buffer=new StringBuffer();
    System.out.println("-----Tokens: " + tokCount[k] + "-----");
    for (int i=0; i < tokCount[k]; i++) {
      buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');
    }
    ModuloSinkTokenizer sink=new ModuloSinkTokenizer(tokCount[k],100);
    TokenStream stream=new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))),sink);
    while (stream.incrementToken()) {
    }
    stream=new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))),100);
    List tmp=new ArrayList();
    while (stream.incrementToken()) {
      tmp.add(stream.captureState());
    }
    List sinkList=sink.getTokens();
    assertTrue("tmp Size: " + tmp.size() + " is not: "+ sinkList.size(),tmp.size() == sinkList.size());
    for (int i=0; i < tmp.size(); i++) {
      AttributeSource tfTok=(AttributeSource)tmp.get(i);
      AttributeSource sinkTok=(AttributeSource)sinkList.get(i);
      assertTrue(tfTok + " is not equal to " + sinkTok+ " at token: "+ i,tfTok.equals(sinkTok) == true);
    }
    for (int j=0; j < modCounts.length; j++) {
      int tfPos=0;
      long start=System.currentTimeMillis();
      for (int i=0; i < 20; i++) {
        stream=new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));
        PositionIncrementAttribute posIncrAtt=(PositionIncrementAttribute)stream.getAttribute(PositionIncrementAttribute.class);
        while (stream.incrementToken()) {
          tfPos+=posIncrAtt.getPositionIncrement();
        }
        stream=new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))),modCounts[j]);
        posIncrAtt=(PositionIncrementAttribute)stream.getAttribute(PositionIncrementAttribute.class);
        while (stream.incrementToken()) {
          tfPos+=posIncrAtt.getPositionIncrement();
        }
      }
      long finish=System.currentTimeMillis();
      System.out.println("ModCount: " + modCounts[j] + " Two fields took "+ (finish - start)+ " ms");
      int sinkPos=0;
      start=System.currentTimeMillis();
      for (int i=0; i < 20; i++) {
        sink=new ModuloSinkTokenizer(tokCount[k],modCounts[j]);
        stream=new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))),sink);
        PositionIncrementAttribute posIncrAtt=(PositionIncrementAttribute)stream.getAttribute(PositionIncrementAttribute.class);
        while (stream.incrementToken()) {
          sinkPos+=posIncrAtt.getPositionIncrement();
        }
        stream=sink;
        posIncrAtt=(PositionIncrementAttribute)stream.getAttribute(PositionIncrementAttribute.class);
        while (stream.incrementToken()) {
          sinkPos+=posIncrAtt.getPositionIncrement();
        }
      }
      finish=System.currentTimeMillis();
      System.out.println("ModCount: " + modCounts[j] + " Tee fields took "+ (finish - start)+ " ms");
      assertTrue(sinkPos + " does not equal: " + tfPos,sinkPos == tfPos);
    }
    System.out.println("- End Tokens: " + tokCount[k] + "-----");
  }
}
