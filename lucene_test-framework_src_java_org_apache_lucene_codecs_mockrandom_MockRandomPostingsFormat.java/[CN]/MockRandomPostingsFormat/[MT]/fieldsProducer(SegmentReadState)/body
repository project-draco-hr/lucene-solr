{
  final String seedFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,SEED_EXT);
  final IndexInput in=state.directory.openInput(seedFileName,state.context);
  final long seed=in.readLong();
  if (LuceneTestCase.VERBOSE) {
    System.out.println("MockRandomCodec: reading from seg=" + state.segmentInfo.name + " formatID="+ state.segmentSuffix+ " seed="+ seed);
  }
  in.close();
  final Random random=new Random(seed);
  int readBufferSize=TestUtil.nextInt(random,1,4096);
  if (LuceneTestCase.VERBOSE) {
    System.out.println("MockRandomCodec: readBufferSize=" + readBufferSize);
  }
  PostingsReaderBase postingsReader=new Lucene41PostingsReader(state.directory,state.fieldInfos,state.segmentInfo,state.context,state.segmentSuffix);
  final FieldsProducer fields;
  final int t1=random.nextInt(5);
  if (t1 == 0) {
    boolean success=false;
    try {
      fields=new FSTTermsReader(state,postingsReader);
      success=true;
    }
  finally {
      if (!success) {
        postingsReader.close();
      }
    }
  }
 else   if (t1 == 1) {
    boolean success=false;
    try {
      fields=new FSTOrdTermsReader(state,postingsReader);
      success=true;
    }
  finally {
      if (!success) {
        postingsReader.close();
      }
    }
  }
 else   if (t1 == 2) {
    if (LuceneTestCase.VERBOSE) {
      System.out.println("MockRandomCodec: reading BlockTree terms dict");
    }
    boolean success=false;
    try {
      fields=new BlockTreeTermsReader(state.directory,state.fieldInfos,state.segmentInfo,postingsReader,state.context,state.segmentSuffix);
      success=true;
    }
  finally {
      if (!success) {
        postingsReader.close();
      }
    }
  }
 else   if (t1 == 3) {
    if (LuceneTestCase.VERBOSE) {
      System.out.println("MockRandomCodec: reading Block terms dict");
    }
    final TermsIndexReaderBase indexReader;
    boolean success=false;
    try {
      final boolean doFixedGap=random.nextBoolean();
      if (doFixedGap) {
        if (LuceneTestCase.VERBOSE) {
          System.out.println("MockRandomCodec: fixed-gap terms index");
        }
        indexReader=new FixedGapTermsIndexReader(state);
      }
 else {
        final int n2=random.nextInt(3);
        if (n2 == 1) {
          random.nextInt();
        }
 else         if (n2 == 2) {
          random.nextLong();
        }
        if (LuceneTestCase.VERBOSE) {
          System.out.println("MockRandomCodec: variable-gap terms index");
        }
        indexReader=new VariableGapTermsIndexReader(state);
      }
      success=true;
    }
  finally {
      if (!success) {
        postingsReader.close();
      }
    }
    success=false;
    try {
      fields=new BlockTermsReader(indexReader,postingsReader,state);
      success=true;
    }
  finally {
      if (!success) {
        try {
          postingsReader.close();
        }
  finally {
          indexReader.close();
        }
      }
    }
  }
 else   if (t1 == 4) {
    if (LuceneTestCase.VERBOSE) {
      System.out.println("MockRandomCodec: reading OrdsBlockTree terms dict");
    }
    boolean success=false;
    try {
      fields=new OrdsBlockTreeTermsReader(postingsReader,state);
      success=true;
    }
  finally {
      if (!success) {
        postingsReader.close();
      }
    }
  }
 else {
    throw new AssertionError();
  }
  return fields;
}
