{
  final Explanation[] explanations=new Explanation[this.featuresInfo.length];
  for (  final Feature.FeatureWeight feature : extractedFeatureWeights) {
    explanations[feature.getIndex()]=feature.explain(context,doc);
  }
  final List<Explanation> featureExplanations=new ArrayList<>();
  for (int idx=0; idx < modelFeatureWeights.length; ++idx) {
    final Feature.FeatureWeight f=modelFeatureWeights[idx];
    Explanation e=ltrScoringModel.getNormalizerExplanation(explanations[f.getIndex()],idx);
    featureExplanations.add(e);
  }
  final ModelScorer bs=scorer(context);
  bs.iterator().advance(doc);
  final float finalScore=bs.score();
  return ltrScoringModel.explain(context,doc,finalScore,featureExplanations);
}
