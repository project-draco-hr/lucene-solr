{
  final Directory dir=newDirectory();
  final IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));
  final FieldType NO_TRIE_TYPE=new FieldType(IntField.TYPE_NOT_STORED);
  NO_TRIE_TYPE.setNumericPrecisionStep(Integer.MAX_VALUE);
  final Map<String,Type> UNINVERT_MAP=new LinkedHashMap<String,Type>();
  UNINVERT_MAP.put("notrie_single",Type.SORTED_SET_INTEGER);
  UNINVERT_MAP.put("notrie_multi",Type.SORTED_SET_INTEGER);
  UNINVERT_MAP.put("trie_single",Type.SORTED_SET_INTEGER);
  UNINVERT_MAP.put("trie_multi",Type.SORTED_SET_INTEGER);
  final Set<String> MULTI_VALUES=new LinkedHashSet<String>();
  MULTI_VALUES.add("trie_multi");
  MULTI_VALUES.add("notrie_multi");
  final int NUM_DOCS=TestUtil.nextInt(random(),200,1500);
  final int MIN=TestUtil.nextInt(random(),10,100);
  final int MAX=MIN + TestUtil.nextInt(random(),10,100);
  final long EXPECTED_VALSET_SIZE=1 + MAX - MIN;
{
    final Document doc=new Document();
    for (int i=MIN; i <= MAX; i++) {
      doc.add(new IntField("trie_multi",i,Field.Store.NO));
      doc.add(new IntField("notrie_multi",i,NO_TRIE_TYPE));
    }
    iw.addDocument(doc);
  }
  for (int i=1; i < NUM_DOCS; i++) {
    final Document doc=new Document();
    if (0 != TestUtil.nextInt(random(),0,9)) {
      int val=TestUtil.nextInt(random(),MIN,MAX);
      doc.add(new IntField("trie_single",val,Field.Store.NO));
      doc.add(new IntField("notrie_single",val,NO_TRIE_TYPE));
    }
    if (0 != TestUtil.nextInt(random(),0,9)) {
      int numMulti=atLeast(1);
      while (0 < numMulti--) {
        int val=TestUtil.nextInt(random(),MIN,MAX);
        doc.add(new IntField("trie_multi",val,Field.Store.NO));
        doc.add(new IntField("notrie_multi",val,NO_TRIE_TYPE));
      }
    }
    iw.addDocument(doc);
  }
  iw.close();
  final DirectoryReader ir=UninvertingReader.wrap(DirectoryReader.open(dir),UNINVERT_MAP);
  TestUtil.checkReader(ir);
  final int NUM_LEAVES=ir.leaves().size();
  for (  LeafReaderContext rc : ir.leaves()) {
    final LeafReader ar=rc.reader();
    for (    String f : UNINVERT_MAP.keySet()) {
      final SortedSetDocValues v=ar.getSortedSetDocValues(f);
      final long valSetSize=v.getValueCount();
      assertTrue(f + ": Expected no more then " + EXPECTED_VALSET_SIZE+ " values per segment, got "+ valSetSize+ " from: "+ ar.toString(),valSetSize <= EXPECTED_VALSET_SIZE);
      if (1 == NUM_LEAVES && MULTI_VALUES.contains(f)) {
        assertEquals(f + ": Single segment LeafReader's value set should have had exactly expected size",EXPECTED_VALSET_SIZE,valSetSize);
      }
    }
  }
  final LeafReader composite=SlowCompositeReaderWrapper.wrap(ir);
  TestUtil.checkReader(composite);
  for (  String f : MULTI_VALUES) {
    final SortedSetDocValues v=composite.getSortedSetDocValues(f);
    final long valSetSize=v.getValueCount();
    assertEquals(f + ": Composite reader value set should have had exactly expected size",EXPECTED_VALSET_SIZE,valSetSize);
  }
  ir.close();
  dir.close();
}
