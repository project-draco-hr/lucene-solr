{
  int ITERS=atLeast(100);
  for (int iter=0; iter < ITERS; iter++) {
    LightAutomaton a=AutomatonTestUtil.randomAutomaton(random());
    List<Transition> allTrans=new ArrayList<>();
    int numStates=a.getNumStates();
    for (int s=0; s < numStates; s++) {
      int count=a.getNumTransitions(s);
      for (int i=0; i < count; i++) {
        Transition t=new Transition();
        a.getTransition(s,i,t);
        allTrans.add(t);
      }
    }
    LightAutomaton.Builder builder=new LightAutomaton.Builder();
    for (int i=0; i < numStates; i++) {
      int s=builder.createState();
      builder.setAccept(s,a.isAccept(s));
    }
    Collections.shuffle(allTrans,random());
    for (    Transition t : allTrans) {
      builder.addTransition(t.source,t.dest,t.min,t.max);
    }
    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(BasicOperations.removeDeadStates(a)),BasicOperations.determinize(BasicOperations.removeDeadStates(builder.finish()))));
  }
}
