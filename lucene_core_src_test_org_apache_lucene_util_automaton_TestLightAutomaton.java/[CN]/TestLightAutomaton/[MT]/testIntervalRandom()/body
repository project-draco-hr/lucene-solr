{
  int ITERS=atLeast(100);
  for (int iter=0; iter < ITERS; iter++) {
    int min=TestUtil.nextInt(random(),0,100000);
    int max=TestUtil.nextInt(random(),min,min + 100000);
    int digits;
    if (random().nextBoolean()) {
      digits=0;
    }
 else {
      String s=Integer.toString(max);
      digits=TestUtil.nextInt(random(),s.length(),2 * s.length());
    }
    StringBuilder b=new StringBuilder();
    for (int i=0; i < digits; i++) {
      b.append('0');
    }
    String prefix=b.toString();
    LightAutomaton a=BasicOperations.determinize(BasicAutomata.makeIntervalLight(min,max,digits));
    if (random().nextBoolean()) {
      a=MinimizationOperationsLight.minimize(a);
    }
    String mins=Integer.toString(min);
    String maxs=Integer.toString(max);
    if (digits > 0) {
      mins=prefix.substring(mins.length()) + mins;
      maxs=prefix.substring(maxs.length()) + maxs;
    }
    assertTrue(BasicOperations.run(a,mins));
    assertTrue(BasicOperations.run(a,maxs));
    for (int iter2=0; iter2 < 100; iter2++) {
      int x=random().nextInt(2 * max);
      boolean expected=x >= min && x <= max;
      String sx=Integer.toString(x);
      if (digits > 0 && sx.length() < digits) {
        sx=b.substring(sx.length()) + sx;
      }
      assertEquals(expected,BasicOperations.run(a,sx));
    }
  }
}
