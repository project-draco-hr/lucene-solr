{
  this.readState=readState;
  String indexFileName=IndexFileNames.segmentFileName(readState.segmentInfo.name,readState.segmentSuffix,Lucene60PointsFormat.INDEX_EXTENSION);
  Map<Integer,Long> fieldToFileOffset=new HashMap<>();
  try (ChecksumIndexInput indexIn=readState.directory.openChecksumInput(indexFileName,readState.context)){
    Throwable priorE=null;
    try {
      CodecUtil.checkIndexHeader(indexIn,Lucene60PointsFormat.META_CODEC_NAME,Lucene60PointsFormat.INDEX_VERSION_START,Lucene60PointsFormat.INDEX_VERSION_START,readState.segmentInfo.getId(),readState.segmentSuffix);
      int count=indexIn.readVInt();
      for (int i=0; i < count; i++) {
        int fieldNumber=indexIn.readVInt();
        long fp=indexIn.readVLong();
        fieldToFileOffset.put(fieldNumber,fp);
      }
    }
 catch (    Throwable t) {
      priorE=t;
    }
 finally {
      CodecUtil.checkFooter(indexIn,priorE);
    }
  }
   String dataFileName=IndexFileNames.segmentFileName(readState.segmentInfo.name,readState.segmentSuffix,Lucene60PointsFormat.DATA_EXTENSION);
  boolean success=false;
  dataIn=readState.directory.openInput(dataFileName,readState.context);
  try {
    CodecUtil.checkIndexHeader(dataIn,Lucene60PointsFormat.DATA_CODEC_NAME,Lucene60PointsFormat.DATA_VERSION_START,Lucene60PointsFormat.DATA_VERSION_START,readState.segmentInfo.getId(),readState.segmentSuffix);
    CodecUtil.retrieveChecksum(dataIn);
    for (    Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {
      int fieldNumber=ent.getKey();
      long fp=ent.getValue();
      dataIn.seek(fp);
      BKDReader reader=new BKDReader(dataIn);
      readers.put(fieldNumber,reader);
    }
    success=true;
  }
  finally {
    if (success == false) {
      IOUtils.closeWhileHandlingException(this);
    }
  }
}
