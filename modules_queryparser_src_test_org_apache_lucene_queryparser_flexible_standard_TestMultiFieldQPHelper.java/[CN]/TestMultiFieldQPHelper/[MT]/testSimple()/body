{
  String[] fields={"b","t"};
  StandardQueryParser mfqp=new StandardQueryParser();
  mfqp.setMultiFields(fields);
  mfqp.setAnalyzer(new MockAnalyzer(random()));
  Query q=mfqp.parse("one",null);
  assertEquals("b:one t:one",q.toString());
  q=mfqp.parse("one two",null);
  assertEquals("(b:one t:one) (b:two t:two)",q.toString());
  q=mfqp.parse("+one +two",null);
  assertEquals("+(b:one t:one) +(b:two t:two)",q.toString());
  q=mfqp.parse("+one -two -three",null);
  assertEquals("+(b:one t:one) -(b:two t:two) -(b:three t:three)",q.toString());
  q=mfqp.parse("one^2 two",null);
  assertEquals("((b:one t:one)^2.0) (b:two t:two)",q.toString());
  q=mfqp.parse("one~ two",null);
  assertEquals("(b:one~2.0 t:one~2.0) (b:two t:two)",q.toString());
  q=mfqp.parse("one~0.8 two^2",null);
  assertEquals("(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)",q.toString());
  q=mfqp.parse("one* two*",null);
  assertEquals("(b:one* t:one*) (b:two* t:two*)",q.toString());
  q=mfqp.parse("[a TO c] two",null);
  assertEquals("(b:[a TO c] t:[a TO c]) (b:two t:two)",q.toString());
  q=mfqp.parse("w?ldcard",null);
  assertEquals("b:w?ldcard t:w?ldcard",q.toString());
  q=mfqp.parse("\"foo bar\"",null);
  assertEquals("b:\"foo bar\" t:\"foo bar\"",q.toString());
  q=mfqp.parse("\"aa bb cc\" \"dd ee\"",null);
  assertEquals("(b:\"aa bb cc\" t:\"aa bb cc\") (b:\"dd ee\" t:\"dd ee\")",q.toString());
  q=mfqp.parse("\"foo bar\"~4",null);
  assertEquals("b:\"foo bar\"~4 t:\"foo bar\"~4",q.toString());
  q=mfqp.parse("b:\"foo bar\"~4",null);
  assertEquals("b:\"foo bar\"~4",q.toString());
  q=mfqp.parse("one f:two",null);
  assertEquals("(b:one t:one) f:two",q.toString());
  mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);
  q=mfqp.parse("one two",null);
  assertEquals("+(b:one t:one) +(b:two t:two)",q.toString());
  q=mfqp.parse("\"aa bb cc\" \"dd ee\"",null);
  assertEquals("+(b:\"aa bb cc\" t:\"aa bb cc\") +(b:\"dd ee\" t:\"dd ee\")",q.toString());
}
