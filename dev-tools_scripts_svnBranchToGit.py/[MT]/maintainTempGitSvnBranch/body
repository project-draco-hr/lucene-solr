def maintainTempGitSvnBranch(branchName, tempGitBranchName, svnWorkingCopyOfBranch, gitRepo, gitUpstream, patchFileName):
    callGitRepo(gitRepo, 'checkout', branchName)
    callSvn('update', svnWorkingCopyOfBranch)
    svnInfo = callSvnStdout('info', svnWorkingCopyOfBranch)
    lastSvnRevision = lastChangedSvnRevision(svnInfo)
    print svnWorkingCopyOfBranch, 'lastSvnRevision:', lastSvnRevision
    callGitRepo(gitRepo, 'fetch', gitUpstream)
    callGitRepo(gitRepo, 'merge', branchName, ((gitUpstream + '/') + branchName))
    lastGitCommitMessage = getGitCommitMessage(gitRepo, branchName)
    print 'lastGitCommitMessage:\n', lastGitCommitMessage
    (svnRemote, lastSvnRevisionOnGitSvnBranch) = getGitSvnRemoteAndRevision(lastGitCommitMessage)
    print 'svnRemote:', svnRemote
    print gitRepo, branchName, 'lastSvnRevisionOnGitSvnBranch:', lastSvnRevisionOnGitSvnBranch
    diffBaseRevision = lastSvnRevisionOnGitSvnBranch
    svnTempRevision = None
    doCommitOnExistingTempBranch = False
    listOut = callGitStdout(gitRepo, 'branch', '--list', tempGitBranchName)
    if listOut:
        print tempGitBranchName, 'exists'
        lastGitCommitMessage = getGitCommitMessage(gitRepo, tempGitBranchName)
        svnTempRevision = lastTempGitSvnRevision(lastGitCommitMessage)
        if (svnTempRevision is not None):
            if (svnTempRevision > lastSvnRevisionOnGitSvnBranch):
                doCommitOnExistingTempBranch = True
                diffBaseRevision = svnTempRevision
    if doCommitOnExistingTempBranch:
        callGitRepo(gitRepo, 'checkout', tempGitBranchName)
        currentGitBranch = tempGitBranchName
    else:
        currentGitBranch = branchName
    if (lastSvnRevision == diffBaseRevision):
        print gitRepo, currentGitBranch, 'up to date with', svnWorkingCopyOfBranch
        return
    if (lastSvnRevision < diffBaseRevision):
        print gitRepo, currentGitBranch, 'later than', svnWorkingCopyOfBranch, ', nothing to update.'
        return
    print gitRepo, currentGitBranch, 'earlier than', svnWorkingCopyOfBranch
    gitStatus = callGitStdout(gitRepo, 'status')
    statusParts = gitStatus.split('On branch')
    actualBranchName = statusParts[1].split()[0]
    if (actualBranchName != currentGitBranch):
        errorExit(gitRepo, 'on unexpected branch', actualBranchName, 'but expected', currentGitBranch)
    expSubString = 'nothing to commit, working directory clean'
    if (gitStatus.find(expSubString) < 0):
        errorExit(gitRepo, 'on branch', actualBranchName, 'not clean')
    print gitRepo, 'on branch', actualBranchName, 'and clean'
    revisionsRange = ((str(diffBaseRevision) + ':') + str(lastSvnRevision))
    patchFile = open(patchFileName, 'w')
    print 'Creating patch from', svnWorkingCopyOfBranch, 'between revisions', revisionsRange
    callSvnStdoutToFile(patchFile, 'diff', '-r', revisionsRange, svnWorkingCopyOfBranch)
    patchFile.close()
    print 'Created patch', patchFileName
    if (not doCommitOnExistingTempBranch):
        listOut = callGitStdout(gitRepo, 'branch', '--list', tempGitBranchName)
        if listOut:
            print tempGitBranchName, 'exists, deleting'
            callGitRepo(gitRepo, 'branch', '-D', tempGitBranchName)
            listOut = callGitStdout(gitRepo, 'branch', '--list', tempGitBranchName)
            if listOut:
                errorExit('Could not delete', tempGitBranchName, '(', listOut, ')')
            callGitRepo(gitRepo, 'branch', tempGitBranchName)
            callGitRepo(gitRepo, 'checkout', tempGitBranchName)
    subprocess.check_call((gitCommand(), 'apply', '-p6', '--whitespace=nowarn', ('--directory=' + gitRepo), patchFileName))
    callGitRepo(gitRepo, 'add', '-A')
    indexPrefix = '^Index: '
    patchedFileNames = subprocess.check_output(('grep', indexPrefix, patchFileName))
    for indexPatchFileName in patchedFileNames.split('\n'):
        patchFileName = indexPatchFileName[len(indexPrefix):]
        versionControlledFileName = patchFileName[len(svnWorkingCopyOfBranch):]
        fileNameInGitRepo = ((gitRepo + '/') + versionControlledFileName)
        if (not os.path.isfile(fileNameInGitRepo)):
            continue
        fileSize = os.path.getsize(fileNameInGitRepo)
        if (fileSize > 0):
            continue
        if os.path.isfile(patchFileName):
            print 'Left empty file:', fileNameInGitRepo
            continue
        callGitRepo(gitRepo, 'rm', '-f', fileNameInGitRepo)
    message = ((svnRemote + ' patch of svn diff -r ') + revisionsRange)
    callGitRepo(gitRepo, 'commit', '-a', ('--message=' + message))
    callGitRepo(gitRepo, 'clean', '-fd')
