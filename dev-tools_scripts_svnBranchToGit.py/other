from __future__ import print_function
'\nTo be done:\n- Investigate whether it is possible to obtain the last svn revision number without switching to it.\n- Investigate file mode differences reported by gitk, see svn revision 171449.\n- simplify difference check to a single call to diff.\n  Verify that all common files are equal, ignore non common files, check stderr and stdout of diff.\n'
' Workaround for slow updates from an svn branch to git.\nSee also jira issue INFRA-9182\n\nSituation:\n\nRemote svn repo        ---> (slow) git-svn fetch  --->   Remote git repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy ---> this workaround       --->   Local git repo\n\nWhen the remote git-svn fetch is slow, the remote git repo is behind\nthe remote svn repo.\n\nWhen this script is run it will first check that the local working copy and repository are clean.\nThen it switches the svn working copy to the branch, which updates from the remote.\nThen it fetches the branch from the git upstream repo, and merges the branch locally.\nNormally the local svn and git will then be at the same svn revision, and the script will exit.\n\nOtherwise the remote git repo is out of date, and the following happens.\nIt is checked that the hostname and path and the uuid of the remote svn repo\nas reported by the local svn working copy and as reported by the local git repo\nare the same.\n\nFor the branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain metdata that differs slightly from git svn (svn2git-id: instead of git-svn-id:).\nOtherwise the messages of the added commits are the same as their counterparts from git svn,\nexcept occasionally for an added or missed empty line when the svn commit message ends in new line.\n\nNormally the added git commits and their git-svn counterparts have no differences between their working trees.\nHowever such differences can occur, for example occasionally file modes are different in the git working tree.\nSee also the documentation of git-svn reset and the limitations below.\nIn order not to interfere with git-svn this script only adds commits to a temporary branch\nbranchname.svn, and the commit messages are chosen differently, they do not contain git-svn-id: .\n\nIn case an earlier branchname.svn exists, it will first be deleted if necessary,\nand restarted at the later branch.\nTherefore branchname.svn is temporary and should only be used locally.\n\nBy default, no more than 20 commits will be added to branchname.svn in a single run.\n\nThe earlier revision number is taken from the git-svn-id: message of git svn,\nor from the latest revision number in the commit message on branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, for example by merging branchname.svn into a feature branch.\n\nThis works by interpretation of the lines of svn update messages (U/A/D etc.)\nby copying these files and their protection bits from the local svn working copy into the git working tree,\nand by deleting files and directories in the git working tree.\n\nAn example commit in lucene-solr that adds a binary file, on which this script provides a correct git working tree:\nsvn revision 1707457\ngit-svn commit 3c0390f71e1f08a17f32bc207b4003362f8b6ac2\n\n\nLimitations:\n\nAll svn properties are ignored here.\nCommit messages added to the git repo occasionally do not have the same number of empty lines\nas the corresponding svn commit message.\n'
' This was developed on Linux using the following program versions:\npython 2.7.6\npython 3.4.3\ngit 1.9.1\nsvn 1.8.8\nGNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)\nsed (GNU sed) 4.2.2\ngrep (GNU grep) 2.16\ndiff (GNU diffutils) 3.3\ncp (GNU coreutils) 8.21\nrm (GNU coreutils) 8.21\nmkdir (GNU coreutils) 8.21\n\ngitk (part of git) was used for manual testing:\n- delete branchname.svn, reset branchname.svn and branchname to earlier to simulate going back in history,\n- diff a commit generated here to a commit from git svn, ideally there are no differences,\n- update, reload, show commits in reverse order of commit date, ...\n'
import os
import subprocess
import shutil
from xml import sax
from xml.sax.handler import ContentHandler
try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse
import sys
binaryToString = (sys.version_info >= (3, 0))
'\nOn clean checkouts of both svn and git the command:\n  diff -r svndir gitdir\n\nreports only .svn .git and empty directories in the svn working copy, for example:\n\n  Only in ./svnwork/lucene-solr/lucene/analysis/icu: lib\n\nThis diff output could be checked here.\nTo clean an svn working copy:\n\n  rm -r * # also .hgignore .caches, all except .svn\n  svn update # this is a local svn operation\n\nTo clean a git working directory:\n\n  rm -r * # all except .git\n  git checkout branchname -- .\n\n'
if (__name__ == '__main__'):
    testMode = False
    defaultMaxCommits = 20
    maxCommits = defaultMaxCommits
    import sys
    argv = sys.argv[1:]
    while argv:
        if (argv[0] == 'test'):
            testMode = True
        else:
            try:
                maxCommits = int(argv[0])
                assert (maxCommits >= 1)
            except:
                errorExit(('Argument(s) [test] [maximum number of commits], defaults are false and ' + defaultMaxCommits))
        argv = argv[1:]
    repo = 'lucene-solr'
    branchName = 'trunk'
    tempGitBranchName = (branchName + '.svn')
    home = os.path.expanduser('~')
    svnWorkingCopyOfBranchPath = os.path.join(home, 'svnwork', repo)
    svnRepoBranchName = ('lucene/dev/' + branchName)
    gitRepoPath = os.path.join(home, 'gitrepos', repo)
    gitUpstream = 'upstream'
    maintainTempGitSvnBranch(branchName, tempGitBranchName, svnWorkingCopyOfBranchPath, svnRepoBranchName, gitRepoPath, gitUpstream, maxCommits=maxCommits, testMode=testMode)
