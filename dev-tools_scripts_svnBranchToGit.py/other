' Workaround for slow updates from svn to git.\nSee also jira issue INFRA-9182\n\nSituation:\n\nRemove svn repo   ---> slow git-svn update process --->    Remote git-svn repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy --> this workaround         --->    Local git repo\n\nBecause of the slow remote git-svn update process the remote git repo is (far) behind\nthe remote svn repo.\n\nWhen this script is run it will first check that the local repositories are clean.\nThen it switches the svn working copy to branch, which updates from the remote.\nThen it fetches branch from the git upstream repo, and merges the branch locally.\nNormally the local svn and git will then be at the same svn revision, and the script will exit.\n\nOtherwise the remote git repo is out of date, and the following happens.\n\nFor the branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain a message ending like this:\n  "SvnRepoUrl diff -r EarlierSvnRevisionNumber:NextSvnRevisionNumber".\nOtherwise the added commit messages look a lot like their counterparts from git svn,\nonly the committer is taken from the local git settings.\n\nIn case an earlier branchname.svn exists, it will first be deleted if necessary,\nand restarted at the later branch.\nTherefore branchname.svn is temporary and should only be used locally.\n\nBy default, no more than 20 commits will be added to branchname.svn in a single run.\n\nThe earlier revision number is taken from the git-svn-id message of git svn,\nor from the LatestSvnRevisionNumber in the commit message of branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, usually by mering branchname.svn into a feature branch.\n\nIn more detail:\n  - switch the svn working copy to the branch, updating it to the latest revision,\n  - in the git repo:\n  - fetch the git repository from upstream.\n  - merge branchname from upstream/branchname, this is the branch that can be (far) behind.\n  - use the git-svn-id from the latest git commit on this branch to determine the corresponding svn revision.\n  - if the branchname.svn exists determine the latest svn revision from there.\n  - choose the latest svn revision number available.\n  - compare the git-svn revision to the svn latest revision (delay deleting a too early branchname.svn to later below).\n  - when the git repository has the same revision:\n    - exit reporting that branchname is up to date.\n  - when the git repository has an earlier revision:\n  - in the git working tree:\n    - if branchname.svn is not at the earlier svn revision number:\n      - delete branchname.svn\n      - recreate branch branchname.svn from branchname.\n    - check out branchname.svn\n  - get the svn commits from the latest available git svn commit (possible generated here), this uses the remote svn repo,\n    to the latest one from the svn log (but no more than the maximum):\n  - for all these commits:\n    - from the svn working copy, create a patch for the svn commit into file ~/patches/branchname.svn,\n      this takes most the the time as it uses the remote svn repo.\n    - in the git working tree:\n      - apply the patch ~/patches/branchname.svn, ignoring whitespace differences.\n      - commit using author, date and message from the svn log, and append the message with revision numbers. \n'
'\nThis was developed on Linux using the following program versions:\npython 2.7.6\ngit 1.9.1\nsvn 1.8.8\ngrep (GNU grep) 2.16\n\ngitk (part of git) was used for manual testing:\n- reset branch to an earlier commit to simulate a non working update from svn to git,\n- delete branchname.svn, reset branchname.svn to earlier,\n- diff a commit generated here to a commit from git svn, diffs between corresponding commits are normally empty,\n- update, reload, sort commits by commit date, ...\n'
import os
import subprocess
from xml import sax
from xml.sax.handler import ContentHandler
import types
if (__name__ == '__main__'):
    import sys
    testMode = False
    defaultMaxCommits = 20
    maxCommits = defaultMaxCommits
    argv = sys.argv[1:]
    while argv:
        if (argv[0] == 'test'):
            testMode = True
        else:
            try:
                maxCommits = int(argv[0])
                assert (maxCommits >= 1)
            except:
                errorExit(('Argument(s) must be test and/or a maximum number of commits, defaults are false and ' + defaultMaxCommits))
        argv = argv[1:]
    repo = 'lucene-solr'
    branchName = 'trunk'
    tempGitBranchName = (branchName + '.svn')
    home = os.path.expanduser('~')
    svnWorkingCopyOfBranchPath = os.path.join(home, 'svnwork', repo, branchName)
    svnRepoBranchName = ('lucene/dev/' + branchName)
    gitRepo = os.path.join(home, 'gitrepos', repo)
    gitUpstream = 'upstream'
    patchFileName = os.path.join(home, 'patches', tempGitBranchName)
    maintainTempGitSvnBranch(branchName, tempGitBranchName, svnWorkingCopyOfBranchPath, svnRepoBranchName, gitRepo, gitUpstream, patchFileName, maxCommits=maxCommits, testMode=testMode)
