' Workaround for slow updates from an svn branch to git.\nSee also jira issue INFRA-9182\n\nSituation:\n\nRemote svn repo        ---> (slow) git-svn fetch  --->   Remote git repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy ---> this workaround       --->   Local git repo\n\nWhen the remote git-svn fetch is slow, the remote git repo is behind\nthe remote svn repo.\n\nWhen this script is run it will first check that the local working copy and repository are clean.\nThen it switches the svn working copy to the branch, which updates from the remote.\nThen it the fetches branch from the git upstream repo, and merges the branch locally.\nNormally the local svn and git will then be at the same svn revision, and the script will exit.\n\nOtherwise the remote git repo is out of date, and the following happens.\n\nFor the branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain a message ending like this:\n  "SvnRepoUrl diff -r EarlierSvnRevisionNumber:NextSvnRevisionNumber".\nOtherwise the messages of the added commits are the same as their counterparts from git svn.\n\nNormally the added git commits and their git-svn counterparts have no differences between their working trees.\nHowever such differences can occur, see also the documentation of git-svn reset and the limitations below.\nIn order not to interfere with git-svn this script only adds commits to a temporary branch\nbranchname.svn, and the commit messages are chosen differently, they do not contain git-svn-id.\n\nIn case an earlier branchname.svn exists, it will first be deleted if necessary,\nand restarted at the later branch.\nTherefore branchname.svn is temporary and should only be used locally.\n\nBy default, no more than 20 commits will be added to branchname.svn in a single run.\n\nThe earlier revision number is taken from the git-svn-id message of git svn,\nor from the latest revision number in the commit message on branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, for example by merging branchname.svn into a feature branch.\n'
' Limitations:\n\nThis currently works by patching text, and therefore this does not work on binary files.\nAn example commit in lucene-solr that adds a binary file, on which this currently does not work correctly:\nsvn revision 1707457\ngit commit 3c0390f71e1f08a17f32bc207b4003362f8b6ac2\n\nWhen the local svn working copy contains file after updating to the latest available revision,\nand there is an interim commit that deletes this file, this file is left as an empty file in the working directory\nof the local git repository.\n\nAll svn properties are ignored here.\n'
' To be done:\nTake binary files from the patch, and check out binary files directly from the remote svn repo directly into the local git repo.\n\nGoing really far: checkout each interim svn revision, and use all (changed) files from there instead of the text diff.\nDetermining all files under version control with svn (svn ls) is far too slow for this (esp. when compared to git ls-tree),\nso this is probably better done by using svnsync to setup a local mirror repository following the remote,\nand then using svnlook on the local mirror repository.\nDoing that only to avoid the limitations of this workaround does not appear to be worthwhile.\n'
' This was developed on Linux using the following program versions:\npython 2.7.6\ngit 1.9.1\nsvn 1.8.8\ngrep (GNU grep) 2.16\n\ngitk (part of git) was used for manual testing:\n- reset branch to an earlier commit to simulate a non working update from svn to git,\n- delete branchname.svn, reset branchname.svn to earlier,\n- diff a commit generated here to a commit from git svn,\n- update, reload, show commits by commit date, ...\n'
import os
import subprocess
from xml import sax
from xml.sax.handler import ContentHandler
import types
if (__name__ == '__main__'):
    testMode = False
    defaultMaxCommits = 20
    maxCommits = defaultMaxCommits
    import sys
    argv = sys.argv[1:]
    while argv:
        if (argv[0] == 'test'):
            testMode = True
        else:
            try:
                maxCommits = int(argv[0])
                assert (maxCommits >= 1)
            except:
                errorExit(('Argument(s) should be test and/or a maximum number of commits, defaults are false and ' + defaultMaxCommits))
        argv = argv[1:]
    repo = 'lucene-solr'
    branchName = 'trunk'
    tempGitBranchName = (branchName + '.svn')
    home = os.path.expanduser('~')
    svnWorkingCopyOfBranchPath = os.path.join(home, 'svnwork', repo, branchName)
    svnRepoBranchName = ('lucene/dev/' + branchName)
    gitRepo = os.path.join(home, 'gitrepos', repo)
    gitUpstream = 'upstream'
    patchFileName = os.path.join(home, 'patches', tempGitBranchName)
    maintainTempGitSvnBranch(branchName, tempGitBranchName, svnWorkingCopyOfBranchPath, svnRepoBranchName, gitRepo, gitUpstream, patchFileName, maxCommits=maxCommits, testMode=testMode)
