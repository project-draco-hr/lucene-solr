' Workaround for slow updates from svn to git.\n\nSituation:\n\nRemove svn repo   ---> slow git-svn update process --->    Remote git-svn repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy --> this workaround         --->    Local git repo\n\nBecause of the slow remote git-svn update process the remote git repo is (far) behind\nthe remote svn repo.\n\n\nFor a branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain a message ending like this:\n  "RepoUrl patch of svn diff -r EarlierSvnRevisionNumber:LatestSvnRevisionNumber".\n\nThe earlier revision number is taken from the git-svn-id message of git svn,\nor from the LatestSvnRevisionNumber in the commit message of branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, usually by mering branchname.svn into a feature branch.\nOnce the normal git-svn branch is up to date, it can also be merged.\n\nIn more detail:\n  - update the svn working copy of the branch to the latest revision,\n  - in the git repo:\n  - fetch the git repository from upstream.\n  - merge branchname from upstream/branchname, this is the branch that can be (far) behind.\n  - use the git-svn-id from the latest git commit on this branch to determine the corresponding svn revision.\n  - if the branchname.svn exists determine the latest svn revision from there.\n  - choose the latest svn revision number available.\n  - compare the git-svn revision to the svn latest revision (delay deleting a too early branchname.svn to later below).\n  - when the git repository has the same revision:\n    - exit reporting that branchname is up to date.\n  - when the git repository has an earlier revision:\n    - in the svn working copy, create a patch from the earlier revision into file ~/patches/branchname.svn\n    - in the git working tree:\n      - if branchname.svn is not at the earlier svn revision number, delete branchname.svn\n      - if necessary create branch branchname.svn from branchname.\n      - check out branchname.svn\n      - apply the patch ~/patches/branchname.svn, ignoring whitespace differences.\n      - commit with a message with revision numbers as indicated above\n'
import os
import subprocess
import StringIO
if (__name__ == '__main__'):
    repo = 'lucene-solr'
    branchName = 'trunk'
    tempGitBranchName = (branchName + '.svn')
    home = os.path.expanduser('~')
    svnWorkingCopyOfBranch = ((((home + '/svnwork/') + repo) + '/') + branchName)
    gitRepo = ((home + '/gitrepos/') + repo)
    gitUpstream = 'upstream'
    patchFileName = ((home + '/patches/') + tempGitBranchName)
    maintainTempGitSvnBranch(branchName, tempGitBranchName, svnWorkingCopyOfBranch, gitRepo, gitUpstream, patchFileName)
