{
  if (input.hasArray() && output.hasArray()) {
    byte[] inputArray=input.array();
    int inputOffset=input.arrayOffset();
    int inputLength=input.limit() - inputOffset;
    char[] outputArray=output.array();
    int outputOffset=output.arrayOffset();
    int outputLength=getEncodedLength(input);
    output.limit(outputOffset + outputLength);
    output.position(0);
    if (inputLength > 0) {
      int inputByteNum=inputOffset;
      int caseNum=0;
      int outputCharNum=outputOffset;
      CodingCase codingCase;
      for (; inputByteNum + CODING_CASES[caseNum].numBytes <= inputLength; ++outputCharNum) {
        codingCase=CODING_CASES[caseNum];
        if (2 == codingCase.numBytes) {
          outputArray[outputCharNum]=(char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift) + (((inputArray[inputByteNum + 1] & 0xFF) >>> codingCase.finalShift) & codingCase.finalMask) & (short)0x7FFF);
        }
 else {
          outputArray[outputCharNum]=(char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift) + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift) + (((inputArray[inputByteNum + 2] & 0xFF) >>> codingCase.finalShift) & codingCase.finalMask) & (short)0x7FFF);
        }
        inputByteNum+=codingCase.advanceBytes;
        if (++caseNum == CODING_CASES.length) {
          caseNum=0;
        }
      }
      codingCase=CODING_CASES[caseNum];
      if (inputByteNum + 1 < inputLength) {
        outputArray[outputCharNum++]=(char)((((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift) + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift)) & (short)0x7FFF);
        outputArray[outputCharNum++]=(char)1;
      }
 else       if (inputByteNum < inputLength) {
        outputArray[outputCharNum++]=(char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift) & (short)0x7FFF);
        outputArray[outputCharNum++]=caseNum == 0 ? (char)1 : (char)0;
      }
 else {
        outputArray[outputCharNum++]=(char)1;
      }
    }
  }
 else {
    throw new IllegalArgumentException("Arguments must have backing arrays");
  }
}
