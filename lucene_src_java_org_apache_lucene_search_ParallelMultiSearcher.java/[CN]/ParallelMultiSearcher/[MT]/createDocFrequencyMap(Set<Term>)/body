{
  final Term[] allTermsArray=terms.toArray(new Term[terms.size()]);
  final int[] aggregatedDocFreqs=new int[terms.size()];
  final ArrayList<Future<int[]>> searchThreads=new ArrayList<Future<int[]>>(searchables.length);
  for (  Searchable searchable : searchables) {
    final Future<int[]> future=executor.submit(new DocumentFrequencyCallable(searchable,allTermsArray));
    searchThreads.add(future);
  }
  foreach(new AggregateDocFrequency(aggregatedDocFreqs),searchThreads);
  final HashMap<Term,Integer> dfMap=new HashMap<Term,Integer>();
  for (int i=0; i < allTermsArray.length; i++) {
    dfMap.put(allTermsArray[i],Integer.valueOf(aggregatedDocFreqs[i]));
  }
  return dfMap;
}
