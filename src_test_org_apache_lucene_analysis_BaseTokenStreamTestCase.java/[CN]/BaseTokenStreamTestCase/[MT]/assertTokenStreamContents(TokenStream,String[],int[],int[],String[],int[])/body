{
  assertNotNull(output);
  assertTrue("has TermAttribute",ts.hasAttribute(TermAttribute.class));
  TermAttribute termAtt=(TermAttribute)ts.getAttribute(TermAttribute.class);
  OffsetAttribute offsetAtt=null;
  if (startOffsets != null || endOffsets != null) {
    assertTrue("has OffsetAttribute",ts.hasAttribute(OffsetAttribute.class));
    offsetAtt=(OffsetAttribute)ts.getAttribute(OffsetAttribute.class);
  }
  TypeAttribute typeAtt=null;
  if (types != null) {
    assertTrue("has TypeAttribute",ts.hasAttribute(TypeAttribute.class));
    typeAtt=(TypeAttribute)ts.getAttribute(TypeAttribute.class);
  }
  PositionIncrementAttribute posIncrAtt=null;
  if (posIncrements != null) {
    assertTrue("has PositionIncrementAttribute",ts.hasAttribute(PositionIncrementAttribute.class));
    posIncrAtt=(PositionIncrementAttribute)ts.getAttribute(PositionIncrementAttribute.class);
  }
  ts.reset();
  for (int i=0; i < output.length; i++) {
    ts.clearAttributes();
    assertTrue("token " + i + " exists",ts.incrementToken());
    assertEquals("term " + i,output[i],termAtt.term());
    if (startOffsets != null)     assertEquals("startOffset " + i,startOffsets[i],offsetAtt.startOffset());
    if (endOffsets != null)     assertEquals("endOffset " + i,endOffsets[i],offsetAtt.endOffset());
    if (types != null)     assertEquals("type " + i,types[i],typeAtt.type());
    if (posIncrements != null)     assertEquals("posIncrement " + i,posIncrements[i],posIncrAtt.getPositionIncrement());
  }
  assertFalse("end of stream",ts.incrementToken());
  ts.end();
  ts.close();
}
