{
  ArrayList<SpanQuery> ors=new ArrayList<>();
  ArrayList<SpanQuery> nots=new ArrayList<>();
  for (  BooleanClause clause : qc) {
    Query childQuery=clause.getQuery();
    float boost=1f;
    while (childQuery instanceof BoostQuery) {
      BoostQuery bq=(BoostQuery)childQuery;
      boost*=bq.getBoost();
      childQuery=bq.getQuery();
    }
    ArrayList<SpanQuery> chosenList=ors;
    if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {
      chosenList=nots;
    }
    if (childQuery instanceof TermQuery) {
      TermQuery tq=(TermQuery)childQuery;
      SpanQuery stq=new SpanTermQuery(tq.getTerm());
      if (boost != 1f) {
        stq=new SpanBoostQuery(stq,boost);
      }
      chosenList.add(stq);
    }
 else     if (childQuery instanceof BooleanQuery) {
      BooleanQuery cbq=(BooleanQuery)childQuery;
      addComplexPhraseClause(chosenList,cbq);
    }
 else {
      throw new IllegalArgumentException("Unknown query type:" + childQuery.getClass().getName());
    }
  }
  if (ors.size() == 0) {
    return;
  }
  SpanOrQuery soq=new SpanOrQuery(ors.toArray(new SpanQuery[ors.size()]));
  if (nots.size() == 0) {
    spanClauses.add(soq);
  }
 else {
    SpanOrQuery snqs=new SpanOrQuery(nots.toArray(new SpanQuery[nots.size()]));
    SpanNotQuery snq=new SpanNotQuery(soq,snqs);
    spanClauses.add(snq);
  }
}
