{
  final String mergeScheduler=config.get("merge.scheduler","org.apache.lucene.index.ConcurrentMergeScheduler");
  RuntimeException err=null;
  try {
    writer.setMergeScheduler((MergeScheduler)Class.forName(mergeScheduler).newInstance());
  }
 catch (  IllegalAccessException iae) {
    err=new RuntimeException("unable to instantiate class '" + mergeScheduler + "' as merge scheduler");
    err.initCause(iae);
  }
catch (  InstantiationException ie) {
    err=new RuntimeException("unable to instantiate class '" + mergeScheduler + "' as merge scheduler");
    err.initCause(ie);
  }
catch (  ClassNotFoundException cnfe) {
    err=new RuntimeException("unable to load class '" + mergeScheduler + "' as merge scheduler");
    err.initCause(cnfe);
  }
  if (err != null)   throw err;
  final String mergePolicy=config.get("merge.policy","org.apache.lucene.index.LogByteSizeMergePolicy");
  try {
    writer.setMergePolicy((MergePolicy)Class.forName(mergePolicy).newInstance());
  }
 catch (  IllegalAccessException iae) {
    err=new RuntimeException("unable to instantiate class '" + mergePolicy + "' as merge policy");
    err.initCause(iae);
  }
catch (  InstantiationException ie) {
    err=new RuntimeException("unable to instantiate class '" + mergePolicy + "' as merge policy");
    err.initCause(ie);
  }
catch (  ClassNotFoundException cnfe) {
    err=new RuntimeException("unable to load class '" + mergePolicy + "' as merge policy");
    err.initCause(cnfe);
  }
  if (err != null)   throw err;
  writer.setUseCompoundFile(config.get("compound",true));
  writer.setMergeFactor(config.get("merge.factor",OpenIndexTask.DEFAULT_MERGE_PFACTOR));
  writer.setMaxFieldLength(config.get("max.field.length",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));
  final double ramBuffer=config.get("ram.flush.mb",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);
  final int maxBuffered=config.get("max.buffered",OpenIndexTask.DEFAULT_MAX_BUFFERED);
  if (maxBuffered == IndexWriter.DISABLE_AUTO_FLUSH) {
    writer.setRAMBufferSizeMB(ramBuffer);
    writer.setMaxBufferedDocs(maxBuffered);
  }
 else {
    writer.setMaxBufferedDocs(maxBuffered);
    writer.setRAMBufferSizeMB(ramBuffer);
  }
  String infoStreamVal=config.get("writer.info.stream",null);
  if (infoStreamVal != null) {
    if (infoStreamVal.equals("SystemOut")) {
      writer.setInfoStream(System.out);
    }
 else     if (infoStreamVal.equals("SystemErr")) {
      writer.setInfoStream(System.err);
    }
 else {
      File f=new File(infoStreamVal).getAbsoluteFile();
      writer.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));
    }
  }
}
