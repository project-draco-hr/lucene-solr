{
  for (int i=0; i < 8 * iterations; ++i) {
    final long byte0=blocks[blocksOffset++] & 0xFF;
    final long byte1=blocks[blocksOffset++] & 0xFF;
    final long byte2=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=(byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);
    final long byte3=blocks[blocksOffset++] & 0xFF;
    final long byte4=blocks[blocksOffset++] & 0xFF;
    final long byte5=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6)| (byte5 >>> 2);
    final long byte6=blocks[blocksOffset++] & 0xFF;
    final long byte7=blocks[blocksOffset++] & 0xFF;
    final long byte8=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5)| (byte8 >>> 3);
    final long byte9=blocks[blocksOffset++] & 0xFF;
    final long byte10=blocks[blocksOffset++] & 0xFF;
    final long byte11=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4)| (byte11 >>> 4);
    final long byte12=blocks[blocksOffset++] & 0xFF;
    final long byte13=blocks[blocksOffset++] & 0xFF;
    final long byte14=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3)| (byte14 >>> 5);
    final long byte15=blocks[blocksOffset++] & 0xFF;
    final long byte16=blocks[blocksOffset++] & 0xFF;
    final long byte17=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2)| (byte17 >>> 6);
    final long byte18=blocks[blocksOffset++] & 0xFF;
    final long byte19=blocks[blocksOffset++] & 0xFF;
    final long byte20=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1)| (byte20 >>> 7);
    final long byte21=blocks[blocksOffset++] & 0xFF;
    final long byte22=blocks[blocksOffset++] & 0xFF;
    values[valuesOffset++]=((byte20 & 127) << 16) | (byte21 << 8) | byte22;
  }
}
