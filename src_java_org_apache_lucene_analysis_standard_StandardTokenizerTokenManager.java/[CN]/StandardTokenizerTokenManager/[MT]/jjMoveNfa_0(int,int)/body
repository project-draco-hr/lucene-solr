{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=75;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 1:
          if ((0x3ff000000000000L & l) != 0L) {
            if (kind > 1)             kind=1;
            jjCheckNAddStates(0,17);
          }
        if ((0x3ff000000000000L & l) != 0L)         jjCheckNAddStates(18,23);
      break;
case 2:
case 41:
    if ((0x3ff000000000000L & l) != 0L)     jjCheckNAddTwoStates(2,3);
  break;
case 3:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(4);
break;
case 4:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(4);
break;
case 5:
case 50:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(5,6);
break;
case 6:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(7);
break;
case 7:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(7,8);
break;
case 8:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(9,10);
break;
case 9:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(9,10);
break;
case 10:
case 11:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(6,11);
break;
case 12:
case 63:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(12,13);
break;
case 13:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(14);
break;
case 14:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(14,15);
break;
case 15:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(16,17);
break;
case 16:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(16,17);
break;
case 17:
case 18:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(18,19);
break;
case 19:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(20);
break;
case 20:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(15,20);
break;
case 21:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 1) kind=1;
jjCheckNAddStates(0,17);
break;
case 22:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 1) kind=1;
jjCheckNAdd(22);
break;
case 23:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddStates(24,26);
break;
case 24:
if ((0x600000000000L & l) != 0L) jjCheckNAddStates(27,29);
break;
case 26:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddStates(30,33);
break;
case 28:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddStates(34,36);
break;
case 29:
if (curChar != 46) break;
if (kind > 5) kind=5;
jjCheckNAddTwoStates(29,30);
break;
case 30:
if (curChar == 45) jjCheckNAdd(31);
break;
case 31:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 5) kind=5;
jjCheckNAddStates(37,39);
break;
case 32:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(32,33);
break;
case 33:
if (curChar == 46) jjCheckNAdd(34);
break;
case 34:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 6) kind=6;
jjCheckNAddTwoStates(33,34);
break;
case 35:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(35,36);
break;
case 36:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(37,38);
break;
case 37:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(37,38);
break;
case 38:
case 39:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(39);
break;
case 40:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(40,41);
break;
case 42:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(42,43);
break;
case 43:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(44,45);
break;
case 44:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(44,45);
break;
case 45:
case 46:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(46,47);
break;
case 47:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(48);
break;
case 48:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(43,48);
break;
case 49:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(49,50);
break;
case 51:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(51,52);
break;
case 52:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(53,54);
break;
case 53:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(53,54);
break;
case 54:
case 55:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(55,56);
break;
case 56:
if ((0xf00000000000L & l) != 0L) jjCheckNAdd(57);
break;
case 57:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(57,58);
break;
case 58:
if ((0xf00000000000L & l) != 0L) jjCheckNAddTwoStates(59,60);
break;
case 59:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(59,60);
break;
case 60:
case 61:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(56,61);
break;
case 62:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(62,63);
break;
case 66:
if (curChar == 39) jjstateSet[jjnewStateCnt++]=67;
break;
case 69:
if (curChar == 46) jjCheckNAdd(70);
break;
case 71:
if (curChar != 46) break;
if (kind > 3) kind=3;
jjCheckNAdd(70);
break;
case 73:
if (curChar == 38) jjstateSet[jjnewStateCnt++]=74;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 1:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddStates(40,45);
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 1) kind=1;
jjCheckNAddStates(0,17);
}
break;
case 2:
if ((0x7fffffe07fffffeL & l) != 0L) jjAddStates(46,47);
break;
case 3:
if (curChar == 95) jjCheckNAdd(4);
break;
case 4:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(4);
break;
case 5:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(5,6);
break;
case 6:
if (curChar == 95) jjCheckNAdd(7);
break;
case 7:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(7,8);
break;
case 8:
if (curChar == 95) jjCheckNAddTwoStates(9,10);
break;
case 9:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(9,10);
break;
case 11:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(6,11);
break;
case 12:
if ((0x7fffffe07fffffeL & l) != 0L) jjAddStates(48,49);
break;
case 13:
if (curChar == 95) jjCheckNAdd(14);
break;
case 14:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(14,15);
break;
case 15:
if (curChar == 95) jjCheckNAddTwoStates(16,17);
break;
case 16:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(16,17);
break;
case 18:
if ((0x7fffffe07fffffeL & l) != 0L) jjAddStates(50,51);
break;
case 19:
if (curChar == 95) jjCheckNAdd(20);
break;
case 20:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(15,20);
break;
case 21:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 1) kind=1;
jjCheckNAddStates(0,17);
break;
case 22:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 1) kind=1;
jjCheckNAdd(22);
break;
case 23:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddStates(24,26);
break;
case 25:
if (curChar == 95) jjCheckNAdd(26);
break;
case 26:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddStates(30,33);
break;
case 27:
if (curChar == 64) jjCheckNAdd(28);
break;
case 28:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddStates(34,36);
break;
case 31:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 5) kind=5;
jjCheckNAddStates(37,39);
break;
case 32:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(32,33);
break;
case 34:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 6) kind=6;
jjCheckNAddTwoStates(33,34);
break;
case 35:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(35,36);
break;
case 36:
if (curChar == 95) jjCheckNAddTwoStates(37,38);
break;
case 37:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(37,38);
break;
case 39:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjstateSet[jjnewStateCnt++]=39;
break;
case 40:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(40,41);
break;
case 42:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(42,43);
break;
case 43:
if (curChar == 95) jjCheckNAddTwoStates(44,45);
break;
case 44:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(44,45);
break;
case 46:
if ((0x7fffffe07fffffeL & l) != 0L) jjAddStates(52,53);
break;
case 47:
if (curChar == 95) jjCheckNAdd(48);
break;
case 48:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(43,48);
break;
case 49:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(49,50);
break;
case 51:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(51,52);
break;
case 52:
if (curChar == 95) jjCheckNAddTwoStates(53,54);
break;
case 53:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(53,54);
break;
case 55:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(55,56);
break;
case 56:
if (curChar == 95) jjCheckNAdd(57);
break;
case 57:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(57,58);
break;
case 58:
if (curChar == 95) jjCheckNAddTwoStates(59,60);
break;
case 59:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(59,60);
break;
case 61:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(56,61);
break;
case 62:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(62,63);
break;
case 64:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddStates(40,45);
break;
case 65:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(65,66);
break;
case 67:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 2) kind=2;
jjCheckNAddTwoStates(66,67);
break;
case 68:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(68,69);
break;
case 70:
if ((0x7fffffe07fffffeL & l) != 0L) jjAddStates(54,55);
break;
case 72:
if ((0x7fffffe07fffffeL & l) != 0L) jjCheckNAddTwoStates(72,73);
break;
case 73:
if (curChar == 64) jjCheckNAdd(74);
break;
case 74:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 4) kind=4;
jjCheckNAdd(74);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 1:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
if (kind > 10) kind=10;
jjCheckNAdd(0);
}
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(18,23);
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) {
if (kind > 1) kind=1;
jjCheckNAddStates(0,17);
}
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(40,45);
break;
case 0:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 10) kind=10;
jjCheckNAdd(0);
break;
case 2:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(2,3);
break;
case 4:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjstateSet[jjnewStateCnt++]=4;
break;
case 5:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(5,6);
break;
case 7:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(56,57);
break;
case 9:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(58,59);
break;
case 10:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(6,11);
break;
case 11:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(6,11);
break;
case 12:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(12,13);
break;
case 14:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(14,15);
break;
case 16:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(60,61);
break;
case 17:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(18,19);
break;
case 18:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(18,19);
break;
case 20:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(15,20);
break;
case 21:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 1) kind=1;
jjCheckNAddStates(0,17);
break;
case 22:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 1) kind=1;
jjCheckNAdd(22);
break;
case 23:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(24,26);
break;
case 26:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(30,33);
break;
case 28:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(34,36);
break;
case 31:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 5) kind=5;
jjCheckNAddStates(37,39);
break;
case 32:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(32,33);
break;
case 34:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 6) kind=6;
jjCheckNAddTwoStates(33,34);
break;
case 35:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(35,36);
break;
case 37:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(62,63);
break;
case 38:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAdd(39);
break;
case 39:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAdd(39);
break;
case 40:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(40,41);
break;
case 41:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(2,3);
break;
case 42:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(42,43);
break;
case 44:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(64,65);
break;
case 45:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(46,47);
break;
case 46:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(46,47);
break;
case 48:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(43,48);
break;
case 49:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(49,50);
break;
case 50:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(5,6);
break;
case 51:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(51,52);
break;
case 53:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(66,67);
break;
case 54:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(55,56);
break;
case 55:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(55,56);
break;
case 57:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(68,69);
break;
case 59:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(70,71);
break;
case 60:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(56,61);
break;
case 61:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAddTwoStates(56,61);
break;
case 62:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(62,63);
break;
case 63:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(12,13);
break;
case 64:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(40,45);
break;
case 65:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(65,66);
break;
case 67:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 2) kind=2;
jjCheckNAddTwoStates(66,67);
break;
case 68:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(68,69);
break;
case 70:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(54,55);
break;
case 72:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(72,73);
break;
case 74:
if (!jjCanMove_2(hiByte,i1,i2,l1,l2)) break;
if (kind > 4) kind=4;
jjstateSet[jjnewStateCnt++]=74;
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=75 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
