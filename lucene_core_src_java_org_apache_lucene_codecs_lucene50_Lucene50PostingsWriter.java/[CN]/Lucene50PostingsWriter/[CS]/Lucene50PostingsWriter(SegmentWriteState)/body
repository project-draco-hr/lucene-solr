{
  final float acceptableOverheadRatio=PackedInts.COMPACT;
  String docFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.DOC_EXTENSION);
  docOut=state.directory.createOutput(docFileName,state.context);
  IndexOutput posOut=null;
  IndexOutput payOut=null;
  boolean success=false;
  try {
    CodecUtil.writeIndexHeader(docOut,DOC_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
    forUtil=new ForUtil(acceptableOverheadRatio,docOut);
    if (state.fieldInfos.hasProx()) {
      posDeltaBuffer=new int[MAX_DATA_SIZE];
      String posFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.POS_EXTENSION);
      posOut=state.directory.createOutput(posFileName,state.context);
      CodecUtil.writeIndexHeader(posOut,POS_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
      if (state.fieldInfos.hasPayloads()) {
        payloadBytes=new byte[128];
        payloadLengthBuffer=new int[MAX_DATA_SIZE];
      }
 else {
        payloadBytes=null;
        payloadLengthBuffer=null;
      }
      if (state.fieldInfos.hasOffsets()) {
        offsetStartDeltaBuffer=new int[MAX_DATA_SIZE];
        offsetLengthBuffer=new int[MAX_DATA_SIZE];
      }
 else {
        offsetStartDeltaBuffer=null;
        offsetLengthBuffer=null;
      }
      if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {
        String payFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.PAY_EXTENSION);
        payOut=state.directory.createOutput(payFileName,state.context);
        CodecUtil.writeIndexHeader(payOut,PAY_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);
      }
    }
 else {
      posDeltaBuffer=null;
      payloadLengthBuffer=null;
      offsetStartDeltaBuffer=null;
      offsetLengthBuffer=null;
      payloadBytes=null;
    }
    this.payOut=payOut;
    this.posOut=posOut;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(docOut,posOut,payOut);
    }
  }
  docDeltaBuffer=new int[MAX_DATA_SIZE];
  freqBuffer=new int[MAX_DATA_SIZE];
  skipWriter=new Lucene50SkipWriter(MAX_SKIP_LEVELS,BLOCK_SIZE,state.segmentInfo.getDocCount(),docOut,posOut,payOut);
  encoded=new byte[MAX_ENCODED_SIZE];
}
