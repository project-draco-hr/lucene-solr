{
  AbstractUpdateRequest request=new UpdateRequest().add(id,"0","a_t","hello1").add(id,"2","a_t","hello2").setAction(AbstractUpdateRequest.ACTION.COMMIT,true,true);
  NamedList<Object> response=cluster.getSolrClient().request(request,COLLECTION);
  CloudSolrClient.RouteResponse rr=(CloudSolrClient.RouteResponse)response;
  Map<String,LBHttpSolrClient.Req> routes=rr.getRoutes();
  Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it=routes.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,LBHttpSolrClient.Req> entry=it.next();
    String url=entry.getKey();
    UpdateRequest updateRequest=(UpdateRequest)entry.getValue().getRequest();
    SolrInputDocument doc=updateRequest.getDocuments().get(0);
    String id=doc.getField("id").getValue().toString();
    ModifiableSolrParams params=new ModifiableSolrParams();
    params.add("q","id:" + id);
    params.add("distrib","false");
    QueryRequest queryRequest=new QueryRequest(params);
    try (HttpSolrClient solrClient=getHttpSolrClient(url)){
      QueryResponse queryResponse=queryRequest.process(solrClient);
      SolrDocumentList docList=queryResponse.getResults();
      assertTrue(docList.getNumFound() == 1);
    }
   }
  final UpdateResponse uResponse=new UpdateRequest().deleteById("0").deleteById("2").commit(cluster.getSolrClient(),COLLECTION);
  QueryResponse qResponse=cluster.getSolrClient().query(COLLECTION,new SolrQuery("*:*"));
  SolrDocumentList docs=qResponse.getResults();
  assertEquals(0,docs.getNumFound());
  try (CloudSolrClient threadedClient=getCloudSolrClient(cluster.getZkServer().getZkAddress())){
    threadedClient.setParallelUpdates(true);
    threadedClient.setDefaultCollection(COLLECTION);
    response=threadedClient.request(request);
    rr=(CloudSolrClient.RouteResponse)response;
    routes=rr.getRoutes();
    it=routes.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<String,LBHttpSolrClient.Req> entry=it.next();
      String url=entry.getKey();
      UpdateRequest updateRequest=(UpdateRequest)entry.getValue().getRequest();
      SolrInputDocument doc=updateRequest.getDocuments().get(0);
      String id=doc.getField("id").getValue().toString();
      ModifiableSolrParams params=new ModifiableSolrParams();
      params.add("q","id:" + id);
      params.add("distrib","false");
      QueryRequest queryRequest=new QueryRequest(params);
      try (HttpSolrClient solrClient=getHttpSolrClient(url)){
        QueryResponse queryResponse=queryRequest.process(solrClient);
        SolrDocumentList docList=queryResponse.getResults();
        assertTrue(docList.getNumFound() == 1);
      }
     }
  }
   ClusterState clusterState=cluster.getSolrClient().getZkStateReader().getClusterState();
  DocCollection col=clusterState.getCollection(COLLECTION);
  Map<String,Long> requestCountsMap=Maps.newHashMap();
  for (  Slice slice : col.getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      requestCountsMap.put(baseURL,getNumRequests(baseURL,COLLECTION));
    }
  }
  DocRouter router=col.getRouter();
  Collection<Slice> expectedSlices=router.getSearchSlicesSingle("0",null,col);
  Set<String> expectedBaseURLs=Sets.newHashSet();
  for (  Slice expectedSlice : expectedSlices) {
    for (    Replica replica : expectedSlice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      expectedBaseURLs.add(baseURL);
    }
  }
  assertTrue("expected urls is not fewer than all urls! expected=" + expectedBaseURLs + "; all="+ requestCountsMap.keySet(),expectedBaseURLs.size() < requestCountsMap.size());
  int n;
  if (TEST_NIGHTLY) {
    n=random().nextInt(999) + 2;
  }
 else {
    n=random().nextInt(9) + 2;
  }
  List<String> sameShardRoutes=Lists.newArrayList();
  sameShardRoutes.add("0");
  for (int i=1; i < n; i++) {
    String shardKey=Integer.toString(i);
    Collection<Slice> slices=router.getSearchSlicesSingle(shardKey,null,col);
    log.info("Expected Slices {}",slices);
    if (expectedSlices.equals(slices)) {
      sameShardRoutes.add(shardKey);
    }
  }
  assertTrue(sameShardRoutes.size() > 1);
  for (int i=0; i < n; i++) {
    ModifiableSolrParams solrParams=new ModifiableSolrParams();
    solrParams.set(CommonParams.Q,"*:*");
    solrParams.set(ShardParams._ROUTE_,sameShardRoutes.get(random().nextInt(sameShardRoutes.size())));
    log.info("output: {}",cluster.getSolrClient().query(COLLECTION,solrParams));
  }
  int increaseFromExpectedUrls=0;
  int increaseFromUnexpectedUrls=0;
  Map<String,Long> numRequestsToUnexpectedUrls=Maps.newHashMap();
  for (  Slice slice : col.getSlices()) {
    for (    Replica replica : slice.getReplicas()) {
      String baseURL=(String)replica.get(ZkStateReader.BASE_URL_PROP);
      Long prevNumRequests=requestCountsMap.get(baseURL);
      Long curNumRequests=getNumRequests(baseURL,COLLECTION);
      long delta=curNumRequests - prevNumRequests;
      if (expectedBaseURLs.contains(baseURL)) {
        increaseFromExpectedUrls+=delta;
      }
 else {
        increaseFromUnexpectedUrls+=delta;
        numRequestsToUnexpectedUrls.put(baseURL,delta);
      }
    }
  }
  assertEquals("Unexpected number of requests to expected URLs",n,increaseFromExpectedUrls);
  assertEquals("Unexpected number of requests to unexpected URLs: " + numRequestsToUnexpectedUrls,0,increaseFromUnexpectedUrls);
}
