{
  try (CloudSolrClient client=createCloudClient(null)){
    String collectionName="checkStateVerCol";
    createCollection(collectionName,client,2,2);
    waitForRecoveriesToFinish(collectionName,false);
    DocCollection coll=client.getZkStateReader().getClusterState().getCollection(collectionName);
    Replica r=coll.getSlices().iterator().next().getReplicas().iterator().next();
    SolrQuery q=new SolrQuery().setQuery("*:*");
    HttpSolrClient.RemoteSolrException sse=null;
    try (HttpSolrClient solrClient=new HttpSolrClient(r.getStr(ZkStateReader.BASE_URL_PROP) + "/" + collectionName)){
      log.info("should work query, result {}",solrClient.query(q));
      q.setParam(CloudSolrClient.STATE_VERSION,collectionName + ":" + coll.getZNodeVersion());
      log.info("2nd query , result {}",solrClient.query(q));
      q.setParam(CloudSolrClient.STATE_VERSION,collectionName + ":" + (coll.getZNodeVersion() - 1));
      try {
        solrClient.query(q);
        log.info("expected query error");
      }
 catch (      HttpSolrClient.RemoteSolrException e) {
        sse=e;
      }
      assertNotNull(sse);
      assertEquals(" Error code should be ",sse.code(),SolrException.ErrorCode.INVALID_STATE.code);
    }
     Set<String> allNodesOfColl=new HashSet<>();
    for (    Slice slice : coll.getSlices()) {
      for (      Replica replica : slice.getReplicas()) {
        allNodesOfColl.add(replica.getStr(ZkStateReader.BASE_URL_PROP));
      }
    }
    String theNode=null;
    for (    String s : client.getZkStateReader().getClusterState().getLiveNodes()) {
      String n=client.getZkStateReader().getBaseUrlForNodeName(s);
      if (!allNodesOfColl.contains(s)) {
        theNode=n;
        break;
      }
    }
    log.info("thenode which does not serve this collection{} ",theNode);
    assertNotNull(theNode);
    try (SolrClient solrClient=new HttpSolrClient(theNode + "/" + collectionName)){
      q.setParam(CloudSolrClient.STATE_VERSION,collectionName + ":" + coll.getZNodeVersion());
      try {
        solrClient.query(q);
        log.info("error was expected");
      }
 catch (      HttpSolrClient.RemoteSolrException e) {
        sse=e;
      }
      assertNotNull(sse);
      assertEquals(" Error code should be ",sse.code(),SolrException.ErrorCode.INVALID_STATE.code);
    }
   }
 }
