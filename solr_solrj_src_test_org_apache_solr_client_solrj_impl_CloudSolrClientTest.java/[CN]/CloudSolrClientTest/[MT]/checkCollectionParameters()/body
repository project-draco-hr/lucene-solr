{
  try (CloudSolrClient client=getCloudSolrClient(cluster.getZkServer().getZkAddress())){
    String async1=CollectionAdminRequest.createCollection("multicollection1","conf",2,1).processAsync(client);
    String async2=CollectionAdminRequest.createCollection("multicollection2","conf",2,1).processAsync(client);
    CollectionAdminRequest.waitForAsyncRequest(async1,client,TIMEOUT);
    CollectionAdminRequest.waitForAsyncRequest(async2,client,TIMEOUT);
    AbstractDistribZkTestBase.waitForRecoveriesToFinish("multicollection1",client.getZkStateReader(),false,true,TIMEOUT);
    AbstractDistribZkTestBase.waitForRecoveriesToFinish("multicollection2",client.getZkStateReader(),false,true,TIMEOUT);
    client.setDefaultCollection("multicollection1");
    List<SolrInputDocument> docs=new ArrayList<>(3);
    for (int i=0; i < 3; i++) {
      SolrInputDocument doc=new SolrInputDocument();
      doc.addField(id,Integer.toString(i));
      doc.addField("a_t","hello");
      docs.add(doc);
    }
    client.add(docs);
    client.commit();
    ModifiableSolrParams queryParams=new ModifiableSolrParams();
    queryParams.add("q","*:*");
    assertEquals(3,client.query(queryParams).getResults().size());
    assertEquals(0,client.query("multicollection2",queryParams).getResults().size());
    SolrQuery query=new SolrQuery("*:*");
    query.set("collection","multicollection2");
    assertEquals(0,client.query(query).getResults().size());
    client.add("multicollection2",docs);
    client.commit("multicollection2");
    assertEquals(3,client.query("multicollection2",queryParams).getResults().size());
  }
 }
