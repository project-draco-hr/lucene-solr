{
  String s="{" + "  '127.0.0.1:49961_':{" + "    'node':'127.0.0.1:49961_',"+ "    'freedisk':992,"+ "    'cores':1},"+ "  '127.0.0.2:49955_':{"+ "    'node':'127.0.0.1:49955_',"+ "    'freedisk':995,"+ "    'cores':1},"+ "  '127.0.0.3:49952_':{"+ "    'node':'127.0.0.1:49952_',"+ "    'freedisk':990,"+ "    'cores':1},"+ "  '127.0.0.1:49947_':{"+ "    'node':'127.0.0.1:49947_',"+ "    'freedisk':980,"+ "    'cores':1},"+ "  '127.0.0.2:49958_':{"+ "    'node':'127.0.0.1:49958_',"+ "    'freedisk':970,"+ "    'cores':1}}";
  MockSnitch.nodeVsTags=(Map)ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));
  List<Rule> rules=parseRules("[{cores:'<4'}, " + "{replica:'1',shard:'*',node:'*'}," + "{node:'!127.0.0.1:49947_'},"+ "{freedisk:'>1'}]");
  Map shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  Map<Position,String> mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings();
  assertNotNull(mapping);
  assertFalse(mapping.containsValue("127.0.0.1:49947_"));
  rules=parseRules("[{cores:'<4'}, " + "{replica:'1',node:'*'}," + "{freedisk:'>980'}]");
  shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings0();
  assertNull(mapping);
  rules=parseRules("[{cores:'<4'}, " + "{replica:'1',node:'*'}," + "{freedisk:'>980~'}]");
  shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings0();
  assertNotNull(mapping);
  assertFalse(mapping.containsValue("127.0.0.2:49958_"));
  rules=parseRules("[{cores:'<4'}, " + "{replica:'1',shard:'*',host:'*'}]");
  shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings();
  assertNotNull(mapping);
  rules=parseRules("[{cores:'<4'}, " + "{replica:'1',shard:'**',host:'*'}]");
  shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings0();
  assertNull(mapping);
  rules=parseRules("[{cores:'<4'}, " + "{replica:'1~',shard:'**',host:'*'}]");
  shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,Collections.singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings();
  assertNotNull(mapping);
}
