{
  String s="{" + "  '127.0.0.1:49961_':{" + "    'node':'127.0.0.1:49961_',"+ "    'freedisk':992,"+ "    'cores':1},"+ "  '127.0.0.1:49955_':{"+ "    'node':'127.0.0.1:49955_',"+ "    'freedisk':992,"+ "    'cores':1},"+ "  '127.0.0.1:49952_':{"+ "    'node':'127.0.0.1:49952_',"+ "    'freedisk':992,"+ "    'cores':1},"+ "  '127.0.0.1:49947_':{"+ "    'node':'127.0.0.1:49947_',"+ "    'freedisk':992,"+ "    'cores':1},"+ "  '127.0.0.1:49958_':{"+ "    'node':'127.0.0.1:49958_',"+ "    'freedisk':992,"+ "    'cores':1}}";
  MockSnitch.nodeVsTags=(Map)Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));
  Map shardVsReplicaCount=makeMap("shard1",2,"shard2",2);
  List<Rule> rules=parseRules("[{'cores':'<4'}, {" + "'replica':'1',shard:'*','node':'*'}," + " {'freedisk':'>1'}]");
  Map<Position,String> mapping=new ReplicaAssigner(rules,shardVsReplicaCount,singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings();
  assertNotNull(mapping);
  mapping=new ReplicaAssigner(rules,shardVsReplicaCount,singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null).getNodeMappings();
  assertNotNull(mapping);
  rules=parseRules("[{role:'!overseer'}]");
  Map<String,Object> snitchSession=new HashMap<>();
  List<String> preferredOverseerNodes=ImmutableList.of("127.0.0.1:49947_","127.0.0.1:49952_");
  ReplicaAssigner replicaAssigner=new ReplicaAssigner(rules,shardVsReplicaCount,singletonList(MockSnitch.class.getName()),new HashMap(),new ArrayList<>(MockSnitch.nodeVsTags.keySet()),null,null){
    @Override protected SnitchContext getSnitchCtx(    String node,    SnitchInfoImpl info,    CoreContainer cc){
      return new ServerSnitchContext(info,node,snitchSession,cc){
        @Override public Map getZkJson(        String path){
          if (ZkStateReader.ROLES.equals(path)) {
            return Collections.singletonMap("overseer",preferredOverseerNodes);
          }
          return null;
        }
      }
;
    }
  }
;
  mapping=replicaAssigner.getNodeMappings();
  assertNotNull(mapping);
  for (  String nodeName : mapping.values()) {
    assertFalse(preferredOverseerNodes.contains(nodeName));
  }
}
