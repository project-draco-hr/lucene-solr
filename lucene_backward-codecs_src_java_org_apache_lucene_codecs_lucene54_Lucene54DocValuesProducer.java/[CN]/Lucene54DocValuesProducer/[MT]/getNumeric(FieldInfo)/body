{
  NumericEntry entry=numerics.get(field.name);
  Bits docsWithField;
  if (entry.format == SPARSE_COMPRESSED) {
    return getSparseNumericDocValues(entry);
  }
 else {
    if (entry.missingOffset == ALL_MISSING) {
      return DocValues.emptyNumeric();
    }
 else     if (entry.missingOffset == ALL_LIVE) {
      LongValues values=getNumeric(entry);
      return new NumericDocValues(){
        private int docID=-1;
        @Override public int docID(){
          return docID;
        }
        @Override public int nextDoc(){
          docID++;
          if (docID == maxDoc) {
            docID=NO_MORE_DOCS;
          }
          return docID;
        }
        @Override public int advance(        int target){
          if (target >= maxDoc) {
            docID=NO_MORE_DOCS;
          }
 else {
            docID=target;
          }
          return docID;
        }
        @Override public long cost(){
          return 0;
        }
        @Override public long longValue(){
          return values.get(docID);
        }
      }
;
    }
 else {
      docsWithField=getLiveBits(entry.missingOffset,maxDoc);
    }
  }
  final LongValues values=getNumeric(entry);
  return new NumericDocValues(){
    int doc=-1;
    long value;
    @Override public long longValue() throws IOException {
      return value;
    }
    @Override public int docID(){
      return doc;
    }
    @Override public int nextDoc() throws IOException {
      return advance(doc + 1);
    }
    @Override public int advance(    int target) throws IOException {
      for (int doc=target; doc < maxDoc; ++doc) {
        value=values.get(doc);
        if (value != 0 || docsWithField.get(doc)) {
          return this.doc=doc;
        }
      }
      return doc=NO_MORE_DOCS;
    }
    @Override public long cost(){
      return maxDoc;
    }
  }
;
}
