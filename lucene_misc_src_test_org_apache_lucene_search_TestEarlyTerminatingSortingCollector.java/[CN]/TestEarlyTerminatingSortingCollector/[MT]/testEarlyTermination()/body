{
  final int iters=atLeast(8);
  for (int i=0; i < iters; ++i) {
    createRandomIndex(false);
    for (int j=0; j < iters; ++j) {
      final IndexSearcher searcher=newSearcher(reader);
      final int numHits=TestUtil.nextInt(random(),1,numDocs);
      final Sort sort=new Sort(new SortField("ndv1",SortField.Type.LONG,false));
      final boolean fillFields=random().nextBoolean();
      final boolean trackDocScores=random().nextBoolean();
      final boolean trackMaxScore=random().nextBoolean();
      final TopFieldCollector collector1=TopFieldCollector.create(sort,numHits,fillFields,trackDocScores,trackMaxScore);
      final TopFieldCollector collector2=TopFieldCollector.create(sort,numHits,fillFields,trackDocScores,trackMaxScore);
      final Query query;
      if (random().nextBoolean()) {
        query=new TermQuery(new Term("s",RandomPicks.randomFrom(random(),terms)));
      }
 else {
        query=new MatchAllDocsQuery();
      }
      searcher.search(query,collector1);
      searcher.search(query,new EarlyTerminatingSortingCollector(collector2,sort,numHits,mergePolicy.getSort()));
      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());
      assertTopDocsEquals(collector1.topDocs().scoreDocs,collector2.topDocs().scoreDocs);
    }
    closeIndex();
  }
}
