{
  writeFieldEntry(field);
  SimpleTextUtil.write(data,NUMVALUES);
  SimpleTextUtil.write(data,Integer.toString(valueCount),scratch);
  SimpleTextUtil.writeNewline(data);
  SimpleTextUtil.write(data,MAXLENGTH);
  SimpleTextUtil.write(data,Integer.toString(maxLength),scratch);
  SimpleTextUtil.writeNewline(data);
  int maxBytesLength=Integer.toString(maxLength).length();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < maxBytesLength; i++) {
    sb.append('0');
  }
  SimpleTextUtil.write(data,PATTERN);
  SimpleTextUtil.write(data,sb.toString(),scratch);
  SimpleTextUtil.writeNewline(data);
  final DecimalFormat encoder=new DecimalFormat(sb.toString(),new DecimalFormatSymbols(Locale.ROOT));
  int maxOrdBytes=Integer.toString(valueCount).length();
  sb.setLength(0);
  for (int i=0; i < maxOrdBytes; i++) {
    sb.append('0');
  }
  SimpleTextUtil.write(data,ORDPATTERN);
  SimpleTextUtil.write(data,sb.toString(),scratch);
  SimpleTextUtil.writeNewline(data);
  final DecimalFormat ordEncoder=new DecimalFormat(sb.toString(),new DecimalFormatSymbols(Locale.ROOT));
  return new SortedDocValuesConsumer(){
    @Override public void addValue(    BytesRef value) throws IOException {
      SimpleTextUtil.write(data,LENGTH);
      SimpleTextUtil.write(data,encoder.format(value.length),scratch);
      SimpleTextUtil.writeNewline(data);
      data.writeBytes(value.bytes,value.offset,value.length);
      for (int i=value.length; i < maxLength; i++) {
        data.writeByte((byte)' ');
      }
      SimpleTextUtil.writeNewline(data);
    }
    @Override public void addDoc(    int ord) throws IOException {
      SimpleTextUtil.write(data,ordEncoder.format(ord),scratch);
      SimpleTextUtil.writeNewline(data);
    }
    @Override public void finish() throws IOException {
    }
  }
;
}
