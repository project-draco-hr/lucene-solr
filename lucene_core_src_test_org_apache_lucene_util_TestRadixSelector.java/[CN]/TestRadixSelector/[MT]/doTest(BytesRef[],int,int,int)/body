{
  final int k=TestUtil.nextInt(random(),from,to - 1);
  BytesRef[] expected=arr.clone();
  Arrays.sort(expected,from,to);
  BytesRef[] actual=arr.clone();
  final int enforcedMaxLen=random().nextBoolean() ? maxLen : Integer.MAX_VALUE;
  RadixSelector selector=new RadixSelector(enforcedMaxLen){
    @Override protected void swap(    int i,    int j){
      ArrayUtil.swap(actual,i,j);
    }
    @Override protected int byteAt(    int i,    int k){
      assertTrue(k < enforcedMaxLen);
      BytesRef b=actual[i];
      if (k >= b.length) {
        return -1;
      }
 else {
        return Byte.toUnsignedInt(b.bytes[b.offset + k]);
      }
    }
  }
;
  selector.select(from,to,k);
  assertEquals(expected[k],actual[k]);
  for (int i=0; i < actual.length; ++i) {
    if (i < from || i >= to) {
      assertSame(arr[i],actual[i]);
    }
 else     if (i <= k) {
      assertTrue(actual[i].compareTo(actual[k]) <= 0);
    }
 else {
      assertTrue(actual[i].compareTo(actual[k]) >= 0);
    }
  }
}
