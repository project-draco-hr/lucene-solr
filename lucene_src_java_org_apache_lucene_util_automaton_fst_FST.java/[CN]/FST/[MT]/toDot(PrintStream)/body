{
  final List<Integer> queue=new ArrayList<Integer>();
  queue.add(startNode);
  final Set<Integer> seen=new HashSet<Integer>();
  seen.add(startNode);
  out.println("digraph FST {");
  out.println("  rankdir = LR;");
  out.println("  " + startNode + " [label=\"\" shape=circle];");
  out.println("  initial [shape=point color=white label=\"\"];");
  if (emptyOutput != null) {
    out.println("  initial -> " + startNode + " [arrowhead=tee label=\"("+ outputs.outputToString(emptyOutput)+ ")\"];");
  }
 else {
    out.println("  initial -> " + startNode);
  }
  final Arc<T> arc=new Arc<T>();
  while (queue.size() != 0) {
    Integer node=queue.get(queue.size() - 1);
    queue.remove(queue.size() - 1);
    if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {
      continue;
    }
    readFirstArc(node,arc);
    while (true) {
      if (!seen.contains(arc.target)) {
        out.println("  " + arc.target + " [label=\"\" shape=circle];");
        seen.add(arc.target);
        queue.add(arc.target);
      }
      String outs;
      if (arc.output != NO_OUTPUT) {
        outs="/" + outputs.outputToString(arc.output);
      }
 else {
        outs="";
      }
      if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {
        outs+=" (" + outputs.outputToString(arc.nextFinalOutput) + ")";
      }
      out.print("  " + node + " -> "+ arc.target+ " [label=\""+ arc.label+ outs+ "\"");
      if (arc.isFinal()) {
        out.print(" arrowhead=tee");
      }
      if (arc.flag(BIT_TARGET_NEXT)) {
        out.print(" color=blue");
      }
      out.println("];");
      if (arc.isLast()) {
        break;
      }
 else {
        readNextArc(arc);
      }
    }
  }
  out.println("}");
}
