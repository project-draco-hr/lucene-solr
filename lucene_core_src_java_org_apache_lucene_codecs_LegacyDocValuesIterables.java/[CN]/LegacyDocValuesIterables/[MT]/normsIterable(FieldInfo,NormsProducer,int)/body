{
  return new Iterable<Number>(){
    @Override public Iterator<Number> iterator(){
      final NumericDocValues values;
      try {
        values=normsProducer.getNorms(field);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
      return new Iterator<Number>(){
        private int docIDUpto=-1;
        @Override public boolean hasNext(){
          return docIDUpto + 1 < maxDoc;
        }
        @Override public Number next(){
          docIDUpto++;
          if (docIDUpto > values.docID()) {
            try {
              values.nextDoc();
            }
 catch (            IOException ioe) {
              throw new RuntimeException(ioe);
            }
          }
          Number result;
          if (docIDUpto == values.docID()) {
            try {
              result=values.longValue();
            }
 catch (            IOException ioe) {
              throw new RuntimeException(ioe);
            }
          }
 else {
            result=0;
          }
          return result;
        }
      }
;
    }
  }
;
}
