{
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random(),MockTokenizer.SIMPLE,true,MockTokenFilter.ENGLISH_STOPSET)));
  FieldType type=new FieldType(TextField.TYPE_STORED);
  type.setStoreTermVectorOffsets(true);
  type.setStoreTermVectorPositions(true);
  type.setStoreTermVectors(true);
  type.freeze();
  String[] texts={"Hello this is a piece of text that is very long and contains too much preamble and the meat is really here which says kennedy has been shot","This piece of text refers to Kennedy at the beginning then has a longer piece of text that is very long in the middle and finally ends with another reference to Kennedy","JFK has been shot","John Kennedy has been shot","This text has a typo in referring to Keneddy","wordx wordy wordz wordx wordy wordx worda wordb wordy wordc","y z x y z a b","lets is a the lets is a the lets is a the lets"};
  for (int i=0; i < texts.length; i++) {
    Document doc=new Document();
    Field field=new Field("field",texts[i],type);
    doc.add(field);
    writer.addDocument(doc);
  }
  CommonTermsQuery query=new CommonTermsQuery(Occur.MUST,Occur.SHOULD,2);
  query.add(new Term("field","text"));
  query.add(new Term("field","long"));
  query.add(new Term("field","very"));
  FastVectorHighlighter highlighter=new FastVectorHighlighter();
  IndexReader reader=DirectoryReader.open(writer,true);
  IndexSearcher searcher=newSearcher(reader);
  TopDocs hits=searcher.search(query,10);
  assertEquals(2,hits.totalHits);
  FieldQuery fieldQuery=highlighter.getFieldQuery(query,reader);
  String[] bestFragments=highlighter.getBestFragments(fieldQuery,reader,hits.scoreDocs[0].doc,"field",1000,1);
  assertEquals("This piece of <b>text</b> refers to Kennedy at the beginning then has a longer piece of <b>text</b> that is <b>very</b> <b>long</b> in the middle and finally ends with another reference to Kennedy",bestFragments[0]);
  fieldQuery=highlighter.getFieldQuery(query,reader);
  bestFragments=highlighter.getBestFragments(fieldQuery,reader,hits.scoreDocs[1].doc,"field",1000,1);
  assertEquals("Hello this is a piece of <b>text</b> that is <b>very</b> <b>long</b> and contains too much preamble and the meat is really here which says kennedy has been shot",bestFragments[0]);
  reader.close();
  writer.close();
  dir.close();
}
