{
  final Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      final Tokenizer source=new MockTokenizer(reader);
      TokenStream sink=source;
      sink=new SynonymFilter(sink);
      return new TokenStreamComponents(source,sink);
    }
  }
;
  final Directory directory=newDirectory();
  RandomIndexWriter iw=new RandomIndexWriter(random(),directory,analyzer);
  Document doc=new Document();
  FieldType withVectors=new FieldType(TextField.TYPE_STORED);
  withVectors.setStoreTermVectors(true);
  withVectors.setStoreTermVectorPositions(true);
  withVectors.setStoreTermVectorOffsets(true);
  doc.add(new Field(FIELD,"a b c",withVectors));
  iw.addDocument(doc);
  DirectoryReader ir=iw.getReader();
  final PhraseQuery pq1=new PhraseQuery();
  pq1.add(new Term(FIELD,"a"),0);
  pq1.add(new Term(FIELD,"b"),1);
  pq1.add(new Term(FIELD,"c"),2);
  final PhraseQuery pq2=new PhraseQuery();
  pq2.add(new Term(FIELD,"a"),0);
  pq2.add(new Term(FIELD,"B"),1);
  pq2.add(new Term(FIELD,"c"),2);
  final BooleanQuery bq=new BooleanQuery();
  bq.add(pq1,Occur.SHOULD);
  bq.add(pq2,Occur.SHOULD);
  final PhraseQuery pq=new PhraseQuery();
  pq.add(new Term(FIELD,"a"),0);
  pq.add(new Term(FIELD,"b"),1);
  pq.add(new Term(FIELD,"B"),1);
  pq.add(new Term(FIELD,"c"),2);
  for (  Query query : Arrays.asList(pq1,pq2,bq,pq)) {
    assertEquals(1,new IndexSearcher(ir).search(bq,1).totalHits);
    FastVectorHighlighter highlighter=new FastVectorHighlighter();
    FieldQuery fieldQuery=highlighter.getFieldQuery(query,ir);
    String[] bestFragments=highlighter.getBestFragments(fieldQuery,ir,0,FIELD,1000,1);
    assertEquals("<b>a b c</b>",bestFragments[0]);
  }
  ir.close();
  iw.close();
  directory.close();
}
