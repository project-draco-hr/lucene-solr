{
  final Weight weight=query.createWeight(searcher);
  return new Weight(){
    public float getValue(){
      return weight.getValue();
    }
    public float sumOfSquaredWeights() throws IOException {
      return weight.sumOfSquaredWeights();
    }
    public void normalize(    float v){
      weight.normalize(v);
    }
    public Explanation explain(    IndexReader ir,    int i) throws IOException {
      return weight.explain(ir,i);
    }
    public Query getQuery(){
      return FilteredQuery.this;
    }
    public Scorer scorer(    IndexReader indexReader) throws IOException {
      final Scorer scorer=weight.scorer(indexReader);
      final BitSet bitset=filter.bits(indexReader);
      return new Scorer(query.getSimilarity(searcher)){
        public boolean next() throws IOException {
          return scorer.next();
        }
        public int doc(){
          return scorer.doc();
        }
        public boolean skipTo(        int i) throws IOException {
          return scorer.skipTo(i);
        }
        public float score() throws IOException {
          return (bitset.get(scorer.doc())) ? scorer.score() : 0.0f;
        }
        public Explanation explain(        int i) throws IOException {
          Explanation exp=scorer.explain(i);
          if (bitset.get(i))           exp.setDescription("allowed by filter: " + exp.getDescription());
 else           exp.setDescription("removed by filter: " + exp.getDescription());
          return exp;
        }
      }
;
    }
  }
;
}
