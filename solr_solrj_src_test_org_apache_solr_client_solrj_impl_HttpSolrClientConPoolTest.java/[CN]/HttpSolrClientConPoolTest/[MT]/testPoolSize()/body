{
  PoolingHttpClientConnectionManager pool=HttpClientUtil.createPoolingConnectionManager();
  final HttpSolrClient client1;
  final String fooUrl;
{
    fooUrl=jetty.getBaseUrl().toString() + "/" + "collection1";
    CloseableHttpClient httpClient=HttpClientUtil.createClient(new ModifiableSolrParams(),pool,false);
    client1=getHttpSolrClient(fooUrl,httpClient);
    client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
  }
  final String barUrl=yetty.getBaseUrl().toString() + "/" + "collection1";
{
    client1.setBaseURL(fooUrl);
    client1.deleteByQuery("*:*");
    client1.setBaseURL(barUrl);
    client1.deleteByQuery("*:*");
  }
  List<String> urls=new ArrayList<>();
  for (int i=0; i < 17; i++) {
    urls.add(fooUrl);
  }
  for (int i=0; i < 31; i++) {
    urls.add(barUrl);
  }
  Collections.shuffle(urls,random());
  try {
    int i=0;
    for (    String url : urls) {
      if (!client1.getBaseURL().equals(url)) {
        client1.setBaseURL(url);
      }
      client1.add(new SolrInputDocument("id","" + (i++)));
    }
    client1.setBaseURL(fooUrl);
    client1.commit();
    assertEquals(17,client1.query(new SolrQuery("*:*")).getResults().getNumFound());
    client1.setBaseURL(barUrl);
    client1.commit();
    assertEquals(31,client1.query(new SolrQuery("*:*")).getResults().getNumFound());
    PoolStats stats=pool.getTotalStats();
    assertEquals("oh " + stats,2,stats.getAvailable());
  }
  finally {
    for (    HttpSolrClient c : new HttpSolrClient[]{client1}) {
      HttpClientUtil.close(c.getHttpClient());
      c.close();
    }
  }
}
