{
  PoolingHttpClientConnectionManager pool=HttpClientUtil.createPoolingConnectionManager();
  final HttpSolrClient client1;
  int threadCount=atLeast(2);
  final ExecutorService threads=ExecutorUtil.newMDCAwareFixedThreadPool(threadCount,new SolrjNamedThreadFactory(getClass().getSimpleName() + "TestScheduler"));
  CloseableHttpClient httpClient=HttpClientUtil.createClient(new ModifiableSolrParams(),pool);
  try {
    final LBHttpSolrClient roundRobin=new LBHttpSolrClient.Builder().withBaseSolrUrl(fooUrl).withBaseSolrUrl(barUrl).withHttpClient(httpClient).build();
    List<ConcurrentUpdateSolrClient> concurrentClients=Arrays.asList(new ConcurrentUpdateSolrClient.Builder(fooUrl).withHttpClient(httpClient).withThreadCount(threadCount).withQueueSize(10).withExecutorService(threads).build(),new ConcurrentUpdateSolrClient.Builder(barUrl).withHttpClient(httpClient).withThreadCount(threadCount).withQueueSize(10).withExecutorService(threads).build());
    for (int i=0; i < 2; i++) {
      roundRobin.deleteByQuery("*:*");
    }
    for (int i=0; i < 57; i++) {
      final SolrInputDocument doc=new SolrInputDocument("id","" + i);
      if (random().nextBoolean()) {
        final ConcurrentUpdateSolrClient concurrentClient=concurrentClients.get(random().nextInt(concurrentClients.size()));
        concurrentClient.add(doc);
        concurrentClient.blockUntilFinished();
      }
 else {
        if (random().nextBoolean()) {
          roundRobin.add(doc);
        }
 else {
          final UpdateRequest updateRequest=new UpdateRequest();
          updateRequest.add(doc);
          final List<String> urls=Arrays.asList(fooUrl,barUrl);
          Collections.shuffle(urls,random());
          LBHttpSolrClient.Req req=new LBHttpSolrClient.Req(updateRequest,urls);
          roundRobin.request(req);
        }
      }
    }
    for (int i=0; i < 2; i++) {
      roundRobin.commit();
    }
    int total=0;
    for (int i=0; i < 2; i++) {
      total+=roundRobin.query(new SolrQuery("*:*")).getResults().getNumFound();
    }
    assertEquals(57,total);
    PoolStats stats=pool.getTotalStats();
    assertEquals("expected number of connections shouldn't exceed number of endpoints" + stats,2,stats.getAvailable());
  }
  finally {
    threads.shutdown();
    HttpClientUtil.close(httpClient);
  }
}
