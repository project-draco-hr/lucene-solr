{
  ArrayList docFrags=new ArrayList();
  TextFragment currentFrag=new TextFragment(newText.length(),docFrags.size());
  fragmentScorer.startFragment(currentFrag);
  docFrags.add(currentFrag);
  FragmentQueue fragQueue=new FragmentQueue(maxNumFragments);
  try {
    org.apache.lucene.analysis.Token token;
    String tokenText;
    int startOffset;
    int endOffset;
    int lastEndOffset=0;
    textFragmenter.start(text);
    while ((token=tokenStream.next()) != null) {
      startOffset=token.startOffset();
      endOffset=token.endOffset();
      tokenText=text.substring(startOffset,endOffset);
      if (startOffset > lastEndOffset)       newText.append(text.substring(lastEndOffset,startOffset));
      float score=fragmentScorer.getTokenScore(token);
      newText.append(formatter.highlightTerm(tokenText,token.termText(),score,startOffset));
      if (textFragmenter.isNewFragment(token)) {
        currentFrag.setScore(fragmentScorer.getFragmentScore());
        currentFrag.textEndPos=newText.length();
        currentFrag=new TextFragment(newText.length(),docFrags.size());
        fragmentScorer.startFragment(currentFrag);
        docFrags.add(currentFrag);
      }
      lastEndOffset=endOffset;
      if (lastEndOffset > maxDocBytesToAnalyze) {
        break;
      }
    }
    currentFrag.setScore(fragmentScorer.getFragmentScore());
    if (lastEndOffset < text.length())     newText.append(text.substring(lastEndOffset));
    currentFrag.textEndPos=newText.length();
    int minScore=0;
    for (Iterator i=docFrags.iterator(); i.hasNext(); ) {
      currentFrag=(TextFragment)i.next();
      fragQueue.insert(currentFrag);
    }
    TextFragment frag[]=new TextFragment[fragQueue.size()];
    for (int i=frag.length - 1; i >= 0; i--) {
      frag[i]=(TextFragment)fragQueue.pop();
    }
    return frag;
  }
  finally {
    if (tokenStream != null) {
      try {
        tokenStream.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
