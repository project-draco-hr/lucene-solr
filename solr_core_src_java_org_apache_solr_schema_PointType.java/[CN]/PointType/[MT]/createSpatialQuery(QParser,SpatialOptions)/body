{
  String[] pointStrs=parseCommaSeparatedList(options.pointStr,dimension);
  double[] point=new double[dimension];
  try {
    for (int i=0; i < pointStrs.length; i++) {
      point[i]=Double.parseDouble(pointStrs[i]);
    }
  }
 catch (  NumberFormatException e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  IndexSchema schema=parser.getReq().getSchema();
  if (dimension == 1) {
    String lower=String.valueOf(point[0] - options.distance);
    String upper=String.valueOf(point[0] + options.distance);
    SchemaField subSF=subField(options.field,0,schema);
    return subSF.getType().getRangeQuery(parser,subSF,lower,upper,true,true);
  }
 else {
    BooleanQuery tmp=new BooleanQuery();
    double[] ur=vectorBoxCorner(point,null,options.distance,true);
    double[] ll=vectorBoxCorner(point,null,options.distance,false);
    for (int i=0; i < ur.length; i++) {
      SchemaField subSF=subField(options.field,i,schema);
      Query range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[i]),String.valueOf(ur[i]),true,true);
      tmp.add(range,BooleanClause.Occur.MUST);
    }
    return tmp;
  }
}
