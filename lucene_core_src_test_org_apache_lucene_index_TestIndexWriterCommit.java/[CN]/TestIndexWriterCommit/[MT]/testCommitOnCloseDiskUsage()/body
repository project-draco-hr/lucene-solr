{
  final String idFormat=TestUtil.getPostingsFormat("id");
  final String contentFormat=TestUtil.getPostingsFormat("content");
  assumeFalse("This test cannot run with Memory codec",idFormat.equals("Memory") || contentFormat.equals("Memory"));
  MockDirectoryWrapper dir=newMockDirectory();
  Analyzer analyzer;
  if (random().nextBoolean()) {
    analyzer=new Analyzer(){
      @Override public TokenStreamComponents createComponents(      String fieldName){
        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE,true));
      }
    }
;
  }
 else {
    final int length=random().nextInt(200);
    analyzer=new Analyzer(){
      @Override public TokenStreamComponents createComponents(      String fieldName){
        Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,true);
        return new TokenStreamComponents(tokenizer,new MockFixedLengthPayloadFilter(random(),tokenizer,length));
      }
    }
;
  }
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(analyzer).setMaxBufferedDocs(10).setReaderPooling(false).setMergePolicy(newLogMergePolicy(10)));
  for (int j=0; j < 30; j++) {
    TestIndexWriter.addDocWithIndex(writer,j);
  }
  writer.close();
  dir.resetMaxUsedSizeInBytes();
  dir.setTrackDiskUsage(true);
  long startDiskUsage=dir.getMaxUsedSizeInBytes();
  writer=new IndexWriter(dir,newIndexWriterConfig(analyzer).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(false).setMergePolicy(newLogMergePolicy(10)));
  for (int j=0; j < 1470; j++) {
    TestIndexWriter.addDocWithIndex(writer,j);
  }
  long midDiskUsage=dir.getMaxUsedSizeInBytes();
  dir.resetMaxUsedSizeInBytes();
  writer.forceMerge(1);
  writer.close();
  DirectoryReader.open(dir).close();
  long endDiskUsage=dir.getMaxUsedSizeInBytes();
  assertTrue("writer used too much space while adding documents: mid=" + midDiskUsage + " start="+ startDiskUsage+ " end="+ endDiskUsage+ " max="+ (startDiskUsage * 150),midDiskUsage < 150 * startDiskUsage);
  assertTrue("writer used too much space after close: endDiskUsage=" + endDiskUsage + " startDiskUsage="+ startDiskUsage+ " max="+ (startDiskUsage * 150),endDiskUsage < 150 * startDiskUsage);
  dir.close();
}
