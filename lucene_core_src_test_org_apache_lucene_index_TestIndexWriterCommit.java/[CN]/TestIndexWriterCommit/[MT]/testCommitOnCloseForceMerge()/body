{
  Directory dir=newDirectory();
  if (dir instanceof MockDirectoryWrapper) {
    ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);
  }
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy(10)));
  for (int j=0; j < 17; j++) {
    TestIndexWriter.addDocWithIndex(writer,j);
  }
  writer.shutdown();
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
  writer.forceMerge(1);
  DirectoryReader reader=DirectoryReader.open(dir);
  assertTrue("Reader incorrectly sees one segment",reader.leaves().size() > 1);
  reader.close();
  writer.rollback();
  TestIndexWriter.assertNoUnreferencedFiles(dir,"aborted writer after forceMerge");
  reader=DirectoryReader.open(dir);
  assertTrue("Reader incorrectly sees one segment",reader.leaves().size() > 1);
  reader.close();
  if (VERBOSE) {
    System.out.println("TEST: do real full merge");
  }
  writer=new IndexWriter(dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));
  writer.forceMerge(1);
  writer.shutdown();
  if (VERBOSE) {
    System.out.println("TEST: writer closed");
  }
  TestIndexWriter.assertNoUnreferencedFiles(dir,"aborted writer after forceMerge");
  reader=DirectoryReader.open(dir);
  assertEquals("Reader incorrectly sees more than one segment",1,reader.leaves().size());
  reader.close();
  dir.close();
}
