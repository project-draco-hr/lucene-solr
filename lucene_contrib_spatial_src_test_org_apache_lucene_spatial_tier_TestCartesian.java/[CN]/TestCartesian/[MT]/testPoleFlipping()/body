{
  searcher=new IndexSearcher(directory,true);
  final double miles=3500.0;
  lat=41.6032207;
  lng=-73.087749;
  if (VERBOSE)   System.out.println("testPoleFlipping");
  final DistanceQueryBuilder dq=new DistanceQueryBuilder(lat,lng,miles,latField,lngField,CartesianTierPlotter.DEFALT_FIELD_PREFIX,true,2,15);
  if (VERBOSE)   System.out.println(dq);
  Query tq=new TermQuery(new Term("metafile","doc"));
  FieldScoreQuery fsQuery=new FieldScoreQuery("geo_distance",Type.FLOAT);
  CustomScoreQuery customScore=new CustomScoreQuery(dq.getQuery(tq),fsQuery){
    @Override protected CustomScoreProvider getCustomScoreProvider(    IndexReader reader){
      return new CustomScoreProvider(reader){
        @Override public float customScore(        int doc,        float subQueryScore,        float valSrcScore){
          if (VERBOSE)           System.out.println(doc);
          if (dq.distanceFilter.getDistance(doc) == null)           return 0;
          double distance=dq.distanceFilter.getDistance(doc);
          if (distance < 1.0d)           distance=1.0d;
          float score=(float)((miles - distance) / miles);
          return score * subQueryScore;
        }
      }
;
    }
  }
;
  DistanceFieldComparatorSource dsort=new DistanceFieldComparatorSource(dq.distanceFilter);
  Sort sort=new Sort(new SortField("foo",dsort,false));
  TopDocs hits=searcher.search(customScore.createWeight(searcher),null,1000,sort);
  int results=hits.totalHits;
  ScoreDoc[] scoreDocs=hits.scoreDocs;
  Map<Integer,Double> distances=dq.distanceFilter.getDistances();
  if (VERBOSE) {
    System.out.println("Distance Filter filtered: " + distances.size());
    System.out.println("Results: " + results);
    System.out.println("=============================");
    System.out.println("Distances should be 18 " + distances.size());
    System.out.println("Results should be 18 " + results);
  }
  assertEquals(18,distances.size());
  assertEquals(18,results);
  double lastDistance=0;
  for (int i=0; i < results; i++) {
    Document d=searcher.doc(scoreDocs[i].doc);
    String name=d.get("name");
    double rsLat=Double.parseDouble(d.get(latField));
    double rsLng=Double.parseDouble(d.get(lngField));
    Double geo_distance=distances.get(scoreDocs[i].doc);
    double distance=DistanceUtils.getInstance().getDistanceMi(lat,lng,rsLat,rsLng);
    double llm=DistanceUtils.getInstance().getLLMDistance(lat,lng,rsLat,rsLng);
    if (VERBOSE)     System.out.println("Name: " + name + ", Distance "+ distance);
    assertTrue(Math.abs((distance - llm)) < 1);
    if (VERBOSE)     System.out.println("checking limit " + distance + " < "+ miles);
    assertTrue((distance < miles));
    if (VERBOSE)     System.out.println("checking sort " + geo_distance + " >= "+ lastDistance);
    assertTrue(geo_distance >= lastDistance);
    lastDistance=geo_distance;
  }
}
