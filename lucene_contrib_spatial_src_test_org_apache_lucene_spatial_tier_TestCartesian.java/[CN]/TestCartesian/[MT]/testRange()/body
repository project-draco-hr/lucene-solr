{
  IndexReader reader=IndexReader.open(directory);
  searcher=new IndexSearcher(reader);
  final double[] milesToTest=new double[]{6.0,0.5,0.001,0.0};
  final int[] expected=new int[]{7,1,0,0};
  for (int x=0; x < expected.length; x++) {
    final double miles=milesToTest[x];
    final DistanceQueryBuilder dq=new DistanceQueryBuilder(lat,lng,miles,latField,lngField,CartesianTierPlotter.DEFALT_FIELD_PREFIX,true,2,15);
    if (VERBOSE)     System.out.println(dq);
    Query tq=new TermQuery(new Term("metafile","doc"));
    DistanceFieldComparatorSource dsort=new DistanceFieldComparatorSource(dq.distanceFilter);
    Sort sort=new Sort(new SortField("foo",dsort,false));
    TopDocs hits=searcher.search(dq.getQuery(tq),null,1000,sort);
    int results=hits.totalHits;
    ScoreDoc[] scoreDocs=hits.scoreDocs;
    Map<Integer,Double> distances=dq.distanceFilter.getDistances();
    if (VERBOSE) {
      System.out.println("Distance Filter filtered: " + distances.size());
      System.out.println("Results: " + results);
      System.out.println("=============================");
      System.out.println("Distances should be 7 " + expected[x] + ":"+ distances.size());
      System.out.println("Results should be 7 " + expected[x] + ":"+ results);
    }
    assertEquals(expected[x],distances.size());
    assertEquals(expected[x],results);
    double lastDistance=0;
    for (int i=0; i < results; i++) {
      Document d=searcher.doc(scoreDocs[i].doc);
      String name=d.get("name");
      double rsLat=Double.parseDouble(d.get(latField));
      double rsLng=Double.parseDouble(d.get(lngField));
      Double geo_distance=distances.get(scoreDocs[i].doc);
      double distance=DistanceUtils.getDistanceMi(lat,lng,rsLat,rsLng);
      double llm=DistanceUtils.getLLMDistance(lat,lng,rsLat,rsLng);
      if (VERBOSE)       System.out.println("Name: " + name + ", Distance "+ distance);
      assertTrue(Math.abs((distance - llm)) < 1);
      assertTrue((distance < miles));
      assertTrue(geo_distance > lastDistance);
      lastDistance=geo_distance;
    }
  }
  reader.close();
}
