{
  String p=args.remove("precisionStep");
  if (p != null) {
    precisionStep=Integer.parseInt(p);
  }
  String t=args.remove("type");
  if (t == null) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Invalid type specified in schema.xml for field: " + args.get("name"));
  }
 else {
    try {
      type=TrieTypes.valueOf(t.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Invalid type specified in schema.xml for field: " + args.get("name"),e);
    }
  }
  CharFilterFactory[] filterFactories=new CharFilterFactory[0];
  TokenFilterFactory[] tokenFilterFactories=new TokenFilterFactory[0];
  analyzer=new TokenizerChain(filterFactories,new TrieTokenizerFactory(type,precisionStep),tokenFilterFactories);
  queryAnalyzer=new TokenizerChain(filterFactories,new TrieTokenizerFactory(type,Integer.MAX_VALUE),tokenFilterFactories);
}
