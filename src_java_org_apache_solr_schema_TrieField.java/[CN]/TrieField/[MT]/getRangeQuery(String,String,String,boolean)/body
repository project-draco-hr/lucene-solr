{
  Filter filter=null;
switch (type) {
case INTEGER:
    filter=new IntTrieRangeFilter(field,field,precisionStep,"*".equals(min) ? null : Integer.parseInt(min),"*".equals(max) ? null : Integer.parseInt(max),inclusive,inclusive);
  break;
case FLOAT:
filter=new IntTrieRangeFilter(field,field,precisionStep,"*".equals(min) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),"*".equals(max) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),inclusive,inclusive);
break;
case LONG:
filter=new LongTrieRangeFilter(field,field,precisionStep,"*".equals(min) ? null : Long.parseLong(min),"*".equals(max) ? null : Long.parseLong(max),inclusive,inclusive);
break;
case DOUBLE:
filter=new LongTrieRangeFilter(field,field,precisionStep,"*".equals(min) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),"*".equals(max) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),inclusive,inclusive);
break;
case DATE:
filter=new LongTrieRangeFilter(field,field,precisionStep,"*".equals(min) ? null : dateField.parseMath(null,min).getTime(),"*".equals(max) ? null : dateField.parseMath(null,max).getTime(),inclusive,inclusive);
break;
default :
throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unknown type for trie field");
}
return new ConstantScoreQuery(filter);
}
